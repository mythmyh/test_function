
test_function.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020d54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005a024  08020ee4  08020ee4  00030ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807af08  0807af08  000900a4  2**0
                  CONTENTS
  4 .ARM          00000008  0807af08  0807af08  0008af08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807af10  0807af10  000900a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807af10  0807af10  0008af10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807af14  0807af14  0008af14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0807af18  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000900a4  2**0
                  CONTENTS
 10 .bss          000146e8  200000a4  200000a4  000900a4  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  2001478c  2001478c  000900a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000900a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00057f2d  00000000  00000000  000900d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a739  00000000  00000000  000e8001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e28  00000000  00000000  000f2740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002c18  00000000  00000000  000f5568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003790e  00000000  00000000  000f8180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004bed5  00000000  00000000  0012fa8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd6d4  00000000  00000000  0017b963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00279037  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cd18  00000000  00000000  0027908c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08020ecc 	.word	0x08020ecc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08020ecc 	.word	0x08020ecc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <WM8978_Register_Wirter>:
static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma);
static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s, uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size);

HAL_StatusTypeDef WM8978_Register_Wirter(uint8_t reg_addr, uint16_t data)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af02      	add	r7, sp, #8
 800059e:	4603      	mov	r3, r0
 80005a0:	460a      	mov	r2, r1
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	80bb      	strh	r3, [r7, #4]
	uint8_t pData[10] =	{ 0 };
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	809a      	strh	r2, [r3, #4]

	pData[0] = (reg_addr << 1) | ((data >> 8) & 0x01);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	b25a      	sxtb	r2, r3
 80005bc:	88bb      	ldrh	r3, [r7, #4]
 80005be:	0a1b      	lsrs	r3, r3, #8
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b25b      	sxtb	r3, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	733b      	strb	r3, [r7, #12]
	pData[1] = data & 0xFF;
 80005d2:	88bb      	ldrh	r3, [r7, #4]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&hi2c1, WM8978_WIRTE_ADDRESS, pData, 2, 1000);
 80005d8:	f107 020c 	add.w	r2, r7, #12
 80005dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2302      	movs	r3, #2
 80005e4:	2134      	movs	r1, #52	; 0x34
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <WM8978_Register_Wirter+0x60>)
 80005e8:	f004 ff6c 	bl	80054c4 <HAL_I2C_Master_Transmit>
 80005ec:	4603      	mov	r3, r0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000cccc 	.word	0x2000cccc

080005fc <WAV_FileInit>:



void WAV_FileInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	DataLength = sizeof(data) - 0x2c;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <WAV_FileInit+0x1c>)
 8000602:	4a06      	ldr	r2, [pc, #24]	; (800061c <WAV_FileInit+0x20>)
 8000604:	601a      	str	r2, [r3, #0]
	DataAddress = (uint8_t*) (data + 0x2c);
 8000606:	4a06      	ldr	r2, [pc, #24]	; (8000620 <WAV_FileInit+0x24>)
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <WAV_FileInit+0x28>)
 800060a:	601a      	str	r2, [r3, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200000c0 	.word	0x200000c0
 800061c:	00029e7c 	.word	0x00029e7c
 8000620:	08023e78 	.word	0x08023e78
 8000624:	200000c4 	.word	0x200000c4

08000628 <WAV_FileRead2>:


uint32_t WAV_FileRead2(uint8_t *buf, uint32_t size)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
bw=0;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <WAV_FileRead2+0x90>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
	 f_read(&abc,buf,size,&bw);//16bit音频,直接读取数据
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <WAV_FileRead2+0x90>)
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	481f      	ldr	r0, [pc, #124]	; (80006bc <WAV_FileRead2+0x94>)
 8000640:	f00e f802 	bl	800e648 <f_read>
	 if(bw==0){
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <WAV_FileRead2+0x90>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d12f      	bne.n	80006ac <WAV_FileRead2+0x84>
			 if(bw<BUFFER_SIZE)//不够数据了,补充0
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <WAV_FileRead2+0x90>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000654:	d219      	bcs.n	800068a <WAV_FileRead2+0x62>
			 		{
			 			for(i=bw;i<BUFFER_SIZE-bw;i++)buf[i]=0;
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <WAV_FileRead2+0x90>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <WAV_FileRead2+0x98>)
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	e00b      	b.n	800067a <WAV_FileRead2+0x52>
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <WAV_FileRead2+0x98>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	461a      	mov	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4413      	add	r3, r2
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <WAV_FileRead2+0x98>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <WAV_FileRead2+0x98>)
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <WAV_FileRead2+0x90>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000682:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <WAV_FileRead2+0x98>)
 8000684:	6812      	ldr	r2, [r2, #0]
 8000686:	4293      	cmp	r3, r2
 8000688:	d8eb      	bhi.n	8000662 <WAV_FileRead2+0x3a>
			 		}
			 f_close(&abc);
 800068a:	480c      	ldr	r0, [pc, #48]	; (80006bc <WAV_FileRead2+0x94>)
 800068c:	f00e fb77 	bl	800ed7e <f_close>
				HAL_UART_Transmit(&huart1,"ddd",3,100);
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	2203      	movs	r2, #3
 8000694:	490b      	ldr	r1, [pc, #44]	; (80006c4 <WAV_FileRead2+0x9c>)
 8000696:	480c      	ldr	r0, [pc, #48]	; (80006c8 <WAV_FileRead2+0xa0>)
 8000698:	f008 fd97 	bl	80091ca <HAL_UART_Transmit>

			  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_9,GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <WAV_FileRead2+0xa4>)
 80006a4:	f004 fdb0 	bl	8005208 <HAL_GPIO_WritePin>

			 return 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	e000      	b.n	80006ae <WAV_FileRead2+0x86>
		 }



	return 1;
 80006ac:	2301      	movs	r3, #1
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000c964 	.word	0x2000c964
 80006bc:	2000cd2c 	.word	0x2000cd2c
 80006c0:	2000c960 	.word	0x2000c960
 80006c4:	08020ee4 	.word	0x08020ee4
 80006c8:	2000cf60 	.word	0x2000cf60
 80006cc:	40021800 	.word	0x40021800

080006d0 <HAL_I2S_Transmit_DMAEx>:

HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s, uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af02      	add	r7, sp, #8
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
 80006dc:	807b      	strh	r3, [r7, #2]
	uint32_t tmpreg_cfgr;

	if ((FirstBuffer == NULL) || (SecondBuffer == NULL) || (Size == 0U))
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d005      	beq.n	80006f0 <HAL_I2S_Transmit_DMAEx+0x20>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d002      	beq.n	80006f0 <HAL_I2S_Transmit_DMAEx+0x20>
 80006ea:	887b      	ldrh	r3, [r7, #2]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d101      	bne.n	80006f4 <HAL_I2S_Transmit_DMAEx+0x24>
	{
		return HAL_ERROR;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e09c      	b.n	800082e <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Process Locked */
	__HAL_LOCK(hi2s);
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d101      	bne.n	8000704 <HAL_I2S_Transmit_DMAEx+0x34>
 8000700:	2302      	movs	r3, #2
 8000702:	e094      	b.n	800082e <HAL_I2S_Transmit_DMAEx+0x15e>
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2201      	movs	r2, #1
 8000708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (hi2s->State != HAL_I2S_STATE_READY)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b01      	cmp	r3, #1
 8000716:	d005      	beq.n	8000724 <HAL_I2S_Transmit_DMAEx+0x54>
	{
		__HAL_UNLOCK(hi2s);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_BUSY;
 8000720:	2302      	movs	r3, #2
 8000722:	e084      	b.n	800082e <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Set state and reset error code */
	hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2203      	movs	r2, #3
 8000728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2200      	movs	r2, #0
 8000730:	645a      	str	r2, [r3, #68]	; 0x44
	hi2s->pTxBuffPtr = FirstBuffer;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	68ba      	ldr	r2, [r7, #8]
 8000736:	625a      	str	r2, [r3, #36]	; 0x24

	tmpreg_cfgr = hi2s->Instance->I2SCFGR
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	617b      	str	r3, [r7, #20]
			& (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);

	if ((tmpreg_cfgr == I2S_DATAFORMAT_24B)
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b03      	cmp	r3, #3
 8000748:	d002      	beq.n	8000750 <HAL_I2S_Transmit_DMAEx+0x80>
			|| (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	2b05      	cmp	r3, #5
 800074e:	d10a      	bne.n	8000766 <HAL_I2S_Transmit_DMAEx+0x96>
	{
		hi2s->TxXferSize = (Size << 1U);
 8000750:	887b      	ldrh	r3, [r7, #2]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	b29a      	uxth	r2, r3
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = (Size << 1U);
 800075a:	887b      	ldrh	r3, [r7, #2]
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	b29a      	uxth	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000764:	e005      	b.n	8000772 <HAL_I2S_Transmit_DMAEx+0xa2>
	}
	else
	{
		hi2s->TxXferSize = Size;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	887a      	ldrh	r2, [r7, #2]
 800076a:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = Size;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	887a      	ldrh	r2, [r7, #2]
 8000770:	855a      	strh	r2, [r3, #42]	; 0x2a
	}

	/* Set the I2S Tx DMA Half transfer complete callback */
	hi2s->hdmatx->XferHalfCpltCallback = NULL;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000776:	2200      	movs	r2, #0
 8000778:	641a      	str	r2, [r3, #64]	; 0x40
	hi2s->hdmatx->XferM1HalfCpltCallback = NULL;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800077e:	2200      	movs	r2, #0
 8000780:	649a      	str	r2, [r3, #72]	; 0x48

	/* Set the I2S Tx DMA transfer complete callback */
	hi2s->hdmatx->XferCpltCallback = DMAEx_XferCpltCallback;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000786:	4a2c      	ldr	r2, [pc, #176]	; (8000838 <HAL_I2S_Transmit_DMAEx+0x168>)
 8000788:	63da      	str	r2, [r3, #60]	; 0x3c
	hi2s->hdmatx->XferM1CpltCallback = DMAEx_XferM1CpltCallback;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800078e:	4a2b      	ldr	r2, [pc, #172]	; (800083c <HAL_I2S_Transmit_DMAEx+0x16c>)
 8000790:	645a      	str	r2, [r3, #68]	; 0x44

	/* Set the DMA error callback */
	hi2s->hdmatx->XferErrorCallback = DMAEx_XferErrorCallback;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000796:	4a2a      	ldr	r2, [pc, #168]	; (8000840 <HAL_I2S_Transmit_DMAEx+0x170>)
 8000798:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set the DMA abort callback */
	hi2s->hdmatx->XferAbortCallback = NULL;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800079e:	2200      	movs	r2, #0
 80007a0:	651a      	str	r2, [r3, #80]	; 0x50

	/* Enable the Tx DMA Stream/Channel */
	if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx, (uint32_t) FirstBuffer, (uint32_t) &hi2s->Instance->DR, (uint32_t) SecondBuffer,	hi2s->TxXferSize))
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80007a6:	68b9      	ldr	r1, [r7, #8]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	330c      	adds	r3, #12
 80007ae:	461c      	mov	r4, r3
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	4613      	mov	r3, r2
 80007bc:	4622      	mov	r2, r4
 80007be:	f002 f85b 	bl	8002878 <HAL_DMAEx_MultiBufferStart_IT>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d00f      	beq.n	80007e8 <HAL_I2S_Transmit_DMAEx+0x118>
	{
		/* Update SPI error code */
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007cc:	f043 0208 	orr.w	r2, r3, #8
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	645a      	str	r2, [r3, #68]	; 0x44
		hi2s->State = HAL_I2S_STATE_READY;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2201      	movs	r2, #1
 80007d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		__HAL_UNLOCK(hi2s);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e022      	b.n	800082e <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Check if the I2S is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d107      	bne.n	8000806 <HAL_I2S_Transmit_DMAEx+0x136>
	{
		/* Enable I2S peripheral */
		__HAL_I2S_ENABLE(hi2s);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	69da      	ldr	r2, [r3, #28]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000804:	61da      	str	r2, [r3, #28]
	}

	/* Check if the I2S Tx request is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	2b00      	cmp	r3, #0
 8000812:	d107      	bne.n	8000824 <HAL_I2S_Transmit_DMAEx+0x154>
	{
		/* Enable Tx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f042 0202 	orr.w	r2, r2, #2
 8000822:	605a      	str	r2, [r3, #4]
	}

	__HAL_UNLOCK(hi2s);
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2200      	movs	r2, #0
 8000828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return HAL_OK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	371c      	adds	r7, #28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	bf00      	nop
 8000838:	08000845 	.word	0x08000845
 800083c:	0800087d 	.word	0x0800087d
 8000840:	080008a5 	.word	0x080008a5

08000844 <DMAEx_XferCpltCallback>:



static void DMAEx_XferCpltCallback(struct __DMA_HandleTypeDef *hdma)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

	if(DMA1_Stream4->CR&(1<<19)){
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <DMAEx_XferCpltCallback+0x30>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000854:	2b00      	cmp	r3, #0
 8000856:	d009      	beq.n	800086c <DMAEx_XferCpltCallback+0x28>
		if (WAV_FileRead2((uint8_t*)I2S_Buf0,sizeof(I2S_Buf0)) == 0)
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <DMAEx_XferCpltCallback+0x34>)
 800085e:	f7ff fee3 	bl	8000628 <WAV_FileRead2>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d101      	bne.n	800086c <DMAEx_XferCpltCallback+0x28>
			{
				Audio_Player_Stop();
 8000868:	f000 f8e8 	bl	8000a3c <Audio_Player_Stop>
			}

	}

}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40026070 	.word	0x40026070
 8000878:	200000c8 	.word	0x200000c8

0800087c <DMAEx_XferM1CpltCallback>:

static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

		if (WAV_FileRead2((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1)) == 0)
 8000884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <DMAEx_XferM1CpltCallback+0x24>)
 800088a:	f7ff fecd 	bl	8000628 <WAV_FileRead2>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d101      	bne.n	8000898 <DMAEx_XferM1CpltCallback+0x1c>
			{
				Audio_Player_Stop();
 8000894:	f000 f8d2 	bl	8000a3c <Audio_Player_Stop>





}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200004c8 	.word	0x200004c8

080008a4 <DMAEx_XferErrorCallback>:

static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <Audio_Player_Init>:

void Audio_Player_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	WM8978_Register_Wirter(0, 0);
 80008bc:	2100      	movs	r1, #0
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff fe6a 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(1, 0x0F);
 80008c4:	210f      	movs	r1, #15
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff fe66 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(2, 0x180);	// ģ��Ŵ���ʹ�ܣ�?? ʹ��������뻺����??
 80008cc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80008d0:	2002      	movs	r0, #2
 80008d2:	f7ff fe61 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(3, 0x7F);
 80008d6:	217f      	movs	r1, #127	; 0x7f
 80008d8:	2003      	movs	r0, #3
 80008da:	f7ff fe5d 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(4, 0x10);
 80008de:	2110      	movs	r1, #16
 80008e0:	2004      	movs	r0, #4
 80008e2:	f7ff fe59 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(6, 0);
 80008e6:	2100      	movs	r1, #0
 80008e8:	2006      	movs	r0, #6
 80008ea:	f7ff fe55 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(10, 0x08);
 80008ee:	2108      	movs	r1, #8
 80008f0:	200a      	movs	r0, #10
 80008f2:	f7ff fe51 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(43, 0x10);
 80008f6:	2110      	movs	r1, #16
 80008f8:	202b      	movs	r0, #43	; 0x2b
 80008fa:	f7ff fe4d 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(52,40);		// 设置LOUT2左声道音�????
 80008fe:	2128      	movs	r1, #40	; 0x28
 8000900:	2034      	movs	r0, #52	; 0x34
 8000902:	f7ff fe49 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(53,40|(1<<8));
 8000906:	f44f 7194 	mov.w	r1, #296	; 0x128
 800090a:	2035      	movs	r0, #53	; 0x35
 800090c:	f7ff fe44 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(54, 50);
 8000910:	2132      	movs	r1, #50	; 0x32
 8000912:	2036      	movs	r0, #54	; 0x36
 8000914:	f7ff fe40 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(55, 50 | (1 << 8));
 8000918:	f44f 7199 	mov.w	r1, #306	; 0x132
 800091c:	2037      	movs	r0, #55	; 0x37
 800091e:	f7ff fe3b 	bl	8000598 <WM8978_Register_Wirter>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}

08000926 <Audio_Set_Volume>:

void Audio_Set_Volume(int num)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
	WM8978_Register_Wirter(0, 0);
 800092e:	2100      	movs	r1, #0
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff fe31 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(1, 0x0F);
 8000936:	210f      	movs	r1, #15
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fe2d 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(2, 0x180);	// ģ��Ŵ���ʹ�ܣ�?? ʹ��������뻺����??
 800093e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff fe28 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(3, 0x7F);
 8000948:	217f      	movs	r1, #127	; 0x7f
 800094a:	2003      	movs	r0, #3
 800094c:	f7ff fe24 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(4, 0x10);
 8000950:	2110      	movs	r1, #16
 8000952:	2004      	movs	r0, #4
 8000954:	f7ff fe20 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(6, 0);
 8000958:	2100      	movs	r1, #0
 800095a:	2006      	movs	r0, #6
 800095c:	f7ff fe1c 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(10, 0x08);
 8000960:	2108      	movs	r1, #8
 8000962:	200a      	movs	r0, #10
 8000964:	f7ff fe18 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(43, 0x10);
 8000968:	2110      	movs	r1, #16
 800096a:	202b      	movs	r0, #43	; 0x2b
 800096c:	f7ff fe14 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(52,num);		// 设置LOUT2左声道音�????
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	b29b      	uxth	r3, r3
 8000974:	4619      	mov	r1, r3
 8000976:	2034      	movs	r0, #52	; 0x34
 8000978:	f7ff fe0e 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(53,num|(1<<8));
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	b21b      	sxth	r3, r3
 8000980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000984:	b21b      	sxth	r3, r3
 8000986:	b29b      	uxth	r3, r3
 8000988:	4619      	mov	r1, r3
 800098a:	2035      	movs	r0, #53	; 0x35
 800098c:	f7ff fe04 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(54, num);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	b29b      	uxth	r3, r3
 8000994:	4619      	mov	r1, r3
 8000996:	2036      	movs	r0, #54	; 0x36
 8000998:	f7ff fdfe 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(55, num | (1 << 8));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	b21b      	sxth	r3, r3
 80009a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	4619      	mov	r1, r3
 80009aa:	2037      	movs	r0, #55	; 0x37
 80009ac:	f7ff fdf4 	bl	8000598 <WM8978_Register_Wirter>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <Audio_Player_Start>:

void Audio_Player_Start(const char* filename[])
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
		memset(audioname, '\0', 30);
 80009c0:	221e      	movs	r2, #30
 80009c2:	2100      	movs	r1, #0
 80009c4:	4816      	ldr	r0, [pc, #88]	; (8000a20 <Audio_Player_Start+0x68>)
 80009c6:	f01e fab9 	bl	801ef3c <memset>
		strcat(audioname,file_prefix);
 80009ca:	4916      	ldr	r1, [pc, #88]	; (8000a24 <Audio_Player_Start+0x6c>)
 80009cc:	4814      	ldr	r0, [pc, #80]	; (8000a20 <Audio_Player_Start+0x68>)
 80009ce:	f01e fc50 	bl	801f272 <strcat>
		strcat(audioname,filename);
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	4812      	ldr	r0, [pc, #72]	; (8000a20 <Audio_Player_Start+0x68>)
 80009d6:	f01e fc4c 	bl	801f272 <strcat>
		strcat(audioname,end);
 80009da:	4913      	ldr	r1, [pc, #76]	; (8000a28 <Audio_Player_Start+0x70>)
 80009dc:	4810      	ldr	r0, [pc, #64]	; (8000a20 <Audio_Player_Start+0x68>)
 80009de:	f01e fc48 	bl	801f272 <strcat>
		//HAL_UART_Transmit(&huart1,"zzz",3,100);
	    f_open(&abc,audioname, FA_READ);
 80009e2:	2201      	movs	r2, #1
 80009e4:	490e      	ldr	r1, [pc, #56]	; (8000a20 <Audio_Player_Start+0x68>)
 80009e6:	4811      	ldr	r0, [pc, #68]	; (8000a2c <Audio_Player_Start+0x74>)
 80009e8:	f00d fbdc 	bl	800e1a4 <f_open>
		//HAL_UART_Transmit(&huart1,"aaa",3,100);
		f_lseek(&abc,600);
 80009ec:	f44f 7116 	mov.w	r1, #600	; 0x258
 80009f0:	480e      	ldr	r0, [pc, #56]	; (8000a2c <Audio_Player_Start+0x74>)
 80009f2:	f00e f9f3 	bl	800eddc <f_lseek>
		//HAL_UART_Transmit(&huart1,"bbb",3,100);
		WAV_FileRead2((uint8_t*) I2S_Buf0, sizeof(I2S_Buf0));
 80009f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <Audio_Player_Start+0x78>)
 80009fc:	f7ff fe14 	bl	8000628 <WAV_FileRead2>
		WAV_FileRead2((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1));
 8000a00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a04:	480b      	ldr	r0, [pc, #44]	; (8000a34 <Audio_Player_Start+0x7c>)
 8000a06:	f7ff fe0f 	bl	8000628 <WAV_FileRead2>
		HAL_I2S_Transmit_DMAEx(&hi2s2, I2S_Buf0, I2S_Buf1, BUFFER_SIZE);
 8000a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a0e:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <Audio_Player_Start+0x7c>)
 8000a10:	4907      	ldr	r1, [pc, #28]	; (8000a30 <Audio_Player_Start+0x78>)
 8000a12:	4809      	ldr	r0, [pc, #36]	; (8000a38 <Audio_Player_Start+0x80>)
 8000a14:	f7ff fe5c 	bl	80006d0 <HAL_I2S_Transmit_DMAEx>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000c940 	.word	0x2000c940
 8000a24:	20000000 	.word	0x20000000
 8000a28:	2000000c 	.word	0x2000000c
 8000a2c:	2000cd2c 	.word	0x2000cd2c
 8000a30:	200000c8 	.word	0x200000c8
 8000a34:	200004c8 	.word	0x200004c8
 8000a38:	2000d31c 	.word	0x2000d31c

08000a3c <Audio_Player_Stop>:
{
	HAL_I2S_DMAResume(&hi2s2);
}

void Audio_Player_Stop(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	WAV_FileInit();
 8000a40:	f7ff fddc 	bl	80005fc <WAV_FileInit>
	HAL_I2S_DMAStop(&hi2s2);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <Audio_Player_Stop+0x14>)
 8000a46:	f005 f985 	bl	8005d54 <HAL_I2S_DMAStop>
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000d31c 	.word	0x2000d31c

08000a54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <vApplicationGetIdleTaskMemory+0x30>)
 8000a6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200008c8 	.word	0x200008c8
 8000a84:	2000091c 	.word	0x2000091c

08000a88 <CGIForm_Handler>:
char circule[10];
tCGI CGI_TAB[3];


const char *CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]

	//Audio_Set_Volume(20);

	//  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_9,GPIO_PIN_RESET);

	if (iIndex == 0)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d177      	bne.n	8000b8c <CGIForm_Handler+0x104>
	{
		for (int i=0; i<iNumParams; i++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e048      	b.n	8000b34 <CGIForm_Handler+0xac>
		{
			if (strcmp(pcParam[i], "cmd") == 0)  // if the fname string is found
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	493a      	ldr	r1, [pc, #232]	; (8000b98 <CGIForm_Handler+0x110>)
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fb8e 	bl	80001d0 <strcmp>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10e      	bne.n	8000ad8 <CGIForm_Handler+0x50>
			{
				memset(name, '\0', 30);
 8000aba:	221e      	movs	r2, #30
 8000abc:	2100      	movs	r1, #0
 8000abe:	4837      	ldr	r0, [pc, #220]	; (8000b9c <CGIForm_Handler+0x114>)
 8000ac0:	f01e fa3c 	bl	801ef3c <memset>
				strcpy(name, pcValue[i]);
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4832      	ldr	r0, [pc, #200]	; (8000b9c <CGIForm_Handler+0x114>)
 8000ad2:	f01e fbea 	bl	801f2aa <strcpy>
 8000ad6:	e02a      	b.n	8000b2e <CGIForm_Handler+0xa6>


			}

			else if (strcmp(pcParam[i], "interrupt") == 0)  // if the fname string is found
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	492f      	ldr	r1, [pc, #188]	; (8000ba0 <CGIForm_Handler+0x118>)
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fb73 	bl	80001d0 <strcmp>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d109      	bne.n	8000b04 <CGIForm_Handler+0x7c>
					{
						strcpy(interrupt, pcValue[i]);
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4619      	mov	r1, r3
 8000afc:	4829      	ldr	r0, [pc, #164]	; (8000ba4 <CGIForm_Handler+0x11c>)
 8000afe:	f01e fbd4 	bl	801f2aa <strcpy>
 8000b02:	e014      	b.n	8000b2e <CGIForm_Handler+0xa6>
					}



			else if (strcmp(pcParam[i], "circule") == 0)  // if the fname string is found
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4926      	ldr	r1, [pc, #152]	; (8000ba8 <CGIForm_Handler+0x120>)
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fb5d 	bl	80001d0 <strcmp>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d108      	bne.n	8000b2e <CGIForm_Handler+0xa6>
					{
						strcpy(circule, pcValue[i]);
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	4820      	ldr	r0, [pc, #128]	; (8000bac <CGIForm_Handler+0x124>)
 8000b2a:	f01e fbbe 	bl	801f2aa <strcpy>
		for (int i=0; i<iNumParams; i++)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	dbb2      	blt.n	8000aa2 <CGIForm_Handler+0x1a>
		}




		if(interrupt[0]=='1'){
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <CGIForm_Handler+0x11c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b31      	cmp	r3, #49	; 0x31
 8000b42:	d10f      	bne.n	8000b64 <CGIForm_Handler+0xdc>
		//置为0 可以打断
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_9,GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4a:	4819      	ldr	r0, [pc, #100]	; (8000bb0 <CGIForm_Handler+0x128>)
 8000b4c:	f004 fb5c 	bl	8005208 <HAL_GPIO_WritePin>
		Audio_Player_Start(name);
 8000b50:	4812      	ldr	r0, [pc, #72]	; (8000b9c <CGIForm_Handler+0x114>)
 8000b52:	f7ff ff31 	bl	80009b8 <Audio_Player_Start>
		HAL_UART_Transmit(&huart1,"GGG",3,100);
 8000b56:	2364      	movs	r3, #100	; 0x64
 8000b58:	2203      	movs	r2, #3
 8000b5a:	4916      	ldr	r1, [pc, #88]	; (8000bb4 <CGIForm_Handler+0x12c>)
 8000b5c:	4816      	ldr	r0, [pc, #88]	; (8000bb8 <CGIForm_Handler+0x130>)
 8000b5e:	f008 fb34 	bl	80091ca <HAL_UART_Transmit>
 8000b62:	e013      	b.n	8000b8c <CGIForm_Handler+0x104>

		}else{
			  if(HAL_GPIO_ReadPin(GPIOG,GPIO_PIN_9) == 0){
 8000b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b68:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <CGIForm_Handler+0x128>)
 8000b6a:	f004 fb35 	bl	80051d8 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d10b      	bne.n	8000b8c <CGIForm_Handler+0x104>

				  //置为0不可以打断
			HAL_GPIO_WritePin(GPIOG,GPIO_PIN_9,GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <CGIForm_Handler+0x128>)
 8000b7c:	f004 fb44 	bl	8005208 <HAL_GPIO_WritePin>
									//改用uart播放模块
									  //Audio_Player_Start(name);
				HAL_UART_Transmit(&huart1,"zzzzz",3,100);
 8000b80:	2364      	movs	r3, #100	; 0x64
 8000b82:	2203      	movs	r2, #3
 8000b84:	490d      	ldr	r1, [pc, #52]	; (8000bbc <CGIForm_Handler+0x134>)
 8000b86:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <CGIForm_Handler+0x130>)
 8000b88:	f008 fb1f 	bl	80091ca <HAL_UART_Transmit>
//	  /* 网口可以重启,也可以不重启 */
//	  netif_set_down(&gnetif);
//	  netif_set_up(&gnetif);


	return "";
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <CGIForm_Handler+0x138>)
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	08020f28 	.word	0x08020f28
 8000b9c:	2000c9a4 	.word	0x2000c9a4
 8000ba0:	08020f2c 	.word	0x08020f2c
 8000ba4:	2000c998 	.word	0x2000c998
 8000ba8:	08020f38 	.word	0x08020f38
 8000bac:	2000c988 	.word	0x2000c988
 8000bb0:	40021800 	.word	0x40021800
 8000bb4:	08020f40 	.word	0x08020f40
 8000bb8:	2000cf60 	.word	0x2000cf60
 8000bbc:	08020f44 	.word	0x08020f44
 8000bc0:	08020f4c 	.word	0x08020f4c

08000bc4 <CGIVolume_Handler>:



const char *CGIVolume_Handler(int iIndex, int iNumParams, char *pcP[], char *pcV[])
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	603b      	str	r3, [r7, #0]

		for (int i=0; i<iNumParams; i++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	e027      	b.n	8000c28 <CGIVolume_Handler+0x64>
		{
			if (strcmp(pcP[i], "volume2") == 0)  // if the fname string is found
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	4413      	add	r3, r2
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4916      	ldr	r1, [pc, #88]	; (8000c3c <CGIVolume_Handler+0x78>)
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff faf3 	bl	80001d0 <strcmp>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d118      	bne.n	8000c22 <CGIVolume_Handler+0x5e>
			{
				memset(volume, '\0', 30);
 8000bf0:	221e      	movs	r2, #30
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4812      	ldr	r0, [pc, #72]	; (8000c40 <CGIVolume_Handler+0x7c>)
 8000bf6:	f01e f9a1 	bl	801ef3c <memset>
				strcpy(volume, pcV[i]);
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	4413      	add	r3, r2
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <CGIVolume_Handler+0x7c>)
 8000c08:	f01e fb4f 	bl	801f2aa <strcpy>
				num=atoi(volume);
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <CGIVolume_Handler+0x7c>)
 8000c0e:	f01e f937 	bl	801ee80 <atoi>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <CGIVolume_Handler+0x80>)
 8000c16:	6013      	str	r3, [r2, #0]
				Audio_Set_Volume(num);
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <CGIVolume_Handler+0x80>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fe82 	bl	8000926 <Audio_Set_Volume>
		for (int i=0; i<iNumParams; i++)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbd3      	blt.n	8000bd8 <CGIVolume_Handler+0x14>

		}



	return "/play.html";
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <CGIVolume_Handler+0x84>)
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08020f50 	.word	0x08020f50
 8000c40:	2000c968 	.word	0x2000c968
 8000c44:	2000c994 	.word	0x2000c994
 8000c48:	08020f58 	.word	0x08020f58

08000c4c <CGISetIP_Handler>:




const char *CGISetIP_Handler(int iIndex, int iNumParams, char *pcP[], char *pcV[])
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b098      	sub	sp, #96	; 0x60
 8000c50:	af02      	add	r7, sp, #8
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	603b      	str	r3, [r7, #0]
    unsigned char *cf ;
    unsigned char *cg;
    unsigned char *ch ;


	for (int i=0; i<iNumParams; i++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	657b      	str	r3, [r7, #84]	; 0x54
 8000c5e:	e0af      	b.n	8000dc0 <CGISetIP_Handler+0x174>
		{
			if (strcmp(pcP[i], "ip") == 0)  // if the fname string is found
 8000c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4413      	add	r3, r2
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4935      	ldr	r1, [pc, #212]	; (8000d40 <CGISetIP_Handler+0xf4>)
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff faaf 	bl	80001d0 <strcmp>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d12b      	bne.n	8000cd0 <CGISetIP_Handler+0x84>
			{
				sscanf(pcV[i],"%d.%d.%d.%d",&a,&b,&c,&d);
 8000c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000c86:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	460b      	mov	r3, r1
 8000c98:	492a      	ldr	r1, [pc, #168]	; (8000d44 <CGISetIP_Handler+0xf8>)
 8000c9a:	f01e fa79 	bl	801f190 <siscanf>

				   ce = (unsigned char *)a;
 8000c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca0:	653b      	str	r3, [r7, #80]	; 0x50
				 cf = (unsigned char *)b;
 8000ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
			cg = (unsigned char *)c;
 8000ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca8:	64bb      	str	r3, [r7, #72]	; 0x48
				  ch = (unsigned char *)d;
 8000caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cac:	647b      	str	r3, [r7, #68]	; 0x44
				ip[0]=ce;
 8000cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				ip[1]=cf;
 8000cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				ip[2]=cg;
 8000cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				ip[3]=ch;
 8000cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000cce:	e074      	b.n	8000dba <CGISetIP_Handler+0x16e>

			}

			else if (strcmp(pcP[i], "mask") == 0)  // if the fname string is found
 8000cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	491b      	ldr	r1, [pc, #108]	; (8000d48 <CGISetIP_Handler+0xfc>)
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fa77 	bl	80001d0 <strcmp>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d131      	bne.n	8000d4c <CGISetIP_Handler+0x100>
			{
				sscanf(pcV[i],"%d.%d.%d.%d",&a,&b,&c,&d);
 8000ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	6818      	ldr	r0, [r3, #0]
 8000cf2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000cf6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	460b      	mov	r3, r1
 8000d08:	490e      	ldr	r1, [pc, #56]	; (8000d44 <CGISetIP_Handler+0xf8>)
 8000d0a:	f01e fa41 	bl	801f190 <siscanf>
				   ce = (unsigned char *)a;
 8000d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d10:	653b      	str	r3, [r7, #80]	; 0x50
							 cf = (unsigned char *)b;
 8000d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d14:	64fb      	str	r3, [r7, #76]	; 0x4c
						cg = (unsigned char *)c;
 8000d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d18:	64bb      	str	r3, [r7, #72]	; 0x48
							  ch = (unsigned char *)d;
 8000d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1c:	647b      	str	r3, [r7, #68]	; 0x44
							ip[4]=ce;
 8000d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							ip[5]=cf;
 8000d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
							ip[6]=cg;
 8000d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
							ip[7]=ch;
 8000d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000d3e:	e03c      	b.n	8000dba <CGISetIP_Handler+0x16e>
 8000d40:	08020f64 	.word	0x08020f64
 8000d44:	08020f68 	.word	0x08020f68
 8000d48:	08020f74 	.word	0x08020f74

			}else if(strcmp(pcP[i],"gateway")==0){
 8000d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	4413      	add	r3, r2
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4987      	ldr	r1, [pc, #540]	; (8000f74 <CGISetIP_Handler+0x328>)
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fa39 	bl	80001d0 <strcmp>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d12a      	bne.n	8000dba <CGISetIP_Handler+0x16e>

				sscanf(pcV[i],"%d.%d.%d.%d",&a,&b,&c,&d);
 8000d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	6818      	ldr	r0, [r3, #0]
 8000d6e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d72:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	460b      	mov	r3, r1
 8000d84:	497c      	ldr	r1, [pc, #496]	; (8000f78 <CGISetIP_Handler+0x32c>)
 8000d86:	f01e fa03 	bl	801f190 <siscanf>
				   ce = (unsigned char *)a;
 8000d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d8c:	653b      	str	r3, [r7, #80]	; 0x50
							 cf = (unsigned char *)b;
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d90:	64fb      	str	r3, [r7, #76]	; 0x4c
						cg = (unsigned char *)c;
 8000d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d94:	64bb      	str	r3, [r7, #72]	; 0x48
							  ch = (unsigned char *)d;
 8000d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d98:	647b      	str	r3, [r7, #68]	; 0x44
							ip[8]=ce;
 8000d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
							ip[9]=cf;
 8000da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
							ip[10]=cg;
 8000daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
							ip[11]=ch;
 8000db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for (int i=0; i<iNumParams; i++)
 8000dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	657b      	str	r3, [r7, #84]	; 0x54
 8000dc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f6ff af4b 	blt.w	8000c60 <CGISetIP_Handler+0x14>
		  	ip4_addr_t netmask;
		  	ip4_addr_t gw;
		  	uint8_t IP_ADDRESS[4];
		  	uint8_t NETMASK_ADDRESS[4];
		  	uint8_t GATEWAY_ADDRESS[4];
		  	  IP_ADDRESS[0] = ip[0];
 8000dca:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000dce:	763b      	strb	r3, [r7, #24]
		  	  IP_ADDRESS[1] = ip[1];
 8000dd0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000dd4:	767b      	strb	r3, [r7, #25]
		  	  IP_ADDRESS[2] = ip[2];
 8000dd6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000dda:	76bb      	strb	r3, [r7, #26]
		  	  IP_ADDRESS[3] = ip[3];
 8000ddc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000de0:	76fb      	strb	r3, [r7, #27]
		  	  NETMASK_ADDRESS[0] = ip[4];
 8000de2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000de6:	753b      	strb	r3, [r7, #20]
		  	  NETMASK_ADDRESS[1] = ip[5];
 8000de8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000dec:	757b      	strb	r3, [r7, #21]
		  	  NETMASK_ADDRESS[2] =ip[6];
 8000dee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000df2:	75bb      	strb	r3, [r7, #22]
		  	  NETMASK_ADDRESS[3] = ip[7];
 8000df4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000df8:	75fb      	strb	r3, [r7, #23]
		  	  GATEWAY_ADDRESS[0] = ip[8];
 8000dfa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000dfe:	743b      	strb	r3, [r7, #16]
		  	  GATEWAY_ADDRESS[1] = ip[9];
 8000e00:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000e04:	747b      	strb	r3, [r7, #17]
		  	  GATEWAY_ADDRESS[2] = ip[10];
 8000e06:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000e0a:	74bb      	strb	r3, [r7, #18]
		  	  GATEWAY_ADDRESS[3] = ip[11];
 8000e0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000e10:	74fb      	strb	r3, [r7, #19]
		  	  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8000e12:	7e3b      	ldrb	r3, [r7, #24]
 8000e14:	061a      	lsls	r2, r3, #24
 8000e16:	7e7b      	ldrb	r3, [r7, #25]
 8000e18:	041b      	lsls	r3, r3, #16
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	7ebb      	ldrb	r3, [r7, #26]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	4313      	orrs	r3, r2
 8000e22:	7efa      	ldrb	r2, [r7, #27]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	061a      	lsls	r2, r3, #24
 8000e28:	7e3b      	ldrb	r3, [r7, #24]
 8000e2a:	0619      	lsls	r1, r3, #24
 8000e2c:	7e7b      	ldrb	r3, [r7, #25]
 8000e2e:	041b      	lsls	r3, r3, #16
 8000e30:	4319      	orrs	r1, r3
 8000e32:	7ebb      	ldrb	r3, [r7, #26]
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	430b      	orrs	r3, r1
 8000e38:	7ef9      	ldrb	r1, [r7, #27]
 8000e3a:	430b      	orrs	r3, r1
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000e42:	431a      	orrs	r2, r3
 8000e44:	7e3b      	ldrb	r3, [r7, #24]
 8000e46:	0619      	lsls	r1, r3, #24
 8000e48:	7e7b      	ldrb	r3, [r7, #25]
 8000e4a:	041b      	lsls	r3, r3, #16
 8000e4c:	4319      	orrs	r1, r3
 8000e4e:	7ebb      	ldrb	r3, [r7, #26]
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	430b      	orrs	r3, r1
 8000e54:	7ef9      	ldrb	r1, [r7, #27]
 8000e56:	430b      	orrs	r3, r1
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	7e3b      	ldrb	r3, [r7, #24]
 8000e62:	0619      	lsls	r1, r3, #24
 8000e64:	7e7b      	ldrb	r3, [r7, #25]
 8000e66:	041b      	lsls	r3, r3, #16
 8000e68:	4319      	orrs	r1, r3
 8000e6a:	7ebb      	ldrb	r3, [r7, #26]
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	430b      	orrs	r3, r1
 8000e70:	7ef9      	ldrb	r1, [r7, #27]
 8000e72:	430b      	orrs	r3, r1
 8000e74:	0e1b      	lsrs	r3, r3, #24
 8000e76:	4313      	orrs	r3, r2
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
		  	  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8000e7a:	7d3b      	ldrb	r3, [r7, #20]
 8000e7c:	061a      	lsls	r2, r3, #24
 8000e7e:	7d7b      	ldrb	r3, [r7, #21]
 8000e80:	041b      	lsls	r3, r3, #16
 8000e82:	431a      	orrs	r2, r3
 8000e84:	7dbb      	ldrb	r3, [r7, #22]
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	7dfa      	ldrb	r2, [r7, #23]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	061a      	lsls	r2, r3, #24
 8000e90:	7d3b      	ldrb	r3, [r7, #20]
 8000e92:	0619      	lsls	r1, r3, #24
 8000e94:	7d7b      	ldrb	r3, [r7, #21]
 8000e96:	041b      	lsls	r3, r3, #16
 8000e98:	4319      	orrs	r1, r3
 8000e9a:	7dbb      	ldrb	r3, [r7, #22]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	430b      	orrs	r3, r1
 8000ea0:	7df9      	ldrb	r1, [r7, #23]
 8000ea2:	430b      	orrs	r3, r1
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	7d3b      	ldrb	r3, [r7, #20]
 8000eae:	0619      	lsls	r1, r3, #24
 8000eb0:	7d7b      	ldrb	r3, [r7, #21]
 8000eb2:	041b      	lsls	r3, r3, #16
 8000eb4:	4319      	orrs	r1, r3
 8000eb6:	7dbb      	ldrb	r3, [r7, #22]
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	430b      	orrs	r3, r1
 8000ebc:	7df9      	ldrb	r1, [r7, #23]
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	7d3b      	ldrb	r3, [r7, #20]
 8000eca:	0619      	lsls	r1, r3, #24
 8000ecc:	7d7b      	ldrb	r3, [r7, #21]
 8000ece:	041b      	lsls	r3, r3, #16
 8000ed0:	4319      	orrs	r1, r3
 8000ed2:	7dbb      	ldrb	r3, [r7, #22]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	7df9      	ldrb	r1, [r7, #23]
 8000eda:	430b      	orrs	r3, r1
 8000edc:	0e1b      	lsrs	r3, r3, #24
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	623b      	str	r3, [r7, #32]
		  	  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8000ee2:	7c3b      	ldrb	r3, [r7, #16]
 8000ee4:	061a      	lsls	r2, r3, #24
 8000ee6:	7c7b      	ldrb	r3, [r7, #17]
 8000ee8:	041b      	lsls	r3, r3, #16
 8000eea:	431a      	orrs	r2, r3
 8000eec:	7cbb      	ldrb	r3, [r7, #18]
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	7cfa      	ldrb	r2, [r7, #19]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	061a      	lsls	r2, r3, #24
 8000ef8:	7c3b      	ldrb	r3, [r7, #16]
 8000efa:	0619      	lsls	r1, r3, #24
 8000efc:	7c7b      	ldrb	r3, [r7, #17]
 8000efe:	041b      	lsls	r3, r3, #16
 8000f00:	4319      	orrs	r1, r3
 8000f02:	7cbb      	ldrb	r3, [r7, #18]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	430b      	orrs	r3, r1
 8000f08:	7cf9      	ldrb	r1, [r7, #19]
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000f12:	431a      	orrs	r2, r3
 8000f14:	7c3b      	ldrb	r3, [r7, #16]
 8000f16:	0619      	lsls	r1, r3, #24
 8000f18:	7c7b      	ldrb	r3, [r7, #17]
 8000f1a:	041b      	lsls	r3, r3, #16
 8000f1c:	4319      	orrs	r1, r3
 8000f1e:	7cbb      	ldrb	r3, [r7, #18]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	430b      	orrs	r3, r1
 8000f24:	7cf9      	ldrb	r1, [r7, #19]
 8000f26:	430b      	orrs	r3, r1
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	7c3b      	ldrb	r3, [r7, #16]
 8000f32:	0619      	lsls	r1, r3, #24
 8000f34:	7c7b      	ldrb	r3, [r7, #17]
 8000f36:	041b      	lsls	r3, r3, #16
 8000f38:	4319      	orrs	r1, r3
 8000f3a:	7cbb      	ldrb	r3, [r7, #18]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	430b      	orrs	r3, r1
 8000f40:	7cf9      	ldrb	r1, [r7, #19]
 8000f42:	430b      	orrs	r3, r1
 8000f44:	0e1b      	lsrs	r3, r3, #24
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61fb      	str	r3, [r7, #28]
		  	  netif_set_addr(&gnetif, &ipaddr, &netmask, &gw);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	f107 0220 	add.w	r2, r7, #32
 8000f52:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <CGISetIP_Handler+0x330>)
 8000f58:	f014 f87c 	bl	8015054 <netif_set_addr>
		  	  /* 网口可以重启,也可以不重启 */
		  	  netif_set_down(&gnetif);
 8000f5c:	4807      	ldr	r0, [pc, #28]	; (8000f7c <CGISetIP_Handler+0x330>)
 8000f5e:	f014 f93f 	bl	80151e0 <netif_set_down>
		  	  netif_set_up(&gnetif);
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <CGISetIP_Handler+0x330>)
 8000f64:	f014 f8d0 	bl	8015108 <netif_set_up>


	 	 // write_data(ip);


	return "/play.html";
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <CGISetIP_Handler+0x334>)
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3758      	adds	r7, #88	; 0x58
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	08020f7c 	.word	0x08020f7c
 8000f78:	08020f68 	.word	0x08020f68
 8000f7c:	2000d82c 	.word	0x2000d82c
 8000f80:	08020f58 	.word	0x08020f58

08000f84 <http_server_init>:




void http_server_init (void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	httpd_init();
 8000f88:	f013 f93c 	bl	8014204 <httpd_init>
	CGI_TAB[0] = FORM_CGI;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <http_server_init+0x3c>)
 8000f8e:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <http_server_init+0x40>)
 8000f90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f94:	e883 0003 	stmia.w	r3, {r0, r1}
	CGI_TAB[1] = VOLUME_CGI;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <http_server_init+0x3c>)
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <http_server_init+0x44>)
 8000f9c:	3308      	adds	r3, #8
 8000f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa2:	e883 0003 	stmia.w	r3, {r0, r1}
	CGI_TAB[2] = SETIP_CGI;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <http_server_init+0x3c>)
 8000fa8:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <http_server_init+0x48>)
 8000faa:	3310      	adds	r3, #16
 8000fac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb0:	e883 0003 	stmia.w	r3, {r0, r1}
	http_set_cgi_handlers (CGI_TAB, 3);
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <http_server_init+0x3c>)
 8000fb8:	f013 f944 	bl	8014244 <http_set_cgi_handlers>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000ca08 	.word	0x2000ca08
 8000fc4:	0804dcf4 	.word	0x0804dcf4
 8000fc8:	0804dcfc 	.word	0x0804dcfc
 8000fcc:	0804dd04 	.word	0x0804dd04

08000fd0 <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    //注意下面第一个参数是&husart1，因为cubemx配置了串�???1自动生成�???
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000fd8:	1d39      	adds	r1, r7, #4
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <__io_putchar+0x20>)
 8000fe2:	f008 f8f2 	bl	80091ca <HAL_UART_Transmit>
    return ch;
 8000fe6:	687b      	ldr	r3, [r7, #4]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000cf60 	.word	0x2000cf60

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b08e      	sub	sp, #56	; 0x38
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffa:	f000 fee7 	bl	8001dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffe:	f000 f853 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001002:	f000 f9c3 	bl	800138c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001006:	f000 f959 	bl	80012bc <MX_USART1_UART_Init>
  MX_DMA_Init();
 800100a:	f000 f981 	bl	8001310 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800100e:	f000 f935 	bl	800127c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001012:	f009 fd69 	bl	800aae8 <MX_FATFS_Init>
  MX_I2S2_Init();
 8001016:	f000 f8e9 	bl	80011ec <MX_I2S2_Init>
  MX_IWDG_Init();
 800101a:	f000 f915 	bl	8001248 <MX_IWDG_Init>
  MX_I2C1_Init();
 800101e:	f000 f8b7 	bl	8001190 <MX_I2C1_Init>
	// Audio_Player_Init();
	// MX_LWIP_Init();
	// http_server_init();
	//my_mem_init(SRAMIN);			//鲁玫脢录禄炉脛脷虏驴脛脷麓忙鲁脴

	printf("111111\r\n");
 8001022:	481a      	ldr	r0, [pc, #104]	; (800108c <main+0x98>)
 8001024:	f01e f818 	bl	801f058 <puts>
	printf("222222\r\n");
 8001028:	4819      	ldr	r0, [pc, #100]	; (8001090 <main+0x9c>)
 800102a:	f01e f815 	bl	801f058 <puts>
	  Event_Handle=xEventGroupCreate();
 800102e:	f00e fe71 	bl	800fd14 <xEventGroupCreate>
 8001032:	4603      	mov	r3, r0
 8001034:	4a17      	ldr	r2, [pc, #92]	; (8001094 <main+0xa0>)
 8001036:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* definition and creation of defaultTask */


	    	//FIL * f_rec;
		Audio_Player_Init();
 8001038:	f7ff fc3e 	bl	80008b8 <Audio_Player_Init>

  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 3000);
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <main+0xa4>)
 800103e:	f107 041c 	add.w	r4, r7, #28
 8001042:	461d      	mov	r5, r3
 8001044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001048:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800104c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f00e fbb9 	bl	800f7ce <osThreadCreate>
 800105c:	4603      	mov	r3, r0
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <main+0xa8>)
 8001060:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 512);
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <main+0xac>)
 8001064:	463c      	mov	r4, r7
 8001066:	461d      	mov	r5, r3
 8001068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001070:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001074:	463b      	mov	r3, r7
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00e fba8 	bl	800f7ce <osThreadCreate>
 800107e:	4603      	mov	r3, r0
 8001080:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <main+0xb0>)
 8001082:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001084:	f00e fb80 	bl	800f788 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001088:	e7fe      	b.n	8001088 <main+0x94>
 800108a:	bf00      	nop
 800108c:	08020fb4 	.word	0x08020fb4
 8001090:	08020fbc 	.word	0x08020fbc
 8001094:	20000b1c 	.word	0x20000b1c
 8001098:	08020fc4 	.word	0x08020fc4
 800109c:	2000ca80 	.word	0x2000ca80
 80010a0:	08020fe0 	.word	0x08020fe0
 80010a4:	2000cfa4 	.word	0x2000cfa4

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	; 0x50
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	2230      	movs	r2, #48	; 0x30
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f01d ff40 	bl	801ef3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <SystemClock_Config+0xe0>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	4a2c      	ldr	r2, [pc, #176]	; (8001188 <SystemClock_Config+0xe0>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	; 0x40
 80010dc:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <SystemClock_Config+0xe0>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <SystemClock_Config+0xe4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a26      	ldr	r2, [pc, #152]	; (800118c <SystemClock_Config+0xe4>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <SystemClock_Config+0xe4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001104:	230b      	movs	r3, #11
 8001106:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110e:	2301      	movs	r3, #1
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001112:	2310      	movs	r3, #16
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001116:	2301      	movs	r3, #1
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111a:	2302      	movs	r3, #2
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001122:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001124:	2304      	movs	r3, #4
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001128:	23a8      	movs	r3, #168	; 0xa8
 800112a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001130:	2307      	movs	r3, #7
 8001132:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f005 fbcf 	bl	80068dc <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001144:	f000 fa0a 	bl	800155c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114c:	2302      	movs	r3, #2
 800114e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001154:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001158:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800115a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2105      	movs	r1, #5
 8001166:	4618      	mov	r0, r3
 8001168:	f005 fe30 	bl	8006dcc <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001172:	f000 f9f3 	bl	800155c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2000      	movs	r0, #0
 800117c:	f005 ff0c 	bl	8006f98 <HAL_RCC_MCOConfig>
}
 8001180:	bf00      	nop
 8001182:	3750      	adds	r7, #80	; 0x50
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800
 800118c:	40007000 	.word	0x40007000

08001190 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_I2C1_Init+0x50>)
 8001196:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <MX_I2C1_Init+0x54>)
 8001198:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_I2C1_Init+0x50>)
 800119c:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <MX_I2C1_Init+0x58>)
 800119e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011ce:	f004 f835 	bl	800523c <HAL_I2C_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d8:	f000 f9c0 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000cccc 	.word	0x2000cccc
 80011e4:	40005400 	.word	0x40005400
 80011e8:	000186a0 	.word	0x000186a0

080011ec <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <MX_I2S2_Init+0x54>)
 80011f2:	4a14      	ldr	r2, [pc, #80]	; (8001244 <MX_I2S2_Init+0x58>)
 80011f4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_I2S2_Init+0x54>)
 80011f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_I2S2_Init+0x54>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_I2S2_Init+0x54>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <MX_I2S2_Init+0x54>)
 800120c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001210:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_I2S2_Init+0x54>)
 8001214:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001218:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_I2S2_Init+0x54>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <MX_I2S2_Init+0x54>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_I2S2_Init+0x54>)
 8001228:	2201      	movs	r2, #1
 800122a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_I2S2_Init+0x54>)
 800122e:	f004 fc51 	bl	8005ad4 <HAL_I2S_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8001238:	f000 f990 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000d31c 	.word	0x2000d31c
 8001244:	40003800 	.word	0x40003800

08001248 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_IWDG_Init+0x2c>)
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <MX_IWDG_Init+0x30>)
 8001250:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_IWDG_Init+0x2c>)
 8001254:	2203      	movs	r2, #3
 8001256:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_IWDG_Init+0x2c>)
 800125a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800125e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_IWDG_Init+0x2c>)
 8001262:	f005 fae9 	bl	8006838 <HAL_IWDG_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800126c:	f000 f976 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000cd20 	.word	0x2000cd20
 8001278:	40003000 	.word	0x40003000

0800127c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_SDIO_SD_Init+0x38>)
 8001282:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <MX_SDIO_SD_Init+0x3c>)
 8001284:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_SDIO_SD_Init+0x38>)
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_SDIO_SD_Init+0x38>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_SDIO_SD_Init+0x38>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_SDIO_SD_Init+0x38>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <MX_SDIO_SD_Init+0x38>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <MX_SDIO_SD_Init+0x38>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	2000d008 	.word	0x2000d008
 80012b8:	40012c00 	.word	0x40012c00

080012bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <MX_USART1_UART_Init+0x50>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_USART1_UART_Init+0x4c>)
 80012f4:	f007 ff1c 	bl	8009130 <HAL_UART_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012fe:	f000 f92d 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000cf60 	.word	0x2000cf60
 800130c:	40011000 	.word	0x40011000

08001310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_DMA_Init+0x78>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <MX_DMA_Init+0x78>)
 8001320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_DMA_Init+0x78>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_DMA_Init+0x78>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a13      	ldr	r2, [pc, #76]	; (8001388 <MX_DMA_Init+0x78>)
 800133c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_DMA_Init+0x78>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 9, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2109      	movs	r1, #9
 8001352:	200f      	movs	r0, #15
 8001354:	f000 fe58 	bl	8002008 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001358:	200f      	movs	r0, #15
 800135a:	f000 fe71 	bl	8002040 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 7, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2107      	movs	r1, #7
 8001362:	203b      	movs	r0, #59	; 0x3b
 8001364:	f000 fe50 	bl	8002008 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001368:	203b      	movs	r0, #59	; 0x3b
 800136a:	f000 fe69 	bl	8002040 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 7, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2107      	movs	r1, #7
 8001372:	2045      	movs	r0, #69	; 0x45
 8001374:	f000 fe48 	bl	8002008 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001378:	2045      	movs	r0, #69	; 0x45
 800137a:	f000 fe61 	bl	8002040 <HAL_NVIC_EnableIRQ>

}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800

0800138c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	4b4e      	ldr	r3, [pc, #312]	; (80014e0 <MX_GPIO_Init+0x154>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a4d      	ldr	r2, [pc, #308]	; (80014e0 <MX_GPIO_Init+0x154>)
 80013ac:	f043 0310 	orr.w	r3, r3, #16
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b4b      	ldr	r3, [pc, #300]	; (80014e0 <MX_GPIO_Init+0x154>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	61bb      	str	r3, [r7, #24]
 80013bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <MX_GPIO_Init+0x154>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a46      	ldr	r2, [pc, #280]	; (80014e0 <MX_GPIO_Init+0x154>)
 80013c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <MX_GPIO_Init+0x154>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <MX_GPIO_Init+0x154>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a3f      	ldr	r2, [pc, #252]	; (80014e0 <MX_GPIO_Init+0x154>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <MX_GPIO_Init+0x154>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <MX_GPIO_Init+0x154>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a38      	ldr	r2, [pc, #224]	; (80014e0 <MX_GPIO_Init+0x154>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_GPIO_Init+0x154>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <MX_GPIO_Init+0x154>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a31      	ldr	r2, [pc, #196]	; (80014e0 <MX_GPIO_Init+0x154>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <MX_GPIO_Init+0x154>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <MX_GPIO_Init+0x154>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a2a      	ldr	r2, [pc, #168]	; (80014e0 <MX_GPIO_Init+0x154>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <MX_GPIO_Init+0x154>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <MX_GPIO_Init+0x154>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <MX_GPIO_Init+0x154>)
 8001454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <MX_GPIO_Init+0x154>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2110      	movs	r1, #16
 800146a:	481e      	ldr	r0, [pc, #120]	; (80014e4 <MX_GPIO_Init+0x158>)
 800146c:	f003 fecc 	bl	8005208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001476:	481c      	ldr	r0, [pc, #112]	; (80014e8 <MX_GPIO_Init+0x15c>)
 8001478:	f003 fec6 	bl	8005208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800147c:	2310      	movs	r3, #16
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4814      	ldr	r0, [pc, #80]	; (80014e4 <MX_GPIO_Init+0x158>)
 8001494:	f003 fd04 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_GPIO_Init+0x160>)
 80014b6:	f003 fcf3 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	4619      	mov	r1, r3
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_GPIO_Init+0x15c>)
 80014d4:	f003 fce4 	bl	8004ea0 <HAL_GPIO_Init>

}
 80014d8:	bf00      	nop
 80014da:	3730      	adds	r7, #48	; 0x30
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40021800 	.word	0x40021800
 80014ec:	40020000 	.word	0x40020000

080014f0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  /* USER CODE BEGIN 5 */

	f_mount(&fs,"0:",1);
 80014f8:	2201      	movs	r2, #1
 80014fa:	4906      	ldr	r1, [pc, #24]	; (8001514 <StartDefaultTask+0x24>)
 80014fc:	4806      	ldr	r0, [pc, #24]	; (8001518 <StartDefaultTask+0x28>)
 80014fe:	f00c fded 	bl	800e0dc <f_mount>
	MX_LWIP_Init();
 8001502:	f009 fd57 	bl	800afb4 <MX_LWIP_Init>
	http_server_init();
 8001506:	f7ff fd3d 	bl	8000f84 <http_server_init>
	/* Infinite loop */
	for (;;) {

		osDelay(7000);
 800150a:	f641 3058 	movw	r0, #7000	; 0x1b58
 800150e:	f00e f9aa 	bl	800f866 <osDelay>
 8001512:	e7fa      	b.n	800150a <StartDefaultTask+0x1a>
 8001514:	08020ffc 	.word	0x08020ffc
 8001518:	2000ca90 	.word	0x2000ca90

0800151c <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	//EventBits_t r_event;
	//Audio_Player_Init();

	/* Infinite loop */
	for (;;) {
		osDelay(3000);//拉长
 8001524:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001528:	f00e f99d 	bl	800f866 <osDelay>
		HAL_IWDG_Refresh(&hiwdg);
 800152c:	4801      	ldr	r0, [pc, #4]	; (8001534 <StartTask02+0x18>)
 800152e:	f005 f9c5 	bl	80068bc <HAL_IWDG_Refresh>
		osDelay(3000);//拉长
 8001532:	e7f7      	b.n	8001524 <StartTask02+0x8>
 8001534:	2000cd20 	.word	0x2000cd20

08001538 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800154a:	f000 fc61 	bl	8001e10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40010000 	.word	0x40010000

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001564:	e7fe      	b.n	8001564 <Error_Handler+0x8>
	...

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_MspInit+0x54>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a11      	ldr	r2, [pc, #68]	; (80015bc <HAL_MspInit+0x54>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_MspInit+0x54>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_MspInit+0x54>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_MspInit+0x54>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_MspInit+0x54>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	210f      	movs	r1, #15
 80015aa:	f06f 0001 	mvn.w	r0, #1
 80015ae:	f000 fd2b 	bl	8002008 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	; (8001644 <HAL_I2C_MspInit+0x84>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12b      	bne.n	800163a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_I2C_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a17      	ldr	r2, [pc, #92]	; (8001648 <HAL_I2C_MspInit+0x88>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_I2C_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015fe:	23c0      	movs	r3, #192	; 0xc0
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001602:	2312      	movs	r3, #18
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001606:	2301      	movs	r3, #1
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160e:	2304      	movs	r3, #4
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <HAL_I2C_MspInit+0x8c>)
 800161a:	f003 fc41 	bl	8004ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_I2C_MspInit+0x88>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_I2C_MspInit+0x88>)
 8001628:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_I2C_MspInit+0x88>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	; 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40005400 	.word	0x40005400
 8001648:	40023800 	.word	0x40023800
 800164c:	40020400 	.word	0x40020400

08001650 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08e      	sub	sp, #56	; 0x38
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a51      	ldr	r2, [pc, #324]	; (80017c0 <HAL_I2S_MspInit+0x170>)
 800167c:	4293      	cmp	r3, r2
 800167e:	f040 809a 	bne.w	80017b6 <HAL_I2S_MspInit+0x166>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001682:	2301      	movs	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001686:	23c0      	movs	r3, #192	; 0xc0
 8001688:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800168a:	2302      	movs	r3, #2
 800168c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4618      	mov	r0, r3
 8001694:	f005 fe30 	bl	80072f8 <HAL_RCCEx_PeriphCLKConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800169e:	f7ff ff5d 	bl	800155c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_I2S_MspInit+0x174>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a46      	ldr	r2, [pc, #280]	; (80017c4 <HAL_I2S_MspInit+0x174>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <HAL_I2S_MspInit+0x174>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <HAL_I2S_MspInit+0x174>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a3f      	ldr	r2, [pc, #252]	; (80017c4 <HAL_I2S_MspInit+0x174>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <HAL_I2S_MspInit+0x174>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <HAL_I2S_MspInit+0x174>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a38      	ldr	r2, [pc, #224]	; (80017c4 <HAL_I2S_MspInit+0x174>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_I2S_MspInit+0x174>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016f6:	2304      	movs	r3, #4
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001706:	2306      	movs	r3, #6
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170e:	4619      	mov	r1, r3
 8001710:	482d      	ldr	r0, [pc, #180]	; (80017c8 <HAL_I2S_MspInit+0x178>)
 8001712:	f003 fbc5 	bl	8004ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001716:	2348      	movs	r3, #72	; 0x48
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001726:	2305      	movs	r3, #5
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172e:	4619      	mov	r1, r3
 8001730:	4825      	ldr	r0, [pc, #148]	; (80017c8 <HAL_I2S_MspInit+0x178>)
 8001732:	f003 fbb5 	bl	8004ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001736:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001748:	2305      	movs	r3, #5
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	481e      	ldr	r0, [pc, #120]	; (80017cc <HAL_I2S_MspInit+0x17c>)
 8001754:	f003 fba4 	bl	8004ea0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_I2S_MspInit+0x180>)
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_I2S_MspInit+0x184>)
 800175c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <HAL_I2S_MspInit+0x180>)
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_I2S_MspInit+0x180>)
 8001766:	2240      	movs	r2, #64	; 0x40
 8001768:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_I2S_MspInit+0x180>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_I2S_MspInit+0x180>)
 8001772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001776:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_I2S_MspInit+0x180>)
 800177a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800177e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_I2S_MspInit+0x180>)
 8001782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001786:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_I2S_MspInit+0x180>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_I2S_MspInit+0x180>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_I2S_MspInit+0x180>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800179a:	480d      	ldr	r0, [pc, #52]	; (80017d0 <HAL_I2S_MspInit+0x180>)
 800179c:	f000 fc5e 	bl	800205c <HAL_DMA_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_I2S_MspInit+0x15a>
    {
      Error_Handler();
 80017a6:	f7ff fed9 	bl	800155c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_I2S_MspInit+0x180>)
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_I2S_MspInit+0x180>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017b6:	bf00      	nop
 80017b8:	3738      	adds	r7, #56	; 0x38
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40003800 	.word	0x40003800
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020400 	.word	0x40020400
 80017d0:	2000d08c 	.word	0x2000d08c
 80017d4:	40026070 	.word	0x40026070

080017d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a67      	ldr	r2, [pc, #412]	; (8001994 <HAL_SD_MspInit+0x1bc>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	f040 80c7 	bne.w	800198a <HAL_SD_MspInit+0x1b2>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	4b65      	ldr	r3, [pc, #404]	; (8001998 <HAL_SD_MspInit+0x1c0>)
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	4a64      	ldr	r2, [pc, #400]	; (8001998 <HAL_SD_MspInit+0x1c0>)
 8001806:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800180a:	6453      	str	r3, [r2, #68]	; 0x44
 800180c:	4b62      	ldr	r3, [pc, #392]	; (8001998 <HAL_SD_MspInit+0x1c0>)
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	4b5e      	ldr	r3, [pc, #376]	; (8001998 <HAL_SD_MspInit+0x1c0>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	4a5d      	ldr	r2, [pc, #372]	; (8001998 <HAL_SD_MspInit+0x1c0>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6313      	str	r3, [r2, #48]	; 0x30
 8001828:	4b5b      	ldr	r3, [pc, #364]	; (8001998 <HAL_SD_MspInit+0x1c0>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	4b57      	ldr	r3, [pc, #348]	; (8001998 <HAL_SD_MspInit+0x1c0>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	4a56      	ldr	r2, [pc, #344]	; (8001998 <HAL_SD_MspInit+0x1c0>)
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	6313      	str	r3, [r2, #48]	; 0x30
 8001844:	4b54      	ldr	r3, [pc, #336]	; (8001998 <HAL_SD_MspInit+0x1c0>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001850:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001854:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001862:	230c      	movs	r3, #12
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	484b      	ldr	r0, [pc, #300]	; (800199c <HAL_SD_MspInit+0x1c4>)
 800186e:	f003 fb17 	bl	8004ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001872:	2304      	movs	r3, #4
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001882:	230c      	movs	r3, #12
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4844      	ldr	r0, [pc, #272]	; (80019a0 <HAL_SD_MspInit+0x1c8>)
 800188e:	f003 fb07 	bl	8004ea0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 8001894:	4a44      	ldr	r2, [pc, #272]	; (80019a8 <HAL_SD_MspInit+0x1d0>)
 8001896:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001898:	4b42      	ldr	r3, [pc, #264]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 800189a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800189e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a0:	4b40      	ldr	r3, [pc, #256]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a6:	4b3f      	ldr	r3, [pc, #252]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018ac:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 80018ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018b4:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 80018b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ba:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018bc:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80018c2:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 80018c4:	2220      	movs	r2, #32
 80018c6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018c8:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018ce:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 80018d0:	2204      	movs	r2, #4
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018d4:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 80018d6:	2203      	movs	r2, #3
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC8;
 80018da:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 80018dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 80018e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80018ea:	482e      	ldr	r0, [pc, #184]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 80018ec:	f000 fbb6 	bl	800205c <HAL_DMA_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_SD_MspInit+0x122>
    {
      Error_Handler();
 80018f6:	f7ff fe31 	bl	800155c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a29      	ldr	r2, [pc, #164]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <HAL_SD_MspInit+0x1cc>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 8001908:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <HAL_SD_MspInit+0x1d8>)
 800190a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 800190e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001912:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001914:	4b25      	ldr	r3, [pc, #148]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 8001916:	2240      	movs	r2, #64	; 0x40
 8001918:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 8001922:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001926:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 800192a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800192e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001930:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001936:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 8001938:	2220      	movs	r2, #32
 800193a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 800193e:	2200      	movs	r2, #0
 8001940:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 8001944:	2204      	movs	r2, #4
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 800194a:	2203      	movs	r2, #3
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC8;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 8001950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001954:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 8001958:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800195c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800195e:	4813      	ldr	r0, [pc, #76]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 8001960:	f000 fb7c 	bl	800205c <HAL_DMA_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_SD_MspInit+0x196>
    {
      Error_Handler();
 800196a:	f7ff fdf7 	bl	800155c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 8001972:	63da      	str	r2, [r3, #60]	; 0x3c
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <HAL_SD_MspInit+0x1d4>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2105      	movs	r1, #5
 800197e:	2031      	movs	r0, #49	; 0x31
 8001980:	f000 fb42 	bl	8002008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001984:	2031      	movs	r0, #49	; 0x31
 8001986:	f000 fb5b 	bl	8002040 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40012c00 	.word	0x40012c00
 8001998:	40023800 	.word	0x40023800
 800199c:	40020800 	.word	0x40020800
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	2000ca20 	.word	0x2000ca20
 80019a8:	40026458 	.word	0x40026458
 80019ac:	2000cfa8 	.word	0x2000cfa8
 80019b0:	400264a0 	.word	0x400264a0

080019b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_UART_MspInit+0x94>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d134      	bne.n	8001a40 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_UART_MspInit+0x98>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a1b      	ldr	r2, [pc, #108]	; (8001a4c <HAL_UART_MspInit+0x98>)
 80019e0:	f043 0310 	orr.w	r3, r3, #16
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_UART_MspInit+0x98>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_UART_MspInit+0x98>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <HAL_UART_MspInit+0x98>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_UART_MspInit+0x98>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a20:	2307      	movs	r3, #7
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4809      	ldr	r0, [pc, #36]	; (8001a50 <HAL_UART_MspInit+0x9c>)
 8001a2c:	f003 fa38 	bl	8004ea0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2106      	movs	r1, #6
 8001a34:	2025      	movs	r0, #37	; 0x25
 8001a36:	f000 fae7 	bl	8002008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a3a:	2025      	movs	r0, #37	; 0x25
 8001a3c:	f000 fb00 	bl	8002040 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	; 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40011000 	.word	0x40011000
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020000 	.word	0x40020000

08001a54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	; 0x30
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	2019      	movs	r0, #25
 8001a6a:	f000 facd 	bl	8002008 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a6e:	2019      	movs	r0, #25
 8001a70:	f000 fae6 	bl	8002040 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <HAL_InitTick+0xa4>)
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	4a1e      	ldr	r2, [pc, #120]	; (8001af8 <HAL_InitTick+0xa4>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6453      	str	r3, [r2, #68]	; 0x44
 8001a84:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <HAL_InitTick+0xa4>)
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a90:	f107 0210 	add.w	r2, r7, #16
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f005 fbfa 	bl	8007294 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001aa0:	f005 fbe4 	bl	800726c <HAL_RCC_GetPCLK2Freq>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aac:	4a13      	ldr	r2, [pc, #76]	; (8001afc <HAL_InitTick+0xa8>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	0c9b      	lsrs	r3, r3, #18
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_InitTick+0xac>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <HAL_InitTick+0xb0>)
 8001abc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_InitTick+0xac>)
 8001ac0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ac4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <HAL_InitTick+0xac>)
 8001ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <HAL_InitTick+0xac>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_InitTick+0xac>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ad8:	4809      	ldr	r0, [pc, #36]	; (8001b00 <HAL_InitTick+0xac>)
 8001ada:	f007 f87c 	bl	8008bd6 <HAL_TIM_Base_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d104      	bne.n	8001aee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ae4:	4806      	ldr	r0, [pc, #24]	; (8001b00 <HAL_InitTick+0xac>)
 8001ae6:	f007 f8cf 	bl	8008c88 <HAL_TIM_Base_Start_IT>
 8001aea:	4603      	mov	r3, r0
 8001aec:	e000      	b.n	8001af0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3730      	adds	r7, #48	; 0x30
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	431bde83 	.word	0x431bde83
 8001b00:	2000d364 	.word	0x2000d364
 8001b04:	40010000 	.word	0x40010000

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <NMI_Handler+0x4>

08001b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <DMA1_Stream4_IRQHandler+0x10>)
 8001b3a:	f000 fc27 	bl	800238c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000d08c 	.word	0x2000d08c

08001b48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b4e:	f007 f90b 	bl	8008d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2000d364 	.word	0x2000d364

08001b5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <USART1_IRQHandler+0x10>)
 8001b62:	f007 fbc5 	bl	80092f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000cf60 	.word	0x2000cf60

08001b70 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <SDIO_IRQHandler+0x10>)
 8001b76:	f005 ff75 	bl	8007a64 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000d008 	.word	0x2000d008

08001b84 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <DMA2_Stream3_IRQHandler+0x10>)
 8001b8a:	f000 fbff 	bl	800238c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000ca20 	.word	0x2000ca20

08001b98 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <ETH_IRQHandler+0x10>)
 8001b9e:	f002 fbbd 	bl	800431c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000f144 	.word	0x2000f144

08001bac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <DMA2_Stream6_IRQHandler+0x10>)
 8001bb2:	f000 fbeb 	bl	800238c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2000cfa8 	.word	0x2000cfa8

08001bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
	return 1;
 8001bc4:	2301      	movs	r3, #1
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_kill>:

int _kill(int pid, int sig)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <_kill+0x20>)
 8001bdc:	2216      	movs	r2, #22
 8001bde:	601a      	str	r2, [r3, #0]
	return -1;
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	20014778 	.word	0x20014778

08001bf4 <_exit>:

void _exit (int status)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ffe5 	bl	8001bd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c06:	e7fe      	b.n	8001c06 <_exit+0x12>

08001c08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e00a      	b.n	8001c30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c1a:	f3af 8000 	nop.w
 8001c1e:	4601      	mov	r1, r0
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	60ba      	str	r2, [r7, #8]
 8001c26:	b2ca      	uxtb	r2, r1
 8001c28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dbf0      	blt.n	8001c1a <_read+0x12>
	}

return len;
 8001c38:	687b      	ldr	r3, [r7, #4]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e009      	b.n	8001c68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	60ba      	str	r2, [r7, #8]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff f9b7 	bl	8000fd0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	dbf1      	blt.n	8001c54 <_write+0x12>
	}
	return len;
 8001c70:	687b      	ldr	r3, [r7, #4]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_close>:

int _close(int file)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
	return -1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ca2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_isatty>:

int _isatty(int file)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
	return 0;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <_sbrk+0x5c>)
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <_sbrk+0x60>)
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <_sbrk+0x64>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <_sbrk+0x68>)
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d205      	bcs.n	8001d20 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <_sbrk+0x6c>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	20020000 	.word	0x20020000
 8001d44:	00001000 	.word	0x00001000
 8001d48:	20000b20 	.word	0x20000b20
 8001d4c:	20014790 	.word	0x20014790
 8001d50:	20014778 	.word	0x20014778

08001d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <SystemInit+0x20>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <SystemInit+0x20>)
 8001d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <Reset_Handler>:
 8001d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db0 <LoopFillZerobss+0x12>
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <LoopFillZerobss+0x16>)
 8001d7e:	490e      	ldr	r1, [pc, #56]	; (8001db8 <LoopFillZerobss+0x1a>)
 8001d80:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <LoopFillZerobss+0x1e>)
 8001d82:	2300      	movs	r3, #0
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:
 8001d86:	58d4      	ldr	r4, [r2, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:
 8001d8c:	18c4      	adds	r4, r0, r3
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <LoopFillZerobss+0x22>)
 8001d94:	4c0b      	ldr	r4, [pc, #44]	; (8001dc4 <LoopFillZerobss+0x26>)
 8001d96:	2300      	movs	r3, #0
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:
 8001d9e:	42a2      	cmp	r2, r4
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>
 8001da2:	f7ff ffd7 	bl	8001d54 <SystemInit>
 8001da6:	f01d f86f 	bl	801ee88 <__libc_init_array>
 8001daa:	f7ff f923 	bl	8000ff4 <main>
 8001dae:	4770      	bx	lr
 8001db0:	20020000 	.word	0x20020000
 8001db4:	20000000 	.word	0x20000000
 8001db8:	200000a4 	.word	0x200000a4
 8001dbc:	0807af18 	.word	0x0807af18
 8001dc0:	200000a4 	.word	0x200000a4
 8001dc4:	2001478c 	.word	0x2001478c

08001dc8 <ADC_IRQHandler>:
 8001dc8:	e7fe      	b.n	8001dc8 <ADC_IRQHandler>
	...

08001dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_Init+0x40>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_Init+0x40>)
 8001de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <HAL_Init+0x40>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 f8fc 	bl	8001ff2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfa:	200f      	movs	r0, #15
 8001dfc:	f7ff fe2a 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e00:	f7ff fbb2 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023c00 	.word	0x40023c00

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000018 	.word	0x20000018
 8001e34:	2000d3ac 	.word	0x2000d3ac

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	2000d3ac 	.word	0x2000d3ac

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000018 	.word	0x20000018

08001e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eca:	4a04      	ldr	r2, [pc, #16]	; (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0307 	and.w	r3, r3, #7
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	db0b      	blt.n	8001f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	f003 021f 	and.w	r2, r3, #31
 8001f14:	4907      	ldr	r1, [pc, #28]	; (8001f34 <__NVIC_EnableIRQ+0x38>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	; (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	; (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	; 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ff4c 	bl	8001e98 <__NVIC_SetPriorityGrouping>
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201a:	f7ff ff61 	bl	8001ee0 <__NVIC_GetPriorityGrouping>
 800201e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	68b9      	ldr	r1, [r7, #8]
 8002024:	6978      	ldr	r0, [r7, #20]
 8002026:	f7ff ffb1 	bl	8001f8c <NVIC_EncodePriority>
 800202a:	4602      	mov	r2, r0
 800202c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff80 	bl	8001f38 <__NVIC_SetPriority>
}
 8002038:	bf00      	nop
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff54 	bl	8001efc <__NVIC_EnableIRQ>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff fee6 	bl	8001e38 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e099      	b.n	80021ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002098:	e00f      	b.n	80020ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800209a:	f7ff fecd 	bl	8001e38 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d908      	bls.n	80020ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e078      	b.n	80021ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e8      	bne.n	800209a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <HAL_DMA_Init+0x158>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	2b04      	cmp	r3, #4
 8002112:	d107      	bne.n	8002124 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	4313      	orrs	r3, r2
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f023 0307 	bic.w	r3, r3, #7
 800213a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	2b04      	cmp	r3, #4
 800214c:	d117      	bne.n	800217e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00e      	beq.n	800217e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 fb0d 	bl	8002780 <DMA_CheckFifoParam>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2240      	movs	r2, #64	; 0x40
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800217a:	2301      	movs	r3, #1
 800217c:	e016      	b.n	80021ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fac4 	bl	8002714 <DMA_CalcBaseAndBitshift>
 800218c:	4603      	mov	r3, r0
 800218e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	223f      	movs	r2, #63	; 0x3f
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	f010803f 	.word	0xf010803f

080021b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_DMA_Start_IT+0x26>
 80021da:	2302      	movs	r3, #2
 80021dc:	e040      	b.n	8002260 <HAL_DMA_Start_IT+0xa8>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d12f      	bne.n	8002252 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2202      	movs	r2, #2
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fa56 	bl	80026b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	223f      	movs	r2, #63	; 0x3f
 8002212:	409a      	lsls	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0216 	orr.w	r2, r2, #22
 8002226:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0208 	orr.w	r2, r2, #8
 800223e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e005      	b.n	800225e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800225a:	2302      	movs	r3, #2
 800225c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800225e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002276:	f7ff fddf 	bl	8001e38 <HAL_GetTick>
 800227a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d008      	beq.n	800229a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2280      	movs	r2, #128	; 0x80
 800228c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e052      	b.n	8002340 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0216 	bic.w	r2, r2, #22
 80022a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d103      	bne.n	80022ca <HAL_DMA_Abort+0x62>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0208 	bic.w	r2, r2, #8
 80022d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0201 	bic.w	r2, r2, #1
 80022e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ea:	e013      	b.n	8002314 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ec:	f7ff fda4 	bl	8001e38 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d90c      	bls.n	8002314 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2203      	movs	r2, #3
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e015      	b.n	8002340 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1e4      	bne.n	80022ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	223f      	movs	r2, #63	; 0x3f
 8002328:	409a      	lsls	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d004      	beq.n	8002366 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e00c      	b.n	8002380 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2205      	movs	r2, #5
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002398:	4b92      	ldr	r3, [pc, #584]	; (80025e4 <HAL_DMA_IRQHandler+0x258>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a92      	ldr	r2, [pc, #584]	; (80025e8 <HAL_DMA_IRQHandler+0x25c>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	0a9b      	lsrs	r3, r3, #10
 80023a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	2208      	movs	r2, #8
 80023b8:	409a      	lsls	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d01a      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0204 	bic.w	r2, r2, #4
 80023de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	2208      	movs	r2, #8
 80023e6:	409a      	lsls	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	2201      	movs	r2, #1
 80023fe:	409a      	lsls	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d012      	beq.n	800242e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	2201      	movs	r2, #1
 800241c:	409a      	lsls	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	f043 0202 	orr.w	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	2204      	movs	r2, #4
 8002434:	409a      	lsls	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d012      	beq.n	8002464 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00b      	beq.n	8002464 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	2204      	movs	r2, #4
 8002452:	409a      	lsls	r2, r3
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	f043 0204 	orr.w	r2, r3, #4
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	2210      	movs	r2, #16
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d043      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d03c      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	2210      	movs	r2, #16
 8002488:	409a      	lsls	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d018      	beq.n	80024ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d108      	bne.n	80024bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d024      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
 80024ba:	e01f      	b.n	80024fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01b      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	4798      	blx	r3
 80024cc:	e016      	b.n	80024fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0208 	bic.w	r2, r2, #8
 80024ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	2220      	movs	r2, #32
 8002502:	409a      	lsls	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 808e 	beq.w	800262a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8086 	beq.w	800262a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	2220      	movs	r2, #32
 8002524:	409a      	lsls	r2, r3
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b05      	cmp	r3, #5
 8002534:	d136      	bne.n	80025a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0216 	bic.w	r2, r2, #22
 8002544:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002554:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d103      	bne.n	8002566 <HAL_DMA_IRQHandler+0x1da>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0208 	bic.w	r2, r2, #8
 8002574:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257a:	223f      	movs	r2, #63	; 0x3f
 800257c:	409a      	lsls	r2, r3
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002596:	2b00      	cmp	r3, #0
 8002598:	d07d      	beq.n	8002696 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
        }
        return;
 80025a2:	e078      	b.n	8002696 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01c      	beq.n	80025ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d108      	bne.n	80025d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d030      	beq.n	800262a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4798      	blx	r3
 80025d0:	e02b      	b.n	800262a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d027      	beq.n	800262a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
 80025e2:	e022      	b.n	800262a <HAL_DMA_IRQHandler+0x29e>
 80025e4:	20000010 	.word	0x20000010
 80025e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10f      	bne.n	800261a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0210 	bic.w	r2, r2, #16
 8002608:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	2b00      	cmp	r3, #0
 8002630:	d032      	beq.n	8002698 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d022      	beq.n	8002684 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2205      	movs	r2, #5
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3301      	adds	r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	429a      	cmp	r2, r3
 8002660:	d307      	bcc.n	8002672 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f2      	bne.n	8002656 <HAL_DMA_IRQHandler+0x2ca>
 8002670:	e000      	b.n	8002674 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002672:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
 8002694:	e000      	b.n	8002698 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002696:	bf00      	nop
    }
  }
}
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop

080026a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b40      	cmp	r3, #64	; 0x40
 80026e4:	d108      	bne.n	80026f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026f6:	e007      	b.n	8002708 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	60da      	str	r2, [r3, #12]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	3b10      	subs	r3, #16
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <DMA_CalcBaseAndBitshift+0x64>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800272e:	4a13      	ldr	r2, [pc, #76]	; (800277c <DMA_CalcBaseAndBitshift+0x68>)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b03      	cmp	r3, #3
 8002740:	d909      	bls.n	8002756 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800274a:	f023 0303 	bic.w	r3, r3, #3
 800274e:	1d1a      	adds	r2, r3, #4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	659a      	str	r2, [r3, #88]	; 0x58
 8002754:	e007      	b.n	8002766 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800275e:	f023 0303 	bic.w	r3, r3, #3
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	aaaaaaab 	.word	0xaaaaaaab
 800277c:	0804dd24 	.word	0x0804dd24

08002780 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d11f      	bne.n	80027da <DMA_CheckFifoParam+0x5a>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d856      	bhi.n	800284e <DMA_CheckFifoParam+0xce>
 80027a0:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <DMA_CheckFifoParam+0x28>)
 80027a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a6:	bf00      	nop
 80027a8:	080027b9 	.word	0x080027b9
 80027ac:	080027cb 	.word	0x080027cb
 80027b0:	080027b9 	.word	0x080027b9
 80027b4:	0800284f 	.word	0x0800284f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d046      	beq.n	8002852 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c8:	e043      	b.n	8002852 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027d2:	d140      	bne.n	8002856 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d8:	e03d      	b.n	8002856 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e2:	d121      	bne.n	8002828 <DMA_CheckFifoParam+0xa8>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d837      	bhi.n	800285a <DMA_CheckFifoParam+0xda>
 80027ea:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <DMA_CheckFifoParam+0x70>)
 80027ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f0:	08002801 	.word	0x08002801
 80027f4:	08002807 	.word	0x08002807
 80027f8:	08002801 	.word	0x08002801
 80027fc:	08002819 	.word	0x08002819
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      break;
 8002804:	e030      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d025      	beq.n	800285e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002816:	e022      	b.n	800285e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002820:	d11f      	bne.n	8002862 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002826:	e01c      	b.n	8002862 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d903      	bls.n	8002836 <DMA_CheckFifoParam+0xb6>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d003      	beq.n	800283c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002834:	e018      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
      break;
 800283a:	e015      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00e      	beq.n	8002866 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      break;
 800284c:	e00b      	b.n	8002866 <DMA_CheckFifoParam+0xe6>
      break;
 800284e:	bf00      	nop
 8002850:	e00a      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 8002852:	bf00      	nop
 8002854:	e008      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 8002856:	bf00      	nop
 8002858:	e006      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 800285a:	bf00      	nop
 800285c:	e004      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 800285e:	bf00      	nop
 8002860:	e002      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;   
 8002862:	bf00      	nop
 8002864:	e000      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 8002866:	bf00      	nop
    }
  } 
  
  return status; 
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop

08002878 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b80      	cmp	r3, #128	; 0x80
 8002890:	d106      	bne.n	80028a0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	f001 b913 	b.w	8003ac6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2240      	movs	r2, #64	; 0x40
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	f001 b901 	b.w	8003ac6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d102      	bne.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80028ce:	2302      	movs	r3, #2
 80028d0:	f001 b8f9 	b.w	8003ac6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	f041 80e7 	bne.w	8003ab8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002906:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f001 f8f6 	bl	8003b08 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	4b99      	ldr	r3, [pc, #612]	; (8002b88 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002924:	429a      	cmp	r2, r3
 8002926:	d960      	bls.n	80029ea <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a97      	ldr	r2, [pc, #604]	; (8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d057      	beq.n	80029e2 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a96      	ldr	r2, [pc, #600]	; (8002b90 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d050      	beq.n	80029de <HAL_DMAEx_MultiBufferStart_IT+0x166>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a94      	ldr	r2, [pc, #592]	; (8002b94 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d049      	beq.n	80029da <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a93      	ldr	r2, [pc, #588]	; (8002b98 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d042      	beq.n	80029d6 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a91      	ldr	r2, [pc, #580]	; (8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d03a      	beq.n	80029d0 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a90      	ldr	r2, [pc, #576]	; (8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d032      	beq.n	80029ca <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a8e      	ldr	r2, [pc, #568]	; (8002ba4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d02a      	beq.n	80029c4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a8d      	ldr	r2, [pc, #564]	; (8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d022      	beq.n	80029be <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a8b      	ldr	r2, [pc, #556]	; (8002bac <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01a      	beq.n	80029b8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a8a      	ldr	r2, [pc, #552]	; (8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d012      	beq.n	80029b2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a88      	ldr	r2, [pc, #544]	; (8002bb4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00a      	beq.n	80029ac <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a87      	ldr	r2, [pc, #540]	; (8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d102      	bne.n	80029a6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80029a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029a4:	e01e      	b.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80029a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80029aa:	e01b      	b.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80029ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029b0:	e018      	b.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80029b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029b6:	e015      	b.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80029b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029bc:	e012      	b.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80029be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029c2:	e00f      	b.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80029c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029c8:	e00c      	b.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80029ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029ce:	e009      	b.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80029d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029d4:	e006      	b.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80029d6:	2320      	movs	r3, #32
 80029d8:	e004      	b.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80029da:	2320      	movs	r3, #32
 80029dc:	e002      	b.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80029de:	2320      	movs	r3, #32
 80029e0:	e000      	b.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80029e2:	2320      	movs	r3, #32
 80029e4:	4a75      	ldr	r2, [pc, #468]	; (8002bbc <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 80029e6:	60d3      	str	r3, [r2, #12]
 80029e8:	e150      	b.n	8002c8c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	4b73      	ldr	r3, [pc, #460]	; (8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d960      	bls.n	8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a64      	ldr	r2, [pc, #400]	; (8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d057      	beq.n	8002ab0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a62      	ldr	r2, [pc, #392]	; (8002b90 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d050      	beq.n	8002aac <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a61      	ldr	r2, [pc, #388]	; (8002b94 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d049      	beq.n	8002aa8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a5f      	ldr	r2, [pc, #380]	; (8002b98 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d042      	beq.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a5e      	ldr	r2, [pc, #376]	; (8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d03a      	beq.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a5c      	ldr	r2, [pc, #368]	; (8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d032      	beq.n	8002a98 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a5b      	ldr	r2, [pc, #364]	; (8002ba4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d02a      	beq.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a59      	ldr	r2, [pc, #356]	; (8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d022      	beq.n	8002a8c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a58      	ldr	r2, [pc, #352]	; (8002bac <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d01a      	beq.n	8002a86 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a56      	ldr	r2, [pc, #344]	; (8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d012      	beq.n	8002a80 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a55      	ldr	r2, [pc, #340]	; (8002bb4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00a      	beq.n	8002a7a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a53      	ldr	r2, [pc, #332]	; (8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d102      	bne.n	8002a74 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002a6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a72:	e01e      	b.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002a74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a78:	e01b      	b.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002a7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a7e:	e018      	b.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002a80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a84:	e015      	b.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002a86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a8a:	e012      	b.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002a8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a90:	e00f      	b.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a96:	e00c      	b.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002a98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a9c:	e009      	b.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002a9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002aa2:	e006      	b.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	e004      	b.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	e002      	b.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002aac:	2320      	movs	r3, #32
 8002aae:	e000      	b.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	4a42      	ldr	r2, [pc, #264]	; (8002bbc <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002ab4:	6093      	str	r3, [r2, #8]
 8002ab6:	e0e9      	b.n	8002c8c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b41      	ldr	r3, [pc, #260]	; (8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	f240 8083 	bls.w	8002bcc <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a30      	ldr	r2, [pc, #192]	; (8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d057      	beq.n	8002b80 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a2e      	ldr	r2, [pc, #184]	; (8002b90 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d050      	beq.n	8002b7c <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a2d      	ldr	r2, [pc, #180]	; (8002b94 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d049      	beq.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a2b      	ldr	r2, [pc, #172]	; (8002b98 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d042      	beq.n	8002b74 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a2a      	ldr	r2, [pc, #168]	; (8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d03a      	beq.n	8002b6e <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a28      	ldr	r2, [pc, #160]	; (8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d032      	beq.n	8002b68 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a27      	ldr	r2, [pc, #156]	; (8002ba4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d02a      	beq.n	8002b62 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a25      	ldr	r2, [pc, #148]	; (8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d022      	beq.n	8002b5c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a24      	ldr	r2, [pc, #144]	; (8002bac <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d01a      	beq.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d012      	beq.n	8002b50 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a21      	ldr	r2, [pc, #132]	; (8002bb4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00a      	beq.n	8002b4a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1f      	ldr	r2, [pc, #124]	; (8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d102      	bne.n	8002b44 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002b3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b42:	e01e      	b.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002b44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b48:	e01b      	b.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002b4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b4e:	e018      	b.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002b50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b54:	e015      	b.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002b56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b5a:	e012      	b.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002b5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b60:	e00f      	b.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b66:	e00c      	b.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002b68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b6c:	e009      	b.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002b6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b72:	e006      	b.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002b74:	2320      	movs	r3, #32
 8002b76:	e004      	b.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002b78:	2320      	movs	r3, #32
 8002b7a:	e002      	b.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	e000      	b.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002b80:	2320      	movs	r3, #32
 8002b82:	4a11      	ldr	r2, [pc, #68]	; (8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8002b84:	60d3      	str	r3, [r2, #12]
 8002b86:	e081      	b.n	8002c8c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002b88:	40026458 	.word	0x40026458
 8002b8c:	40026010 	.word	0x40026010
 8002b90:	40026410 	.word	0x40026410
 8002b94:	40026070 	.word	0x40026070
 8002b98:	40026470 	.word	0x40026470
 8002b9c:	40026028 	.word	0x40026028
 8002ba0:	40026428 	.word	0x40026428
 8002ba4:	40026088 	.word	0x40026088
 8002ba8:	40026488 	.word	0x40026488
 8002bac:	40026040 	.word	0x40026040
 8002bb0:	40026440 	.word	0x40026440
 8002bb4:	400260a0 	.word	0x400260a0
 8002bb8:	400264a0 	.word	0x400264a0
 8002bbc:	40026400 	.word	0x40026400
 8002bc0:	400260b8 	.word	0x400260b8
 8002bc4:	40026058 	.word	0x40026058
 8002bc8:	40026000 	.word	0x40026000
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a96      	ldr	r2, [pc, #600]	; (8002e2c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d057      	beq.n	8002c86 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a95      	ldr	r2, [pc, #596]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d050      	beq.n	8002c82 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a93      	ldr	r2, [pc, #588]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d049      	beq.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a92      	ldr	r2, [pc, #584]	; (8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d042      	beq.n	8002c7a <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a90      	ldr	r2, [pc, #576]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d03a      	beq.n	8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a8f      	ldr	r2, [pc, #572]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d032      	beq.n	8002c6e <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a8d      	ldr	r2, [pc, #564]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d02a      	beq.n	8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a8c      	ldr	r2, [pc, #560]	; (8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a8a      	ldr	r2, [pc, #552]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01a      	beq.n	8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a89      	ldr	r2, [pc, #548]	; (8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d012      	beq.n	8002c56 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a87      	ldr	r2, [pc, #540]	; (8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00a      	beq.n	8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a86      	ldr	r2, [pc, #536]	; (8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d102      	bne.n	8002c4a <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8002c44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c48:	e01e      	b.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002c4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c4e:	e01b      	b.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002c50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c54:	e018      	b.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002c56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c5a:	e015      	b.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002c5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c60:	e012      	b.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002c62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c66:	e00f      	b.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002c68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c6c:	e00c      	b.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002c6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c72:	e009      	b.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002c74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c78:	e006      	b.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	e004      	b.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002c7e:	2320      	movs	r3, #32
 8002c80:	e002      	b.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002c82:	2320      	movs	r3, #32
 8002c84:	e000      	b.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002c86:	2320      	movs	r3, #32
 8002c88:	4a74      	ldr	r2, [pc, #464]	; (8002e5c <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8002c8a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b73      	ldr	r3, [pc, #460]	; (8002e60 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d960      	bls.n	8002d5a <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a63      	ldr	r2, [pc, #396]	; (8002e2c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d057      	beq.n	8002d52 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a62      	ldr	r2, [pc, #392]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d050      	beq.n	8002d4e <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a60      	ldr	r2, [pc, #384]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d049      	beq.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a5f      	ldr	r2, [pc, #380]	; (8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d042      	beq.n	8002d46 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a5d      	ldr	r2, [pc, #372]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d03a      	beq.n	8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a5c      	ldr	r2, [pc, #368]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d032      	beq.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a5a      	ldr	r2, [pc, #360]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d02a      	beq.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a59      	ldr	r2, [pc, #356]	; (8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d022      	beq.n	8002d2e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a57      	ldr	r2, [pc, #348]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01a      	beq.n	8002d28 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a56      	ldr	r2, [pc, #344]	; (8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d012      	beq.n	8002d22 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a54      	ldr	r2, [pc, #336]	; (8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00a      	beq.n	8002d1c <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a53      	ldr	r2, [pc, #332]	; (8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d102      	bne.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8002d10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d14:	e01e      	b.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002d16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d1a:	e01b      	b.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002d1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d20:	e018      	b.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002d22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d26:	e015      	b.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002d28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d2c:	e012      	b.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d32:	e00f      	b.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d38:	e00c      	b.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d3e:	e009      	b.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d44:	e006      	b.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002d46:	2310      	movs	r3, #16
 8002d48:	e004      	b.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	e002      	b.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002d4e:	2310      	movs	r3, #16
 8002d50:	e000      	b.n	8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002d52:	2310      	movs	r3, #16
 8002d54:	4a43      	ldr	r2, [pc, #268]	; (8002e64 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002d56:	60d3      	str	r3, [r2, #12]
 8002d58:	e14f      	b.n	8002ffa <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8002d62:	429a      	cmp	r2, r3
 8002d64:	f240 8082 	bls.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d057      	beq.n	8002e22 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a2e      	ldr	r2, [pc, #184]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d050      	beq.n	8002e1e <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2c      	ldr	r2, [pc, #176]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d049      	beq.n	8002e1a <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a2b      	ldr	r2, [pc, #172]	; (8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d042      	beq.n	8002e16 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d03a      	beq.n	8002e10 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a28      	ldr	r2, [pc, #160]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d032      	beq.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a26      	ldr	r2, [pc, #152]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d02a      	beq.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a25      	ldr	r2, [pc, #148]	; (8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d022      	beq.n	8002dfe <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a23      	ldr	r2, [pc, #140]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01a      	beq.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a22      	ldr	r2, [pc, #136]	; (8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d012      	beq.n	8002df2 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a20      	ldr	r2, [pc, #128]	; (8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00a      	beq.n	8002dec <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1f      	ldr	r2, [pc, #124]	; (8002e58 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d102      	bne.n	8002de6 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8002de0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002de4:	e01e      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002de6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002dea:	e01b      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002dec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002df0:	e018      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002df2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002df6:	e015      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002df8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dfc:	e012      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e02:	e00f      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e08:	e00c      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e0e:	e009      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e14:	e006      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002e16:	2310      	movs	r3, #16
 8002e18:	e004      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002e1a:	2310      	movs	r3, #16
 8002e1c:	e002      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002e1e:	2310      	movs	r3, #16
 8002e20:	e000      	b.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002e22:	2310      	movs	r3, #16
 8002e24:	4a0f      	ldr	r2, [pc, #60]	; (8002e64 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002e26:	6093      	str	r3, [r2, #8]
 8002e28:	e0e7      	b.n	8002ffa <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002e2a:	bf00      	nop
 8002e2c:	40026010 	.word	0x40026010
 8002e30:	40026410 	.word	0x40026410
 8002e34:	40026070 	.word	0x40026070
 8002e38:	40026470 	.word	0x40026470
 8002e3c:	40026028 	.word	0x40026028
 8002e40:	40026428 	.word	0x40026428
 8002e44:	40026088 	.word	0x40026088
 8002e48:	40026488 	.word	0x40026488
 8002e4c:	40026040 	.word	0x40026040
 8002e50:	40026440 	.word	0x40026440
 8002e54:	400260a0 	.word	0x400260a0
 8002e58:	400264a0 	.word	0x400264a0
 8002e5c:	40026000 	.word	0x40026000
 8002e60:	40026458 	.word	0x40026458
 8002e64:	40026400 	.word	0x40026400
 8002e68:	400260b8 	.word	0x400260b8
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b96      	ldr	r3, [pc, #600]	; (80030cc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d960      	bls.n	8002f3a <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a94      	ldr	r2, [pc, #592]	; (80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d057      	beq.n	8002f32 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a93      	ldr	r2, [pc, #588]	; (80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d050      	beq.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a91      	ldr	r2, [pc, #580]	; (80030d8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d049      	beq.n	8002f2a <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a90      	ldr	r2, [pc, #576]	; (80030dc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d042      	beq.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a8e      	ldr	r2, [pc, #568]	; (80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d03a      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a8d      	ldr	r2, [pc, #564]	; (80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d032      	beq.n	8002f1a <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a8b      	ldr	r2, [pc, #556]	; (80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d02a      	beq.n	8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a8a      	ldr	r2, [pc, #552]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d022      	beq.n	8002f0e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a88      	ldr	r2, [pc, #544]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01a      	beq.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a87      	ldr	r2, [pc, #540]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d012      	beq.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a85      	ldr	r2, [pc, #532]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00a      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a84      	ldr	r2, [pc, #528]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d102      	bne.n	8002ef6 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8002ef0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ef4:	e01e      	b.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002ef6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002efa:	e01b      	b.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002efc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f00:	e018      	b.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002f02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f06:	e015      	b.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002f08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f0c:	e012      	b.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f12:	e00f      	b.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f18:	e00c      	b.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f1e:	e009      	b.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f24:	e006      	b.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002f26:	2310      	movs	r3, #16
 8002f28:	e004      	b.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002f2a:	2310      	movs	r3, #16
 8002f2c:	e002      	b.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002f2e:	2310      	movs	r3, #16
 8002f30:	e000      	b.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8002f32:	2310      	movs	r3, #16
 8002f34:	4a72      	ldr	r2, [pc, #456]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002f36:	60d3      	str	r3, [r2, #12]
 8002f38:	e05f      	b.n	8002ffa <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a64      	ldr	r2, [pc, #400]	; (80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d057      	beq.n	8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a62      	ldr	r2, [pc, #392]	; (80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d050      	beq.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a61      	ldr	r2, [pc, #388]	; (80030d8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d049      	beq.n	8002fec <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a5f      	ldr	r2, [pc, #380]	; (80030dc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d042      	beq.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5e      	ldr	r2, [pc, #376]	; (80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d03a      	beq.n	8002fe2 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5c      	ldr	r2, [pc, #368]	; (80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d032      	beq.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a5b      	ldr	r2, [pc, #364]	; (80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d02a      	beq.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a59      	ldr	r2, [pc, #356]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d022      	beq.n	8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a58      	ldr	r2, [pc, #352]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d01a      	beq.n	8002fca <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a56      	ldr	r2, [pc, #344]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d012      	beq.n	8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a55      	ldr	r2, [pc, #340]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00a      	beq.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a53      	ldr	r2, [pc, #332]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d102      	bne.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8002fb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fb6:	e01e      	b.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002fb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fbc:	e01b      	b.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002fbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fc2:	e018      	b.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002fc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fc8:	e015      	b.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002fca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fce:	e012      	b.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fd4:	e00f      	b.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fda:	e00c      	b.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe0:	e009      	b.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe6:	e006      	b.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002fe8:	2310      	movs	r3, #16
 8002fea:	e004      	b.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002fec:	2310      	movs	r3, #16
 8002fee:	e002      	b.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	e000      	b.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8002ff4:	2310      	movs	r3, #16
 8002ff6:	4a42      	ldr	r2, [pc, #264]	; (8003100 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8002ff8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b40      	ldr	r3, [pc, #256]	; (8003104 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8003002:	429a      	cmp	r2, r3
 8003004:	f240 8082 	bls.w	800310c <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a30      	ldr	r2, [pc, #192]	; (80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d057      	beq.n	80030c2 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a2f      	ldr	r2, [pc, #188]	; (80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d050      	beq.n	80030be <HAL_DMAEx_MultiBufferStart_IT+0x846>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a2d      	ldr	r2, [pc, #180]	; (80030d8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d049      	beq.n	80030ba <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a2c      	ldr	r2, [pc, #176]	; (80030dc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d042      	beq.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a2a      	ldr	r2, [pc, #168]	; (80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d03a      	beq.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d032      	beq.n	80030aa <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a27      	ldr	r2, [pc, #156]	; (80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d02a      	beq.n	80030a4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a26      	ldr	r2, [pc, #152]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d022      	beq.n	800309e <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01a      	beq.n	8003098 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d012      	beq.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a21      	ldr	r2, [pc, #132]	; (80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00a      	beq.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a20      	ldr	r2, [pc, #128]	; (80030fc <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d102      	bne.n	8003086 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8003080:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003084:	e01e      	b.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800308a:	e01b      	b.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800308c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003090:	e018      	b.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003092:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003096:	e015      	b.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003098:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800309c:	e012      	b.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800309e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030a2:	e00f      	b.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80030a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030a8:	e00c      	b.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80030aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030ae:	e009      	b.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80030b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030b4:	e006      	b.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80030b6:	2308      	movs	r3, #8
 80030b8:	e004      	b.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80030ba:	2308      	movs	r3, #8
 80030bc:	e002      	b.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80030be:	2308      	movs	r3, #8
 80030c0:	e000      	b.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80030c2:	2308      	movs	r3, #8
 80030c4:	4a10      	ldr	r2, [pc, #64]	; (8003108 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 80030c6:	60d3      	str	r3, [r2, #12]
 80030c8:	e16f      	b.n	80033aa <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80030ca:	bf00      	nop
 80030cc:	40026058 	.word	0x40026058
 80030d0:	40026010 	.word	0x40026010
 80030d4:	40026410 	.word	0x40026410
 80030d8:	40026070 	.word	0x40026070
 80030dc:	40026470 	.word	0x40026470
 80030e0:	40026028 	.word	0x40026028
 80030e4:	40026428 	.word	0x40026428
 80030e8:	40026088 	.word	0x40026088
 80030ec:	40026488 	.word	0x40026488
 80030f0:	40026040 	.word	0x40026040
 80030f4:	40026440 	.word	0x40026440
 80030f8:	400260a0 	.word	0x400260a0
 80030fc:	400264a0 	.word	0x400264a0
 8003100:	40026000 	.word	0x40026000
 8003104:	40026458 	.word	0x40026458
 8003108:	40026400 	.word	0x40026400
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	4b94      	ldr	r3, [pc, #592]	; (8003364 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003114:	429a      	cmp	r2, r3
 8003116:	d960      	bls.n	80031da <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a92      	ldr	r2, [pc, #584]	; (8003368 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d057      	beq.n	80031d2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a91      	ldr	r2, [pc, #580]	; (800336c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d050      	beq.n	80031ce <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a8f      	ldr	r2, [pc, #572]	; (8003370 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d049      	beq.n	80031ca <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a8e      	ldr	r2, [pc, #568]	; (8003374 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d042      	beq.n	80031c6 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a8c      	ldr	r2, [pc, #560]	; (8003378 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d03a      	beq.n	80031c0 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a8b      	ldr	r2, [pc, #556]	; (800337c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d032      	beq.n	80031ba <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a89      	ldr	r2, [pc, #548]	; (8003380 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d02a      	beq.n	80031b4 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a88      	ldr	r2, [pc, #544]	; (8003384 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d022      	beq.n	80031ae <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a86      	ldr	r2, [pc, #536]	; (8003388 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d01a      	beq.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a85      	ldr	r2, [pc, #532]	; (800338c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d012      	beq.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a83      	ldr	r2, [pc, #524]	; (8003390 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00a      	beq.n	800319c <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a82      	ldr	r2, [pc, #520]	; (8003394 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d102      	bne.n	8003196 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8003190:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003194:	e01e      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800319a:	e01b      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800319c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031a0:	e018      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80031a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031a6:	e015      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80031a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031ac:	e012      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80031ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b2:	e00f      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80031b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b8:	e00c      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80031ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031be:	e009      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80031c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031c4:	e006      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80031c6:	2308      	movs	r3, #8
 80031c8:	e004      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80031ca:	2308      	movs	r3, #8
 80031cc:	e002      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80031ce:	2308      	movs	r3, #8
 80031d0:	e000      	b.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80031d2:	2308      	movs	r3, #8
 80031d4:	4a70      	ldr	r2, [pc, #448]	; (8003398 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 80031d6:	6093      	str	r3, [r2, #8]
 80031d8:	e0e7      	b.n	80033aa <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	4b6e      	ldr	r3, [pc, #440]	; (800339c <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d960      	bls.n	80032a8 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a5f      	ldr	r2, [pc, #380]	; (8003368 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d057      	beq.n	80032a0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a5d      	ldr	r2, [pc, #372]	; (800336c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d050      	beq.n	800329c <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a5c      	ldr	r2, [pc, #368]	; (8003370 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d049      	beq.n	8003298 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a5a      	ldr	r2, [pc, #360]	; (8003374 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d042      	beq.n	8003294 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a59      	ldr	r2, [pc, #356]	; (8003378 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d03a      	beq.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a57      	ldr	r2, [pc, #348]	; (800337c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d032      	beq.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a56      	ldr	r2, [pc, #344]	; (8003380 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d02a      	beq.n	8003282 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a54      	ldr	r2, [pc, #336]	; (8003384 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d022      	beq.n	800327c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a53      	ldr	r2, [pc, #332]	; (8003388 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d01a      	beq.n	8003276 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a51      	ldr	r2, [pc, #324]	; (800338c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d012      	beq.n	8003270 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a50      	ldr	r2, [pc, #320]	; (8003390 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00a      	beq.n	800326a <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a4e      	ldr	r2, [pc, #312]	; (8003394 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d102      	bne.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800325e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003262:	e01e      	b.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003264:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003268:	e01b      	b.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800326a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800326e:	e018      	b.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003270:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003274:	e015      	b.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003276:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800327a:	e012      	b.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800327c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003280:	e00f      	b.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003286:	e00c      	b.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800328c:	e009      	b.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800328e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003292:	e006      	b.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003294:	2308      	movs	r3, #8
 8003296:	e004      	b.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003298:	2308      	movs	r3, #8
 800329a:	e002      	b.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800329c:	2308      	movs	r3, #8
 800329e:	e000      	b.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80032a0:	2308      	movs	r3, #8
 80032a2:	4a3f      	ldr	r2, [pc, #252]	; (80033a0 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 80032a4:	60d3      	str	r3, [r2, #12]
 80032a6:	e080      	b.n	80033aa <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d078      	beq.n	80033a4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a2d      	ldr	r2, [pc, #180]	; (800336c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d050      	beq.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a2b      	ldr	r2, [pc, #172]	; (8003370 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d049      	beq.n	800335a <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d042      	beq.n	8003356 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a28      	ldr	r2, [pc, #160]	; (8003378 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d03a      	beq.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a27      	ldr	r2, [pc, #156]	; (800337c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d032      	beq.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a25      	ldr	r2, [pc, #148]	; (8003380 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d02a      	beq.n	8003344 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a24      	ldr	r2, [pc, #144]	; (8003384 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d022      	beq.n	800333e <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a22      	ldr	r2, [pc, #136]	; (8003388 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01a      	beq.n	8003338 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d012      	beq.n	8003332 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00a      	beq.n	800332c <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d102      	bne.n	8003326 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8003320:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003324:	e03f      	b.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800332a:	e03c      	b.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800332c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003330:	e039      	b.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003332:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003336:	e036      	b.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003338:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800333c:	e033      	b.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800333e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003342:	e030      	b.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003348:	e02d      	b.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800334a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800334e:	e02a      	b.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003354:	e027      	b.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003356:	2308      	movs	r3, #8
 8003358:	e025      	b.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800335a:	2308      	movs	r3, #8
 800335c:	e023      	b.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800335e:	2308      	movs	r3, #8
 8003360:	e021      	b.n	80033a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003362:	bf00      	nop
 8003364:	400260b8 	.word	0x400260b8
 8003368:	40026010 	.word	0x40026010
 800336c:	40026410 	.word	0x40026410
 8003370:	40026070 	.word	0x40026070
 8003374:	40026470 	.word	0x40026470
 8003378:	40026028 	.word	0x40026028
 800337c:	40026428 	.word	0x40026428
 8003380:	40026088 	.word	0x40026088
 8003384:	40026488 	.word	0x40026488
 8003388:	40026040 	.word	0x40026040
 800338c:	40026440 	.word	0x40026440
 8003390:	400260a0 	.word	0x400260a0
 8003394:	400264a0 	.word	0x400264a0
 8003398:	40026400 	.word	0x40026400
 800339c:	40026058 	.word	0x40026058
 80033a0:	40026000 	.word	0x40026000
 80033a4:	2308      	movs	r3, #8
 80033a6:	4a9a      	ldr	r2, [pc, #616]	; (8003610 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80033a8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	4b98      	ldr	r3, [pc, #608]	; (8003614 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d960      	bls.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a97      	ldr	r2, [pc, #604]	; (8003618 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d057      	beq.n	8003470 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a95      	ldr	r2, [pc, #596]	; (800361c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d050      	beq.n	800346c <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a94      	ldr	r2, [pc, #592]	; (8003620 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d049      	beq.n	8003468 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a92      	ldr	r2, [pc, #584]	; (8003624 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d042      	beq.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a91      	ldr	r2, [pc, #580]	; (8003628 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d03a      	beq.n	800345e <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a8f      	ldr	r2, [pc, #572]	; (800362c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d032      	beq.n	8003458 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a8e      	ldr	r2, [pc, #568]	; (8003630 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d02a      	beq.n	8003452 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a8c      	ldr	r2, [pc, #560]	; (8003634 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d022      	beq.n	800344c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a8b      	ldr	r2, [pc, #556]	; (8003638 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d01a      	beq.n	8003446 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a89      	ldr	r2, [pc, #548]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d012      	beq.n	8003440 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a88      	ldr	r2, [pc, #544]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00a      	beq.n	800343a <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a86      	ldr	r2, [pc, #536]	; (8003644 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d102      	bne.n	8003434 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 800342e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003432:	e01e      	b.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003438:	e01b      	b.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800343a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800343e:	e018      	b.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003440:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003444:	e015      	b.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003446:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800344a:	e012      	b.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800344c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003450:	e00f      	b.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003456:	e00c      	b.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800345c:	e009      	b.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800345e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003462:	e006      	b.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003464:	2304      	movs	r3, #4
 8003466:	e004      	b.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003468:	2304      	movs	r3, #4
 800346a:	e002      	b.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800346c:	2304      	movs	r3, #4
 800346e:	e000      	b.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003470:	2304      	movs	r3, #4
 8003472:	4a75      	ldr	r2, [pc, #468]	; (8003648 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003474:	60d3      	str	r3, [r2, #12]
 8003476:	e151      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	4b73      	ldr	r3, [pc, #460]	; (800364c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8003480:	429a      	cmp	r2, r3
 8003482:	d960      	bls.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a63      	ldr	r2, [pc, #396]	; (8003618 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d057      	beq.n	800353e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a62      	ldr	r2, [pc, #392]	; (800361c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d050      	beq.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a60      	ldr	r2, [pc, #384]	; (8003620 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d049      	beq.n	8003536 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a5f      	ldr	r2, [pc, #380]	; (8003624 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d042      	beq.n	8003532 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a5d      	ldr	r2, [pc, #372]	; (8003628 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d03a      	beq.n	800352c <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a5c      	ldr	r2, [pc, #368]	; (800362c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d032      	beq.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a5a      	ldr	r2, [pc, #360]	; (8003630 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d02a      	beq.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a59      	ldr	r2, [pc, #356]	; (8003634 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d022      	beq.n	800351a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a57      	ldr	r2, [pc, #348]	; (8003638 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01a      	beq.n	8003514 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a56      	ldr	r2, [pc, #344]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d012      	beq.n	800350e <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a54      	ldr	r2, [pc, #336]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00a      	beq.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a53      	ldr	r2, [pc, #332]	; (8003644 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d102      	bne.n	8003502 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 80034fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003500:	e01e      	b.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003502:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003506:	e01b      	b.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003508:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800350c:	e018      	b.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800350e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003512:	e015      	b.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003514:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003518:	e012      	b.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800351a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800351e:	e00f      	b.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003524:	e00c      	b.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800352a:	e009      	b.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800352c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003530:	e006      	b.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003532:	2304      	movs	r3, #4
 8003534:	e004      	b.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003536:	2304      	movs	r3, #4
 8003538:	e002      	b.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800353a:	2304      	movs	r3, #4
 800353c:	e000      	b.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800353e:	2304      	movs	r3, #4
 8003540:	4a41      	ldr	r2, [pc, #260]	; (8003648 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003542:	6093      	str	r3, [r2, #8]
 8003544:	e0ea      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	4b40      	ldr	r3, [pc, #256]	; (8003650 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 800354e:	429a      	cmp	r2, r3
 8003550:	f240 8084 	bls.w	800365c <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a2f      	ldr	r2, [pc, #188]	; (8003618 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d07a      	beq.n	8003654 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a2e      	ldr	r2, [pc, #184]	; (800361c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d050      	beq.n	800360a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a2c      	ldr	r2, [pc, #176]	; (8003620 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d049      	beq.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a2b      	ldr	r2, [pc, #172]	; (8003624 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d042      	beq.n	8003602 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a29      	ldr	r2, [pc, #164]	; (8003628 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d03a      	beq.n	80035fc <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a28      	ldr	r2, [pc, #160]	; (800362c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d032      	beq.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a26      	ldr	r2, [pc, #152]	; (8003630 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d02a      	beq.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a25      	ldr	r2, [pc, #148]	; (8003634 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d022      	beq.n	80035ea <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a23      	ldr	r2, [pc, #140]	; (8003638 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01a      	beq.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a22      	ldr	r2, [pc, #136]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d012      	beq.n	80035de <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a20      	ldr	r2, [pc, #128]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00a      	beq.n	80035d8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1f      	ldr	r2, [pc, #124]	; (8003644 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d102      	bne.n	80035d2 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 80035cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035d0:	e041      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80035d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035d6:	e03e      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80035d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035dc:	e03b      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80035de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035e2:	e038      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80035e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035e8:	e035      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80035ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ee:	e032      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80035f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035f4:	e02f      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80035f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035fa:	e02c      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80035fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003600:	e029      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003602:	2304      	movs	r3, #4
 8003604:	e027      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003606:	2304      	movs	r3, #4
 8003608:	e025      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800360a:	2304      	movs	r3, #4
 800360c:	e023      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800360e:	bf00      	nop
 8003610:	40026000 	.word	0x40026000
 8003614:	40026458 	.word	0x40026458
 8003618:	40026010 	.word	0x40026010
 800361c:	40026410 	.word	0x40026410
 8003620:	40026070 	.word	0x40026070
 8003624:	40026470 	.word	0x40026470
 8003628:	40026028 	.word	0x40026028
 800362c:	40026428 	.word	0x40026428
 8003630:	40026088 	.word	0x40026088
 8003634:	40026488 	.word	0x40026488
 8003638:	40026040 	.word	0x40026040
 800363c:	40026440 	.word	0x40026440
 8003640:	400260a0 	.word	0x400260a0
 8003644:	400264a0 	.word	0x400264a0
 8003648:	40026400 	.word	0x40026400
 800364c:	400260b8 	.word	0x400260b8
 8003650:	40026058 	.word	0x40026058
 8003654:	2304      	movs	r3, #4
 8003656:	4a94      	ldr	r2, [pc, #592]	; (80038a8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003658:	60d3      	str	r3, [r2, #12]
 800365a:	e05f      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a92      	ldr	r2, [pc, #584]	; (80038ac <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d057      	beq.n	8003716 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a91      	ldr	r2, [pc, #580]	; (80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d050      	beq.n	8003712 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a8f      	ldr	r2, [pc, #572]	; (80038b4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d049      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a8e      	ldr	r2, [pc, #568]	; (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d042      	beq.n	800370a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a8c      	ldr	r2, [pc, #560]	; (80038bc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d03a      	beq.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a8b      	ldr	r2, [pc, #556]	; (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d032      	beq.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a89      	ldr	r2, [pc, #548]	; (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d02a      	beq.n	80036f8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a88      	ldr	r2, [pc, #544]	; (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d022      	beq.n	80036f2 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a86      	ldr	r2, [pc, #536]	; (80038cc <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01a      	beq.n	80036ec <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a85      	ldr	r2, [pc, #532]	; (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d012      	beq.n	80036e6 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a83      	ldr	r2, [pc, #524]	; (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00a      	beq.n	80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a82      	ldr	r2, [pc, #520]	; (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d102      	bne.n	80036da <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 80036d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036d8:	e01e      	b.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80036da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036de:	e01b      	b.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80036e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036e4:	e018      	b.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80036e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036ea:	e015      	b.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80036ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036f0:	e012      	b.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80036f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f6:	e00f      	b.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80036f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036fc:	e00c      	b.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80036fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003702:	e009      	b.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003708:	e006      	b.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800370a:	2304      	movs	r3, #4
 800370c:	e004      	b.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800370e:	2304      	movs	r3, #4
 8003710:	e002      	b.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003712:	2304      	movs	r3, #4
 8003714:	e000      	b.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003716:	2304      	movs	r3, #4
 8003718:	4a63      	ldr	r2, [pc, #396]	; (80038a8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800371a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	4b6e      	ldr	r3, [pc, #440]	; (80038dc <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8003724:	429a      	cmp	r2, r3
 8003726:	d95c      	bls.n	80037e2 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a5f      	ldr	r2, [pc, #380]	; (80038ac <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d053      	beq.n	80037da <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a5e      	ldr	r2, [pc, #376]	; (80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d04c      	beq.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a5c      	ldr	r2, [pc, #368]	; (80038b4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d045      	beq.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a5b      	ldr	r2, [pc, #364]	; (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d03e      	beq.n	80037ce <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a59      	ldr	r2, [pc, #356]	; (80038bc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d037      	beq.n	80037ca <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a58      	ldr	r2, [pc, #352]	; (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d030      	beq.n	80037c6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a56      	ldr	r2, [pc, #344]	; (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d029      	beq.n	80037c2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a55      	ldr	r2, [pc, #340]	; (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d022      	beq.n	80037be <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a53      	ldr	r2, [pc, #332]	; (80038cc <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d01a      	beq.n	80037b8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a52      	ldr	r2, [pc, #328]	; (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d012      	beq.n	80037b2 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a50      	ldr	r2, [pc, #320]	; (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00a      	beq.n	80037ac <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a4f      	ldr	r2, [pc, #316]	; (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d102      	bne.n	80037a6 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 80037a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037a4:	e01a      	b.n	80037dc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80037a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037aa:	e017      	b.n	80037dc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80037ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037b0:	e014      	b.n	80037dc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80037b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037b6:	e011      	b.n	80037dc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80037b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037bc:	e00e      	b.n	80037dc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80037be:	2340      	movs	r3, #64	; 0x40
 80037c0:	e00c      	b.n	80037dc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80037c2:	2340      	movs	r3, #64	; 0x40
 80037c4:	e00a      	b.n	80037dc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80037c6:	2340      	movs	r3, #64	; 0x40
 80037c8:	e008      	b.n	80037dc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80037ca:	2340      	movs	r3, #64	; 0x40
 80037cc:	e006      	b.n	80037dc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e004      	b.n	80037dc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e002      	b.n	80037dc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80037da:	2301      	movs	r3, #1
 80037dc:	4a40      	ldr	r2, [pc, #256]	; (80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 80037de:	60d3      	str	r3, [r2, #12]
 80037e0:	e141      	b.n	8003a66 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	4b3e      	ldr	r3, [pc, #248]	; (80038e4 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d97c      	bls.n	80038e8 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2e      	ldr	r2, [pc, #184]	; (80038ac <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d053      	beq.n	80038a0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2c      	ldr	r2, [pc, #176]	; (80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d04c      	beq.n	800389c <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d045      	beq.n	8003898 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a29      	ldr	r2, [pc, #164]	; (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d03e      	beq.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a28      	ldr	r2, [pc, #160]	; (80038bc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d037      	beq.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a26      	ldr	r2, [pc, #152]	; (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d030      	beq.n	800388c <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a25      	ldr	r2, [pc, #148]	; (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d029      	beq.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a23      	ldr	r2, [pc, #140]	; (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d022      	beq.n	8003884 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a22      	ldr	r2, [pc, #136]	; (80038cc <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d01a      	beq.n	800387e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a20      	ldr	r2, [pc, #128]	; (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d012      	beq.n	8003878 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1f      	ldr	r2, [pc, #124]	; (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00a      	beq.n	8003872 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1d      	ldr	r2, [pc, #116]	; (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d102      	bne.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8003866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800386a:	e01a      	b.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800386c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003870:	e017      	b.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003876:	e014      	b.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800387c:	e011      	b.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800387e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003882:	e00e      	b.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003884:	2340      	movs	r3, #64	; 0x40
 8003886:	e00c      	b.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003888:	2340      	movs	r3, #64	; 0x40
 800388a:	e00a      	b.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800388c:	2340      	movs	r3, #64	; 0x40
 800388e:	e008      	b.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003890:	2340      	movs	r3, #64	; 0x40
 8003892:	e006      	b.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003894:	2301      	movs	r3, #1
 8003896:	e004      	b.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003898:	2301      	movs	r3, #1
 800389a:	e002      	b.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80038a0:	2301      	movs	r3, #1
 80038a2:	4a0f      	ldr	r2, [pc, #60]	; (80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 80038a4:	6093      	str	r3, [r2, #8]
 80038a6:	e0de      	b.n	8003a66 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80038a8:	40026000 	.word	0x40026000
 80038ac:	40026010 	.word	0x40026010
 80038b0:	40026410 	.word	0x40026410
 80038b4:	40026070 	.word	0x40026070
 80038b8:	40026470 	.word	0x40026470
 80038bc:	40026028 	.word	0x40026028
 80038c0:	40026428 	.word	0x40026428
 80038c4:	40026088 	.word	0x40026088
 80038c8:	40026488 	.word	0x40026488
 80038cc:	40026040 	.word	0x40026040
 80038d0:	40026440 	.word	0x40026440
 80038d4:	400260a0 	.word	0x400260a0
 80038d8:	400264a0 	.word	0x400264a0
 80038dc:	40026458 	.word	0x40026458
 80038e0:	40026400 	.word	0x40026400
 80038e4:	400260b8 	.word	0x400260b8
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b78      	ldr	r3, [pc, #480]	; (8003ad0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d95c      	bls.n	80039ae <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a76      	ldr	r2, [pc, #472]	; (8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d053      	beq.n	80039a6 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a75      	ldr	r2, [pc, #468]	; (8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d04c      	beq.n	80039a2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a73      	ldr	r2, [pc, #460]	; (8003adc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d045      	beq.n	800399e <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a72      	ldr	r2, [pc, #456]	; (8003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d03e      	beq.n	800399a <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a70      	ldr	r2, [pc, #448]	; (8003ae4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d037      	beq.n	8003996 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a6f      	ldr	r2, [pc, #444]	; (8003ae8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d030      	beq.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6d      	ldr	r2, [pc, #436]	; (8003aec <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d029      	beq.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6c      	ldr	r2, [pc, #432]	; (8003af0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d022      	beq.n	800398a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a6a      	ldr	r2, [pc, #424]	; (8003af4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01a      	beq.n	8003984 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a69      	ldr	r2, [pc, #420]	; (8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d012      	beq.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a67      	ldr	r2, [pc, #412]	; (8003afc <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00a      	beq.n	8003978 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a66      	ldr	r2, [pc, #408]	; (8003b00 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d102      	bne.n	8003972 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 800396c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003970:	e01a      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003976:	e017      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800397c:	e014      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800397e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003982:	e011      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003988:	e00e      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800398a:	2340      	movs	r3, #64	; 0x40
 800398c:	e00c      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800398e:	2340      	movs	r3, #64	; 0x40
 8003990:	e00a      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003992:	2340      	movs	r3, #64	; 0x40
 8003994:	e008      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003996:	2340      	movs	r3, #64	; 0x40
 8003998:	e006      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800399a:	2301      	movs	r3, #1
 800399c:	e004      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800399e:	2301      	movs	r3, #1
 80039a0:	e002      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80039a6:	2301      	movs	r3, #1
 80039a8:	4a56      	ldr	r2, [pc, #344]	; (8003b04 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80039aa:	60d3      	str	r3, [r2, #12]
 80039ac:	e05b      	b.n	8003a66 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a48      	ldr	r2, [pc, #288]	; (8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d053      	beq.n	8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a46      	ldr	r2, [pc, #280]	; (8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d04c      	beq.n	8003a5c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a45      	ldr	r2, [pc, #276]	; (8003adc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d045      	beq.n	8003a58 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a43      	ldr	r2, [pc, #268]	; (8003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d03e      	beq.n	8003a54 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a42      	ldr	r2, [pc, #264]	; (8003ae4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d037      	beq.n	8003a50 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a40      	ldr	r2, [pc, #256]	; (8003ae8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d030      	beq.n	8003a4c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a3f      	ldr	r2, [pc, #252]	; (8003aec <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d029      	beq.n	8003a48 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a3d      	ldr	r2, [pc, #244]	; (8003af0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d022      	beq.n	8003a44 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a3c      	ldr	r2, [pc, #240]	; (8003af4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d01a      	beq.n	8003a3e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a3a      	ldr	r2, [pc, #232]	; (8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d012      	beq.n	8003a38 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a39      	ldr	r2, [pc, #228]	; (8003afc <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00a      	beq.n	8003a32 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a37      	ldr	r2, [pc, #220]	; (8003b00 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d102      	bne.n	8003a2c <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8003a26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a2a:	e01a      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003a2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a30:	e017      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003a32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a36:	e014      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a3c:	e011      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a42:	e00e      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003a44:	2340      	movs	r3, #64	; 0x40
 8003a46:	e00c      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003a48:	2340      	movs	r3, #64	; 0x40
 8003a4a:	e00a      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003a4c:	2340      	movs	r3, #64	; 0x40
 8003a4e:	e008      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003a50:	2340      	movs	r3, #64	; 0x40
 8003a52:	e006      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003a54:	2301      	movs	r3, #1
 8003a56:	e004      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e002      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003a60:	2301      	movs	r3, #1
 8003a62:	4a28      	ldr	r2, [pc, #160]	; (8003b04 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003a64:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0216 	orr.w	r2, r2, #22
 8003a74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d103      	bne.n	8003a96 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d007      	beq.n	8003aa6 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0208 	orr.w	r2, r2, #8
 8003aa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e005      	b.n	8003ac4 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40026058 	.word	0x40026058
 8003ad4:	40026010 	.word	0x40026010
 8003ad8:	40026410 	.word	0x40026410
 8003adc:	40026070 	.word	0x40026070
 8003ae0:	40026470 	.word	0x40026470
 8003ae4:	40026028 	.word	0x40026028
 8003ae8:	40026428 	.word	0x40026428
 8003aec:	40026088 	.word	0x40026088
 8003af0:	40026488 	.word	0x40026488
 8003af4:	40026040 	.word	0x40026040
 8003af8:	40026440 	.word	0x40026440
 8003afc:	400260a0 	.word	0x400260a0
 8003b00:	400264a0 	.word	0x400264a0
 8003b04:	40026000 	.word	0x40026000

08003b08 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d108      	bne.n	8003b38 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b36:	e007      	b.n	8003b48 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	60da      	str	r2, [r3, #12]
}
 8003b48:	bf00      	nop
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003b64:	4baa      	ldr	r3, [pc, #680]	; (8003e10 <HAL_ETH_Init+0x2bc>)
 8003b66:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e183      	b.n	8003e82 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f007 fb6e 	bl	800b270 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b94:	2300      	movs	r3, #0
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	4b9e      	ldr	r3, [pc, #632]	; (8003e14 <HAL_ETH_Init+0x2c0>)
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9c:	4a9d      	ldr	r2, [pc, #628]	; (8003e14 <HAL_ETH_Init+0x2c0>)
 8003b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba2:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba4:	4b9b      	ldr	r3, [pc, #620]	; (8003e14 <HAL_ETH_Init+0x2c0>)
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003bb0:	4b99      	ldr	r3, [pc, #612]	; (8003e18 <HAL_ETH_Init+0x2c4>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4a98      	ldr	r2, [pc, #608]	; (8003e18 <HAL_ETH_Init+0x2c4>)
 8003bb6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bba:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003bbc:	4b96      	ldr	r3, [pc, #600]	; (8003e18 <HAL_ETH_Init+0x2c4>)
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4994      	ldr	r1, [pc, #592]	; (8003e18 <HAL_ETH_Init+0x2c4>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0201 	orr.w	r2, r2, #1
 8003bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003be2:	f7fe f929 	bl	8001e38 <HAL_GetTick>
 8003be6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003be8:	e011      	b.n	8003c0e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003bea:	f7fe f925 	bl	8001e38 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003bf8:	d909      	bls.n	8003c0e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e139      	b.n	8003e82 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e4      	bne.n	8003bea <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f023 031c 	bic.w	r3, r3, #28
 8003c2e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003c30:	f003 fafc 	bl	800722c <HAL_RCC_GetHCLKFreq>
 8003c34:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	4a78      	ldr	r2, [pc, #480]	; (8003e1c <HAL_ETH_Init+0x2c8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d908      	bls.n	8003c50 <HAL_ETH_Init+0xfc>
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	4a77      	ldr	r2, [pc, #476]	; (8003e20 <HAL_ETH_Init+0x2cc>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d804      	bhi.n	8003c50 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f043 0308 	orr.w	r3, r3, #8
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	e027      	b.n	8003ca0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	4a73      	ldr	r2, [pc, #460]	; (8003e20 <HAL_ETH_Init+0x2cc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d908      	bls.n	8003c6a <HAL_ETH_Init+0x116>
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	4a6d      	ldr	r2, [pc, #436]	; (8003e10 <HAL_ETH_Init+0x2bc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d204      	bcs.n	8003c6a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f043 030c 	orr.w	r3, r3, #12
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	e01a      	b.n	8003ca0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	4a68      	ldr	r2, [pc, #416]	; (8003e10 <HAL_ETH_Init+0x2bc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d303      	bcc.n	8003c7a <HAL_ETH_Init+0x126>
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	4a6b      	ldr	r2, [pc, #428]	; (8003e24 <HAL_ETH_Init+0x2d0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d911      	bls.n	8003c9e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	4a69      	ldr	r2, [pc, #420]	; (8003e24 <HAL_ETH_Init+0x2d0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d908      	bls.n	8003c94 <HAL_ETH_Init+0x140>
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	4a68      	ldr	r2, [pc, #416]	; (8003e28 <HAL_ETH_Init+0x2d4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d804      	bhi.n	8003c94 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f043 0304 	orr.w	r3, r3, #4
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	e005      	b.n	8003ca0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f043 0310 	orr.w	r3, r3, #16
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	e000      	b.n	8003ca0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003c9e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003ca8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003cac:	2100      	movs	r1, #0
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fc17 	bl	80044e2 <HAL_ETH_WritePHYRegister>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003cbe:	6939      	ldr	r1, [r7, #16]
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fdcd 	bl	8004860 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e0d7      	b.n	8003e82 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003cd2:	20ff      	movs	r0, #255	; 0xff
 8003cd4:	f7fe f8bc 	bl	8001e50 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a5 	beq.w	8003e2c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ce2:	f7fe f8a9 	bl	8001e38 <HAL_GetTick>
 8003ce6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003ce8:	f107 030c 	add.w	r3, r7, #12
 8003cec:	461a      	mov	r2, r3
 8003cee:	2101      	movs	r1, #1
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fb8e 	bl	8004412 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003cf6:	f7fe f89f 	bl	8001e38 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d90f      	bls.n	8003d28 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003d0c:	6939      	ldr	r1, [r7, #16]
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fda6 	bl	8004860 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e0ac      	b.n	8003e82 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0da      	beq.n	8003ce8 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003d32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d36:	2100      	movs	r1, #0
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fbd2 	bl	80044e2 <HAL_ETH_WritePHYRegister>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00b      	beq.n	8003d5c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003d48:	6939      	ldr	r1, [r7, #16]
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fd88 	bl	8004860 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e092      	b.n	8003e82 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d5c:	f7fe f86c 	bl	8001e38 <HAL_GetTick>
 8003d60:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003d62:	f107 030c 	add.w	r3, r7, #12
 8003d66:	461a      	mov	r2, r3
 8003d68:	2101      	movs	r1, #1
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fb51 	bl	8004412 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003d70:	f7fe f862 	bl	8001e38 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d90f      	bls.n	8003da2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003d86:	6939      	ldr	r1, [r7, #16]
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fd69 	bl	8004860 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e06f      	b.n	8003e82 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0da      	beq.n	8003d62 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003dac:	f107 030c 	add.w	r3, r7, #12
 8003db0:	461a      	mov	r2, r3
 8003db2:	2131      	movs	r1, #49	; 0x31
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fb2c 	bl	8004412 <HAL_ETH_ReadPHYRegister>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00b      	beq.n	8003dd8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003dc4:	6939      	ldr	r1, [r7, #16]
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fd4a 	bl	8004860 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e054      	b.n	8003e82 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0310 	and.w	r3, r3, #16
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d004      	beq.n	8003dec <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	e002      	b.n	8003df2 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]
 8003e02:	e035      	b.n	8003e70 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	e030      	b.n	8003e70 <HAL_ETH_Init+0x31c>
 8003e0e:	bf00      	nop
 8003e10:	03938700 	.word	0x03938700
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40013800 	.word	0x40013800
 8003e1c:	01312cff 	.word	0x01312cff
 8003e20:	02160ebf 	.word	0x02160ebf
 8003e24:	05f5e0ff 	.word	0x05f5e0ff
 8003e28:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	08db      	lsrs	r3, r3, #3
 8003e32:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	2100      	movs	r1, #0
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fb4c 	bl	80044e2 <HAL_ETH_WritePHYRegister>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00b      	beq.n	8003e68 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003e54:	6939      	ldr	r1, [r7, #16]
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fd02 	bl	8004860 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e00c      	b.n	8003e82 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003e68:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003e6c:	f7fd fff0 	bl	8001e50 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003e70:	6939      	ldr	r1, [r7, #16]
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fcf4 	bl	8004860 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop

08003e8c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_ETH_DMATxDescListInit+0x20>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e052      	b.n	8003f52 <HAL_ETH_DMATxDescListInit+0xc6>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	e030      	b.n	8003f2a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	015b      	lsls	r3, r3, #5
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	4413      	add	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ed8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003ee0:	fb02 f303 	mul.w	r3, r2, r3
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d105      	bne.n	8003f02 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d208      	bcs.n	8003f1e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	015b      	lsls	r3, r3, #5
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	4413      	add	r3, r2
 8003f16:	461a      	mov	r2, r3
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	60da      	str	r2, [r3, #12]
 8003f1c:	e002      	b.n	8003f24 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	3301      	adds	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d3ca      	bcc.n	8003ec8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f3c:	3310      	adds	r3, #16
 8003f3e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	371c      	adds	r7, #28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b087      	sub	sp, #28
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_ETH_DMARxDescListInit+0x20>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e056      	b.n	800402c <HAL_ETH_DMARxDescListInit+0xce>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	e034      	b.n	8004004 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	015b      	lsls	r3, r3, #5
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003faa:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003fb2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003fba:	fb02 f303 	mul.w	r3, r2, r3
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d105      	bne.n	8003fdc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d208      	bcs.n	8003ff8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	015b      	lsls	r3, r3, #5
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	4413      	add	r3, r2
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	e002      	b.n	8003ffe <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	3301      	adds	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d3c6      	bcc.n	8003f9a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004016:	330c      	adds	r3, #12
 8004018:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_ETH_TransmitFrame+0x24>
 8004058:	2302      	movs	r3, #2
 800405a:	e0cd      	b.n	80041f8 <HAL_ETH_TransmitFrame+0x1c0>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004082:	2301      	movs	r3, #1
 8004084:	e0b8      	b.n	80041f8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	da09      	bge.n	80040a4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2212      	movs	r2, #18
 8004094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0a9      	b.n	80041f8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d915      	bls.n	80040da <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	4a54      	ldr	r2, [pc, #336]	; (8004204 <HAL_ETH_TransmitFrame+0x1cc>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	0a9b      	lsrs	r3, r3, #10
 80040b8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	4b51      	ldr	r3, [pc, #324]	; (8004204 <HAL_ETH_TransmitFrame+0x1cc>)
 80040be:	fba3 1302 	umull	r1, r3, r3, r2
 80040c2:	0a9b      	lsrs	r3, r3, #10
 80040c4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	3301      	adds	r3, #1
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	e001      	b.n	80040de <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80040da:	2301      	movs	r3, #1
 80040dc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d11c      	bne.n	800411e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80040f2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80040fe:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800410e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	461a      	mov	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	62da      	str	r2, [r3, #44]	; 0x2c
 800411c:	e04b      	b.n	80041b6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	e044      	b.n	80041ae <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004132:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d107      	bne.n	800414a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004148:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004152:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	3b01      	subs	r3, #1
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	429a      	cmp	r2, r3
 800415c:	d116      	bne.n	800418c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800416c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	4a25      	ldr	r2, [pc, #148]	; (8004208 <HAL_ETH_TransmitFrame+0x1d0>)
 8004172:	fb02 f203 	mul.w	r2, r2, r3
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	4413      	add	r3, r2
 800417a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800417e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800418a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800419a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	461a      	mov	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	3301      	adds	r3, #1
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d3b6      	bcc.n	8004124 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041be:	3314      	adds	r3, #20
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00d      	beq.n	80041e6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d2:	3314      	adds	r3, #20
 80041d4:	2204      	movs	r2, #4
 80041d6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e0:	3304      	adds	r3, #4
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	ac02b00b 	.word	0xac02b00b
 8004208:	fffffa0c 	.word	0xfffffa0c

0800420c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8004222:	2302      	movs	r3, #2
 8004224:	e074      	b.n	8004310 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004236:	e05a      	b.n	80042ee <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3301      	adds	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424c:	d10d      	bne.n	800426a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	461a      	mov	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	629a      	str	r2, [r3, #40]	; 0x28
 8004268:	e041      	b.n	80042ee <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	461a      	mov	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	629a      	str	r2, [r3, #40]	; 0x28
 800428e:	e02e      	b.n	80042ee <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d103      	bne.n	80042b2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80042be:	1f1a      	subs	r2, r3, #4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	461a      	mov	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e010      	b.n	8004310 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	db02      	blt.n	80042fe <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d99c      	bls.n	8004238 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432c:	3314      	adds	r3, #20
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	d112      	bne.n	800435e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f007 f847 	bl	800b3cc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004346:	3314      	adds	r3, #20
 8004348:	2240      	movs	r2, #64	; 0x40
 800434a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800435c:	e01b      	b.n	8004396 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004366:	3314      	adds	r3, #20
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b01      	cmp	r3, #1
 8004370:	d111      	bne.n	8004396 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f839 	bl	80043ea <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004380:	3314      	adds	r3, #20
 8004382:	2201      	movs	r2, #1
 8004384:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439e:	3314      	adds	r3, #20
 80043a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043a4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ae:	3314      	adds	r3, #20
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ba:	d112      	bne.n	80043e2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f81e 	bl	80043fe <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ca:	3314      	adds	r3, #20
 80043cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80043d0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b086      	sub	sp, #24
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	460b      	mov	r3, r1
 800441c:	607a      	str	r2, [r7, #4]
 800441e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b82      	cmp	r3, #130	; 0x82
 8004432:	d101      	bne.n	8004438 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
 8004436:	e050      	b.n	80044da <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2282      	movs	r2, #130	; 0x82
 800443c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f003 031c 	and.w	r3, r3, #28
 800444e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8a1b      	ldrh	r3, [r3, #16]
 8004454:	02db      	lsls	r3, r3, #11
 8004456:	b29b      	uxth	r3, r3
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800445e:	897b      	ldrh	r3, [r7, #10]
 8004460:	019b      	lsls	r3, r3, #6
 8004462:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f023 0302 	bic.w	r3, r3, #2
 8004472:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004484:	f7fd fcd8 	bl	8001e38 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800448a:	e015      	b.n	80044b8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800448c:	f7fd fcd4 	bl	8001e38 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449a:	d309      	bcc.n	80044b0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e014      	b.n	80044da <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e4      	bne.n	800448c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b086      	sub	sp, #24
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	460b      	mov	r3, r1
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b42      	cmp	r3, #66	; 0x42
 8004502:	d101      	bne.n	8004508 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004504:	2302      	movs	r3, #2
 8004506:	e04e      	b.n	80045a6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2242      	movs	r2, #66	; 0x42
 800450c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f003 031c 	and.w	r3, r3, #28
 800451e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8a1b      	ldrh	r3, [r3, #16]
 8004524:	02db      	lsls	r3, r3, #11
 8004526:	b29b      	uxth	r3, r3
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800452e:	897b      	ldrh	r3, [r7, #10]
 8004530:	019b      	lsls	r3, r3, #6
 8004532:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f043 0302 	orr.w	r3, r3, #2
 8004542:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800455e:	f7fd fc6b 	bl	8001e38 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004564:	e015      	b.n	8004592 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004566:	f7fd fc67 	bl	8001e38 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004574:	d309      	bcc.n	800458a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e00d      	b.n	80045a6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e4      	bne.n	8004566 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_ETH_Start+0x16>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e01f      	b.n	8004604 <HAL_ETH_Start+0x56>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fb45 	bl	8004c64 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fb7c 	bl	8004cd8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fc13 	bl	8004e0c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fbb0 	bl	8004d4c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fbdd 	bl	8004dac <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_ETH_Stop+0x16>
 800461e:	2302      	movs	r3, #2
 8004620:	e01f      	b.n	8004662 <HAL_ETH_Stop+0x56>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fba2 	bl	8004d7c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fbcf 	bl	8004ddc <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fb67 	bl	8004d12 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fbe1 	bl	8004e0c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fb27 	bl	8004c9e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_ETH_ConfigMAC+0x1c>
 8004684:	2302      	movs	r3, #2
 8004686:	e0e4      	b.n	8004852 <HAL_ETH_ConfigMAC+0x1e6>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80b1 	beq.w	8004802 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4b6c      	ldr	r3, [pc, #432]	; (800485c <HAL_ETH_ConfigMAC+0x1f0>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80046b8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80046be:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80046c4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80046ca:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80046d0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80046d6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80046dc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80046e2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80046e8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80046ee:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80046f4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80046fa:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004712:	2001      	movs	r0, #1
 8004714:	f7fd fb9c 	bl	8001e50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004728:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800472e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004734:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800473a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004740:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8004746:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004752:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004754:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800475e:	2001      	movs	r0, #1
 8004760:	f7fd fb76 	bl	8001e50 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004774:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800477e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800478e:	4013      	ands	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004796:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800479c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80047a2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80047a8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80047ae:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80047b4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80047cc:	2001      	movs	r0, #1
 80047ce:	f7fd fb3f 	bl	8001e50 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80047f2:	2001      	movs	r0, #1
 80047f4:	f7fd fb2c 	bl	8001e50 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	61da      	str	r2, [r3, #28]
 8004800:	e01e      	b.n	8004840 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004810:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004832:	2001      	movs	r0, #1
 8004834:	f7fd fb0c 	bl	8001e50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	ff20810f 	.word	0xff20810f

08004860 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b0b0      	sub	sp, #192	; 0xc0
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800487c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004884:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004886:	2300      	movs	r3, #0
 8004888:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800488a:	2300      	movs	r3, #0
 800488c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800488e:	2300      	movs	r3, #0
 8004890:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004892:	2300      	movs	r3, #0
 8004894:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004896:	2300      	movs	r3, #0
 8004898:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800489a:	2300      	movs	r3, #0
 800489c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d103      	bne.n	80048ae <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80048a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048aa:	663b      	str	r3, [r7, #96]	; 0x60
 80048ac:	e001      	b.n	80048b2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80048b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048b6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80048b8:	2300      	movs	r3, #0
 80048ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80048bc:	2300      	movs	r3, #0
 80048be:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80048c0:	2300      	movs	r3, #0
 80048c2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80048cc:	2340      	movs	r3, #64	; 0x40
 80048ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80048d0:	2300      	movs	r3, #0
 80048d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80048dc:	2300      	movs	r3, #0
 80048de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80048e2:	2300      	movs	r3, #0
 80048e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80048e8:	2300      	movs	r3, #0
 80048ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004906:	2300      	movs	r3, #0
 8004908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800490c:	2300      	movs	r3, #0
 800490e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004912:	2300      	movs	r3, #0
 8004914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004918:	2300      	movs	r3, #0
 800491a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800491e:	2300      	movs	r3, #0
 8004920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004924:	2300      	movs	r3, #0
 8004926:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004934:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004938:	4bac      	ldr	r3, [pc, #688]	; (8004bec <ETH_MACDMAConfig+0x38c>)
 800493a:	4013      	ands	r3, r2
 800493c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004940:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004944:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004948:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800494a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800494c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004952:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004956:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800495a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004960:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004964:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004968:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800496a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800496c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800496e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004970:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004974:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004976:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004988:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004994:	2001      	movs	r0, #1
 8004996:	f7fd fa5b 	bl	8001e50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80049a2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80049a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80049a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80049a8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80049aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80049ac:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80049ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80049b2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80049b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80049b8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80049ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80049be:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80049c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80049c4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80049c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80049d0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80049d2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80049de:	2001      	movs	r0, #1
 80049e0:	f7fd fa36 	bl	8001e50 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80049ec:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049f6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004a00:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004a0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a10:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004a14:	4013      	ands	r3, r2
 8004a16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004a1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a1e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004a20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004a24:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004a26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004a2a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004a2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004a30:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004a36:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004a38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004a3c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004a3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a50:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	f7fd f9f7 	bl	8001e50 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a6a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004a6c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004a70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a86:	2001      	movs	r0, #1
 8004a88:	f7fd f9e2 	bl	8001e50 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a94:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004a9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a9e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004aa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004aa8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004aba:	2304      	movs	r3, #4
 8004abc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ac8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004aca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ad4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004ad6:	2380      	movs	r3, #128	; 0x80
 8004ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aea:	3318      	adds	r3, #24
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004af2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004af6:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <ETH_MACDMAConfig+0x390>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004afe:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004b00:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004b02:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004b04:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004b06:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004b08:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004b0a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004b0c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004b0e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004b10:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004b12:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004b14:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004b16:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004b1a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004b1e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004b20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b32:	3318      	adds	r3, #24
 8004b34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b38:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b42:	3318      	adds	r3, #24
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b4a:	2001      	movs	r0, #1
 8004b4c:	f7fd f980 	bl	8001e50 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b58:	3318      	adds	r3, #24
 8004b5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b5e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004b64:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004b68:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004b6c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004b70:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b74:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004b76:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004b7a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b88:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b98:	2001      	movs	r0, #1
 8004b9a:	f7fd f959 	bl	8001e50 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004baa:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d10f      	bne.n	8004bd4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bbc:	331c      	adds	r3, #28
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd0:	331c      	adds	r3, #28
 8004bd2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	2100      	movs	r1, #0
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f809 	bl	8004bf4 <ETH_MACAddressConfig>
}
 8004be2:	bf00      	nop
 8004be4:	37c0      	adds	r7, #192	; 0xc0
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	ff20810f 	.word	0xff20810f
 8004bf0:	f8de3f23 	.word	0xf8de3f23

08004bf4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3305      	adds	r3, #5
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	3204      	adds	r2, #4
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	4b11      	ldr	r3, [pc, #68]	; (8004c5c <ETH_MACAddressConfig+0x68>)
 8004c16:	4413      	add	r3, r2
 8004c18:	461a      	mov	r2, r3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3303      	adds	r3, #3
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	061a      	lsls	r2, r3, #24
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3302      	adds	r3, #2
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	041b      	lsls	r3, r3, #16
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3301      	adds	r3, #1
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	7812      	ldrb	r2, [r2, #0]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <ETH_MACAddressConfig+0x6c>)
 8004c46:	4413      	add	r3, r2
 8004c48:	461a      	mov	r2, r3
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	6013      	str	r3, [r2, #0]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40028040 	.word	0x40028040
 8004c60:	40028044 	.word	0x40028044

08004c64 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0208 	orr.w	r2, r2, #8
 8004c7e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004c88:	2001      	movs	r0, #1
 8004c8a:	f000 f8e9 	bl	8004e60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	601a      	str	r2, [r3, #0]
}
 8004c96:	bf00      	nop
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0208 	bic.w	r2, r2, #8
 8004cb8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	f000 f8cc 	bl	8004e60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	601a      	str	r2, [r3, #0]
}
 8004cd0:	bf00      	nop
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0204 	orr.w	r2, r2, #4
 8004cf2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	f000 f8af 	bl	8004e60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	601a      	str	r2, [r3, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0204 	bic.w	r2, r2, #4
 8004d2c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004d36:	2001      	movs	r0, #1
 8004d38:	f000 f892 	bl	8004e60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5c:	3318      	adds	r3, #24
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d6c:	3318      	adds	r3, #24
 8004d6e:	601a      	str	r2, [r3, #0]
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d8c:	3318      	adds	r3, #24
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d9c:	3318      	adds	r3, #24
 8004d9e:	601a      	str	r2, [r3, #0]
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dbc:	3318      	adds	r3, #24
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0202 	orr.w	r2, r2, #2
 8004dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dcc:	3318      	adds	r3, #24
 8004dce:	601a      	str	r2, [r3, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dec:	3318      	adds	r3, #24
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0202 	bic.w	r2, r2, #2
 8004df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dfc:	3318      	adds	r3, #24
 8004dfe:	601a      	str	r2, [r3, #0]
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e20:	3318      	adds	r3, #24
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e30:	3318      	adds	r3, #24
 8004e32:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e3c:	3318      	adds	r3, #24
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004e42:	2001      	movs	r0, #1
 8004e44:	f000 f80c 	bl	8004e60 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e52:	3318      	adds	r3, #24
 8004e54:	601a      	str	r2, [r3, #0]
}
 8004e56:	bf00      	nop
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e68:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <ETH_Delay+0x38>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a0b      	ldr	r2, [pc, #44]	; (8004e9c <ETH_Delay+0x3c>)
 8004e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e72:	0a5b      	lsrs	r3, r3, #9
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004e7c:	bf00      	nop
  } 
  while (Delay --);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1e5a      	subs	r2, r3, #1
 8004e82:	60fa      	str	r2, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f9      	bne.n	8004e7c <ETH_Delay+0x1c>
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	20000010 	.word	0x20000010
 8004e9c:	10624dd3 	.word	0x10624dd3

08004ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b089      	sub	sp, #36	; 0x24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61fb      	str	r3, [r7, #28]
 8004eba:	e16b      	b.n	8005194 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	f040 815a 	bne.w	800518e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d005      	beq.n	8004ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d130      	bne.n	8004f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	2203      	movs	r2, #3
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	43db      	mvns	r3, r3
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	4013      	ands	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f28:	2201      	movs	r2, #1
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	43db      	mvns	r3, r3
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4013      	ands	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	091b      	lsrs	r3, r3, #4
 8004f3e:	f003 0201 	and.w	r2, r3, #1
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d017      	beq.n	8004f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	43db      	mvns	r3, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4013      	ands	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d123      	bne.n	8004fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	08da      	lsrs	r2, r3, #3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3208      	adds	r2, #8
 8004fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	220f      	movs	r2, #15
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	08da      	lsrs	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3208      	adds	r2, #8
 8004fde:	69b9      	ldr	r1, [r7, #24]
 8004fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	2203      	movs	r2, #3
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f003 0203 	and.w	r2, r3, #3
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	4313      	orrs	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80b4 	beq.w	800518e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	4b60      	ldr	r3, [pc, #384]	; (80051ac <HAL_GPIO_Init+0x30c>)
 800502c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502e:	4a5f      	ldr	r2, [pc, #380]	; (80051ac <HAL_GPIO_Init+0x30c>)
 8005030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005034:	6453      	str	r3, [r2, #68]	; 0x44
 8005036:	4b5d      	ldr	r3, [pc, #372]	; (80051ac <HAL_GPIO_Init+0x30c>)
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005042:	4a5b      	ldr	r2, [pc, #364]	; (80051b0 <HAL_GPIO_Init+0x310>)
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	089b      	lsrs	r3, r3, #2
 8005048:	3302      	adds	r3, #2
 800504a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800504e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	220f      	movs	r2, #15
 800505a:	fa02 f303 	lsl.w	r3, r2, r3
 800505e:	43db      	mvns	r3, r3
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	4013      	ands	r3, r2
 8005064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a52      	ldr	r2, [pc, #328]	; (80051b4 <HAL_GPIO_Init+0x314>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d02b      	beq.n	80050c6 <HAL_GPIO_Init+0x226>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a51      	ldr	r2, [pc, #324]	; (80051b8 <HAL_GPIO_Init+0x318>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d025      	beq.n	80050c2 <HAL_GPIO_Init+0x222>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a50      	ldr	r2, [pc, #320]	; (80051bc <HAL_GPIO_Init+0x31c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d01f      	beq.n	80050be <HAL_GPIO_Init+0x21e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a4f      	ldr	r2, [pc, #316]	; (80051c0 <HAL_GPIO_Init+0x320>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d019      	beq.n	80050ba <HAL_GPIO_Init+0x21a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a4e      	ldr	r2, [pc, #312]	; (80051c4 <HAL_GPIO_Init+0x324>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d013      	beq.n	80050b6 <HAL_GPIO_Init+0x216>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a4d      	ldr	r2, [pc, #308]	; (80051c8 <HAL_GPIO_Init+0x328>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00d      	beq.n	80050b2 <HAL_GPIO_Init+0x212>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a4c      	ldr	r2, [pc, #304]	; (80051cc <HAL_GPIO_Init+0x32c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d007      	beq.n	80050ae <HAL_GPIO_Init+0x20e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a4b      	ldr	r2, [pc, #300]	; (80051d0 <HAL_GPIO_Init+0x330>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d101      	bne.n	80050aa <HAL_GPIO_Init+0x20a>
 80050a6:	2307      	movs	r3, #7
 80050a8:	e00e      	b.n	80050c8 <HAL_GPIO_Init+0x228>
 80050aa:	2308      	movs	r3, #8
 80050ac:	e00c      	b.n	80050c8 <HAL_GPIO_Init+0x228>
 80050ae:	2306      	movs	r3, #6
 80050b0:	e00a      	b.n	80050c8 <HAL_GPIO_Init+0x228>
 80050b2:	2305      	movs	r3, #5
 80050b4:	e008      	b.n	80050c8 <HAL_GPIO_Init+0x228>
 80050b6:	2304      	movs	r3, #4
 80050b8:	e006      	b.n	80050c8 <HAL_GPIO_Init+0x228>
 80050ba:	2303      	movs	r3, #3
 80050bc:	e004      	b.n	80050c8 <HAL_GPIO_Init+0x228>
 80050be:	2302      	movs	r3, #2
 80050c0:	e002      	b.n	80050c8 <HAL_GPIO_Init+0x228>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <HAL_GPIO_Init+0x228>
 80050c6:	2300      	movs	r3, #0
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	f002 0203 	and.w	r2, r2, #3
 80050ce:	0092      	lsls	r2, r2, #2
 80050d0:	4093      	lsls	r3, r2
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050d8:	4935      	ldr	r1, [pc, #212]	; (80051b0 <HAL_GPIO_Init+0x310>)
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	089b      	lsrs	r3, r3, #2
 80050de:	3302      	adds	r3, #2
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050e6:	4b3b      	ldr	r3, [pc, #236]	; (80051d4 <HAL_GPIO_Init+0x334>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	43db      	mvns	r3, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	4013      	ands	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800510a:	4a32      	ldr	r2, [pc, #200]	; (80051d4 <HAL_GPIO_Init+0x334>)
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005110:	4b30      	ldr	r3, [pc, #192]	; (80051d4 <HAL_GPIO_Init+0x334>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	43db      	mvns	r3, r3
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	4013      	ands	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005134:	4a27      	ldr	r2, [pc, #156]	; (80051d4 <HAL_GPIO_Init+0x334>)
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800513a:	4b26      	ldr	r3, [pc, #152]	; (80051d4 <HAL_GPIO_Init+0x334>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	43db      	mvns	r3, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4013      	ands	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800515e:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <HAL_GPIO_Init+0x334>)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005164:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <HAL_GPIO_Init+0x334>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	43db      	mvns	r3, r3
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	4013      	ands	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005188:	4a12      	ldr	r2, [pc, #72]	; (80051d4 <HAL_GPIO_Init+0x334>)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	3301      	adds	r3, #1
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	2b0f      	cmp	r3, #15
 8005198:	f67f ae90 	bls.w	8004ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	3724      	adds	r7, #36	; 0x24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40023800 	.word	0x40023800
 80051b0:	40013800 	.word	0x40013800
 80051b4:	40020000 	.word	0x40020000
 80051b8:	40020400 	.word	0x40020400
 80051bc:	40020800 	.word	0x40020800
 80051c0:	40020c00 	.word	0x40020c00
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40021400 	.word	0x40021400
 80051cc:	40021800 	.word	0x40021800
 80051d0:	40021c00 	.word	0x40021c00
 80051d4:	40013c00 	.word	0x40013c00

080051d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	887b      	ldrh	r3, [r7, #2]
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051f0:	2301      	movs	r3, #1
 80051f2:	73fb      	strb	r3, [r7, #15]
 80051f4:	e001      	b.n	80051fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	807b      	strh	r3, [r7, #2]
 8005214:	4613      	mov	r3, r2
 8005216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005218:	787b      	ldrb	r3, [r7, #1]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800521e:	887a      	ldrh	r2, [r7, #2]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005224:	e003      	b.n	800522e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005226:	887b      	ldrh	r3, [r7, #2]
 8005228:	041a      	lsls	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	619a      	str	r2, [r3, #24]
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e12b      	b.n	80054a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fc f9ac 	bl	80015c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2224      	movs	r2, #36	; 0x24
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0201 	bic.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800528e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800529e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052a0:	f001 ffd0 	bl	8007244 <HAL_RCC_GetPCLK1Freq>
 80052a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	4a81      	ldr	r2, [pc, #516]	; (80054b0 <HAL_I2C_Init+0x274>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d807      	bhi.n	80052c0 <HAL_I2C_Init+0x84>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4a80      	ldr	r2, [pc, #512]	; (80054b4 <HAL_I2C_Init+0x278>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	bf94      	ite	ls
 80052b8:	2301      	movls	r3, #1
 80052ba:	2300      	movhi	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	e006      	b.n	80052ce <HAL_I2C_Init+0x92>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4a7d      	ldr	r2, [pc, #500]	; (80054b8 <HAL_I2C_Init+0x27c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	bf94      	ite	ls
 80052c8:	2301      	movls	r3, #1
 80052ca:	2300      	movhi	r3, #0
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e0e7      	b.n	80054a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a78      	ldr	r2, [pc, #480]	; (80054bc <HAL_I2C_Init+0x280>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	0c9b      	lsrs	r3, r3, #18
 80052e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	4a6a      	ldr	r2, [pc, #424]	; (80054b0 <HAL_I2C_Init+0x274>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d802      	bhi.n	8005310 <HAL_I2C_Init+0xd4>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	3301      	adds	r3, #1
 800530e:	e009      	b.n	8005324 <HAL_I2C_Init+0xe8>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005316:	fb02 f303 	mul.w	r3, r2, r3
 800531a:	4a69      	ldr	r2, [pc, #420]	; (80054c0 <HAL_I2C_Init+0x284>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	099b      	lsrs	r3, r3, #6
 8005322:	3301      	adds	r3, #1
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	430b      	orrs	r3, r1
 800532a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005336:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	495c      	ldr	r1, [pc, #368]	; (80054b0 <HAL_I2C_Init+0x274>)
 8005340:	428b      	cmp	r3, r1
 8005342:	d819      	bhi.n	8005378 <HAL_I2C_Init+0x13c>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	1e59      	subs	r1, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005352:	1c59      	adds	r1, r3, #1
 8005354:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005358:	400b      	ands	r3, r1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_I2C_Init+0x138>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1e59      	subs	r1, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	fbb1 f3f3 	udiv	r3, r1, r3
 800536c:	3301      	adds	r3, #1
 800536e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005372:	e051      	b.n	8005418 <HAL_I2C_Init+0x1dc>
 8005374:	2304      	movs	r3, #4
 8005376:	e04f      	b.n	8005418 <HAL_I2C_Init+0x1dc>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d111      	bne.n	80053a4 <HAL_I2C_Init+0x168>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	1e58      	subs	r0, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6859      	ldr	r1, [r3, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	440b      	add	r3, r1
 800538e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005392:	3301      	adds	r3, #1
 8005394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005398:	2b00      	cmp	r3, #0
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e012      	b.n	80053ca <HAL_I2C_Init+0x18e>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	1e58      	subs	r0, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6859      	ldr	r1, [r3, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	0099      	lsls	r1, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ba:	3301      	adds	r3, #1
 80053bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bf0c      	ite	eq
 80053c4:	2301      	moveq	r3, #1
 80053c6:	2300      	movne	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_I2C_Init+0x196>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e022      	b.n	8005418 <HAL_I2C_Init+0x1dc>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10e      	bne.n	80053f8 <HAL_I2C_Init+0x1bc>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1e58      	subs	r0, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6859      	ldr	r1, [r3, #4]
 80053e2:	460b      	mov	r3, r1
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	440b      	add	r3, r1
 80053e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ec:	3301      	adds	r3, #1
 80053ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f6:	e00f      	b.n	8005418 <HAL_I2C_Init+0x1dc>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	1e58      	subs	r0, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6859      	ldr	r1, [r3, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	0099      	lsls	r1, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	fbb0 f3f3 	udiv	r3, r0, r3
 800540e:	3301      	adds	r3, #1
 8005410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005414:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	6809      	ldr	r1, [r1, #0]
 800541c:	4313      	orrs	r3, r2
 800541e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005446:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6911      	ldr	r1, [r2, #16]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68d2      	ldr	r2, [r2, #12]
 8005452:	4311      	orrs	r1, r2
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6812      	ldr	r2, [r2, #0]
 8005458:	430b      	orrs	r3, r1
 800545a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695a      	ldr	r2, [r3, #20]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	000186a0 	.word	0x000186a0
 80054b4:	001e847f 	.word	0x001e847f
 80054b8:	003d08ff 	.word	0x003d08ff
 80054bc:	431bde83 	.word	0x431bde83
 80054c0:	10624dd3 	.word	0x10624dd3

080054c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	607a      	str	r2, [r7, #4]
 80054ce:	461a      	mov	r2, r3
 80054d0:	460b      	mov	r3, r1
 80054d2:	817b      	strh	r3, [r7, #10]
 80054d4:	4613      	mov	r3, r2
 80054d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054d8:	f7fc fcae 	bl	8001e38 <HAL_GetTick>
 80054dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	f040 80e0 	bne.w	80056ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	2319      	movs	r3, #25
 80054f2:	2201      	movs	r2, #1
 80054f4:	4970      	ldr	r1, [pc, #448]	; (80056b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f964 	bl	80057c4 <I2C_WaitOnFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005502:	2302      	movs	r3, #2
 8005504:	e0d3      	b.n	80056ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_I2C_Master_Transmit+0x50>
 8005510:	2302      	movs	r3, #2
 8005512:	e0cc      	b.n	80056ae <HAL_I2C_Master_Transmit+0x1ea>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b01      	cmp	r3, #1
 8005528:	d007      	beq.n	800553a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0201 	orr.w	r2, r2, #1
 8005538:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005548:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2221      	movs	r2, #33	; 0x21
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2210      	movs	r2, #16
 8005556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	893a      	ldrh	r2, [r7, #8]
 800556a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4a50      	ldr	r2, [pc, #320]	; (80056bc <HAL_I2C_Master_Transmit+0x1f8>)
 800557a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800557c:	8979      	ldrh	r1, [r7, #10]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	6a3a      	ldr	r2, [r7, #32]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f89c 	bl	80056c0 <I2C_MasterRequestWrite>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e08d      	b.n	80056ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005592:	2300      	movs	r3, #0
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80055a8:	e066      	b.n	8005678 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	6a39      	ldr	r1, [r7, #32]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f9de 	bl	8005970 <I2C_WaitOnTXEFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00d      	beq.n	80055d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d107      	bne.n	80055d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e06b      	b.n	80056ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	781a      	ldrb	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b04      	cmp	r3, #4
 8005612:	d11b      	bne.n	800564c <HAL_I2C_Master_Transmit+0x188>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005618:	2b00      	cmp	r3, #0
 800561a:	d017      	beq.n	800564c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	6a39      	ldr	r1, [r7, #32]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f9ce 	bl	80059f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00d      	beq.n	8005678 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	2b04      	cmp	r3, #4
 8005662:	d107      	bne.n	8005674 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005672:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e01a      	b.n	80056ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567c:	2b00      	cmp	r3, #0
 800567e:	d194      	bne.n	80055aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800568e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e000      	b.n	80056ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056ac:	2302      	movs	r3, #2
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	00100002 	.word	0x00100002
 80056bc:	ffff0000 	.word	0xffff0000

080056c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	460b      	mov	r3, r1
 80056ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d006      	beq.n	80056ea <I2C_MasterRequestWrite+0x2a>
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d003      	beq.n	80056ea <I2C_MasterRequestWrite+0x2a>
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056e8:	d108      	bne.n	80056fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	e00b      	b.n	8005714 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005700:	2b12      	cmp	r3, #18
 8005702:	d107      	bne.n	8005714 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005712:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f84f 	bl	80057c4 <I2C_WaitOnFlagUntilTimeout>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00d      	beq.n	8005748 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800573a:	d103      	bne.n	8005744 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005742:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e035      	b.n	80057b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005750:	d108      	bne.n	8005764 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005752:	897b      	ldrh	r3, [r7, #10]
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005760:	611a      	str	r2, [r3, #16]
 8005762:	e01b      	b.n	800579c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005764:	897b      	ldrh	r3, [r7, #10]
 8005766:	11db      	asrs	r3, r3, #7
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f003 0306 	and.w	r3, r3, #6
 800576e:	b2db      	uxtb	r3, r3
 8005770:	f063 030f 	orn	r3, r3, #15
 8005774:	b2da      	uxtb	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	490e      	ldr	r1, [pc, #56]	; (80057bc <I2C_MasterRequestWrite+0xfc>)
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f875 	bl	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e010      	b.n	80057b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005792:	897b      	ldrh	r3, [r7, #10]
 8005794:	b2da      	uxtb	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	4907      	ldr	r1, [pc, #28]	; (80057c0 <I2C_MasterRequestWrite+0x100>)
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f865 	bl	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	00010008 	.word	0x00010008
 80057c0:	00010002 	.word	0x00010002

080057c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057d4:	e025      	b.n	8005822 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d021      	beq.n	8005822 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057de:	f7fc fb2b 	bl	8001e38 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d302      	bcc.n	80057f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d116      	bne.n	8005822 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	f043 0220 	orr.w	r2, r3, #32
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e023      	b.n	800586a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	0c1b      	lsrs	r3, r3, #16
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b01      	cmp	r3, #1
 800582a:	d10d      	bne.n	8005848 <I2C_WaitOnFlagUntilTimeout+0x84>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	43da      	mvns	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4013      	ands	r3, r2
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	bf0c      	ite	eq
 800583e:	2301      	moveq	r3, #1
 8005840:	2300      	movne	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	e00c      	b.n	8005862 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	43da      	mvns	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4013      	ands	r3, r2
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	bf0c      	ite	eq
 800585a:	2301      	moveq	r3, #1
 800585c:	2300      	movne	r3, #0
 800585e:	b2db      	uxtb	r3, r3
 8005860:	461a      	mov	r2, r3
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	429a      	cmp	r2, r3
 8005866:	d0b6      	beq.n	80057d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	607a      	str	r2, [r7, #4]
 800587e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005880:	e051      	b.n	8005926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800588c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005890:	d123      	bne.n	80058da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f043 0204 	orr.w	r2, r3, #4
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e046      	b.n	8005968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e0:	d021      	beq.n	8005926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e2:	f7fc faa9 	bl	8001e38 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d302      	bcc.n	80058f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d116      	bne.n	8005926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f043 0220 	orr.w	r2, r3, #32
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e020      	b.n	8005968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	0c1b      	lsrs	r3, r3, #16
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d10c      	bne.n	800594a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	43da      	mvns	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4013      	ands	r3, r2
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	bf14      	ite	ne
 8005942:	2301      	movne	r3, #1
 8005944:	2300      	moveq	r3, #0
 8005946:	b2db      	uxtb	r3, r3
 8005948:	e00b      	b.n	8005962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	43da      	mvns	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	4013      	ands	r3, r2
 8005956:	b29b      	uxth	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	bf14      	ite	ne
 800595c:	2301      	movne	r3, #1
 800595e:	2300      	moveq	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d18d      	bne.n	8005882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800597c:	e02d      	b.n	80059da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f878 	bl	8005a74 <I2C_IsAcknowledgeFailed>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e02d      	b.n	80059ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005994:	d021      	beq.n	80059da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005996:	f7fc fa4f 	bl	8001e38 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d302      	bcc.n	80059ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d116      	bne.n	80059da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	f043 0220 	orr.w	r2, r3, #32
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e007      	b.n	80059ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e4:	2b80      	cmp	r3, #128	; 0x80
 80059e6:	d1ca      	bne.n	800597e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059fe:	e02d      	b.n	8005a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f837 	bl	8005a74 <I2C_IsAcknowledgeFailed>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e02d      	b.n	8005a6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a16:	d021      	beq.n	8005a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a18:	f7fc fa0e 	bl	8001e38 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d302      	bcc.n	8005a2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d116      	bne.n	8005a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e007      	b.n	8005a6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d1ca      	bne.n	8005a00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8a:	d11b      	bne.n	8005ac4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	f043 0204 	orr.w	r2, r3, #4
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e128      	b.n	8005d38 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d109      	bne.n	8005b06 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a90      	ldr	r2, [pc, #576]	; (8005d40 <HAL_I2S_Init+0x26c>)
 8005afe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7fb fda5 	bl	8001650 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b1c:	f023 030f 	bic.w	r3, r3, #15
 8005b20:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2202      	movs	r2, #2
 8005b28:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d060      	beq.n	8005bf4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d102      	bne.n	8005b40 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005b3a:	2310      	movs	r3, #16
 8005b3c:	617b      	str	r3, [r7, #20]
 8005b3e:	e001      	b.n	8005b44 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005b40:	2320      	movs	r3, #32
 8005b42:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d802      	bhi.n	8005b52 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005b52:	2001      	movs	r0, #1
 8005b54:	f001 fcb2 	bl	80074bc <HAL_RCCEx_GetPeriphCLKFreq>
 8005b58:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b62:	d125      	bne.n	8005bb0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d010      	beq.n	8005b8e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b76:	4613      	mov	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	461a      	mov	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	3305      	adds	r3, #5
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	e01f      	b.n	8005bce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005baa:	3305      	adds	r3, #5
 8005bac:	613b      	str	r3, [r7, #16]
 8005bae:	e00e      	b.n	8005bce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bca:	3305      	adds	r3, #5
 8005bcc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4a5c      	ldr	r2, [pc, #368]	; (8005d44 <HAL_I2S_Init+0x270>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	08db      	lsrs	r3, r3, #3
 8005bd8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	085b      	lsrs	r3, r3, #1
 8005bea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	e003      	b.n	8005bfc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d902      	bls.n	8005c08 <HAL_I2S_Init+0x134>
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2bff      	cmp	r3, #255	; 0xff
 8005c06:	d907      	bls.n	8005c18 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0c:	f043 0210 	orr.w	r2, r3, #16
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e08f      	b.n	8005d38 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	ea42 0103 	orr.w	r1, r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c36:	f023 030f 	bic.w	r3, r3, #15
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6851      	ldr	r1, [r2, #4]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6892      	ldr	r2, [r2, #8]
 8005c42:	4311      	orrs	r1, r2
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	68d2      	ldr	r2, [r2, #12]
 8005c48:	4311      	orrs	r1, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6992      	ldr	r2, [r2, #24]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c5a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d161      	bne.n	8005d28 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a38      	ldr	r2, [pc, #224]	; (8005d48 <HAL_I2S_Init+0x274>)
 8005c68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a37      	ldr	r2, [pc, #220]	; (8005d4c <HAL_I2S_Init+0x278>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d101      	bne.n	8005c78 <HAL_I2S_Init+0x1a4>
 8005c74:	4b36      	ldr	r3, [pc, #216]	; (8005d50 <HAL_I2S_Init+0x27c>)
 8005c76:	e001      	b.n	8005c7c <HAL_I2S_Init+0x1a8>
 8005c78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	4932      	ldr	r1, [pc, #200]	; (8005d4c <HAL_I2S_Init+0x278>)
 8005c84:	428a      	cmp	r2, r1
 8005c86:	d101      	bne.n	8005c8c <HAL_I2S_Init+0x1b8>
 8005c88:	4a31      	ldr	r2, [pc, #196]	; (8005d50 <HAL_I2S_Init+0x27c>)
 8005c8a:	e001      	b.n	8005c90 <HAL_I2S_Init+0x1bc>
 8005c8c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005c90:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c94:	f023 030f 	bic.w	r3, r3, #15
 8005c98:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a2b      	ldr	r2, [pc, #172]	; (8005d4c <HAL_I2S_Init+0x278>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d101      	bne.n	8005ca8 <HAL_I2S_Init+0x1d4>
 8005ca4:	4b2a      	ldr	r3, [pc, #168]	; (8005d50 <HAL_I2S_Init+0x27c>)
 8005ca6:	e001      	b.n	8005cac <HAL_I2S_Init+0x1d8>
 8005ca8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cac:	2202      	movs	r2, #2
 8005cae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a25      	ldr	r2, [pc, #148]	; (8005d4c <HAL_I2S_Init+0x278>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d101      	bne.n	8005cbe <HAL_I2S_Init+0x1ea>
 8005cba:	4b25      	ldr	r3, [pc, #148]	; (8005d50 <HAL_I2S_Init+0x27c>)
 8005cbc:	e001      	b.n	8005cc2 <HAL_I2S_Init+0x1ee>
 8005cbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cce:	d003      	beq.n	8005cd8 <HAL_I2S_Init+0x204>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d103      	bne.n	8005ce0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	e001      	b.n	8005ce4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005d02:	4313      	orrs	r3, r2
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	897b      	ldrh	r3, [r7, #10]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d10:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a0d      	ldr	r2, [pc, #52]	; (8005d4c <HAL_I2S_Init+0x278>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d101      	bne.n	8005d20 <HAL_I2S_Init+0x24c>
 8005d1c:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <HAL_I2S_Init+0x27c>)
 8005d1e:	e001      	b.n	8005d24 <HAL_I2S_Init+0x250>
 8005d20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d24:	897a      	ldrh	r2, [r7, #10]
 8005d26:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3720      	adds	r7, #32
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	080061ff 	.word	0x080061ff
 8005d44:	cccccccd 	.word	0xcccccccd
 8005d48:	08006385 	.word	0x08006385
 8005d4c:	40003800 	.word	0x40003800
 8005d50:	40003400 	.word	0x40003400

08005d54 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d68:	d004      	beq.n	8005d74 <HAL_I2S_DMAStop+0x20>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f040 80d1 	bne.w	8005f16 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00f      	beq.n	8005d9c <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fc fa71 	bl	8002268 <HAL_DMA_Abort>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d007      	beq.n	8005d9c <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d90:	f043 0208 	orr.w	r2, r3, #8
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005d9c:	2364      	movs	r3, #100	; 0x64
 8005d9e:	2201      	movs	r2, #1
 8005da0:	2102      	movs	r1, #2
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fab5 	bl	8006312 <I2S_WaitFlagStateUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	f043 0201 	orr.w	r2, r3, #1
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005dc6:	2364      	movs	r3, #100	; 0x64
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2180      	movs	r1, #128	; 0x80
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 faa0 	bl	8006312 <I2S_WaitFlagStateUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00b      	beq.n	8005df0 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ddc:	f043 0201 	orr.w	r2, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69da      	ldr	r2, [r3, #28]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dfe:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0202 	bic.w	r2, r2, #2
 8005e1c:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b05      	cmp	r3, #5
 8005e28:	f040 8165 	bne.w	80060f6 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00f      	beq.n	8005e54 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fc fa15 	bl	8002268 <HAL_DMA_Abort>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d007      	beq.n	8005e54 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e48:	f043 0208 	orr.w	r2, r3, #8
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a8a      	ldr	r2, [pc, #552]	; (8006084 <HAL_I2S_DMAStop+0x330>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d101      	bne.n	8005e62 <HAL_I2S_DMAStop+0x10e>
 8005e5e:	4b8a      	ldr	r3, [pc, #552]	; (8006088 <HAL_I2S_DMAStop+0x334>)
 8005e60:	e001      	b.n	8005e66 <HAL_I2S_DMAStop+0x112>
 8005e62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4985      	ldr	r1, [pc, #532]	; (8006084 <HAL_I2S_DMAStop+0x330>)
 8005e6e:	428b      	cmp	r3, r1
 8005e70:	d101      	bne.n	8005e76 <HAL_I2S_DMAStop+0x122>
 8005e72:	4b85      	ldr	r3, [pc, #532]	; (8006088 <HAL_I2S_DMAStop+0x334>)
 8005e74:	e001      	b.n	8005e7a <HAL_I2S_DMAStop+0x126>
 8005e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e7e:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005e80:	2300      	movs	r3, #0
 8005e82:	613b      	str	r3, [r7, #16]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a7e      	ldr	r2, [pc, #504]	; (8006084 <HAL_I2S_DMAStop+0x330>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d101      	bne.n	8005e92 <HAL_I2S_DMAStop+0x13e>
 8005e8e:	4b7e      	ldr	r3, [pc, #504]	; (8006088 <HAL_I2S_DMAStop+0x334>)
 8005e90:	e001      	b.n	8005e96 <HAL_I2S_DMAStop+0x142>
 8005e92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	613b      	str	r3, [r7, #16]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a79      	ldr	r2, [pc, #484]	; (8006084 <HAL_I2S_DMAStop+0x330>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d101      	bne.n	8005ea8 <HAL_I2S_DMAStop+0x154>
 8005ea4:	4b78      	ldr	r3, [pc, #480]	; (8006088 <HAL_I2S_DMAStop+0x334>)
 8005ea6:	e001      	b.n	8005eac <HAL_I2S_DMAStop+0x158>
 8005ea8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a73      	ldr	r2, [pc, #460]	; (8006084 <HAL_I2S_DMAStop+0x330>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d101      	bne.n	8005ec0 <HAL_I2S_DMAStop+0x16c>
 8005ebc:	4b72      	ldr	r3, [pc, #456]	; (8006088 <HAL_I2S_DMAStop+0x334>)
 8005ebe:	e001      	b.n	8005ec4 <HAL_I2S_DMAStop+0x170>
 8005ec0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	496e      	ldr	r1, [pc, #440]	; (8006084 <HAL_I2S_DMAStop+0x330>)
 8005ecc:	428b      	cmp	r3, r1
 8005ece:	d101      	bne.n	8005ed4 <HAL_I2S_DMAStop+0x180>
 8005ed0:	4b6d      	ldr	r3, [pc, #436]	; (8006088 <HAL_I2S_DMAStop+0x334>)
 8005ed2:	e001      	b.n	8005ed8 <HAL_I2S_DMAStop+0x184>
 8005ed4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ed8:	f022 0201 	bic.w	r2, r2, #1
 8005edc:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10c      	bne.n	8005f00 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005efe:	e0fa      	b.n	80060f6 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a5f      	ldr	r2, [pc, #380]	; (8006084 <HAL_I2S_DMAStop+0x330>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d101      	bne.n	8005f0e <HAL_I2S_DMAStop+0x1ba>
 8005f0a:	4b5f      	ldr	r3, [pc, #380]	; (8006088 <HAL_I2S_DMAStop+0x334>)
 8005f0c:	e001      	b.n	8005f12 <HAL_I2S_DMAStop+0x1be>
 8005f0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f12:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005f14:	e0ef      	b.n	80060f6 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f1e:	d005      	beq.n	8005f2c <HAL_I2S_DMAStop+0x1d8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f28:	f040 80e5 	bne.w	80060f6 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00f      	beq.n	8005f54 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fc f995 	bl	8002268 <HAL_DMA_Abort>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f48:	f043 0208 	orr.w	r2, r3, #8
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b05      	cmp	r3, #5
 8005f5e:	f040 809a 	bne.w	8006096 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00f      	beq.n	8005f8a <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fc f97a 	bl	8002268 <HAL_DMA_Abort>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	f043 0208 	orr.w	r2, r3, #8
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8005f8a:	f7fb ff55 	bl	8001e38 <HAL_GetTick>
 8005f8e:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005f90:	e012      	b.n	8005fb8 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005f92:	f7fb ff51 	bl	8001e38 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b64      	cmp	r3, #100	; 0x64
 8005f9e:	d90b      	bls.n	8005fb8 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa4:	f043 0201 	orr.w	r2, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a31      	ldr	r2, [pc, #196]	; (8006084 <HAL_I2S_DMAStop+0x330>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d101      	bne.n	8005fc6 <HAL_I2S_DMAStop+0x272>
 8005fc2:	4b31      	ldr	r3, [pc, #196]	; (8006088 <HAL_I2S_DMAStop+0x334>)
 8005fc4:	e001      	b.n	8005fca <HAL_I2S_DMAStop+0x276>
 8005fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d1de      	bne.n	8005f92 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005fd4:	e012      	b.n	8005ffc <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005fd6:	f7fb ff2f 	bl	8001e38 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b64      	cmp	r3, #100	; 0x64
 8005fe2:	d90b      	bls.n	8005ffc <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe8:	f043 0201 	orr.w	r2, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a20      	ldr	r2, [pc, #128]	; (8006084 <HAL_I2S_DMAStop+0x330>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d101      	bne.n	800600a <HAL_I2S_DMAStop+0x2b6>
 8006006:	4b20      	ldr	r3, [pc, #128]	; (8006088 <HAL_I2S_DMAStop+0x334>)
 8006008:	e001      	b.n	800600e <HAL_I2S_DMAStop+0x2ba>
 800600a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006014:	2b80      	cmp	r3, #128	; 0x80
 8006016:	d0de      	beq.n	8005fd6 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a19      	ldr	r2, [pc, #100]	; (8006084 <HAL_I2S_DMAStop+0x330>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d101      	bne.n	8006026 <HAL_I2S_DMAStop+0x2d2>
 8006022:	4b19      	ldr	r3, [pc, #100]	; (8006088 <HAL_I2S_DMAStop+0x334>)
 8006024:	e001      	b.n	800602a <HAL_I2S_DMAStop+0x2d6>
 8006026:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800602a:	69da      	ldr	r2, [r3, #28]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4914      	ldr	r1, [pc, #80]	; (8006084 <HAL_I2S_DMAStop+0x330>)
 8006032:	428b      	cmp	r3, r1
 8006034:	d101      	bne.n	800603a <HAL_I2S_DMAStop+0x2e6>
 8006036:	4b14      	ldr	r3, [pc, #80]	; (8006088 <HAL_I2S_DMAStop+0x334>)
 8006038:	e001      	b.n	800603e <HAL_I2S_DMAStop+0x2ea>
 800603a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800603e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006042:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a0d      	ldr	r2, [pc, #52]	; (8006084 <HAL_I2S_DMAStop+0x330>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d101      	bne.n	8006056 <HAL_I2S_DMAStop+0x302>
 8006052:	4b0d      	ldr	r3, [pc, #52]	; (8006088 <HAL_I2S_DMAStop+0x334>)
 8006054:	e001      	b.n	800605a <HAL_I2S_DMAStop+0x306>
 8006056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a07      	ldr	r2, [pc, #28]	; (8006084 <HAL_I2S_DMAStop+0x330>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d101      	bne.n	800606e <HAL_I2S_DMAStop+0x31a>
 800606a:	4b07      	ldr	r3, [pc, #28]	; (8006088 <HAL_I2S_DMAStop+0x334>)
 800606c:	e001      	b.n	8006072 <HAL_I2S_DMAStop+0x31e>
 800606e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4902      	ldr	r1, [pc, #8]	; (8006084 <HAL_I2S_DMAStop+0x330>)
 800607a:	428b      	cmp	r3, r1
 800607c:	d106      	bne.n	800608c <HAL_I2S_DMAStop+0x338>
 800607e:	4b02      	ldr	r3, [pc, #8]	; (8006088 <HAL_I2S_DMAStop+0x334>)
 8006080:	e006      	b.n	8006090 <HAL_I2S_DMAStop+0x33c>
 8006082:	bf00      	nop
 8006084:	40003800 	.word	0x40003800
 8006088:	40003400 	.word	0x40003400
 800608c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006090:	f022 0202 	bic.w	r2, r2, #2
 8006094:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a4:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80060a6:	2300      	movs	r3, #0
 80060a8:	60bb      	str	r3, [r7, #8]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	60bb      	str	r3, [r7, #8]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0201 	bic.w	r2, r2, #1
 80060ca:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d4:	d10c      	bne.n	80060f0 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	77fb      	strb	r3, [r7, #31]
 80060ee:	e002      	b.n	80060f6 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80060fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3720      	adds	r7, #32
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	881a      	ldrh	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	1c9a      	adds	r2, r3, #2
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006166:	b29b      	uxth	r3, r3
 8006168:	3b01      	subs	r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10e      	bne.n	8006198 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006188:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff ffb8 	bl	8006108 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	b292      	uxth	r2, r2
 80061b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	1c9a      	adds	r2, r3, #2
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10e      	bne.n	80061f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff ff93 	bl	800611c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b086      	sub	sp, #24
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b04      	cmp	r3, #4
 8006218:	d13a      	bne.n	8006290 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b01      	cmp	r3, #1
 8006222:	d109      	bne.n	8006238 <I2S_IRQHandler+0x3a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622e:	2b40      	cmp	r3, #64	; 0x40
 8006230:	d102      	bne.n	8006238 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff ffb4 	bl	80061a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	d126      	bne.n	8006290 <I2S_IRQHandler+0x92>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	2b20      	cmp	r3, #32
 800624e:	d11f      	bne.n	8006290 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800625e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006260:	2300      	movs	r3, #0
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	613b      	str	r3, [r7, #16]
 8006274:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006282:	f043 0202 	orr.w	r2, r3, #2
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff ff50 	bl	8006130 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b03      	cmp	r3, #3
 800629a:	d136      	bne.n	800630a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d109      	bne.n	80062ba <I2S_IRQHandler+0xbc>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b0:	2b80      	cmp	r3, #128	; 0x80
 80062b2:	d102      	bne.n	80062ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff ff45 	bl	8006144 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d122      	bne.n	800630a <I2S_IRQHandler+0x10c>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	d11b      	bne.n	800630a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80062e2:	2300      	movs	r3, #0
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	60fb      	str	r3, [r7, #12]
 80062ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fc:	f043 0204 	orr.w	r2, r3, #4
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff ff13 	bl	8006130 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800630a:	bf00      	nop
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b086      	sub	sp, #24
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	603b      	str	r3, [r7, #0]
 800631e:	4613      	mov	r3, r2
 8006320:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006322:	f7fb fd89 	bl	8001e38 <HAL_GetTick>
 8006326:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006328:	e018      	b.n	800635c <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006330:	d014      	beq.n	800635c <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006332:	f7fb fd81 	bl	8001e38 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d902      	bls.n	8006348 <I2S_WaitFlagStateUntilTimeout+0x36>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d109      	bne.n	800635c <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e00f      	b.n	800637c <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4013      	ands	r3, r2
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	429a      	cmp	r2, r3
 800636a:	bf0c      	ite	eq
 800636c:	2301      	moveq	r3, #1
 800636e:	2300      	movne	r3, #0
 8006370:	b2db      	uxtb	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	429a      	cmp	r2, r3
 8006378:	d1d7      	bne.n	800632a <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4aa2      	ldr	r2, [pc, #648]	; (8006624 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d101      	bne.n	80063a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800639e:	4ba2      	ldr	r3, [pc, #648]	; (8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063a0:	e001      	b.n	80063a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80063a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a9b      	ldr	r2, [pc, #620]	; (8006624 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d101      	bne.n	80063c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80063bc:	4b9a      	ldr	r3, [pc, #616]	; (8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063be:	e001      	b.n	80063c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80063c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d0:	d004      	beq.n	80063dc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f040 8099 	bne.w	800650e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d107      	bne.n	80063f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f925 	bl	8006640 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d107      	bne.n	8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f9c8 	bl	80067a0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d13a      	bne.n	8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b00      	cmp	r3, #0
 8006422:	d035      	beq.n	8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a7e      	ldr	r2, [pc, #504]	; (8006624 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d101      	bne.n	8006432 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800642e:	4b7e      	ldr	r3, [pc, #504]	; (8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006430:	e001      	b.n	8006436 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006432:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4979      	ldr	r1, [pc, #484]	; (8006624 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800643e:	428b      	cmp	r3, r1
 8006440:	d101      	bne.n	8006446 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006442:	4b79      	ldr	r3, [pc, #484]	; (8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006444:	e001      	b.n	800644a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006446:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800644a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800644e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800645e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006482:	f043 0202 	orr.w	r2, r3, #2
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff fe50 	bl	8006130 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b08      	cmp	r3, #8
 8006498:	f040 80be 	bne.w	8006618 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 80b8 	beq.w	8006618 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064b6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a59      	ldr	r2, [pc, #356]	; (8006624 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d101      	bne.n	80064c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80064c2:	4b59      	ldr	r3, [pc, #356]	; (8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064c4:	e001      	b.n	80064ca <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80064c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4954      	ldr	r1, [pc, #336]	; (8006624 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064d2:	428b      	cmp	r3, r1
 80064d4:	d101      	bne.n	80064da <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80064d6:	4b54      	ldr	r3, [pc, #336]	; (8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064d8:	e001      	b.n	80064de <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80064da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064e2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80064e4:	2300      	movs	r3, #0
 80064e6:	60bb      	str	r3, [r7, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	60bb      	str	r3, [r7, #8]
 80064f0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fe:	f043 0204 	orr.w	r2, r3, #4
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff fe12 	bl	8006130 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800650c:	e084      	b.n	8006618 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b02      	cmp	r3, #2
 8006516:	d107      	bne.n	8006528 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f8be 	bl	80066a4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b01      	cmp	r3, #1
 8006530:	d107      	bne.n	8006542 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f8fd 	bl	800673c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006548:	2b40      	cmp	r3, #64	; 0x40
 800654a:	d12f      	bne.n	80065ac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	d02a      	beq.n	80065ac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006564:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a2e      	ldr	r2, [pc, #184]	; (8006624 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d101      	bne.n	8006574 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006570:	4b2d      	ldr	r3, [pc, #180]	; (8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006572:	e001      	b.n	8006578 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4929      	ldr	r1, [pc, #164]	; (8006624 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006580:	428b      	cmp	r3, r1
 8006582:	d101      	bne.n	8006588 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006584:	4b28      	ldr	r3, [pc, #160]	; (8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006586:	e001      	b.n	800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006588:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800658c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006590:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659e:	f043 0202 	orr.w	r2, r3, #2
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff fdc2 	bl	8006130 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	f003 0308 	and.w	r3, r3, #8
 80065b2:	2b08      	cmp	r3, #8
 80065b4:	d131      	bne.n	800661a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d02c      	beq.n	800661a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a17      	ldr	r2, [pc, #92]	; (8006624 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d101      	bne.n	80065ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80065ca:	4b17      	ldr	r3, [pc, #92]	; (8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065cc:	e001      	b.n	80065d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80065ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4912      	ldr	r1, [pc, #72]	; (8006624 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065da:	428b      	cmp	r3, r1
 80065dc:	d101      	bne.n	80065e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065e0:	e001      	b.n	80065e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80065e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065fa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006608:	f043 0204 	orr.w	r2, r3, #4
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff fd8d 	bl	8006130 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006616:	e000      	b.n	800661a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006618:	bf00      	nop
}
 800661a:	bf00      	nop
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40003800 	.word	0x40003800
 8006628:	40003400 	.word	0x40003400

0800662c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	1c99      	adds	r1, r3, #2
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6251      	str	r1, [r2, #36]	; 0x24
 8006652:	881a      	ldrh	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d113      	bne.n	800669a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006680:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006686:	b29b      	uxth	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff ffc9 	bl	800662c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	1c99      	adds	r1, r3, #2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6251      	str	r1, [r2, #36]	; 0x24
 80066b6:	8819      	ldrh	r1, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a1d      	ldr	r2, [pc, #116]	; (8006734 <I2SEx_TxISR_I2SExt+0x90>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d101      	bne.n	80066c6 <I2SEx_TxISR_I2SExt+0x22>
 80066c2:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <I2SEx_TxISR_I2SExt+0x94>)
 80066c4:	e001      	b.n	80066ca <I2SEx_TxISR_I2SExt+0x26>
 80066c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066ca:	460a      	mov	r2, r1
 80066cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	3b01      	subs	r3, #1
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d121      	bne.n	800672a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a12      	ldr	r2, [pc, #72]	; (8006734 <I2SEx_TxISR_I2SExt+0x90>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d101      	bne.n	80066f4 <I2SEx_TxISR_I2SExt+0x50>
 80066f0:	4b11      	ldr	r3, [pc, #68]	; (8006738 <I2SEx_TxISR_I2SExt+0x94>)
 80066f2:	e001      	b.n	80066f8 <I2SEx_TxISR_I2SExt+0x54>
 80066f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	490d      	ldr	r1, [pc, #52]	; (8006734 <I2SEx_TxISR_I2SExt+0x90>)
 8006700:	428b      	cmp	r3, r1
 8006702:	d101      	bne.n	8006708 <I2SEx_TxISR_I2SExt+0x64>
 8006704:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <I2SEx_TxISR_I2SExt+0x94>)
 8006706:	e001      	b.n	800670c <I2SEx_TxISR_I2SExt+0x68>
 8006708:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800670c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006710:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006716:	b29b      	uxth	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d106      	bne.n	800672a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff ff81 	bl	800662c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800672a:	bf00      	nop
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	40003800 	.word	0x40003800
 8006738:	40003400 	.word	0x40003400

0800673c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68d8      	ldr	r0, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	1c99      	adds	r1, r3, #2
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006754:	b282      	uxth	r2, r0
 8006756:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800676a:	b29b      	uxth	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d113      	bne.n	8006798 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800677e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d106      	bne.n	8006798 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff ff4a 	bl	800662c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006798:	bf00      	nop
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a20      	ldr	r2, [pc, #128]	; (8006830 <I2SEx_RxISR_I2SExt+0x90>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d101      	bne.n	80067b6 <I2SEx_RxISR_I2SExt+0x16>
 80067b2:	4b20      	ldr	r3, [pc, #128]	; (8006834 <I2SEx_RxISR_I2SExt+0x94>)
 80067b4:	e001      	b.n	80067ba <I2SEx_RxISR_I2SExt+0x1a>
 80067b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067ba:	68d8      	ldr	r0, [r3, #12]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	1c99      	adds	r1, r3, #2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80067c6:	b282      	uxth	r2, r0
 80067c8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d121      	bne.n	8006826 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a12      	ldr	r2, [pc, #72]	; (8006830 <I2SEx_RxISR_I2SExt+0x90>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d101      	bne.n	80067f0 <I2SEx_RxISR_I2SExt+0x50>
 80067ec:	4b11      	ldr	r3, [pc, #68]	; (8006834 <I2SEx_RxISR_I2SExt+0x94>)
 80067ee:	e001      	b.n	80067f4 <I2SEx_RxISR_I2SExt+0x54>
 80067f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	490d      	ldr	r1, [pc, #52]	; (8006830 <I2SEx_RxISR_I2SExt+0x90>)
 80067fc:	428b      	cmp	r3, r1
 80067fe:	d101      	bne.n	8006804 <I2SEx_RxISR_I2SExt+0x64>
 8006800:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <I2SEx_RxISR_I2SExt+0x94>)
 8006802:	e001      	b.n	8006808 <I2SEx_RxISR_I2SExt+0x68>
 8006804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006808:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800680c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006812:	b29b      	uxth	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d106      	bne.n	8006826 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff ff03 	bl	800662c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	40003800 	.word	0x40003800
 8006834:	40003400 	.word	0x40003400

08006838 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e034      	b.n	80068b4 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006852:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f245 5255 	movw	r2, #21845	; 0x5555
 800685c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6852      	ldr	r2, [r2, #4]
 8006866:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6892      	ldr	r2, [r2, #8]
 8006870:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006872:	f7fb fae1 	bl	8001e38 <HAL_GetTick>
 8006876:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006878:	e00f      	b.n	800689a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800687a:	f7fb fadd 	bl	8001e38 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b31      	cmp	r3, #49	; 0x31
 8006886:	d908      	bls.n	800689a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f003 0303 	and.w	r3, r3, #3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e00c      	b.n	80068b4 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f003 0303 	and.w	r3, r3, #3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e8      	bne.n	800687a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80068b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80068cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e264      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d075      	beq.n	80069e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068fa:	4ba3      	ldr	r3, [pc, #652]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
 8006902:	2b04      	cmp	r3, #4
 8006904:	d00c      	beq.n	8006920 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006906:	4ba0      	ldr	r3, [pc, #640]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800690e:	2b08      	cmp	r3, #8
 8006910:	d112      	bne.n	8006938 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006912:	4b9d      	ldr	r3, [pc, #628]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800691a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800691e:	d10b      	bne.n	8006938 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006920:	4b99      	ldr	r3, [pc, #612]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d05b      	beq.n	80069e4 <HAL_RCC_OscConfig+0x108>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d157      	bne.n	80069e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e23f      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006940:	d106      	bne.n	8006950 <HAL_RCC_OscConfig+0x74>
 8006942:	4b91      	ldr	r3, [pc, #580]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a90      	ldr	r2, [pc, #576]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e01d      	b.n	800698c <HAL_RCC_OscConfig+0xb0>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006958:	d10c      	bne.n	8006974 <HAL_RCC_OscConfig+0x98>
 800695a:	4b8b      	ldr	r3, [pc, #556]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a8a      	ldr	r2, [pc, #552]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	4b88      	ldr	r3, [pc, #544]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a87      	ldr	r2, [pc, #540]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 800696c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	e00b      	b.n	800698c <HAL_RCC_OscConfig+0xb0>
 8006974:	4b84      	ldr	r3, [pc, #528]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a83      	ldr	r2, [pc, #524]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 800697a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	4b81      	ldr	r3, [pc, #516]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a80      	ldr	r2, [pc, #512]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800698a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d013      	beq.n	80069bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006994:	f7fb fa50 	bl	8001e38 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800699c:	f7fb fa4c 	bl	8001e38 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b64      	cmp	r3, #100	; 0x64
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e204      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ae:	4b76      	ldr	r3, [pc, #472]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f0      	beq.n	800699c <HAL_RCC_OscConfig+0xc0>
 80069ba:	e014      	b.n	80069e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069bc:	f7fb fa3c 	bl	8001e38 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069c4:	f7fb fa38 	bl	8001e38 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b64      	cmp	r3, #100	; 0x64
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e1f0      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069d6:	4b6c      	ldr	r3, [pc, #432]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f0      	bne.n	80069c4 <HAL_RCC_OscConfig+0xe8>
 80069e2:	e000      	b.n	80069e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d063      	beq.n	8006aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069f2:	4b65      	ldr	r3, [pc, #404]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00b      	beq.n	8006a16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069fe:	4b62      	ldr	r3, [pc, #392]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d11c      	bne.n	8006a44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a0a:	4b5f      	ldr	r3, [pc, #380]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d116      	bne.n	8006a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a16:	4b5c      	ldr	r3, [pc, #368]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <HAL_RCC_OscConfig+0x152>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d001      	beq.n	8006a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e1c4      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2e:	4b56      	ldr	r3, [pc, #344]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	4952      	ldr	r1, [pc, #328]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a42:	e03a      	b.n	8006aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d020      	beq.n	8006a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a4c:	4b4f      	ldr	r3, [pc, #316]	; (8006b8c <HAL_RCC_OscConfig+0x2b0>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a52:	f7fb f9f1 	bl	8001e38 <HAL_GetTick>
 8006a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a58:	e008      	b.n	8006a6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a5a:	f7fb f9ed 	bl	8001e38 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e1a5      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6c:	4b46      	ldr	r3, [pc, #280]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0f0      	beq.n	8006a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a78:	4b43      	ldr	r3, [pc, #268]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	4940      	ldr	r1, [pc, #256]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	600b      	str	r3, [r1, #0]
 8006a8c:	e015      	b.n	8006aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a8e:	4b3f      	ldr	r3, [pc, #252]	; (8006b8c <HAL_RCC_OscConfig+0x2b0>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a94:	f7fb f9d0 	bl	8001e38 <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a9c:	f7fb f9cc 	bl	8001e38 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e184      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aae:	4b36      	ldr	r3, [pc, #216]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f0      	bne.n	8006a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0308 	and.w	r3, r3, #8
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d030      	beq.n	8006b28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d016      	beq.n	8006afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ace:	4b30      	ldr	r3, [pc, #192]	; (8006b90 <HAL_RCC_OscConfig+0x2b4>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad4:	f7fb f9b0 	bl	8001e38 <HAL_GetTick>
 8006ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006adc:	f7fb f9ac 	bl	8001e38 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e164      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aee:	4b26      	ldr	r3, [pc, #152]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0f0      	beq.n	8006adc <HAL_RCC_OscConfig+0x200>
 8006afa:	e015      	b.n	8006b28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006afc:	4b24      	ldr	r3, [pc, #144]	; (8006b90 <HAL_RCC_OscConfig+0x2b4>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b02:	f7fb f999 	bl	8001e38 <HAL_GetTick>
 8006b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b08:	e008      	b.n	8006b1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b0a:	f7fb f995 	bl	8001e38 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e14d      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b1c:	4b1a      	ldr	r3, [pc, #104]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1f0      	bne.n	8006b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 80a0 	beq.w	8006c76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b36:	2300      	movs	r3, #0
 8006b38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b3a:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10f      	bne.n	8006b66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b46:	2300      	movs	r3, #0
 8006b48:	60bb      	str	r3, [r7, #8]
 8006b4a:	4b0f      	ldr	r3, [pc, #60]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	4a0e      	ldr	r2, [pc, #56]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b54:	6413      	str	r3, [r2, #64]	; 0x40
 8006b56:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b5e:	60bb      	str	r3, [r7, #8]
 8006b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b62:	2301      	movs	r3, #1
 8006b64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b66:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <HAL_RCC_OscConfig+0x2b8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d121      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b72:	4b08      	ldr	r3, [pc, #32]	; (8006b94 <HAL_RCC_OscConfig+0x2b8>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a07      	ldr	r2, [pc, #28]	; (8006b94 <HAL_RCC_OscConfig+0x2b8>)
 8006b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b7e:	f7fb f95b 	bl	8001e38 <HAL_GetTick>
 8006b82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b84:	e011      	b.n	8006baa <HAL_RCC_OscConfig+0x2ce>
 8006b86:	bf00      	nop
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	42470000 	.word	0x42470000
 8006b90:	42470e80 	.word	0x42470e80
 8006b94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b98:	f7fb f94e 	bl	8001e38 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e106      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006baa:	4b85      	ldr	r3, [pc, #532]	; (8006dc0 <HAL_RCC_OscConfig+0x4e4>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0f0      	beq.n	8006b98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d106      	bne.n	8006bcc <HAL_RCC_OscConfig+0x2f0>
 8006bbe:	4b81      	ldr	r3, [pc, #516]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc2:	4a80      	ldr	r2, [pc, #512]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bca:	e01c      	b.n	8006c06 <HAL_RCC_OscConfig+0x32a>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	2b05      	cmp	r3, #5
 8006bd2:	d10c      	bne.n	8006bee <HAL_RCC_OscConfig+0x312>
 8006bd4:	4b7b      	ldr	r3, [pc, #492]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd8:	4a7a      	ldr	r2, [pc, #488]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006bda:	f043 0304 	orr.w	r3, r3, #4
 8006bde:	6713      	str	r3, [r2, #112]	; 0x70
 8006be0:	4b78      	ldr	r3, [pc, #480]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be4:	4a77      	ldr	r2, [pc, #476]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006be6:	f043 0301 	orr.w	r3, r3, #1
 8006bea:	6713      	str	r3, [r2, #112]	; 0x70
 8006bec:	e00b      	b.n	8006c06 <HAL_RCC_OscConfig+0x32a>
 8006bee:	4b75      	ldr	r3, [pc, #468]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf2:	4a74      	ldr	r2, [pc, #464]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006bf4:	f023 0301 	bic.w	r3, r3, #1
 8006bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bfa:	4b72      	ldr	r3, [pc, #456]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfe:	4a71      	ldr	r2, [pc, #452]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006c00:	f023 0304 	bic.w	r3, r3, #4
 8006c04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d015      	beq.n	8006c3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c0e:	f7fb f913 	bl	8001e38 <HAL_GetTick>
 8006c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c14:	e00a      	b.n	8006c2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c16:	f7fb f90f 	bl	8001e38 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e0c5      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2c:	4b65      	ldr	r3, [pc, #404]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0ee      	beq.n	8006c16 <HAL_RCC_OscConfig+0x33a>
 8006c38:	e014      	b.n	8006c64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c3a:	f7fb f8fd 	bl	8001e38 <HAL_GetTick>
 8006c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c40:	e00a      	b.n	8006c58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c42:	f7fb f8f9 	bl	8001e38 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e0af      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c58:	4b5a      	ldr	r3, [pc, #360]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1ee      	bne.n	8006c42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d105      	bne.n	8006c76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c6a:	4b56      	ldr	r3, [pc, #344]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	4a55      	ldr	r2, [pc, #340]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 809b 	beq.w	8006db6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c80:	4b50      	ldr	r3, [pc, #320]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 030c 	and.w	r3, r3, #12
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d05c      	beq.n	8006d46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d141      	bne.n	8006d18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c94:	4b4c      	ldr	r3, [pc, #304]	; (8006dc8 <HAL_RCC_OscConfig+0x4ec>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c9a:	f7fb f8cd 	bl	8001e38 <HAL_GetTick>
 8006c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ca0:	e008      	b.n	8006cb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ca2:	f7fb f8c9 	bl	8001e38 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e081      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cb4:	4b43      	ldr	r3, [pc, #268]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1f0      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	019b      	lsls	r3, r3, #6
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	041b      	lsls	r3, r3, #16
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	061b      	lsls	r3, r3, #24
 8006ce4:	4937      	ldr	r1, [pc, #220]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cea:	4b37      	ldr	r3, [pc, #220]	; (8006dc8 <HAL_RCC_OscConfig+0x4ec>)
 8006cec:	2201      	movs	r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf0:	f7fb f8a2 	bl	8001e38 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf8:	f7fb f89e 	bl	8001e38 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e056      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d0a:	4b2e      	ldr	r3, [pc, #184]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x41c>
 8006d16:	e04e      	b.n	8006db6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d18:	4b2b      	ldr	r3, [pc, #172]	; (8006dc8 <HAL_RCC_OscConfig+0x4ec>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1e:	f7fb f88b 	bl	8001e38 <HAL_GetTick>
 8006d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d24:	e008      	b.n	8006d38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d26:	f7fb f887 	bl	8001e38 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d901      	bls.n	8006d38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e03f      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d38:	4b22      	ldr	r3, [pc, #136]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1f0      	bne.n	8006d26 <HAL_RCC_OscConfig+0x44a>
 8006d44:	e037      	b.n	8006db6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e032      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d52:	4b1c      	ldr	r3, [pc, #112]	; (8006dc4 <HAL_RCC_OscConfig+0x4e8>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d028      	beq.n	8006db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d121      	bne.n	8006db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d11a      	bne.n	8006db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d82:	4013      	ands	r3, r2
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d111      	bne.n	8006db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	085b      	lsrs	r3, r3, #1
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d107      	bne.n	8006db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d001      	beq.n	8006db6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40007000 	.word	0x40007000
 8006dc4:	40023800 	.word	0x40023800
 8006dc8:	42470060 	.word	0x42470060

08006dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e0cc      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006de0:	4b68      	ldr	r3, [pc, #416]	; (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d90c      	bls.n	8006e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dee:	4b65      	ldr	r3, [pc, #404]	; (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006df6:	4b63      	ldr	r3, [pc, #396]	; (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d001      	beq.n	8006e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e0b8      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d020      	beq.n	8006e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e20:	4b59      	ldr	r3, [pc, #356]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	4a58      	ldr	r2, [pc, #352]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e38:	4b53      	ldr	r3, [pc, #332]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	4a52      	ldr	r2, [pc, #328]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e44:	4b50      	ldr	r3, [pc, #320]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	494d      	ldr	r1, [pc, #308]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d044      	beq.n	8006eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d107      	bne.n	8006e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e6a:	4b47      	ldr	r3, [pc, #284]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d119      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e07f      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d003      	beq.n	8006e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d107      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8a:	4b3f      	ldr	r3, [pc, #252]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d109      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e06f      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e9a:	4b3b      	ldr	r3, [pc, #236]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e067      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eaa:	4b37      	ldr	r3, [pc, #220]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f023 0203 	bic.w	r2, r3, #3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4934      	ldr	r1, [pc, #208]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ebc:	f7fa ffbc 	bl	8001e38 <HAL_GetTick>
 8006ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec2:	e00a      	b.n	8006eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec4:	f7fa ffb8 	bl	8001e38 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e04f      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eda:	4b2b      	ldr	r3, [pc, #172]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 020c 	and.w	r2, r3, #12
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d1eb      	bne.n	8006ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006eec:	4b25      	ldr	r3, [pc, #148]	; (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d20c      	bcs.n	8006f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efa:	4b22      	ldr	r3, [pc, #136]	; (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f02:	4b20      	ldr	r3, [pc, #128]	; (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d001      	beq.n	8006f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e032      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d008      	beq.n	8006f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f20:	4b19      	ldr	r3, [pc, #100]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	4916      	ldr	r1, [pc, #88]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f3e:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	490e      	ldr	r1, [pc, #56]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f52:	f000 f889 	bl	8007068 <HAL_RCC_GetSysClockFreq>
 8006f56:	4602      	mov	r2, r0
 8006f58:	4b0b      	ldr	r3, [pc, #44]	; (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	091b      	lsrs	r3, r3, #4
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	490a      	ldr	r1, [pc, #40]	; (8006f8c <HAL_RCC_ClockConfig+0x1c0>)
 8006f64:	5ccb      	ldrb	r3, [r1, r3]
 8006f66:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6a:	4a09      	ldr	r2, [pc, #36]	; (8006f90 <HAL_RCC_ClockConfig+0x1c4>)
 8006f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f6e:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fa fd6e 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	40023c00 	.word	0x40023c00
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	0804dd0c 	.word	0x0804dd0c
 8006f90:	20000010 	.word	0x20000010
 8006f94:	20000014 	.word	0x20000014

08006f98 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08c      	sub	sp, #48	; 0x30
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d129      	bne.n	8006ffe <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8006faa:	2300      	movs	r3, #0
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	4b2b      	ldr	r3, [pc, #172]	; (800705c <HAL_RCC_MCOConfig+0xc4>)
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb2:	4a2a      	ldr	r2, [pc, #168]	; (800705c <HAL_RCC_MCOConfig+0xc4>)
 8006fb4:	f043 0301 	orr.w	r3, r3, #1
 8006fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8006fba:	4b28      	ldr	r3, [pc, #160]	; (800705c <HAL_RCC_MCOConfig+0xc4>)
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	61bb      	str	r3, [r7, #24]
 8006fc4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006fdc:	f107 031c 	add.w	r3, r7, #28
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	481f      	ldr	r0, [pc, #124]	; (8007060 <HAL_RCC_MCOConfig+0xc8>)
 8006fe4:	f7fd ff5c 	bl	8004ea0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006fe8:	4b1c      	ldr	r3, [pc, #112]	; (800705c <HAL_RCC_MCOConfig+0xc4>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	4919      	ldr	r1, [pc, #100]	; (800705c <HAL_RCC_MCOConfig+0xc4>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006ffc:	e029      	b.n	8007052 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8006ffe:	2300      	movs	r3, #0
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	4b16      	ldr	r3, [pc, #88]	; (800705c <HAL_RCC_MCOConfig+0xc4>)
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	4a15      	ldr	r2, [pc, #84]	; (800705c <HAL_RCC_MCOConfig+0xc4>)
 8007008:	f043 0304 	orr.w	r3, r3, #4
 800700c:	6313      	str	r3, [r2, #48]	; 0x30
 800700e:	4b13      	ldr	r3, [pc, #76]	; (800705c <HAL_RCC_MCOConfig+0xc4>)
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800701a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800701e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007020:	2302      	movs	r3, #2
 8007022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007024:	2303      	movs	r3, #3
 8007026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007028:	2300      	movs	r3, #0
 800702a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800702c:	2300      	movs	r3, #0
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007030:	f107 031c 	add.w	r3, r7, #28
 8007034:	4619      	mov	r1, r3
 8007036:	480b      	ldr	r0, [pc, #44]	; (8007064 <HAL_RCC_MCOConfig+0xcc>)
 8007038:	f7fd ff32 	bl	8004ea0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800703c:	4b07      	ldr	r3, [pc, #28]	; (800705c <HAL_RCC_MCOConfig+0xc4>)
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	00d9      	lsls	r1, r3, #3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	430b      	orrs	r3, r1
 800704c:	4903      	ldr	r1, [pc, #12]	; (800705c <HAL_RCC_MCOConfig+0xc4>)
 800704e:	4313      	orrs	r3, r2
 8007050:	608b      	str	r3, [r1, #8]
}
 8007052:	bf00      	nop
 8007054:	3730      	adds	r7, #48	; 0x30
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	40023800 	.word	0x40023800
 8007060:	40020000 	.word	0x40020000
 8007064:	40020800 	.word	0x40020800

08007068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	607b      	str	r3, [r7, #4]
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	2300      	movs	r3, #0
 800707a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007080:	4b67      	ldr	r3, [pc, #412]	; (8007220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 030c 	and.w	r3, r3, #12
 8007088:	2b08      	cmp	r3, #8
 800708a:	d00d      	beq.n	80070a8 <HAL_RCC_GetSysClockFreq+0x40>
 800708c:	2b08      	cmp	r3, #8
 800708e:	f200 80bd 	bhi.w	800720c <HAL_RCC_GetSysClockFreq+0x1a4>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <HAL_RCC_GetSysClockFreq+0x34>
 8007096:	2b04      	cmp	r3, #4
 8007098:	d003      	beq.n	80070a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800709a:	e0b7      	b.n	800720c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800709c:	4b61      	ldr	r3, [pc, #388]	; (8007224 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800709e:	60bb      	str	r3, [r7, #8]
       break;
 80070a0:	e0b7      	b.n	8007212 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070a2:	4b61      	ldr	r3, [pc, #388]	; (8007228 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80070a4:	60bb      	str	r3, [r7, #8]
      break;
 80070a6:	e0b4      	b.n	8007212 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070a8:	4b5d      	ldr	r3, [pc, #372]	; (8007220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070b2:	4b5b      	ldr	r3, [pc, #364]	; (8007220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d04d      	beq.n	800715a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070be:	4b58      	ldr	r3, [pc, #352]	; (8007220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	099b      	lsrs	r3, r3, #6
 80070c4:	461a      	mov	r2, r3
 80070c6:	f04f 0300 	mov.w	r3, #0
 80070ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070ce:	f04f 0100 	mov.w	r1, #0
 80070d2:	ea02 0800 	and.w	r8, r2, r0
 80070d6:	ea03 0901 	and.w	r9, r3, r1
 80070da:	4640      	mov	r0, r8
 80070dc:	4649      	mov	r1, r9
 80070de:	f04f 0200 	mov.w	r2, #0
 80070e2:	f04f 0300 	mov.w	r3, #0
 80070e6:	014b      	lsls	r3, r1, #5
 80070e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80070ec:	0142      	lsls	r2, r0, #5
 80070ee:	4610      	mov	r0, r2
 80070f0:	4619      	mov	r1, r3
 80070f2:	ebb0 0008 	subs.w	r0, r0, r8
 80070f6:	eb61 0109 	sbc.w	r1, r1, r9
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	f04f 0300 	mov.w	r3, #0
 8007102:	018b      	lsls	r3, r1, #6
 8007104:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007108:	0182      	lsls	r2, r0, #6
 800710a:	1a12      	subs	r2, r2, r0
 800710c:	eb63 0301 	sbc.w	r3, r3, r1
 8007110:	f04f 0000 	mov.w	r0, #0
 8007114:	f04f 0100 	mov.w	r1, #0
 8007118:	00d9      	lsls	r1, r3, #3
 800711a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800711e:	00d0      	lsls	r0, r2, #3
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	eb12 0208 	adds.w	r2, r2, r8
 8007128:	eb43 0309 	adc.w	r3, r3, r9
 800712c:	f04f 0000 	mov.w	r0, #0
 8007130:	f04f 0100 	mov.w	r1, #0
 8007134:	0259      	lsls	r1, r3, #9
 8007136:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800713a:	0250      	lsls	r0, r2, #9
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	4610      	mov	r0, r2
 8007142:	4619      	mov	r1, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	461a      	mov	r2, r3
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	f7f9 f8a8 	bl	80002a0 <__aeabi_uldivmod>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4613      	mov	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	e04a      	b.n	80071f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800715a:	4b31      	ldr	r3, [pc, #196]	; (8007220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	099b      	lsrs	r3, r3, #6
 8007160:	461a      	mov	r2, r3
 8007162:	f04f 0300 	mov.w	r3, #0
 8007166:	f240 10ff 	movw	r0, #511	; 0x1ff
 800716a:	f04f 0100 	mov.w	r1, #0
 800716e:	ea02 0400 	and.w	r4, r2, r0
 8007172:	ea03 0501 	and.w	r5, r3, r1
 8007176:	4620      	mov	r0, r4
 8007178:	4629      	mov	r1, r5
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	014b      	lsls	r3, r1, #5
 8007184:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007188:	0142      	lsls	r2, r0, #5
 800718a:	4610      	mov	r0, r2
 800718c:	4619      	mov	r1, r3
 800718e:	1b00      	subs	r0, r0, r4
 8007190:	eb61 0105 	sbc.w	r1, r1, r5
 8007194:	f04f 0200 	mov.w	r2, #0
 8007198:	f04f 0300 	mov.w	r3, #0
 800719c:	018b      	lsls	r3, r1, #6
 800719e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071a2:	0182      	lsls	r2, r0, #6
 80071a4:	1a12      	subs	r2, r2, r0
 80071a6:	eb63 0301 	sbc.w	r3, r3, r1
 80071aa:	f04f 0000 	mov.w	r0, #0
 80071ae:	f04f 0100 	mov.w	r1, #0
 80071b2:	00d9      	lsls	r1, r3, #3
 80071b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071b8:	00d0      	lsls	r0, r2, #3
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	1912      	adds	r2, r2, r4
 80071c0:	eb45 0303 	adc.w	r3, r5, r3
 80071c4:	f04f 0000 	mov.w	r0, #0
 80071c8:	f04f 0100 	mov.w	r1, #0
 80071cc:	0299      	lsls	r1, r3, #10
 80071ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80071d2:	0290      	lsls	r0, r2, #10
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4610      	mov	r0, r2
 80071da:	4619      	mov	r1, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	461a      	mov	r2, r3
 80071e0:	f04f 0300 	mov.w	r3, #0
 80071e4:	f7f9 f85c 	bl	80002a0 <__aeabi_uldivmod>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4613      	mov	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071f0:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	0c1b      	lsrs	r3, r3, #16
 80071f6:	f003 0303 	and.w	r3, r3, #3
 80071fa:	3301      	adds	r3, #1
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	fbb2 f3f3 	udiv	r3, r2, r3
 8007208:	60bb      	str	r3, [r7, #8]
      break;
 800720a:	e002      	b.n	8007212 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800720c:	4b05      	ldr	r3, [pc, #20]	; (8007224 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800720e:	60bb      	str	r3, [r7, #8]
      break;
 8007210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007212:	68bb      	ldr	r3, [r7, #8]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800721e:	bf00      	nop
 8007220:	40023800 	.word	0x40023800
 8007224:	00f42400 	.word	0x00f42400
 8007228:	007a1200 	.word	0x007a1200

0800722c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007230:	4b03      	ldr	r3, [pc, #12]	; (8007240 <HAL_RCC_GetHCLKFreq+0x14>)
 8007232:	681b      	ldr	r3, [r3, #0]
}
 8007234:	4618      	mov	r0, r3
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	20000010 	.word	0x20000010

08007244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007248:	f7ff fff0 	bl	800722c <HAL_RCC_GetHCLKFreq>
 800724c:	4602      	mov	r2, r0
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	0a9b      	lsrs	r3, r3, #10
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	4903      	ldr	r1, [pc, #12]	; (8007268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800725a:	5ccb      	ldrb	r3, [r1, r3]
 800725c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007260:	4618      	mov	r0, r3
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40023800 	.word	0x40023800
 8007268:	0804dd1c 	.word	0x0804dd1c

0800726c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007270:	f7ff ffdc 	bl	800722c <HAL_RCC_GetHCLKFreq>
 8007274:	4602      	mov	r2, r0
 8007276:	4b05      	ldr	r3, [pc, #20]	; (800728c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	0b5b      	lsrs	r3, r3, #13
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	4903      	ldr	r1, [pc, #12]	; (8007290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007282:	5ccb      	ldrb	r3, [r1, r3]
 8007284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007288:	4618      	mov	r0, r3
 800728a:	bd80      	pop	{r7, pc}
 800728c:	40023800 	.word	0x40023800
 8007290:	0804dd1c 	.word	0x0804dd1c

08007294 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	220f      	movs	r2, #15
 80072a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80072a4:	4b12      	ldr	r3, [pc, #72]	; (80072f0 <HAL_RCC_GetClockConfig+0x5c>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 0203 	and.w	r2, r3, #3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80072b0:	4b0f      	ldr	r3, [pc, #60]	; (80072f0 <HAL_RCC_GetClockConfig+0x5c>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80072bc:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <HAL_RCC_GetClockConfig+0x5c>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80072c8:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <HAL_RCC_GetClockConfig+0x5c>)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	08db      	lsrs	r3, r3, #3
 80072ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072d6:	4b07      	ldr	r3, [pc, #28]	; (80072f4 <HAL_RCC_GetClockConfig+0x60>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0207 	and.w	r2, r3, #7
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	601a      	str	r2, [r3, #0]
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	40023800 	.word	0x40023800
 80072f4:	40023c00 	.word	0x40023c00

080072f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d105      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800731c:	2b00      	cmp	r3, #0
 800731e:	d035      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007320:	4b62      	ldr	r3, [pc, #392]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007326:	f7fa fd87 	bl	8001e38 <HAL_GetTick>
 800732a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800732c:	e008      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800732e:	f7fa fd83 	bl	8001e38 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d901      	bls.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e0b0      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007340:	4b5b      	ldr	r3, [pc, #364]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1f0      	bne.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	019a      	lsls	r2, r3, #6
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	071b      	lsls	r3, r3, #28
 8007358:	4955      	ldr	r1, [pc, #340]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800735a:	4313      	orrs	r3, r2
 800735c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007360:	4b52      	ldr	r3, [pc, #328]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007362:	2201      	movs	r2, #1
 8007364:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007366:	f7fa fd67 	bl	8001e38 <HAL_GetTick>
 800736a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800736c:	e008      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800736e:	f7fa fd63 	bl	8001e38 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e090      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007380:	4b4b      	ldr	r3, [pc, #300]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0f0      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 8083 	beq.w	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	4b44      	ldr	r3, [pc, #272]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	4a43      	ldr	r2, [pc, #268]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a8:	6413      	str	r3, [r2, #64]	; 0x40
 80073aa:	4b41      	ldr	r3, [pc, #260]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80073b6:	4b3f      	ldr	r3, [pc, #252]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a3e      	ldr	r2, [pc, #248]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073c2:	f7fa fd39 	bl	8001e38 <HAL_GetTick>
 80073c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073c8:	e008      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073ca:	f7fa fd35 	bl	8001e38 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d901      	bls.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e062      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073dc:	4b35      	ldr	r3, [pc, #212]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0f0      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073e8:	4b31      	ldr	r3, [pc, #196]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d02f      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	429a      	cmp	r2, r3
 8007404:	d028      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007406:	4b2a      	ldr	r3, [pc, #168]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800740e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007410:	4b29      	ldr	r3, [pc, #164]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007412:	2201      	movs	r2, #1
 8007414:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007416:	4b28      	ldr	r3, [pc, #160]	; (80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800741c:	4a24      	ldr	r2, [pc, #144]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007422:	4b23      	ldr	r3, [pc, #140]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b01      	cmp	r3, #1
 800742c:	d114      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800742e:	f7fa fd03 	bl	8001e38 <HAL_GetTick>
 8007432:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007434:	e00a      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007436:	f7fa fcff 	bl	8001e38 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	f241 3288 	movw	r2, #5000	; 0x1388
 8007444:	4293      	cmp	r3, r2
 8007446:	d901      	bls.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e02a      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800744c:	4b18      	ldr	r3, [pc, #96]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800744e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0ee      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007464:	d10d      	bne.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007466:	4b12      	ldr	r3, [pc, #72]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800747a:	490d      	ldr	r1, [pc, #52]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800747c:	4313      	orrs	r3, r2
 800747e:	608b      	str	r3, [r1, #8]
 8007480:	e005      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007482:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	4a0a      	ldr	r2, [pc, #40]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007488:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800748c:	6093      	str	r3, [r2, #8]
 800748e:	4b08      	ldr	r3, [pc, #32]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007490:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800749a:	4905      	ldr	r1, [pc, #20]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800749c:	4313      	orrs	r3, r2
 800749e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	42470068 	.word	0x42470068
 80074b0:	40023800 	.word	0x40023800
 80074b4:	40007000 	.word	0x40007000
 80074b8:	42470e40 	.word	0x42470e40

080074bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d13e      	bne.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80074da:	4b23      	ldr	r3, [pc, #140]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d12f      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80074f0:	4b1e      	ldr	r3, [pc, #120]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80074f2:	617b      	str	r3, [r7, #20]
          break;
 80074f4:	e02f      	b.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80074f6:	4b1c      	ldr	r3, [pc, #112]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007502:	d108      	bne.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007504:	4b18      	ldr	r3, [pc, #96]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800750c:	4a18      	ldr	r2, [pc, #96]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800750e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007512:	613b      	str	r3, [r7, #16]
 8007514:	e007      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007516:	4b14      	ldr	r3, [pc, #80]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800751e:	4a15      	ldr	r2, [pc, #84]	; (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007520:	fbb2 f3f3 	udiv	r3, r2, r3
 8007524:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007526:	4b10      	ldr	r3, [pc, #64]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800752c:	099b      	lsrs	r3, r3, #6
 800752e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	fb02 f303 	mul.w	r3, r2, r3
 8007538:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800753a:	4b0b      	ldr	r3, [pc, #44]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800753c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007540:	0f1b      	lsrs	r3, r3, #28
 8007542:	f003 0307 	and.w	r3, r3, #7
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	fbb2 f3f3 	udiv	r3, r2, r3
 800754c:	617b      	str	r3, [r7, #20]
          break;
 800754e:	e002      	b.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]
          break;
 8007554:	bf00      	nop
        }
      }
      break;
 8007556:	bf00      	nop
    }
  }
  return frequency;
 8007558:	697b      	ldr	r3, [r7, #20]
}
 800755a:	4618      	mov	r0, r3
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	40023800 	.word	0x40023800
 800756c:	00bb8000 	.word	0x00bb8000
 8007570:	007a1200 	.word	0x007a1200
 8007574:	00f42400 	.word	0x00f42400

08007578 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e022      	b.n	80075d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d105      	bne.n	80075a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7fa f91b 	bl	80017d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2203      	movs	r2, #3
 80075a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f814 	bl	80075d8 <HAL_SD_InitCard>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e00a      	b.n	80075d0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075d8:	b5b0      	push	{r4, r5, r7, lr}
 80075da:	b08e      	sub	sp, #56	; 0x38
 80075dc:	af04      	add	r7, sp, #16
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80075e0:	2300      	movs	r3, #0
 80075e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80075e8:	2300      	movs	r3, #0
 80075ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80075ec:	2300      	movs	r3, #0
 80075ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80075f4:	2376      	movs	r3, #118	; 0x76
 80075f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681d      	ldr	r5, [r3, #0]
 80075fc:	466c      	mov	r4, sp
 80075fe:	f107 0314 	add.w	r3, r7, #20
 8007602:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800760a:	f107 0308 	add.w	r3, r7, #8
 800760e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007610:	4628      	mov	r0, r5
 8007612:	f002 fcf5 	bl	800a000 <SDIO_Init>
 8007616:	4603      	mov	r3, r0
 8007618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800761c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e04c      	b.n	80076c2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007628:	4b28      	ldr	r3, [pc, #160]	; (80076cc <HAL_SD_InitCard+0xf4>)
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4618      	mov	r0, r3
 8007634:	f002 fd2d 	bl	800a092 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007638:	4b24      	ldr	r3, [pc, #144]	; (80076cc <HAL_SD_InitCard+0xf4>)
 800763a:	2201      	movs	r2, #1
 800763c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 f804 	bl	800864c <SD_PowerON>
 8007644:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	431a      	orrs	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e02e      	b.n	80076c2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 ff25 	bl	80084b4 <SD_InitCard>
 800766a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00b      	beq.n	800768a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e01b      	b.n	80076c2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007692:	4618      	mov	r0, r3
 8007694:	f002 fd90 	bl	800a1b8 <SDMMC_CmdBlockLength>
 8007698:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00f      	beq.n	80076c0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a0a      	ldr	r2, [pc, #40]	; (80076d0 <HAL_SD_InitCard+0xf8>)
 80076a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e000      	b.n	80076c2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3728      	adds	r7, #40	; 0x28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bdb0      	pop	{r4, r5, r7, pc}
 80076ca:	bf00      	nop
 80076cc:	422580a0 	.word	0x422580a0
 80076d0:	004005ff 	.word	0x004005ff

080076d4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08c      	sub	sp, #48	; 0x30
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d107      	bne.n	80076fc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e0c0      	b.n	800787e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b01      	cmp	r3, #1
 8007706:	f040 80b9 	bne.w	800787c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	441a      	add	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800771a:	429a      	cmp	r2, r3
 800771c:	d907      	bls.n	800772e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e0a7      	b.n	800787e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2203      	movs	r2, #3
 8007732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2200      	movs	r2, #0
 800773c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	6812      	ldr	r2, [r2, #0]
 8007748:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800774c:	f043 0302 	orr.w	r3, r3, #2
 8007750:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	4a4c      	ldr	r2, [pc, #304]	; (8007888 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007758:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	4a4b      	ldr	r2, [pc, #300]	; (800788c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007760:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	2200      	movs	r2, #0
 8007768:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	2200      	movs	r2, #0
 8007770:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3380      	adds	r3, #128	; 0x80
 8007798:	4619      	mov	r1, r3
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	025b      	lsls	r3, r3, #9
 80077a0:	089b      	lsrs	r3, r3, #2
 80077a2:	f7fa fd09 	bl	80021b8 <HAL_DMA_Start_IT>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d017      	beq.n	80077dc <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80077ba:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a33      	ldr	r2, [pc, #204]	; (8007890 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80077c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e050      	b.n	800787e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80077dc:	4b2d      	ldr	r3, [pc, #180]	; (8007894 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80077de:	2201      	movs	r2, #1
 80077e0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d002      	beq.n	80077f0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	025b      	lsls	r3, r3, #9
 80077ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80077f0:	f04f 33ff 	mov.w	r3, #4294967295
 80077f4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	025b      	lsls	r3, r3, #9
 80077fa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80077fc:	2390      	movs	r3, #144	; 0x90
 80077fe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007800:	2302      	movs	r3, #2
 8007802:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007804:	2300      	movs	r3, #0
 8007806:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007808:	2301      	movs	r3, #1
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f107 0210 	add.w	r2, r7, #16
 8007814:	4611      	mov	r1, r2
 8007816:	4618      	mov	r0, r3
 8007818:	f002 fca2 	bl	800a160 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d90a      	bls.n	8007838 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2282      	movs	r2, #130	; 0x82
 8007826:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800782e:	4618      	mov	r0, r3
 8007830:	f002 fd06 	bl	800a240 <SDMMC_CmdReadMultiBlock>
 8007834:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007836:	e009      	b.n	800784c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2281      	movs	r2, #129	; 0x81
 800783c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007844:	4618      	mov	r0, r3
 8007846:	f002 fcd9 	bl	800a1fc <SDMMC_CmdReadSingleBlock>
 800784a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d012      	beq.n	8007878 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a0e      	ldr	r2, [pc, #56]	; (8007890 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007858:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	431a      	orrs	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e002      	b.n	800787e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	e000      	b.n	800787e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800787c:	2302      	movs	r3, #2
  }
}
 800787e:	4618      	mov	r0, r3
 8007880:	3730      	adds	r7, #48	; 0x30
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	080082c3 	.word	0x080082c3
 800788c:	08008335 	.word	0x08008335
 8007890:	004005ff 	.word	0x004005ff
 8007894:	4225858c 	.word	0x4225858c

08007898 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08c      	sub	sp, #48	; 0x30
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d107      	bne.n	80078c0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e0c5      	b.n	8007a4c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	f040 80be 	bne.w	8007a4a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80078d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	441a      	add	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078de:	429a      	cmp	r2, r3
 80078e0:	d907      	bls.n	80078f2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e0ac      	b.n	8007a4c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2203      	movs	r2, #3
 80078f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2200      	movs	r2, #0
 8007900:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	6812      	ldr	r2, [r2, #0]
 800790c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8007910:	f043 0302 	orr.w	r3, r3, #2
 8007914:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791a:	4a4e      	ldr	r2, [pc, #312]	; (8007a54 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800791c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007922:	4a4d      	ldr	r2, [pc, #308]	; (8007a58 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007924:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792a:	2200      	movs	r2, #0
 800792c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007932:	2b01      	cmp	r3, #1
 8007934:	d002      	beq.n	800793c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	025b      	lsls	r3, r3, #9
 800793a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d90a      	bls.n	8007958 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	22a0      	movs	r2, #160	; 0xa0
 8007946:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800794e:	4618      	mov	r0, r3
 8007950:	f002 fcba 	bl	800a2c8 <SDMMC_CmdWriteMultiBlock>
 8007954:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007956:	e009      	b.n	800796c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2290      	movs	r2, #144	; 0x90
 800795c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007964:	4618      	mov	r0, r3
 8007966:	f002 fc8d 	bl	800a284 <SDMMC_CmdWriteSingleBlock>
 800796a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800796c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d012      	beq.n	8007998 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a39      	ldr	r2, [pc, #228]	; (8007a5c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007978:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	431a      	orrs	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e059      	b.n	8007a4c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007998:	4b31      	ldr	r3, [pc, #196]	; (8007a60 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800799a:	2201      	movs	r2, #1
 800799c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a2:	2240      	movs	r2, #64	; 0x40
 80079a4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b6:	689a      	ldr	r2, [r3, #8]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80079c6:	68b9      	ldr	r1, [r7, #8]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3380      	adds	r3, #128	; 0x80
 80079ce:	461a      	mov	r2, r3
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	025b      	lsls	r3, r3, #9
 80079d4:	089b      	lsrs	r3, r3, #2
 80079d6:	f7fa fbef 	bl	80021b8 <HAL_DMA_Start_IT>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01c      	beq.n	8007a1a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	6812      	ldr	r2, [r2, #0]
 80079ea:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80079ee:	f023 0302 	bic.w	r3, r3, #2
 80079f2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a18      	ldr	r2, [pc, #96]	; (8007a5c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80079fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e018      	b.n	8007a4c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	025b      	lsls	r3, r3, #9
 8007a24:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007a26:	2390      	movs	r3, #144	; 0x90
 8007a28:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007a32:	2301      	movs	r3, #1
 8007a34:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f107 0210 	add.w	r2, r7, #16
 8007a3e:	4611      	mov	r1, r2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f002 fb8d 	bl	800a160 <SDIO_ConfigData>

      return HAL_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	e000      	b.n	8007a4c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8007a4a:	2302      	movs	r3, #2
  }
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3730      	adds	r7, #48	; 0x30
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	08008299 	.word	0x08008299
 8007a58:	08008335 	.word	0x08008335
 8007a5c:	004005ff 	.word	0x004005ff
 8007a60:	4225858c 	.word	0x4225858c

08007a64 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d008      	beq.n	8007a92 <HAL_SD_IRQHandler+0x2e>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f003 0308 	and.w	r3, r3, #8
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fffd 	bl	8008a8a <SD_Read_IT>
 8007a90:	e165      	b.n	8007d5e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 808f 	beq.w	8007bc0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aaa:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8007aba:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007abe:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0201 	bic.w	r2, r2, #1
 8007ace:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d039      	beq.n	8007b4e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d104      	bne.n	8007aee <HAL_SD_IRQHandler+0x8a>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f003 0320 	and.w	r3, r3, #32
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d011      	beq.n	8007b12 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f002 fc0a 	bl	800a30c <SDMMC_CmdStopTransfer>
 8007af8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d008      	beq.n	8007b12 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	431a      	orrs	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f92f 	bl	8007d70 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d104      	bne.n	8007b3e <HAL_SD_IRQHandler+0xda>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f003 f878 	bl	800ac34 <HAL_SD_RxCpltCallback>
 8007b44:	e10b      	b.n	8007d5e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f003 f86a 	bl	800ac20 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007b4c:	e107      	b.n	8007d5e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 8102 	beq.w	8007d5e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f003 0320 	and.w	r3, r3, #32
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d011      	beq.n	8007b88 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f002 fbcf 	bl	800a30c <SDMMC_CmdStopTransfer>
 8007b6e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d008      	beq.n	8007b88 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f8f4 	bl	8007d70 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f040 80e5 	bne.w	8007d5e <HAL_SD_IRQHandler+0x2fa>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f040 80df 	bne.w	8007d5e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0208 	bic.w	r2, r2, #8
 8007bae:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f003 f831 	bl	800ac20 <HAL_SD_TxCpltCallback>
}
 8007bbe:	e0ce      	b.n	8007d5e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d008      	beq.n	8007be0 <HAL_SD_IRQHandler+0x17c>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 ffa7 	bl	8008b2c <SD_Write_IT>
 8007bde:	e0be      	b.n	8007d5e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007be6:	f240 233a 	movw	r3, #570	; 0x23a
 8007bea:	4013      	ands	r3, r2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 80b6 	beq.w	8007d5e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	f043 0202 	orr.w	r2, r3, #2
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c12:	f003 0308 	and.w	r3, r3, #8
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d005      	beq.n	8007c26 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	f043 0208 	orr.w	r2, r3, #8
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2c:	f003 0320 	and.w	r3, r3, #32
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d005      	beq.n	8007c40 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	f043 0220 	orr.w	r2, r3, #32
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c46:	f003 0310 	and.w	r3, r3, #16
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	f043 0210 	orr.w	r2, r3, #16
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d005      	beq.n	8007c74 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	f043 0208 	orr.w	r2, r3, #8
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f240 723a 	movw	r2, #1850	; 0x73a
 8007c7c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6812      	ldr	r2, [r2, #0]
 8007c88:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8007c8c:	f023 0302 	bic.w	r3, r3, #2
 8007c90:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f002 fb38 	bl	800a30c <SDMMC_CmdStopTransfer>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f003 0308 	and.w	r3, r3, #8
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00a      	beq.n	8007cc8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f855 	bl	8007d70 <HAL_SD_ErrorCallback>
}
 8007cc6:	e04a      	b.n	8007d5e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d045      	beq.n	8007d5e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f003 0310 	and.w	r3, r3, #16
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d104      	bne.n	8007ce6 <HAL_SD_IRQHandler+0x282>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f003 0320 	and.w	r3, r3, #32
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d011      	beq.n	8007d0a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cea:	4a1f      	ldr	r2, [pc, #124]	; (8007d68 <HAL_SD_IRQHandler+0x304>)
 8007cec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fa fb28 	bl	8002348 <HAL_DMA_Abort_IT>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d02f      	beq.n	8007d5e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 fb68 	bl	80083d8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007d08:	e029      	b.n	8007d5e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <HAL_SD_IRQHandler+0x2ba>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d011      	beq.n	8007d42 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	4a12      	ldr	r2, [pc, #72]	; (8007d6c <HAL_SD_IRQHandler+0x308>)
 8007d24:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fa fb0c 	bl	8002348 <HAL_DMA_Abort_IT>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d013      	beq.n	8007d5e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fb83 	bl	8008446 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007d40:	e00d      	b.n	8007d5e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f002 ff58 	bl	800ac0c <HAL_SD_AbortCallback>
}
 8007d5c:	e7ff      	b.n	8007d5e <HAL_SD_IRQHandler+0x2fa>
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	080083d9 	.word	0x080083d9
 8007d6c:	08008447 	.word	0x08008447

08007d70 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d92:	0f9b      	lsrs	r3, r3, #30
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d9e:	0e9b      	lsrs	r3, r3, #26
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	f003 030f 	and.w	r3, r3, #15
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db0:	0e1b      	lsrs	r3, r3, #24
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	f003 0303 	and.w	r3, r3, #3
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc2:	0c1b      	lsrs	r3, r3, #16
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dce:	0a1b      	lsrs	r3, r3, #8
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007de4:	0d1b      	lsrs	r3, r3, #20
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007df0:	0c1b      	lsrs	r3, r3, #16
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	f003 030f 	and.w	r3, r3, #15
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e02:	0bdb      	lsrs	r3, r3, #15
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e14:	0b9b      	lsrs	r3, r3, #14
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e26:	0b5b      	lsrs	r3, r3, #13
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e38:	0b1b      	lsrs	r3, r3, #12
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d163      	bne.n	8007f1c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e58:	009a      	lsls	r2, r3, #2
 8007e5a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e5e:	4013      	ands	r3, r2
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007e64:	0f92      	lsrs	r2, r2, #30
 8007e66:	431a      	orrs	r2, r3
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e70:	0edb      	lsrs	r3, r3, #27
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f003 0307 	and.w	r3, r3, #7
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e82:	0e1b      	lsrs	r3, r3, #24
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e94:	0d5b      	lsrs	r3, r3, #21
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ea6:	0c9b      	lsrs	r3, r3, #18
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eb8:	0bdb      	lsrs	r3, r3, #15
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	7e1b      	ldrb	r3, [r3, #24]
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	f003 0307 	and.w	r3, r3, #7
 8007eda:	3302      	adds	r3, #2
 8007edc:	2201      	movs	r2, #1
 8007ede:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007ee6:	fb02 f203 	mul.w	r2, r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	7a1b      	ldrb	r3, [r3, #8]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 030f 	and.w	r3, r3, #15
 8007ef8:	2201      	movs	r2, #1
 8007efa:	409a      	lsls	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007f08:	0a52      	lsrs	r2, r2, #9
 8007f0a:	fb02 f203 	mul.w	r2, r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f18:	661a      	str	r2, [r3, #96]	; 0x60
 8007f1a:	e031      	b.n	8007f80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d11d      	bne.n	8007f60 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f28:	041b      	lsls	r3, r3, #16
 8007f2a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f32:	0c1b      	lsrs	r3, r3, #16
 8007f34:	431a      	orrs	r2, r3
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	029a      	lsls	r2, r3, #10
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f54:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	661a      	str	r2, [r3, #96]	; 0x60
 8007f5e:	e00f      	b.n	8007f80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a58      	ldr	r2, [pc, #352]	; (80080c8 <HAL_SD_GetCardCSD+0x344>)
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e09d      	b.n	80080bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f84:	0b9b      	lsrs	r3, r3, #14
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f96:	09db      	lsrs	r3, r3, #7
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb8:	0fdb      	lsrs	r3, r3, #31
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc4:	0f5b      	lsrs	r3, r3, #29
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 0303 	and.w	r3, r3, #3
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd6:	0e9b      	lsrs	r3, r3, #26
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	f003 0307 	and.w	r3, r3, #7
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe8:	0d9b      	lsrs	r3, r3, #22
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffa:	0d5b      	lsrs	r3, r3, #21
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	b2da      	uxtb	r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008016:	0c1b      	lsrs	r3, r3, #16
 8008018:	b2db      	uxtb	r3, r3
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	b2da      	uxtb	r2, r3
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802a:	0bdb      	lsrs	r3, r3, #15
 800802c:	b2db      	uxtb	r3, r3
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	b2da      	uxtb	r2, r3
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	0b9b      	lsrs	r3, r3, #14
 8008040:	b2db      	uxtb	r3, r3
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	b2da      	uxtb	r2, r3
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008052:	0b5b      	lsrs	r3, r3, #13
 8008054:	b2db      	uxtb	r3, r3
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	b2da      	uxtb	r2, r3
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008066:	0b1b      	lsrs	r3, r3, #12
 8008068:	b2db      	uxtb	r3, r3
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	b2da      	uxtb	r2, r3
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807a:	0a9b      	lsrs	r3, r3, #10
 800807c:	b2db      	uxtb	r3, r3
 800807e:	f003 0303 	and.w	r3, r3, #3
 8008082:	b2da      	uxtb	r2, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808e:	0a1b      	lsrs	r3, r3, #8
 8008090:	b2db      	uxtb	r3, r3
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	b2da      	uxtb	r2, r3
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a2:	085b      	lsrs	r3, r3, #1
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	004005ff 	.word	0x004005ff

080080cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008124:	b5b0      	push	{r4, r5, r7, lr}
 8008126:	b08e      	sub	sp, #56	; 0x38
 8008128:	af04      	add	r7, sp, #16
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2203      	movs	r2, #3
 8008138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008140:	2b03      	cmp	r3, #3
 8008142:	d02e      	beq.n	80081a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800814a:	d106      	bne.n	800815a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008150:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	639a      	str	r2, [r3, #56]	; 0x38
 8008158:	e029      	b.n	80081ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008160:	d10a      	bne.n	8008178 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fb28 	bl	80087b8 <SD_WideBus_Enable>
 8008168:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	431a      	orrs	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	639a      	str	r2, [r3, #56]	; 0x38
 8008176:	e01a      	b.n	80081ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10a      	bne.n	8008194 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fb65 	bl	800884e <SD_WideBus_Disable>
 8008184:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	431a      	orrs	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	639a      	str	r2, [r3, #56]	; 0x38
 8008192:	e00c      	b.n	80081ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	639a      	str	r2, [r3, #56]	; 0x38
 80081a0:	e005      	b.n	80081ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00b      	beq.n	80081ce <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a26      	ldr	r2, [pc, #152]	; (8008254 <HAL_SD_ConfigWideBusOperation+0x130>)
 80081bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081cc:	e01f      	b.n	800820e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681d      	ldr	r5, [r3, #0]
 80081f4:	466c      	mov	r4, sp
 80081f6:	f107 0314 	add.w	r3, r7, #20
 80081fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80081fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008202:	f107 0308 	add.w	r3, r7, #8
 8008206:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008208:	4628      	mov	r0, r5
 800820a:	f001 fef9 	bl	800a000 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008216:	4618      	mov	r0, r3
 8008218:	f001 ffce 	bl	800a1b8 <SDMMC_CmdBlockLength>
 800821c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00c      	beq.n	800823e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a0a      	ldr	r2, [pc, #40]	; (8008254 <HAL_SD_ConfigWideBusOperation+0x130>)
 800822a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	431a      	orrs	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800824a:	4618      	mov	r0, r3
 800824c:	3728      	adds	r7, #40	; 0x28
 800824e:	46bd      	mov	sp, r7
 8008250:	bdb0      	pop	{r4, r5, r7, pc}
 8008252:	bf00      	nop
 8008254:	004005ff 	.word	0x004005ff

08008258 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008264:	f107 030c 	add.w	r3, r7, #12
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa7c 	bl	8008768 <SD_SendStatus>
 8008270:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d005      	beq.n	8008284 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	431a      	orrs	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	0a5b      	lsrs	r3, r3, #9
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800828e:	693b      	ldr	r3, [r7, #16]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3718      	adds	r7, #24
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d4:	2b82      	cmp	r3, #130	; 0x82
 80082d6:	d111      	bne.n	80082fc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4618      	mov	r0, r3
 80082de:	f002 f815 	bl	800a30c <SDMMC_CmdStopTransfer>
 80082e2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d008      	beq.n	80082fc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	431a      	orrs	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f7ff fd3a 	bl	8007d70 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0208 	bic.w	r2, r2, #8
 800830a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f240 523a 	movw	r2, #1338	; 0x53a
 8008314:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f002 fc85 	bl	800ac34 <HAL_SD_RxCpltCallback>
#endif
}
 800832a:	bf00      	nop
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7fa f9ac 	bl	80026a0 <HAL_DMA_GetError>
 8008348:	4603      	mov	r3, r0
 800834a:	2b02      	cmp	r3, #2
 800834c:	d03e      	beq.n	80083cc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008354:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d002      	beq.n	800836a <SD_DMAError+0x36>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d12d      	bne.n	80083c6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a19      	ldr	r2, [pc, #100]	; (80083d4 <SD_DMAError+0xa0>)
 8008370:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008380:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800838e:	6978      	ldr	r0, [r7, #20]
 8008390:	f7ff ff62 	bl	8008258 <HAL_SD_GetCardState>
 8008394:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b06      	cmp	r3, #6
 800839a:	d002      	beq.n	80083a2 <SD_DMAError+0x6e>
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2b05      	cmp	r3, #5
 80083a0:	d10a      	bne.n	80083b8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f001 ffb0 	bl	800a30c <SDMMC_CmdStopTransfer>
 80083ac:	4602      	mov	r2, r0
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	431a      	orrs	r2, r3
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2200      	movs	r2, #0
 80083c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80083c6:	6978      	ldr	r0, [r7, #20]
 80083c8:	f7ff fcd2 	bl	8007d70 <HAL_SD_ErrorCallback>
#endif
  }
}
 80083cc:	bf00      	nop
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	004005ff 	.word	0x004005ff

080083d8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f240 523a 	movw	r2, #1338	; 0x53a
 80083ee:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f7ff ff31 	bl	8008258 <HAL_SD_GetCardState>
 80083f6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2b06      	cmp	r3, #6
 800840a:	d002      	beq.n	8008412 <SD_DMATxAbort+0x3a>
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2b05      	cmp	r3, #5
 8008410:	d10a      	bne.n	8008428 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4618      	mov	r0, r3
 8008418:	f001 ff78 	bl	800a30c <SDMMC_CmdStopTransfer>
 800841c:	4602      	mov	r2, r0
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008422:	431a      	orrs	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	2b00      	cmp	r3, #0
 800842e:	d103      	bne.n	8008438 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f002 fbeb 	bl	800ac0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008436:	e002      	b.n	800843e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f7ff fc99 	bl	8007d70 <HAL_SD_ErrorCallback>
}
 800843e:	bf00      	nop
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f240 523a 	movw	r2, #1338	; 0x53a
 800845c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f7ff fefa 	bl	8008258 <HAL_SD_GetCardState>
 8008464:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2b06      	cmp	r3, #6
 8008478:	d002      	beq.n	8008480 <SD_DMARxAbort+0x3a>
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2b05      	cmp	r3, #5
 800847e:	d10a      	bne.n	8008496 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f001 ff41 	bl	800a30c <SDMMC_CmdStopTransfer>
 800848a:	4602      	mov	r2, r0
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008490:	431a      	orrs	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849a:	2b00      	cmp	r3, #0
 800849c:	d103      	bne.n	80084a6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f002 fbb4 	bl	800ac0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80084a4:	e002      	b.n	80084ac <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f7ff fc62 	bl	8007d70 <HAL_SD_ErrorCallback>
}
 80084ac:	bf00      	nop
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80084b4:	b5b0      	push	{r4, r5, r7, lr}
 80084b6:	b094      	sub	sp, #80	; 0x50
 80084b8:	af04      	add	r7, sp, #16
 80084ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80084bc:	2301      	movs	r3, #1
 80084be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f001 fdf3 	bl	800a0b0 <SDIO_GetPowerState>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d102      	bne.n	80084d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80084d4:	e0b6      	b.n	8008644 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d02f      	beq.n	800853e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f002 f81c 	bl	800a520 <SDMMC_CmdSendCID>
 80084e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <SD_InitCard+0x40>
    {
      return errorstate;
 80084f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f2:	e0a7      	b.n	8008644 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2100      	movs	r1, #0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f001 fe1d 	bl	800a13a <SDIO_GetResponse>
 8008500:	4602      	mov	r2, r0
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2104      	movs	r1, #4
 800850c:	4618      	mov	r0, r3
 800850e:	f001 fe14 	bl	800a13a <SDIO_GetResponse>
 8008512:	4602      	mov	r2, r0
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2108      	movs	r1, #8
 800851e:	4618      	mov	r0, r3
 8008520:	f001 fe0b 	bl	800a13a <SDIO_GetResponse>
 8008524:	4602      	mov	r2, r0
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	210c      	movs	r1, #12
 8008530:	4618      	mov	r0, r3
 8008532:	f001 fe02 	bl	800a13a <SDIO_GetResponse>
 8008536:	4602      	mov	r2, r0
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008542:	2b03      	cmp	r3, #3
 8008544:	d00d      	beq.n	8008562 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f107 020e 	add.w	r2, r7, #14
 800854e:	4611      	mov	r1, r2
 8008550:	4618      	mov	r0, r3
 8008552:	f002 f822 	bl	800a59a <SDMMC_CmdSetRelAdd>
 8008556:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <SD_InitCard+0xae>
    {
      return errorstate;
 800855e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008560:	e070      	b.n	8008644 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008566:	2b03      	cmp	r3, #3
 8008568:	d036      	beq.n	80085d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800856a:	89fb      	ldrh	r3, [r7, #14]
 800856c:	461a      	mov	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800857a:	041b      	lsls	r3, r3, #16
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f001 ffec 	bl	800a55c <SDMMC_CmdSendCSD>
 8008584:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <SD_InitCard+0xdc>
    {
      return errorstate;
 800858c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800858e:	e059      	b.n	8008644 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2100      	movs	r1, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f001 fdcf 	bl	800a13a <SDIO_GetResponse>
 800859c:	4602      	mov	r2, r0
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2104      	movs	r1, #4
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 fdc6 	bl	800a13a <SDIO_GetResponse>
 80085ae:	4602      	mov	r2, r0
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2108      	movs	r1, #8
 80085ba:	4618      	mov	r0, r3
 80085bc:	f001 fdbd 	bl	800a13a <SDIO_GetResponse>
 80085c0:	4602      	mov	r2, r0
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	210c      	movs	r1, #12
 80085cc:	4618      	mov	r0, r3
 80085ce:	f001 fdb4 	bl	800a13a <SDIO_GetResponse>
 80085d2:	4602      	mov	r2, r0
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2104      	movs	r1, #4
 80085de:	4618      	mov	r0, r3
 80085e0:	f001 fdab 	bl	800a13a <SDIO_GetResponse>
 80085e4:	4603      	mov	r3, r0
 80085e6:	0d1a      	lsrs	r2, r3, #20
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80085ec:	f107 0310 	add.w	r3, r7, #16
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff fbc6 	bl	8007d84 <HAL_SD_GetCardCSD>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d002      	beq.n	8008604 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008602:	e01f      	b.n	8008644 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6819      	ldr	r1, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800860c:	041b      	lsls	r3, r3, #16
 800860e:	461a      	mov	r2, r3
 8008610:	f04f 0300 	mov.w	r3, #0
 8008614:	4608      	mov	r0, r1
 8008616:	f001 fe9b 	bl	800a350 <SDMMC_CmdSelDesel>
 800861a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800861c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <SD_InitCard+0x172>
  {
    return errorstate;
 8008622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008624:	e00e      	b.n	8008644 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681d      	ldr	r5, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	466c      	mov	r4, sp
 800862e:	f103 0210 	add.w	r2, r3, #16
 8008632:	ca07      	ldmia	r2, {r0, r1, r2}
 8008634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008638:	3304      	adds	r3, #4
 800863a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800863c:	4628      	mov	r0, r5
 800863e:	f001 fcdf 	bl	800a000 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3740      	adds	r7, #64	; 0x40
 8008648:	46bd      	mov	sp, r7
 800864a:	bdb0      	pop	{r4, r5, r7, pc}

0800864c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008658:	2300      	movs	r3, #0
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	2300      	movs	r3, #0
 800865e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f001 fe96 	bl	800a396 <SDMMC_CmdGoIdleState>
 800866a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	e072      	b.n	800875c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f001 fea9 	bl	800a3d2 <SDMMC_CmdOperCond>
 8008680:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00d      	beq.n	80086a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4618      	mov	r0, r3
 8008694:	f001 fe7f 	bl	800a396 <SDMMC_CmdGoIdleState>
 8008698:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d004      	beq.n	80086aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	e05b      	b.n	800875c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d137      	bne.n	8008722 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2100      	movs	r1, #0
 80086b8:	4618      	mov	r0, r3
 80086ba:	f001 fea9 	bl	800a410 <SDMMC_CmdAppCommand>
 80086be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d02d      	beq.n	8008722 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086ca:	e047      	b.n	800875c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2100      	movs	r1, #0
 80086d2:	4618      	mov	r0, r3
 80086d4:	f001 fe9c 	bl	800a410 <SDMMC_CmdAppCommand>
 80086d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	e03b      	b.n	800875c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	491e      	ldr	r1, [pc, #120]	; (8008764 <SD_PowerON+0x118>)
 80086ea:	4618      	mov	r0, r3
 80086ec:	f001 feb2 	bl	800a454 <SDMMC_CmdAppOperCommand>
 80086f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086fc:	e02e      	b.n	800875c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2100      	movs	r1, #0
 8008704:	4618      	mov	r0, r3
 8008706:	f001 fd18 	bl	800a13a <SDIO_GetResponse>
 800870a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	0fdb      	lsrs	r3, r3, #31
 8008710:	2b01      	cmp	r3, #1
 8008712:	d101      	bne.n	8008718 <SD_PowerON+0xcc>
 8008714:	2301      	movs	r3, #1
 8008716:	e000      	b.n	800871a <SD_PowerON+0xce>
 8008718:	2300      	movs	r3, #0
 800871a:	613b      	str	r3, [r7, #16]

    count++;
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	3301      	adds	r3, #1
 8008720:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008728:	4293      	cmp	r3, r2
 800872a:	d802      	bhi.n	8008732 <SD_PowerON+0xe6>
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0cc      	beq.n	80086cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008738:	4293      	cmp	r3, r2
 800873a:	d902      	bls.n	8008742 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800873c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008740:	e00c      	b.n	800875c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	645a      	str	r2, [r3, #68]	; 0x44
 8008752:	e002      	b.n	800875a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	c1100000 	.word	0xc1100000

08008768 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d102      	bne.n	800877e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008778:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800877c:	e018      	b.n	80087b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008786:	041b      	lsls	r3, r3, #16
 8008788:	4619      	mov	r1, r3
 800878a:	4610      	mov	r0, r2
 800878c:	f001 ff26 	bl	800a5dc <SDMMC_CmdSendStatus>
 8008790:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	e009      	b.n	80087b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2100      	movs	r1, #0
 80087a2:	4618      	mov	r0, r3
 80087a4:	f001 fcc9 	bl	800a13a <SDIO_GetResponse>
 80087a8:	4602      	mov	r2, r0
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80087c0:	2300      	movs	r3, #0
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	2300      	movs	r3, #0
 80087c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2100      	movs	r1, #0
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 fcb3 	bl	800a13a <SDIO_GetResponse>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087de:	d102      	bne.n	80087e6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80087e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087e4:	e02f      	b.n	8008846 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087e6:	f107 030c 	add.w	r3, r7, #12
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f879 	bl	80088e4 <SD_FindSCR>
 80087f2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	e023      	b.n	8008846 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d01c      	beq.n	8008842 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008810:	041b      	lsls	r3, r3, #16
 8008812:	4619      	mov	r1, r3
 8008814:	4610      	mov	r0, r2
 8008816:	f001 fdfb 	bl	800a410 <SDMMC_CmdAppCommand>
 800881a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	e00f      	b.n	8008846 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2102      	movs	r1, #2
 800882c:	4618      	mov	r0, r3
 800882e:	f001 fe34 	bl	800a49a <SDMMC_CmdBusWidth>
 8008832:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	e003      	b.n	8008846 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800883e:	2300      	movs	r3, #0
 8008840:	e001      	b.n	8008846 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008842:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008846:	4618      	mov	r0, r3
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b086      	sub	sp, #24
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	2300      	movs	r3, #0
 800885c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2100      	movs	r1, #0
 8008864:	4618      	mov	r0, r3
 8008866:	f001 fc68 	bl	800a13a <SDIO_GetResponse>
 800886a:	4603      	mov	r3, r0
 800886c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008870:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008874:	d102      	bne.n	800887c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008876:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800887a:	e02f      	b.n	80088dc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800887c:	f107 030c 	add.w	r3, r7, #12
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f82e 	bl	80088e4 <SD_FindSCR>
 8008888:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	e023      	b.n	80088dc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d01c      	beq.n	80088d8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a6:	041b      	lsls	r3, r3, #16
 80088a8:	4619      	mov	r1, r3
 80088aa:	4610      	mov	r0, r2
 80088ac:	f001 fdb0 	bl	800a410 <SDMMC_CmdAppCommand>
 80088b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	e00f      	b.n	80088dc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2100      	movs	r1, #0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f001 fde9 	bl	800a49a <SDMMC_CmdBusWidth>
 80088c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	e003      	b.n	80088dc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80088d4:	2300      	movs	r3, #0
 80088d6:	e001      	b.n	80088dc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80088e4:	b590      	push	{r4, r7, lr}
 80088e6:	b08f      	sub	sp, #60	; 0x3c
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088ee:	f7f9 faa3 	bl	8001e38 <HAL_GetTick>
 80088f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80088f8:	2300      	movs	r3, #0
 80088fa:	60bb      	str	r3, [r7, #8]
 80088fc:	2300      	movs	r3, #0
 80088fe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2108      	movs	r1, #8
 800890a:	4618      	mov	r0, r3
 800890c:	f001 fc54 	bl	800a1b8 <SDMMC_CmdBlockLength>
 8008910:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008914:	2b00      	cmp	r3, #0
 8008916:	d001      	beq.n	800891c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	e0b2      	b.n	8008a82 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008924:	041b      	lsls	r3, r3, #16
 8008926:	4619      	mov	r1, r3
 8008928:	4610      	mov	r0, r2
 800892a:	f001 fd71 	bl	800a410 <SDMMC_CmdAppCommand>
 800892e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	e0a3      	b.n	8008a82 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800893a:	f04f 33ff 	mov.w	r3, #4294967295
 800893e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008940:	2308      	movs	r3, #8
 8008942:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008944:	2330      	movs	r3, #48	; 0x30
 8008946:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008948:	2302      	movs	r3, #2
 800894a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800894c:	2300      	movs	r3, #0
 800894e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008950:	2301      	movs	r3, #1
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f107 0210 	add.w	r2, r7, #16
 800895c:	4611      	mov	r1, r2
 800895e:	4618      	mov	r0, r3
 8008960:	f001 fbfe 	bl	800a160 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4618      	mov	r0, r3
 800896a:	f001 fdb8 	bl	800a4de <SDMMC_CmdSendSCR>
 800896e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008972:	2b00      	cmp	r3, #0
 8008974:	d02a      	beq.n	80089cc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008978:	e083      	b.n	8008a82 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00f      	beq.n	80089a8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6819      	ldr	r1, [r3, #0]
 800898c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	f107 0208 	add.w	r2, r7, #8
 8008994:	18d4      	adds	r4, r2, r3
 8008996:	4608      	mov	r0, r1
 8008998:	f001 fb5d 	bl	800a056 <SDIO_ReadFIFO>
 800899c:	4603      	mov	r3, r0
 800899e:	6023      	str	r3, [r4, #0]
      index++;
 80089a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a2:	3301      	adds	r3, #1
 80089a4:	637b      	str	r3, [r7, #52]	; 0x34
 80089a6:	e006      	b.n	80089b6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d012      	beq.n	80089dc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089b6:	f7f9 fa3f 	bl	8001e38 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c4:	d102      	bne.n	80089cc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80089c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089ca:	e05a      	b.n	8008a82 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0cf      	beq.n	800897a <SD_FindSCR+0x96>
 80089da:	e000      	b.n	80089de <SD_FindSCR+0xfa>
      break;
 80089dc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e4:	f003 0308 	and.w	r3, r3, #8
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d005      	beq.n	80089f8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2208      	movs	r2, #8
 80089f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80089f4:	2308      	movs	r3, #8
 80089f6:	e044      	b.n	8008a82 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fe:	f003 0302 	and.w	r3, r3, #2
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d005      	beq.n	8008a12 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a0e:	2302      	movs	r3, #2
 8008a10:	e037      	b.n	8008a82 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a18:	f003 0320 	and.w	r3, r3, #32
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d005      	beq.n	8008a2c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2220      	movs	r2, #32
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008a28:	2320      	movs	r3, #32
 8008a2a:	e02a      	b.n	8008a82 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a34:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	061a      	lsls	r2, r3, #24
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a42:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	0a1b      	lsrs	r3, r3, #8
 8008a48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a4c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	0e1b      	lsrs	r3, r3, #24
 8008a52:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a56:	601a      	str	r2, [r3, #0]
    scr++;
 8008a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	061a      	lsls	r2, r3, #24
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	021b      	lsls	r3, r3, #8
 8008a66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a6a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	0a1b      	lsrs	r3, r3, #8
 8008a70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a74:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	0e1b      	lsrs	r3, r3, #24
 8008a7a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	373c      	adds	r7, #60	; 0x3c
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd90      	pop	{r4, r7, pc}

08008a8a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b086      	sub	sp, #24
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a96:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d03f      	beq.n	8008b24 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	e033      	b.n	8008b12 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f001 fad1 	bl	800a056 <SDIO_ReadFIFO>
 8008ab4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	0a1b      	lsrs	r3, r3, #8
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	0c1b      	lsrs	r3, r3, #16
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3301      	adds	r3, #1
 8008aee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	0e1b      	lsrs	r3, r3, #24
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	3301      	adds	r3, #1
 8008b04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	617b      	str	r3, [r7, #20]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2b07      	cmp	r3, #7
 8008b16:	d9c8      	bls.n	8008aaa <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008b24:	bf00      	nop
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a1b      	ldr	r3, [r3, #32]
 8008b38:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d043      	beq.n	8008bce <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008b46:	2300      	movs	r3, #0
 8008b48:	617b      	str	r3, [r7, #20]
 8008b4a:	e037      	b.n	8008bbc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	3301      	adds	r3, #1
 8008b56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	021a      	lsls	r2, r3, #8
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	041a      	lsls	r2, r3, #16
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3301      	adds	r3, #1
 8008b86:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	061a      	lsls	r2, r3, #24
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f107 0208 	add.w	r2, r7, #8
 8008bae:	4611      	mov	r1, r2
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f001 fa5d 	bl	800a070 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	617b      	str	r3, [r7, #20]
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	2b07      	cmp	r3, #7
 8008bc0:	d9c4      	bls.n	8008b4c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008bce:	bf00      	nop
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b082      	sub	sp, #8
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e041      	b.n	8008c6c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d106      	bne.n	8008c02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f839 	bl	8008c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2202      	movs	r2, #2
 8008c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3304      	adds	r3, #4
 8008c12:	4619      	mov	r1, r3
 8008c14:	4610      	mov	r0, r2
 8008c16:	f000 f9d7 	bl	8008fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d001      	beq.n	8008ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e04e      	b.n	8008d3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68da      	ldr	r2, [r3, #12]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f042 0201 	orr.w	r2, r2, #1
 8008cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a23      	ldr	r2, [pc, #140]	; (8008d4c <HAL_TIM_Base_Start_IT+0xc4>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d022      	beq.n	8008d08 <HAL_TIM_Base_Start_IT+0x80>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cca:	d01d      	beq.n	8008d08 <HAL_TIM_Base_Start_IT+0x80>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a1f      	ldr	r2, [pc, #124]	; (8008d50 <HAL_TIM_Base_Start_IT+0xc8>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d018      	beq.n	8008d08 <HAL_TIM_Base_Start_IT+0x80>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a1e      	ldr	r2, [pc, #120]	; (8008d54 <HAL_TIM_Base_Start_IT+0xcc>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d013      	beq.n	8008d08 <HAL_TIM_Base_Start_IT+0x80>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a1c      	ldr	r2, [pc, #112]	; (8008d58 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d00e      	beq.n	8008d08 <HAL_TIM_Base_Start_IT+0x80>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a1b      	ldr	r2, [pc, #108]	; (8008d5c <HAL_TIM_Base_Start_IT+0xd4>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d009      	beq.n	8008d08 <HAL_TIM_Base_Start_IT+0x80>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a19      	ldr	r2, [pc, #100]	; (8008d60 <HAL_TIM_Base_Start_IT+0xd8>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d004      	beq.n	8008d08 <HAL_TIM_Base_Start_IT+0x80>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a18      	ldr	r2, [pc, #96]	; (8008d64 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d111      	bne.n	8008d2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f003 0307 	and.w	r3, r3, #7
 8008d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2b06      	cmp	r3, #6
 8008d18:	d010      	beq.n	8008d3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f042 0201 	orr.w	r2, r2, #1
 8008d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d2a:	e007      	b.n	8008d3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f042 0201 	orr.w	r2, r2, #1
 8008d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	40010000 	.word	0x40010000
 8008d50:	40000400 	.word	0x40000400
 8008d54:	40000800 	.word	0x40000800
 8008d58:	40000c00 	.word	0x40000c00
 8008d5c:	40010400 	.word	0x40010400
 8008d60:	40014000 	.word	0x40014000
 8008d64:	40001800 	.word	0x40001800

08008d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	f003 0302 	and.w	r3, r3, #2
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d122      	bne.n	8008dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d11b      	bne.n	8008dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f06f 0202 	mvn.w	r2, #2
 8008d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	699b      	ldr	r3, [r3, #24]
 8008da2:	f003 0303 	and.w	r3, r3, #3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d003      	beq.n	8008db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f8ee 	bl	8008f8c <HAL_TIM_IC_CaptureCallback>
 8008db0:	e005      	b.n	8008dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f8e0 	bl	8008f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f8f1 	bl	8008fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d122      	bne.n	8008e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	f003 0304 	and.w	r3, r3, #4
 8008ddc:	2b04      	cmp	r3, #4
 8008dde:	d11b      	bne.n	8008e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f06f 0204 	mvn.w	r2, #4
 8008de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2202      	movs	r2, #2
 8008dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d003      	beq.n	8008e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f8c4 	bl	8008f8c <HAL_TIM_IC_CaptureCallback>
 8008e04:	e005      	b.n	8008e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f8b6 	bl	8008f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f8c7 	bl	8008fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	f003 0308 	and.w	r3, r3, #8
 8008e22:	2b08      	cmp	r3, #8
 8008e24:	d122      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f003 0308 	and.w	r3, r3, #8
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d11b      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f06f 0208 	mvn.w	r2, #8
 8008e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2204      	movs	r2, #4
 8008e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	69db      	ldr	r3, [r3, #28]
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f89a 	bl	8008f8c <HAL_TIM_IC_CaptureCallback>
 8008e58:	e005      	b.n	8008e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f88c 	bl	8008f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f89d 	bl	8008fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	f003 0310 	and.w	r3, r3, #16
 8008e76:	2b10      	cmp	r3, #16
 8008e78:	d122      	bne.n	8008ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f003 0310 	and.w	r3, r3, #16
 8008e84:	2b10      	cmp	r3, #16
 8008e86:	d11b      	bne.n	8008ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f06f 0210 	mvn.w	r2, #16
 8008e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2208      	movs	r2, #8
 8008e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f870 	bl	8008f8c <HAL_TIM_IC_CaptureCallback>
 8008eac:	e005      	b.n	8008eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f862 	bl	8008f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f873 	bl	8008fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d10e      	bne.n	8008eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d107      	bne.n	8008eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f06f 0201 	mvn.w	r2, #1
 8008ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7f8 fb26 	bl	8001538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef6:	2b80      	cmp	r3, #128	; 0x80
 8008ef8:	d10e      	bne.n	8008f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f04:	2b80      	cmp	r3, #128	; 0x80
 8008f06:	d107      	bne.n	8008f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f902 	bl	800911c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f22:	2b40      	cmp	r3, #64	; 0x40
 8008f24:	d10e      	bne.n	8008f44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f30:	2b40      	cmp	r3, #64	; 0x40
 8008f32:	d107      	bne.n	8008f44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f838 	bl	8008fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	f003 0320 	and.w	r3, r3, #32
 8008f4e:	2b20      	cmp	r3, #32
 8008f50:	d10e      	bne.n	8008f70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	f003 0320 	and.w	r3, r3, #32
 8008f5c:	2b20      	cmp	r3, #32
 8008f5e:	d107      	bne.n	8008f70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f06f 0220 	mvn.w	r2, #32
 8008f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f8cc 	bl	8009108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a40      	ldr	r2, [pc, #256]	; (80090dc <TIM_Base_SetConfig+0x114>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d013      	beq.n	8009008 <TIM_Base_SetConfig+0x40>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fe6:	d00f      	beq.n	8009008 <TIM_Base_SetConfig+0x40>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a3d      	ldr	r2, [pc, #244]	; (80090e0 <TIM_Base_SetConfig+0x118>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d00b      	beq.n	8009008 <TIM_Base_SetConfig+0x40>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a3c      	ldr	r2, [pc, #240]	; (80090e4 <TIM_Base_SetConfig+0x11c>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d007      	beq.n	8009008 <TIM_Base_SetConfig+0x40>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a3b      	ldr	r2, [pc, #236]	; (80090e8 <TIM_Base_SetConfig+0x120>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d003      	beq.n	8009008 <TIM_Base_SetConfig+0x40>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a3a      	ldr	r2, [pc, #232]	; (80090ec <TIM_Base_SetConfig+0x124>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d108      	bne.n	800901a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800900e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	4313      	orrs	r3, r2
 8009018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a2f      	ldr	r2, [pc, #188]	; (80090dc <TIM_Base_SetConfig+0x114>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d02b      	beq.n	800907a <TIM_Base_SetConfig+0xb2>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009028:	d027      	beq.n	800907a <TIM_Base_SetConfig+0xb2>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a2c      	ldr	r2, [pc, #176]	; (80090e0 <TIM_Base_SetConfig+0x118>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d023      	beq.n	800907a <TIM_Base_SetConfig+0xb2>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a2b      	ldr	r2, [pc, #172]	; (80090e4 <TIM_Base_SetConfig+0x11c>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d01f      	beq.n	800907a <TIM_Base_SetConfig+0xb2>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a2a      	ldr	r2, [pc, #168]	; (80090e8 <TIM_Base_SetConfig+0x120>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d01b      	beq.n	800907a <TIM_Base_SetConfig+0xb2>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a29      	ldr	r2, [pc, #164]	; (80090ec <TIM_Base_SetConfig+0x124>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d017      	beq.n	800907a <TIM_Base_SetConfig+0xb2>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a28      	ldr	r2, [pc, #160]	; (80090f0 <TIM_Base_SetConfig+0x128>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d013      	beq.n	800907a <TIM_Base_SetConfig+0xb2>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a27      	ldr	r2, [pc, #156]	; (80090f4 <TIM_Base_SetConfig+0x12c>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d00f      	beq.n	800907a <TIM_Base_SetConfig+0xb2>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a26      	ldr	r2, [pc, #152]	; (80090f8 <TIM_Base_SetConfig+0x130>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d00b      	beq.n	800907a <TIM_Base_SetConfig+0xb2>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a25      	ldr	r2, [pc, #148]	; (80090fc <TIM_Base_SetConfig+0x134>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d007      	beq.n	800907a <TIM_Base_SetConfig+0xb2>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a24      	ldr	r2, [pc, #144]	; (8009100 <TIM_Base_SetConfig+0x138>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d003      	beq.n	800907a <TIM_Base_SetConfig+0xb2>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a23      	ldr	r2, [pc, #140]	; (8009104 <TIM_Base_SetConfig+0x13c>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d108      	bne.n	800908c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	4313      	orrs	r3, r2
 800908a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	4313      	orrs	r3, r2
 8009098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	689a      	ldr	r2, [r3, #8]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a0a      	ldr	r2, [pc, #40]	; (80090dc <TIM_Base_SetConfig+0x114>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d003      	beq.n	80090c0 <TIM_Base_SetConfig+0xf8>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a0c      	ldr	r2, [pc, #48]	; (80090ec <TIM_Base_SetConfig+0x124>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d103      	bne.n	80090c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	691a      	ldr	r2, [r3, #16]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	615a      	str	r2, [r3, #20]
}
 80090ce:	bf00      	nop
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	40010000 	.word	0x40010000
 80090e0:	40000400 	.word	0x40000400
 80090e4:	40000800 	.word	0x40000800
 80090e8:	40000c00 	.word	0x40000c00
 80090ec:	40010400 	.word	0x40010400
 80090f0:	40014000 	.word	0x40014000
 80090f4:	40014400 	.word	0x40014400
 80090f8:	40014800 	.word	0x40014800
 80090fc:	40001800 	.word	0x40001800
 8009100:	40001c00 	.word	0x40001c00
 8009104:	40002000 	.word	0x40002000

08009108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e03f      	b.n	80091c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d106      	bne.n	800915c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7f8 fc2c 	bl	80019b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2224      	movs	r2, #36	; 0x24
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fd7b 	bl	8009c70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	691a      	ldr	r2, [r3, #16]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	695a      	ldr	r2, [r3, #20]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2220      	movs	r2, #32
 80091b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2220      	movs	r2, #32
 80091bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b08a      	sub	sp, #40	; 0x28
 80091ce:	af02      	add	r7, sp, #8
 80091d0:	60f8      	str	r0, [r7, #12]
 80091d2:	60b9      	str	r1, [r7, #8]
 80091d4:	603b      	str	r3, [r7, #0]
 80091d6:	4613      	mov	r3, r2
 80091d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b20      	cmp	r3, #32
 80091e8:	d17c      	bne.n	80092e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <HAL_UART_Transmit+0x2c>
 80091f0:	88fb      	ldrh	r3, [r7, #6]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e075      	b.n	80092e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009200:	2b01      	cmp	r3, #1
 8009202:	d101      	bne.n	8009208 <HAL_UART_Transmit+0x3e>
 8009204:	2302      	movs	r3, #2
 8009206:	e06e      	b.n	80092e6 <HAL_UART_Transmit+0x11c>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2221      	movs	r2, #33	; 0x21
 800921a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800921e:	f7f8 fe0b 	bl	8001e38 <HAL_GetTick>
 8009222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	88fa      	ldrh	r2, [r7, #6]
 8009228:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	88fa      	ldrh	r2, [r7, #6]
 800922e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009238:	d108      	bne.n	800924c <HAL_UART_Transmit+0x82>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d104      	bne.n	800924c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009242:	2300      	movs	r3, #0
 8009244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	61bb      	str	r3, [r7, #24]
 800924a:	e003      	b.n	8009254 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009250:	2300      	movs	r3, #0
 8009252:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800925c:	e02a      	b.n	80092b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2200      	movs	r2, #0
 8009266:	2180      	movs	r1, #128	; 0x80
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f000 faf9 	bl	8009860 <UART_WaitOnFlagUntilTimeout>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e036      	b.n	80092e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10b      	bne.n	8009296 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800928c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	3302      	adds	r3, #2
 8009292:	61bb      	str	r3, [r7, #24]
 8009294:	e007      	b.n	80092a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	781a      	ldrb	r2, [r3, #0]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	3301      	adds	r3, #1
 80092a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	3b01      	subs	r3, #1
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1cf      	bne.n	800925e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2200      	movs	r2, #0
 80092c6:	2140      	movs	r1, #64	; 0x40
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f000 fac9 	bl	8009860 <UART_WaitOnFlagUntilTimeout>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e006      	b.n	80092e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2220      	movs	r2, #32
 80092dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	e000      	b.n	80092e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80092e4:	2302      	movs	r3, #2
  }
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3720      	adds	r7, #32
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b0ba      	sub	sp, #232	; 0xe8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009316:	2300      	movs	r3, #0
 8009318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800931c:	2300      	movs	r3, #0
 800931e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009326:	f003 030f 	and.w	r3, r3, #15
 800932a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800932e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10f      	bne.n	8009356 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800933a:	f003 0320 	and.w	r3, r3, #32
 800933e:	2b00      	cmp	r3, #0
 8009340:	d009      	beq.n	8009356 <HAL_UART_IRQHandler+0x66>
 8009342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009346:	f003 0320 	and.w	r3, r3, #32
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fbd3 	bl	8009afa <UART_Receive_IT>
      return;
 8009354:	e256      	b.n	8009804 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 80de 	beq.w	800951c <HAL_UART_IRQHandler+0x22c>
 8009360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	2b00      	cmp	r3, #0
 800936a:	d106      	bne.n	800937a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800936c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009370:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 80d1 	beq.w	800951c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800937a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00b      	beq.n	800939e <HAL_UART_IRQHandler+0xae>
 8009386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800938a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800938e:	2b00      	cmp	r3, #0
 8009390:	d005      	beq.n	800939e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009396:	f043 0201 	orr.w	r2, r3, #1
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800939e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093a2:	f003 0304 	and.w	r3, r3, #4
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00b      	beq.n	80093c2 <HAL_UART_IRQHandler+0xd2>
 80093aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d005      	beq.n	80093c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ba:	f043 0202 	orr.w	r2, r3, #2
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00b      	beq.n	80093e6 <HAL_UART_IRQHandler+0xf6>
 80093ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d005      	beq.n	80093e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	f043 0204 	orr.w	r2, r3, #4
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80093e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ea:	f003 0308 	and.w	r3, r3, #8
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d011      	beq.n	8009416 <HAL_UART_IRQHandler+0x126>
 80093f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093f6:	f003 0320 	and.w	r3, r3, #32
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d105      	bne.n	800940a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80093fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	2b00      	cmp	r3, #0
 8009408:	d005      	beq.n	8009416 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940e:	f043 0208 	orr.w	r2, r3, #8
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941a:	2b00      	cmp	r3, #0
 800941c:	f000 81ed 	beq.w	80097fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009424:	f003 0320 	and.w	r3, r3, #32
 8009428:	2b00      	cmp	r3, #0
 800942a:	d008      	beq.n	800943e <HAL_UART_IRQHandler+0x14e>
 800942c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009430:	f003 0320 	and.w	r3, r3, #32
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fb5e 	bl	8009afa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009448:	2b40      	cmp	r3, #64	; 0x40
 800944a:	bf0c      	ite	eq
 800944c:	2301      	moveq	r3, #1
 800944e:	2300      	movne	r3, #0
 8009450:	b2db      	uxtb	r3, r3
 8009452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945a:	f003 0308 	and.w	r3, r3, #8
 800945e:	2b00      	cmp	r3, #0
 8009460:	d103      	bne.n	800946a <HAL_UART_IRQHandler+0x17a>
 8009462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009466:	2b00      	cmp	r3, #0
 8009468:	d04f      	beq.n	800950a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa66 	bl	800993c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800947a:	2b40      	cmp	r3, #64	; 0x40
 800947c:	d141      	bne.n	8009502 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3314      	adds	r3, #20
 8009484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800949c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3314      	adds	r3, #20
 80094a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80094b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80094ba:	e841 2300 	strex	r3, r2, [r1]
 80094be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80094c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1d9      	bne.n	800947e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d013      	beq.n	80094fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d6:	4a7d      	ldr	r2, [pc, #500]	; (80096cc <HAL_UART_IRQHandler+0x3dc>)
 80094d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094de:	4618      	mov	r0, r3
 80094e0:	f7f8 ff32 	bl	8002348 <HAL_DMA_Abort_IT>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d016      	beq.n	8009518 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80094f4:	4610      	mov	r0, r2
 80094f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f8:	e00e      	b.n	8009518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f99a 	bl	8009834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009500:	e00a      	b.n	8009518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f996 	bl	8009834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009508:	e006      	b.n	8009518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f992 	bl	8009834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009516:	e170      	b.n	80097fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009518:	bf00      	nop
    return;
 800951a:	e16e      	b.n	80097fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009520:	2b01      	cmp	r3, #1
 8009522:	f040 814a 	bne.w	80097ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800952a:	f003 0310 	and.w	r3, r3, #16
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 8143 	beq.w	80097ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009538:	f003 0310 	and.w	r3, r3, #16
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 813c 	beq.w	80097ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009542:	2300      	movs	r3, #0
 8009544:	60bb      	str	r3, [r7, #8]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	60bb      	str	r3, [r7, #8]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	60bb      	str	r3, [r7, #8]
 8009556:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009562:	2b40      	cmp	r3, #64	; 0x40
 8009564:	f040 80b4 	bne.w	80096d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009574:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 8140 	beq.w	80097fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009586:	429a      	cmp	r2, r3
 8009588:	f080 8139 	bcs.w	80097fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009592:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800959e:	f000 8088 	beq.w	80096b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	330c      	adds	r3, #12
 80095a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095b0:	e853 3f00 	ldrex	r3, [r3]
 80095b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80095b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	330c      	adds	r3, #12
 80095ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80095ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80095d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80095da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095de:	e841 2300 	strex	r3, r2, [r1]
 80095e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80095e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1d9      	bne.n	80095a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3314      	adds	r3, #20
 80095f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80095fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009600:	f023 0301 	bic.w	r3, r3, #1
 8009604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3314      	adds	r3, #20
 800960e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009612:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009616:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009618:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800961a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1e1      	bne.n	80095ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	3314      	adds	r3, #20
 8009630:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800963a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800963c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3314      	adds	r3, #20
 800964a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800964e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009650:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009652:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009654:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800965c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e3      	bne.n	800962a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2220      	movs	r2, #32
 8009666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	330c      	adds	r3, #12
 8009676:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800967a:	e853 3f00 	ldrex	r3, [r3]
 800967e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009682:	f023 0310 	bic.w	r3, r3, #16
 8009686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	330c      	adds	r3, #12
 8009690:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009694:	65ba      	str	r2, [r7, #88]	; 0x58
 8009696:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009698:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800969a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800969c:	e841 2300 	strex	r3, r2, [r1]
 80096a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e3      	bne.n	8009670 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7f8 fddb 	bl	8002268 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	b29b      	uxth	r3, r3
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f8c0 	bl	8009848 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80096c8:	e099      	b.n	80097fe <HAL_UART_IRQHandler+0x50e>
 80096ca:	bf00      	nop
 80096cc:	08009a03 	.word	0x08009a03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096d8:	b29b      	uxth	r3, r3
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 808b 	beq.w	8009802 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80096ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 8086 	beq.w	8009802 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	330c      	adds	r3, #12
 80096fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009700:	e853 3f00 	ldrex	r3, [r3]
 8009704:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009708:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800970c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	330c      	adds	r3, #12
 8009716:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800971a:	647a      	str	r2, [r7, #68]	; 0x44
 800971c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e3      	bne.n	80096f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3314      	adds	r3, #20
 8009734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	623b      	str	r3, [r7, #32]
   return(result);
 800973e:	6a3b      	ldr	r3, [r7, #32]
 8009740:	f023 0301 	bic.w	r3, r3, #1
 8009744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3314      	adds	r3, #20
 800974e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009752:	633a      	str	r2, [r7, #48]	; 0x30
 8009754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800975a:	e841 2300 	strex	r3, r2, [r1]
 800975e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1e3      	bne.n	800972e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2220      	movs	r2, #32
 800976a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	330c      	adds	r3, #12
 800977a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	e853 3f00 	ldrex	r3, [r3]
 8009782:	60fb      	str	r3, [r7, #12]
   return(result);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f023 0310 	bic.w	r3, r3, #16
 800978a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	330c      	adds	r3, #12
 8009794:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009798:	61fa      	str	r2, [r7, #28]
 800979a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979c:	69b9      	ldr	r1, [r7, #24]
 800979e:	69fa      	ldr	r2, [r7, #28]
 80097a0:	e841 2300 	strex	r3, r2, [r1]
 80097a4:	617b      	str	r3, [r7, #20]
   return(result);
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1e3      	bne.n	8009774 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f848 	bl	8009848 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80097b8:	e023      	b.n	8009802 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80097ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d009      	beq.n	80097da <HAL_UART_IRQHandler+0x4ea>
 80097c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d003      	beq.n	80097da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f929 	bl	8009a2a <UART_Transmit_IT>
    return;
 80097d8:	e014      	b.n	8009804 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80097da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00e      	beq.n	8009804 <HAL_UART_IRQHandler+0x514>
 80097e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d008      	beq.n	8009804 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f969 	bl	8009aca <UART_EndTransmit_IT>
    return;
 80097f8:	e004      	b.n	8009804 <HAL_UART_IRQHandler+0x514>
    return;
 80097fa:	bf00      	nop
 80097fc:	e002      	b.n	8009804 <HAL_UART_IRQHandler+0x514>
      return;
 80097fe:	bf00      	nop
 8009800:	e000      	b.n	8009804 <HAL_UART_IRQHandler+0x514>
      return;
 8009802:	bf00      	nop
  }
}
 8009804:	37e8      	adds	r7, #232	; 0xe8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop

0800980c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b090      	sub	sp, #64	; 0x40
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	603b      	str	r3, [r7, #0]
 800986c:	4613      	mov	r3, r2
 800986e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009870:	e050      	b.n	8009914 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009878:	d04c      	beq.n	8009914 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800987a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800987c:	2b00      	cmp	r3, #0
 800987e:	d007      	beq.n	8009890 <UART_WaitOnFlagUntilTimeout+0x30>
 8009880:	f7f8 fada 	bl	8001e38 <HAL_GetTick>
 8009884:	4602      	mov	r2, r0
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800988c:	429a      	cmp	r2, r3
 800988e:	d241      	bcs.n	8009914 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	330c      	adds	r3, #12
 8009896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	e853 3f00 	ldrex	r3, [r3]
 800989e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	330c      	adds	r3, #12
 80098ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098b0:	637a      	str	r2, [r7, #52]	; 0x34
 80098b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098b8:	e841 2300 	strex	r3, r2, [r1]
 80098bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80098be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1e5      	bne.n	8009890 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3314      	adds	r3, #20
 80098ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	e853 3f00 	ldrex	r3, [r3]
 80098d2:	613b      	str	r3, [r7, #16]
   return(result);
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	f023 0301 	bic.w	r3, r3, #1
 80098da:	63bb      	str	r3, [r7, #56]	; 0x38
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	3314      	adds	r3, #20
 80098e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098e4:	623a      	str	r2, [r7, #32]
 80098e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e8:	69f9      	ldr	r1, [r7, #28]
 80098ea:	6a3a      	ldr	r2, [r7, #32]
 80098ec:	e841 2300 	strex	r3, r2, [r1]
 80098f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1e5      	bne.n	80098c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2220      	movs	r2, #32
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2220      	movs	r2, #32
 8009904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	e00f      	b.n	8009934 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	4013      	ands	r3, r2
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	429a      	cmp	r2, r3
 8009922:	bf0c      	ite	eq
 8009924:	2301      	moveq	r3, #1
 8009926:	2300      	movne	r3, #0
 8009928:	b2db      	uxtb	r3, r3
 800992a:	461a      	mov	r2, r3
 800992c:	79fb      	ldrb	r3, [r7, #7]
 800992e:	429a      	cmp	r2, r3
 8009930:	d09f      	beq.n	8009872 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3740      	adds	r7, #64	; 0x40
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800993c:	b480      	push	{r7}
 800993e:	b095      	sub	sp, #84	; 0x54
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	330c      	adds	r3, #12
 800994a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994e:	e853 3f00 	ldrex	r3, [r3]
 8009952:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009956:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800995a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	330c      	adds	r3, #12
 8009962:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009964:	643a      	str	r2, [r7, #64]	; 0x40
 8009966:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800996a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e5      	bne.n	8009944 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3314      	adds	r3, #20
 800997e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	61fb      	str	r3, [r7, #28]
   return(result);
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	f023 0301 	bic.w	r3, r3, #1
 800998e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	3314      	adds	r3, #20
 8009996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009998:	62fa      	str	r2, [r7, #44]	; 0x2c
 800999a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800999e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e5      	bne.n	8009978 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d119      	bne.n	80099e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	330c      	adds	r3, #12
 80099ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f023 0310 	bic.w	r3, r3, #16
 80099ca:	647b      	str	r3, [r7, #68]	; 0x44
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	330c      	adds	r3, #12
 80099d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099d4:	61ba      	str	r2, [r7, #24]
 80099d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	6979      	ldr	r1, [r7, #20]
 80099da:	69ba      	ldr	r2, [r7, #24]
 80099dc:	e841 2300 	strex	r3, r2, [r1]
 80099e0:	613b      	str	r3, [r7, #16]
   return(result);
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e5      	bne.n	80099b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2220      	movs	r2, #32
 80099ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80099f6:	bf00      	nop
 80099f8:	3754      	adds	r7, #84	; 0x54
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f7ff ff09 	bl	8009834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a22:	bf00      	nop
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b085      	sub	sp, #20
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b21      	cmp	r3, #33	; 0x21
 8009a3c:	d13e      	bne.n	8009abc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a46:	d114      	bne.n	8009a72 <UART_Transmit_IT+0x48>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d110      	bne.n	8009a72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	1c9a      	adds	r2, r3, #2
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	621a      	str	r2, [r3, #32]
 8009a70:	e008      	b.n	8009a84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	1c59      	adds	r1, r3, #1
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	6211      	str	r1, [r2, #32]
 8009a7c:	781a      	ldrb	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	4619      	mov	r1, r3
 8009a92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10f      	bne.n	8009ab8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68da      	ldr	r2, [r3, #12]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009aa6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68da      	ldr	r2, [r3, #12]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ab6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	e000      	b.n	8009abe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009abc:	2302      	movs	r3, #2
  }
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b082      	sub	sp, #8
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ae0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7ff fe8e 	bl	800980c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b08c      	sub	sp, #48	; 0x30
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b22      	cmp	r3, #34	; 0x22
 8009b0c:	f040 80ab 	bne.w	8009c66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b18:	d117      	bne.n	8009b4a <UART_Receive_IT+0x50>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d113      	bne.n	8009b4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b22:	2300      	movs	r3, #0
 8009b24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b42:	1c9a      	adds	r2, r3, #2
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	629a      	str	r2, [r3, #40]	; 0x28
 8009b48:	e026      	b.n	8009b98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b5c:	d007      	beq.n	8009b6e <UART_Receive_IT+0x74>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10a      	bne.n	8009b7c <UART_Receive_IT+0x82>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d106      	bne.n	8009b7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	b2da      	uxtb	r2, r3
 8009b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b78:	701a      	strb	r2, [r3, #0]
 8009b7a:	e008      	b.n	8009b8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	1c5a      	adds	r2, r3, #1
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d15a      	bne.n	8009c62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68da      	ldr	r2, [r3, #12]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f022 0220 	bic.w	r2, r2, #32
 8009bba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68da      	ldr	r2, [r3, #12]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	695a      	ldr	r2, [r3, #20]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f022 0201 	bic.w	r2, r2, #1
 8009bda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2220      	movs	r2, #32
 8009be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d135      	bne.n	8009c58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	330c      	adds	r3, #12
 8009bf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	e853 3f00 	ldrex	r3, [r3]
 8009c00:	613b      	str	r3, [r7, #16]
   return(result);
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	f023 0310 	bic.w	r3, r3, #16
 8009c08:	627b      	str	r3, [r7, #36]	; 0x24
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	330c      	adds	r3, #12
 8009c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c12:	623a      	str	r2, [r7, #32]
 8009c14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c16:	69f9      	ldr	r1, [r7, #28]
 8009c18:	6a3a      	ldr	r2, [r7, #32]
 8009c1a:	e841 2300 	strex	r3, r2, [r1]
 8009c1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1e5      	bne.n	8009bf2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0310 	and.w	r3, r3, #16
 8009c30:	2b10      	cmp	r3, #16
 8009c32:	d10a      	bne.n	8009c4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c34:	2300      	movs	r3, #0
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7ff fdf9 	bl	8009848 <HAL_UARTEx_RxEventCallback>
 8009c56:	e002      	b.n	8009c5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7ff fde1 	bl	8009820 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e002      	b.n	8009c68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	e000      	b.n	8009c68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009c66:	2302      	movs	r3, #2
  }
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3730      	adds	r7, #48	; 0x30
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	b09f      	sub	sp, #124	; 0x7c
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c86:	68d9      	ldr	r1, [r3, #12]
 8009c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	ea40 0301 	orr.w	r3, r0, r1
 8009c90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c94:	689a      	ldr	r2, [r3, #8]
 8009c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	431a      	orrs	r2, r3
 8009c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c9e:	695b      	ldr	r3, [r3, #20]
 8009ca0:	431a      	orrs	r2, r3
 8009ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009cb4:	f021 010c 	bic.w	r1, r1, #12
 8009cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cbe:	430b      	orrs	r3, r1
 8009cc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cce:	6999      	ldr	r1, [r3, #24]
 8009cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	ea40 0301 	orr.w	r3, r0, r1
 8009cd8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	4bc5      	ldr	r3, [pc, #788]	; (8009ff4 <UART_SetConfig+0x384>)
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d004      	beq.n	8009cee <UART_SetConfig+0x7e>
 8009ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	4bc3      	ldr	r3, [pc, #780]	; (8009ff8 <UART_SetConfig+0x388>)
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d103      	bne.n	8009cf6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009cee:	f7fd fabd 	bl	800726c <HAL_RCC_GetPCLK2Freq>
 8009cf2:	6778      	str	r0, [r7, #116]	; 0x74
 8009cf4:	e002      	b.n	8009cfc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009cf6:	f7fd faa5 	bl	8007244 <HAL_RCC_GetPCLK1Freq>
 8009cfa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d04:	f040 80b6 	bne.w	8009e74 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d0a:	461c      	mov	r4, r3
 8009d0c:	f04f 0500 	mov.w	r5, #0
 8009d10:	4622      	mov	r2, r4
 8009d12:	462b      	mov	r3, r5
 8009d14:	1891      	adds	r1, r2, r2
 8009d16:	6439      	str	r1, [r7, #64]	; 0x40
 8009d18:	415b      	adcs	r3, r3
 8009d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8009d1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d20:	1912      	adds	r2, r2, r4
 8009d22:	eb45 0303 	adc.w	r3, r5, r3
 8009d26:	f04f 0000 	mov.w	r0, #0
 8009d2a:	f04f 0100 	mov.w	r1, #0
 8009d2e:	00d9      	lsls	r1, r3, #3
 8009d30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d34:	00d0      	lsls	r0, r2, #3
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	1911      	adds	r1, r2, r4
 8009d3c:	6639      	str	r1, [r7, #96]	; 0x60
 8009d3e:	416b      	adcs	r3, r5
 8009d40:	667b      	str	r3, [r7, #100]	; 0x64
 8009d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	461a      	mov	r2, r3
 8009d48:	f04f 0300 	mov.w	r3, #0
 8009d4c:	1891      	adds	r1, r2, r2
 8009d4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009d50:	415b      	adcs	r3, r3
 8009d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009d5c:	f7f6 faa0 	bl	80002a0 <__aeabi_uldivmod>
 8009d60:	4602      	mov	r2, r0
 8009d62:	460b      	mov	r3, r1
 8009d64:	4ba5      	ldr	r3, [pc, #660]	; (8009ffc <UART_SetConfig+0x38c>)
 8009d66:	fba3 2302 	umull	r2, r3, r3, r2
 8009d6a:	095b      	lsrs	r3, r3, #5
 8009d6c:	011e      	lsls	r6, r3, #4
 8009d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d70:	461c      	mov	r4, r3
 8009d72:	f04f 0500 	mov.w	r5, #0
 8009d76:	4622      	mov	r2, r4
 8009d78:	462b      	mov	r3, r5
 8009d7a:	1891      	adds	r1, r2, r2
 8009d7c:	6339      	str	r1, [r7, #48]	; 0x30
 8009d7e:	415b      	adcs	r3, r3
 8009d80:	637b      	str	r3, [r7, #52]	; 0x34
 8009d82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d86:	1912      	adds	r2, r2, r4
 8009d88:	eb45 0303 	adc.w	r3, r5, r3
 8009d8c:	f04f 0000 	mov.w	r0, #0
 8009d90:	f04f 0100 	mov.w	r1, #0
 8009d94:	00d9      	lsls	r1, r3, #3
 8009d96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d9a:	00d0      	lsls	r0, r2, #3
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	1911      	adds	r1, r2, r4
 8009da2:	65b9      	str	r1, [r7, #88]	; 0x58
 8009da4:	416b      	adcs	r3, r5
 8009da6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	461a      	mov	r2, r3
 8009dae:	f04f 0300 	mov.w	r3, #0
 8009db2:	1891      	adds	r1, r2, r2
 8009db4:	62b9      	str	r1, [r7, #40]	; 0x28
 8009db6:	415b      	adcs	r3, r3
 8009db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009dbe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009dc2:	f7f6 fa6d 	bl	80002a0 <__aeabi_uldivmod>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4b8c      	ldr	r3, [pc, #560]	; (8009ffc <UART_SetConfig+0x38c>)
 8009dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8009dd0:	095b      	lsrs	r3, r3, #5
 8009dd2:	2164      	movs	r1, #100	; 0x64
 8009dd4:	fb01 f303 	mul.w	r3, r1, r3
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	3332      	adds	r3, #50	; 0x32
 8009dde:	4a87      	ldr	r2, [pc, #540]	; (8009ffc <UART_SetConfig+0x38c>)
 8009de0:	fba2 2303 	umull	r2, r3, r2, r3
 8009de4:	095b      	lsrs	r3, r3, #5
 8009de6:	005b      	lsls	r3, r3, #1
 8009de8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009dec:	441e      	add	r6, r3
 8009dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009df0:	4618      	mov	r0, r3
 8009df2:	f04f 0100 	mov.w	r1, #0
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	1894      	adds	r4, r2, r2
 8009dfc:	623c      	str	r4, [r7, #32]
 8009dfe:	415b      	adcs	r3, r3
 8009e00:	627b      	str	r3, [r7, #36]	; 0x24
 8009e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e06:	1812      	adds	r2, r2, r0
 8009e08:	eb41 0303 	adc.w	r3, r1, r3
 8009e0c:	f04f 0400 	mov.w	r4, #0
 8009e10:	f04f 0500 	mov.w	r5, #0
 8009e14:	00dd      	lsls	r5, r3, #3
 8009e16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009e1a:	00d4      	lsls	r4, r2, #3
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	462b      	mov	r3, r5
 8009e20:	1814      	adds	r4, r2, r0
 8009e22:	653c      	str	r4, [r7, #80]	; 0x50
 8009e24:	414b      	adcs	r3, r1
 8009e26:	657b      	str	r3, [r7, #84]	; 0x54
 8009e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	f04f 0300 	mov.w	r3, #0
 8009e32:	1891      	adds	r1, r2, r2
 8009e34:	61b9      	str	r1, [r7, #24]
 8009e36:	415b      	adcs	r3, r3
 8009e38:	61fb      	str	r3, [r7, #28]
 8009e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009e42:	f7f6 fa2d 	bl	80002a0 <__aeabi_uldivmod>
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	4b6c      	ldr	r3, [pc, #432]	; (8009ffc <UART_SetConfig+0x38c>)
 8009e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e50:	095b      	lsrs	r3, r3, #5
 8009e52:	2164      	movs	r1, #100	; 0x64
 8009e54:	fb01 f303 	mul.w	r3, r1, r3
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	00db      	lsls	r3, r3, #3
 8009e5c:	3332      	adds	r3, #50	; 0x32
 8009e5e:	4a67      	ldr	r2, [pc, #412]	; (8009ffc <UART_SetConfig+0x38c>)
 8009e60:	fba2 2303 	umull	r2, r3, r2, r3
 8009e64:	095b      	lsrs	r3, r3, #5
 8009e66:	f003 0207 	and.w	r2, r3, #7
 8009e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4432      	add	r2, r6
 8009e70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e72:	e0b9      	b.n	8009fe8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e76:	461c      	mov	r4, r3
 8009e78:	f04f 0500 	mov.w	r5, #0
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	462b      	mov	r3, r5
 8009e80:	1891      	adds	r1, r2, r2
 8009e82:	6139      	str	r1, [r7, #16]
 8009e84:	415b      	adcs	r3, r3
 8009e86:	617b      	str	r3, [r7, #20]
 8009e88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009e8c:	1912      	adds	r2, r2, r4
 8009e8e:	eb45 0303 	adc.w	r3, r5, r3
 8009e92:	f04f 0000 	mov.w	r0, #0
 8009e96:	f04f 0100 	mov.w	r1, #0
 8009e9a:	00d9      	lsls	r1, r3, #3
 8009e9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ea0:	00d0      	lsls	r0, r2, #3
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	eb12 0804 	adds.w	r8, r2, r4
 8009eaa:	eb43 0905 	adc.w	r9, r3, r5
 8009eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f04f 0100 	mov.w	r1, #0
 8009eb8:	f04f 0200 	mov.w	r2, #0
 8009ebc:	f04f 0300 	mov.w	r3, #0
 8009ec0:	008b      	lsls	r3, r1, #2
 8009ec2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ec6:	0082      	lsls	r2, r0, #2
 8009ec8:	4640      	mov	r0, r8
 8009eca:	4649      	mov	r1, r9
 8009ecc:	f7f6 f9e8 	bl	80002a0 <__aeabi_uldivmod>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4b49      	ldr	r3, [pc, #292]	; (8009ffc <UART_SetConfig+0x38c>)
 8009ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8009eda:	095b      	lsrs	r3, r3, #5
 8009edc:	011e      	lsls	r6, r3, #4
 8009ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f04f 0100 	mov.w	r1, #0
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	1894      	adds	r4, r2, r2
 8009eec:	60bc      	str	r4, [r7, #8]
 8009eee:	415b      	adcs	r3, r3
 8009ef0:	60fb      	str	r3, [r7, #12]
 8009ef2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ef6:	1812      	adds	r2, r2, r0
 8009ef8:	eb41 0303 	adc.w	r3, r1, r3
 8009efc:	f04f 0400 	mov.w	r4, #0
 8009f00:	f04f 0500 	mov.w	r5, #0
 8009f04:	00dd      	lsls	r5, r3, #3
 8009f06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f0a:	00d4      	lsls	r4, r2, #3
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	462b      	mov	r3, r5
 8009f10:	1814      	adds	r4, r2, r0
 8009f12:	64bc      	str	r4, [r7, #72]	; 0x48
 8009f14:	414b      	adcs	r3, r1
 8009f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f04f 0100 	mov.w	r1, #0
 8009f22:	f04f 0200 	mov.w	r2, #0
 8009f26:	f04f 0300 	mov.w	r3, #0
 8009f2a:	008b      	lsls	r3, r1, #2
 8009f2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f30:	0082      	lsls	r2, r0, #2
 8009f32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009f36:	f7f6 f9b3 	bl	80002a0 <__aeabi_uldivmod>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4b2f      	ldr	r3, [pc, #188]	; (8009ffc <UART_SetConfig+0x38c>)
 8009f40:	fba3 1302 	umull	r1, r3, r3, r2
 8009f44:	095b      	lsrs	r3, r3, #5
 8009f46:	2164      	movs	r1, #100	; 0x64
 8009f48:	fb01 f303 	mul.w	r3, r1, r3
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	011b      	lsls	r3, r3, #4
 8009f50:	3332      	adds	r3, #50	; 0x32
 8009f52:	4a2a      	ldr	r2, [pc, #168]	; (8009ffc <UART_SetConfig+0x38c>)
 8009f54:	fba2 2303 	umull	r2, r3, r2, r3
 8009f58:	095b      	lsrs	r3, r3, #5
 8009f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f5e:	441e      	add	r6, r3
 8009f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f62:	4618      	mov	r0, r3
 8009f64:	f04f 0100 	mov.w	r1, #0
 8009f68:	4602      	mov	r2, r0
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	1894      	adds	r4, r2, r2
 8009f6e:	603c      	str	r4, [r7, #0]
 8009f70:	415b      	adcs	r3, r3
 8009f72:	607b      	str	r3, [r7, #4]
 8009f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f78:	1812      	adds	r2, r2, r0
 8009f7a:	eb41 0303 	adc.w	r3, r1, r3
 8009f7e:	f04f 0400 	mov.w	r4, #0
 8009f82:	f04f 0500 	mov.w	r5, #0
 8009f86:	00dd      	lsls	r5, r3, #3
 8009f88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f8c:	00d4      	lsls	r4, r2, #3
 8009f8e:	4622      	mov	r2, r4
 8009f90:	462b      	mov	r3, r5
 8009f92:	eb12 0a00 	adds.w	sl, r2, r0
 8009f96:	eb43 0b01 	adc.w	fp, r3, r1
 8009f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f04f 0100 	mov.w	r1, #0
 8009fa4:	f04f 0200 	mov.w	r2, #0
 8009fa8:	f04f 0300 	mov.w	r3, #0
 8009fac:	008b      	lsls	r3, r1, #2
 8009fae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009fb2:	0082      	lsls	r2, r0, #2
 8009fb4:	4650      	mov	r0, sl
 8009fb6:	4659      	mov	r1, fp
 8009fb8:	f7f6 f972 	bl	80002a0 <__aeabi_uldivmod>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4b0e      	ldr	r3, [pc, #56]	; (8009ffc <UART_SetConfig+0x38c>)
 8009fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8009fc6:	095b      	lsrs	r3, r3, #5
 8009fc8:	2164      	movs	r1, #100	; 0x64
 8009fca:	fb01 f303 	mul.w	r3, r1, r3
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	011b      	lsls	r3, r3, #4
 8009fd2:	3332      	adds	r3, #50	; 0x32
 8009fd4:	4a09      	ldr	r2, [pc, #36]	; (8009ffc <UART_SetConfig+0x38c>)
 8009fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009fda:	095b      	lsrs	r3, r3, #5
 8009fdc:	f003 020f 	and.w	r2, r3, #15
 8009fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4432      	add	r2, r6
 8009fe6:	609a      	str	r2, [r3, #8]
}
 8009fe8:	bf00      	nop
 8009fea:	377c      	adds	r7, #124	; 0x7c
 8009fec:	46bd      	mov	sp, r7
 8009fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff2:	bf00      	nop
 8009ff4:	40011000 	.word	0x40011000
 8009ff8:	40011400 	.word	0x40011400
 8009ffc:	51eb851f 	.word	0x51eb851f

0800a000 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a000:	b084      	sub	sp, #16
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	f107 001c 	add.w	r0, r7, #28
 800a00e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a012:	2300      	movs	r3, #0
 800a014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a016:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a018:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a01a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a01e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a020:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a022:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a026:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a02a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	4313      	orrs	r3, r2
 800a030:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a03a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	431a      	orrs	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	b004      	add	sp, #16
 800a054:	4770      	bx	lr

0800a056 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2203      	movs	r2, #3
 800a09e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a0a0:	2002      	movs	r0, #2
 800a0a2:	f7f7 fed5 	bl	8001e50 <HAL_Delay>
  
  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 0303 	and.w	r3, r3, #3
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a0ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a0f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a0f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a106:	f023 030f 	bic.w	r3, r3, #15
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	431a      	orrs	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	b2db      	uxtb	r3, r3
}
 800a12e:	4618      	mov	r0, r3
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b085      	sub	sp, #20
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	3314      	adds	r3, #20
 800a148:	461a      	mov	r2, r3
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	4413      	add	r3, r2
 800a14e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
}  
 800a154:	4618      	mov	r0, r3
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a186:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a18c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a192:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	4313      	orrs	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	431a      	orrs	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a1aa:	2300      	movs	r3, #0

}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b088      	sub	sp, #32
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a1c6:	2310      	movs	r3, #16
 800a1c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1ca:	2340      	movs	r3, #64	; 0x40
 800a1cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1d8:	f107 0308 	add.w	r3, r7, #8
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7ff ff74 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a1e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1e8:	2110      	movs	r1, #16
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fa44 	bl	800a678 <SDMMC_GetCmdResp1>
 800a1f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1f2:	69fb      	ldr	r3, [r7, #28]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3720      	adds	r7, #32
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b088      	sub	sp, #32
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a20a:	2311      	movs	r3, #17
 800a20c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a20e:	2340      	movs	r3, #64	; 0x40
 800a210:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a212:	2300      	movs	r3, #0
 800a214:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a21a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a21c:	f107 0308 	add.w	r3, r7, #8
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7ff ff52 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a228:	f241 3288 	movw	r2, #5000	; 0x1388
 800a22c:	2111      	movs	r1, #17
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fa22 	bl	800a678 <SDMMC_GetCmdResp1>
 800a234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a236:	69fb      	ldr	r3, [r7, #28]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3720      	adds	r7, #32
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b088      	sub	sp, #32
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a24e:	2312      	movs	r3, #18
 800a250:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a252:	2340      	movs	r3, #64	; 0x40
 800a254:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a256:	2300      	movs	r3, #0
 800a258:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a25a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a25e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a260:	f107 0308 	add.w	r3, r7, #8
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7ff ff30 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a26c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a270:	2112      	movs	r1, #18
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fa00 	bl	800a678 <SDMMC_GetCmdResp1>
 800a278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a27a:	69fb      	ldr	r3, [r7, #28]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3720      	adds	r7, #32
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b088      	sub	sp, #32
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a292:	2318      	movs	r3, #24
 800a294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a296:	2340      	movs	r3, #64	; 0x40
 800a298:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a29a:	2300      	movs	r3, #0
 800a29c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a29e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2a4:	f107 0308 	add.w	r3, r7, #8
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7ff ff0e 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a2b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2b4:	2118      	movs	r1, #24
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f9de 	bl	800a678 <SDMMC_GetCmdResp1>
 800a2bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2be:	69fb      	ldr	r3, [r7, #28]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3720      	adds	r7, #32
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b088      	sub	sp, #32
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a2d6:	2319      	movs	r3, #25
 800a2d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2da:	2340      	movs	r3, #64	; 0x40
 800a2dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2e8:	f107 0308 	add.w	r3, r7, #8
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7ff feec 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a2f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2f8:	2119      	movs	r1, #25
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f9bc 	bl	800a678 <SDMMC_GetCmdResp1>
 800a300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a302:	69fb      	ldr	r3, [r7, #28]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3720      	adds	r7, #32
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b088      	sub	sp, #32
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a314:	2300      	movs	r3, #0
 800a316:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a318:	230c      	movs	r3, #12
 800a31a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a31c:	2340      	movs	r3, #64	; 0x40
 800a31e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a320:	2300      	movs	r3, #0
 800a322:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a328:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a32a:	f107 0308 	add.w	r3, r7, #8
 800a32e:	4619      	mov	r1, r3
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7ff fecb 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a336:	4a05      	ldr	r2, [pc, #20]	; (800a34c <SDMMC_CmdStopTransfer+0x40>)
 800a338:	210c      	movs	r1, #12
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f99c 	bl	800a678 <SDMMC_GetCmdResp1>
 800a340:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a342:	69fb      	ldr	r3, [r7, #28]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3720      	adds	r7, #32
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	05f5e100 	.word	0x05f5e100

0800a350 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b08a      	sub	sp, #40	; 0x28
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a360:	2307      	movs	r3, #7
 800a362:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a364:	2340      	movs	r3, #64	; 0x40
 800a366:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a368:	2300      	movs	r3, #0
 800a36a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a36c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a370:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a372:	f107 0310 	add.w	r3, r7, #16
 800a376:	4619      	mov	r1, r3
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f7ff fea7 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a37e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a382:	2107      	movs	r1, #7
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 f977 	bl	800a678 <SDMMC_GetCmdResp1>
 800a38a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3728      	adds	r7, #40	; 0x28
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b088      	sub	sp, #32
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3b4:	f107 0308 	add.w	r3, r7, #8
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff fe86 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f92d 	bl	800a620 <SDMMC_GetCmdError>
 800a3c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3c8:	69fb      	ldr	r3, [r7, #28]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3720      	adds	r7, #32
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b088      	sub	sp, #32
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a3da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a3de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a3e0:	2308      	movs	r3, #8
 800a3e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3e4:	2340      	movs	r3, #64	; 0x40
 800a3e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3f2:	f107 0308 	add.w	r3, r7, #8
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7ff fe67 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fb24 	bl	800aa4c <SDMMC_GetCmdResp7>
 800a404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a406:	69fb      	ldr	r3, [r7, #28]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3720      	adds	r7, #32
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b088      	sub	sp, #32
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a41e:	2337      	movs	r3, #55	; 0x37
 800a420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a422:	2340      	movs	r3, #64	; 0x40
 800a424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a426:	2300      	movs	r3, #0
 800a428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a42e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a430:	f107 0308 	add.w	r3, r7, #8
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7ff fe48 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a43c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a440:	2137      	movs	r1, #55	; 0x37
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f918 	bl	800a678 <SDMMC_GetCmdResp1>
 800a448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a44a:	69fb      	ldr	r3, [r7, #28]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3720      	adds	r7, #32
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b088      	sub	sp, #32
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a46a:	2329      	movs	r3, #41	; 0x29
 800a46c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a46e:	2340      	movs	r3, #64	; 0x40
 800a470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a472:	2300      	movs	r3, #0
 800a474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a47a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a47c:	f107 0308 	add.w	r3, r7, #8
 800a480:	4619      	mov	r1, r3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7ff fe22 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 fa2b 	bl	800a8e4 <SDMMC_GetCmdResp3>
 800a48e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a490:	69fb      	ldr	r3, [r7, #28]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3720      	adds	r7, #32
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b088      	sub	sp, #32
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a4a8:	2306      	movs	r3, #6
 800a4aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4ac:	2340      	movs	r3, #64	; 0x40
 800a4ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4ba:	f107 0308 	add.w	r3, r7, #8
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7ff fe03 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a4c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4ca:	2106      	movs	r1, #6
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f8d3 	bl	800a678 <SDMMC_GetCmdResp1>
 800a4d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4d4:	69fb      	ldr	r3, [r7, #28]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3720      	adds	r7, #32
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b088      	sub	sp, #32
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a4ea:	2333      	movs	r3, #51	; 0x33
 800a4ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4ee:	2340      	movs	r3, #64	; 0x40
 800a4f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4fc:	f107 0308 	add.w	r3, r7, #8
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7ff fde2 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a508:	f241 3288 	movw	r2, #5000	; 0x1388
 800a50c:	2133      	movs	r1, #51	; 0x33
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f8b2 	bl	800a678 <SDMMC_GetCmdResp1>
 800a514:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a516:	69fb      	ldr	r3, [r7, #28]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3720      	adds	r7, #32
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a528:	2300      	movs	r3, #0
 800a52a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a52c:	2302      	movs	r3, #2
 800a52e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a530:	23c0      	movs	r3, #192	; 0xc0
 800a532:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a534:	2300      	movs	r3, #0
 800a536:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a53c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a53e:	f107 0308 	add.w	r3, r7, #8
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7ff fdc1 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f982 	bl	800a854 <SDMMC_GetCmdResp2>
 800a550:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a552:	69fb      	ldr	r3, [r7, #28]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3720      	adds	r7, #32
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a56a:	2309      	movs	r3, #9
 800a56c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a56e:	23c0      	movs	r3, #192	; 0xc0
 800a570:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a572:	2300      	movs	r3, #0
 800a574:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a57a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a57c:	f107 0308 	add.w	r3, r7, #8
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff fda2 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 f963 	bl	800a854 <SDMMC_GetCmdResp2>
 800a58e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a590:	69fb      	ldr	r3, [r7, #28]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3720      	adds	r7, #32
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b088      	sub	sp, #32
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5ac:	2340      	movs	r3, #64	; 0x40
 800a5ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5ba:	f107 0308 	add.w	r3, r7, #8
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff fd83 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a5c6:	683a      	ldr	r2, [r7, #0]
 800a5c8:	2103      	movs	r1, #3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f9c8 	bl	800a960 <SDMMC_GetCmdResp6>
 800a5d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5d2:	69fb      	ldr	r3, [r7, #28]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3720      	adds	r7, #32
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a5ea:	230d      	movs	r3, #13
 800a5ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5ee:	2340      	movs	r3, #64	; 0x40
 800a5f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5fc:	f107 0308 	add.w	r3, r7, #8
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7ff fd62 	bl	800a0cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a608:	f241 3288 	movw	r2, #5000	; 0x1388
 800a60c:	210d      	movs	r1, #13
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f832 	bl	800a678 <SDMMC_GetCmdResp1>
 800a614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a616:	69fb      	ldr	r3, [r7, #28]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3720      	adds	r7, #32
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a628:	4b11      	ldr	r3, [pc, #68]	; (800a670 <SDMMC_GetCmdError+0x50>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a11      	ldr	r2, [pc, #68]	; (800a674 <SDMMC_GetCmdError+0x54>)
 800a62e:	fba2 2303 	umull	r2, r3, r2, r3
 800a632:	0a5b      	lsrs	r3, r3, #9
 800a634:	f241 3288 	movw	r2, #5000	; 0x1388
 800a638:	fb02 f303 	mul.w	r3, r2, r3
 800a63c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	1e5a      	subs	r2, r3, #1
 800a642:	60fa      	str	r2, [r7, #12]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d102      	bne.n	800a64e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a648:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a64c:	e009      	b.n	800a662 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a656:	2b00      	cmp	r3, #0
 800a658:	d0f1      	beq.n	800a63e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	22c5      	movs	r2, #197	; 0xc5
 800a65e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	20000010 	.word	0x20000010
 800a674:	10624dd3 	.word	0x10624dd3

0800a678 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b088      	sub	sp, #32
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	460b      	mov	r3, r1
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a686:	4b70      	ldr	r3, [pc, #448]	; (800a848 <SDMMC_GetCmdResp1+0x1d0>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a70      	ldr	r2, [pc, #448]	; (800a84c <SDMMC_GetCmdResp1+0x1d4>)
 800a68c:	fba2 2303 	umull	r2, r3, r2, r3
 800a690:	0a5a      	lsrs	r2, r3, #9
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	fb02 f303 	mul.w	r3, r2, r3
 800a698:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	1e5a      	subs	r2, r3, #1
 800a69e:	61fa      	str	r2, [r7, #28]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d102      	bne.n	800a6aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6a8:	e0c9      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d0ef      	beq.n	800a69a <SDMMC_GetCmdResp1+0x22>
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1ea      	bne.n	800a69a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c8:	f003 0304 	and.w	r3, r3, #4
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d004      	beq.n	800a6da <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2204      	movs	r2, #4
 800a6d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6d6:	2304      	movs	r3, #4
 800a6d8:	e0b1      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6de:	f003 0301 	and.w	r3, r3, #1
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d004      	beq.n	800a6f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e0a6      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	22c5      	movs	r2, #197	; 0xc5
 800a6f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7ff fd12 	bl	800a120 <SDIO_GetCommandResponse>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	461a      	mov	r2, r3
 800a700:	7afb      	ldrb	r3, [r7, #11]
 800a702:	4293      	cmp	r3, r2
 800a704:	d001      	beq.n	800a70a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a706:	2301      	movs	r3, #1
 800a708:	e099      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a70a:	2100      	movs	r1, #0
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f7ff fd14 	bl	800a13a <SDIO_GetResponse>
 800a712:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	4b4e      	ldr	r3, [pc, #312]	; (800a850 <SDMMC_GetCmdResp1+0x1d8>)
 800a718:	4013      	ands	r3, r2
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a71e:	2300      	movs	r3, #0
 800a720:	e08d      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	2b00      	cmp	r3, #0
 800a726:	da02      	bge.n	800a72e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a728:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a72c:	e087      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a738:	2340      	movs	r3, #64	; 0x40
 800a73a:	e080      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a742:	2b00      	cmp	r3, #0
 800a744:	d001      	beq.n	800a74a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a746:	2380      	movs	r3, #128	; 0x80
 800a748:	e079      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a754:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a758:	e071      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a764:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a768:	e069      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d002      	beq.n	800a77a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a778:	e061      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a780:	2b00      	cmp	r3, #0
 800a782:	d002      	beq.n	800a78a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a784:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a788:	e059      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a798:	e051      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d002      	beq.n	800a7aa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a7a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a7a8:	e049      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d002      	beq.n	800a7ba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a7b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a7b8:	e041      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d002      	beq.n	800a7ca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a7c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7c8:	e039      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d002      	beq.n	800a7da <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a7d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a7d8:	e031      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d002      	beq.n	800a7ea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a7e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a7e8:	e029      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d002      	beq.n	800a7fa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a7f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a7f8:	e021      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a800:	2b00      	cmp	r3, #0
 800a802:	d002      	beq.n	800a80a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a804:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a808:	e019      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a814:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a818:	e011      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a824:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a828:	e009      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	f003 0308 	and.w	r3, r3, #8
 800a830:	2b00      	cmp	r3, #0
 800a832:	d002      	beq.n	800a83a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a834:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a838:	e001      	b.n	800a83e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a83a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3720      	adds	r7, #32
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	20000010 	.word	0x20000010
 800a84c:	10624dd3 	.word	0x10624dd3
 800a850:	fdffe008 	.word	0xfdffe008

0800a854 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a85c:	4b1f      	ldr	r3, [pc, #124]	; (800a8dc <SDMMC_GetCmdResp2+0x88>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a1f      	ldr	r2, [pc, #124]	; (800a8e0 <SDMMC_GetCmdResp2+0x8c>)
 800a862:	fba2 2303 	umull	r2, r3, r2, r3
 800a866:	0a5b      	lsrs	r3, r3, #9
 800a868:	f241 3288 	movw	r2, #5000	; 0x1388
 800a86c:	fb02 f303 	mul.w	r3, r2, r3
 800a870:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	1e5a      	subs	r2, r3, #1
 800a876:	60fa      	str	r2, [r7, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d102      	bne.n	800a882 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a87c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a880:	e026      	b.n	800a8d0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a886:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d0ef      	beq.n	800a872 <SDMMC_GetCmdResp2+0x1e>
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1ea      	bne.n	800a872 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a0:	f003 0304 	and.w	r3, r3, #4
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d004      	beq.n	800a8b2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2204      	movs	r2, #4
 800a8ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a8ae:	2304      	movs	r3, #4
 800a8b0:	e00e      	b.n	800a8d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b6:	f003 0301 	and.w	r3, r3, #1
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d004      	beq.n	800a8c8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e003      	b.n	800a8d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	22c5      	movs	r2, #197	; 0xc5
 800a8cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	20000010 	.word	0x20000010
 800a8e0:	10624dd3 	.word	0x10624dd3

0800a8e4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a8ec:	4b1a      	ldr	r3, [pc, #104]	; (800a958 <SDMMC_GetCmdResp3+0x74>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a1a      	ldr	r2, [pc, #104]	; (800a95c <SDMMC_GetCmdResp3+0x78>)
 800a8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8f6:	0a5b      	lsrs	r3, r3, #9
 800a8f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8fc:	fb02 f303 	mul.w	r3, r2, r3
 800a900:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	1e5a      	subs	r2, r3, #1
 800a906:	60fa      	str	r2, [r7, #12]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d102      	bne.n	800a912 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a90c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a910:	e01b      	b.n	800a94a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a916:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d0ef      	beq.n	800a902 <SDMMC_GetCmdResp3+0x1e>
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1ea      	bne.n	800a902 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a930:	f003 0304 	and.w	r3, r3, #4
 800a934:	2b00      	cmp	r3, #0
 800a936:	d004      	beq.n	800a942 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2204      	movs	r2, #4
 800a93c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a93e:	2304      	movs	r3, #4
 800a940:	e003      	b.n	800a94a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	22c5      	movs	r2, #197	; 0xc5
 800a946:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	20000010 	.word	0x20000010
 800a95c:	10624dd3 	.word	0x10624dd3

0800a960 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b088      	sub	sp, #32
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	460b      	mov	r3, r1
 800a96a:	607a      	str	r2, [r7, #4]
 800a96c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a96e:	4b35      	ldr	r3, [pc, #212]	; (800aa44 <SDMMC_GetCmdResp6+0xe4>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a35      	ldr	r2, [pc, #212]	; (800aa48 <SDMMC_GetCmdResp6+0xe8>)
 800a974:	fba2 2303 	umull	r2, r3, r2, r3
 800a978:	0a5b      	lsrs	r3, r3, #9
 800a97a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a97e:	fb02 f303 	mul.w	r3, r2, r3
 800a982:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	1e5a      	subs	r2, r3, #1
 800a988:	61fa      	str	r2, [r7, #28]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d102      	bne.n	800a994 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a98e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a992:	e052      	b.n	800aa3a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a998:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d0ef      	beq.n	800a984 <SDMMC_GetCmdResp6+0x24>
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1ea      	bne.n	800a984 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b2:	f003 0304 	and.w	r3, r3, #4
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d004      	beq.n	800a9c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2204      	movs	r2, #4
 800a9be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9c0:	2304      	movs	r3, #4
 800a9c2:	e03a      	b.n	800aa3a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d004      	beq.n	800a9da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e02f      	b.n	800aa3a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f7ff fba0 	bl	800a120 <SDIO_GetCommandResponse>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	7afb      	ldrb	r3, [r7, #11]
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d001      	beq.n	800a9ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e025      	b.n	800aa3a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	22c5      	movs	r2, #197	; 0xc5
 800a9f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f7ff fb9f 	bl	800a13a <SDIO_GetResponse>
 800a9fc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d106      	bne.n	800aa16 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	0c1b      	lsrs	r3, r3, #16
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800aa12:	2300      	movs	r3, #0
 800aa14:	e011      	b.n	800aa3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aa20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa24:	e009      	b.n	800aa3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aa30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa34:	e001      	b.n	800aa3a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aa36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3720      	adds	r7, #32
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20000010 	.word	0x20000010
 800aa48:	10624dd3 	.word	0x10624dd3

0800aa4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa54:	4b22      	ldr	r3, [pc, #136]	; (800aae0 <SDMMC_GetCmdResp7+0x94>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a22      	ldr	r2, [pc, #136]	; (800aae4 <SDMMC_GetCmdResp7+0x98>)
 800aa5a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5e:	0a5b      	lsrs	r3, r3, #9
 800aa60:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa64:	fb02 f303 	mul.w	r3, r2, r3
 800aa68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	1e5a      	subs	r2, r3, #1
 800aa6e:	60fa      	str	r2, [r7, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d102      	bne.n	800aa7a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa78:	e02c      	b.n	800aad4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d0ef      	beq.n	800aa6a <SDMMC_GetCmdResp7+0x1e>
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1ea      	bne.n	800aa6a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa98:	f003 0304 	and.w	r3, r3, #4
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d004      	beq.n	800aaaa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2204      	movs	r2, #4
 800aaa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aaa6:	2304      	movs	r3, #4
 800aaa8:	e014      	b.n	800aad4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d004      	beq.n	800aac0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e009      	b.n	800aad4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2240      	movs	r2, #64	; 0x40
 800aad0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aad2:	2300      	movs	r3, #0
  
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3714      	adds	r7, #20
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr
 800aae0:	20000010 	.word	0x20000010
 800aae4:	10624dd3 	.word	0x10624dd3

0800aae8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aaec:	4904      	ldr	r1, [pc, #16]	; (800ab00 <MX_FATFS_Init+0x18>)
 800aaee:	4805      	ldr	r0, [pc, #20]	; (800ab04 <MX_FATFS_Init+0x1c>)
 800aaf0:	f004 fcdc 	bl	800f4ac <FATFS_LinkDriver>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	4b03      	ldr	r3, [pc, #12]	; (800ab08 <MX_FATFS_Init+0x20>)
 800aafa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aafc:	bf00      	nop
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	2000d3b4 	.word	0x2000d3b4
 800ab04:	0804dd2c 	.word	0x0804dd2c
 800ab08:	2000d3b0 	.word	0x2000d3b0

0800ab0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ab10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ab26:	f000 f896 	bl	800ac56 <BSP_SD_IsDetected>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d001      	beq.n	800ab34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e012      	b.n	800ab5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ab34:	480b      	ldr	r0, [pc, #44]	; (800ab64 <BSP_SD_Init+0x48>)
 800ab36:	f7fc fd1f 	bl	8007578 <HAL_SD_Init>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ab3e:	79fb      	ldrb	r3, [r7, #7]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d109      	bne.n	800ab58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ab44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab48:	4806      	ldr	r0, [pc, #24]	; (800ab64 <BSP_SD_Init+0x48>)
 800ab4a:	f7fd faeb 	bl	8008124 <HAL_SD_ConfigWideBusOperation>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d001      	beq.n	800ab58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ab58:	79fb      	ldrb	r3, [r7, #7]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	2000d008 	.word	0x2000d008

0800ab68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ab74:	2300      	movs	r3, #0
 800ab76:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	68f9      	ldr	r1, [r7, #12]
 800ab7e:	4806      	ldr	r0, [pc, #24]	; (800ab98 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ab80:	f7fc fda8 	bl	80076d4 <HAL_SD_ReadBlocks_DMA>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d001      	beq.n	800ab8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ab8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3718      	adds	r7, #24
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	2000d008 	.word	0x2000d008

0800ab9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b086      	sub	sp, #24
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	68f9      	ldr	r1, [r7, #12]
 800abb2:	4806      	ldr	r0, [pc, #24]	; (800abcc <BSP_SD_WriteBlocks_DMA+0x30>)
 800abb4:	f7fc fe70 	bl	8007898 <HAL_SD_WriteBlocks_DMA>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d001      	beq.n	800abc2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800abc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	2000d008 	.word	0x2000d008

0800abd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800abd4:	4805      	ldr	r0, [pc, #20]	; (800abec <BSP_SD_GetCardState+0x1c>)
 800abd6:	f7fd fb3f 	bl	8008258 <HAL_SD_GetCardState>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b04      	cmp	r3, #4
 800abde:	bf14      	ite	ne
 800abe0:	2301      	movne	r3, #1
 800abe2:	2300      	moveq	r3, #0
 800abe4:	b2db      	uxtb	r3, r3
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	2000d008 	.word	0x2000d008

0800abf0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800abf8:	6879      	ldr	r1, [r7, #4]
 800abfa:	4803      	ldr	r0, [pc, #12]	; (800ac08 <BSP_SD_GetCardInfo+0x18>)
 800abfc:	f7fd fa66 	bl	80080cc <HAL_SD_GetCardInfo>
}
 800ac00:	bf00      	nop
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	2000d008 	.word	0x2000d008

0800ac0c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ac14:	f000 f818 	bl	800ac48 <BSP_SD_AbortCallback>
}
 800ac18:	bf00      	nop
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ac28:	f000 f9a8 	bl	800af7c <BSP_SD_WriteCpltCallback>
}
 800ac2c:	bf00      	nop
 800ac2e:	3708      	adds	r7, #8
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ac3c:	f000 f9ac 	bl	800af98 <BSP_SD_ReadCpltCallback>
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	af00      	add	r7, sp, #0

}
 800ac4c:	bf00      	nop
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b083      	sub	sp, #12
 800ac5a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800ac60:	79fb      	ldrb	r3, [r7, #7]
 800ac62:	b2db      	uxtb	r3, r3
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ac78:	f004 fd99 	bl	800f7ae <osKernelSysTick>
 800ac7c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ac7e:	e006      	b.n	800ac8e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ac80:	f7ff ffa6 	bl	800abd0 <BSP_SD_GetCardState>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d101      	bne.n	800ac8e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	e009      	b.n	800aca2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ac8e:	f004 fd8e 	bl	800f7ae <osKernelSysTick>
 800ac92:	4602      	mov	r2, r0
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d8f0      	bhi.n	800ac80 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ac9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	4603      	mov	r3, r0
 800acb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800acb6:	4b0b      	ldr	r3, [pc, #44]	; (800ace4 <SD_CheckStatus+0x38>)
 800acb8:	2201      	movs	r2, #1
 800acba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800acbc:	f7ff ff88 	bl	800abd0 <BSP_SD_GetCardState>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d107      	bne.n	800acd6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800acc6:	4b07      	ldr	r3, [pc, #28]	; (800ace4 <SD_CheckStatus+0x38>)
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	b2db      	uxtb	r3, r3
 800accc:	f023 0301 	bic.w	r3, r3, #1
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	4b04      	ldr	r3, [pc, #16]	; (800ace4 <SD_CheckStatus+0x38>)
 800acd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800acd6:	4b03      	ldr	r3, [pc, #12]	; (800ace4 <SD_CheckStatus+0x38>)
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	b2db      	uxtb	r3, r3
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3708      	adds	r7, #8
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	20000019 	.word	0x20000019

0800ace8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ace8:	b590      	push	{r4, r7, lr}
 800acea:	b087      	sub	sp, #28
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800acf2:	4b20      	ldr	r3, [pc, #128]	; (800ad74 <SD_initialize+0x8c>)
 800acf4:	2201      	movs	r2, #1
 800acf6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800acf8:	f004 fd4d 	bl	800f796 <osKernelRunning>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d030      	beq.n	800ad64 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ad02:	f7ff ff0b 	bl	800ab1c <BSP_SD_Init>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d107      	bne.n	800ad1c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ad0c:	79fb      	ldrb	r3, [r7, #7]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7ff ffcc 	bl	800acac <SD_CheckStatus>
 800ad14:	4603      	mov	r3, r0
 800ad16:	461a      	mov	r2, r3
 800ad18:	4b16      	ldr	r3, [pc, #88]	; (800ad74 <SD_initialize+0x8c>)
 800ad1a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ad1c:	4b15      	ldr	r3, [pc, #84]	; (800ad74 <SD_initialize+0x8c>)
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d01e      	beq.n	800ad64 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ad26:	4b14      	ldr	r3, [pc, #80]	; (800ad78 <SD_initialize+0x90>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10e      	bne.n	800ad4c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ad2e:	4b13      	ldr	r3, [pc, #76]	; (800ad7c <SD_initialize+0x94>)
 800ad30:	f107 0408 	add.w	r4, r7, #8
 800ad34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ad3a:	f107 0308 	add.w	r3, r7, #8
 800ad3e:	2100      	movs	r1, #0
 800ad40:	4618      	mov	r0, r3
 800ad42:	f004 ff0a 	bl	800fb5a <osMessageCreate>
 800ad46:	4603      	mov	r3, r0
 800ad48:	4a0b      	ldr	r2, [pc, #44]	; (800ad78 <SD_initialize+0x90>)
 800ad4a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ad4c:	4b0a      	ldr	r3, [pc, #40]	; (800ad78 <SD_initialize+0x90>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d107      	bne.n	800ad64 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800ad54:	4b07      	ldr	r3, [pc, #28]	; (800ad74 <SD_initialize+0x8c>)
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	f043 0301 	orr.w	r3, r3, #1
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	4b04      	ldr	r3, [pc, #16]	; (800ad74 <SD_initialize+0x8c>)
 800ad62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ad64:	4b03      	ldr	r3, [pc, #12]	; (800ad74 <SD_initialize+0x8c>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	b2db      	uxtb	r3, r3
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	371c      	adds	r7, #28
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd90      	pop	{r4, r7, pc}
 800ad72:	bf00      	nop
 800ad74:	20000019 	.word	0x20000019
 800ad78:	20000b24 	.word	0x20000b24
 800ad7c:	08021000 	.word	0x08021000

0800ad80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	4603      	mov	r3, r0
 800ad88:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ad8a:	79fb      	ldrb	r3, [r7, #7]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7ff ff8d 	bl	800acac <SD_CheckStatus>
 800ad92:	4603      	mov	r3, r0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08a      	sub	sp, #40	; 0x28
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60b9      	str	r1, [r7, #8]
 800ada4:	607a      	str	r2, [r7, #4]
 800ada6:	603b      	str	r3, [r7, #0]
 800ada8:	4603      	mov	r3, r0
 800adaa:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800adb2:	f247 5030 	movw	r0, #30000	; 0x7530
 800adb6:	f7ff ff5b 	bl	800ac70 <SD_CheckStatusWithTimeout>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	da02      	bge.n	800adc6 <SD_read+0x2a>
  {
    return res;
 800adc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adc4:	e032      	b.n	800ae2c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	6879      	ldr	r1, [r7, #4]
 800adca:	68b8      	ldr	r0, [r7, #8]
 800adcc:	f7ff fecc 	bl	800ab68 <BSP_SD_ReadBlocks_DMA>
 800add0:	4603      	mov	r3, r0
 800add2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800add6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800adda:	2b00      	cmp	r3, #0
 800addc:	d124      	bne.n	800ae28 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800adde:	4b15      	ldr	r3, [pc, #84]	; (800ae34 <SD_read+0x98>)
 800ade0:	6819      	ldr	r1, [r3, #0]
 800ade2:	f107 0314 	add.w	r3, r7, #20
 800ade6:	f247 5230 	movw	r2, #30000	; 0x7530
 800adea:	4618      	mov	r0, r3
 800adec:	f004 ff1e 	bl	800fc2c <osMessageGet>

    if (event.status == osEventMessage)
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	2b10      	cmp	r3, #16
 800adf4:	d118      	bne.n	800ae28 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d115      	bne.n	800ae28 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800adfc:	f004 fcd7 	bl	800f7ae <osKernelSysTick>
 800ae00:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ae02:	e008      	b.n	800ae16 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ae04:	f7ff fee4 	bl	800abd0 <BSP_SD_GetCardState>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d103      	bne.n	800ae16 <SD_read+0x7a>
              {
                res = RES_OK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ae14:	e008      	b.n	800ae28 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ae16:	f004 fcca 	bl	800f7ae <osKernelSysTick>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	6a3b      	ldr	r3, [r7, #32]
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	f247 522f 	movw	r2, #29999	; 0x752f
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d9ed      	bls.n	800ae04 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ae28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3728      	adds	r7, #40	; 0x28
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	20000b24 	.word	0x20000b24

0800ae38 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b08a      	sub	sp, #40	; 0x28
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60b9      	str	r1, [r7, #8]
 800ae40:	607a      	str	r2, [r7, #4]
 800ae42:	603b      	str	r3, [r7, #0]
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ae4e:	f247 5030 	movw	r0, #30000	; 0x7530
 800ae52:	f7ff ff0d 	bl	800ac70 <SD_CheckStatusWithTimeout>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	da02      	bge.n	800ae62 <SD_write+0x2a>
  {
    return res;
 800ae5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae60:	e02e      	b.n	800aec0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	6879      	ldr	r1, [r7, #4]
 800ae66:	68b8      	ldr	r0, [r7, #8]
 800ae68:	f7ff fe98 	bl	800ab9c <BSP_SD_WriteBlocks_DMA>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d124      	bne.n	800aebc <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ae72:	4b15      	ldr	r3, [pc, #84]	; (800aec8 <SD_write+0x90>)
 800ae74:	6819      	ldr	r1, [r3, #0]
 800ae76:	f107 0314 	add.w	r3, r7, #20
 800ae7a:	f247 5230 	movw	r2, #30000	; 0x7530
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f004 fed4 	bl	800fc2c <osMessageGet>

    if (event.status == osEventMessage)
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	2b10      	cmp	r3, #16
 800ae88:	d118      	bne.n	800aebc <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d115      	bne.n	800aebc <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800ae90:	f004 fc8d 	bl	800f7ae <osKernelSysTick>
 800ae94:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ae96:	e008      	b.n	800aeaa <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ae98:	f7ff fe9a 	bl	800abd0 <BSP_SD_GetCardState>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d103      	bne.n	800aeaa <SD_write+0x72>
          {
            res = RES_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800aea8:	e008      	b.n	800aebc <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800aeaa:	f004 fc80 	bl	800f7ae <osKernelSysTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	6a3b      	ldr	r3, [r7, #32]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	f247 522f 	movw	r2, #29999	; 0x752f
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d9ed      	bls.n	800ae98 <SD_write+0x60>
    }

  }
#endif

  return res;
 800aebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3728      	adds	r7, #40	; 0x28
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	20000b24 	.word	0x20000b24

0800aecc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08c      	sub	sp, #48	; 0x30
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	4603      	mov	r3, r0
 800aed4:	603a      	str	r2, [r7, #0]
 800aed6:	71fb      	strb	r3, [r7, #7]
 800aed8:	460b      	mov	r3, r1
 800aeda:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aee2:	4b25      	ldr	r3, [pc, #148]	; (800af78 <SD_ioctl+0xac>)
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	f003 0301 	and.w	r3, r3, #1
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d001      	beq.n	800aef4 <SD_ioctl+0x28>
 800aef0:	2303      	movs	r3, #3
 800aef2:	e03c      	b.n	800af6e <SD_ioctl+0xa2>

  switch (cmd)
 800aef4:	79bb      	ldrb	r3, [r7, #6]
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	d834      	bhi.n	800af64 <SD_ioctl+0x98>
 800aefa:	a201      	add	r2, pc, #4	; (adr r2, 800af00 <SD_ioctl+0x34>)
 800aefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af00:	0800af11 	.word	0x0800af11
 800af04:	0800af19 	.word	0x0800af19
 800af08:	0800af31 	.word	0x0800af31
 800af0c:	0800af4b 	.word	0x0800af4b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800af10:	2300      	movs	r3, #0
 800af12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af16:	e028      	b.n	800af6a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800af18:	f107 030c 	add.w	r3, r7, #12
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7ff fe67 	bl	800abf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800af22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af2e:	e01c      	b.n	800af6a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af30:	f107 030c 	add.w	r3, r7, #12
 800af34:	4618      	mov	r0, r3
 800af36:	f7ff fe5b 	bl	800abf0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800af3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3c:	b29a      	uxth	r2, r3
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af48:	e00f      	b.n	800af6a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af4a:	f107 030c 	add.w	r3, r7, #12
 800af4e:	4618      	mov	r0, r3
 800af50:	f7ff fe4e 	bl	800abf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800af54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af56:	0a5a      	lsrs	r2, r3, #9
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800af5c:	2300      	movs	r3, #0
 800af5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af62:	e002      	b.n	800af6a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800af64:	2304      	movs	r3, #4
 800af66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800af6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3730      	adds	r7, #48	; 0x30
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20000019 	.word	0x20000019

0800af7c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800af80:	4b04      	ldr	r3, [pc, #16]	; (800af94 <BSP_SD_WriteCpltCallback+0x18>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2200      	movs	r2, #0
 800af86:	2102      	movs	r1, #2
 800af88:	4618      	mov	r0, r3
 800af8a:	f004 fe0f 	bl	800fbac <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800af8e:	bf00      	nop
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	20000b24 	.word	0x20000b24

0800af98 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800af9c:	4b04      	ldr	r3, [pc, #16]	; (800afb0 <BSP_SD_ReadCpltCallback+0x18>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2200      	movs	r2, #0
 800afa2:	2101      	movs	r1, #1
 800afa4:	4618      	mov	r0, r3
 800afa6:	f004 fe01 	bl	800fbac <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800afaa:	bf00      	nop
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	20000b24 	.word	0x20000b24

0800afb4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800afb4:	b5b0      	push	{r4, r5, r7, lr}
 800afb6:	b08e      	sub	sp, #56	; 0x38
 800afb8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800afba:	4ba0      	ldr	r3, [pc, #640]	; (800b23c <MX_LWIP_Init+0x288>)
 800afbc:	22c0      	movs	r2, #192	; 0xc0
 800afbe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800afc0:	4b9e      	ldr	r3, [pc, #632]	; (800b23c <MX_LWIP_Init+0x288>)
 800afc2:	22a8      	movs	r2, #168	; 0xa8
 800afc4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800afc6:	4b9d      	ldr	r3, [pc, #628]	; (800b23c <MX_LWIP_Init+0x288>)
 800afc8:	2201      	movs	r2, #1
 800afca:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 243;
 800afcc:	4b9b      	ldr	r3, [pc, #620]	; (800b23c <MX_LWIP_Init+0x288>)
 800afce:	22f3      	movs	r2, #243	; 0xf3
 800afd0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800afd2:	4b9b      	ldr	r3, [pc, #620]	; (800b240 <MX_LWIP_Init+0x28c>)
 800afd4:	22ff      	movs	r2, #255	; 0xff
 800afd6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800afd8:	4b99      	ldr	r3, [pc, #612]	; (800b240 <MX_LWIP_Init+0x28c>)
 800afda:	22ff      	movs	r2, #255	; 0xff
 800afdc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800afde:	4b98      	ldr	r3, [pc, #608]	; (800b240 <MX_LWIP_Init+0x28c>)
 800afe0:	22ff      	movs	r2, #255	; 0xff
 800afe2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800afe4:	4b96      	ldr	r3, [pc, #600]	; (800b240 <MX_LWIP_Init+0x28c>)
 800afe6:	2200      	movs	r2, #0
 800afe8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800afea:	4b96      	ldr	r3, [pc, #600]	; (800b244 <MX_LWIP_Init+0x290>)
 800afec:	22c0      	movs	r2, #192	; 0xc0
 800afee:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800aff0:	4b94      	ldr	r3, [pc, #592]	; (800b244 <MX_LWIP_Init+0x290>)
 800aff2:	22a8      	movs	r2, #168	; 0xa8
 800aff4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800aff6:	4b93      	ldr	r3, [pc, #588]	; (800b244 <MX_LWIP_Init+0x290>)
 800aff8:	2201      	movs	r2, #1
 800affa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800affc:	4b91      	ldr	r3, [pc, #580]	; (800b244 <MX_LWIP_Init+0x290>)
 800affe:	2201      	movs	r2, #1
 800b000:	70da      	strb	r2, [r3, #3]


/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b002:	2100      	movs	r1, #0
 800b004:	2000      	movs	r0, #0
 800b006:	f007 fd69 	bl	8012adc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b00a:	4b8c      	ldr	r3, [pc, #560]	; (800b23c <MX_LWIP_Init+0x288>)
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	061a      	lsls	r2, r3, #24
 800b010:	4b8a      	ldr	r3, [pc, #552]	; (800b23c <MX_LWIP_Init+0x288>)
 800b012:	785b      	ldrb	r3, [r3, #1]
 800b014:	041b      	lsls	r3, r3, #16
 800b016:	431a      	orrs	r2, r3
 800b018:	4b88      	ldr	r3, [pc, #544]	; (800b23c <MX_LWIP_Init+0x288>)
 800b01a:	789b      	ldrb	r3, [r3, #2]
 800b01c:	021b      	lsls	r3, r3, #8
 800b01e:	4313      	orrs	r3, r2
 800b020:	4a86      	ldr	r2, [pc, #536]	; (800b23c <MX_LWIP_Init+0x288>)
 800b022:	78d2      	ldrb	r2, [r2, #3]
 800b024:	4313      	orrs	r3, r2
 800b026:	061a      	lsls	r2, r3, #24
 800b028:	4b84      	ldr	r3, [pc, #528]	; (800b23c <MX_LWIP_Init+0x288>)
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	0619      	lsls	r1, r3, #24
 800b02e:	4b83      	ldr	r3, [pc, #524]	; (800b23c <MX_LWIP_Init+0x288>)
 800b030:	785b      	ldrb	r3, [r3, #1]
 800b032:	041b      	lsls	r3, r3, #16
 800b034:	4319      	orrs	r1, r3
 800b036:	4b81      	ldr	r3, [pc, #516]	; (800b23c <MX_LWIP_Init+0x288>)
 800b038:	789b      	ldrb	r3, [r3, #2]
 800b03a:	021b      	lsls	r3, r3, #8
 800b03c:	430b      	orrs	r3, r1
 800b03e:	497f      	ldr	r1, [pc, #508]	; (800b23c <MX_LWIP_Init+0x288>)
 800b040:	78c9      	ldrb	r1, [r1, #3]
 800b042:	430b      	orrs	r3, r1
 800b044:	021b      	lsls	r3, r3, #8
 800b046:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b04a:	431a      	orrs	r2, r3
 800b04c:	4b7b      	ldr	r3, [pc, #492]	; (800b23c <MX_LWIP_Init+0x288>)
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	0619      	lsls	r1, r3, #24
 800b052:	4b7a      	ldr	r3, [pc, #488]	; (800b23c <MX_LWIP_Init+0x288>)
 800b054:	785b      	ldrb	r3, [r3, #1]
 800b056:	041b      	lsls	r3, r3, #16
 800b058:	4319      	orrs	r1, r3
 800b05a:	4b78      	ldr	r3, [pc, #480]	; (800b23c <MX_LWIP_Init+0x288>)
 800b05c:	789b      	ldrb	r3, [r3, #2]
 800b05e:	021b      	lsls	r3, r3, #8
 800b060:	430b      	orrs	r3, r1
 800b062:	4976      	ldr	r1, [pc, #472]	; (800b23c <MX_LWIP_Init+0x288>)
 800b064:	78c9      	ldrb	r1, [r1, #3]
 800b066:	430b      	orrs	r3, r1
 800b068:	0a1b      	lsrs	r3, r3, #8
 800b06a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b06e:	431a      	orrs	r2, r3
 800b070:	4b72      	ldr	r3, [pc, #456]	; (800b23c <MX_LWIP_Init+0x288>)
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	0619      	lsls	r1, r3, #24
 800b076:	4b71      	ldr	r3, [pc, #452]	; (800b23c <MX_LWIP_Init+0x288>)
 800b078:	785b      	ldrb	r3, [r3, #1]
 800b07a:	041b      	lsls	r3, r3, #16
 800b07c:	4319      	orrs	r1, r3
 800b07e:	4b6f      	ldr	r3, [pc, #444]	; (800b23c <MX_LWIP_Init+0x288>)
 800b080:	789b      	ldrb	r3, [r3, #2]
 800b082:	021b      	lsls	r3, r3, #8
 800b084:	430b      	orrs	r3, r1
 800b086:	496d      	ldr	r1, [pc, #436]	; (800b23c <MX_LWIP_Init+0x288>)
 800b088:	78c9      	ldrb	r1, [r1, #3]
 800b08a:	430b      	orrs	r3, r1
 800b08c:	0e1b      	lsrs	r3, r3, #24
 800b08e:	4313      	orrs	r3, r2
 800b090:	4a6d      	ldr	r2, [pc, #436]	; (800b248 <MX_LWIP_Init+0x294>)
 800b092:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b094:	4b6a      	ldr	r3, [pc, #424]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	061a      	lsls	r2, r3, #24
 800b09a:	4b69      	ldr	r3, [pc, #420]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b09c:	785b      	ldrb	r3, [r3, #1]
 800b09e:	041b      	lsls	r3, r3, #16
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	4b67      	ldr	r3, [pc, #412]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b0a4:	789b      	ldrb	r3, [r3, #2]
 800b0a6:	021b      	lsls	r3, r3, #8
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	4a65      	ldr	r2, [pc, #404]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b0ac:	78d2      	ldrb	r2, [r2, #3]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	061a      	lsls	r2, r3, #24
 800b0b2:	4b63      	ldr	r3, [pc, #396]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	0619      	lsls	r1, r3, #24
 800b0b8:	4b61      	ldr	r3, [pc, #388]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b0ba:	785b      	ldrb	r3, [r3, #1]
 800b0bc:	041b      	lsls	r3, r3, #16
 800b0be:	4319      	orrs	r1, r3
 800b0c0:	4b5f      	ldr	r3, [pc, #380]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b0c2:	789b      	ldrb	r3, [r3, #2]
 800b0c4:	021b      	lsls	r3, r3, #8
 800b0c6:	430b      	orrs	r3, r1
 800b0c8:	495d      	ldr	r1, [pc, #372]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b0ca:	78c9      	ldrb	r1, [r1, #3]
 800b0cc:	430b      	orrs	r3, r1
 800b0ce:	021b      	lsls	r3, r3, #8
 800b0d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b0d4:	431a      	orrs	r2, r3
 800b0d6:	4b5a      	ldr	r3, [pc, #360]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	0619      	lsls	r1, r3, #24
 800b0dc:	4b58      	ldr	r3, [pc, #352]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b0de:	785b      	ldrb	r3, [r3, #1]
 800b0e0:	041b      	lsls	r3, r3, #16
 800b0e2:	4319      	orrs	r1, r3
 800b0e4:	4b56      	ldr	r3, [pc, #344]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b0e6:	789b      	ldrb	r3, [r3, #2]
 800b0e8:	021b      	lsls	r3, r3, #8
 800b0ea:	430b      	orrs	r3, r1
 800b0ec:	4954      	ldr	r1, [pc, #336]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b0ee:	78c9      	ldrb	r1, [r1, #3]
 800b0f0:	430b      	orrs	r3, r1
 800b0f2:	0a1b      	lsrs	r3, r3, #8
 800b0f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b0f8:	431a      	orrs	r2, r3
 800b0fa:	4b51      	ldr	r3, [pc, #324]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	0619      	lsls	r1, r3, #24
 800b100:	4b4f      	ldr	r3, [pc, #316]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b102:	785b      	ldrb	r3, [r3, #1]
 800b104:	041b      	lsls	r3, r3, #16
 800b106:	4319      	orrs	r1, r3
 800b108:	4b4d      	ldr	r3, [pc, #308]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b10a:	789b      	ldrb	r3, [r3, #2]
 800b10c:	021b      	lsls	r3, r3, #8
 800b10e:	430b      	orrs	r3, r1
 800b110:	494b      	ldr	r1, [pc, #300]	; (800b240 <MX_LWIP_Init+0x28c>)
 800b112:	78c9      	ldrb	r1, [r1, #3]
 800b114:	430b      	orrs	r3, r1
 800b116:	0e1b      	lsrs	r3, r3, #24
 800b118:	4313      	orrs	r3, r2
 800b11a:	4a4c      	ldr	r2, [pc, #304]	; (800b24c <MX_LWIP_Init+0x298>)
 800b11c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b11e:	4b49      	ldr	r3, [pc, #292]	; (800b244 <MX_LWIP_Init+0x290>)
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	061a      	lsls	r2, r3, #24
 800b124:	4b47      	ldr	r3, [pc, #284]	; (800b244 <MX_LWIP_Init+0x290>)
 800b126:	785b      	ldrb	r3, [r3, #1]
 800b128:	041b      	lsls	r3, r3, #16
 800b12a:	431a      	orrs	r2, r3
 800b12c:	4b45      	ldr	r3, [pc, #276]	; (800b244 <MX_LWIP_Init+0x290>)
 800b12e:	789b      	ldrb	r3, [r3, #2]
 800b130:	021b      	lsls	r3, r3, #8
 800b132:	4313      	orrs	r3, r2
 800b134:	4a43      	ldr	r2, [pc, #268]	; (800b244 <MX_LWIP_Init+0x290>)
 800b136:	78d2      	ldrb	r2, [r2, #3]
 800b138:	4313      	orrs	r3, r2
 800b13a:	061a      	lsls	r2, r3, #24
 800b13c:	4b41      	ldr	r3, [pc, #260]	; (800b244 <MX_LWIP_Init+0x290>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	0619      	lsls	r1, r3, #24
 800b142:	4b40      	ldr	r3, [pc, #256]	; (800b244 <MX_LWIP_Init+0x290>)
 800b144:	785b      	ldrb	r3, [r3, #1]
 800b146:	041b      	lsls	r3, r3, #16
 800b148:	4319      	orrs	r1, r3
 800b14a:	4b3e      	ldr	r3, [pc, #248]	; (800b244 <MX_LWIP_Init+0x290>)
 800b14c:	789b      	ldrb	r3, [r3, #2]
 800b14e:	021b      	lsls	r3, r3, #8
 800b150:	430b      	orrs	r3, r1
 800b152:	493c      	ldr	r1, [pc, #240]	; (800b244 <MX_LWIP_Init+0x290>)
 800b154:	78c9      	ldrb	r1, [r1, #3]
 800b156:	430b      	orrs	r3, r1
 800b158:	021b      	lsls	r3, r3, #8
 800b15a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b15e:	431a      	orrs	r2, r3
 800b160:	4b38      	ldr	r3, [pc, #224]	; (800b244 <MX_LWIP_Init+0x290>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	0619      	lsls	r1, r3, #24
 800b166:	4b37      	ldr	r3, [pc, #220]	; (800b244 <MX_LWIP_Init+0x290>)
 800b168:	785b      	ldrb	r3, [r3, #1]
 800b16a:	041b      	lsls	r3, r3, #16
 800b16c:	4319      	orrs	r1, r3
 800b16e:	4b35      	ldr	r3, [pc, #212]	; (800b244 <MX_LWIP_Init+0x290>)
 800b170:	789b      	ldrb	r3, [r3, #2]
 800b172:	021b      	lsls	r3, r3, #8
 800b174:	430b      	orrs	r3, r1
 800b176:	4933      	ldr	r1, [pc, #204]	; (800b244 <MX_LWIP_Init+0x290>)
 800b178:	78c9      	ldrb	r1, [r1, #3]
 800b17a:	430b      	orrs	r3, r1
 800b17c:	0a1b      	lsrs	r3, r3, #8
 800b17e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b182:	431a      	orrs	r2, r3
 800b184:	4b2f      	ldr	r3, [pc, #188]	; (800b244 <MX_LWIP_Init+0x290>)
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	0619      	lsls	r1, r3, #24
 800b18a:	4b2e      	ldr	r3, [pc, #184]	; (800b244 <MX_LWIP_Init+0x290>)
 800b18c:	785b      	ldrb	r3, [r3, #1]
 800b18e:	041b      	lsls	r3, r3, #16
 800b190:	4319      	orrs	r1, r3
 800b192:	4b2c      	ldr	r3, [pc, #176]	; (800b244 <MX_LWIP_Init+0x290>)
 800b194:	789b      	ldrb	r3, [r3, #2]
 800b196:	021b      	lsls	r3, r3, #8
 800b198:	430b      	orrs	r3, r1
 800b19a:	492a      	ldr	r1, [pc, #168]	; (800b244 <MX_LWIP_Init+0x290>)
 800b19c:	78c9      	ldrb	r1, [r1, #3]
 800b19e:	430b      	orrs	r3, r1
 800b1a0:	0e1b      	lsrs	r3, r3, #24
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	4a2a      	ldr	r2, [pc, #168]	; (800b250 <MX_LWIP_Init+0x29c>)
 800b1a6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b1a8:	4b2a      	ldr	r3, [pc, #168]	; (800b254 <MX_LWIP_Init+0x2a0>)
 800b1aa:	9302      	str	r3, [sp, #8]
 800b1ac:	4b2a      	ldr	r3, [pc, #168]	; (800b258 <MX_LWIP_Init+0x2a4>)
 800b1ae:	9301      	str	r3, [sp, #4]
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	4b26      	ldr	r3, [pc, #152]	; (800b250 <MX_LWIP_Init+0x29c>)
 800b1b6:	4a25      	ldr	r2, [pc, #148]	; (800b24c <MX_LWIP_Init+0x298>)
 800b1b8:	4923      	ldr	r1, [pc, #140]	; (800b248 <MX_LWIP_Init+0x294>)
 800b1ba:	4828      	ldr	r0, [pc, #160]	; (800b25c <MX_LWIP_Init+0x2a8>)
 800b1bc:	f009 fde2 	bl	8014d84 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b1c0:	4826      	ldr	r0, [pc, #152]	; (800b25c <MX_LWIP_Init+0x2a8>)
 800b1c2:	f009 ff91 	bl	80150e8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b1c6:	4b25      	ldr	r3, [pc, #148]	; (800b25c <MX_LWIP_Init+0x2a8>)
 800b1c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1cc:	089b      	lsrs	r3, r3, #2
 800b1ce:	f003 0301 	and.w	r3, r3, #1
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d003      	beq.n	800b1e0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b1d8:	4820      	ldr	r0, [pc, #128]	; (800b25c <MX_LWIP_Init+0x2a8>)
 800b1da:	f009 ff95 	bl	8015108 <netif_set_up>
 800b1de:	e002      	b.n	800b1e6 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800b1e0:	481e      	ldr	r0, [pc, #120]	; (800b25c <MX_LWIP_Init+0x2a8>)
 800b1e2:	f009 fffd 	bl	80151e0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800b1e6:	491e      	ldr	r1, [pc, #120]	; (800b260 <MX_LWIP_Init+0x2ac>)
 800b1e8:	481c      	ldr	r0, [pc, #112]	; (800b25c <MX_LWIP_Init+0x2a8>)
 800b1ea:	f00a f88f 	bl	801530c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	623b      	str	r3, [r7, #32]
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800b1f6:	f107 0320 	add.w	r3, r7, #32
 800b1fa:	2101      	movs	r1, #1
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f004 fbe3 	bl	800f9c8 <osSemaphoreCreate>
 800b202:	4603      	mov	r3, r0
 800b204:	4a17      	ldr	r2, [pc, #92]	; (800b264 <MX_LWIP_Init+0x2b0>)
 800b206:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800b208:	4b17      	ldr	r3, [pc, #92]	; (800b268 <MX_LWIP_Init+0x2b4>)
 800b20a:	4a14      	ldr	r2, [pc, #80]	; (800b25c <MX_LWIP_Init+0x2a8>)
 800b20c:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800b20e:	4b15      	ldr	r3, [pc, #84]	; (800b264 <MX_LWIP_Init+0x2b0>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a15      	ldr	r2, [pc, #84]	; (800b268 <MX_LWIP_Init+0x2b4>)
 800b214:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800b216:	4b15      	ldr	r3, [pc, #84]	; (800b26c <MX_LWIP_Init+0x2b8>)
 800b218:	1d3c      	adds	r4, r7, #4
 800b21a:	461d      	mov	r5, r3
 800b21c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b21e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b220:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b224:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800b228:	1d3b      	adds	r3, r7, #4
 800b22a:	490f      	ldr	r1, [pc, #60]	; (800b268 <MX_LWIP_Init+0x2b4>)
 800b22c:	4618      	mov	r0, r3
 800b22e:	f004 face 	bl	800f7ce <osThreadCreate>




/* USER CODE END 3 */
}
 800b232:	bf00      	nop
 800b234:	3728      	adds	r7, #40	; 0x28
 800b236:	46bd      	mov	sp, r7
 800b238:	bdb0      	pop	{r4, r5, r7, pc}
 800b23a:	bf00      	nop
 800b23c:	2000d868 	.word	0x2000d868
 800b240:	2000d864 	.word	0x2000d864
 800b244:	2000d828 	.word	0x2000d828
 800b248:	2000d860 	.word	0x2000d860
 800b24c:	2000d86c 	.word	0x2000d86c
 800b250:	2000d870 	.word	0x2000d870
 800b254:	08012a19 	.word	0x08012a19
 800b258:	0800b8b5 	.word	0x0800b8b5
 800b25c:	2000d82c 	.word	0x2000d82c
 800b260:	0800b9a9 	.word	0x0800b9a9
 800b264:	20000b28 	.word	0x20000b28
 800b268:	2000d820 	.word	0x2000d820
 800b26c:	08021018 	.word	0x08021018

0800b270 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(ethHandle->Instance==ETH)
 800b270:	b580      	push	{r7, lr}
 800b272:	b08e      	sub	sp, #56	; 0x38
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  {
 800b278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b27c:	2200      	movs	r2, #0
 800b27e:	601a      	str	r2, [r3, #0]
 800b280:	605a      	str	r2, [r3, #4]
 800b282:	609a      	str	r2, [r3, #8]
 800b284:	60da      	str	r2, [r3, #12]
 800b286:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_MspInit 0 */
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a4a      	ldr	r2, [pc, #296]	; (800b3b8 <HAL_ETH_MspInit+0x148>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	f040 808d 	bne.w	800b3ae <HAL_ETH_MspInit+0x13e>

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b294:	2300      	movs	r3, #0
 800b296:	623b      	str	r3, [r7, #32]
 800b298:	4b48      	ldr	r3, [pc, #288]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b29c:	4a47      	ldr	r2, [pc, #284]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b29e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b2a2:	6313      	str	r3, [r2, #48]	; 0x30
 800b2a4:	4b45      	ldr	r3, [pc, #276]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2ac:	623b      	str	r3, [r7, #32]
 800b2ae:	6a3b      	ldr	r3, [r7, #32]
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	61fb      	str	r3, [r7, #28]
 800b2b4:	4b41      	ldr	r3, [pc, #260]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b8:	4a40      	ldr	r2, [pc, #256]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b2ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b2be:	6313      	str	r3, [r2, #48]	; 0x30
 800b2c0:	4b3e      	ldr	r3, [pc, #248]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b2c8:	61fb      	str	r3, [r7, #28]
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	61bb      	str	r3, [r7, #24]
 800b2d0:	4b3a      	ldr	r3, [pc, #232]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d4:	4a39      	ldr	r2, [pc, #228]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b2d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b2da:	6313      	str	r3, [r2, #48]	; 0x30
 800b2dc:	4b37      	ldr	r3, [pc, #220]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2e4:	61bb      	str	r3, [r7, #24]
 800b2e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	617b      	str	r3, [r7, #20]
 800b2ec:	4b33      	ldr	r3, [pc, #204]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f0:	4a32      	ldr	r2, [pc, #200]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b2f2:	f043 0304 	orr.w	r3, r3, #4
 800b2f6:	6313      	str	r3, [r2, #48]	; 0x30
 800b2f8:	4b30      	ldr	r3, [pc, #192]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fc:	f003 0304 	and.w	r3, r3, #4
 800b300:	617b      	str	r3, [r7, #20]
 800b302:	697b      	ldr	r3, [r7, #20]
    /**ETH GPIO Configuration
 800b304:	2300      	movs	r3, #0
 800b306:	613b      	str	r3, [r7, #16]
 800b308:	4b2c      	ldr	r3, [pc, #176]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b30c:	4a2b      	ldr	r2, [pc, #172]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b30e:	f043 0301 	orr.w	r3, r3, #1
 800b312:	6313      	str	r3, [r2, #48]	; 0x30
 800b314:	4b29      	ldr	r3, [pc, #164]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b318:	f003 0301 	and.w	r3, r3, #1
 800b31c:	613b      	str	r3, [r7, #16]
 800b31e:	693b      	ldr	r3, [r7, #16]
    PC1     ------> ETH_MDC
 800b320:	2300      	movs	r3, #0
 800b322:	60fb      	str	r3, [r7, #12]
 800b324:	4b25      	ldr	r3, [pc, #148]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b328:	4a24      	ldr	r2, [pc, #144]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b32e:	6313      	str	r3, [r2, #48]	; 0x30
 800b330:	4b22      	ldr	r3, [pc, #136]	; (800b3bc <HAL_ETH_MspInit+0x14c>)
 800b332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b338:	60fb      	str	r3, [r7, #12]
 800b33a:	68fb      	ldr	r3, [r7, #12]
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b33c:	2332      	movs	r3, #50	; 0x32
 800b33e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b340:	2302      	movs	r3, #2
 800b342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b344:	2300      	movs	r3, #0
 800b346:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b348:	2303      	movs	r3, #3
 800b34a:	633b      	str	r3, [r7, #48]	; 0x30

 800b34c:	230b      	movs	r3, #11
 800b34e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800b350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b354:	4619      	mov	r1, r3
 800b356:	481a      	ldr	r0, [pc, #104]	; (800b3c0 <HAL_ETH_MspInit+0x150>)
 800b358:	f7f9 fda2 	bl	8004ea0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b35c:	2386      	movs	r3, #134	; 0x86
 800b35e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b360:	2302      	movs	r3, #2
 800b362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b364:	2300      	movs	r3, #0
 800b366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b368:	2303      	movs	r3, #3
 800b36a:	633b      	str	r3, [r7, #48]	; 0x30

 800b36c:	230b      	movs	r3, #11
 800b36e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800b370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b374:	4619      	mov	r1, r3
 800b376:	4813      	ldr	r0, [pc, #76]	; (800b3c4 <HAL_ETH_MspInit+0x154>)
 800b378:	f7f9 fd92 	bl	8004ea0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b37c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800b380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b382:	2302      	movs	r3, #2
 800b384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b386:	2300      	movs	r3, #0
 800b388:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b38a:	2303      	movs	r3, #3
 800b38c:	633b      	str	r3, [r7, #48]	; 0x30

 800b38e:	230b      	movs	r3, #11
 800b390:	637b      	str	r3, [r7, #52]	; 0x34
    /* Peripheral interrupt init */
 800b392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b396:	4619      	mov	r1, r3
 800b398:	480b      	ldr	r0, [pc, #44]	; (800b3c8 <HAL_ETH_MspInit+0x158>)
 800b39a:	f7f9 fd81 	bl	8004ea0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
    HAL_NVIC_EnableIRQ(ETH_IRQn);
  /* USER CODE BEGIN ETH_MspInit 1 */
 800b39e:	2200      	movs	r2, #0
 800b3a0:	2106      	movs	r1, #6
 800b3a2:	203d      	movs	r0, #61	; 0x3d
 800b3a4:	f7f6 fe30 	bl	8002008 <HAL_NVIC_SetPriority>

 800b3a8:	203d      	movs	r0, #61	; 0x3d
 800b3aa:	f7f6 fe49 	bl	8002040 <HAL_NVIC_EnableIRQ>
  /* USER CODE END ETH_MspInit 1 */
  }
}

void HAL_ETH_MspDeInit(ETH_HandleTypeDef* ethHandle)
 800b3ae:	bf00      	nop
 800b3b0:	3738      	adds	r7, #56	; 0x38
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	40028000 	.word	0x40028000
 800b3bc:	40023800 	.word	0x40023800
 800b3c0:	40020800 	.word	0x40020800
 800b3c4:	40020000 	.word	0x40020000
 800b3c8:	40021800 	.word	0x40021800

0800b3cc <HAL_ETH_RxCpltCallback>:
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
  osSemaphoreRelease(s_xSemaphore);
}
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]

 800b3d4:	4b04      	ldr	r3, [pc, #16]	; (800b3e8 <HAL_ETH_RxCpltCallback+0x1c>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f004 fb75 	bl	800fac8 <osSemaphoreRelease>
/* USER CODE BEGIN 4 */
 800b3de:	bf00      	nop
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	20000b2c 	.word	0x20000b2c

0800b3ec <low_level_init>:
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
  uint32_t regvalue = 0;
  HAL_StatusTypeDef hal_eth_init_status;
 800b3ec:	b5b0      	push	{r4, r5, r7, lr}
 800b3ee:	b090      	sub	sp, #64	; 0x40
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]

 800b3f4:	2300      	movs	r3, #0
 800b3f6:	63bb      	str	r3, [r7, #56]	; 0x38
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
  heth.Init.Speed = ETH_SPEED_100M;
 800b3f8:	4b65      	ldr	r3, [pc, #404]	; (800b590 <low_level_init+0x1a4>)
 800b3fa:	4a66      	ldr	r2, [pc, #408]	; (800b594 <low_level_init+0x1a8>)
 800b3fc:	601a      	str	r2, [r3, #0]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b3fe:	4b64      	ldr	r3, [pc, #400]	; (800b590 <low_level_init+0x1a4>)
 800b400:	2201      	movs	r2, #1
 800b402:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800b404:	4b62      	ldr	r3, [pc, #392]	; (800b590 <low_level_init+0x1a4>)
 800b406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b40a:	609a      	str	r2, [r3, #8]
  MACAddr[0] = 0x00;
 800b40c:	4b60      	ldr	r3, [pc, #384]	; (800b590 <low_level_init+0x1a4>)
 800b40e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b412:	60da      	str	r2, [r3, #12]
  MACAddr[1] = 0x80;
 800b414:	4b5e      	ldr	r3, [pc, #376]	; (800b590 <low_level_init+0x1a4>)
 800b416:	2201      	movs	r2, #1
 800b418:	821a      	strh	r2, [r3, #16]
  MACAddr[2] = 0xE1;
 800b41a:	2300      	movs	r3, #0
 800b41c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[3] = 0x00;
 800b420:	2380      	movs	r3, #128	; 0x80
 800b422:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[4] = 0x00;
 800b426:	23e1      	movs	r3, #225	; 0xe1
 800b428:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[5] = 0x00;
 800b42c:	2300      	movs	r3, #0
 800b42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  heth.Init.MACAddr = &MACAddr[0];
 800b432:	2300      	movs	r3, #0
 800b434:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800b438:	2300      	movs	r3, #0
 800b43a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b43e:	4a54      	ldr	r2, [pc, #336]	; (800b590 <low_level_init+0x1a4>)
 800b440:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b444:	6153      	str	r3, [r2, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b446:	4b52      	ldr	r3, [pc, #328]	; (800b590 <low_level_init+0x1a4>)
 800b448:	2201      	movs	r2, #1
 800b44a:	619a      	str	r2, [r3, #24]

 800b44c:	4b50      	ldr	r3, [pc, #320]	; (800b590 <low_level_init+0x1a4>)
 800b44e:	2200      	movs	r2, #0
 800b450:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN MACADDRESS */
 800b452:	4b4f      	ldr	r3, [pc, #316]	; (800b590 <low_level_init+0x1a4>)
 800b454:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b458:	621a      	str	r2, [r3, #32]

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);

  if (hal_eth_init_status == HAL_OK)
 800b45a:	484d      	ldr	r0, [pc, #308]	; (800b590 <low_level_init+0x1a4>)
 800b45c:	f7f8 fb7a 	bl	8003b54 <HAL_ETH_Init>
 800b460:	4603      	mov	r3, r0
 800b462:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  {
    /* Set netif link flag */
 800b466:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d108      	bne.n	800b480 <low_level_init+0x94>
    netif->flags |= NETIF_FLAG_LINK_UP;
  }
  /* Initialize Tx Descriptors list: Chain Mode */
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b474:	f043 0304 	orr.w	r3, r3, #4
 800b478:	b2da      	uxtb	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);

  /* Initialize Rx Descriptors list: Chain Mode  */
 800b480:	2304      	movs	r3, #4
 800b482:	4a45      	ldr	r2, [pc, #276]	; (800b598 <low_level_init+0x1ac>)
 800b484:	4945      	ldr	r1, [pc, #276]	; (800b59c <low_level_init+0x1b0>)
 800b486:	4842      	ldr	r0, [pc, #264]	; (800b590 <low_level_init+0x1a4>)
 800b488:	f7f8 fd00 	bl	8003e8c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);

#if LWIP_ARP || LWIP_ETHERNET
 800b48c:	2304      	movs	r3, #4
 800b48e:	4a44      	ldr	r2, [pc, #272]	; (800b5a0 <low_level_init+0x1b4>)
 800b490:	4944      	ldr	r1, [pc, #272]	; (800b5a4 <low_level_init+0x1b8>)
 800b492:	483f      	ldr	r0, [pc, #252]	; (800b590 <low_level_init+0x1a4>)
 800b494:	f7f8 fd63 	bl	8003f5e <HAL_ETH_DMARxDescListInit>

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;

  /* set MAC hardware address */
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2206      	movs	r2, #6
 800b49c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b4a0:	4b3b      	ldr	r3, [pc, #236]	; (800b590 <low_level_init+0x1a4>)
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	781a      	ldrb	r2, [r3, #0]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b4ac:	4b38      	ldr	r3, [pc, #224]	; (800b590 <low_level_init+0x1a4>)
 800b4ae:	695b      	ldr	r3, [r3, #20]
 800b4b0:	785a      	ldrb	r2, [r3, #1]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b4b8:	4b35      	ldr	r3, [pc, #212]	; (800b590 <low_level_init+0x1a4>)
 800b4ba:	695b      	ldr	r3, [r3, #20]
 800b4bc:	789a      	ldrb	r2, [r3, #2]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b4c4:	4b32      	ldr	r3, [pc, #200]	; (800b590 <low_level_init+0x1a4>)
 800b4c6:	695b      	ldr	r3, [r3, #20]
 800b4c8:	78da      	ldrb	r2, [r3, #3]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

 800b4d0:	4b2f      	ldr	r3, [pc, #188]	; (800b590 <low_level_init+0x1a4>)
 800b4d2:	695b      	ldr	r3, [r3, #20]
 800b4d4:	791a      	ldrb	r2, [r3, #4]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  /* maximum transfer unit */
 800b4dc:	4b2c      	ldr	r3, [pc, #176]	; (800b590 <low_level_init+0x1a4>)
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	795a      	ldrb	r2, [r3, #5]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->mtu = 1500;

  /* Accept broadcast address and ARP traffic */
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b4ee:	849a      	strh	r2, [r3, #36]	; 0x24
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b4f6:	f043 030a 	orr.w	r3, r3, #10
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);

 800b502:	2300      	movs	r3, #0
 800b504:	62bb      	str	r3, [r7, #40]	; 0x28
 800b506:	2300      	movs	r3, #0
 800b508:	62fb      	str	r3, [r7, #44]	; 0x2c
/* create the task that handles the ETH_MAC */
 800b50a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b50e:	2101      	movs	r1, #1
 800b510:	4618      	mov	r0, r3
 800b512:	f004 fa59 	bl	800f9c8 <osSemaphoreCreate>
 800b516:	4603      	mov	r3, r0
 800b518:	4a23      	ldr	r2, [pc, #140]	; (800b5a8 <low_level_init+0x1bc>)
 800b51a:	6013      	str	r3, [r2, #0]
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
  osThreadCreate (osThread(EthIf), netif);
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
 800b51c:	4b23      	ldr	r3, [pc, #140]	; (800b5ac <low_level_init+0x1c0>)
 800b51e:	f107 040c 	add.w	r4, r7, #12
 800b522:	461d      	mov	r5, r3
 800b524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b528:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b52c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* Enable MAC and DMA transmission and reception */
 800b530:	f107 030c 	add.w	r3, r7, #12
 800b534:	6879      	ldr	r1, [r7, #4]
 800b536:	4618      	mov	r0, r3
 800b538:	f004 f949 	bl	800f7ce <osThreadCreate>
  HAL_ETH_Start(&heth);

/* USER CODE BEGIN PHY_PRE_CONFIG */
 800b53c:	4814      	ldr	r0, [pc, #80]	; (800b590 <low_level_init+0x1a4>)
 800b53e:	f7f9 f836 	bl	80045ae <HAL_ETH_Start>

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800b542:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b546:	461a      	mov	r2, r3
 800b548:	2111      	movs	r1, #17
 800b54a:	4811      	ldr	r0, [pc, #68]	; (800b590 <low_level_init+0x1a4>)
 800b54c:	f7f8 ff61 	bl	8004412 <HAL_ETH_ReadPHYRegister>

  /* Enable Interrupts */
 800b550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b552:	f043 0303 	orr.w	r3, r3, #3
 800b556:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );

  /* Read Register Configuration */
 800b558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55a:	461a      	mov	r2, r3
 800b55c:	2111      	movs	r1, #17
 800b55e:	480c      	ldr	r0, [pc, #48]	; (800b590 <low_level_init+0x1a4>)
 800b560:	f7f8 ffbf 	bl	80044e2 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);

  regvalue |= PHY_MISR_LINK_INT_EN;
 800b564:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b568:	461a      	mov	r2, r3
 800b56a:	2112      	movs	r1, #18
 800b56c:	4808      	ldr	r0, [pc, #32]	; (800b590 <low_level_init+0x1a4>)
 800b56e:	f7f8 ff50 	bl	8004412 <HAL_ETH_ReadPHYRegister>

  /* Enable Interrupt on change of link status */
 800b572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b574:	f043 0320 	orr.w	r3, r3, #32
 800b578:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);

/* USER CODE BEGIN PHY_POST_CONFIG */
 800b57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57c:	461a      	mov	r2, r3
 800b57e:	2112      	movs	r1, #18
 800b580:	4803      	ldr	r0, [pc, #12]	; (800b590 <low_level_init+0x1a4>)
 800b582:	f7f8 ffae 	bl	80044e2 <HAL_ETH_WritePHYRegister>
/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}

/**
 800b586:	bf00      	nop
 800b588:	3740      	adds	r7, #64	; 0x40
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bdb0      	pop	{r4, r5, r7, pc}
 800b58e:	bf00      	nop
 800b590:	2000f144 	.word	0x2000f144
 800b594:	40028000 	.word	0x40028000
 800b598:	2000f18c 	.word	0x2000f18c
 800b59c:	2000d874 	.word	0x2000d874
 800b5a0:	2000d8f4 	.word	0x2000d8f4
 800b5a4:	2000f0c4 	.word	0x2000f0c4
 800b5a8:	20000b2c 	.word	0x20000b2c
 800b5ac:	0802103c 	.word	0x0802103c

0800b5b0 <low_level_output>:
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b08a      	sub	sp, #40	; 0x28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800b5ba:	4b4b      	ldr	r3, [pc, #300]	; (800b6e8 <low_level_output+0x138>)
 800b5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	61fb      	str	r3, [r7, #28]
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	617b      	str	r3, [r7, #20]
  uint32_t payloadoffset = 0;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	613b      	str	r3, [r7, #16]
  DmaTxDesc = heth.TxDesc;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	60fb      	str	r3, [r7, #12]
  bufferoffset = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60bb      	str	r3, [r7, #8]

 800b5d2:	4b45      	ldr	r3, [pc, #276]	; (800b6e8 <low_level_output+0x138>)
 800b5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d6:	61bb      	str	r3, [r7, #24]
  /* copy frame from pbufs to driver buffers */
 800b5d8:	2300      	movs	r3, #0
 800b5da:	613b      	str	r3, [r7, #16]
  for(q = p; q != NULL; q = q->next)
    {
      /* Is this buffer available? If not, goto error */
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	623b      	str	r3, [r7, #32]
 800b5e0:	e05a      	b.n	800b698 <low_level_output+0xe8>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
      {
        errval = ERR_USE;
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	da03      	bge.n	800b5f2 <low_level_output+0x42>
        goto error;
      }
 800b5ea:	23f8      	movs	r3, #248	; 0xf8
 800b5ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

 800b5f0:	e05c      	b.n	800b6ac <low_level_output+0xfc>
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	895b      	ldrh	r3, [r3, #10]
 800b5f6:	60fb      	str	r3, [r7, #12]
      /* Check if the length of data to copy is bigger than Tx buffer size*/
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	60bb      	str	r3, [r7, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
      {
        /* Copy data to Tx buffer*/
 800b5fc:	e02f      	b.n	800b65e <low_level_output+0xae>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );

        /* Point to next descriptor */
 800b5fe:	69fa      	ldr	r2, [r7, #28]
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	18d0      	adds	r0, r2, r3
 800b604:	6a3b      	ldr	r3, [r7, #32]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	18d1      	adds	r1, r2, r3
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b612:	3304      	adds	r3, #4
 800b614:	461a      	mov	r2, r3
 800b616:	f013 fc69 	bl	801eeec <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);

        /* Check if the buffer is available */
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	61bb      	str	r3, [r7, #24]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
        {
          errval = ERR_USE;
 800b620:	69bb      	ldr	r3, [r7, #24]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	da03      	bge.n	800b630 <low_level_output+0x80>
          goto error;
        }
 800b628:	23f8      	movs	r3, #248	; 0xf8
 800b62a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

 800b62e:	e03d      	b.n	800b6ac <low_level_output+0xfc>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	61fb      	str	r3, [r7, #28]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	4413      	add	r3, r2
 800b63c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b640:	60fb      	str	r3, [r7, #12]
        bufferoffset = 0;
 800b642:	68ba      	ldr	r2, [r7, #8]
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b64c:	60bb      	str	r3, [r7, #8]
      }
 800b64e:	697a      	ldr	r2, [r7, #20]
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b658:	617b      	str	r3, [r7, #20]

 800b65a:	2300      	movs	r3, #0
 800b65c:	613b      	str	r3, [r7, #16]
        /* Copy data to Tx buffer*/
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	4413      	add	r3, r2
 800b664:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b668:	4293      	cmp	r3, r2
 800b66a:	d8c8      	bhi.n	800b5fe <low_level_output+0x4e>
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
 800b66c:	69fa      	ldr	r2, [r7, #28]
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	18d0      	adds	r0, r2, r3
 800b672:	6a3b      	ldr	r3, [r7, #32]
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	4413      	add	r3, r2
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	4619      	mov	r1, r3
 800b67e:	f013 fc35 	bl	801eeec <memcpy>
    }
 800b682:	693a      	ldr	r2, [r7, #16]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	4413      	add	r3, r2
 800b688:	613b      	str	r3, [r7, #16]

 800b68a:	697a      	ldr	r2, [r7, #20]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	4413      	add	r3, r2
 800b690:	617b      	str	r3, [r7, #20]
      /* Is this buffer available? If not, goto error */
 800b692:	6a3b      	ldr	r3, [r7, #32]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	623b      	str	r3, [r7, #32]
 800b698:	6a3b      	ldr	r3, [r7, #32]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1a1      	bne.n	800b5e2 <low_level_output+0x32>
  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);

  errval = ERR_OK;
 800b69e:	6979      	ldr	r1, [r7, #20]
 800b6a0:	4811      	ldr	r0, [pc, #68]	; (800b6e8 <low_level_output+0x138>)
 800b6a2:	f7f8 fcc9 	bl	8004038 <HAL_ETH_TransmitFrame>

error:
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
  {
    /* Clear TUS ETHERNET DMA flag */
 800b6ac:	4b0e      	ldr	r3, [pc, #56]	; (800b6e8 <low_level_output+0x138>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6b4:	3314      	adds	r3, #20
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 0320 	and.w	r3, r3, #32
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00d      	beq.n	800b6dc <low_level_output+0x12c>
    heth.Instance->DMASR = ETH_DMASR_TUS;

    /* Resume DMA transmission*/
 800b6c0:	4b09      	ldr	r3, [pc, #36]	; (800b6e8 <low_level_output+0x138>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6c8:	3314      	adds	r3, #20
 800b6ca:	2220      	movs	r2, #32
 800b6cc:	601a      	str	r2, [r3, #0]
    heth.Instance->DMATPDR = 0;
  }
  return errval;
 800b6ce:	4b06      	ldr	r3, [pc, #24]	; (800b6e8 <low_level_output+0x138>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6d6:	3304      	adds	r3, #4
 800b6d8:	2200      	movs	r2, #0
 800b6da:	601a      	str	r2, [r3, #0]
}

 800b6dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
/**
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3728      	adds	r7, #40	; 0x28
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	2000f144 	.word	0x2000f144

0800b6ec <low_level_input>:
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
  struct pbuf *p = NULL;
  struct pbuf *q = NULL;
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08c      	sub	sp, #48	; 0x30
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  uint16_t len = 0;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t *buffer;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __IO ETH_DMADescTypeDef *dmarxdesc;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	81fb      	strh	r3, [r7, #14]
  uint32_t bufferoffset = 0;
  uint32_t payloadoffset = 0;
  uint32_t byteslefttocopy = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	61fb      	str	r3, [r7, #28]
  uint32_t i=0;
 800b704:	2300      	movs	r3, #0
 800b706:	61bb      	str	r3, [r7, #24]

 800b708:	2300      	movs	r3, #0
 800b70a:	617b      	str	r3, [r7, #20]
  /* get received frame */
 800b70c:	2300      	movs	r3, #0
 800b70e:	613b      	str	r3, [r7, #16]
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)

    return NULL;
 800b710:	484f      	ldr	r0, [pc, #316]	; (800b850 <low_level_input+0x164>)
 800b712:	f7f8 fd7b 	bl	800420c <HAL_ETH_GetReceivedFrame_IT>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <low_level_input+0x34>

  /* Obtain the size of the packet and put it into the "len" variable. */
 800b71c:	2300      	movs	r3, #0
 800b71e:	e092      	b.n	800b846 <low_level_input+0x15a>
  len = heth.RxFrameInfos.length;
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;

 800b720:	4b4b      	ldr	r3, [pc, #300]	; (800b850 <low_level_input+0x164>)
 800b722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b724:	81fb      	strh	r3, [r7, #14]
  if (len > 0)
 800b726:	4b4a      	ldr	r3, [pc, #296]	; (800b850 <low_level_input+0x164>)
 800b728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72a:	627b      	str	r3, [r7, #36]	; 0x24
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
 800b72c:	89fb      	ldrh	r3, [r7, #14]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d007      	beq.n	800b742 <low_level_input+0x56>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
  }

 800b732:	89fb      	ldrh	r3, [r7, #14]
 800b734:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800b738:	4619      	mov	r1, r3
 800b73a:	2000      	movs	r0, #0
 800b73c:	f009 feb0 	bl	80154a0 <pbuf_alloc>
 800b740:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (p != NULL)
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b744:	2b00      	cmp	r3, #0
 800b746:	d04b      	beq.n	800b7e0 <low_level_input+0xf4>
    bufferoffset = 0;
    for(q = p; q != NULL; q = q->next)
 800b748:	4b41      	ldr	r3, [pc, #260]	; (800b850 <low_level_input+0x164>)
 800b74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74c:	623b      	str	r3, [r7, #32]
    {
 800b74e:	2300      	movs	r3, #0
 800b750:	61fb      	str	r3, [r7, #28]
      byteslefttocopy = q->len;
 800b752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b754:	62bb      	str	r3, [r7, #40]	; 0x28
 800b756:	e040      	b.n	800b7da <low_level_input+0xee>
      payloadoffset = 0;

 800b758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75a:	895b      	ldrh	r3, [r3, #10]
 800b75c:	617b      	str	r3, [r7, #20]
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
 800b75e:	2300      	movs	r3, #0
 800b760:	61bb      	str	r3, [r7, #24]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
      {
        /* Copy data to pbuf */
 800b762:	e021      	b.n	800b7a8 <low_level_input+0xbc>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));

        /* Point to next descriptor */
 800b764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b766:	685a      	ldr	r2, [r3, #4]
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	18d0      	adds	r0, r2, r3
 800b76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	18d1      	adds	r1, r2, r3
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b778:	3304      	adds	r3, #4
 800b77a:	461a      	mov	r2, r3
 800b77c:	f013 fbb6 	bl	801eeec <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);

 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	623b      	str	r3, [r7, #32]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	627b      	str	r3, [r7, #36]	; 0x24
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 800b78c:	69fa      	ldr	r2, [r7, #28]
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	4413      	add	r3, r2
 800b792:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b796:	617b      	str	r3, [r7, #20]
      }
 800b798:	69ba      	ldr	r2, [r7, #24]
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	1ad3      	subs	r3, r2, r3
 800b79e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b7a2:	61bb      	str	r3, [r7, #24]
      /* Copy remaining data in pbuf */
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	61fb      	str	r3, [r7, #28]
        /* Copy data to pbuf */
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d8d6      	bhi.n	800b764 <low_level_input+0x78>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
      bufferoffset = bufferoffset + byteslefttocopy;
    }
 800b7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b8:	685a      	ldr	r2, [r3, #4]
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	18d0      	adds	r0, r2, r3
 800b7be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	697a      	ldr	r2, [r7, #20]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	f013 fb90 	bl	801eeec <memcpy>
  }
 800b7cc:	69fa      	ldr	r2, [r7, #28]
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	61fb      	str	r3, [r7, #28]
      byteslefttocopy = q->len;
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d1bb      	bne.n	800b758 <low_level_input+0x6c>

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b7e0:	4b1b      	ldr	r3, [pc, #108]	; (800b850 <low_level_input+0x164>)
 800b7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e4:	623b      	str	r3, [r7, #32]
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	613b      	str	r3, [r7, #16]
 800b7ea:	e00b      	b.n	800b804 <low_level_input+0x118>
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
    }
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b7f4:	6a3b      	ldr	r3, [r7, #32]
 800b7f6:	601a      	str	r2, [r3, #0]

 800b7f8:	6a3b      	ldr	r3, [r7, #32]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	623b      	str	r3, [r7, #32]
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	3301      	adds	r3, #1
 800b802:	613b      	str	r3, [r7, #16]
 800b804:	4b12      	ldr	r3, [pc, #72]	; (800b850 <low_level_input+0x164>)
 800b806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b808:	693a      	ldr	r2, [r7, #16]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d3ee      	bcc.n	800b7ec <low_level_input+0x100>
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
 800b80e:	4b10      	ldr	r3, [pc, #64]	; (800b850 <low_level_input+0x164>)
 800b810:	2200      	movs	r2, #0
 800b812:	639a      	str	r2, [r3, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
  {
    /* Clear RBUS ETHERNET DMA flag */
 800b814:	4b0e      	ldr	r3, [pc, #56]	; (800b850 <low_level_input+0x164>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b81c:	3314      	adds	r3, #20
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00d      	beq.n	800b844 <low_level_input+0x158>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800b828:	4b09      	ldr	r3, [pc, #36]	; (800b850 <low_level_input+0x164>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b830:	3314      	adds	r3, #20
 800b832:	2280      	movs	r2, #128	; 0x80
 800b834:	601a      	str	r2, [r3, #0]
  }
  return p;
 800b836:	4b06      	ldr	r3, [pc, #24]	; (800b850 <low_level_input+0x164>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b83e:	3308      	adds	r3, #8
 800b840:	2200      	movs	r2, #0
 800b842:	601a      	str	r2, [r3, #0]
}

 800b844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
/**
 800b846:	4618      	mov	r0, r3
 800b848:	3730      	adds	r7, #48	; 0x30
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	2000f144 	.word	0x2000f144

0800b854 <ethernetif_input>:
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]

  for( ;; )
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	60fb      	str	r3, [r7, #12]
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
    {
      do
 800b860:	4b12      	ldr	r3, [pc, #72]	; (800b8ac <ethernetif_input+0x58>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f04f 31ff 	mov.w	r1, #4294967295
 800b868:	4618      	mov	r0, r3
 800b86a:	f004 f8df 	bl	800fa2c <osSemaphoreWait>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1f5      	bne.n	800b860 <ethernetif_input+0xc>
      {
        LOCK_TCPIP_CORE();
        p = low_level_input( netif );
        if   (p != NULL)
 800b874:	480e      	ldr	r0, [pc, #56]	; (800b8b0 <ethernetif_input+0x5c>)
 800b876:	f013 faa3 	bl	801edc0 <sys_mutex_lock>
        {
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f7ff ff36 	bl	800b6ec <low_level_input>
 800b880:	60b8      	str	r0, [r7, #8]
          if (netif->input( p, netif) != ERR_OK )
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00a      	beq.n	800b89e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	68f9      	ldr	r1, [r7, #12]
 800b88e:	68b8      	ldr	r0, [r7, #8]
 800b890:	4798      	blx	r3
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <ethernetif_input+0x4a>
          }
        }
 800b898:	68b8      	ldr	r0, [r7, #8]
 800b89a:	f00a f8f7 	bl	8015a8c <pbuf_free>
        UNLOCK_TCPIP_CORE();
      } while(p!=NULL);
    }
 800b89e:	4804      	ldr	r0, [pc, #16]	; (800b8b0 <ethernetif_input+0x5c>)
 800b8a0:	f013 fa9d 	bl	801edde <sys_mutex_unlock>
  }
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e4      	bne.n	800b874 <ethernetif_input+0x20>
      do
 800b8aa:	e7d9      	b.n	800b860 <ethernetif_input+0xc>
 800b8ac:	20000b2c 	.word	0x20000b2c
 800b8b0:	2001099c 	.word	0x2001099c

0800b8b4 <ethernetif_init>:
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
  LWIP_ASSERT("netif != NULL", (netif != NULL));

 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
#if LWIP_NETIF_HOSTNAME
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d106      	bne.n	800b8d0 <ethernetif_init+0x1c>
 800b8c2:	4b0e      	ldr	r3, [pc, #56]	; (800b8fc <ethernetif_init+0x48>)
 800b8c4:	f240 2235 	movw	r2, #565	; 0x235
 800b8c8:	490d      	ldr	r1, [pc, #52]	; (800b900 <ethernetif_init+0x4c>)
 800b8ca:	480e      	ldr	r0, [pc, #56]	; (800b904 <ethernetif_init+0x50>)
 800b8cc:	f013 fb3e 	bl	801ef4c <iprintf>
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
  netif->name[1] = IFNAME1;
  /* We directly use etharp_output() here to save a function call.
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2273      	movs	r2, #115	; 0x73
 800b8d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   * You can instead declare your own function an call etharp_output()
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2274      	movs	r2, #116	; 0x74
 800b8dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
#else
  /* The user should write its own code in low_level_output_arp_off function */
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a09      	ldr	r2, [pc, #36]	; (800b908 <ethernetif_init+0x54>)
 800b8e4:	615a      	str	r2, [r3, #20]
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;

  /* initialize the hardware */
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4a08      	ldr	r2, [pc, #32]	; (800b90c <ethernetif_init+0x58>)
 800b8ea:	619a      	str	r2, [r3, #24]
  low_level_init(netif);

  return ERR_OK;
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7ff fd7d 	bl	800b3ec <low_level_init>
}

 800b8f2:	2300      	movs	r3, #0
/* USER CODE BEGIN 6 */
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3708      	adds	r7, #8
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	08021058 	.word	0x08021058
 800b900:	08021074 	.word	0x08021074
 800b904:	08021084 	.word	0x08021084
 800b908:	0801cf6d 	.word	0x0801cf6d
 800b90c:	0800b5b1 	.word	0x0800b5b1

0800b910 <sys_now>:
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
}
 800b910:	b580      	push	{r7, lr}
 800b912:	af00      	add	r7, sp, #0

 800b914:	f7f6 fa90 	bl	8001e38 <HAL_GetTick>
 800b918:	4603      	mov	r3, r0
/* USER CODE END 6 */
 800b91a:	4618      	mov	r0, r3
 800b91c:	bd80      	pop	{r7, pc}
	...

0800b920 <ethernetif_set_link>:
  */
void ethernetif_set_link(void const *argument)

{
  uint32_t regvalue = 0;
  struct link_str *link_arg = (struct link_str *)argument;
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]

 800b928:	2300      	movs	r3, #0
 800b92a:	60bb      	str	r3, [r7, #8]
  for(;;)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	60fb      	str	r3, [r7, #12]
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);

    regvalue &= PHY_LINKED_STATUS;
 800b930:	f107 0308 	add.w	r3, r7, #8
 800b934:	461a      	mov	r2, r3
 800b936:	2101      	movs	r1, #1
 800b938:	4819      	ldr	r0, [pc, #100]	; (800b9a0 <ethernetif_set_link+0x80>)
 800b93a:	f7f8 fd6a 	bl	8004412 <HAL_ETH_ReadPHYRegister>

    /* Check whether the netif link down and the PHY link is up */
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	f003 0304 	and.w	r3, r3, #4
 800b944:	60bb      	str	r3, [r7, #8]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b94e:	f003 0304 	and.w	r3, r3, #4
 800b952:	2b00      	cmp	r3, #0
 800b954:	d108      	bne.n	800b968 <ethernetif_set_link+0x48>
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d005      	beq.n	800b968 <ethernetif_set_link+0x48>
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4618      	mov	r0, r3
 800b962:	f009 fc6f 	bl	8015244 <netif_set_link_up>
 800b966:	e011      	b.n	800b98c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b970:	089b      	lsrs	r3, r3, #2
 800b972:	f003 0301 	and.w	r3, r3, #1
 800b976:	b2db      	uxtb	r3, r3
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d007      	beq.n	800b98c <ethernetif_set_link+0x6c>
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d104      	bne.n	800b98c <ethernetif_set_link+0x6c>
      netif_set_link_down(link_arg->netif);
    }

 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4618      	mov	r0, r3
 800b988:	f009 fc90 	bl	80152ac <netif_set_link_down>
    /* Suspend thread for 200 ms */
    osDelay(200);
 800b98c:	4b05      	ldr	r3, [pc, #20]	; (800b9a4 <ethernetif_set_link+0x84>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2101      	movs	r1, #1
 800b992:	4618      	mov	r0, r3
 800b994:	f004 f9d8 	bl	800fd48 <xEventGroupSetBits>
  }
}

 800b998:	20c8      	movs	r0, #200	; 0xc8
 800b99a:	f003 ff64 	bl	800f866 <osDelay>
    regvalue &= PHY_LINKED_STATUS;
 800b99e:	e7c7      	b.n	800b930 <ethernetif_set_link+0x10>
 800b9a0:	2000f144 	.word	0x2000f144
 800b9a4:	20000b1c 	.word	0x20000b1c

0800b9a8 <ethernetif_update_config>:
  */
void ethernetif_update_config(struct netif *netif)
{
  __IO uint32_t tickstart = 0;
  uint32_t regvalue = 0;

 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  if(netif_is_link_up(netif))
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	60fb      	str	r3, [r7, #12]
  {
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	60bb      	str	r3, [r7, #8]
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9be:	089b      	lsrs	r3, r3, #2
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d05d      	beq.n	800ba86 <ethernetif_update_config+0xde>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800b9ca:	4b34      	ldr	r3, [pc, #208]	; (800ba9c <ethernetif_update_config+0xf4>)
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d03f      	beq.n	800ba52 <ethernetif_update_config+0xaa>

      /* Get tick */
      tickstart = HAL_GetTick();
 800b9d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	4830      	ldr	r0, [pc, #192]	; (800ba9c <ethernetif_update_config+0xf4>)
 800b9da:	f7f8 fd82 	bl	80044e2 <HAL_ETH_WritePHYRegister>

      /* Wait until the auto-negotiation will be completed */
      do
 800b9de:	f7f6 fa2b 	bl	8001e38 <HAL_GetTick>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	60fb      	str	r3, [r7, #12]
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800b9e6:	f107 0308 	add.w	r3, r7, #8
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	2101      	movs	r1, #1
 800b9ee:	482b      	ldr	r0, [pc, #172]	; (800ba9c <ethernetif_update_config+0xf4>)
 800b9f0:	f7f8 fd0f 	bl	8004412 <HAL_ETH_ReadPHYRegister>
        {
          /* In case of timeout */
          goto error;
 800b9f4:	f7f6 fa20 	bl	8001e38 <HAL_GetTick>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba02:	d828      	bhi.n	800ba56 <ethernetif_update_config+0xae>
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	f003 0320 	and.w	r3, r3, #32
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d0eb      	beq.n	800b9e6 <ethernetif_update_config+0x3e>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800ba0e:	f107 0308 	add.w	r3, r7, #8
 800ba12:	461a      	mov	r2, r3
 800ba14:	2131      	movs	r1, #49	; 0x31
 800ba16:	4821      	ldr	r0, [pc, #132]	; (800ba9c <ethernetif_update_config+0xf4>)
 800ba18:	f7f8 fcfb 	bl	8004412 <HAL_ETH_ReadPHYRegister>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	f003 0310 	and.w	r3, r3, #16
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d004      	beq.n	800ba30 <ethernetif_update_config+0x88>
      }
      else
      {
 800ba26:	4b1d      	ldr	r3, [pc, #116]	; (800ba9c <ethernetif_update_config+0xf4>)
 800ba28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba2c:	60da      	str	r2, [r3, #12]
 800ba2e:	e002      	b.n	800ba36 <ethernetif_update_config+0x8e>
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800ba30:	4b1a      	ldr	r3, [pc, #104]	; (800ba9c <ethernetif_update_config+0xf4>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	60da      	str	r2, [r3, #12]
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	f003 0304 	and.w	r3, r3, #4
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d003      	beq.n	800ba48 <ethernetif_update_config+0xa0>
      }
      else
      {
 800ba40:	4b16      	ldr	r3, [pc, #88]	; (800ba9c <ethernetif_update_config+0xf4>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	609a      	str	r2, [r3, #8]
 800ba46:	e016      	b.n	800ba76 <ethernetif_update_config+0xce>
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
      }
    }
    else /* AutoNegotiation Disable */
 800ba48:	4b14      	ldr	r3, [pc, #80]	; (800ba9c <ethernetif_update_config+0xf4>)
 800ba4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ba4e:	609a      	str	r2, [r3, #8]
 800ba50:	e011      	b.n	800ba76 <ethernetif_update_config+0xce>
    {
    error :
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 800ba52:	bf00      	nop
 800ba54:	e000      	b.n	800ba58 <ethernetif_update_config+0xb0>

 800ba56:	bf00      	nop

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
                                                     (uint16_t)(heth.Init.Speed >> 1)));
    }

 800ba58:	4b10      	ldr	r3, [pc, #64]	; (800ba9c <ethernetif_update_config+0xf4>)
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	08db      	lsrs	r3, r3, #3
 800ba5e:	b29a      	uxth	r2, r3
    /* ETHERNET MAC Re-Configuration */
 800ba60:	4b0e      	ldr	r3, [pc, #56]	; (800ba9c <ethernetif_update_config+0xf4>)
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	085b      	lsrs	r3, r3, #1
 800ba66:	b29b      	uxth	r3, r3

 800ba68:	4313      	orrs	r3, r2
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	2100      	movs	r1, #0
 800ba70:	480a      	ldr	r0, [pc, #40]	; (800ba9c <ethernetif_update_config+0xf4>)
 800ba72:	f7f8 fd36 	bl	80044e2 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800ba76:	2100      	movs	r1, #0
 800ba78:	4808      	ldr	r0, [pc, #32]	; (800ba9c <ethernetif_update_config+0xf4>)
 800ba7a:	f7f8 fdf7 	bl	800466c <HAL_ETH_ConfigMAC>
  }
  else
  {
 800ba7e:	4807      	ldr	r0, [pc, #28]	; (800ba9c <ethernetif_update_config+0xf4>)
 800ba80:	f7f8 fd95 	bl	80045ae <HAL_ETH_Start>
 800ba84:	e002      	b.n	800ba8c <ethernetif_update_config+0xe4>
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
  }

  ethernetif_notify_conn_changed(netif);
 800ba86:	4805      	ldr	r0, [pc, #20]	; (800ba9c <ethernetif_update_config+0xf4>)
 800ba88:	f7f8 fdc0 	bl	800460c <HAL_ETH_Stop>
}

/* USER CODE BEGIN 8 */
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f807 	bl	800baa0 <ethernetif_notify_conn_changed>
/**
 800ba92:	bf00      	nop
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	2000f144 	.word	0x2000f144

0800baa0 <ethernetif_notify_conn_changed>:
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]

}
/* USER CODE END 8 */
#endif /* LWIP_NETIF_LINK_CALLBACK */

 800baa8:	bf00      	nop
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	4603      	mov	r3, r0
 800babc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800babe:	79fb      	ldrb	r3, [r7, #7]
 800bac0:	4a08      	ldr	r2, [pc, #32]	; (800bae4 <disk_status+0x30>)
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4413      	add	r3, r2
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	79fa      	ldrb	r2, [r7, #7]
 800bacc:	4905      	ldr	r1, [pc, #20]	; (800bae4 <disk_status+0x30>)
 800bace:	440a      	add	r2, r1
 800bad0:	7a12      	ldrb	r2, [r2, #8]
 800bad2:	4610      	mov	r0, r2
 800bad4:	4798      	blx	r3
 800bad6:	4603      	mov	r3, r0
 800bad8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bada:	7bfb      	ldrb	r3, [r7, #15]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20000b58 	.word	0x20000b58

0800bae8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	4603      	mov	r3, r0
 800baf0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800baf6:	79fb      	ldrb	r3, [r7, #7]
 800baf8:	4a0d      	ldr	r2, [pc, #52]	; (800bb30 <disk_initialize+0x48>)
 800bafa:	5cd3      	ldrb	r3, [r2, r3]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d111      	bne.n	800bb24 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bb00:	79fb      	ldrb	r3, [r7, #7]
 800bb02:	4a0b      	ldr	r2, [pc, #44]	; (800bb30 <disk_initialize+0x48>)
 800bb04:	2101      	movs	r1, #1
 800bb06:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bb08:	79fb      	ldrb	r3, [r7, #7]
 800bb0a:	4a09      	ldr	r2, [pc, #36]	; (800bb30 <disk_initialize+0x48>)
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	4413      	add	r3, r2
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	79fa      	ldrb	r2, [r7, #7]
 800bb16:	4906      	ldr	r1, [pc, #24]	; (800bb30 <disk_initialize+0x48>)
 800bb18:	440a      	add	r2, r1
 800bb1a:	7a12      	ldrb	r2, [r2, #8]
 800bb1c:	4610      	mov	r0, r2
 800bb1e:	4798      	blx	r3
 800bb20:	4603      	mov	r3, r0
 800bb22:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	20000b58 	.word	0x20000b58

0800bb34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bb34:	b590      	push	{r4, r7, lr}
 800bb36:	b087      	sub	sp, #28
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60b9      	str	r1, [r7, #8]
 800bb3c:	607a      	str	r2, [r7, #4]
 800bb3e:	603b      	str	r3, [r7, #0]
 800bb40:	4603      	mov	r3, r0
 800bb42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
 800bb46:	4a0a      	ldr	r2, [pc, #40]	; (800bb70 <disk_read+0x3c>)
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	4413      	add	r3, r2
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	689c      	ldr	r4, [r3, #8]
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	4a07      	ldr	r2, [pc, #28]	; (800bb70 <disk_read+0x3c>)
 800bb54:	4413      	add	r3, r2
 800bb56:	7a18      	ldrb	r0, [r3, #8]
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	68b9      	ldr	r1, [r7, #8]
 800bb5e:	47a0      	blx	r4
 800bb60:	4603      	mov	r3, r0
 800bb62:	75fb      	strb	r3, [r7, #23]
  return res;
 800bb64:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	371c      	adds	r7, #28
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd90      	pop	{r4, r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20000b58 	.word	0x20000b58

0800bb74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bb74:	b590      	push	{r4, r7, lr}
 800bb76:	b087      	sub	sp, #28
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60b9      	str	r1, [r7, #8]
 800bb7c:	607a      	str	r2, [r7, #4]
 800bb7e:	603b      	str	r3, [r7, #0]
 800bb80:	4603      	mov	r3, r0
 800bb82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bb84:	7bfb      	ldrb	r3, [r7, #15]
 800bb86:	4a0a      	ldr	r2, [pc, #40]	; (800bbb0 <disk_write+0x3c>)
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4413      	add	r3, r2
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	68dc      	ldr	r4, [r3, #12]
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
 800bb92:	4a07      	ldr	r2, [pc, #28]	; (800bbb0 <disk_write+0x3c>)
 800bb94:	4413      	add	r3, r2
 800bb96:	7a18      	ldrb	r0, [r3, #8]
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	68b9      	ldr	r1, [r7, #8]
 800bb9e:	47a0      	blx	r4
 800bba0:	4603      	mov	r3, r0
 800bba2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bba4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	371c      	adds	r7, #28
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd90      	pop	{r4, r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20000b58 	.word	0x20000b58

0800bbb4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	4603      	mov	r3, r0
 800bbbc:	603a      	str	r2, [r7, #0]
 800bbbe:	71fb      	strb	r3, [r7, #7]
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bbc4:	79fb      	ldrb	r3, [r7, #7]
 800bbc6:	4a09      	ldr	r2, [pc, #36]	; (800bbec <disk_ioctl+0x38>)
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	4413      	add	r3, r2
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	691b      	ldr	r3, [r3, #16]
 800bbd0:	79fa      	ldrb	r2, [r7, #7]
 800bbd2:	4906      	ldr	r1, [pc, #24]	; (800bbec <disk_ioctl+0x38>)
 800bbd4:	440a      	add	r2, r1
 800bbd6:	7a10      	ldrb	r0, [r2, #8]
 800bbd8:	79b9      	ldrb	r1, [r7, #6]
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	4798      	blx	r3
 800bbde:	4603      	mov	r3, r0
 800bbe0:	73fb      	strb	r3, [r7, #15]
  return res;
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	20000b58 	.word	0x20000b58

0800bbf0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bc00:	89fb      	ldrh	r3, [r7, #14]
 800bc02:	021b      	lsls	r3, r3, #8
 800bc04:	b21a      	sxth	r2, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	b21b      	sxth	r3, r3
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	b21b      	sxth	r3, r3
 800bc10:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bc12:	89fb      	ldrh	r3, [r7, #14]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3714      	adds	r7, #20
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bc20:	b480      	push	{r7}
 800bc22:	b085      	sub	sp, #20
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	3303      	adds	r3, #3
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	021b      	lsls	r3, r3, #8
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	3202      	adds	r2, #2
 800bc38:	7812      	ldrb	r2, [r2, #0]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	021b      	lsls	r3, r3, #8
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	3201      	adds	r2, #1
 800bc46:	7812      	ldrb	r2, [r2, #0]
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	021b      	lsls	r3, r3, #8
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	7812      	ldrb	r2, [r2, #0]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]
	return rv;
 800bc58:	68fb      	ldr	r3, [r7, #12]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	460b      	mov	r3, r1
 800bc70:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	1c5a      	adds	r2, r3, #1
 800bc76:	607a      	str	r2, [r7, #4]
 800bc78:	887a      	ldrh	r2, [r7, #2]
 800bc7a:	b2d2      	uxtb	r2, r2
 800bc7c:	701a      	strb	r2, [r3, #0]
 800bc7e:	887b      	ldrh	r3, [r7, #2]
 800bc80:	0a1b      	lsrs	r3, r3, #8
 800bc82:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	1c5a      	adds	r2, r3, #1
 800bc88:	607a      	str	r2, [r7, #4]
 800bc8a:	887a      	ldrh	r2, [r7, #2]
 800bc8c:	b2d2      	uxtb	r2, r2
 800bc8e:	701a      	strb	r2, [r3, #0]
}
 800bc90:	bf00      	nop
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	1c5a      	adds	r2, r3, #1
 800bcaa:	607a      	str	r2, [r7, #4]
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	b2d2      	uxtb	r2, r2
 800bcb0:	701a      	strb	r2, [r3, #0]
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	0a1b      	lsrs	r3, r3, #8
 800bcb6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	607a      	str	r2, [r7, #4]
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	b2d2      	uxtb	r2, r2
 800bcc2:	701a      	strb	r2, [r3, #0]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	0a1b      	lsrs	r3, r3, #8
 800bcc8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	1c5a      	adds	r2, r3, #1
 800bcce:	607a      	str	r2, [r7, #4]
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	b2d2      	uxtb	r2, r2
 800bcd4:	701a      	strb	r2, [r3, #0]
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	0a1b      	lsrs	r3, r3, #8
 800bcda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	1c5a      	adds	r2, r3, #1
 800bce0:	607a      	str	r2, [r7, #4]
 800bce2:	683a      	ldr	r2, [r7, #0]
 800bce4:	b2d2      	uxtb	r2, r2
 800bce6:	701a      	strb	r2, [r3, #0]
}
 800bce8:	bf00      	nop
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bcf4:	b480      	push	{r7}
 800bcf6:	b087      	sub	sp, #28
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00d      	beq.n	800bd2a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	1c53      	adds	r3, r2, #1
 800bd12:	613b      	str	r3, [r7, #16]
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	1c59      	adds	r1, r3, #1
 800bd18:	6179      	str	r1, [r7, #20]
 800bd1a:	7812      	ldrb	r2, [r2, #0]
 800bd1c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	3b01      	subs	r3, #1
 800bd22:	607b      	str	r3, [r7, #4]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1f1      	bne.n	800bd0e <mem_cpy+0x1a>
	}
}
 800bd2a:	bf00      	nop
 800bd2c:	371c      	adds	r7, #28
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr

0800bd36 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bd36:	b480      	push	{r7}
 800bd38:	b087      	sub	sp, #28
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	60f8      	str	r0, [r7, #12]
 800bd3e:	60b9      	str	r1, [r7, #8]
 800bd40:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	1c5a      	adds	r2, r3, #1
 800bd4a:	617a      	str	r2, [r7, #20]
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	b2d2      	uxtb	r2, r2
 800bd50:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	3b01      	subs	r3, #1
 800bd56:	607b      	str	r3, [r7, #4]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1f3      	bne.n	800bd46 <mem_set+0x10>
}
 800bd5e:	bf00      	nop
 800bd60:	bf00      	nop
 800bd62:	371c      	adds	r7, #28
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bd6c:	b480      	push	{r7}
 800bd6e:	b089      	sub	sp, #36	; 0x24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	61fb      	str	r3, [r7, #28]
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	1c5a      	adds	r2, r3, #1
 800bd88:	61fa      	str	r2, [r7, #28]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	1c5a      	adds	r2, r3, #1
 800bd92:	61ba      	str	r2, [r7, #24]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	1acb      	subs	r3, r1, r3
 800bd98:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	607b      	str	r3, [r7, #4]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d002      	beq.n	800bdac <mem_cmp+0x40>
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d0eb      	beq.n	800bd84 <mem_cmp+0x18>

	return r;
 800bdac:	697b      	ldr	r3, [r7, #20]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3724      	adds	r7, #36	; 0x24
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr

0800bdba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bdba:	b480      	push	{r7}
 800bdbc:	b083      	sub	sp, #12
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bdc4:	e002      	b.n	800bdcc <chk_chr+0x12>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	607b      	str	r3, [r7, #4]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d005      	beq.n	800bde0 <chk_chr+0x26>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d1f2      	bne.n	800bdc6 <chk_chr+0xc>
	return *str;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	781b      	ldrb	r3, [r3, #0]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d009      	beq.n	800be12 <lock_fs+0x22>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	691b      	ldr	r3, [r3, #16]
 800be02:	4618      	mov	r0, r3
 800be04:	f003 fc76 	bl	800f6f4 <ff_req_grant>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d001      	beq.n	800be12 <lock_fs+0x22>
 800be0e:	2301      	movs	r3, #1
 800be10:	e000      	b.n	800be14 <lock_fs+0x24>
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	460b      	mov	r3, r1
 800be26:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00d      	beq.n	800be4a <unlock_fs+0x2e>
 800be2e:	78fb      	ldrb	r3, [r7, #3]
 800be30:	2b0c      	cmp	r3, #12
 800be32:	d00a      	beq.n	800be4a <unlock_fs+0x2e>
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	2b0b      	cmp	r3, #11
 800be38:	d007      	beq.n	800be4a <unlock_fs+0x2e>
 800be3a:	78fb      	ldrb	r3, [r7, #3]
 800be3c:	2b0f      	cmp	r3, #15
 800be3e:	d004      	beq.n	800be4a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	691b      	ldr	r3, [r3, #16]
 800be44:	4618      	mov	r0, r3
 800be46:	f003 fc6a 	bl	800f71e <ff_rel_grant>
	}
}
 800be4a:	bf00      	nop
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
	...

0800be54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be5e:	2300      	movs	r3, #0
 800be60:	60bb      	str	r3, [r7, #8]
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	60fb      	str	r3, [r7, #12]
 800be66:	e029      	b.n	800bebc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800be68:	4a27      	ldr	r2, [pc, #156]	; (800bf08 <chk_lock+0xb4>)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	011b      	lsls	r3, r3, #4
 800be6e:	4413      	add	r3, r2
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d01d      	beq.n	800beb2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be76:	4a24      	ldr	r2, [pc, #144]	; (800bf08 <chk_lock+0xb4>)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	011b      	lsls	r3, r3, #4
 800be7c:	4413      	add	r3, r2
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	429a      	cmp	r2, r3
 800be86:	d116      	bne.n	800beb6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800be88:	4a1f      	ldr	r2, [pc, #124]	; (800bf08 <chk_lock+0xb4>)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	011b      	lsls	r3, r3, #4
 800be8e:	4413      	add	r3, r2
 800be90:	3304      	adds	r3, #4
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be98:	429a      	cmp	r2, r3
 800be9a:	d10c      	bne.n	800beb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be9c:	4a1a      	ldr	r2, [pc, #104]	; (800bf08 <chk_lock+0xb4>)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	011b      	lsls	r3, r3, #4
 800bea2:	4413      	add	r3, r2
 800bea4:	3308      	adds	r3, #8
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800beac:	429a      	cmp	r2, r3
 800beae:	d102      	bne.n	800beb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800beb0:	e007      	b.n	800bec2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800beb2:	2301      	movs	r3, #1
 800beb4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3301      	adds	r3, #1
 800beba:	60fb      	str	r3, [r7, #12]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d9d2      	bls.n	800be68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d109      	bne.n	800bedc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d102      	bne.n	800bed4 <chk_lock+0x80>
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	2b02      	cmp	r3, #2
 800bed2:	d101      	bne.n	800bed8 <chk_lock+0x84>
 800bed4:	2300      	movs	r3, #0
 800bed6:	e010      	b.n	800befa <chk_lock+0xa6>
 800bed8:	2312      	movs	r3, #18
 800beda:	e00e      	b.n	800befa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d108      	bne.n	800bef4 <chk_lock+0xa0>
 800bee2:	4a09      	ldr	r2, [pc, #36]	; (800bf08 <chk_lock+0xb4>)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	011b      	lsls	r3, r3, #4
 800bee8:	4413      	add	r3, r2
 800beea:	330c      	adds	r3, #12
 800beec:	881b      	ldrh	r3, [r3, #0]
 800beee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bef2:	d101      	bne.n	800bef8 <chk_lock+0xa4>
 800bef4:	2310      	movs	r3, #16
 800bef6:	e000      	b.n	800befa <chk_lock+0xa6>
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	20000b38 	.word	0x20000b38

0800bf0c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf12:	2300      	movs	r3, #0
 800bf14:	607b      	str	r3, [r7, #4]
 800bf16:	e002      	b.n	800bf1e <enq_lock+0x12>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	607b      	str	r3, [r7, #4]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d806      	bhi.n	800bf32 <enq_lock+0x26>
 800bf24:	4a09      	ldr	r2, [pc, #36]	; (800bf4c <enq_lock+0x40>)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	011b      	lsls	r3, r3, #4
 800bf2a:	4413      	add	r3, r2
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d1f2      	bne.n	800bf18 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	bf14      	ite	ne
 800bf38:	2301      	movne	r3, #1
 800bf3a:	2300      	moveq	r3, #0
 800bf3c:	b2db      	uxtb	r3, r3
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	20000b38 	.word	0x20000b38

0800bf50 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	60fb      	str	r3, [r7, #12]
 800bf5e:	e01f      	b.n	800bfa0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bf60:	4a41      	ldr	r2, [pc, #260]	; (800c068 <inc_lock+0x118>)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	011b      	lsls	r3, r3, #4
 800bf66:	4413      	add	r3, r2
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d113      	bne.n	800bf9a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bf72:	4a3d      	ldr	r2, [pc, #244]	; (800c068 <inc_lock+0x118>)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	011b      	lsls	r3, r3, #4
 800bf78:	4413      	add	r3, r2
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d109      	bne.n	800bf9a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bf86:	4a38      	ldr	r2, [pc, #224]	; (800c068 <inc_lock+0x118>)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	011b      	lsls	r3, r3, #4
 800bf8c:	4413      	add	r3, r2
 800bf8e:	3308      	adds	r3, #8
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d006      	beq.n	800bfa8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d9dc      	bls.n	800bf60 <inc_lock+0x10>
 800bfa6:	e000      	b.n	800bfaa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bfa8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d132      	bne.n	800c016 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	60fb      	str	r3, [r7, #12]
 800bfb4:	e002      	b.n	800bfbc <inc_lock+0x6c>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	60fb      	str	r3, [r7, #12]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d806      	bhi.n	800bfd0 <inc_lock+0x80>
 800bfc2:	4a29      	ldr	r2, [pc, #164]	; (800c068 <inc_lock+0x118>)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	011b      	lsls	r3, r3, #4
 800bfc8:	4413      	add	r3, r2
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1f2      	bne.n	800bfb6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	d101      	bne.n	800bfda <inc_lock+0x8a>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	e040      	b.n	800c05c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	4922      	ldr	r1, [pc, #136]	; (800c068 <inc_lock+0x118>)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	011b      	lsls	r3, r3, #4
 800bfe4:	440b      	add	r3, r1
 800bfe6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	689a      	ldr	r2, [r3, #8]
 800bfec:	491e      	ldr	r1, [pc, #120]	; (800c068 <inc_lock+0x118>)
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	011b      	lsls	r3, r3, #4
 800bff2:	440b      	add	r3, r1
 800bff4:	3304      	adds	r3, #4
 800bff6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	695a      	ldr	r2, [r3, #20]
 800bffc:	491a      	ldr	r1, [pc, #104]	; (800c068 <inc_lock+0x118>)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	011b      	lsls	r3, r3, #4
 800c002:	440b      	add	r3, r1
 800c004:	3308      	adds	r3, #8
 800c006:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c008:	4a17      	ldr	r2, [pc, #92]	; (800c068 <inc_lock+0x118>)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	011b      	lsls	r3, r3, #4
 800c00e:	4413      	add	r3, r2
 800c010:	330c      	adds	r3, #12
 800c012:	2200      	movs	r2, #0
 800c014:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d009      	beq.n	800c030 <inc_lock+0xe0>
 800c01c:	4a12      	ldr	r2, [pc, #72]	; (800c068 <inc_lock+0x118>)
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	011b      	lsls	r3, r3, #4
 800c022:	4413      	add	r3, r2
 800c024:	330c      	adds	r3, #12
 800c026:	881b      	ldrh	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d001      	beq.n	800c030 <inc_lock+0xe0>
 800c02c:	2300      	movs	r3, #0
 800c02e:	e015      	b.n	800c05c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d108      	bne.n	800c048 <inc_lock+0xf8>
 800c036:	4a0c      	ldr	r2, [pc, #48]	; (800c068 <inc_lock+0x118>)
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	011b      	lsls	r3, r3, #4
 800c03c:	4413      	add	r3, r2
 800c03e:	330c      	adds	r3, #12
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	3301      	adds	r3, #1
 800c044:	b29a      	uxth	r2, r3
 800c046:	e001      	b.n	800c04c <inc_lock+0xfc>
 800c048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c04c:	4906      	ldr	r1, [pc, #24]	; (800c068 <inc_lock+0x118>)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	011b      	lsls	r3, r3, #4
 800c052:	440b      	add	r3, r1
 800c054:	330c      	adds	r3, #12
 800c056:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	3301      	adds	r3, #1
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	20000b38 	.word	0x20000b38

0800c06c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b085      	sub	sp, #20
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	3b01      	subs	r3, #1
 800c078:	607b      	str	r3, [r7, #4]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d825      	bhi.n	800c0cc <dec_lock+0x60>
		n = Files[i].ctr;
 800c080:	4a17      	ldr	r2, [pc, #92]	; (800c0e0 <dec_lock+0x74>)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	011b      	lsls	r3, r3, #4
 800c086:	4413      	add	r3, r2
 800c088:	330c      	adds	r3, #12
 800c08a:	881b      	ldrh	r3, [r3, #0]
 800c08c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c08e:	89fb      	ldrh	r3, [r7, #14]
 800c090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c094:	d101      	bne.n	800c09a <dec_lock+0x2e>
 800c096:	2300      	movs	r3, #0
 800c098:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c09a:	89fb      	ldrh	r3, [r7, #14]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <dec_lock+0x3a>
 800c0a0:	89fb      	ldrh	r3, [r7, #14]
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c0a6:	4a0e      	ldr	r2, [pc, #56]	; (800c0e0 <dec_lock+0x74>)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	011b      	lsls	r3, r3, #4
 800c0ac:	4413      	add	r3, r2
 800c0ae:	330c      	adds	r3, #12
 800c0b0:	89fa      	ldrh	r2, [r7, #14]
 800c0b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c0b4:	89fb      	ldrh	r3, [r7, #14]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d105      	bne.n	800c0c6 <dec_lock+0x5a>
 800c0ba:	4a09      	ldr	r2, [pc, #36]	; (800c0e0 <dec_lock+0x74>)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	011b      	lsls	r3, r3, #4
 800c0c0:	4413      	add	r3, r2
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	737b      	strb	r3, [r7, #13]
 800c0ca:	e001      	b.n	800c0d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c0d0:	7b7b      	ldrb	r3, [r7, #13]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3714      	adds	r7, #20
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	20000b38 	.word	0x20000b38

0800c0e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	60fb      	str	r3, [r7, #12]
 800c0f0:	e010      	b.n	800c114 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c0f2:	4a0d      	ldr	r2, [pc, #52]	; (800c128 <clear_lock+0x44>)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	011b      	lsls	r3, r3, #4
 800c0f8:	4413      	add	r3, r2
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d105      	bne.n	800c10e <clear_lock+0x2a>
 800c102:	4a09      	ldr	r2, [pc, #36]	; (800c128 <clear_lock+0x44>)
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	011b      	lsls	r3, r3, #4
 800c108:	4413      	add	r3, r2
 800c10a:	2200      	movs	r2, #0
 800c10c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	3301      	adds	r3, #1
 800c112:	60fb      	str	r3, [r7, #12]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2b01      	cmp	r3, #1
 800c118:	d9eb      	bls.n	800c0f2 <clear_lock+0xe>
	}
}
 800c11a:	bf00      	nop
 800c11c:	bf00      	nop
 800c11e:	3714      	adds	r7, #20
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr
 800c128:	20000b38 	.word	0x20000b38

0800c12c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c134:	2300      	movs	r3, #0
 800c136:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	78db      	ldrb	r3, [r3, #3]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d034      	beq.n	800c1aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c144:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	7858      	ldrb	r0, [r3, #1]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c150:	2301      	movs	r3, #1
 800c152:	697a      	ldr	r2, [r7, #20]
 800c154:	f7ff fd0e 	bl	800bb74 <disk_write>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d002      	beq.n	800c164 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c15e:	2301      	movs	r3, #1
 800c160:	73fb      	strb	r3, [r7, #15]
 800c162:	e022      	b.n	800c1aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	1ad2      	subs	r2, r2, r3
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	429a      	cmp	r2, r3
 800c178:	d217      	bcs.n	800c1aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	789b      	ldrb	r3, [r3, #2]
 800c17e:	613b      	str	r3, [r7, #16]
 800c180:	e010      	b.n	800c1a4 <sync_window+0x78>
					wsect += fs->fsize;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a1b      	ldr	r3, [r3, #32]
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	4413      	add	r3, r2
 800c18a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	7858      	ldrb	r0, [r3, #1]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c196:	2301      	movs	r3, #1
 800c198:	697a      	ldr	r2, [r7, #20]
 800c19a:	f7ff fceb 	bl	800bb74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	613b      	str	r3, [r7, #16]
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d8eb      	bhi.n	800c182 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3718      	adds	r7, #24
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d01b      	beq.n	800c204 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f7ff ffad 	bl	800c12c <sync_window>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c1d6:	7bfb      	ldrb	r3, [r7, #15]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d113      	bne.n	800c204 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	7858      	ldrb	r0, [r3, #1]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	683a      	ldr	r2, [r7, #0]
 800c1ea:	f7ff fca3 	bl	800bb34 <disk_read>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d004      	beq.n	800c1fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800c204:	7bfb      	ldrb	r3, [r7, #15]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
	...

0800c210 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7ff ff87 	bl	800c12c <sync_window>
 800c21e:	4603      	mov	r3, r0
 800c220:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d158      	bne.n	800c2da <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b03      	cmp	r3, #3
 800c22e:	d148      	bne.n	800c2c2 <sync_fs+0xb2>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	791b      	ldrb	r3, [r3, #4]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d144      	bne.n	800c2c2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	3338      	adds	r3, #56	; 0x38
 800c23c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c240:	2100      	movs	r1, #0
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff fd77 	bl	800bd36 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	3338      	adds	r3, #56	; 0x38
 800c24c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c250:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c254:	4618      	mov	r0, r3
 800c256:	f7ff fd06 	bl	800bc66 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	3338      	adds	r3, #56	; 0x38
 800c25e:	4921      	ldr	r1, [pc, #132]	; (800c2e4 <sync_fs+0xd4>)
 800c260:	4618      	mov	r0, r3
 800c262:	f7ff fd1b 	bl	800bc9c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	3338      	adds	r3, #56	; 0x38
 800c26a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c26e:	491e      	ldr	r1, [pc, #120]	; (800c2e8 <sync_fs+0xd8>)
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff fd13 	bl	800bc9c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	3338      	adds	r3, #56	; 0x38
 800c27a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	699b      	ldr	r3, [r3, #24]
 800c282:	4619      	mov	r1, r3
 800c284:	4610      	mov	r0, r2
 800c286:	f7ff fd09 	bl	800bc9c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	3338      	adds	r3, #56	; 0x38
 800c28e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	695b      	ldr	r3, [r3, #20]
 800c296:	4619      	mov	r1, r3
 800c298:	4610      	mov	r0, r2
 800c29a:	f7ff fcff 	bl	800bc9c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a2:	1c5a      	adds	r2, r3, #1
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	7858      	ldrb	r0, [r3, #1]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	f7ff fc5c 	bl	800bb74 <disk_write>
			fs->fsi_flag = 0;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	785b      	ldrb	r3, [r3, #1]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7ff fc72 	bl	800bbb4 <disk_ioctl>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d001      	beq.n	800c2da <sync_fs+0xca>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	41615252 	.word	0x41615252
 800c2e8:	61417272 	.word	0x61417272

0800c2ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	3b02      	subs	r3, #2
 800c2fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	69db      	ldr	r3, [r3, #28]
 800c300:	3b02      	subs	r3, #2
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	429a      	cmp	r2, r3
 800c306:	d301      	bcc.n	800c30c <clust2sect+0x20>
 800c308:	2300      	movs	r3, #0
 800c30a:	e008      	b.n	800c31e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	895b      	ldrh	r3, [r3, #10]
 800c310:	461a      	mov	r2, r3
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	fb03 f202 	mul.w	r2, r3, r2
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c31c:	4413      	add	r3, r2
}
 800c31e:	4618      	mov	r0, r3
 800c320:	370c      	adds	r7, #12
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr

0800c32a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b086      	sub	sp, #24
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
 800c332:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d904      	bls.n	800c34a <get_fat+0x20>
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	69db      	ldr	r3, [r3, #28]
 800c344:	683a      	ldr	r2, [r7, #0]
 800c346:	429a      	cmp	r2, r3
 800c348:	d302      	bcc.n	800c350 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c34a:	2301      	movs	r3, #1
 800c34c:	617b      	str	r3, [r7, #20]
 800c34e:	e08f      	b.n	800c470 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c350:	f04f 33ff 	mov.w	r3, #4294967295
 800c354:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	2b03      	cmp	r3, #3
 800c35c:	d062      	beq.n	800c424 <get_fat+0xfa>
 800c35e:	2b03      	cmp	r3, #3
 800c360:	dc7c      	bgt.n	800c45c <get_fat+0x132>
 800c362:	2b01      	cmp	r3, #1
 800c364:	d002      	beq.n	800c36c <get_fat+0x42>
 800c366:	2b02      	cmp	r3, #2
 800c368:	d042      	beq.n	800c3f0 <get_fat+0xc6>
 800c36a:	e077      	b.n	800c45c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	60fb      	str	r3, [r7, #12]
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	085b      	lsrs	r3, r3, #1
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	4413      	add	r3, r2
 800c378:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	0a5b      	lsrs	r3, r3, #9
 800c382:	4413      	add	r3, r2
 800c384:	4619      	mov	r1, r3
 800c386:	6938      	ldr	r0, [r7, #16]
 800c388:	f7ff ff14 	bl	800c1b4 <move_window>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d167      	bne.n	800c462 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	1c5a      	adds	r2, r3, #1
 800c396:	60fa      	str	r2, [r7, #12]
 800c398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c39c:	693a      	ldr	r2, [r7, #16]
 800c39e:	4413      	add	r3, r2
 800c3a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c3a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	0a5b      	lsrs	r3, r3, #9
 800c3ae:	4413      	add	r3, r2
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6938      	ldr	r0, [r7, #16]
 800c3b4:	f7ff fefe 	bl	800c1b4 <move_window>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d153      	bne.n	800c466 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3c4:	693a      	ldr	r2, [r7, #16]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c3cc:	021b      	lsls	r3, r3, #8
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	f003 0301 	and.w	r3, r3, #1
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <get_fat+0xbc>
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	091b      	lsrs	r3, r3, #4
 800c3e4:	e002      	b.n	800c3ec <get_fat+0xc2>
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3ec:	617b      	str	r3, [r7, #20]
			break;
 800c3ee:	e03f      	b.n	800c470 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	0a1b      	lsrs	r3, r3, #8
 800c3f8:	4413      	add	r3, r2
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	6938      	ldr	r0, [r7, #16]
 800c3fe:	f7ff fed9 	bl	800c1b4 <move_window>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d130      	bne.n	800c46a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	005b      	lsls	r3, r3, #1
 800c412:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c416:	4413      	add	r3, r2
 800c418:	4618      	mov	r0, r3
 800c41a:	f7ff fbe9 	bl	800bbf0 <ld_word>
 800c41e:	4603      	mov	r3, r0
 800c420:	617b      	str	r3, [r7, #20]
			break;
 800c422:	e025      	b.n	800c470 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	09db      	lsrs	r3, r3, #7
 800c42c:	4413      	add	r3, r2
 800c42e:	4619      	mov	r1, r3
 800c430:	6938      	ldr	r0, [r7, #16]
 800c432:	f7ff febf 	bl	800c1b4 <move_window>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d118      	bne.n	800c46e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c44a:	4413      	add	r3, r2
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7ff fbe7 	bl	800bc20 <ld_dword>
 800c452:	4603      	mov	r3, r0
 800c454:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c458:	617b      	str	r3, [r7, #20]
			break;
 800c45a:	e009      	b.n	800c470 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c45c:	2301      	movs	r3, #1
 800c45e:	617b      	str	r3, [r7, #20]
 800c460:	e006      	b.n	800c470 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c462:	bf00      	nop
 800c464:	e004      	b.n	800c470 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c466:	bf00      	nop
 800c468:	e002      	b.n	800c470 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c46a:	bf00      	nop
 800c46c:	e000      	b.n	800c470 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c46e:	bf00      	nop
		}
	}

	return val;
 800c470:	697b      	ldr	r3, [r7, #20]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3718      	adds	r7, #24
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c47a:	b590      	push	{r4, r7, lr}
 800c47c:	b089      	sub	sp, #36	; 0x24
 800c47e:	af00      	add	r7, sp, #0
 800c480:	60f8      	str	r0, [r7, #12]
 800c482:	60b9      	str	r1, [r7, #8]
 800c484:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c486:	2302      	movs	r3, #2
 800c488:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	f240 80d2 	bls.w	800c636 <put_fat+0x1bc>
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	69db      	ldr	r3, [r3, #28]
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	429a      	cmp	r2, r3
 800c49a:	f080 80cc 	bcs.w	800c636 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	f000 8096 	beq.w	800c5d4 <put_fat+0x15a>
 800c4a8:	2b03      	cmp	r3, #3
 800c4aa:	f300 80cd 	bgt.w	800c648 <put_fat+0x1ce>
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d002      	beq.n	800c4b8 <put_fat+0x3e>
 800c4b2:	2b02      	cmp	r3, #2
 800c4b4:	d06e      	beq.n	800c594 <put_fat+0x11a>
 800c4b6:	e0c7      	b.n	800c648 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	61bb      	str	r3, [r7, #24]
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	085b      	lsrs	r3, r3, #1
 800c4c0:	69ba      	ldr	r2, [r7, #24]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	0a5b      	lsrs	r3, r3, #9
 800c4ce:	4413      	add	r3, r2
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f7ff fe6e 	bl	800c1b4 <move_window>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c4dc:	7ffb      	ldrb	r3, [r7, #31]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f040 80ab 	bne.w	800c63a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	1c59      	adds	r1, r3, #1
 800c4ee:	61b9      	str	r1, [r7, #24]
 800c4f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4f4:	4413      	add	r3, r2
 800c4f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	f003 0301 	and.w	r3, r3, #1
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00d      	beq.n	800c51e <put_fat+0xa4>
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	b25b      	sxtb	r3, r3
 800c508:	f003 030f 	and.w	r3, r3, #15
 800c50c:	b25a      	sxtb	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	b2db      	uxtb	r3, r3
 800c512:	011b      	lsls	r3, r3, #4
 800c514:	b25b      	sxtb	r3, r3
 800c516:	4313      	orrs	r3, r2
 800c518:	b25b      	sxtb	r3, r3
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	e001      	b.n	800c522 <put_fat+0xa8>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	b2db      	uxtb	r3, r3
 800c522:	697a      	ldr	r2, [r7, #20]
 800c524:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2201      	movs	r2, #1
 800c52a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	0a5b      	lsrs	r3, r3, #9
 800c534:	4413      	add	r3, r2
 800c536:	4619      	mov	r1, r3
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f7ff fe3b 	bl	800c1b4 <move_window>
 800c53e:	4603      	mov	r3, r0
 800c540:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c542:	7ffb      	ldrb	r3, [r7, #31]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d17a      	bne.n	800c63e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c554:	4413      	add	r3, r2
 800c556:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	f003 0301 	and.w	r3, r3, #1
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d003      	beq.n	800c56a <put_fat+0xf0>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	091b      	lsrs	r3, r3, #4
 800c566:	b2db      	uxtb	r3, r3
 800c568:	e00e      	b.n	800c588 <put_fat+0x10e>
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	b25b      	sxtb	r3, r3
 800c570:	f023 030f 	bic.w	r3, r3, #15
 800c574:	b25a      	sxtb	r2, r3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	0a1b      	lsrs	r3, r3, #8
 800c57a:	b25b      	sxtb	r3, r3
 800c57c:	f003 030f 	and.w	r3, r3, #15
 800c580:	b25b      	sxtb	r3, r3
 800c582:	4313      	orrs	r3, r2
 800c584:	b25b      	sxtb	r3, r3
 800c586:	b2db      	uxtb	r3, r3
 800c588:	697a      	ldr	r2, [r7, #20]
 800c58a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2201      	movs	r2, #1
 800c590:	70da      	strb	r2, [r3, #3]
			break;
 800c592:	e059      	b.n	800c648 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	0a1b      	lsrs	r3, r3, #8
 800c59c:	4413      	add	r3, r2
 800c59e:	4619      	mov	r1, r3
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	f7ff fe07 	bl	800c1b4 <move_window>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c5aa:	7ffb      	ldrb	r3, [r7, #31]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d148      	bne.n	800c642 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c5be:	4413      	add	r3, r2
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	b292      	uxth	r2, r2
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7ff fb4d 	bl	800bc66 <st_word>
			fs->wflag = 1;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	70da      	strb	r2, [r3, #3]
			break;
 800c5d2:	e039      	b.n	800c648 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	09db      	lsrs	r3, r3, #7
 800c5dc:	4413      	add	r3, r2
 800c5de:	4619      	mov	r1, r3
 800c5e0:	68f8      	ldr	r0, [r7, #12]
 800c5e2:	f7ff fde7 	bl	800c1b4 <move_window>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c5ea:	7ffb      	ldrb	r3, [r7, #31]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d12a      	bne.n	800c646 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c604:	4413      	add	r3, r2
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff fb0a 	bl	800bc20 <ld_dword>
 800c60c:	4603      	mov	r3, r0
 800c60e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c612:	4323      	orrs	r3, r4
 800c614:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c624:	4413      	add	r3, r2
 800c626:	6879      	ldr	r1, [r7, #4]
 800c628:	4618      	mov	r0, r3
 800c62a:	f7ff fb37 	bl	800bc9c <st_dword>
			fs->wflag = 1;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2201      	movs	r2, #1
 800c632:	70da      	strb	r2, [r3, #3]
			break;
 800c634:	e008      	b.n	800c648 <put_fat+0x1ce>
		}
	}
 800c636:	bf00      	nop
 800c638:	e006      	b.n	800c648 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c63a:	bf00      	nop
 800c63c:	e004      	b.n	800c648 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c63e:	bf00      	nop
 800c640:	e002      	b.n	800c648 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c642:	bf00      	nop
 800c644:	e000      	b.n	800c648 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c646:	bf00      	nop
	return res;
 800c648:	7ffb      	ldrb	r3, [r7, #31]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3724      	adds	r7, #36	; 0x24
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd90      	pop	{r4, r7, pc}

0800c652 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b088      	sub	sp, #32
 800c656:	af00      	add	r7, sp, #0
 800c658:	60f8      	str	r0, [r7, #12]
 800c65a:	60b9      	str	r1, [r7, #8]
 800c65c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d904      	bls.n	800c678 <remove_chain+0x26>
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	69db      	ldr	r3, [r3, #28]
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	429a      	cmp	r2, r3
 800c676:	d301      	bcc.n	800c67c <remove_chain+0x2a>
 800c678:	2302      	movs	r3, #2
 800c67a:	e04b      	b.n	800c714 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d00c      	beq.n	800c69c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c682:	f04f 32ff 	mov.w	r2, #4294967295
 800c686:	6879      	ldr	r1, [r7, #4]
 800c688:	69b8      	ldr	r0, [r7, #24]
 800c68a:	f7ff fef6 	bl	800c47a <put_fat>
 800c68e:	4603      	mov	r3, r0
 800c690:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c692:	7ffb      	ldrb	r3, [r7, #31]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d001      	beq.n	800c69c <remove_chain+0x4a>
 800c698:	7ffb      	ldrb	r3, [r7, #31]
 800c69a:	e03b      	b.n	800c714 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c69c:	68b9      	ldr	r1, [r7, #8]
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f7ff fe43 	bl	800c32a <get_fat>
 800c6a4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d031      	beq.n	800c710 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d101      	bne.n	800c6b6 <remove_chain+0x64>
 800c6b2:	2302      	movs	r3, #2
 800c6b4:	e02e      	b.n	800c714 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6bc:	d101      	bne.n	800c6c2 <remove_chain+0x70>
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e028      	b.n	800c714 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	68b9      	ldr	r1, [r7, #8]
 800c6c6:	69b8      	ldr	r0, [r7, #24]
 800c6c8:	f7ff fed7 	bl	800c47a <put_fat>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c6d0:	7ffb      	ldrb	r3, [r7, #31]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d001      	beq.n	800c6da <remove_chain+0x88>
 800c6d6:	7ffb      	ldrb	r3, [r7, #31]
 800c6d8:	e01c      	b.n	800c714 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	699a      	ldr	r2, [r3, #24]
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	69db      	ldr	r3, [r3, #28]
 800c6e2:	3b02      	subs	r3, #2
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d20b      	bcs.n	800c700 <remove_chain+0xae>
			fs->free_clst++;
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	1c5a      	adds	r2, r3, #1
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	791b      	ldrb	r3, [r3, #4]
 800c6f6:	f043 0301 	orr.w	r3, r3, #1
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	69db      	ldr	r3, [r3, #28]
 800c708:	68ba      	ldr	r2, [r7, #8]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d3c6      	bcc.n	800c69c <remove_chain+0x4a>
 800c70e:	e000      	b.n	800c712 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c710:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c712:	2300      	movs	r3, #0
}
 800c714:	4618      	mov	r0, r3
 800c716:	3720      	adds	r7, #32
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b088      	sub	sp, #32
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10d      	bne.n	800c74e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	695b      	ldr	r3, [r3, #20]
 800c736:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d004      	beq.n	800c748 <create_chain+0x2c>
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	69db      	ldr	r3, [r3, #28]
 800c742:	69ba      	ldr	r2, [r7, #24]
 800c744:	429a      	cmp	r2, r3
 800c746:	d31b      	bcc.n	800c780 <create_chain+0x64>
 800c748:	2301      	movs	r3, #1
 800c74a:	61bb      	str	r3, [r7, #24]
 800c74c:	e018      	b.n	800c780 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c74e:	6839      	ldr	r1, [r7, #0]
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7ff fdea 	bl	800c32a <get_fat>
 800c756:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d801      	bhi.n	800c762 <create_chain+0x46>
 800c75e:	2301      	movs	r3, #1
 800c760:	e070      	b.n	800c844 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c768:	d101      	bne.n	800c76e <create_chain+0x52>
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	e06a      	b.n	800c844 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	429a      	cmp	r2, r3
 800c776:	d201      	bcs.n	800c77c <create_chain+0x60>
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	e063      	b.n	800c844 <create_chain+0x128>
		scl = clst;
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	3301      	adds	r3, #1
 800c788:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	69db      	ldr	r3, [r3, #28]
 800c78e:	69fa      	ldr	r2, [r7, #28]
 800c790:	429a      	cmp	r2, r3
 800c792:	d307      	bcc.n	800c7a4 <create_chain+0x88>
				ncl = 2;
 800c794:	2302      	movs	r3, #2
 800c796:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c798:	69fa      	ldr	r2, [r7, #28]
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d901      	bls.n	800c7a4 <create_chain+0x88>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	e04f      	b.n	800c844 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c7a4:	69f9      	ldr	r1, [r7, #28]
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7ff fdbf 	bl	800c32a <get_fat>
 800c7ac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00e      	beq.n	800c7d2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d003      	beq.n	800c7c2 <create_chain+0xa6>
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c0:	d101      	bne.n	800c7c6 <create_chain+0xaa>
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	e03e      	b.n	800c844 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c7c6:	69fa      	ldr	r2, [r7, #28]
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d1da      	bne.n	800c784 <create_chain+0x68>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	e038      	b.n	800c844 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c7d2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d8:	69f9      	ldr	r1, [r7, #28]
 800c7da:	6938      	ldr	r0, [r7, #16]
 800c7dc:	f7ff fe4d 	bl	800c47a <put_fat>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c7e4:	7dfb      	ldrb	r3, [r7, #23]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d109      	bne.n	800c7fe <create_chain+0xe2>
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d006      	beq.n	800c7fe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c7f0:	69fa      	ldr	r2, [r7, #28]
 800c7f2:	6839      	ldr	r1, [r7, #0]
 800c7f4:	6938      	ldr	r0, [r7, #16]
 800c7f6:	f7ff fe40 	bl	800c47a <put_fat>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c7fe:	7dfb      	ldrb	r3, [r7, #23]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d116      	bne.n	800c832 <create_chain+0x116>
		fs->last_clst = ncl;
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	69fa      	ldr	r2, [r7, #28]
 800c808:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	699a      	ldr	r2, [r3, #24]
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	69db      	ldr	r3, [r3, #28]
 800c812:	3b02      	subs	r3, #2
 800c814:	429a      	cmp	r2, r3
 800c816:	d804      	bhi.n	800c822 <create_chain+0x106>
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	699b      	ldr	r3, [r3, #24]
 800c81c:	1e5a      	subs	r2, r3, #1
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	791b      	ldrb	r3, [r3, #4]
 800c826:	f043 0301 	orr.w	r3, r3, #1
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	711a      	strb	r2, [r3, #4]
 800c830:	e007      	b.n	800c842 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c832:	7dfb      	ldrb	r3, [r7, #23]
 800c834:	2b01      	cmp	r3, #1
 800c836:	d102      	bne.n	800c83e <create_chain+0x122>
 800c838:	f04f 33ff 	mov.w	r3, #4294967295
 800c83c:	e000      	b.n	800c840 <create_chain+0x124>
 800c83e:	2301      	movs	r3, #1
 800c840:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c842:	69fb      	ldr	r3, [r7, #28]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3720      	adds	r7, #32
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b087      	sub	sp, #28
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c860:	3304      	adds	r3, #4
 800c862:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	0a5b      	lsrs	r3, r3, #9
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	8952      	ldrh	r2, [r2, #10]
 800c86c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c870:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	1d1a      	adds	r2, r3, #4
 800c876:	613a      	str	r2, [r7, #16]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d101      	bne.n	800c886 <clmt_clust+0x3a>
 800c882:	2300      	movs	r3, #0
 800c884:	e010      	b.n	800c8a8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c886:	697a      	ldr	r2, [r7, #20]
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d307      	bcc.n	800c89e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c88e:	697a      	ldr	r2, [r7, #20]
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	617b      	str	r3, [r7, #20]
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	3304      	adds	r3, #4
 800c89a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c89c:	e7e9      	b.n	800c872 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c89e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	4413      	add	r3, r2
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	371c      	adds	r7, #28
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b086      	sub	sp, #24
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8ca:	d204      	bcs.n	800c8d6 <dir_sdi+0x22>
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	f003 031f 	and.w	r3, r3, #31
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d001      	beq.n	800c8da <dir_sdi+0x26>
		return FR_INT_ERR;
 800c8d6:	2302      	movs	r3, #2
 800c8d8:	e063      	b.n	800c9a2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	683a      	ldr	r2, [r7, #0]
 800c8de:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d106      	bne.n	800c8fa <dir_sdi+0x46>
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b02      	cmp	r3, #2
 800c8f2:	d902      	bls.n	800c8fa <dir_sdi+0x46>
		clst = fs->dirbase;
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d10c      	bne.n	800c91a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	095b      	lsrs	r3, r3, #5
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	8912      	ldrh	r2, [r2, #8]
 800c908:	4293      	cmp	r3, r2
 800c90a:	d301      	bcc.n	800c910 <dir_sdi+0x5c>
 800c90c:	2302      	movs	r3, #2
 800c90e:	e048      	b.n	800c9a2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	61da      	str	r2, [r3, #28]
 800c918:	e029      	b.n	800c96e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	895b      	ldrh	r3, [r3, #10]
 800c91e:	025b      	lsls	r3, r3, #9
 800c920:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c922:	e019      	b.n	800c958 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6979      	ldr	r1, [r7, #20]
 800c928:	4618      	mov	r0, r3
 800c92a:	f7ff fcfe 	bl	800c32a <get_fat>
 800c92e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c936:	d101      	bne.n	800c93c <dir_sdi+0x88>
 800c938:	2301      	movs	r3, #1
 800c93a:	e032      	b.n	800c9a2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d904      	bls.n	800c94c <dir_sdi+0x98>
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	69db      	ldr	r3, [r3, #28]
 800c946:	697a      	ldr	r2, [r7, #20]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d301      	bcc.n	800c950 <dir_sdi+0x9c>
 800c94c:	2302      	movs	r3, #2
 800c94e:	e028      	b.n	800c9a2 <dir_sdi+0xee>
			ofs -= csz;
 800c950:	683a      	ldr	r2, [r7, #0]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	1ad3      	subs	r3, r2, r3
 800c956:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d2e1      	bcs.n	800c924 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c960:	6979      	ldr	r1, [r7, #20]
 800c962:	6938      	ldr	r0, [r7, #16]
 800c964:	f7ff fcc2 	bl	800c2ec <clust2sect>
 800c968:	4602      	mov	r2, r0
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	697a      	ldr	r2, [r7, #20]
 800c972:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	69db      	ldr	r3, [r3, #28]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d101      	bne.n	800c980 <dir_sdi+0xcc>
 800c97c:	2302      	movs	r3, #2
 800c97e:	e010      	b.n	800c9a2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	69da      	ldr	r2, [r3, #28]
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	0a5b      	lsrs	r3, r3, #9
 800c988:	441a      	add	r2, r3
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c99a:	441a      	add	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3718      	adds	r7, #24
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b086      	sub	sp, #24
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
 800c9b2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	695b      	ldr	r3, [r3, #20]
 800c9be:	3320      	adds	r3, #32
 800c9c0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	69db      	ldr	r3, [r3, #28]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d003      	beq.n	800c9d2 <dir_next+0x28>
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9d0:	d301      	bcc.n	800c9d6 <dir_next+0x2c>
 800c9d2:	2304      	movs	r3, #4
 800c9d4:	e0aa      	b.n	800cb2c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f040 8098 	bne.w	800cb12 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	69db      	ldr	r3, [r3, #28]
 800c9e6:	1c5a      	adds	r2, r3, #1
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10b      	bne.n	800ca0c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	095b      	lsrs	r3, r3, #5
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	8912      	ldrh	r2, [r2, #8]
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	f0c0 8088 	bcc.w	800cb12 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	61da      	str	r2, [r3, #28]
 800ca08:	2304      	movs	r3, #4
 800ca0a:	e08f      	b.n	800cb2c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	0a5b      	lsrs	r3, r3, #9
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	8952      	ldrh	r2, [r2, #10]
 800ca14:	3a01      	subs	r2, #1
 800ca16:	4013      	ands	r3, r2
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d17a      	bne.n	800cb12 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	699b      	ldr	r3, [r3, #24]
 800ca22:	4619      	mov	r1, r3
 800ca24:	4610      	mov	r0, r2
 800ca26:	f7ff fc80 	bl	800c32a <get_fat>
 800ca2a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d801      	bhi.n	800ca36 <dir_next+0x8c>
 800ca32:	2302      	movs	r3, #2
 800ca34:	e07a      	b.n	800cb2c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3c:	d101      	bne.n	800ca42 <dir_next+0x98>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e074      	b.n	800cb2c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	69db      	ldr	r3, [r3, #28]
 800ca46:	697a      	ldr	r2, [r7, #20]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d358      	bcc.n	800cafe <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d104      	bne.n	800ca5c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	61da      	str	r2, [r3, #28]
 800ca58:	2304      	movs	r3, #4
 800ca5a:	e067      	b.n	800cb2c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	699b      	ldr	r3, [r3, #24]
 800ca62:	4619      	mov	r1, r3
 800ca64:	4610      	mov	r0, r2
 800ca66:	f7ff fe59 	bl	800c71c <create_chain>
 800ca6a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d101      	bne.n	800ca76 <dir_next+0xcc>
 800ca72:	2307      	movs	r3, #7
 800ca74:	e05a      	b.n	800cb2c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d101      	bne.n	800ca80 <dir_next+0xd6>
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	e055      	b.n	800cb2c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca86:	d101      	bne.n	800ca8c <dir_next+0xe2>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e04f      	b.n	800cb2c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f7ff fb4d 	bl	800c12c <sync_window>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d001      	beq.n	800ca9c <dir_next+0xf2>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e047      	b.n	800cb2c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	3338      	adds	r3, #56	; 0x38
 800caa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800caa4:	2100      	movs	r1, #0
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7ff f945 	bl	800bd36 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800caac:	2300      	movs	r3, #0
 800caae:	613b      	str	r3, [r7, #16]
 800cab0:	6979      	ldr	r1, [r7, #20]
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f7ff fc1a 	bl	800c2ec <clust2sect>
 800cab8:	4602      	mov	r2, r0
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	635a      	str	r2, [r3, #52]	; 0x34
 800cabe:	e012      	b.n	800cae6 <dir_next+0x13c>
						fs->wflag = 1;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2201      	movs	r2, #1
 800cac4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f7ff fb30 	bl	800c12c <sync_window>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d001      	beq.n	800cad6 <dir_next+0x12c>
 800cad2:	2301      	movs	r3, #1
 800cad4:	e02a      	b.n	800cb2c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	3301      	adds	r3, #1
 800cada:	613b      	str	r3, [r7, #16]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cae0:	1c5a      	adds	r2, r3, #1
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	635a      	str	r2, [r3, #52]	; 0x34
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	895b      	ldrh	r3, [r3, #10]
 800caea:	461a      	mov	r2, r3
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	4293      	cmp	r3, r2
 800caf0:	d3e6      	bcc.n	800cac0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	1ad2      	subs	r2, r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	697a      	ldr	r2, [r7, #20]
 800cb02:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cb04:	6979      	ldr	r1, [r7, #20]
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f7ff fbf0 	bl	800c2ec <clust2sect>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb24:	441a      	add	r2, r3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3718      	adds	r7, #24
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b086      	sub	sp, #24
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cb44:	2100      	movs	r1, #0
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff feb4 	bl	800c8b4 <dir_sdi>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cb50:	7dfb      	ldrb	r3, [r7, #23]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d12b      	bne.n	800cbae <dir_alloc+0x7a>
		n = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	69db      	ldr	r3, [r3, #28]
 800cb5e:	4619      	mov	r1, r3
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f7ff fb27 	bl	800c1b4 <move_window>
 800cb66:	4603      	mov	r3, r0
 800cb68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cb6a:	7dfb      	ldrb	r3, [r7, #23]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d11d      	bne.n	800cbac <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6a1b      	ldr	r3, [r3, #32]
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	2be5      	cmp	r3, #229	; 0xe5
 800cb78:	d004      	beq.n	800cb84 <dir_alloc+0x50>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a1b      	ldr	r3, [r3, #32]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d107      	bne.n	800cb94 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	3301      	adds	r3, #1
 800cb88:	613b      	str	r3, [r7, #16]
 800cb8a:	693a      	ldr	r2, [r7, #16]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d102      	bne.n	800cb98 <dir_alloc+0x64>
 800cb92:	e00c      	b.n	800cbae <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cb94:	2300      	movs	r3, #0
 800cb96:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cb98:	2101      	movs	r1, #1
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7ff ff05 	bl	800c9aa <dir_next>
 800cba0:	4603      	mov	r3, r0
 800cba2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d0d7      	beq.n	800cb5a <dir_alloc+0x26>
 800cbaa:	e000      	b.n	800cbae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cbac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cbae:	7dfb      	ldrb	r3, [r7, #23]
 800cbb0:	2b04      	cmp	r3, #4
 800cbb2:	d101      	bne.n	800cbb8 <dir_alloc+0x84>
 800cbb4:	2307      	movs	r3, #7
 800cbb6:	75fb      	strb	r3, [r7, #23]
	return res;
 800cbb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3718      	adds	r7, #24
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b084      	sub	sp, #16
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	331a      	adds	r3, #26
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7ff f80d 	bl	800bbf0 <ld_word>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	2b03      	cmp	r3, #3
 800cbe0:	d109      	bne.n	800cbf6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	3314      	adds	r3, #20
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7ff f802 	bl	800bbf0 <ld_word>
 800cbec:	4603      	mov	r3, r0
 800cbee:	041b      	lsls	r3, r3, #16
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	331a      	adds	r3, #26
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	b292      	uxth	r2, r2
 800cc14:	4611      	mov	r1, r2
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff f825 	bl	800bc66 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	2b03      	cmp	r3, #3
 800cc22:	d109      	bne.n	800cc38 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	f103 0214 	add.w	r2, r3, #20
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	0c1b      	lsrs	r3, r3, #16
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	4619      	mov	r1, r3
 800cc32:	4610      	mov	r0, r2
 800cc34:	f7ff f817 	bl	800bc66 <st_word>
	}
}
 800cc38:	bf00      	nop
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cc40:	b590      	push	{r4, r7, lr}
 800cc42:	b087      	sub	sp, #28
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	331a      	adds	r3, #26
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7fe ffce 	bl	800bbf0 <ld_word>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d001      	beq.n	800cc5e <cmp_lfn+0x1e>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	e059      	b.n	800cd12 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc66:	1e5a      	subs	r2, r3, #1
 800cc68:	4613      	mov	r3, r2
 800cc6a:	005b      	lsls	r3, r3, #1
 800cc6c:	4413      	add	r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	4413      	add	r3, r2
 800cc72:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cc74:	2301      	movs	r3, #1
 800cc76:	81fb      	strh	r3, [r7, #14]
 800cc78:	2300      	movs	r3, #0
 800cc7a:	613b      	str	r3, [r7, #16]
 800cc7c:	e033      	b.n	800cce6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cc7e:	4a27      	ldr	r2, [pc, #156]	; (800cd1c <cmp_lfn+0xdc>)
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	4413      	add	r3, r2
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	461a      	mov	r2, r3
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7fe ffaf 	bl	800bbf0 <ld_word>
 800cc92:	4603      	mov	r3, r0
 800cc94:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cc96:	89fb      	ldrh	r3, [r7, #14]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d01a      	beq.n	800ccd2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	2bfe      	cmp	r3, #254	; 0xfe
 800cca0:	d812      	bhi.n	800ccc8 <cmp_lfn+0x88>
 800cca2:	89bb      	ldrh	r3, [r7, #12]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f002 fc6f 	bl	800f588 <ff_wtoupper>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	461c      	mov	r4, r3
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	1c5a      	adds	r2, r3, #1
 800ccb2:	617a      	str	r2, [r7, #20]
 800ccb4:	005b      	lsls	r3, r3, #1
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	4413      	add	r3, r2
 800ccba:	881b      	ldrh	r3, [r3, #0]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f002 fc63 	bl	800f588 <ff_wtoupper>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	429c      	cmp	r4, r3
 800ccc6:	d001      	beq.n	800cccc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ccc8:	2300      	movs	r3, #0
 800ccca:	e022      	b.n	800cd12 <cmp_lfn+0xd2>
			}
			wc = uc;
 800cccc:	89bb      	ldrh	r3, [r7, #12]
 800ccce:	81fb      	strh	r3, [r7, #14]
 800ccd0:	e006      	b.n	800cce0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ccd2:	89bb      	ldrh	r3, [r7, #12]
 800ccd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d001      	beq.n	800cce0 <cmp_lfn+0xa0>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	e018      	b.n	800cd12 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	3301      	adds	r3, #1
 800cce4:	613b      	str	r3, [r7, #16]
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	2b0c      	cmp	r3, #12
 800ccea:	d9c8      	bls.n	800cc7e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d00b      	beq.n	800cd10 <cmp_lfn+0xd0>
 800ccf8:	89fb      	ldrh	r3, [r7, #14]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d008      	beq.n	800cd10 <cmp_lfn+0xd0>
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	005b      	lsls	r3, r3, #1
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	4413      	add	r3, r2
 800cd06:	881b      	ldrh	r3, [r3, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <cmp_lfn+0xd0>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	e000      	b.n	800cd12 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cd10:	2301      	movs	r3, #1
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	371c      	adds	r7, #28
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd90      	pop	{r4, r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	0804dd40 	.word	0x0804dd40

0800cd20 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b086      	sub	sp, #24
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	331a      	adds	r3, #26
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fe ff5e 	bl	800bbf0 <ld_word>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d001      	beq.n	800cd3e <pick_lfn+0x1e>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	e04d      	b.n	800cdda <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd46:	1e5a      	subs	r2, r3, #1
 800cd48:	4613      	mov	r3, r2
 800cd4a:	005b      	lsls	r3, r3, #1
 800cd4c:	4413      	add	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4413      	add	r3, r2
 800cd52:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cd54:	2301      	movs	r3, #1
 800cd56:	81fb      	strh	r3, [r7, #14]
 800cd58:	2300      	movs	r3, #0
 800cd5a:	613b      	str	r3, [r7, #16]
 800cd5c:	e028      	b.n	800cdb0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cd5e:	4a21      	ldr	r2, [pc, #132]	; (800cde4 <pick_lfn+0xc4>)
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	4413      	add	r3, r2
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	461a      	mov	r2, r3
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7fe ff3f 	bl	800bbf0 <ld_word>
 800cd72:	4603      	mov	r3, r0
 800cd74:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cd76:	89fb      	ldrh	r3, [r7, #14]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d00f      	beq.n	800cd9c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	2bfe      	cmp	r3, #254	; 0xfe
 800cd80:	d901      	bls.n	800cd86 <pick_lfn+0x66>
 800cd82:	2300      	movs	r3, #0
 800cd84:	e029      	b.n	800cdda <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800cd86:	89bb      	ldrh	r3, [r7, #12]
 800cd88:	81fb      	strh	r3, [r7, #14]
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	1c5a      	adds	r2, r3, #1
 800cd8e:	617a      	str	r2, [r7, #20]
 800cd90:	005b      	lsls	r3, r3, #1
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	4413      	add	r3, r2
 800cd96:	89fa      	ldrh	r2, [r7, #14]
 800cd98:	801a      	strh	r2, [r3, #0]
 800cd9a:	e006      	b.n	800cdaa <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cd9c:	89bb      	ldrh	r3, [r7, #12]
 800cd9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d001      	beq.n	800cdaa <pick_lfn+0x8a>
 800cda6:	2300      	movs	r3, #0
 800cda8:	e017      	b.n	800cdda <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	3301      	adds	r3, #1
 800cdae:	613b      	str	r3, [r7, #16]
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	2b0c      	cmp	r3, #12
 800cdb4:	d9d3      	bls.n	800cd5e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d00a      	beq.n	800cdd8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	2bfe      	cmp	r3, #254	; 0xfe
 800cdc6:	d901      	bls.n	800cdcc <pick_lfn+0xac>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	e006      	b.n	800cdda <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	005b      	lsls	r3, r3, #1
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800cdd8:	2301      	movs	r3, #1
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3718      	adds	r7, #24
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	0804dd40 	.word	0x0804dd40

0800cde8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b088      	sub	sp, #32
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	4611      	mov	r1, r2
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	71fb      	strb	r3, [r7, #7]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	330d      	adds	r3, #13
 800ce02:	79ba      	ldrb	r2, [r7, #6]
 800ce04:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	330b      	adds	r3, #11
 800ce0a:	220f      	movs	r2, #15
 800ce0c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	330c      	adds	r3, #12
 800ce12:	2200      	movs	r2, #0
 800ce14:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	331a      	adds	r3, #26
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fe ff22 	bl	800bc66 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ce22:	79fb      	ldrb	r3, [r7, #7]
 800ce24:	1e5a      	subs	r2, r3, #1
 800ce26:	4613      	mov	r3, r2
 800ce28:	005b      	lsls	r3, r3, #1
 800ce2a:	4413      	add	r3, r2
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	4413      	add	r3, r2
 800ce30:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ce32:	2300      	movs	r3, #0
 800ce34:	82fb      	strh	r3, [r7, #22]
 800ce36:	2300      	movs	r3, #0
 800ce38:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ce3a:	8afb      	ldrh	r3, [r7, #22]
 800ce3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d007      	beq.n	800ce54 <put_lfn+0x6c>
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	1c5a      	adds	r2, r3, #1
 800ce48:	61fa      	str	r2, [r7, #28]
 800ce4a:	005b      	lsls	r3, r3, #1
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	4413      	add	r3, r2
 800ce50:	881b      	ldrh	r3, [r3, #0]
 800ce52:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ce54:	4a17      	ldr	r2, [pc, #92]	; (800ceb4 <put_lfn+0xcc>)
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	4413      	add	r3, r2
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	4413      	add	r3, r2
 800ce62:	8afa      	ldrh	r2, [r7, #22]
 800ce64:	4611      	mov	r1, r2
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fe fefd 	bl	800bc66 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ce6c:	8afb      	ldrh	r3, [r7, #22]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d102      	bne.n	800ce78 <put_lfn+0x90>
 800ce72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce76:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	61bb      	str	r3, [r7, #24]
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	2b0c      	cmp	r3, #12
 800ce82:	d9da      	bls.n	800ce3a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ce84:	8afb      	ldrh	r3, [r7, #22]
 800ce86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d006      	beq.n	800ce9c <put_lfn+0xb4>
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	005b      	lsls	r3, r3, #1
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	4413      	add	r3, r2
 800ce96:	881b      	ldrh	r3, [r3, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d103      	bne.n	800cea4 <put_lfn+0xbc>
 800ce9c:	79fb      	ldrb	r3, [r7, #7]
 800ce9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cea2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	79fa      	ldrb	r2, [r7, #7]
 800cea8:	701a      	strb	r2, [r3, #0]
}
 800ceaa:	bf00      	nop
 800ceac:	3720      	adds	r7, #32
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	0804dd40 	.word	0x0804dd40

0800ceb8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b08c      	sub	sp, #48	; 0x30
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
 800cec4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800cec6:	220b      	movs	r2, #11
 800cec8:	68b9      	ldr	r1, [r7, #8]
 800ceca:	68f8      	ldr	r0, [r7, #12]
 800cecc:	f7fe ff12 	bl	800bcf4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	2b05      	cmp	r3, #5
 800ced4:	d92b      	bls.n	800cf2e <gen_numname+0x76>
		sr = seq;
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ceda:	e022      	b.n	800cf22 <gen_numname+0x6a>
			wc = *lfn++;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	1c9a      	adds	r2, r3, #2
 800cee0:	607a      	str	r2, [r7, #4]
 800cee2:	881b      	ldrh	r3, [r3, #0]
 800cee4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800cee6:	2300      	movs	r3, #0
 800cee8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ceea:	e017      	b.n	800cf1c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	005a      	lsls	r2, r3, #1
 800cef0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cef2:	f003 0301 	and.w	r3, r3, #1
 800cef6:	4413      	add	r3, r2
 800cef8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cefa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cefc:	085b      	lsrs	r3, r3, #1
 800cefe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d005      	beq.n	800cf16 <gen_numname+0x5e>
 800cf0a:	69fb      	ldr	r3, [r7, #28]
 800cf0c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800cf10:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800cf14:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf18:	3301      	adds	r3, #1
 800cf1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1e:	2b0f      	cmp	r3, #15
 800cf20:	d9e4      	bls.n	800ceec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	881b      	ldrh	r3, [r3, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1d8      	bne.n	800cedc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cf2e:	2307      	movs	r3, #7
 800cf30:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	f003 030f 	and.w	r3, r3, #15
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	3330      	adds	r3, #48	; 0x30
 800cf3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800cf42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf46:	2b39      	cmp	r3, #57	; 0x39
 800cf48:	d904      	bls.n	800cf54 <gen_numname+0x9c>
 800cf4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf4e:	3307      	adds	r3, #7
 800cf50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf56:	1e5a      	subs	r2, r3, #1
 800cf58:	62ba      	str	r2, [r7, #40]	; 0x28
 800cf5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cf5e:	4413      	add	r3, r2
 800cf60:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cf64:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	091b      	lsrs	r3, r3, #4
 800cf6c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d1de      	bne.n	800cf32 <gen_numname+0x7a>
	ns[i] = '~';
 800cf74:	f107 0214 	add.w	r2, r7, #20
 800cf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7a:	4413      	add	r3, r2
 800cf7c:	227e      	movs	r2, #126	; 0x7e
 800cf7e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cf80:	2300      	movs	r3, #0
 800cf82:	627b      	str	r3, [r7, #36]	; 0x24
 800cf84:	e016      	b.n	800cfb4 <gen_numname+0xfc>
		if (IsDBCS1(dst[j])) {
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8a:	4413      	add	r3, r2
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	2b80      	cmp	r3, #128	; 0x80
 800cf90:	d90d      	bls.n	800cfae <gen_numname+0xf6>
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf96:	4413      	add	r3, r2
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	2bff      	cmp	r3, #255	; 0xff
 800cf9c:	d007      	beq.n	800cfae <gen_numname+0xf6>
			if (j == i - 1) break;
 800cf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d010      	beq.n	800cfca <gen_numname+0x112>
			j++;
 800cfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfaa:	3301      	adds	r3, #1
 800cfac:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	627b      	str	r3, [r7, #36]	; 0x24
 800cfb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d207      	bcs.n	800cfcc <gen_numname+0x114>
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc0:	4413      	add	r3, r2
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	2b20      	cmp	r3, #32
 800cfc6:	d1de      	bne.n	800cf86 <gen_numname+0xce>
 800cfc8:	e000      	b.n	800cfcc <gen_numname+0x114>
			if (j == i - 1) break;
 800cfca:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfce:	2b07      	cmp	r3, #7
 800cfd0:	d808      	bhi.n	800cfe4 <gen_numname+0x12c>
 800cfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd4:	1c5a      	adds	r2, r3, #1
 800cfd6:	62ba      	str	r2, [r7, #40]	; 0x28
 800cfd8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cfdc:	4413      	add	r3, r2
 800cfde:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cfe2:	e000      	b.n	800cfe6 <gen_numname+0x12e>
 800cfe4:	2120      	movs	r1, #32
 800cfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe8:	1c5a      	adds	r2, r3, #1
 800cfea:	627a      	str	r2, [r7, #36]	; 0x24
 800cfec:	68fa      	ldr	r2, [r7, #12]
 800cfee:	4413      	add	r3, r2
 800cff0:	460a      	mov	r2, r1
 800cff2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff6:	2b07      	cmp	r3, #7
 800cff8:	d9e8      	bls.n	800cfcc <gen_numname+0x114>
}
 800cffa:	bf00      	nop
 800cffc:	bf00      	nop
 800cffe:	3730      	adds	r7, #48	; 0x30
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d004:	b480      	push	{r7}
 800d006:	b085      	sub	sp, #20
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d00c:	2300      	movs	r3, #0
 800d00e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d010:	230b      	movs	r3, #11
 800d012:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d014:	7bfb      	ldrb	r3, [r7, #15]
 800d016:	b2da      	uxtb	r2, r3
 800d018:	0852      	lsrs	r2, r2, #1
 800d01a:	01db      	lsls	r3, r3, #7
 800d01c:	4313      	orrs	r3, r2
 800d01e:	b2da      	uxtb	r2, r3
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	1c59      	adds	r1, r3, #1
 800d024:	6079      	str	r1, [r7, #4]
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	4413      	add	r3, r2
 800d02a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	3b01      	subs	r3, #1
 800d030:	60bb      	str	r3, [r7, #8]
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1ed      	bne.n	800d014 <sum_sfn+0x10>
	return sum;
 800d038:	7bfb      	ldrb	r3, [r7, #15]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3714      	adds	r7, #20
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr

0800d046 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b086      	sub	sp, #24
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
 800d04e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d050:	2304      	movs	r3, #4
 800d052:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d05a:	23ff      	movs	r3, #255	; 0xff
 800d05c:	757b      	strb	r3, [r7, #21]
 800d05e:	23ff      	movs	r3, #255	; 0xff
 800d060:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d062:	e081      	b.n	800d168 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	69db      	ldr	r3, [r3, #28]
 800d068:	4619      	mov	r1, r3
 800d06a:	6938      	ldr	r0, [r7, #16]
 800d06c:	f7ff f8a2 	bl	800c1b4 <move_window>
 800d070:	4603      	mov	r3, r0
 800d072:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d074:	7dfb      	ldrb	r3, [r7, #23]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d17c      	bne.n	800d174 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a1b      	ldr	r3, [r3, #32]
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d082:	7dbb      	ldrb	r3, [r7, #22]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d102      	bne.n	800d08e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d088:	2304      	movs	r3, #4
 800d08a:	75fb      	strb	r3, [r7, #23]
 800d08c:	e077      	b.n	800d17e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a1b      	ldr	r3, [r3, #32]
 800d092:	330b      	adds	r3, #11
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d09a:	73fb      	strb	r3, [r7, #15]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	7bfa      	ldrb	r2, [r7, #15]
 800d0a0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d0a2:	7dbb      	ldrb	r3, [r7, #22]
 800d0a4:	2be5      	cmp	r3, #229	; 0xe5
 800d0a6:	d00e      	beq.n	800d0c6 <dir_read+0x80>
 800d0a8:	7dbb      	ldrb	r3, [r7, #22]
 800d0aa:	2b2e      	cmp	r3, #46	; 0x2e
 800d0ac:	d00b      	beq.n	800d0c6 <dir_read+0x80>
 800d0ae:	7bfb      	ldrb	r3, [r7, #15]
 800d0b0:	f023 0320 	bic.w	r3, r3, #32
 800d0b4:	2b08      	cmp	r3, #8
 800d0b6:	bf0c      	ite	eq
 800d0b8:	2301      	moveq	r3, #1
 800d0ba:	2300      	movne	r3, #0
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	461a      	mov	r2, r3
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d002      	beq.n	800d0cc <dir_read+0x86>
				ord = 0xFF;
 800d0c6:	23ff      	movs	r3, #255	; 0xff
 800d0c8:	757b      	strb	r3, [r7, #21]
 800d0ca:	e044      	b.n	800d156 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d0cc:	7bfb      	ldrb	r3, [r7, #15]
 800d0ce:	2b0f      	cmp	r3, #15
 800d0d0:	d12f      	bne.n	800d132 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d0d2:	7dbb      	ldrb	r3, [r7, #22]
 800d0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00d      	beq.n	800d0f8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6a1b      	ldr	r3, [r3, #32]
 800d0e0:	7b5b      	ldrb	r3, [r3, #13]
 800d0e2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d0e4:	7dbb      	ldrb	r3, [r7, #22]
 800d0e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0ea:	75bb      	strb	r3, [r7, #22]
 800d0ec:	7dbb      	ldrb	r3, [r7, #22]
 800d0ee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	695a      	ldr	r2, [r3, #20]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d0f8:	7dba      	ldrb	r2, [r7, #22]
 800d0fa:	7d7b      	ldrb	r3, [r7, #21]
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d115      	bne.n	800d12c <dir_read+0xe6>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6a1b      	ldr	r3, [r3, #32]
 800d104:	330d      	adds	r3, #13
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	7d3a      	ldrb	r2, [r7, #20]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d10e      	bne.n	800d12c <dir_read+0xe6>
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	68da      	ldr	r2, [r3, #12]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6a1b      	ldr	r3, [r3, #32]
 800d116:	4619      	mov	r1, r3
 800d118:	4610      	mov	r0, r2
 800d11a:	f7ff fe01 	bl	800cd20 <pick_lfn>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d003      	beq.n	800d12c <dir_read+0xe6>
 800d124:	7d7b      	ldrb	r3, [r7, #21]
 800d126:	3b01      	subs	r3, #1
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	e000      	b.n	800d12e <dir_read+0xe8>
 800d12c:	23ff      	movs	r3, #255	; 0xff
 800d12e:	757b      	strb	r3, [r7, #21]
 800d130:	e011      	b.n	800d156 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d132:	7d7b      	ldrb	r3, [r7, #21]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d109      	bne.n	800d14c <dir_read+0x106>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6a1b      	ldr	r3, [r3, #32]
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7ff ff61 	bl	800d004 <sum_sfn>
 800d142:	4603      	mov	r3, r0
 800d144:	461a      	mov	r2, r3
 800d146:	7d3b      	ldrb	r3, [r7, #20]
 800d148:	4293      	cmp	r3, r2
 800d14a:	d015      	beq.n	800d178 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f04f 32ff 	mov.w	r2, #4294967295
 800d152:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d154:	e010      	b.n	800d178 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d156:	2100      	movs	r1, #0
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f7ff fc26 	bl	800c9aa <dir_next>
 800d15e:	4603      	mov	r3, r0
 800d160:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d162:	7dfb      	ldrb	r3, [r7, #23]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d109      	bne.n	800d17c <dir_read+0x136>
	while (dp->sect) {
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	69db      	ldr	r3, [r3, #28]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f47f af79 	bne.w	800d064 <dir_read+0x1e>
 800d172:	e004      	b.n	800d17e <dir_read+0x138>
		if (res != FR_OK) break;
 800d174:	bf00      	nop
 800d176:	e002      	b.n	800d17e <dir_read+0x138>
					break;
 800d178:	bf00      	nop
 800d17a:	e000      	b.n	800d17e <dir_read+0x138>
		if (res != FR_OK) break;
 800d17c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d17e:	7dfb      	ldrb	r3, [r7, #23]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d002      	beq.n	800d18a <dir_read+0x144>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	61da      	str	r2, [r3, #28]
	return res;
 800d18a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3718      	adds	r7, #24
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f7ff fb85 	bl	800c8b4 <dir_sdi>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d1ae:	7dfb      	ldrb	r3, [r7, #23]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d001      	beq.n	800d1b8 <dir_find+0x24>
 800d1b4:	7dfb      	ldrb	r3, [r7, #23]
 800d1b6:	e0a9      	b.n	800d30c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d1b8:	23ff      	movs	r3, #255	; 0xff
 800d1ba:	753b      	strb	r3, [r7, #20]
 800d1bc:	7d3b      	ldrb	r3, [r7, #20]
 800d1be:	757b      	strb	r3, [r7, #21]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d1c6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	69db      	ldr	r3, [r3, #28]
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	6938      	ldr	r0, [r7, #16]
 800d1d0:	f7fe fff0 	bl	800c1b4 <move_window>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d1d8:	7dfb      	ldrb	r3, [r7, #23]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	f040 8090 	bne.w	800d300 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a1b      	ldr	r3, [r3, #32]
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d1e8:	7dbb      	ldrb	r3, [r7, #22]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d102      	bne.n	800d1f4 <dir_find+0x60>
 800d1ee:	2304      	movs	r3, #4
 800d1f0:	75fb      	strb	r3, [r7, #23]
 800d1f2:	e08a      	b.n	800d30a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6a1b      	ldr	r3, [r3, #32]
 800d1f8:	330b      	adds	r3, #11
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d200:	73fb      	strb	r3, [r7, #15]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	7bfa      	ldrb	r2, [r7, #15]
 800d206:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d208:	7dbb      	ldrb	r3, [r7, #22]
 800d20a:	2be5      	cmp	r3, #229	; 0xe5
 800d20c:	d007      	beq.n	800d21e <dir_find+0x8a>
 800d20e:	7bfb      	ldrb	r3, [r7, #15]
 800d210:	f003 0308 	and.w	r3, r3, #8
 800d214:	2b00      	cmp	r3, #0
 800d216:	d009      	beq.n	800d22c <dir_find+0x98>
 800d218:	7bfb      	ldrb	r3, [r7, #15]
 800d21a:	2b0f      	cmp	r3, #15
 800d21c:	d006      	beq.n	800d22c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d21e:	23ff      	movs	r3, #255	; 0xff
 800d220:	757b      	strb	r3, [r7, #21]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f04f 32ff 	mov.w	r2, #4294967295
 800d228:	631a      	str	r2, [r3, #48]	; 0x30
 800d22a:	e05e      	b.n	800d2ea <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
 800d22e:	2b0f      	cmp	r3, #15
 800d230:	d136      	bne.n	800d2a0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d154      	bne.n	800d2ea <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d240:	7dbb      	ldrb	r3, [r7, #22]
 800d242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00d      	beq.n	800d266 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	7b5b      	ldrb	r3, [r3, #13]
 800d250:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d252:	7dbb      	ldrb	r3, [r7, #22]
 800d254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d258:	75bb      	strb	r3, [r7, #22]
 800d25a:	7dbb      	ldrb	r3, [r7, #22]
 800d25c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	695a      	ldr	r2, [r3, #20]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d266:	7dba      	ldrb	r2, [r7, #22]
 800d268:	7d7b      	ldrb	r3, [r7, #21]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d115      	bne.n	800d29a <dir_find+0x106>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6a1b      	ldr	r3, [r3, #32]
 800d272:	330d      	adds	r3, #13
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	7d3a      	ldrb	r2, [r7, #20]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d10e      	bne.n	800d29a <dir_find+0x106>
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	68da      	ldr	r2, [r3, #12]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6a1b      	ldr	r3, [r3, #32]
 800d284:	4619      	mov	r1, r3
 800d286:	4610      	mov	r0, r2
 800d288:	f7ff fcda 	bl	800cc40 <cmp_lfn>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d003      	beq.n	800d29a <dir_find+0x106>
 800d292:	7d7b      	ldrb	r3, [r7, #21]
 800d294:	3b01      	subs	r3, #1
 800d296:	b2db      	uxtb	r3, r3
 800d298:	e000      	b.n	800d29c <dir_find+0x108>
 800d29a:	23ff      	movs	r3, #255	; 0xff
 800d29c:	757b      	strb	r3, [r7, #21]
 800d29e:	e024      	b.n	800d2ea <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d2a0:	7d7b      	ldrb	r3, [r7, #21]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d109      	bne.n	800d2ba <dir_find+0x126>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6a1b      	ldr	r3, [r3, #32]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7ff feaa 	bl	800d004 <sum_sfn>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	7d3b      	ldrb	r3, [r7, #20]
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d024      	beq.n	800d304 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d10a      	bne.n	800d2de <dir_find+0x14a>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6a18      	ldr	r0, [r3, #32]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	3324      	adds	r3, #36	; 0x24
 800d2d0:	220b      	movs	r2, #11
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	f7fe fd4a 	bl	800bd6c <mem_cmp>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d014      	beq.n	800d308 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d2de:	23ff      	movs	r3, #255	; 0xff
 800d2e0:	757b      	strb	r3, [r7, #21]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d2ea:	2100      	movs	r1, #0
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7ff fb5c 	bl	800c9aa <dir_next>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d2f6:	7dfb      	ldrb	r3, [r7, #23]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f43f af65 	beq.w	800d1c8 <dir_find+0x34>
 800d2fe:	e004      	b.n	800d30a <dir_find+0x176>
		if (res != FR_OK) break;
 800d300:	bf00      	nop
 800d302:	e002      	b.n	800d30a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d304:	bf00      	nop
 800d306:	e000      	b.n	800d30a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d308:	bf00      	nop

	return res;
 800d30a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3718      	adds	r7, #24
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b08c      	sub	sp, #48	; 0x30
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d328:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d001      	beq.n	800d334 <dir_register+0x20>
 800d330:	2306      	movs	r3, #6
 800d332:	e0e0      	b.n	800d4f6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d334:	2300      	movs	r3, #0
 800d336:	627b      	str	r3, [r7, #36]	; 0x24
 800d338:	e002      	b.n	800d340 <dir_register+0x2c>
 800d33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33c:	3301      	adds	r3, #1
 800d33e:	627b      	str	r3, [r7, #36]	; 0x24
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	68da      	ldr	r2, [r3, #12]
 800d344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d346:	005b      	lsls	r3, r3, #1
 800d348:	4413      	add	r3, r2
 800d34a:	881b      	ldrh	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d1f4      	bne.n	800d33a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d356:	f107 030c 	add.w	r3, r7, #12
 800d35a:	220c      	movs	r2, #12
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7fe fcc9 	bl	800bcf4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d362:	7dfb      	ldrb	r3, [r7, #23]
 800d364:	f003 0301 	and.w	r3, r3, #1
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d032      	beq.n	800d3d2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2240      	movs	r2, #64	; 0x40
 800d370:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d374:	2301      	movs	r3, #1
 800d376:	62bb      	str	r3, [r7, #40]	; 0x28
 800d378:	e016      	b.n	800d3a8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	68da      	ldr	r2, [r3, #12]
 800d384:	f107 010c 	add.w	r1, r7, #12
 800d388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38a:	f7ff fd95 	bl	800ceb8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f7ff ff00 	bl	800d194 <dir_find>
 800d394:	4603      	mov	r3, r0
 800d396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d39a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d106      	bne.n	800d3b0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3aa:	2b63      	cmp	r3, #99	; 0x63
 800d3ac:	d9e5      	bls.n	800d37a <dir_register+0x66>
 800d3ae:	e000      	b.n	800d3b2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d3b0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b4:	2b64      	cmp	r3, #100	; 0x64
 800d3b6:	d101      	bne.n	800d3bc <dir_register+0xa8>
 800d3b8:	2307      	movs	r3, #7
 800d3ba:	e09c      	b.n	800d4f6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d3bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3c0:	2b04      	cmp	r3, #4
 800d3c2:	d002      	beq.n	800d3ca <dir_register+0xb6>
 800d3c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3c8:	e095      	b.n	800d4f6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d3ca:	7dfa      	ldrb	r2, [r7, #23]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d3d2:	7dfb      	ldrb	r3, [r7, #23]
 800d3d4:	f003 0302 	and.w	r3, r3, #2
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d007      	beq.n	800d3ec <dir_register+0xd8>
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3de:	330c      	adds	r3, #12
 800d3e0:	4a47      	ldr	r2, [pc, #284]	; (800d500 <dir_register+0x1ec>)
 800d3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3e6:	089b      	lsrs	r3, r3, #2
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	e000      	b.n	800d3ee <dir_register+0xda>
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d3f0:	6a39      	ldr	r1, [r7, #32]
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f7ff fb9e 	bl	800cb34 <dir_alloc>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d3fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d402:	2b00      	cmp	r3, #0
 800d404:	d148      	bne.n	800d498 <dir_register+0x184>
 800d406:	6a3b      	ldr	r3, [r7, #32]
 800d408:	3b01      	subs	r3, #1
 800d40a:	623b      	str	r3, [r7, #32]
 800d40c:	6a3b      	ldr	r3, [r7, #32]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d042      	beq.n	800d498 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	695a      	ldr	r2, [r3, #20]
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	015b      	lsls	r3, r3, #5
 800d41a:	1ad3      	subs	r3, r2, r3
 800d41c:	4619      	mov	r1, r3
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f7ff fa48 	bl	800c8b4 <dir_sdi>
 800d424:	4603      	mov	r3, r0
 800d426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d42a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d132      	bne.n	800d498 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	3324      	adds	r3, #36	; 0x24
 800d436:	4618      	mov	r0, r3
 800d438:	f7ff fde4 	bl	800d004 <sum_sfn>
 800d43c:	4603      	mov	r3, r0
 800d43e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	69db      	ldr	r3, [r3, #28]
 800d444:	4619      	mov	r1, r3
 800d446:	69f8      	ldr	r0, [r7, #28]
 800d448:	f7fe feb4 	bl	800c1b4 <move_window>
 800d44c:	4603      	mov	r3, r0
 800d44e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d456:	2b00      	cmp	r3, #0
 800d458:	d11d      	bne.n	800d496 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	68d8      	ldr	r0, [r3, #12]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6a19      	ldr	r1, [r3, #32]
 800d462:	6a3b      	ldr	r3, [r7, #32]
 800d464:	b2da      	uxtb	r2, r3
 800d466:	7efb      	ldrb	r3, [r7, #27]
 800d468:	f7ff fcbe 	bl	800cde8 <put_lfn>
				fs->wflag = 1;
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	2201      	movs	r2, #1
 800d470:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d472:	2100      	movs	r1, #0
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7ff fa98 	bl	800c9aa <dir_next>
 800d47a:	4603      	mov	r3, r0
 800d47c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d484:	2b00      	cmp	r3, #0
 800d486:	d107      	bne.n	800d498 <dir_register+0x184>
 800d488:	6a3b      	ldr	r3, [r7, #32]
 800d48a:	3b01      	subs	r3, #1
 800d48c:	623b      	str	r3, [r7, #32]
 800d48e:	6a3b      	ldr	r3, [r7, #32]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d1d5      	bne.n	800d440 <dir_register+0x12c>
 800d494:	e000      	b.n	800d498 <dir_register+0x184>
				if (res != FR_OK) break;
 800d496:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d498:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d128      	bne.n	800d4f2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	69db      	ldr	r3, [r3, #28]
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	69f8      	ldr	r0, [r7, #28]
 800d4a8:	f7fe fe84 	bl	800c1b4 <move_window>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d4b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d11b      	bne.n	800d4f2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6a1b      	ldr	r3, [r3, #32]
 800d4be:	2220      	movs	r2, #32
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fe fc37 	bl	800bd36 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6a18      	ldr	r0, [r3, #32]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	3324      	adds	r3, #36	; 0x24
 800d4d0:	220b      	movs	r2, #11
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	f7fe fc0e 	bl	800bcf4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6a1b      	ldr	r3, [r3, #32]
 800d4e2:	330c      	adds	r3, #12
 800d4e4:	f002 0218 	and.w	r2, r2, #24
 800d4e8:	b2d2      	uxtb	r2, r2
 800d4ea:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d4f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3730      	adds	r7, #48	; 0x30
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	4ec4ec4f 	.word	0x4ec4ec4f

0800d504 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b086      	sub	sp, #24
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	695b      	ldr	r3, [r3, #20]
 800d516:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d520:	d007      	beq.n	800d532 <dir_remove+0x2e>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d526:	4619      	mov	r1, r3
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f7ff f9c3 	bl	800c8b4 <dir_sdi>
 800d52e:	4603      	mov	r3, r0
 800d530:	e000      	b.n	800d534 <dir_remove+0x30>
 800d532:	2300      	movs	r3, #0
 800d534:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d536:	7dfb      	ldrb	r3, [r7, #23]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d128      	bne.n	800d58e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	69db      	ldr	r3, [r3, #28]
 800d540:	4619      	mov	r1, r3
 800d542:	6938      	ldr	r0, [r7, #16]
 800d544:	f7fe fe36 	bl	800c1b4 <move_window>
 800d548:	4603      	mov	r3, r0
 800d54a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d54c:	7dfb      	ldrb	r3, [r7, #23]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d115      	bne.n	800d57e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6a1b      	ldr	r3, [r3, #32]
 800d556:	22e5      	movs	r2, #229	; 0xe5
 800d558:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	2201      	movs	r2, #1
 800d55e:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	695b      	ldr	r3, [r3, #20]
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	429a      	cmp	r2, r3
 800d568:	d90b      	bls.n	800d582 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800d56a:	2100      	movs	r1, #0
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7ff fa1c 	bl	800c9aa <dir_next>
 800d572:	4603      	mov	r3, r0
 800d574:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800d576:	7dfb      	ldrb	r3, [r7, #23]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d0df      	beq.n	800d53c <dir_remove+0x38>
 800d57c:	e002      	b.n	800d584 <dir_remove+0x80>
			if (res != FR_OK) break;
 800d57e:	bf00      	nop
 800d580:	e000      	b.n	800d584 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800d582:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800d584:	7dfb      	ldrb	r3, [r7, #23]
 800d586:	2b04      	cmp	r3, #4
 800d588:	d101      	bne.n	800d58e <dir_remove+0x8a>
 800d58a:	2302      	movs	r3, #2
 800d58c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800d58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3718      	adds	r7, #24
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b08a      	sub	sp, #40	; 0x28
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	613b      	str	r3, [r7, #16]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	60fb      	str	r3, [r7, #12]
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	617b      	str	r3, [r7, #20]
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	1c5a      	adds	r2, r3, #1
 800d5bc:	61ba      	str	r2, [r7, #24]
 800d5be:	693a      	ldr	r2, [r7, #16]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d5c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5c8:	2b1f      	cmp	r3, #31
 800d5ca:	d96a      	bls.n	800d6a2 <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d5cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5ce:	2b2f      	cmp	r3, #47	; 0x2f
 800d5d0:	d006      	beq.n	800d5e0 <create_name+0x48>
 800d5d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5d4:	2b5c      	cmp	r3, #92	; 0x5c
 800d5d6:	d110      	bne.n	800d5fa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d5d8:	e002      	b.n	800d5e0 <create_name+0x48>
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	61bb      	str	r3, [r7, #24]
 800d5e0:	693a      	ldr	r2, [r7, #16]
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	4413      	add	r3, r2
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	2b2f      	cmp	r3, #47	; 0x2f
 800d5ea:	d0f6      	beq.n	800d5da <create_name+0x42>
 800d5ec:	693a      	ldr	r2, [r7, #16]
 800d5ee:	69bb      	ldr	r3, [r7, #24]
 800d5f0:	4413      	add	r3, r2
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	2b5c      	cmp	r3, #92	; 0x5c
 800d5f6:	d0f0      	beq.n	800d5da <create_name+0x42>
			break;
 800d5f8:	e054      	b.n	800d6a4 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	2bfe      	cmp	r3, #254	; 0xfe
 800d5fe:	d901      	bls.n	800d604 <create_name+0x6c>
 800d600:	2306      	movs	r3, #6
 800d602:	e1bf      	b.n	800d984 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d604:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d606:	b2db      	uxtb	r3, r3
 800d608:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800d60a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	2b80      	cmp	r3, #128	; 0x80
 800d610:	d925      	bls.n	800d65e <create_name+0xc6>
 800d612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d614:	b2db      	uxtb	r3, r3
 800d616:	2bff      	cmp	r3, #255	; 0xff
 800d618:	d021      	beq.n	800d65e <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	1c5a      	adds	r2, r3, #1
 800d61e:	61ba      	str	r2, [r7, #24]
 800d620:	693a      	ldr	r2, [r7, #16]
 800d622:	4413      	add	r3, r2
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800d62a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d62c:	021b      	lsls	r3, r3, #8
 800d62e:	b29a      	uxth	r2, r3
 800d630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d634:	b29b      	uxth	r3, r3
 800d636:	4413      	add	r3, r2
 800d638:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800d63a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d63e:	2b3f      	cmp	r3, #63	; 0x3f
 800d640:	d903      	bls.n	800d64a <create_name+0xb2>
 800d642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d646:	2b7e      	cmp	r3, #126	; 0x7e
 800d648:	d909      	bls.n	800d65e <create_name+0xc6>
 800d64a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d64e:	2b00      	cmp	r3, #0
 800d650:	da03      	bge.n	800d65a <create_name+0xc2>
 800d652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d656:	2bff      	cmp	r3, #255	; 0xff
 800d658:	d101      	bne.n	800d65e <create_name+0xc6>
 800d65a:	2306      	movs	r3, #6
 800d65c:	e192      	b.n	800d984 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d65e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d660:	2101      	movs	r1, #1
 800d662:	4618      	mov	r0, r3
 800d664:	f001 ff32 	bl	800f4cc <ff_convert>
 800d668:	4603      	mov	r3, r0
 800d66a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d66c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d101      	bne.n	800d676 <create_name+0xde>
 800d672:	2306      	movs	r3, #6
 800d674:	e186      	b.n	800d984 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d678:	2b7f      	cmp	r3, #127	; 0x7f
 800d67a:	d809      	bhi.n	800d690 <create_name+0xf8>
 800d67c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d67e:	4619      	mov	r1, r3
 800d680:	489a      	ldr	r0, [pc, #616]	; (800d8ec <create_name+0x354>)
 800d682:	f7fe fb9a 	bl	800bdba <chk_chr>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d001      	beq.n	800d690 <create_name+0xf8>
 800d68c:	2306      	movs	r3, #6
 800d68e:	e179      	b.n	800d984 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	1c5a      	adds	r2, r3, #1
 800d694:	617a      	str	r2, [r7, #20]
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	4413      	add	r3, r2
 800d69c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d69e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d6a0:	e78a      	b.n	800d5b8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d6a2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d6a4:	693a      	ldr	r2, [r7, #16]
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	441a      	add	r2, r3
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d6ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6b0:	2b1f      	cmp	r3, #31
 800d6b2:	d801      	bhi.n	800d6b8 <create_name+0x120>
 800d6b4:	2304      	movs	r3, #4
 800d6b6:	e000      	b.n	800d6ba <create_name+0x122>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d6be:	e011      	b.n	800d6e4 <create_name+0x14c>
		w = lfn[di - 1];
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	881b      	ldrh	r3, [r3, #0]
 800d6d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d6d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6d4:	2b20      	cmp	r3, #32
 800d6d6:	d002      	beq.n	800d6de <create_name+0x146>
 800d6d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6da:	2b2e      	cmp	r3, #46	; 0x2e
 800d6dc:	d106      	bne.n	800d6ec <create_name+0x154>
		di--;
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1ea      	bne.n	800d6c0 <create_name+0x128>
 800d6ea:	e000      	b.n	800d6ee <create_name+0x156>
		if (w != ' ' && w != '.') break;
 800d6ec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	005b      	lsls	r3, r3, #1
 800d6f2:	68fa      	ldr	r2, [r7, #12]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <create_name+0x16c>
 800d700:	2306      	movs	r3, #6
 800d702:	e13f      	b.n	800d984 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	3324      	adds	r3, #36	; 0x24
 800d708:	220b      	movs	r2, #11
 800d70a:	2120      	movs	r1, #32
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7fe fb12 	bl	800bd36 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d712:	2300      	movs	r3, #0
 800d714:	61bb      	str	r3, [r7, #24]
 800d716:	e002      	b.n	800d71e <create_name+0x186>
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	3301      	adds	r3, #1
 800d71c:	61bb      	str	r3, [r7, #24]
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	005b      	lsls	r3, r3, #1
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	4413      	add	r3, r2
 800d726:	881b      	ldrh	r3, [r3, #0]
 800d728:	2b20      	cmp	r3, #32
 800d72a:	d0f5      	beq.n	800d718 <create_name+0x180>
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	005b      	lsls	r3, r3, #1
 800d730:	68fa      	ldr	r2, [r7, #12]
 800d732:	4413      	add	r3, r2
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	2b2e      	cmp	r3, #46	; 0x2e
 800d738:	d0ee      	beq.n	800d718 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d009      	beq.n	800d754 <create_name+0x1bc>
 800d740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d744:	f043 0303 	orr.w	r3, r3, #3
 800d748:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d74c:	e002      	b.n	800d754 <create_name+0x1bc>
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	3b01      	subs	r3, #1
 800d752:	617b      	str	r3, [r7, #20]
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d009      	beq.n	800d76e <create_name+0x1d6>
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d760:	3b01      	subs	r3, #1
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	4413      	add	r3, r2
 800d768:	881b      	ldrh	r3, [r3, #0]
 800d76a:	2b2e      	cmp	r3, #46	; 0x2e
 800d76c:	d1ef      	bne.n	800d74e <create_name+0x1b6>

	i = b = 0; ni = 8;
 800d76e:	2300      	movs	r3, #0
 800d770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d774:	2300      	movs	r3, #0
 800d776:	623b      	str	r3, [r7, #32]
 800d778:	2308      	movs	r3, #8
 800d77a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	1c5a      	adds	r2, r3, #1
 800d780:	61ba      	str	r2, [r7, #24]
 800d782:	005b      	lsls	r3, r3, #1
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	4413      	add	r3, r2
 800d788:	881b      	ldrh	r3, [r3, #0]
 800d78a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d78c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f000 80aa 	beq.w	800d8e8 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d796:	2b20      	cmp	r3, #32
 800d798:	d006      	beq.n	800d7a8 <create_name+0x210>
 800d79a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d79c:	2b2e      	cmp	r3, #46	; 0x2e
 800d79e:	d10a      	bne.n	800d7b6 <create_name+0x21e>
 800d7a0:	69ba      	ldr	r2, [r7, #24]
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d006      	beq.n	800d7b6 <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 800d7a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7ac:	f043 0303 	orr.w	r3, r3, #3
 800d7b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d7b4:	e097      	b.n	800d8e6 <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d7b6:	6a3a      	ldr	r2, [r7, #32]
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d203      	bcs.n	800d7c6 <create_name+0x22e>
 800d7be:	69ba      	ldr	r2, [r7, #24]
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d123      	bne.n	800d80e <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	2b0b      	cmp	r3, #11
 800d7ca:	d106      	bne.n	800d7da <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 800d7cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7d0:	f043 0303 	orr.w	r3, r3, #3
 800d7d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d7d8:	e08d      	b.n	800d8f6 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d7da:	69ba      	ldr	r2, [r7, #24]
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d005      	beq.n	800d7ee <create_name+0x256>
 800d7e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7e6:	f043 0303 	orr.w	r3, r3, #3
 800d7ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800d7ee:	69ba      	ldr	r2, [r7, #24]
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d87e      	bhi.n	800d8f4 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	61bb      	str	r3, [r7, #24]
 800d7fa:	2308      	movs	r3, #8
 800d7fc:	623b      	str	r3, [r7, #32]
 800d7fe:	230b      	movs	r3, #11
 800d800:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d80c:	e06b      	b.n	800d8e6 <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d80e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d810:	2b7f      	cmp	r3, #127	; 0x7f
 800d812:	d910      	bls.n	800d836 <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800d814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d816:	4618      	mov	r0, r3
 800d818:	f001 feb6 	bl	800f588 <ff_wtoupper>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2100      	movs	r1, #0
 800d820:	4618      	mov	r0, r3
 800d822:	f001 fe53 	bl	800f4cc <ff_convert>
 800d826:	4603      	mov	r3, r0
 800d828:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d82a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d82e:	f043 0302 	orr.w	r3, r3, #2
 800d832:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800d836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d838:	2bff      	cmp	r3, #255	; 0xff
 800d83a:	d91a      	bls.n	800d872 <create_name+0x2da>
			if (i >= ni - 1) {
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	3b01      	subs	r3, #1
 800d840:	6a3a      	ldr	r2, [r7, #32]
 800d842:	429a      	cmp	r2, r3
 800d844:	d308      	bcc.n	800d858 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800d846:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d84a:	f043 0303 	orr.w	r3, r3, #3
 800d84e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	623b      	str	r3, [r7, #32]
 800d856:	e046      	b.n	800d8e6 <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800d858:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d85a:	0a1b      	lsrs	r3, r3, #8
 800d85c:	b299      	uxth	r1, r3
 800d85e:	6a3b      	ldr	r3, [r7, #32]
 800d860:	1c5a      	adds	r2, r3, #1
 800d862:	623a      	str	r2, [r7, #32]
 800d864:	b2c9      	uxtb	r1, r1
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	4413      	add	r3, r2
 800d86a:	460a      	mov	r2, r1
 800d86c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d870:	e02f      	b.n	800d8d2 <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d874:	2b00      	cmp	r3, #0
 800d876:	d007      	beq.n	800d888 <create_name+0x2f0>
 800d878:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d87a:	4619      	mov	r1, r3
 800d87c:	481c      	ldr	r0, [pc, #112]	; (800d8f0 <create_name+0x358>)
 800d87e:	f7fe fa9c 	bl	800bdba <chk_chr>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d008      	beq.n	800d89a <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d888:	235f      	movs	r3, #95	; 0x5f
 800d88a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d88c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d890:	f043 0303 	orr.w	r3, r3, #3
 800d894:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d898:	e01b      	b.n	800d8d2 <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d89a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d89c:	2b40      	cmp	r3, #64	; 0x40
 800d89e:	d909      	bls.n	800d8b4 <create_name+0x31c>
 800d8a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8a2:	2b5a      	cmp	r3, #90	; 0x5a
 800d8a4:	d806      	bhi.n	800d8b4 <create_name+0x31c>
					b |= 2;
 800d8a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8aa:	f043 0302 	orr.w	r3, r3, #2
 800d8ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8b2:	e00e      	b.n	800d8d2 <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d8b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8b6:	2b60      	cmp	r3, #96	; 0x60
 800d8b8:	d90b      	bls.n	800d8d2 <create_name+0x33a>
 800d8ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8bc:	2b7a      	cmp	r3, #122	; 0x7a
 800d8be:	d808      	bhi.n	800d8d2 <create_name+0x33a>
						b |= 1; w -= 0x20;
 800d8c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8c4:	f043 0301 	orr.w	r3, r3, #1
 800d8c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8ce:	3b20      	subs	r3, #32
 800d8d0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d8d2:	6a3b      	ldr	r3, [r7, #32]
 800d8d4:	1c5a      	adds	r2, r3, #1
 800d8d6:	623a      	str	r2, [r7, #32]
 800d8d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d8da:	b2d1      	uxtb	r1, r2
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	4413      	add	r3, r2
 800d8e0:	460a      	mov	r2, r1
 800d8e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d8e6:	e749      	b.n	800d77c <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 800d8e8:	bf00      	nop
 800d8ea:	e004      	b.n	800d8f6 <create_name+0x35e>
 800d8ec:	080210ac 	.word	0x080210ac
 800d8f0:	080210b8 	.word	0x080210b8
			if (si > di) break;			/* No extension */
 800d8f4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d8fc:	2be5      	cmp	r3, #229	; 0xe5
 800d8fe:	d103      	bne.n	800d908 <create_name+0x370>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2205      	movs	r2, #5
 800d904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	2b08      	cmp	r3, #8
 800d90c:	d104      	bne.n	800d918 <create_name+0x380>
 800d90e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d91c:	f003 030c 	and.w	r3, r3, #12
 800d920:	2b0c      	cmp	r3, #12
 800d922:	d005      	beq.n	800d930 <create_name+0x398>
 800d924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d928:	f003 0303 	and.w	r3, r3, #3
 800d92c:	2b03      	cmp	r3, #3
 800d92e:	d105      	bne.n	800d93c <create_name+0x3a4>
 800d930:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d934:	f043 0302 	orr.w	r3, r3, #2
 800d938:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d93c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d940:	f003 0302 	and.w	r3, r3, #2
 800d944:	2b00      	cmp	r3, #0
 800d946:	d117      	bne.n	800d978 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d94c:	f003 0303 	and.w	r3, r3, #3
 800d950:	2b01      	cmp	r3, #1
 800d952:	d105      	bne.n	800d960 <create_name+0x3c8>
 800d954:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d958:	f043 0310 	orr.w	r3, r3, #16
 800d95c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d964:	f003 030c 	and.w	r3, r3, #12
 800d968:	2b04      	cmp	r3, #4
 800d96a:	d105      	bne.n	800d978 <create_name+0x3e0>
 800d96c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d970:	f043 0308 	orr.w	r3, r3, #8
 800d974:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d97e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d982:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d984:	4618      	mov	r0, r3
 800d986:	3728      	adds	r7, #40	; 0x28
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b086      	sub	sp, #24
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d9a0:	e002      	b.n	800d9a8 <follow_path+0x1c>
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	603b      	str	r3, [r7, #0]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	2b2f      	cmp	r3, #47	; 0x2f
 800d9ae:	d0f8      	beq.n	800d9a2 <follow_path+0x16>
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	2b5c      	cmp	r3, #92	; 0x5c
 800d9b6:	d0f4      	beq.n	800d9a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	2b1f      	cmp	r3, #31
 800d9c4:	d80a      	bhi.n	800d9dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2280      	movs	r2, #128	; 0x80
 800d9ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f7fe ff6f 	bl	800c8b4 <dir_sdi>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	75fb      	strb	r3, [r7, #23]
 800d9da:	e043      	b.n	800da64 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d9dc:	463b      	mov	r3, r7
 800d9de:	4619      	mov	r1, r3
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7ff fdd9 	bl	800d598 <create_name>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d9ea:	7dfb      	ldrb	r3, [r7, #23]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d134      	bne.n	800da5a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f7ff fbcf 	bl	800d194 <dir_find>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800da00:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800da02:	7dfb      	ldrb	r3, [r7, #23]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d00a      	beq.n	800da1e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800da08:	7dfb      	ldrb	r3, [r7, #23]
 800da0a:	2b04      	cmp	r3, #4
 800da0c:	d127      	bne.n	800da5e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800da0e:	7afb      	ldrb	r3, [r7, #11]
 800da10:	f003 0304 	and.w	r3, r3, #4
 800da14:	2b00      	cmp	r3, #0
 800da16:	d122      	bne.n	800da5e <follow_path+0xd2>
 800da18:	2305      	movs	r3, #5
 800da1a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800da1c:	e01f      	b.n	800da5e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800da1e:	7afb      	ldrb	r3, [r7, #11]
 800da20:	f003 0304 	and.w	r3, r3, #4
 800da24:	2b00      	cmp	r3, #0
 800da26:	d11c      	bne.n	800da62 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	799b      	ldrb	r3, [r3, #6]
 800da2c:	f003 0310 	and.w	r3, r3, #16
 800da30:	2b00      	cmp	r3, #0
 800da32:	d102      	bne.n	800da3a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800da34:	2305      	movs	r3, #5
 800da36:	75fb      	strb	r3, [r7, #23]
 800da38:	e014      	b.n	800da64 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	695b      	ldr	r3, [r3, #20]
 800da44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da48:	4413      	add	r3, r2
 800da4a:	4619      	mov	r1, r3
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f7ff f8b8 	bl	800cbc2 <ld_clust>
 800da52:	4602      	mov	r2, r0
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800da58:	e7c0      	b.n	800d9dc <follow_path+0x50>
			if (res != FR_OK) break;
 800da5a:	bf00      	nop
 800da5c:	e002      	b.n	800da64 <follow_path+0xd8>
				break;
 800da5e:	bf00      	nop
 800da60:	e000      	b.n	800da64 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800da62:	bf00      	nop
			}
		}
	}

	return res;
 800da64:	7dfb      	ldrb	r3, [r7, #23]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3718      	adds	r7, #24
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800da6e:	b480      	push	{r7}
 800da70:	b087      	sub	sp, #28
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800da76:	f04f 33ff 	mov.w	r3, #4294967295
 800da7a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d031      	beq.n	800dae8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	617b      	str	r3, [r7, #20]
 800da8a:	e002      	b.n	800da92 <get_ldnumber+0x24>
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	3301      	adds	r3, #1
 800da90:	617b      	str	r3, [r7, #20]
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	2b1f      	cmp	r3, #31
 800da98:	d903      	bls.n	800daa2 <get_ldnumber+0x34>
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	2b3a      	cmp	r3, #58	; 0x3a
 800daa0:	d1f4      	bne.n	800da8c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	2b3a      	cmp	r3, #58	; 0x3a
 800daa8:	d11c      	bne.n	800dae4 <get_ldnumber+0x76>
			tp = *path;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	1c5a      	adds	r2, r3, #1
 800dab4:	60fa      	str	r2, [r7, #12]
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	3b30      	subs	r3, #48	; 0x30
 800daba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	2b09      	cmp	r3, #9
 800dac0:	d80e      	bhi.n	800dae0 <get_ldnumber+0x72>
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d10a      	bne.n	800dae0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d107      	bne.n	800dae0 <get_ldnumber+0x72>
					vol = (int)i;
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	3301      	adds	r3, #1
 800dad8:	617b      	str	r3, [r7, #20]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	697a      	ldr	r2, [r7, #20]
 800dade:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	e002      	b.n	800daea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dae4:	2300      	movs	r3, #0
 800dae6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dae8:	693b      	ldr	r3, [r7, #16]
}
 800daea:	4618      	mov	r0, r3
 800daec:	371c      	adds	r7, #28
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr
	...

0800daf8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	70da      	strb	r2, [r3, #3]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f04f 32ff 	mov.w	r2, #4294967295
 800db0e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f7fe fb4e 	bl	800c1b4 <move_window>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d001      	beq.n	800db22 <check_fs+0x2a>
 800db1e:	2304      	movs	r3, #4
 800db20:	e038      	b.n	800db94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	3338      	adds	r3, #56	; 0x38
 800db26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7fe f860 	bl	800bbf0 <ld_word>
 800db30:	4603      	mov	r3, r0
 800db32:	461a      	mov	r2, r3
 800db34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800db38:	429a      	cmp	r2, r3
 800db3a:	d001      	beq.n	800db40 <check_fs+0x48>
 800db3c:	2303      	movs	r3, #3
 800db3e:	e029      	b.n	800db94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800db46:	2be9      	cmp	r3, #233	; 0xe9
 800db48:	d009      	beq.n	800db5e <check_fs+0x66>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800db50:	2beb      	cmp	r3, #235	; 0xeb
 800db52:	d11e      	bne.n	800db92 <check_fs+0x9a>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800db5a:	2b90      	cmp	r3, #144	; 0x90
 800db5c:	d119      	bne.n	800db92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	3338      	adds	r3, #56	; 0x38
 800db62:	3336      	adds	r3, #54	; 0x36
 800db64:	4618      	mov	r0, r3
 800db66:	f7fe f85b 	bl	800bc20 <ld_dword>
 800db6a:	4603      	mov	r3, r0
 800db6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800db70:	4a0a      	ldr	r2, [pc, #40]	; (800db9c <check_fs+0xa4>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d101      	bne.n	800db7a <check_fs+0x82>
 800db76:	2300      	movs	r3, #0
 800db78:	e00c      	b.n	800db94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	3338      	adds	r3, #56	; 0x38
 800db7e:	3352      	adds	r3, #82	; 0x52
 800db80:	4618      	mov	r0, r3
 800db82:	f7fe f84d 	bl	800bc20 <ld_dword>
 800db86:	4603      	mov	r3, r0
 800db88:	4a05      	ldr	r2, [pc, #20]	; (800dba0 <check_fs+0xa8>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d101      	bne.n	800db92 <check_fs+0x9a>
 800db8e:	2300      	movs	r3, #0
 800db90:	e000      	b.n	800db94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800db92:	2302      	movs	r3, #2
}
 800db94:	4618      	mov	r0, r3
 800db96:	3708      	adds	r7, #8
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	00544146 	.word	0x00544146
 800dba0:	33544146 	.word	0x33544146

0800dba4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b096      	sub	sp, #88	; 0x58
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	4613      	mov	r3, r2
 800dbb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f7ff ff58 	bl	800da6e <get_ldnumber>
 800dbbe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dbc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	da01      	bge.n	800dbca <find_volume+0x26>
 800dbc6:	230b      	movs	r3, #11
 800dbc8:	e236      	b.n	800e038 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dbca:	4aac      	ldr	r2, [pc, #688]	; (800de7c <find_volume+0x2d8>)
 800dbcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbd2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d101      	bne.n	800dbde <find_volume+0x3a>
 800dbda:	230c      	movs	r3, #12
 800dbdc:	e22c      	b.n	800e038 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800dbde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dbe0:	f7fe f906 	bl	800bdf0 <lock_fs>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d101      	bne.n	800dbee <find_volume+0x4a>
 800dbea:	230f      	movs	r3, #15
 800dbec:	e224      	b.n	800e038 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbf2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dbf4:	79fb      	ldrb	r3, [r7, #7]
 800dbf6:	f023 0301 	bic.w	r3, r3, #1
 800dbfa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d01a      	beq.n	800dc3a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800dc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc06:	785b      	ldrb	r3, [r3, #1]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fd ff53 	bl	800bab4 <disk_status>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dc14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dc18:	f003 0301 	and.w	r3, r3, #1
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d10c      	bne.n	800dc3a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dc20:	79fb      	ldrb	r3, [r7, #7]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d007      	beq.n	800dc36 <find_volume+0x92>
 800dc26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dc2a:	f003 0304 	and.w	r3, r3, #4
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d001      	beq.n	800dc36 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800dc32:	230a      	movs	r3, #10
 800dc34:	e200      	b.n	800e038 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800dc36:	2300      	movs	r3, #0
 800dc38:	e1fe      	b.n	800e038 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc42:	b2da      	uxtb	r2, r3
 800dc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4a:	785b      	ldrb	r3, [r3, #1]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7fd ff4b 	bl	800bae8 <disk_initialize>
 800dc52:	4603      	mov	r3, r0
 800dc54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dc58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dc5c:	f003 0301 	and.w	r3, r3, #1
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d001      	beq.n	800dc68 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dc64:	2303      	movs	r3, #3
 800dc66:	e1e7      	b.n	800e038 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dc68:	79fb      	ldrb	r3, [r7, #7]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d007      	beq.n	800dc7e <find_volume+0xda>
 800dc6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dc72:	f003 0304 	and.w	r3, r3, #4
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d001      	beq.n	800dc7e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800dc7a:	230a      	movs	r3, #10
 800dc7c:	e1dc      	b.n	800e038 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dc82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc86:	f7ff ff37 	bl	800daf8 <check_fs>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dc90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	d14b      	bne.n	800dd30 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dc98:	2300      	movs	r3, #0
 800dc9a:	643b      	str	r3, [r7, #64]	; 0x40
 800dc9c:	e01f      	b.n	800dcde <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dca6:	011b      	lsls	r3, r3, #4
 800dca8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dcac:	4413      	add	r3, r2
 800dcae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d006      	beq.n	800dcc8 <find_volume+0x124>
 800dcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbc:	3308      	adds	r3, #8
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7fd ffae 	bl	800bc20 <ld_dword>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	e000      	b.n	800dcca <find_volume+0x126>
 800dcc8:	2200      	movs	r2, #0
 800dcca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800dcd2:	440b      	add	r3, r1
 800dcd4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dcd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcda:	3301      	adds	r3, #1
 800dcdc:	643b      	str	r3, [r7, #64]	; 0x40
 800dcde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dce0:	2b03      	cmp	r3, #3
 800dce2:	d9dc      	bls.n	800dc9e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dce4:	2300      	movs	r3, #0
 800dce6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800dce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d002      	beq.n	800dcf4 <find_volume+0x150>
 800dcee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcf0:	3b01      	subs	r3, #1
 800dcf2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dcf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800dcfc:	4413      	add	r3, r2
 800dcfe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dd02:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dd04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d005      	beq.n	800dd16 <find_volume+0x172>
 800dd0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dd0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd0e:	f7ff fef3 	bl	800daf8 <check_fs>
 800dd12:	4603      	mov	r3, r0
 800dd14:	e000      	b.n	800dd18 <find_volume+0x174>
 800dd16:	2303      	movs	r3, #3
 800dd18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dd1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d905      	bls.n	800dd30 <find_volume+0x18c>
 800dd24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd26:	3301      	adds	r3, #1
 800dd28:	643b      	str	r3, [r7, #64]	; 0x40
 800dd2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd2c:	2b03      	cmp	r3, #3
 800dd2e:	d9e1      	bls.n	800dcf4 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dd30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd34:	2b04      	cmp	r3, #4
 800dd36:	d101      	bne.n	800dd3c <find_volume+0x198>
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e17d      	b.n	800e038 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dd3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d901      	bls.n	800dd48 <find_volume+0x1a4>
 800dd44:	230d      	movs	r3, #13
 800dd46:	e177      	b.n	800e038 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4a:	3338      	adds	r3, #56	; 0x38
 800dd4c:	330b      	adds	r3, #11
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fd ff4e 	bl	800bbf0 <ld_word>
 800dd54:	4603      	mov	r3, r0
 800dd56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd5a:	d001      	beq.n	800dd60 <find_volume+0x1bc>
 800dd5c:	230d      	movs	r3, #13
 800dd5e:	e16b      	b.n	800e038 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd62:	3338      	adds	r3, #56	; 0x38
 800dd64:	3316      	adds	r3, #22
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fd ff42 	bl	800bbf0 <ld_word>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dd70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d106      	bne.n	800dd84 <find_volume+0x1e0>
 800dd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd78:	3338      	adds	r3, #56	; 0x38
 800dd7a:	3324      	adds	r3, #36	; 0x24
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7fd ff4f 	bl	800bc20 <ld_dword>
 800dd82:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd88:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800dd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd92:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd96:	789b      	ldrb	r3, [r3, #2]
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d005      	beq.n	800dda8 <find_volume+0x204>
 800dd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9e:	789b      	ldrb	r3, [r3, #2]
 800dda0:	2b02      	cmp	r3, #2
 800dda2:	d001      	beq.n	800dda8 <find_volume+0x204>
 800dda4:	230d      	movs	r3, #13
 800dda6:	e147      	b.n	800e038 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddaa:	789b      	ldrb	r3, [r3, #2]
 800ddac:	461a      	mov	r2, r3
 800ddae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddb0:	fb02 f303 	mul.w	r3, r2, r3
 800ddb4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ddb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddbc:	b29a      	uxth	r2, r3
 800ddbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ddc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc4:	895b      	ldrh	r3, [r3, #10]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d008      	beq.n	800dddc <find_volume+0x238>
 800ddca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddcc:	895b      	ldrh	r3, [r3, #10]
 800ddce:	461a      	mov	r2, r3
 800ddd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd2:	895b      	ldrh	r3, [r3, #10]
 800ddd4:	3b01      	subs	r3, #1
 800ddd6:	4013      	ands	r3, r2
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d001      	beq.n	800dde0 <find_volume+0x23c>
 800dddc:	230d      	movs	r3, #13
 800ddde:	e12b      	b.n	800e038 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde2:	3338      	adds	r3, #56	; 0x38
 800dde4:	3311      	adds	r3, #17
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7fd ff02 	bl	800bbf0 <ld_word>
 800ddec:	4603      	mov	r3, r0
 800ddee:	461a      	mov	r2, r3
 800ddf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ddf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf6:	891b      	ldrh	r3, [r3, #8]
 800ddf8:	f003 030f 	and.w	r3, r3, #15
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d001      	beq.n	800de06 <find_volume+0x262>
 800de02:	230d      	movs	r3, #13
 800de04:	e118      	b.n	800e038 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800de06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de08:	3338      	adds	r3, #56	; 0x38
 800de0a:	3313      	adds	r3, #19
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7fd feef 	bl	800bbf0 <ld_word>
 800de12:	4603      	mov	r3, r0
 800de14:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800de16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d106      	bne.n	800de2a <find_volume+0x286>
 800de1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de1e:	3338      	adds	r3, #56	; 0x38
 800de20:	3320      	adds	r3, #32
 800de22:	4618      	mov	r0, r3
 800de24:	f7fd fefc 	bl	800bc20 <ld_dword>
 800de28:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800de2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2c:	3338      	adds	r3, #56	; 0x38
 800de2e:	330e      	adds	r3, #14
 800de30:	4618      	mov	r0, r3
 800de32:	f7fd fedd 	bl	800bbf0 <ld_word>
 800de36:	4603      	mov	r3, r0
 800de38:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800de3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d101      	bne.n	800de44 <find_volume+0x2a0>
 800de40:	230d      	movs	r3, #13
 800de42:	e0f9      	b.n	800e038 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800de44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800de46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de48:	4413      	add	r3, r2
 800de4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de4c:	8912      	ldrh	r2, [r2, #8]
 800de4e:	0912      	lsrs	r2, r2, #4
 800de50:	b292      	uxth	r2, r2
 800de52:	4413      	add	r3, r2
 800de54:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800de56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d201      	bcs.n	800de62 <find_volume+0x2be>
 800de5e:	230d      	movs	r3, #13
 800de60:	e0ea      	b.n	800e038 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800de62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de66:	1ad3      	subs	r3, r2, r3
 800de68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de6a:	8952      	ldrh	r2, [r2, #10]
 800de6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800de70:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800de72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de74:	2b00      	cmp	r3, #0
 800de76:	d103      	bne.n	800de80 <find_volume+0x2dc>
 800de78:	230d      	movs	r3, #13
 800de7a:	e0dd      	b.n	800e038 <find_volume+0x494>
 800de7c:	20000b30 	.word	0x20000b30
		fmt = FS_FAT32;
 800de80:	2303      	movs	r3, #3
 800de82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800de86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de88:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d802      	bhi.n	800de96 <find_volume+0x2f2>
 800de90:	2302      	movs	r3, #2
 800de92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800de96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de98:	f640 72f5 	movw	r2, #4085	; 0xff5
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d802      	bhi.n	800dea6 <find_volume+0x302>
 800dea0:	2301      	movs	r3, #1
 800dea2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea8:	1c9a      	adds	r2, r3, #2
 800deaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deac:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800deae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800deb2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800deb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800deb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deb8:	441a      	add	r2, r3
 800deba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800debc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800debe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec2:	441a      	add	r2, r3
 800dec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800dec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800decc:	2b03      	cmp	r3, #3
 800dece:	d11e      	bne.n	800df0e <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ded0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded2:	3338      	adds	r3, #56	; 0x38
 800ded4:	332a      	adds	r3, #42	; 0x2a
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fd fe8a 	bl	800bbf0 <ld_word>
 800dedc:	4603      	mov	r3, r0
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d001      	beq.n	800dee6 <find_volume+0x342>
 800dee2:	230d      	movs	r3, #13
 800dee4:	e0a8      	b.n	800e038 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee8:	891b      	ldrh	r3, [r3, #8]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d001      	beq.n	800def2 <find_volume+0x34e>
 800deee:	230d      	movs	r3, #13
 800def0:	e0a2      	b.n	800e038 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800def2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def4:	3338      	adds	r3, #56	; 0x38
 800def6:	332c      	adds	r3, #44	; 0x2c
 800def8:	4618      	mov	r0, r3
 800defa:	f7fd fe91 	bl	800bc20 <ld_dword>
 800defe:	4602      	mov	r2, r0
 800df00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df02:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800df04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df06:	69db      	ldr	r3, [r3, #28]
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	647b      	str	r3, [r7, #68]	; 0x44
 800df0c:	e01f      	b.n	800df4e <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800df0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df10:	891b      	ldrh	r3, [r3, #8]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d101      	bne.n	800df1a <find_volume+0x376>
 800df16:	230d      	movs	r3, #13
 800df18:	e08e      	b.n	800e038 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800df1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df20:	441a      	add	r2, r3
 800df22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df24:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800df26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df2a:	2b02      	cmp	r3, #2
 800df2c:	d103      	bne.n	800df36 <find_volume+0x392>
 800df2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df30:	69db      	ldr	r3, [r3, #28]
 800df32:	005b      	lsls	r3, r3, #1
 800df34:	e00a      	b.n	800df4c <find_volume+0x3a8>
 800df36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df38:	69da      	ldr	r2, [r3, #28]
 800df3a:	4613      	mov	r3, r2
 800df3c:	005b      	lsls	r3, r3, #1
 800df3e:	4413      	add	r3, r2
 800df40:	085a      	lsrs	r2, r3, #1
 800df42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df44:	69db      	ldr	r3, [r3, #28]
 800df46:	f003 0301 	and.w	r3, r3, #1
 800df4a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800df4c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800df4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df50:	6a1a      	ldr	r2, [r3, #32]
 800df52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df54:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800df58:	0a5b      	lsrs	r3, r3, #9
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d201      	bcs.n	800df62 <find_volume+0x3be>
 800df5e:	230d      	movs	r3, #13
 800df60:	e06a      	b.n	800e038 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800df62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df64:	f04f 32ff 	mov.w	r2, #4294967295
 800df68:	619a      	str	r2, [r3, #24]
 800df6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6c:	699a      	ldr	r2, [r3, #24]
 800df6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df70:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800df72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df74:	2280      	movs	r2, #128	; 0x80
 800df76:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800df78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df7c:	2b03      	cmp	r3, #3
 800df7e:	d149      	bne.n	800e014 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800df80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df82:	3338      	adds	r3, #56	; 0x38
 800df84:	3330      	adds	r3, #48	; 0x30
 800df86:	4618      	mov	r0, r3
 800df88:	f7fd fe32 	bl	800bbf0 <ld_word>
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d140      	bne.n	800e014 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800df92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df94:	3301      	adds	r3, #1
 800df96:	4619      	mov	r1, r3
 800df98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df9a:	f7fe f90b 	bl	800c1b4 <move_window>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d137      	bne.n	800e014 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800dfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfac:	3338      	adds	r3, #56	; 0x38
 800dfae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7fd fe1c 	bl	800bbf0 <ld_word>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	461a      	mov	r2, r3
 800dfbc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d127      	bne.n	800e014 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc6:	3338      	adds	r3, #56	; 0x38
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7fd fe29 	bl	800bc20 <ld_dword>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	4a1b      	ldr	r2, [pc, #108]	; (800e040 <find_volume+0x49c>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d11e      	bne.n	800e014 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd8:	3338      	adds	r3, #56	; 0x38
 800dfda:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7fd fe1e 	bl	800bc20 <ld_dword>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	4a17      	ldr	r2, [pc, #92]	; (800e044 <find_volume+0x4a0>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d113      	bne.n	800e014 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfee:	3338      	adds	r3, #56	; 0x38
 800dff0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fd fe13 	bl	800bc20 <ld_dword>
 800dffa:	4602      	mov	r2, r0
 800dffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e002:	3338      	adds	r3, #56	; 0x38
 800e004:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e008:	4618      	mov	r0, r3
 800e00a:	f7fd fe09 	bl	800bc20 <ld_dword>
 800e00e:	4602      	mov	r2, r0
 800e010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e012:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e016:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e01a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e01c:	4b0a      	ldr	r3, [pc, #40]	; (800e048 <find_volume+0x4a4>)
 800e01e:	881b      	ldrh	r3, [r3, #0]
 800e020:	3301      	adds	r3, #1
 800e022:	b29a      	uxth	r2, r3
 800e024:	4b08      	ldr	r3, [pc, #32]	; (800e048 <find_volume+0x4a4>)
 800e026:	801a      	strh	r2, [r3, #0]
 800e028:	4b07      	ldr	r3, [pc, #28]	; (800e048 <find_volume+0x4a4>)
 800e02a:	881a      	ldrh	r2, [r3, #0]
 800e02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e030:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e032:	f7fe f857 	bl	800c0e4 <clear_lock>
#endif
	return FR_OK;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3758      	adds	r7, #88	; 0x58
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	41615252 	.word	0x41615252
 800e044:	61417272 	.word	0x61417272
 800e048:	20000b34 	.word	0x20000b34

0800e04c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e056:	2309      	movs	r3, #9
 800e058:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d02e      	beq.n	800e0be <validate+0x72>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d02a      	beq.n	800e0be <validate+0x72>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d025      	beq.n	800e0be <validate+0x72>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	889a      	ldrh	r2, [r3, #4]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	88db      	ldrh	r3, [r3, #6]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d11e      	bne.n	800e0be <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4618      	mov	r0, r3
 800e086:	f7fd feb3 	bl	800bdf0 <lock_fs>
 800e08a:	4603      	mov	r3, r0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d014      	beq.n	800e0ba <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	785b      	ldrb	r3, [r3, #1]
 800e096:	4618      	mov	r0, r3
 800e098:	f7fd fd0c 	bl	800bab4 <disk_status>
 800e09c:	4603      	mov	r3, r0
 800e09e:	f003 0301 	and.w	r3, r3, #1
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d102      	bne.n	800e0ac <validate+0x60>
				res = FR_OK;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	73fb      	strb	r3, [r7, #15]
 800e0aa:	e008      	b.n	800e0be <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7fd feb2 	bl	800be1c <unlock_fs>
 800e0b8:	e001      	b.n	800e0be <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e0ba:	230f      	movs	r3, #15
 800e0bc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e0be:	7bfb      	ldrb	r3, [r7, #15]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d102      	bne.n	800e0ca <validate+0x7e>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	e000      	b.n	800e0cc <validate+0x80>
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	683a      	ldr	r2, [r7, #0]
 800e0ce:	6013      	str	r3, [r2, #0]
	return res;
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
	...

0800e0dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b088      	sub	sp, #32
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e0ee:	f107 0310 	add.w	r3, r7, #16
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7ff fcbb 	bl	800da6e <get_ldnumber>
 800e0f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	da01      	bge.n	800e104 <f_mount+0x28>
 800e100:	230b      	movs	r3, #11
 800e102:	e048      	b.n	800e196 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e104:	4a26      	ldr	r2, [pc, #152]	; (800e1a0 <f_mount+0xc4>)
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e10c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e10e:	69bb      	ldr	r3, [r7, #24]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d00f      	beq.n	800e134 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e114:	69b8      	ldr	r0, [r7, #24]
 800e116:	f7fd ffe5 	bl	800c0e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	691b      	ldr	r3, [r3, #16]
 800e11e:	4618      	mov	r0, r3
 800e120:	f001 fadc 	bl	800f6dc <ff_del_syncobj>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d101      	bne.n	800e12e <f_mount+0x52>
 800e12a:	2302      	movs	r3, #2
 800e12c:	e033      	b.n	800e196 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	2200      	movs	r2, #0
 800e132:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00f      	beq.n	800e15a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2200      	movs	r2, #0
 800e13e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	b2da      	uxtb	r2, r3
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	3310      	adds	r3, #16
 800e148:	4619      	mov	r1, r3
 800e14a:	4610      	mov	r0, r2
 800e14c:	f001 faa6 	bl	800f69c <ff_cre_syncobj>
 800e150:	4603      	mov	r3, r0
 800e152:	2b00      	cmp	r3, #0
 800e154:	d101      	bne.n	800e15a <f_mount+0x7e>
 800e156:	2302      	movs	r3, #2
 800e158:	e01d      	b.n	800e196 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	4910      	ldr	r1, [pc, #64]	; (800e1a0 <f_mount+0xc4>)
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d002      	beq.n	800e170 <f_mount+0x94>
 800e16a:	79fb      	ldrb	r3, [r7, #7]
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d001      	beq.n	800e174 <f_mount+0x98>
 800e170:	2300      	movs	r3, #0
 800e172:	e010      	b.n	800e196 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e174:	f107 010c 	add.w	r1, r7, #12
 800e178:	f107 0308 	add.w	r3, r7, #8
 800e17c:	2200      	movs	r2, #0
 800e17e:	4618      	mov	r0, r3
 800e180:	f7ff fd10 	bl	800dba4 <find_volume>
 800e184:	4603      	mov	r3, r0
 800e186:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	7dfa      	ldrb	r2, [r7, #23]
 800e18c:	4611      	mov	r1, r2
 800e18e:	4618      	mov	r0, r3
 800e190:	f7fd fe44 	bl	800be1c <unlock_fs>
 800e194:	7dfb      	ldrb	r3, [r7, #23]
}
 800e196:	4618      	mov	r0, r3
 800e198:	3720      	adds	r7, #32
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	20000b30 	.word	0x20000b30

0800e1a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	f107 030c 	add.w	r3, r7, #12
 800e1b0:	6018      	str	r0, [r3, #0]
 800e1b2:	f107 0308 	add.w	r3, r7, #8
 800e1b6:	6019      	str	r1, [r3, #0]
 800e1b8:	1dfb      	adds	r3, r7, #7
 800e1ba:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e1bc:	f107 030c 	add.w	r3, r7, #12
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d101      	bne.n	800e1ca <f_open+0x26>
 800e1c6:	2309      	movs	r3, #9
 800e1c8:	e239      	b.n	800e63e <f_open+0x49a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e1ca:	1dfb      	adds	r3, r7, #7
 800e1cc:	1dfa      	adds	r2, r7, #7
 800e1ce:	7812      	ldrb	r2, [r2, #0]
 800e1d0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e1d4:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800e1d6:	1dfb      	adds	r3, r7, #7
 800e1d8:	781a      	ldrb	r2, [r3, #0]
 800e1da:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800e1de:	f107 0308 	add.w	r3, r7, #8
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7ff fcde 	bl	800dba4 <find_volume>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800e1ee:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	f040 8210 	bne.w	800e618 <f_open+0x474>
		dj.obj.fs = fs;
 800e1f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e1fc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800e200:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e204:	f107 0214 	add.w	r2, r7, #20
 800e208:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e20a:	f107 0308 	add.w	r3, r7, #8
 800e20e:	681a      	ldr	r2, [r3, #0]
 800e210:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e214:	4611      	mov	r1, r2
 800e216:	4618      	mov	r0, r3
 800e218:	f7ff fbb8 	bl	800d98c <follow_path>
 800e21c:	4603      	mov	r3, r0
 800e21e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e222:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e226:	2b00      	cmp	r3, #0
 800e228:	d11b      	bne.n	800e262 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e22a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800e22e:	b25b      	sxtb	r3, r3
 800e230:	2b00      	cmp	r3, #0
 800e232:	da03      	bge.n	800e23c <f_open+0x98>
				res = FR_INVALID_NAME;
 800e234:	2306      	movs	r3, #6
 800e236:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e23a:	e012      	b.n	800e262 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e23c:	1dfb      	adds	r3, r7, #7
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	f023 0301 	bic.w	r3, r3, #1
 800e244:	2b00      	cmp	r3, #0
 800e246:	bf14      	ite	ne
 800e248:	2301      	movne	r3, #1
 800e24a:	2300      	moveq	r3, #0
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	461a      	mov	r2, r3
 800e250:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e254:	4611      	mov	r1, r2
 800e256:	4618      	mov	r0, r3
 800e258:	f7fd fdfc 	bl	800be54 <chk_lock>
 800e25c:	4603      	mov	r3, r0
 800e25e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e262:	1dfb      	adds	r3, r7, #7
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	f003 031c 	and.w	r3, r3, #28
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	f000 809b 	beq.w	800e3a6 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 800e270:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e274:	2b00      	cmp	r3, #0
 800e276:	d019      	beq.n	800e2ac <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e278:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e27c:	2b04      	cmp	r3, #4
 800e27e:	d10e      	bne.n	800e29e <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e280:	f7fd fe44 	bl	800bf0c <enq_lock>
 800e284:	4603      	mov	r3, r0
 800e286:	2b00      	cmp	r3, #0
 800e288:	d006      	beq.n	800e298 <f_open+0xf4>
 800e28a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e28e:	4618      	mov	r0, r3
 800e290:	f7ff f840 	bl	800d314 <dir_register>
 800e294:	4603      	mov	r3, r0
 800e296:	e000      	b.n	800e29a <f_open+0xf6>
 800e298:	2312      	movs	r3, #18
 800e29a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e29e:	1dfb      	adds	r3, r7, #7
 800e2a0:	1dfa      	adds	r2, r7, #7
 800e2a2:	7812      	ldrb	r2, [r2, #0]
 800e2a4:	f042 0208 	orr.w	r2, r2, #8
 800e2a8:	701a      	strb	r2, [r3, #0]
 800e2aa:	e012      	b.n	800e2d2 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e2ac:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800e2b0:	f003 0311 	and.w	r3, r3, #17
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d003      	beq.n	800e2c0 <f_open+0x11c>
					res = FR_DENIED;
 800e2b8:	2307      	movs	r3, #7
 800e2ba:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e2be:	e008      	b.n	800e2d2 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e2c0:	1dfb      	adds	r3, r7, #7
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	f003 0304 	and.w	r3, r3, #4
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d002      	beq.n	800e2d2 <f_open+0x12e>
 800e2cc:	2308      	movs	r3, #8
 800e2ce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e2d2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	f040 8082 	bne.w	800e3e0 <f_open+0x23c>
 800e2dc:	1dfb      	adds	r3, r7, #7
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	f003 0308 	and.w	r3, r3, #8
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d07b      	beq.n	800e3e0 <f_open+0x23c>
				dw = GET_FATTIME();
 800e2e8:	f7fc fc10 	bl	800ab0c <get_fattime>
 800e2ec:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e2f0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e2f4:	330e      	adds	r3, #14
 800e2f6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7fd fcce 	bl	800bc9c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e300:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e304:	3316      	adds	r3, #22
 800e306:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fd fcc6 	bl	800bc9c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e310:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e314:	330b      	adds	r3, #11
 800e316:	2220      	movs	r2, #32
 800e318:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e31a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e31e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800e322:	4611      	mov	r1, r2
 800e324:	4618      	mov	r0, r3
 800e326:	f7fe fc4c 	bl	800cbc2 <ld_clust>
 800e32a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e32e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e332:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800e336:	2200      	movs	r2, #0
 800e338:	4618      	mov	r0, r3
 800e33a:	f7fe fc61 	bl	800cc00 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e33e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e342:	331c      	adds	r3, #28
 800e344:	2100      	movs	r1, #0
 800e346:	4618      	mov	r0, r3
 800e348:	f7fd fca8 	bl	800bc9c <st_dword>
					fs->wflag = 1;
 800e34c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e350:	2201      	movs	r2, #1
 800e352:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e354:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d041      	beq.n	800e3e0 <f_open+0x23c>
						dw = fs->winsect;
 800e35c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e362:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800e366:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e36a:	2200      	movs	r2, #0
 800e36c:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800e370:	4618      	mov	r0, r3
 800e372:	f7fe f96e 	bl	800c652 <remove_chain>
 800e376:	4603      	mov	r3, r0
 800e378:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800e37c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e380:	2b00      	cmp	r3, #0
 800e382:	d12d      	bne.n	800e3e0 <f_open+0x23c>
							res = move_window(fs, dw);
 800e384:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e388:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fd ff11 	bl	800c1b4 <move_window>
 800e392:	4603      	mov	r3, r0
 800e394:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e398:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e39c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800e3a0:	3a01      	subs	r2, #1
 800e3a2:	615a      	str	r2, [r3, #20]
 800e3a4:	e01c      	b.n	800e3e0 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e3a6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d118      	bne.n	800e3e0 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e3ae:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800e3b2:	f003 0310 	and.w	r3, r3, #16
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d003      	beq.n	800e3c2 <f_open+0x21e>
					res = FR_NO_FILE;
 800e3ba:	2304      	movs	r3, #4
 800e3bc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e3c0:	e00e      	b.n	800e3e0 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e3c2:	1dfb      	adds	r3, r7, #7
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	f003 0302 	and.w	r3, r3, #2
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d008      	beq.n	800e3e0 <f_open+0x23c>
 800e3ce:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800e3d2:	f003 0301 	and.w	r3, r3, #1
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d002      	beq.n	800e3e0 <f_open+0x23c>
						res = FR_DENIED;
 800e3da:	2307      	movs	r3, #7
 800e3dc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800e3e0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d136      	bne.n	800e456 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e3e8:	1dfb      	adds	r3, r7, #7
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	f003 0308 	and.w	r3, r3, #8
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d005      	beq.n	800e400 <f_open+0x25c>
				mode |= FA_MODIFIED;
 800e3f4:	1dfb      	adds	r3, r7, #7
 800e3f6:	1dfa      	adds	r2, r7, #7
 800e3f8:	7812      	ldrb	r2, [r2, #0]
 800e3fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3fe:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e400:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e406:	f107 030c 	add.w	r3, r7, #12
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e40e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800e412:	f107 030c 	add.w	r3, r7, #12
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e41a:	1dfb      	adds	r3, r7, #7
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	f023 0301 	bic.w	r3, r3, #1
 800e422:	2b00      	cmp	r3, #0
 800e424:	bf14      	ite	ne
 800e426:	2301      	movne	r3, #1
 800e428:	2300      	moveq	r3, #0
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	461a      	mov	r2, r3
 800e42e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e432:	4611      	mov	r1, r2
 800e434:	4618      	mov	r0, r3
 800e436:	f7fd fd8b 	bl	800bf50 <inc_lock>
 800e43a:	4602      	mov	r2, r0
 800e43c:	f107 030c 	add.w	r3, r7, #12
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e444:	f107 030c 	add.w	r3, r7, #12
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	691b      	ldr	r3, [r3, #16]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d102      	bne.n	800e456 <f_open+0x2b2>
 800e450:	2302      	movs	r3, #2
 800e452:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e456:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	f040 80dc 	bne.w	800e618 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e460:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e464:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800e468:	4611      	mov	r1, r2
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fe fba9 	bl	800cbc2 <ld_clust>
 800e470:	4602      	mov	r2, r0
 800e472:	f107 030c 	add.w	r3, r7, #12
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e47a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e47e:	331c      	adds	r3, #28
 800e480:	4618      	mov	r0, r3
 800e482:	f7fd fbcd 	bl	800bc20 <ld_dword>
 800e486:	4602      	mov	r2, r0
 800e488:	f107 030c 	add.w	r3, r7, #12
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e490:	f107 030c 	add.w	r3, r7, #12
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2200      	movs	r2, #0
 800e498:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e49a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800e49e:	f107 030c 	add.w	r3, r7, #12
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e4a6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e4aa:	88da      	ldrh	r2, [r3, #6]
 800e4ac:	f107 030c 	add.w	r3, r7, #12
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e4b4:	f107 030c 	add.w	r3, r7, #12
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	1dfa      	adds	r2, r7, #7
 800e4bc:	7812      	ldrb	r2, [r2, #0]
 800e4be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e4c0:	f107 030c 	add.w	r3, r7, #12
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e4ca:	f107 030c 	add.w	r3, r7, #12
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e4d4:	f107 030c 	add.w	r3, r7, #12
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e4de:	f107 030c 	add.w	r3, r7, #12
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	3330      	adds	r3, #48	; 0x30
 800e4e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7fd fc22 	bl	800bd36 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e4f2:	1dfb      	adds	r3, r7, #7
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	f003 0320 	and.w	r3, r3, #32
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	f000 808c 	beq.w	800e618 <f_open+0x474>
 800e500:	f107 030c 	add.w	r3, r7, #12
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	f000 8085 	beq.w	800e618 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e50e:	f107 030c 	add.w	r3, r7, #12
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	68da      	ldr	r2, [r3, #12]
 800e516:	f107 030c 	add.w	r3, r7, #12
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e51e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e522:	895b      	ldrh	r3, [r3, #10]
 800e524:	025b      	lsls	r3, r3, #9
 800e526:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e52a:	f107 030c 	add.w	r3, r7, #12
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e536:	f107 030c 	add.w	r3, r7, #12
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	68db      	ldr	r3, [r3, #12]
 800e53e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800e542:	e01f      	b.n	800e584 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 800e544:	f107 030c 	add.w	r3, r7, #12
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800e54e:	4618      	mov	r0, r3
 800e550:	f7fd feeb 	bl	800c32a <get_fat>
 800e554:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800e558:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	d802      	bhi.n	800e566 <f_open+0x3c2>
 800e560:	2302      	movs	r3, #2
 800e562:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e566:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800e56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e56e:	d102      	bne.n	800e576 <f_open+0x3d2>
 800e570:	2301      	movs	r3, #1
 800e572:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e576:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800e57a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800e584:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d105      	bne.n	800e598 <f_open+0x3f4>
 800e58c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800e590:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800e594:	429a      	cmp	r2, r3
 800e596:	d8d5      	bhi.n	800e544 <f_open+0x3a0>
				}
				fp->clust = clst;
 800e598:	f107 030c 	add.w	r3, r7, #12
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800e5a2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e5a4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d135      	bne.n	800e618 <f_open+0x474>
 800e5ac:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800e5b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d02f      	beq.n	800e618 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e5b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e5bc:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7fd fe93 	bl	800c2ec <clust2sect>
 800e5c6:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800e5ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d103      	bne.n	800e5da <f_open+0x436>
						res = FR_INT_ERR;
 800e5d2:	2302      	movs	r3, #2
 800e5d4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e5d8:	e01e      	b.n	800e618 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e5da:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800e5de:	0a5a      	lsrs	r2, r3, #9
 800e5e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800e5e4:	441a      	add	r2, r3
 800e5e6:	f107 030c 	add.w	r3, r7, #12
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e5ee:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e5f2:	7858      	ldrb	r0, [r3, #1]
 800e5f4:	f107 030c 	add.w	r3, r7, #12
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e5fe:	f107 030c 	add.w	r3, r7, #12
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	6a1a      	ldr	r2, [r3, #32]
 800e606:	2301      	movs	r3, #1
 800e608:	f7fd fa94 	bl	800bb34 <disk_read>
 800e60c:	4603      	mov	r3, r0
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d002      	beq.n	800e618 <f_open+0x474>
 800e612:	2301      	movs	r3, #1
 800e614:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e618:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d004      	beq.n	800e62a <f_open+0x486>
 800e620:	f107 030c 	add.w	r3, r7, #12
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2200      	movs	r2, #0
 800e628:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e62a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e62e:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800e632:	4611      	mov	r1, r2
 800e634:	4618      	mov	r0, r3
 800e636:	f7fd fbf1 	bl	800be1c <unlock_fs>
 800e63a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800e63e:	4618      	mov	r0, r3
 800e640:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b08e      	sub	sp, #56	; 0x38
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	607a      	str	r2, [r7, #4]
 800e654:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	2200      	movs	r2, #0
 800e65e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f107 0214 	add.w	r2, r7, #20
 800e666:	4611      	mov	r1, r2
 800e668:	4618      	mov	r0, r3
 800e66a:	f7ff fcef 	bl	800e04c <validate>
 800e66e:	4603      	mov	r3, r0
 800e670:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e674:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d107      	bne.n	800e68c <f_read+0x44>
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	7d5b      	ldrb	r3, [r3, #21]
 800e680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e684:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d009      	beq.n	800e6a0 <f_read+0x58>
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e692:	4611      	mov	r1, r2
 800e694:	4618      	mov	r0, r3
 800e696:	f7fd fbc1 	bl	800be1c <unlock_fs>
 800e69a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e69e:	e13d      	b.n	800e91c <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	7d1b      	ldrb	r3, [r3, #20]
 800e6a4:	f003 0301 	and.w	r3, r3, #1
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d106      	bne.n	800e6ba <f_read+0x72>
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	2107      	movs	r1, #7
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7fd fbb3 	bl	800be1c <unlock_fs>
 800e6b6:	2307      	movs	r3, #7
 800e6b8:	e130      	b.n	800e91c <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	68da      	ldr	r2, [r3, #12]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	699b      	ldr	r3, [r3, #24]
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	6a3b      	ldr	r3, [r7, #32]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	f240 811c 	bls.w	800e908 <f_read+0x2c0>
 800e6d0:	6a3b      	ldr	r3, [r7, #32]
 800e6d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e6d4:	e118      	b.n	800e908 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	699b      	ldr	r3, [r3, #24]
 800e6da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	f040 80e4 	bne.w	800e8ac <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	699b      	ldr	r3, [r3, #24]
 800e6e8:	0a5b      	lsrs	r3, r3, #9
 800e6ea:	697a      	ldr	r2, [r7, #20]
 800e6ec:	8952      	ldrh	r2, [r2, #10]
 800e6ee:	3a01      	subs	r2, #1
 800e6f0:	4013      	ands	r3, r2
 800e6f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e6f4:	69fb      	ldr	r3, [r7, #28]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d139      	bne.n	800e76e <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	699b      	ldr	r3, [r3, #24]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d103      	bne.n	800e70a <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	633b      	str	r3, [r7, #48]	; 0x30
 800e708:	e013      	b.n	800e732 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d007      	beq.n	800e722 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	699b      	ldr	r3, [r3, #24]
 800e716:	4619      	mov	r1, r3
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f7fe f897 	bl	800c84c <clmt_clust>
 800e71e:	6338      	str	r0, [r7, #48]	; 0x30
 800e720:	e007      	b.n	800e732 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e722:	68fa      	ldr	r2, [r7, #12]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	69db      	ldr	r3, [r3, #28]
 800e728:	4619      	mov	r1, r3
 800e72a:	4610      	mov	r0, r2
 800e72c:	f7fd fdfd 	bl	800c32a <get_fat>
 800e730:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e734:	2b01      	cmp	r3, #1
 800e736:	d809      	bhi.n	800e74c <f_read+0x104>
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2202      	movs	r2, #2
 800e73c:	755a      	strb	r2, [r3, #21]
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	2102      	movs	r1, #2
 800e742:	4618      	mov	r0, r3
 800e744:	f7fd fb6a 	bl	800be1c <unlock_fs>
 800e748:	2302      	movs	r3, #2
 800e74a:	e0e7      	b.n	800e91c <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e752:	d109      	bne.n	800e768 <f_read+0x120>
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2201      	movs	r2, #1
 800e758:	755a      	strb	r2, [r3, #21]
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	2101      	movs	r1, #1
 800e75e:	4618      	mov	r0, r3
 800e760:	f7fd fb5c 	bl	800be1c <unlock_fs>
 800e764:	2301      	movs	r3, #1
 800e766:	e0d9      	b.n	800e91c <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e76c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e76e:	697a      	ldr	r2, [r7, #20]
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	69db      	ldr	r3, [r3, #28]
 800e774:	4619      	mov	r1, r3
 800e776:	4610      	mov	r0, r2
 800e778:	f7fd fdb8 	bl	800c2ec <clust2sect>
 800e77c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d109      	bne.n	800e798 <f_read+0x150>
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2202      	movs	r2, #2
 800e788:	755a      	strb	r2, [r3, #21]
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	2102      	movs	r1, #2
 800e78e:	4618      	mov	r0, r3
 800e790:	f7fd fb44 	bl	800be1c <unlock_fs>
 800e794:	2302      	movs	r3, #2
 800e796:	e0c1      	b.n	800e91c <f_read+0x2d4>
			sect += csect;
 800e798:	69ba      	ldr	r2, [r7, #24]
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	4413      	add	r3, r2
 800e79e:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	0a5b      	lsrs	r3, r3, #9
 800e7a4:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d03e      	beq.n	800e82a <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e7ac:	69fa      	ldr	r2, [r7, #28]
 800e7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b0:	4413      	add	r3, r2
 800e7b2:	697a      	ldr	r2, [r7, #20]
 800e7b4:	8952      	ldrh	r2, [r2, #10]
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d905      	bls.n	800e7c6 <f_read+0x17e>
					cc = fs->csize - csect;
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	895b      	ldrh	r3, [r3, #10]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	1ad3      	subs	r3, r2, r3
 800e7c4:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	7858      	ldrb	r0, [r3, #1]
 800e7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7cc:	69ba      	ldr	r2, [r7, #24]
 800e7ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7d0:	f7fd f9b0 	bl	800bb34 <disk_read>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d009      	beq.n	800e7ee <f_read+0x1a6>
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2201      	movs	r2, #1
 800e7de:	755a      	strb	r2, [r3, #21]
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	2101      	movs	r1, #1
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fd fb19 	bl	800be1c <unlock_fs>
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e096      	b.n	800e91c <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	7d1b      	ldrb	r3, [r3, #20]
 800e7f2:	b25b      	sxtb	r3, r3
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	da14      	bge.n	800e822 <f_read+0x1da>
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	6a1a      	ldr	r2, [r3, #32]
 800e7fc:	69bb      	ldr	r3, [r7, #24]
 800e7fe:	1ad3      	subs	r3, r2, r3
 800e800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e802:	429a      	cmp	r2, r3
 800e804:	d90d      	bls.n	800e822 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	6a1a      	ldr	r2, [r3, #32]
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	1ad3      	subs	r3, r2, r3
 800e80e:	025b      	lsls	r3, r3, #9
 800e810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e812:	18d0      	adds	r0, r2, r3
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	3330      	adds	r3, #48	; 0x30
 800e818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e81c:	4619      	mov	r1, r3
 800e81e:	f7fd fa69 	bl	800bcf4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	025b      	lsls	r3, r3, #9
 800e826:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e828:	e05a      	b.n	800e8e0 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	6a1b      	ldr	r3, [r3, #32]
 800e82e:	69ba      	ldr	r2, [r7, #24]
 800e830:	429a      	cmp	r2, r3
 800e832:	d038      	beq.n	800e8a6 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	7d1b      	ldrb	r3, [r3, #20]
 800e838:	b25b      	sxtb	r3, r3
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	da1d      	bge.n	800e87a <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	7858      	ldrb	r0, [r3, #1]
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	6a1a      	ldr	r2, [r3, #32]
 800e84c:	2301      	movs	r3, #1
 800e84e:	f7fd f991 	bl	800bb74 <disk_write>
 800e852:	4603      	mov	r3, r0
 800e854:	2b00      	cmp	r3, #0
 800e856:	d009      	beq.n	800e86c <f_read+0x224>
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2201      	movs	r2, #1
 800e85c:	755a      	strb	r2, [r3, #21]
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	2101      	movs	r1, #1
 800e862:	4618      	mov	r0, r3
 800e864:	f7fd fada 	bl	800be1c <unlock_fs>
 800e868:	2301      	movs	r3, #1
 800e86a:	e057      	b.n	800e91c <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	7d1b      	ldrb	r3, [r3, #20]
 800e870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e874:	b2da      	uxtb	r2, r3
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	7858      	ldrb	r0, [r3, #1]
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e884:	2301      	movs	r3, #1
 800e886:	69ba      	ldr	r2, [r7, #24]
 800e888:	f7fd f954 	bl	800bb34 <disk_read>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d009      	beq.n	800e8a6 <f_read+0x25e>
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2201      	movs	r2, #1
 800e896:	755a      	strb	r2, [r3, #21]
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	2101      	movs	r1, #1
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7fd fabd 	bl	800be1c <unlock_fs>
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	e03a      	b.n	800e91c <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	69ba      	ldr	r2, [r7, #24]
 800e8aa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	699b      	ldr	r3, [r3, #24]
 800e8b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8b4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e8ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d901      	bls.n	800e8c6 <f_read+0x27e>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	699b      	ldr	r3, [r3, #24]
 800e8d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8d4:	4413      	add	r3, r2
 800e8d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8d8:	4619      	mov	r1, r3
 800e8da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8dc:	f7fd fa0a 	bl	800bcf4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e4:	4413      	add	r3, r2
 800e8e6:	627b      	str	r3, [r7, #36]	; 0x24
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	699a      	ldr	r2, [r3, #24]
 800e8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ee:	441a      	add	r2, r3
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	619a      	str	r2, [r3, #24]
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fa:	441a      	add	r2, r3
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	601a      	str	r2, [r3, #0]
 800e900:	687a      	ldr	r2, [r7, #4]
 800e902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e904:	1ad3      	subs	r3, r2, r3
 800e906:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f47f aee3 	bne.w	800e6d6 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	2100      	movs	r1, #0
 800e914:	4618      	mov	r0, r3
 800e916:	f7fd fa81 	bl	800be1c <unlock_fs>
 800e91a:	2300      	movs	r3, #0
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3738      	adds	r7, #56	; 0x38
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b08c      	sub	sp, #48	; 0x30
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	607a      	str	r2, [r7, #4]
 800e930:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	2200      	movs	r2, #0
 800e93a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f107 0210 	add.w	r2, r7, #16
 800e942:	4611      	mov	r1, r2
 800e944:	4618      	mov	r0, r3
 800e946:	f7ff fb81 	bl	800e04c <validate>
 800e94a:	4603      	mov	r3, r0
 800e94c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e954:	2b00      	cmp	r3, #0
 800e956:	d107      	bne.n	800e968 <f_write+0x44>
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	7d5b      	ldrb	r3, [r3, #21]
 800e95c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e964:	2b00      	cmp	r3, #0
 800e966:	d009      	beq.n	800e97c <f_write+0x58>
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e96e:	4611      	mov	r1, r2
 800e970:	4618      	mov	r0, r3
 800e972:	f7fd fa53 	bl	800be1c <unlock_fs>
 800e976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e97a:	e173      	b.n	800ec64 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	7d1b      	ldrb	r3, [r3, #20]
 800e980:	f003 0302 	and.w	r3, r3, #2
 800e984:	2b00      	cmp	r3, #0
 800e986:	d106      	bne.n	800e996 <f_write+0x72>
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	2107      	movs	r1, #7
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7fd fa45 	bl	800be1c <unlock_fs>
 800e992:	2307      	movs	r3, #7
 800e994:	e166      	b.n	800ec64 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	699a      	ldr	r2, [r3, #24]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	441a      	add	r2, r3
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	699b      	ldr	r3, [r3, #24]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	f080 814b 	bcs.w	800ec3e <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	699b      	ldr	r3, [r3, #24]
 800e9ac:	43db      	mvns	r3, r3
 800e9ae:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e9b0:	e145      	b.n	800ec3e <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	699b      	ldr	r3, [r3, #24]
 800e9b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	f040 8101 	bne.w	800ebc2 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	699b      	ldr	r3, [r3, #24]
 800e9c4:	0a5b      	lsrs	r3, r3, #9
 800e9c6:	693a      	ldr	r2, [r7, #16]
 800e9c8:	8952      	ldrh	r2, [r2, #10]
 800e9ca:	3a01      	subs	r2, #1
 800e9cc:	4013      	ands	r3, r2
 800e9ce:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d14d      	bne.n	800ea72 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	699b      	ldr	r3, [r3, #24]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d10c      	bne.n	800e9f8 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	689b      	ldr	r3, [r3, #8]
 800e9e2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d11a      	bne.n	800ea20 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2100      	movs	r1, #0
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fd fe94 	bl	800c71c <create_chain>
 800e9f4:	62b8      	str	r0, [r7, #40]	; 0x28
 800e9f6:	e013      	b.n	800ea20 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d007      	beq.n	800ea10 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	699b      	ldr	r3, [r3, #24]
 800ea04:	4619      	mov	r1, r3
 800ea06:	68f8      	ldr	r0, [r7, #12]
 800ea08:	f7fd ff20 	bl	800c84c <clmt_clust>
 800ea0c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ea0e:	e007      	b.n	800ea20 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ea10:	68fa      	ldr	r2, [r7, #12]
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	69db      	ldr	r3, [r3, #28]
 800ea16:	4619      	mov	r1, r3
 800ea18:	4610      	mov	r0, r2
 800ea1a:	f7fd fe7f 	bl	800c71c <create_chain>
 800ea1e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	f000 8110 	beq.w	800ec48 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ea28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d109      	bne.n	800ea42 <f_write+0x11e>
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2202      	movs	r2, #2
 800ea32:	755a      	strb	r2, [r3, #21]
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	2102      	movs	r1, #2
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7fd f9ef 	bl	800be1c <unlock_fs>
 800ea3e:	2302      	movs	r3, #2
 800ea40:	e110      	b.n	800ec64 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ea42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea48:	d109      	bne.n	800ea5e <f_write+0x13a>
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	755a      	strb	r2, [r3, #21]
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	2101      	movs	r1, #1
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fd f9e1 	bl	800be1c <unlock_fs>
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	e102      	b.n	800ec64 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea62:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	689b      	ldr	r3, [r3, #8]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d102      	bne.n	800ea72 <f_write+0x14e>
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea70:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	7d1b      	ldrb	r3, [r3, #20]
 800ea76:	b25b      	sxtb	r3, r3
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	da1d      	bge.n	800eab8 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	7858      	ldrb	r0, [r3, #1]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	6a1a      	ldr	r2, [r3, #32]
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	f7fd f872 	bl	800bb74 <disk_write>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d009      	beq.n	800eaaa <f_write+0x186>
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	755a      	strb	r2, [r3, #21]
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	2101      	movs	r1, #1
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7fd f9bb 	bl	800be1c <unlock_fs>
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e0dc      	b.n	800ec64 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	7d1b      	ldrb	r3, [r3, #20]
 800eaae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eab2:	b2da      	uxtb	r2, r3
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800eab8:	693a      	ldr	r2, [r7, #16]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	69db      	ldr	r3, [r3, #28]
 800eabe:	4619      	mov	r1, r3
 800eac0:	4610      	mov	r0, r2
 800eac2:	f7fd fc13 	bl	800c2ec <clust2sect>
 800eac6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d109      	bne.n	800eae2 <f_write+0x1be>
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2202      	movs	r2, #2
 800ead2:	755a      	strb	r2, [r3, #21]
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	2102      	movs	r1, #2
 800ead8:	4618      	mov	r0, r3
 800eada:	f7fd f99f 	bl	800be1c <unlock_fs>
 800eade:	2302      	movs	r3, #2
 800eae0:	e0c0      	b.n	800ec64 <f_write+0x340>
			sect += csect;
 800eae2:	697a      	ldr	r2, [r7, #20]
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	4413      	add	r3, r2
 800eae8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	0a5b      	lsrs	r3, r3, #9
 800eaee:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800eaf0:	6a3b      	ldr	r3, [r7, #32]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d041      	beq.n	800eb7a <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eaf6:	69ba      	ldr	r2, [r7, #24]
 800eaf8:	6a3b      	ldr	r3, [r7, #32]
 800eafa:	4413      	add	r3, r2
 800eafc:	693a      	ldr	r2, [r7, #16]
 800eafe:	8952      	ldrh	r2, [r2, #10]
 800eb00:	4293      	cmp	r3, r2
 800eb02:	d905      	bls.n	800eb10 <f_write+0x1ec>
					cc = fs->csize - csect;
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	895b      	ldrh	r3, [r3, #10]
 800eb08:	461a      	mov	r2, r3
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	1ad3      	subs	r3, r2, r3
 800eb0e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	7858      	ldrb	r0, [r3, #1]
 800eb14:	6a3b      	ldr	r3, [r7, #32]
 800eb16:	697a      	ldr	r2, [r7, #20]
 800eb18:	69f9      	ldr	r1, [r7, #28]
 800eb1a:	f7fd f82b 	bl	800bb74 <disk_write>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d009      	beq.n	800eb38 <f_write+0x214>
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2201      	movs	r2, #1
 800eb28:	755a      	strb	r2, [r3, #21]
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	2101      	movs	r1, #1
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7fd f974 	bl	800be1c <unlock_fs>
 800eb34:	2301      	movs	r3, #1
 800eb36:	e095      	b.n	800ec64 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6a1a      	ldr	r2, [r3, #32]
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	1ad3      	subs	r3, r2, r3
 800eb40:	6a3a      	ldr	r2, [r7, #32]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d915      	bls.n	800eb72 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6a1a      	ldr	r2, [r3, #32]
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	1ad3      	subs	r3, r2, r3
 800eb54:	025b      	lsls	r3, r3, #9
 800eb56:	69fa      	ldr	r2, [r7, #28]
 800eb58:	4413      	add	r3, r2
 800eb5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb5e:	4619      	mov	r1, r3
 800eb60:	f7fd f8c8 	bl	800bcf4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	7d1b      	ldrb	r3, [r3, #20]
 800eb68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb6c:	b2da      	uxtb	r2, r3
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800eb72:	6a3b      	ldr	r3, [r7, #32]
 800eb74:	025b      	lsls	r3, r3, #9
 800eb76:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800eb78:	e044      	b.n	800ec04 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6a1b      	ldr	r3, [r3, #32]
 800eb7e:	697a      	ldr	r2, [r7, #20]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d01b      	beq.n	800ebbc <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	699a      	ldr	r2, [r3, #24]
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d215      	bcs.n	800ebbc <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	7858      	ldrb	r0, [r3, #1]
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	697a      	ldr	r2, [r7, #20]
 800eb9e:	f7fc ffc9 	bl	800bb34 <disk_read>
 800eba2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d009      	beq.n	800ebbc <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	755a      	strb	r2, [r3, #21]
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	2101      	movs	r1, #1
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7fd f932 	bl	800be1c <unlock_fs>
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e053      	b.n	800ec64 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	697a      	ldr	r2, [r7, #20]
 800ebc0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	699b      	ldr	r3, [r3, #24]
 800ebc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebca:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ebce:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ebd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d901      	bls.n	800ebdc <f_write+0x2b8>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	699b      	ldr	r3, [r3, #24]
 800ebe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebea:	4413      	add	r3, r2
 800ebec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebee:	69f9      	ldr	r1, [r7, #28]
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7fd f87f 	bl	800bcf4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	7d1b      	ldrb	r3, [r3, #20]
 800ebfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ebfe:	b2da      	uxtb	r2, r3
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ec04:	69fa      	ldr	r2, [r7, #28]
 800ec06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec08:	4413      	add	r3, r2
 800ec0a:	61fb      	str	r3, [r7, #28]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	699a      	ldr	r2, [r3, #24]
 800ec10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec12:	441a      	add	r2, r3
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	619a      	str	r2, [r3, #24]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	68da      	ldr	r2, [r3, #12]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	699b      	ldr	r3, [r3, #24]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	bf38      	it	cc
 800ec24:	461a      	movcc	r2, r3
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	60da      	str	r2, [r3, #12]
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec30:	441a      	add	r2, r3
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	601a      	str	r2, [r3, #0]
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3a:	1ad3      	subs	r3, r2, r3
 800ec3c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	f47f aeb6 	bne.w	800e9b2 <f_write+0x8e>
 800ec46:	e000      	b.n	800ec4a <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ec48:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	7d1b      	ldrb	r3, [r3, #20]
 800ec4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec52:	b2da      	uxtb	r2, r3
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	2100      	movs	r1, #0
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7fd f8dd 	bl	800be1c <unlock_fs>
 800ec62:	2300      	movs	r3, #0
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3730      	adds	r7, #48	; 0x30
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b086      	sub	sp, #24
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f107 0208 	add.w	r2, r7, #8
 800ec7a:	4611      	mov	r1, r2
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f7ff f9e5 	bl	800e04c <validate>
 800ec82:	4603      	mov	r3, r0
 800ec84:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ec86:	7dfb      	ldrb	r3, [r7, #23]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d16d      	bne.n	800ed68 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	7d1b      	ldrb	r3, [r3, #20]
 800ec90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d067      	beq.n	800ed68 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	7d1b      	ldrb	r3, [r3, #20]
 800ec9c:	b25b      	sxtb	r3, r3
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	da1a      	bge.n	800ecd8 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	7858      	ldrb	r0, [r3, #1]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6a1a      	ldr	r2, [r3, #32]
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	f7fc ff5f 	bl	800bb74 <disk_write>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d006      	beq.n	800ecca <f_sync+0x5e>
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	2101      	movs	r1, #1
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7fd f8ab 	bl	800be1c <unlock_fs>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e055      	b.n	800ed76 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	7d1b      	ldrb	r3, [r3, #20]
 800ecce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecd2:	b2da      	uxtb	r2, r3
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ecd8:	f7fb ff18 	bl	800ab0c <get_fattime>
 800ecdc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ecde:	68ba      	ldr	r2, [r7, #8]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece4:	4619      	mov	r1, r3
 800ece6:	4610      	mov	r0, r2
 800ece8:	f7fd fa64 	bl	800c1b4 <move_window>
 800ecec:	4603      	mov	r3, r0
 800ecee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ecf0:	7dfb      	ldrb	r3, [r7, #23]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d138      	bne.n	800ed68 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecfa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	330b      	adds	r3, #11
 800ed00:	781a      	ldrb	r2, [r3, #0]
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	330b      	adds	r3, #11
 800ed06:	f042 0220 	orr.w	r2, r2, #32
 800ed0a:	b2d2      	uxtb	r2, r2
 800ed0c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6818      	ldr	r0, [r3, #0]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	461a      	mov	r2, r3
 800ed18:	68f9      	ldr	r1, [r7, #12]
 800ed1a:	f7fd ff71 	bl	800cc00 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	f103 021c 	add.w	r2, r3, #28
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	4619      	mov	r1, r3
 800ed2a:	4610      	mov	r0, r2
 800ed2c:	f7fc ffb6 	bl	800bc9c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	3316      	adds	r3, #22
 800ed34:	6939      	ldr	r1, [r7, #16]
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7fc ffb0 	bl	800bc9c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	3312      	adds	r3, #18
 800ed40:	2100      	movs	r1, #0
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7fc ff8f 	bl	800bc66 <st_word>
					fs->wflag = 1;
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7fd fa5d 	bl	800c210 <sync_fs>
 800ed56:	4603      	mov	r3, r0
 800ed58:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	7d1b      	ldrb	r3, [r3, #20]
 800ed5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed62:	b2da      	uxtb	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	7dfa      	ldrb	r2, [r7, #23]
 800ed6c:	4611      	mov	r1, r2
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7fd f854 	bl	800be1c <unlock_fs>
 800ed74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3718      	adds	r7, #24
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}

0800ed7e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b084      	sub	sp, #16
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f7ff ff70 	bl	800ec6c <f_sync>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ed90:	7bfb      	ldrb	r3, [r7, #15]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d11d      	bne.n	800edd2 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f107 0208 	add.w	r2, r7, #8
 800ed9c:	4611      	mov	r1, r2
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7ff f954 	bl	800e04c <validate>
 800eda4:	4603      	mov	r3, r0
 800eda6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eda8:	7bfb      	ldrb	r3, [r7, #15]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d111      	bne.n	800edd2 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	691b      	ldr	r3, [r3, #16]
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fd f95a 	bl	800c06c <dec_lock>
 800edb8:	4603      	mov	r3, r0
 800edba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d102      	bne.n	800edc8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	2100      	movs	r1, #0
 800edcc:	4618      	mov	r0, r3
 800edce:	f7fd f825 	bl	800be1c <unlock_fs>
#endif
		}
	}
	return res;
 800edd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3710      	adds	r7, #16
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b090      	sub	sp, #64	; 0x40
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f107 0208 	add.w	r2, r7, #8
 800edec:	4611      	mov	r1, r2
 800edee:	4618      	mov	r0, r3
 800edf0:	f7ff f92c 	bl	800e04c <validate>
 800edf4:	4603      	mov	r3, r0
 800edf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800edfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d103      	bne.n	800ee0a <f_lseek+0x2e>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	7d5b      	ldrb	r3, [r3, #21]
 800ee06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ee0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d009      	beq.n	800ee26 <f_lseek+0x4a>
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ee18:	4611      	mov	r1, r2
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fc fffe 	bl	800be1c <unlock_fs>
 800ee20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ee24:	e229      	b.n	800f27a <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	f000 80ea 	beq.w	800f004 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee36:	d164      	bne.n	800ef02 <f_lseek+0x126>
			tbl = fp->cltbl;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ee3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee40:	1d1a      	adds	r2, r3, #4
 800ee42:	627a      	str	r2, [r7, #36]	; 0x24
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	617b      	str	r3, [r7, #20]
 800ee48:	2302      	movs	r3, #2
 800ee4a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	689b      	ldr	r3, [r3, #8]
 800ee50:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ee52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d044      	beq.n	800eee2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ee58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5a:	613b      	str	r3, [r7, #16]
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee62:	3302      	adds	r3, #2
 800ee64:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ee66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee68:	60fb      	str	r3, [r7, #12]
 800ee6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7fd fa58 	bl	800c32a <get_fat>
 800ee7a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ee7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d809      	bhi.n	800ee96 <f_lseek+0xba>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2202      	movs	r2, #2
 800ee86:	755a      	strb	r2, [r3, #21]
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	2102      	movs	r1, #2
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fc ffc5 	bl	800be1c <unlock_fs>
 800ee92:	2302      	movs	r3, #2
 800ee94:	e1f1      	b.n	800f27a <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee9c:	d109      	bne.n	800eeb2 <f_lseek+0xd6>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2201      	movs	r2, #1
 800eea2:	755a      	strb	r2, [r3, #21]
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	2101      	movs	r1, #1
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7fc ffb7 	bl	800be1c <unlock_fs>
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e1e3      	b.n	800f27a <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d0d4      	beq.n	800ee66 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800eebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d809      	bhi.n	800eed8 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800eec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec6:	1d1a      	adds	r2, r3, #4
 800eec8:	627a      	str	r2, [r7, #36]	; 0x24
 800eeca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eecc:	601a      	str	r2, [r3, #0]
 800eece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed0:	1d1a      	adds	r2, r3, #4
 800eed2:	627a      	str	r2, [r7, #36]	; 0x24
 800eed4:	693a      	ldr	r2, [r7, #16]
 800eed6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	69db      	ldr	r3, [r3, #28]
 800eedc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eede:	429a      	cmp	r2, r3
 800eee0:	d3ba      	bcc.n	800ee58 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eee8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800eeea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d803      	bhi.n	800eefa <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800eef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef4:	2200      	movs	r2, #0
 800eef6:	601a      	str	r2, [r3, #0]
 800eef8:	e1b6      	b.n	800f268 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800eefa:	2311      	movs	r3, #17
 800eefc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ef00:	e1b2      	b.n	800f268 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	68db      	ldr	r3, [r3, #12]
 800ef06:	683a      	ldr	r2, [r7, #0]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d902      	bls.n	800ef12 <f_lseek+0x136>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	683a      	ldr	r2, [r7, #0]
 800ef16:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	f000 81a4 	beq.w	800f268 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	3b01      	subs	r3, #1
 800ef24:	4619      	mov	r1, r3
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f7fd fc90 	bl	800c84c <clmt_clust>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ef32:	68ba      	ldr	r2, [r7, #8]
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	69db      	ldr	r3, [r3, #28]
 800ef38:	4619      	mov	r1, r3
 800ef3a:	4610      	mov	r0, r2
 800ef3c:	f7fd f9d6 	bl	800c2ec <clust2sect>
 800ef40:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d109      	bne.n	800ef5c <f_lseek+0x180>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2202      	movs	r2, #2
 800ef4c:	755a      	strb	r2, [r3, #21]
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	2102      	movs	r1, #2
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fc ff62 	bl	800be1c <unlock_fs>
 800ef58:	2302      	movs	r3, #2
 800ef5a:	e18e      	b.n	800f27a <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	3b01      	subs	r3, #1
 800ef60:	0a5b      	lsrs	r3, r3, #9
 800ef62:	68ba      	ldr	r2, [r7, #8]
 800ef64:	8952      	ldrh	r2, [r2, #10]
 800ef66:	3a01      	subs	r2, #1
 800ef68:	4013      	ands	r3, r2
 800ef6a:	69ba      	ldr	r2, [r7, #24]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	699b      	ldr	r3, [r3, #24]
 800ef74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	f000 8175 	beq.w	800f268 <f_lseek+0x48c>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6a1b      	ldr	r3, [r3, #32]
 800ef82:	69ba      	ldr	r2, [r7, #24]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	f000 816f 	beq.w	800f268 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	7d1b      	ldrb	r3, [r3, #20]
 800ef8e:	b25b      	sxtb	r3, r3
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	da1d      	bge.n	800efd0 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	7858      	ldrb	r0, [r3, #1]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6a1a      	ldr	r2, [r3, #32]
 800efa2:	2301      	movs	r3, #1
 800efa4:	f7fc fde6 	bl	800bb74 <disk_write>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d009      	beq.n	800efc2 <f_lseek+0x1e6>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2201      	movs	r2, #1
 800efb2:	755a      	strb	r2, [r3, #21]
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	2101      	movs	r1, #1
 800efb8:	4618      	mov	r0, r3
 800efba:	f7fc ff2f 	bl	800be1c <unlock_fs>
 800efbe:	2301      	movs	r3, #1
 800efc0:	e15b      	b.n	800f27a <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	7d1b      	ldrb	r3, [r3, #20]
 800efc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efca:	b2da      	uxtb	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	7858      	ldrb	r0, [r3, #1]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800efda:	2301      	movs	r3, #1
 800efdc:	69ba      	ldr	r2, [r7, #24]
 800efde:	f7fc fda9 	bl	800bb34 <disk_read>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d009      	beq.n	800effc <f_lseek+0x220>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2201      	movs	r2, #1
 800efec:	755a      	strb	r2, [r3, #21]
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	2101      	movs	r1, #1
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7fc ff12 	bl	800be1c <unlock_fs>
 800eff8:	2301      	movs	r3, #1
 800effa:	e13e      	b.n	800f27a <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	69ba      	ldr	r2, [r7, #24]
 800f000:	621a      	str	r2, [r3, #32]
 800f002:	e131      	b.n	800f268 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	68db      	ldr	r3, [r3, #12]
 800f008:	683a      	ldr	r2, [r7, #0]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d908      	bls.n	800f020 <f_lseek+0x244>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	7d1b      	ldrb	r3, [r3, #20]
 800f012:	f003 0302 	and.w	r3, r3, #2
 800f016:	2b00      	cmp	r3, #0
 800f018:	d102      	bne.n	800f020 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	68db      	ldr	r3, [r3, #12]
 800f01e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	699b      	ldr	r3, [r3, #24]
 800f024:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f026:	2300      	movs	r3, #0
 800f028:	637b      	str	r3, [r7, #52]	; 0x34
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f02e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	2b00      	cmp	r3, #0
 800f034:	f000 80c0 	beq.w	800f1b8 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	895b      	ldrh	r3, [r3, #10]
 800f03c:	025b      	lsls	r3, r3, #9
 800f03e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f040:	6a3b      	ldr	r3, [r7, #32]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d01b      	beq.n	800f07e <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	1e5a      	subs	r2, r3, #1
 800f04a:	69fb      	ldr	r3, [r7, #28]
 800f04c:	fbb2 f2f3 	udiv	r2, r2, r3
 800f050:	6a3b      	ldr	r3, [r7, #32]
 800f052:	1e59      	subs	r1, r3, #1
 800f054:	69fb      	ldr	r3, [r7, #28]
 800f056:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d30f      	bcc.n	800f07e <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f05e:	6a3b      	ldr	r3, [r7, #32]
 800f060:	1e5a      	subs	r2, r3, #1
 800f062:	69fb      	ldr	r3, [r7, #28]
 800f064:	425b      	negs	r3, r3
 800f066:	401a      	ands	r2, r3
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	699b      	ldr	r3, [r3, #24]
 800f070:	683a      	ldr	r2, [r7, #0]
 800f072:	1ad3      	subs	r3, r2, r3
 800f074:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	69db      	ldr	r3, [r3, #28]
 800f07a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f07c:	e02c      	b.n	800f0d8 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f086:	2b00      	cmp	r3, #0
 800f088:	d123      	bne.n	800f0d2 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2100      	movs	r1, #0
 800f08e:	4618      	mov	r0, r3
 800f090:	f7fd fb44 	bl	800c71c <create_chain>
 800f094:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d109      	bne.n	800f0b0 <f_lseek+0x2d4>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2202      	movs	r2, #2
 800f0a0:	755a      	strb	r2, [r3, #21]
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	2102      	movs	r1, #2
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fc feb8 	bl	800be1c <unlock_fs>
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	e0e4      	b.n	800f27a <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b6:	d109      	bne.n	800f0cc <f_lseek+0x2f0>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	755a      	strb	r2, [r3, #21]
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	2101      	movs	r1, #1
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fc feaa 	bl	800be1c <unlock_fs>
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	e0d6      	b.n	800f27a <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0d0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0d6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d06c      	beq.n	800f1b8 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800f0de:	e044      	b.n	800f16a <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800f0e0:	683a      	ldr	r2, [r7, #0]
 800f0e2:	69fb      	ldr	r3, [r7, #28]
 800f0e4:	1ad3      	subs	r3, r2, r3
 800f0e6:	603b      	str	r3, [r7, #0]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	699a      	ldr	r2, [r3, #24]
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	441a      	add	r2, r3
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	7d1b      	ldrb	r3, [r3, #20]
 800f0f8:	f003 0302 	and.w	r3, r3, #2
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d00b      	beq.n	800f118 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f104:	4618      	mov	r0, r3
 800f106:	f7fd fb09 	bl	800c71c <create_chain>
 800f10a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d108      	bne.n	800f124 <f_lseek+0x348>
							ofs = 0; break;
 800f112:	2300      	movs	r3, #0
 800f114:	603b      	str	r3, [r7, #0]
 800f116:	e02c      	b.n	800f172 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7fd f904 	bl	800c32a <get_fat>
 800f122:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f12a:	d109      	bne.n	800f140 <f_lseek+0x364>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2201      	movs	r2, #1
 800f130:	755a      	strb	r2, [r3, #21]
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	2101      	movs	r1, #1
 800f136:	4618      	mov	r0, r3
 800f138:	f7fc fe70 	bl	800be1c <unlock_fs>
 800f13c:	2301      	movs	r3, #1
 800f13e:	e09c      	b.n	800f27a <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f142:	2b01      	cmp	r3, #1
 800f144:	d904      	bls.n	800f150 <f_lseek+0x374>
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	69db      	ldr	r3, [r3, #28]
 800f14a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d309      	bcc.n	800f164 <f_lseek+0x388>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2202      	movs	r2, #2
 800f154:	755a      	strb	r2, [r3, #21]
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	2102      	movs	r1, #2
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7fc fe5e 	bl	800be1c <unlock_fs>
 800f160:	2302      	movs	r3, #2
 800f162:	e08a      	b.n	800f27a <f_lseek+0x49e>
					fp->clust = clst;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f168:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f16a:	683a      	ldr	r2, [r7, #0]
 800f16c:	69fb      	ldr	r3, [r7, #28]
 800f16e:	429a      	cmp	r2, r3
 800f170:	d8b6      	bhi.n	800f0e0 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	699a      	ldr	r2, [r3, #24]
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	441a      	add	r2, r3
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f184:	2b00      	cmp	r3, #0
 800f186:	d017      	beq.n	800f1b8 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7fd f8ad 	bl	800c2ec <clust2sect>
 800f192:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f196:	2b00      	cmp	r3, #0
 800f198:	d109      	bne.n	800f1ae <f_lseek+0x3d2>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2202      	movs	r2, #2
 800f19e:	755a      	strb	r2, [r3, #21]
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	2102      	movs	r1, #2
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f7fc fe39 	bl	800be1c <unlock_fs>
 800f1aa:	2302      	movs	r3, #2
 800f1ac:	e065      	b.n	800f27a <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	0a5b      	lsrs	r3, r3, #9
 800f1b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1b4:	4413      	add	r3, r2
 800f1b6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	699a      	ldr	r2, [r3, #24]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d90a      	bls.n	800f1da <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	699a      	ldr	r2, [r3, #24]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	7d1b      	ldrb	r3, [r3, #20]
 800f1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1d4:	b2da      	uxtb	r2, r3
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	699b      	ldr	r3, [r3, #24]
 800f1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d040      	beq.n	800f268 <f_lseek+0x48c>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6a1b      	ldr	r3, [r3, #32]
 800f1ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d03b      	beq.n	800f268 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	7d1b      	ldrb	r3, [r3, #20]
 800f1f4:	b25b      	sxtb	r3, r3
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	da1d      	bge.n	800f236 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	7858      	ldrb	r0, [r3, #1]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6a1a      	ldr	r2, [r3, #32]
 800f208:	2301      	movs	r3, #1
 800f20a:	f7fc fcb3 	bl	800bb74 <disk_write>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d009      	beq.n	800f228 <f_lseek+0x44c>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2201      	movs	r2, #1
 800f218:	755a      	strb	r2, [r3, #21]
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	2101      	movs	r1, #1
 800f21e:	4618      	mov	r0, r3
 800f220:	f7fc fdfc 	bl	800be1c <unlock_fs>
 800f224:	2301      	movs	r3, #1
 800f226:	e028      	b.n	800f27a <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	7d1b      	ldrb	r3, [r3, #20]
 800f22c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f230:	b2da      	uxtb	r2, r3
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	7858      	ldrb	r0, [r3, #1]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f240:	2301      	movs	r3, #1
 800f242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f244:	f7fc fc76 	bl	800bb34 <disk_read>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d009      	beq.n	800f262 <f_lseek+0x486>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2201      	movs	r2, #1
 800f252:	755a      	strb	r2, [r3, #21]
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	2101      	movs	r1, #1
 800f258:	4618      	mov	r0, r3
 800f25a:	f7fc fddf 	bl	800be1c <unlock_fs>
 800f25e:	2301      	movs	r3, #1
 800f260:	e00b      	b.n	800f27a <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f266:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f26e:	4611      	mov	r1, r2
 800f270:	4618      	mov	r0, r3
 800f272:	f7fc fdd3 	bl	800be1c <unlock_fs>
 800f276:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3740      	adds	r7, #64	; 0x40
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800f282:	b580      	push	{r7, lr}
 800f284:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 800f288:	af00      	add	r7, sp, #0
 800f28a:	1d3b      	adds	r3, r7, #4
 800f28c:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800f28e:	2300      	movs	r3, #0
 800f290:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f294:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 800f298:	1d3b      	adds	r3, r7, #4
 800f29a:	2202      	movs	r2, #2
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7fe fc81 	bl	800dba4 <find_volume>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
	dj.obj.fs = fs;
 800f2a8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f2ac:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	if (res == FR_OK) {
 800f2b0:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	f040 809e 	bne.w	800f3f6 <f_unlink+0x174>
		INIT_NAMBUF(fs);
 800f2ba:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f2be:	f107 020c 	add.w	r2, r7, #12
 800f2c2:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 800f2c4:	1d3b      	adds	r3, r7, #4
 800f2c6:	681a      	ldr	r2, [r3, #0]
 800f2c8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800f2cc:	4611      	mov	r1, r2
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fe fb5c 	bl	800d98c <follow_path>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800f2da:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d108      	bne.n	800f2f4 <f_unlink+0x72>
 800f2e2:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800f2e6:	2102      	movs	r1, #2
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7fc fdb3 	bl	800be54 <chk_lock>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800f2f4:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d17c      	bne.n	800f3f6 <f_unlink+0x174>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800f2fc:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 800f300:	b25b      	sxtb	r3, r3
 800f302:	2b00      	cmp	r3, #0
 800f304:	da03      	bge.n	800f30e <f_unlink+0x8c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800f306:	2306      	movs	r3, #6
 800f308:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 800f30c:	e008      	b.n	800f320 <f_unlink+0x9e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800f30e:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 800f312:	f003 0301 	and.w	r3, r3, #1
 800f316:	2b00      	cmp	r3, #0
 800f318:	d002      	beq.n	800f320 <f_unlink+0x9e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800f31a:	2307      	movs	r3, #7
 800f31c:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				}
			}
			if (res == FR_OK) {
 800f320:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f324:	2b00      	cmp	r3, #0
 800f326:	d13b      	bne.n	800f3a0 <f_unlink+0x11e>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800f328:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f32c:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800f330:	4611      	mov	r1, r2
 800f332:	4618      	mov	r0, r3
 800f334:	f7fd fc45 	bl	800cbc2 <ld_clust>
 800f338:	f8c7 0278 	str.w	r0, [r7, #632]	; 0x278
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800f33c:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 800f340:	f003 0310 	and.w	r3, r3, #16
 800f344:	2b00      	cmp	r3, #0
 800f346:	d02b      	beq.n	800f3a0 <f_unlink+0x11e>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800f348:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f34c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
						sdj.obj.sclust = dclst;
 800f350:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800f354:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800f358:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800f35c:	2100      	movs	r1, #0
 800f35e:	4618      	mov	r0, r3
 800f360:	f7fd faa8 	bl	800c8b4 <dir_sdi>
 800f364:	4603      	mov	r3, r0
 800f366:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						if (res == FR_OK) {
 800f36a:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d116      	bne.n	800f3a0 <f_unlink+0x11e>
							res = dir_read(&sdj, 0);			/* Read an item */
 800f372:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800f376:	2100      	movs	r1, #0
 800f378:	4618      	mov	r0, r3
 800f37a:	f7fd fe64 	bl	800d046 <dir_read>
 800f37e:	4603      	mov	r3, r0
 800f380:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800f384:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d102      	bne.n	800f392 <f_unlink+0x110>
 800f38c:	2307      	movs	r3, #7
 800f38e:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800f392:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f396:	2b04      	cmp	r3, #4
 800f398:	d102      	bne.n	800f3a0 <f_unlink+0x11e>
 800f39a:	2300      	movs	r3, #0
 800f39c:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						}
					}
				}
			}
			if (res == FR_OK) {
 800f3a0:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d126      	bne.n	800f3f6 <f_unlink+0x174>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800f3a8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7fe f8a9 	bl	800d504 <dir_remove>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800f3b8:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d10e      	bne.n	800f3de <f_unlink+0x15c>
 800f3c0:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d00a      	beq.n	800f3de <f_unlink+0x15c>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800f3c8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7fd f93d 	bl	800c652 <remove_chain>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800f3de:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d107      	bne.n	800f3f6 <f_unlink+0x174>
 800f3e6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fc ff10 	bl	800c210 <sync_fs>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f3f6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f3fa:	f897 227f 	ldrb.w	r2, [r7, #639]	; 0x27f
 800f3fe:	4611      	mov	r1, r2
 800f400:	4618      	mov	r0, r3
 800f402:	f7fc fd0b 	bl	800be1c <unlock_fs>
 800f406:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	f507 7720 	add.w	r7, r7, #640	; 0x280
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f414:	b480      	push	{r7}
 800f416:	b087      	sub	sp, #28
 800f418:	af00      	add	r7, sp, #0
 800f41a:	60f8      	str	r0, [r7, #12]
 800f41c:	60b9      	str	r1, [r7, #8]
 800f41e:	4613      	mov	r3, r2
 800f420:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f422:	2301      	movs	r3, #1
 800f424:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f426:	2300      	movs	r3, #0
 800f428:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f42a:	4b1f      	ldr	r3, [pc, #124]	; (800f4a8 <FATFS_LinkDriverEx+0x94>)
 800f42c:	7a5b      	ldrb	r3, [r3, #9]
 800f42e:	b2db      	uxtb	r3, r3
 800f430:	2b00      	cmp	r3, #0
 800f432:	d131      	bne.n	800f498 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f434:	4b1c      	ldr	r3, [pc, #112]	; (800f4a8 <FATFS_LinkDriverEx+0x94>)
 800f436:	7a5b      	ldrb	r3, [r3, #9]
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	461a      	mov	r2, r3
 800f43c:	4b1a      	ldr	r3, [pc, #104]	; (800f4a8 <FATFS_LinkDriverEx+0x94>)
 800f43e:	2100      	movs	r1, #0
 800f440:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f442:	4b19      	ldr	r3, [pc, #100]	; (800f4a8 <FATFS_LinkDriverEx+0x94>)
 800f444:	7a5b      	ldrb	r3, [r3, #9]
 800f446:	b2db      	uxtb	r3, r3
 800f448:	4a17      	ldr	r2, [pc, #92]	; (800f4a8 <FATFS_LinkDriverEx+0x94>)
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	4413      	add	r3, r2
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f452:	4b15      	ldr	r3, [pc, #84]	; (800f4a8 <FATFS_LinkDriverEx+0x94>)
 800f454:	7a5b      	ldrb	r3, [r3, #9]
 800f456:	b2db      	uxtb	r3, r3
 800f458:	461a      	mov	r2, r3
 800f45a:	4b13      	ldr	r3, [pc, #76]	; (800f4a8 <FATFS_LinkDriverEx+0x94>)
 800f45c:	4413      	add	r3, r2
 800f45e:	79fa      	ldrb	r2, [r7, #7]
 800f460:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f462:	4b11      	ldr	r3, [pc, #68]	; (800f4a8 <FATFS_LinkDriverEx+0x94>)
 800f464:	7a5b      	ldrb	r3, [r3, #9]
 800f466:	b2db      	uxtb	r3, r3
 800f468:	1c5a      	adds	r2, r3, #1
 800f46a:	b2d1      	uxtb	r1, r2
 800f46c:	4a0e      	ldr	r2, [pc, #56]	; (800f4a8 <FATFS_LinkDriverEx+0x94>)
 800f46e:	7251      	strb	r1, [r2, #9]
 800f470:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f472:	7dbb      	ldrb	r3, [r7, #22]
 800f474:	3330      	adds	r3, #48	; 0x30
 800f476:	b2da      	uxtb	r2, r3
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	3301      	adds	r3, #1
 800f480:	223a      	movs	r2, #58	; 0x3a
 800f482:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	3302      	adds	r3, #2
 800f488:	222f      	movs	r2, #47	; 0x2f
 800f48a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	3303      	adds	r3, #3
 800f490:	2200      	movs	r2, #0
 800f492:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f494:	2300      	movs	r3, #0
 800f496:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f498:	7dfb      	ldrb	r3, [r7, #23]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	371c      	adds	r7, #28
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr
 800f4a6:	bf00      	nop
 800f4a8:	20000b58 	.word	0x20000b58

0800f4ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	6839      	ldr	r1, [r7, #0]
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f7ff ffaa 	bl	800f414 <FATFS_LinkDriverEx>
 800f4c0:	4603      	mov	r3, r0
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3708      	adds	r7, #8
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}
	...

0800f4cc <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b089      	sub	sp, #36	; 0x24
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	6039      	str	r1, [r7, #0]
 800f4d6:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800f4d8:	88fb      	ldrh	r3, [r7, #6]
 800f4da:	2b7f      	cmp	r3, #127	; 0x7f
 800f4dc:	d802      	bhi.n	800f4e4 <ff_convert+0x18>
		c = chr;
 800f4de:	88fb      	ldrh	r3, [r7, #6]
 800f4e0:	837b      	strh	r3, [r7, #26]
 800f4e2:	e045      	b.n	800f570 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d005      	beq.n	800f4f6 <ff_convert+0x2a>
			p = oem2uni;
 800f4ea:	4b25      	ldr	r3, [pc, #148]	; (800f580 <ff_convert+0xb4>)
 800f4ec:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800f4ee:	f245 5320 	movw	r3, #21792	; 0x5520
 800f4f2:	60bb      	str	r3, [r7, #8]
 800f4f4:	e004      	b.n	800f500 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800f4f6:	4b23      	ldr	r3, [pc, #140]	; (800f584 <ff_convert+0xb8>)
 800f4f8:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800f4fa:	f245 5320 	movw	r3, #21792	; 0x5520
 800f4fe:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800f500:	2300      	movs	r3, #0
 800f502:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800f504:	2310      	movs	r3, #16
 800f506:	613b      	str	r3, [r7, #16]
 800f508:	e021      	b.n	800f54e <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800f50a:	68ba      	ldr	r2, [r7, #8]
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	1ad3      	subs	r3, r2, r3
 800f510:	0fda      	lsrs	r2, r3, #31
 800f512:	4413      	add	r3, r2
 800f514:	105b      	asrs	r3, r3, #1
 800f516:	461a      	mov	r2, r3
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	4413      	add	r3, r2
 800f51c:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	009b      	lsls	r3, r3, #2
 800f522:	69fa      	ldr	r2, [r7, #28]
 800f524:	4413      	add	r3, r2
 800f526:	881b      	ldrh	r3, [r3, #0]
 800f528:	88fa      	ldrh	r2, [r7, #6]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d013      	beq.n	800f556 <ff_convert+0x8a>
			if (chr > p[i * 2])
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	009b      	lsls	r3, r3, #2
 800f532:	69fa      	ldr	r2, [r7, #28]
 800f534:	4413      	add	r3, r2
 800f536:	881b      	ldrh	r3, [r3, #0]
 800f538:	88fa      	ldrh	r2, [r7, #6]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d902      	bls.n	800f544 <ff_convert+0x78>
				li = i;
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	60fb      	str	r3, [r7, #12]
 800f542:	e001      	b.n	800f548 <ff_convert+0x7c>
			else
				hi = i;
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	3b01      	subs	r3, #1
 800f54c:	613b      	str	r3, [r7, #16]
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d1da      	bne.n	800f50a <ff_convert+0x3e>
 800f554:	e000      	b.n	800f558 <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800f556:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d006      	beq.n	800f56c <ff_convert+0xa0>
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	009b      	lsls	r3, r3, #2
 800f562:	3302      	adds	r3, #2
 800f564:	69fa      	ldr	r2, [r7, #28]
 800f566:	4413      	add	r3, r2
 800f568:	881b      	ldrh	r3, [r3, #0]
 800f56a:	e000      	b.n	800f56e <ff_convert+0xa2>
 800f56c:	2300      	movs	r3, #0
 800f56e:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800f570:	8b7b      	ldrh	r3, [r7, #26]
}
 800f572:	4618      	mov	r0, r3
 800f574:	3724      	adds	r7, #36	; 0x24
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr
 800f57e:	bf00      	nop
 800f580:	080631d4 	.word	0x080631d4
 800f584:	0804dd50 	.word	0x0804dd50

0800f588 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f588:	b480      	push	{r7}
 800f58a:	b087      	sub	sp, #28
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	4603      	mov	r3, r0
 800f590:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f592:	88fb      	ldrh	r3, [r7, #6]
 800f594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f598:	d201      	bcs.n	800f59e <ff_wtoupper+0x16>
 800f59a:	4b3e      	ldr	r3, [pc, #248]	; (800f694 <ff_wtoupper+0x10c>)
 800f59c:	e000      	b.n	800f5a0 <ff_wtoupper+0x18>
 800f59e:	4b3e      	ldr	r3, [pc, #248]	; (800f698 <ff_wtoupper+0x110>)
 800f5a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	1c9a      	adds	r2, r3, #2
 800f5a6:	617a      	str	r2, [r7, #20]
 800f5a8:	881b      	ldrh	r3, [r3, #0]
 800f5aa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f5ac:	8a7b      	ldrh	r3, [r7, #18]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d068      	beq.n	800f684 <ff_wtoupper+0xfc>
 800f5b2:	88fa      	ldrh	r2, [r7, #6]
 800f5b4:	8a7b      	ldrh	r3, [r7, #18]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d364      	bcc.n	800f684 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	1c9a      	adds	r2, r3, #2
 800f5be:	617a      	str	r2, [r7, #20]
 800f5c0:	881b      	ldrh	r3, [r3, #0]
 800f5c2:	823b      	strh	r3, [r7, #16]
 800f5c4:	8a3b      	ldrh	r3, [r7, #16]
 800f5c6:	0a1b      	lsrs	r3, r3, #8
 800f5c8:	81fb      	strh	r3, [r7, #14]
 800f5ca:	8a3b      	ldrh	r3, [r7, #16]
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f5d0:	88fa      	ldrh	r2, [r7, #6]
 800f5d2:	8a79      	ldrh	r1, [r7, #18]
 800f5d4:	8a3b      	ldrh	r3, [r7, #16]
 800f5d6:	440b      	add	r3, r1
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	da49      	bge.n	800f670 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f5dc:	89fb      	ldrh	r3, [r7, #14]
 800f5de:	2b08      	cmp	r3, #8
 800f5e0:	d84f      	bhi.n	800f682 <ff_wtoupper+0xfa>
 800f5e2:	a201      	add	r2, pc, #4	; (adr r2, 800f5e8 <ff_wtoupper+0x60>)
 800f5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5e8:	0800f60d 	.word	0x0800f60d
 800f5ec:	0800f61f 	.word	0x0800f61f
 800f5f0:	0800f635 	.word	0x0800f635
 800f5f4:	0800f63d 	.word	0x0800f63d
 800f5f8:	0800f645 	.word	0x0800f645
 800f5fc:	0800f64d 	.word	0x0800f64d
 800f600:	0800f655 	.word	0x0800f655
 800f604:	0800f65d 	.word	0x0800f65d
 800f608:	0800f665 	.word	0x0800f665
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f60c:	88fa      	ldrh	r2, [r7, #6]
 800f60e:	8a7b      	ldrh	r3, [r7, #18]
 800f610:	1ad3      	subs	r3, r2, r3
 800f612:	005b      	lsls	r3, r3, #1
 800f614:	697a      	ldr	r2, [r7, #20]
 800f616:	4413      	add	r3, r2
 800f618:	881b      	ldrh	r3, [r3, #0]
 800f61a:	80fb      	strh	r3, [r7, #6]
 800f61c:	e027      	b.n	800f66e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f61e:	88fa      	ldrh	r2, [r7, #6]
 800f620:	8a7b      	ldrh	r3, [r7, #18]
 800f622:	1ad3      	subs	r3, r2, r3
 800f624:	b29b      	uxth	r3, r3
 800f626:	f003 0301 	and.w	r3, r3, #1
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	88fa      	ldrh	r2, [r7, #6]
 800f62e:	1ad3      	subs	r3, r2, r3
 800f630:	80fb      	strh	r3, [r7, #6]
 800f632:	e01c      	b.n	800f66e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f634:	88fb      	ldrh	r3, [r7, #6]
 800f636:	3b10      	subs	r3, #16
 800f638:	80fb      	strh	r3, [r7, #6]
 800f63a:	e018      	b.n	800f66e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f63c:	88fb      	ldrh	r3, [r7, #6]
 800f63e:	3b20      	subs	r3, #32
 800f640:	80fb      	strh	r3, [r7, #6]
 800f642:	e014      	b.n	800f66e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f644:	88fb      	ldrh	r3, [r7, #6]
 800f646:	3b30      	subs	r3, #48	; 0x30
 800f648:	80fb      	strh	r3, [r7, #6]
 800f64a:	e010      	b.n	800f66e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f64c:	88fb      	ldrh	r3, [r7, #6]
 800f64e:	3b1a      	subs	r3, #26
 800f650:	80fb      	strh	r3, [r7, #6]
 800f652:	e00c      	b.n	800f66e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f654:	88fb      	ldrh	r3, [r7, #6]
 800f656:	3308      	adds	r3, #8
 800f658:	80fb      	strh	r3, [r7, #6]
 800f65a:	e008      	b.n	800f66e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f65c:	88fb      	ldrh	r3, [r7, #6]
 800f65e:	3b50      	subs	r3, #80	; 0x50
 800f660:	80fb      	strh	r3, [r7, #6]
 800f662:	e004      	b.n	800f66e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f664:	88fb      	ldrh	r3, [r7, #6]
 800f666:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f66a:	80fb      	strh	r3, [r7, #6]
 800f66c:	bf00      	nop
			}
			break;
 800f66e:	e008      	b.n	800f682 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f670:	89fb      	ldrh	r3, [r7, #14]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d195      	bne.n	800f5a2 <ff_wtoupper+0x1a>
 800f676:	8a3b      	ldrh	r3, [r7, #16]
 800f678:	005b      	lsls	r3, r3, #1
 800f67a:	697a      	ldr	r2, [r7, #20]
 800f67c:	4413      	add	r3, r2
 800f67e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f680:	e78f      	b.n	800f5a2 <ff_wtoupper+0x1a>
			break;
 800f682:	bf00      	nop
	}

	return chr;
 800f684:	88fb      	ldrh	r3, [r7, #6]
}
 800f686:	4618      	mov	r0, r3
 800f688:	371c      	adds	r7, #28
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr
 800f692:	bf00      	nop
 800f694:	08078658 	.word	0x08078658
 800f698:	0807884c 	.word	0x0807884c

0800f69c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b086      	sub	sp, #24
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	6039      	str	r1, [r7, #0]
 800f6a6:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	60fb      	str	r3, [r7, #12]
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800f6b0:	f107 030c 	add.w	r3, r7, #12
 800f6b4:	2101      	movs	r1, #1
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f000 f986 	bl	800f9c8 <osSemaphoreCreate>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	bf14      	ite	ne
 800f6ca:	2301      	movne	r3, #1
 800f6cc:	2300      	moveq	r3, #0
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	617b      	str	r3, [r7, #20]

    return ret;
 800f6d2:	697b      	ldr	r3, [r7, #20]
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3718      	adds	r7, #24
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f000 fa25 	bl	800fb34 <osSemaphoreDelete>
#endif
    return 1;
 800f6ea:	2301      	movs	r3, #1
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3708      	adds	r7, #8
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b084      	sub	sp, #16
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800f700:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 f991 	bl	800fa2c <osSemaphoreWait>
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d101      	bne.n	800f714 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800f710:	2301      	movs	r3, #1
 800f712:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f714:	68fb      	ldr	r3, [r7, #12]
}
 800f716:	4618      	mov	r0, r3
 800f718:	3710      	adds	r7, #16
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}

0800f71e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f71e:	b580      	push	{r7, lr}
 800f720:	b082      	sub	sp, #8
 800f722:	af00      	add	r7, sp, #0
 800f724:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f000 f9ce 	bl	800fac8 <osSemaphoreRelease>
#endif
}
 800f72c:	bf00      	nop
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f734:	b480      	push	{r7}
 800f736:	b085      	sub	sp, #20
 800f738:	af00      	add	r7, sp, #0
 800f73a:	4603      	mov	r3, r0
 800f73c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f73e:	2300      	movs	r3, #0
 800f740:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f746:	2b84      	cmp	r3, #132	; 0x84
 800f748:	d005      	beq.n	800f756 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f74a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	4413      	add	r3, r2
 800f752:	3303      	adds	r3, #3
 800f754:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f756:	68fb      	ldr	r3, [r7, #12]
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3714      	adds	r7, #20
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f764:	b480      	push	{r7}
 800f766:	b083      	sub	sp, #12
 800f768:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f76a:	f3ef 8305 	mrs	r3, IPSR
 800f76e:	607b      	str	r3, [r7, #4]
  return(result);
 800f770:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f772:	2b00      	cmp	r3, #0
 800f774:	bf14      	ite	ne
 800f776:	2301      	movne	r3, #1
 800f778:	2300      	moveq	r3, #0
 800f77a:	b2db      	uxtb	r3, r3
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	370c      	adds	r7, #12
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr

0800f788 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f78c:	f001 fd72 	bl	8011274 <vTaskStartScheduler>
  
  return osOK;
 800f790:	2300      	movs	r3, #0
}
 800f792:	4618      	mov	r0, r3
 800f794:	bd80      	pop	{r7, pc}

0800f796 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800f796:	b580      	push	{r7, lr}
 800f798:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800f79a:	f002 f9ed 	bl	8011b78 <xTaskGetSchedulerState>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	d101      	bne.n	800f7a8 <osKernelRunning+0x12>
    return 0;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	e000      	b.n	800f7aa <osKernelRunning+0x14>
  else
    return 1;
 800f7a8:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f7b2:	f7ff ffd7 	bl	800f764 <inHandlerMode>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d003      	beq.n	800f7c4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f7bc:	f001 fe74 	bl	80114a8 <xTaskGetTickCountFromISR>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	e002      	b.n	800f7ca <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f7c4:	f001 fe60 	bl	8011488 <xTaskGetTickCount>
 800f7c8:	4603      	mov	r3, r0
  }
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	bd80      	pop	{r7, pc}

0800f7ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f7ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7d0:	b089      	sub	sp, #36	; 0x24
 800f7d2:	af04      	add	r7, sp, #16
 800f7d4:	6078      	str	r0, [r7, #4]
 800f7d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	695b      	ldr	r3, [r3, #20]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d020      	beq.n	800f822 <osThreadCreate+0x54>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	699b      	ldr	r3, [r3, #24]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d01c      	beq.n	800f822 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	685c      	ldr	r4, [r3, #4]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681d      	ldr	r5, [r3, #0]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	691e      	ldr	r6, [r3, #16]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7ff ff9a 	bl	800f734 <makeFreeRtosPriority>
 800f800:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	695b      	ldr	r3, [r3, #20]
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f80a:	9202      	str	r2, [sp, #8]
 800f80c:	9301      	str	r3, [sp, #4]
 800f80e:	9100      	str	r1, [sp, #0]
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	4632      	mov	r2, r6
 800f814:	4629      	mov	r1, r5
 800f816:	4620      	mov	r0, r4
 800f818:	f001 fb64 	bl	8010ee4 <xTaskCreateStatic>
 800f81c:	4603      	mov	r3, r0
 800f81e:	60fb      	str	r3, [r7, #12]
 800f820:	e01c      	b.n	800f85c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	685c      	ldr	r4, [r3, #4]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f82e:	b29e      	uxth	r6, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f836:	4618      	mov	r0, r3
 800f838:	f7ff ff7c 	bl	800f734 <makeFreeRtosPriority>
 800f83c:	4602      	mov	r2, r0
 800f83e:	f107 030c 	add.w	r3, r7, #12
 800f842:	9301      	str	r3, [sp, #4]
 800f844:	9200      	str	r2, [sp, #0]
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	4632      	mov	r2, r6
 800f84a:	4629      	mov	r1, r5
 800f84c:	4620      	mov	r0, r4
 800f84e:	f001 fba6 	bl	8010f9e <xTaskCreate>
 800f852:	4603      	mov	r3, r0
 800f854:	2b01      	cmp	r3, #1
 800f856:	d001      	beq.n	800f85c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f858:	2300      	movs	r3, #0
 800f85a:	e000      	b.n	800f85e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f85c:	68fb      	ldr	r3, [r7, #12]
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3714      	adds	r7, #20
 800f862:	46bd      	mov	sp, r7
 800f864:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f866 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f866:	b580      	push	{r7, lr}
 800f868:	b084      	sub	sp, #16
 800f86a:	af00      	add	r7, sp, #0
 800f86c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d001      	beq.n	800f87c <osDelay+0x16>
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	e000      	b.n	800f87e <osDelay+0x18>
 800f87c:	2301      	movs	r3, #1
 800f87e:	4618      	mov	r0, r3
 800f880:	f001 fcc4 	bl	801120c <vTaskDelay>
  
  return osOK;
 800f884:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f886:	4618      	mov	r0, r3
 800f888:	3710      	adds	r7, #16
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}

0800f88e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800f88e:	b580      	push	{r7, lr}
 800f890:	b082      	sub	sp, #8
 800f892:	af00      	add	r7, sp, #0
 800f894:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d007      	beq.n	800f8ae <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	2001      	movs	r0, #1
 800f8a6:	f000 fcfa 	bl	801029e <xQueueCreateMutexStatic>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	e003      	b.n	800f8b6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800f8ae:	2001      	movs	r0, #1
 800f8b0:	f000 fcdd 	bl	801026e <xQueueCreateMutex>
 800f8b4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
	...

0800f8c0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b084      	sub	sp, #16
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d101      	bne.n	800f8d8 <osMutexWait+0x18>
    return osErrorParameter;
 800f8d4:	2380      	movs	r3, #128	; 0x80
 800f8d6:	e03a      	b.n	800f94e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8e2:	d103      	bne.n	800f8ec <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800f8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f8e8:	60fb      	str	r3, [r7, #12]
 800f8ea:	e009      	b.n	800f900 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d006      	beq.n	800f900 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d101      	bne.n	800f900 <osMutexWait+0x40>
      ticks = 1;
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f900:	f7ff ff30 	bl	800f764 <inHandlerMode>
 800f904:	4603      	mov	r3, r0
 800f906:	2b00      	cmp	r3, #0
 800f908:	d017      	beq.n	800f93a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f90a:	f107 0308 	add.w	r3, r7, #8
 800f90e:	461a      	mov	r2, r3
 800f910:	2100      	movs	r1, #0
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f001 f8f0 	bl	8010af8 <xQueueReceiveFromISR>
 800f918:	4603      	mov	r3, r0
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d001      	beq.n	800f922 <osMutexWait+0x62>
      return osErrorOS;
 800f91e:	23ff      	movs	r3, #255	; 0xff
 800f920:	e015      	b.n	800f94e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d011      	beq.n	800f94c <osMutexWait+0x8c>
 800f928:	4b0b      	ldr	r3, [pc, #44]	; (800f958 <osMutexWait+0x98>)
 800f92a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f92e:	601a      	str	r2, [r3, #0]
 800f930:	f3bf 8f4f 	dsb	sy
 800f934:	f3bf 8f6f 	isb	sy
 800f938:	e008      	b.n	800f94c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800f93a:	68f9      	ldr	r1, [r7, #12]
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f000 ffcf 	bl	80108e0 <xQueueSemaphoreTake>
 800f942:	4603      	mov	r3, r0
 800f944:	2b01      	cmp	r3, #1
 800f946:	d001      	beq.n	800f94c <osMutexWait+0x8c>
    return osErrorOS;
 800f948:	23ff      	movs	r3, #255	; 0xff
 800f94a:	e000      	b.n	800f94e <osMutexWait+0x8e>
  }
  
  return osOK;
 800f94c:	2300      	movs	r3, #0
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3710      	adds	r7, #16
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	e000ed04 	.word	0xe000ed04

0800f95c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f964:	2300      	movs	r3, #0
 800f966:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f968:	2300      	movs	r3, #0
 800f96a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800f96c:	f7ff fefa 	bl	800f764 <inHandlerMode>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d016      	beq.n	800f9a4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f976:	f107 0308 	add.w	r3, r7, #8
 800f97a:	4619      	mov	r1, r3
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f000 fe42 	bl	8010606 <xQueueGiveFromISR>
 800f982:	4603      	mov	r3, r0
 800f984:	2b01      	cmp	r3, #1
 800f986:	d001      	beq.n	800f98c <osMutexRelease+0x30>
      return osErrorOS;
 800f988:	23ff      	movs	r3, #255	; 0xff
 800f98a:	e017      	b.n	800f9bc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d013      	beq.n	800f9ba <osMutexRelease+0x5e>
 800f992:	4b0c      	ldr	r3, [pc, #48]	; (800f9c4 <osMutexRelease+0x68>)
 800f994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f998:	601a      	str	r2, [r3, #0]
 800f99a:	f3bf 8f4f 	dsb	sy
 800f99e:	f3bf 8f6f 	isb	sy
 800f9a2:	e00a      	b.n	800f9ba <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	2100      	movs	r1, #0
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f000 fc92 	bl	80102d4 <xQueueGenericSend>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	2b01      	cmp	r3, #1
 800f9b4:	d001      	beq.n	800f9ba <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800f9b6:	23ff      	movs	r3, #255	; 0xff
 800f9b8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	e000ed04 	.word	0xe000ed04

0800f9c8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b086      	sub	sp, #24
 800f9cc:	af02      	add	r7, sp, #8
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d00f      	beq.n	800f9fa <osSemaphoreCreate+0x32>
    if (count == 1) {
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d10a      	bne.n	800f9f6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	2203      	movs	r2, #3
 800f9e6:	9200      	str	r2, [sp, #0]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	2100      	movs	r1, #0
 800f9ec:	2001      	movs	r0, #1
 800f9ee:	f000 fb53 	bl	8010098 <xQueueGenericCreateStatic>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	e016      	b.n	800fa24 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	e014      	b.n	800fa24 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	d110      	bne.n	800fa22 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800fa00:	2203      	movs	r2, #3
 800fa02:	2100      	movs	r1, #0
 800fa04:	2001      	movs	r0, #1
 800fa06:	f000 fbbf 	bl	8010188 <xQueueGenericCreate>
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d005      	beq.n	800fa1e <osSemaphoreCreate+0x56>
 800fa12:	2300      	movs	r3, #0
 800fa14:	2200      	movs	r2, #0
 800fa16:	2100      	movs	r1, #0
 800fa18:	68f8      	ldr	r0, [r7, #12]
 800fa1a:	f000 fc5b 	bl	80102d4 <xQueueGenericSend>
      return sema;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	e000      	b.n	800fa24 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800fa22:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3710      	adds	r7, #16
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}

0800fa2c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b084      	sub	sp, #16
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fa36:	2300      	movs	r3, #0
 800fa38:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d101      	bne.n	800fa44 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800fa40:	2380      	movs	r3, #128	; 0x80
 800fa42:	e03a      	b.n	800faba <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800fa44:	2300      	movs	r3, #0
 800fa46:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa4e:	d103      	bne.n	800fa58 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800fa50:	f04f 33ff 	mov.w	r3, #4294967295
 800fa54:	60fb      	str	r3, [r7, #12]
 800fa56:	e009      	b.n	800fa6c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d006      	beq.n	800fa6c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d101      	bne.n	800fa6c <osSemaphoreWait+0x40>
      ticks = 1;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800fa6c:	f7ff fe7a 	bl	800f764 <inHandlerMode>
 800fa70:	4603      	mov	r3, r0
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d017      	beq.n	800faa6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fa76:	f107 0308 	add.w	r3, r7, #8
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f001 f83a 	bl	8010af8 <xQueueReceiveFromISR>
 800fa84:	4603      	mov	r3, r0
 800fa86:	2b01      	cmp	r3, #1
 800fa88:	d001      	beq.n	800fa8e <osSemaphoreWait+0x62>
      return osErrorOS;
 800fa8a:	23ff      	movs	r3, #255	; 0xff
 800fa8c:	e015      	b.n	800faba <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d011      	beq.n	800fab8 <osSemaphoreWait+0x8c>
 800fa94:	4b0b      	ldr	r3, [pc, #44]	; (800fac4 <osSemaphoreWait+0x98>)
 800fa96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa9a:	601a      	str	r2, [r3, #0]
 800fa9c:	f3bf 8f4f 	dsb	sy
 800faa0:	f3bf 8f6f 	isb	sy
 800faa4:	e008      	b.n	800fab8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800faa6:	68f9      	ldr	r1, [r7, #12]
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 ff19 	bl	80108e0 <xQueueSemaphoreTake>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d001      	beq.n	800fab8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800fab4:	23ff      	movs	r3, #255	; 0xff
 800fab6:	e000      	b.n	800faba <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800fab8:	2300      	movs	r3, #0
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3710      	adds	r7, #16
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	e000ed04 	.word	0xe000ed04

0800fac8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b084      	sub	sp, #16
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fad0:	2300      	movs	r3, #0
 800fad2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fad4:	2300      	movs	r3, #0
 800fad6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800fad8:	f7ff fe44 	bl	800f764 <inHandlerMode>
 800fadc:	4603      	mov	r3, r0
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d016      	beq.n	800fb10 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fae2:	f107 0308 	add.w	r3, r7, #8
 800fae6:	4619      	mov	r1, r3
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 fd8c 	bl	8010606 <xQueueGiveFromISR>
 800faee:	4603      	mov	r3, r0
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d001      	beq.n	800faf8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800faf4:	23ff      	movs	r3, #255	; 0xff
 800faf6:	e017      	b.n	800fb28 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d013      	beq.n	800fb26 <osSemaphoreRelease+0x5e>
 800fafe:	4b0c      	ldr	r3, [pc, #48]	; (800fb30 <osSemaphoreRelease+0x68>)
 800fb00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb04:	601a      	str	r2, [r3, #0]
 800fb06:	f3bf 8f4f 	dsb	sy
 800fb0a:	f3bf 8f6f 	isb	sy
 800fb0e:	e00a      	b.n	800fb26 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800fb10:	2300      	movs	r3, #0
 800fb12:	2200      	movs	r2, #0
 800fb14:	2100      	movs	r1, #0
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 fbdc 	bl	80102d4 <xQueueGenericSend>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d001      	beq.n	800fb26 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800fb22:	23ff      	movs	r3, #255	; 0xff
 800fb24:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800fb26:	68fb      	ldr	r3, [r7, #12]
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3710      	adds	r7, #16
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	e000ed04 	.word	0xe000ed04

0800fb34 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800fb3c:	f7ff fe12 	bl	800f764 <inHandlerMode>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d001      	beq.n	800fb4a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800fb46:	2382      	movs	r3, #130	; 0x82
 800fb48:	e003      	b.n	800fb52 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f001 f854 	bl	8010bf8 <vQueueDelete>

  return osOK; 
 800fb50:	2300      	movs	r3, #0
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3708      	adds	r7, #8
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fb5a:	b590      	push	{r4, r7, lr}
 800fb5c:	b085      	sub	sp, #20
 800fb5e:	af02      	add	r7, sp, #8
 800fb60:	6078      	str	r0, [r7, #4]
 800fb62:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	689b      	ldr	r3, [r3, #8]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d011      	beq.n	800fb90 <osMessageCreate+0x36>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	68db      	ldr	r3, [r3, #12]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d00d      	beq.n	800fb90 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6818      	ldr	r0, [r3, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6859      	ldr	r1, [r3, #4]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	689a      	ldr	r2, [r3, #8]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	2400      	movs	r4, #0
 800fb86:	9400      	str	r4, [sp, #0]
 800fb88:	f000 fa86 	bl	8010098 <xQueueGenericCreateStatic>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	e008      	b.n	800fba2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6818      	ldr	r0, [r3, #0]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	f000 faf4 	bl	8010188 <xQueueGenericCreate>
 800fba0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	370c      	adds	r7, #12
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd90      	pop	{r4, r7, pc}
	...

0800fbac <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b086      	sub	sp, #24
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	60b9      	str	r1, [r7, #8]
 800fbb6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fbb8:	2300      	movs	r3, #0
 800fbba:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d101      	bne.n	800fbca <osMessagePut+0x1e>
    ticks = 1;
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fbca:	f7ff fdcb 	bl	800f764 <inHandlerMode>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d018      	beq.n	800fc06 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fbd4:	f107 0210 	add.w	r2, r7, #16
 800fbd8:	f107 0108 	add.w	r1, r7, #8
 800fbdc:	2300      	movs	r3, #0
 800fbde:	68f8      	ldr	r0, [r7, #12]
 800fbe0:	f000 fc76 	bl	80104d0 <xQueueGenericSendFromISR>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	2b01      	cmp	r3, #1
 800fbe8:	d001      	beq.n	800fbee <osMessagePut+0x42>
      return osErrorOS;
 800fbea:	23ff      	movs	r3, #255	; 0xff
 800fbec:	e018      	b.n	800fc20 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d014      	beq.n	800fc1e <osMessagePut+0x72>
 800fbf4:	4b0c      	ldr	r3, [pc, #48]	; (800fc28 <osMessagePut+0x7c>)
 800fbf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbfa:	601a      	str	r2, [r3, #0]
 800fbfc:	f3bf 8f4f 	dsb	sy
 800fc00:	f3bf 8f6f 	isb	sy
 800fc04:	e00b      	b.n	800fc1e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fc06:	f107 0108 	add.w	r1, r7, #8
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	697a      	ldr	r2, [r7, #20]
 800fc0e:	68f8      	ldr	r0, [r7, #12]
 800fc10:	f000 fb60 	bl	80102d4 <xQueueGenericSend>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d001      	beq.n	800fc1e <osMessagePut+0x72>
      return osErrorOS;
 800fc1a:	23ff      	movs	r3, #255	; 0xff
 800fc1c:	e000      	b.n	800fc20 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fc1e:	2300      	movs	r3, #0
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	3718      	adds	r7, #24
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}
 800fc28:	e000ed04 	.word	0xe000ed04

0800fc2c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fc2c:	b590      	push	{r4, r7, lr}
 800fc2e:	b08b      	sub	sp, #44	; 0x2c
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	60f8      	str	r0, [r7, #12]
 800fc34:	60b9      	str	r1, [r7, #8]
 800fc36:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d10a      	bne.n	800fc5c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fc46:	2380      	movs	r3, #128	; 0x80
 800fc48:	617b      	str	r3, [r7, #20]
    return event;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	461c      	mov	r4, r3
 800fc4e:	f107 0314 	add.w	r3, r7, #20
 800fc52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fc56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fc5a:	e054      	b.n	800fd06 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fc60:	2300      	movs	r3, #0
 800fc62:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc6a:	d103      	bne.n	800fc74 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fc6c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc70:	627b      	str	r3, [r7, #36]	; 0x24
 800fc72:	e009      	b.n	800fc88 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d006      	beq.n	800fc88 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800fc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d101      	bne.n	800fc88 <osMessageGet+0x5c>
      ticks = 1;
 800fc84:	2301      	movs	r3, #1
 800fc86:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fc88:	f7ff fd6c 	bl	800f764 <inHandlerMode>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d01c      	beq.n	800fccc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fc92:	f107 0220 	add.w	r2, r7, #32
 800fc96:	f107 0314 	add.w	r3, r7, #20
 800fc9a:	3304      	adds	r3, #4
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	68b8      	ldr	r0, [r7, #8]
 800fca0:	f000 ff2a 	bl	8010af8 <xQueueReceiveFromISR>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b01      	cmp	r3, #1
 800fca8:	d102      	bne.n	800fcb0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fcaa:	2310      	movs	r3, #16
 800fcac:	617b      	str	r3, [r7, #20]
 800fcae:	e001      	b.n	800fcb4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fcb4:	6a3b      	ldr	r3, [r7, #32]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d01d      	beq.n	800fcf6 <osMessageGet+0xca>
 800fcba:	4b15      	ldr	r3, [pc, #84]	; (800fd10 <osMessageGet+0xe4>)
 800fcbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcc0:	601a      	str	r2, [r3, #0]
 800fcc2:	f3bf 8f4f 	dsb	sy
 800fcc6:	f3bf 8f6f 	isb	sy
 800fcca:	e014      	b.n	800fcf6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fccc:	f107 0314 	add.w	r3, r7, #20
 800fcd0:	3304      	adds	r3, #4
 800fcd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	68b8      	ldr	r0, [r7, #8]
 800fcd8:	f000 fd22 	bl	8010720 <xQueueReceive>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d102      	bne.n	800fce8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fce2:	2310      	movs	r3, #16
 800fce4:	617b      	str	r3, [r7, #20]
 800fce6:	e006      	b.n	800fcf6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d101      	bne.n	800fcf2 <osMessageGet+0xc6>
 800fcee:	2300      	movs	r3, #0
 800fcf0:	e000      	b.n	800fcf4 <osMessageGet+0xc8>
 800fcf2:	2340      	movs	r3, #64	; 0x40
 800fcf4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	461c      	mov	r4, r3
 800fcfa:	f107 0314 	add.w	r3, r7, #20
 800fcfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fd02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fd06:	68f8      	ldr	r0, [r7, #12]
 800fd08:	372c      	adds	r7, #44	; 0x2c
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd90      	pop	{r4, r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	e000ed04 	.word	0xe000ed04

0800fd14 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b082      	sub	sp, #8
 800fd18:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800fd1a:	201c      	movs	r0, #28
 800fd1c:	f002 fb9c 	bl	8012458 <pvPortMalloc>
 800fd20:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d00a      	beq.n	800fd3e <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	3304      	adds	r3, #4
 800fd32:	4618      	mov	r0, r3
 800fd34:	f000 f893 	bl	800fe5e <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800fd3e:	687b      	ldr	r3, [r7, #4]
	}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3708      	adds	r7, #8
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b08e      	sub	sp, #56	; 0x38
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800fd52:	2300      	movs	r3, #0
 800fd54:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d10a      	bne.n	800fd7a <xEventGroupSetBits+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd68:	f383 8811 	msr	BASEPRI, r3
 800fd6c:	f3bf 8f6f 	isb	sy
 800fd70:	f3bf 8f4f 	dsb	sy
 800fd74:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fd76:	bf00      	nop
 800fd78:	e7fe      	b.n	800fd78 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d00a      	beq.n	800fd9a <xEventGroupSetBits+0x52>
	__asm volatile
 800fd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd88:	f383 8811 	msr	BASEPRI, r3
 800fd8c:	f3bf 8f6f 	isb	sy
 800fd90:	f3bf 8f4f 	dsb	sy
 800fd94:	60fb      	str	r3, [r7, #12]
}
 800fd96:	bf00      	nop
 800fd98:	e7fe      	b.n	800fd98 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800fd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd9c:	3304      	adds	r3, #4
 800fd9e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda2:	3308      	adds	r3, #8
 800fda4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800fda6:	f001 fac5 	bl	8011334 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdac:	68db      	ldr	r3, [r3, #12]
 800fdae:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800fdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb2:	681a      	ldr	r2, [r3, #0]
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	431a      	orrs	r2, r3
 800fdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdba:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800fdbc:	e03c      	b.n	800fe38 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800fdbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800fdc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800fdce:	69bb      	ldr	r3, [r7, #24]
 800fdd0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fdd4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800fdd6:	69bb      	ldr	r3, [r7, #24]
 800fdd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fddc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d108      	bne.n	800fdfa <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800fde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	69bb      	ldr	r3, [r7, #24]
 800fdee:	4013      	ands	r3, r2
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d00b      	beq.n	800fe0c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdf8:	e008      	b.n	800fe0c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800fdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdfc:	681a      	ldr	r2, [r3, #0]
 800fdfe:	69bb      	ldr	r3, [r7, #24]
 800fe00:	4013      	ands	r3, r2
 800fe02:	69ba      	ldr	r2, [r7, #24]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d101      	bne.n	800fe0c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800fe0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d010      	beq.n	800fe34 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d003      	beq.n	800fe24 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800fe1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe1e:	69bb      	ldr	r3, [r7, #24]
 800fe20:	4313      	orrs	r3, r2
 800fe22:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800fe24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe30:	f001 fce6 	bl	8011800 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800fe34:	69fb      	ldr	r3, [r7, #28]
 800fe36:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800fe38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe3a:	6a3b      	ldr	r3, [r7, #32]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d1be      	bne.n	800fdbe <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800fe40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe46:	43db      	mvns	r3, r3
 800fe48:	401a      	ands	r2, r3
 800fe4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe4c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800fe4e:	f001 fa7f 	bl	8011350 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800fe52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe54:	681b      	ldr	r3, [r3, #0]
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3738      	adds	r7, #56	; 0x38
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}

0800fe5e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fe5e:	b480      	push	{r7}
 800fe60:	b083      	sub	sp, #12
 800fe62:	af00      	add	r7, sp, #0
 800fe64:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f103 0208 	add.w	r2, r3, #8
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f04f 32ff 	mov.w	r2, #4294967295
 800fe76:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f103 0208 	add.w	r2, r3, #8
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f103 0208 	add.w	r2, r3, #8
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fe92:	bf00      	nop
 800fe94:	370c      	adds	r7, #12
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr

0800fe9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fe9e:	b480      	push	{r7}
 800fea0:	b083      	sub	sp, #12
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2200      	movs	r2, #0
 800feaa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800feac:	bf00      	nop
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr

0800feb8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800feb8:	b480      	push	{r7}
 800feba:	b085      	sub	sp, #20
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	68fa      	ldr	r2, [r7, #12]
 800fecc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	689a      	ldr	r2, [r3, #8]
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	689b      	ldr	r3, [r3, #8]
 800feda:	683a      	ldr	r2, [r7, #0]
 800fedc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	683a      	ldr	r2, [r7, #0]
 800fee2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	687a      	ldr	r2, [r7, #4]
 800fee8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	1c5a      	adds	r2, r3, #1
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	601a      	str	r2, [r3, #0]
}
 800fef4:	bf00      	nop
 800fef6:	3714      	adds	r7, #20
 800fef8:	46bd      	mov	sp, r7
 800fefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefe:	4770      	bx	lr

0800ff00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff00:	b480      	push	{r7}
 800ff02:	b085      	sub	sp, #20
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff16:	d103      	bne.n	800ff20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	691b      	ldr	r3, [r3, #16]
 800ff1c:	60fb      	str	r3, [r7, #12]
 800ff1e:	e00c      	b.n	800ff3a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	3308      	adds	r3, #8
 800ff24:	60fb      	str	r3, [r7, #12]
 800ff26:	e002      	b.n	800ff2e <vListInsert+0x2e>
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	60fb      	str	r3, [r7, #12]
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	685b      	ldr	r3, [r3, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	68ba      	ldr	r2, [r7, #8]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d2f6      	bcs.n	800ff28 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	685a      	ldr	r2, [r3, #4]
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	685b      	ldr	r3, [r3, #4]
 800ff46:	683a      	ldr	r2, [r7, #0]
 800ff48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	68fa      	ldr	r2, [r7, #12]
 800ff4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	683a      	ldr	r2, [r7, #0]
 800ff54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	1c5a      	adds	r2, r3, #1
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	601a      	str	r2, [r3, #0]
}
 800ff66:	bf00      	nop
 800ff68:	3714      	adds	r7, #20
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff70:	4770      	bx	lr

0800ff72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ff72:	b480      	push	{r7}
 800ff74:	b085      	sub	sp, #20
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	691b      	ldr	r3, [r3, #16]
 800ff7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	6892      	ldr	r2, [r2, #8]
 800ff88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	689b      	ldr	r3, [r3, #8]
 800ff8e:	687a      	ldr	r2, [r7, #4]
 800ff90:	6852      	ldr	r2, [r2, #4]
 800ff92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d103      	bne.n	800ffa6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	689a      	ldr	r2, [r3, #8]
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	1e5a      	subs	r2, r3, #1
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3714      	adds	r7, #20
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc4:	4770      	bx	lr
	...

0800ffc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d10a      	bne.n	800fff2 <xQueueGenericReset+0x2a>
	__asm volatile
 800ffdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffe0:	f383 8811 	msr	BASEPRI, r3
 800ffe4:	f3bf 8f6f 	isb	sy
 800ffe8:	f3bf 8f4f 	dsb	sy
 800ffec:	60bb      	str	r3, [r7, #8]
}
 800ffee:	bf00      	nop
 800fff0:	e7fe      	b.n	800fff0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fff2:	f002 f90f 	bl	8012214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681a      	ldr	r2, [r3, #0]
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fffe:	68f9      	ldr	r1, [r7, #12]
 8010000:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010002:	fb01 f303 	mul.w	r3, r1, r3
 8010006:	441a      	add	r2, r3
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2200      	movs	r2, #0
 8010010:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	681a      	ldr	r2, [r3, #0]
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010022:	3b01      	subs	r3, #1
 8010024:	68f9      	ldr	r1, [r7, #12]
 8010026:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010028:	fb01 f303 	mul.w	r3, r1, r3
 801002c:	441a      	add	r2, r3
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	22ff      	movs	r2, #255	; 0xff
 8010036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	22ff      	movs	r2, #255	; 0xff
 801003e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d114      	bne.n	8010072 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	691b      	ldr	r3, [r3, #16]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d01a      	beq.n	8010086 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	3310      	adds	r3, #16
 8010054:	4618      	mov	r0, r3
 8010056:	f001 fb71 	bl	801173c <xTaskRemoveFromEventList>
 801005a:	4603      	mov	r3, r0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d012      	beq.n	8010086 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010060:	4b0c      	ldr	r3, [pc, #48]	; (8010094 <xQueueGenericReset+0xcc>)
 8010062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010066:	601a      	str	r2, [r3, #0]
 8010068:	f3bf 8f4f 	dsb	sy
 801006c:	f3bf 8f6f 	isb	sy
 8010070:	e009      	b.n	8010086 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	3310      	adds	r3, #16
 8010076:	4618      	mov	r0, r3
 8010078:	f7ff fef1 	bl	800fe5e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	3324      	adds	r3, #36	; 0x24
 8010080:	4618      	mov	r0, r3
 8010082:	f7ff feec 	bl	800fe5e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010086:	f002 f8f5 	bl	8012274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801008a:	2301      	movs	r3, #1
}
 801008c:	4618      	mov	r0, r3
 801008e:	3710      	adds	r7, #16
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}
 8010094:	e000ed04 	.word	0xe000ed04

08010098 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010098:	b580      	push	{r7, lr}
 801009a:	b08e      	sub	sp, #56	; 0x38
 801009c:	af02      	add	r7, sp, #8
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	607a      	str	r2, [r7, #4]
 80100a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d10a      	bne.n	80100c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80100ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b0:	f383 8811 	msr	BASEPRI, r3
 80100b4:	f3bf 8f6f 	isb	sy
 80100b8:	f3bf 8f4f 	dsb	sy
 80100bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80100be:	bf00      	nop
 80100c0:	e7fe      	b.n	80100c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d10a      	bne.n	80100de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80100c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100cc:	f383 8811 	msr	BASEPRI, r3
 80100d0:	f3bf 8f6f 	isb	sy
 80100d4:	f3bf 8f4f 	dsb	sy
 80100d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80100da:	bf00      	nop
 80100dc:	e7fe      	b.n	80100dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d002      	beq.n	80100ea <xQueueGenericCreateStatic+0x52>
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d001      	beq.n	80100ee <xQueueGenericCreateStatic+0x56>
 80100ea:	2301      	movs	r3, #1
 80100ec:	e000      	b.n	80100f0 <xQueueGenericCreateStatic+0x58>
 80100ee:	2300      	movs	r3, #0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d10a      	bne.n	801010a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80100f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f8:	f383 8811 	msr	BASEPRI, r3
 80100fc:	f3bf 8f6f 	isb	sy
 8010100:	f3bf 8f4f 	dsb	sy
 8010104:	623b      	str	r3, [r7, #32]
}
 8010106:	bf00      	nop
 8010108:	e7fe      	b.n	8010108 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d102      	bne.n	8010116 <xQueueGenericCreateStatic+0x7e>
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d101      	bne.n	801011a <xQueueGenericCreateStatic+0x82>
 8010116:	2301      	movs	r3, #1
 8010118:	e000      	b.n	801011c <xQueueGenericCreateStatic+0x84>
 801011a:	2300      	movs	r3, #0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d10a      	bne.n	8010136 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010124:	f383 8811 	msr	BASEPRI, r3
 8010128:	f3bf 8f6f 	isb	sy
 801012c:	f3bf 8f4f 	dsb	sy
 8010130:	61fb      	str	r3, [r7, #28]
}
 8010132:	bf00      	nop
 8010134:	e7fe      	b.n	8010134 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010136:	2348      	movs	r3, #72	; 0x48
 8010138:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	2b48      	cmp	r3, #72	; 0x48
 801013e:	d00a      	beq.n	8010156 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010144:	f383 8811 	msr	BASEPRI, r3
 8010148:	f3bf 8f6f 	isb	sy
 801014c:	f3bf 8f4f 	dsb	sy
 8010150:	61bb      	str	r3, [r7, #24]
}
 8010152:	bf00      	nop
 8010154:	e7fe      	b.n	8010154 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010156:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801015c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801015e:	2b00      	cmp	r3, #0
 8010160:	d00d      	beq.n	801017e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010164:	2201      	movs	r2, #1
 8010166:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801016a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801016e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010170:	9300      	str	r3, [sp, #0]
 8010172:	4613      	mov	r3, r2
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	68b9      	ldr	r1, [r7, #8]
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f000 f83f 	bl	80101fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801017e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010180:	4618      	mov	r0, r3
 8010182:	3730      	adds	r7, #48	; 0x30
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010188:	b580      	push	{r7, lr}
 801018a:	b08a      	sub	sp, #40	; 0x28
 801018c:	af02      	add	r7, sp, #8
 801018e:	60f8      	str	r0, [r7, #12]
 8010190:	60b9      	str	r1, [r7, #8]
 8010192:	4613      	mov	r3, r2
 8010194:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d10a      	bne.n	80101b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 801019c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a0:	f383 8811 	msr	BASEPRI, r3
 80101a4:	f3bf 8f6f 	isb	sy
 80101a8:	f3bf 8f4f 	dsb	sy
 80101ac:	613b      	str	r3, [r7, #16]
}
 80101ae:	bf00      	nop
 80101b0:	e7fe      	b.n	80101b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	68ba      	ldr	r2, [r7, #8]
 80101b6:	fb02 f303 	mul.w	r3, r2, r3
 80101ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80101bc:	69fb      	ldr	r3, [r7, #28]
 80101be:	3348      	adds	r3, #72	; 0x48
 80101c0:	4618      	mov	r0, r3
 80101c2:	f002 f949 	bl	8012458 <pvPortMalloc>
 80101c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80101c8:	69bb      	ldr	r3, [r7, #24]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d011      	beq.n	80101f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80101ce:	69bb      	ldr	r3, [r7, #24]
 80101d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	3348      	adds	r3, #72	; 0x48
 80101d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80101d8:	69bb      	ldr	r3, [r7, #24]
 80101da:	2200      	movs	r2, #0
 80101dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80101e0:	79fa      	ldrb	r2, [r7, #7]
 80101e2:	69bb      	ldr	r3, [r7, #24]
 80101e4:	9300      	str	r3, [sp, #0]
 80101e6:	4613      	mov	r3, r2
 80101e8:	697a      	ldr	r2, [r7, #20]
 80101ea:	68b9      	ldr	r1, [r7, #8]
 80101ec:	68f8      	ldr	r0, [r7, #12]
 80101ee:	f000 f805 	bl	80101fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80101f2:	69bb      	ldr	r3, [r7, #24]
	}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3720      	adds	r7, #32
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}

080101fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
 8010202:	60f8      	str	r0, [r7, #12]
 8010204:	60b9      	str	r1, [r7, #8]
 8010206:	607a      	str	r2, [r7, #4]
 8010208:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d103      	bne.n	8010218 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	69ba      	ldr	r2, [r7, #24]
 8010214:	601a      	str	r2, [r3, #0]
 8010216:	e002      	b.n	801021e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	687a      	ldr	r2, [r7, #4]
 801021c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	68fa      	ldr	r2, [r7, #12]
 8010222:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010224:	69bb      	ldr	r3, [r7, #24]
 8010226:	68ba      	ldr	r2, [r7, #8]
 8010228:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801022a:	2101      	movs	r1, #1
 801022c:	69b8      	ldr	r0, [r7, #24]
 801022e:	f7ff fecb 	bl	800ffc8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010232:	bf00      	nop
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}

0801023a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801023a:	b580      	push	{r7, lr}
 801023c:	b082      	sub	sp, #8
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d00e      	beq.n	8010266 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2200      	movs	r2, #0
 801024c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2200      	movs	r2, #0
 8010252:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2200      	movs	r2, #0
 8010258:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801025a:	2300      	movs	r3, #0
 801025c:	2200      	movs	r2, #0
 801025e:	2100      	movs	r1, #0
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f000 f837 	bl	80102d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010266:	bf00      	nop
 8010268:	3708      	adds	r7, #8
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}

0801026e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801026e:	b580      	push	{r7, lr}
 8010270:	b086      	sub	sp, #24
 8010272:	af00      	add	r7, sp, #0
 8010274:	4603      	mov	r3, r0
 8010276:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010278:	2301      	movs	r3, #1
 801027a:	617b      	str	r3, [r7, #20]
 801027c:	2300      	movs	r3, #0
 801027e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010280:	79fb      	ldrb	r3, [r7, #7]
 8010282:	461a      	mov	r2, r3
 8010284:	6939      	ldr	r1, [r7, #16]
 8010286:	6978      	ldr	r0, [r7, #20]
 8010288:	f7ff ff7e 	bl	8010188 <xQueueGenericCreate>
 801028c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801028e:	68f8      	ldr	r0, [r7, #12]
 8010290:	f7ff ffd3 	bl	801023a <prvInitialiseMutex>

		return xNewQueue;
 8010294:	68fb      	ldr	r3, [r7, #12]
	}
 8010296:	4618      	mov	r0, r3
 8010298:	3718      	adds	r7, #24
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}

0801029e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801029e:	b580      	push	{r7, lr}
 80102a0:	b088      	sub	sp, #32
 80102a2:	af02      	add	r7, sp, #8
 80102a4:	4603      	mov	r3, r0
 80102a6:	6039      	str	r1, [r7, #0]
 80102a8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80102aa:	2301      	movs	r3, #1
 80102ac:	617b      	str	r3, [r7, #20]
 80102ae:	2300      	movs	r3, #0
 80102b0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80102b2:	79fb      	ldrb	r3, [r7, #7]
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	2200      	movs	r2, #0
 80102ba:	6939      	ldr	r1, [r7, #16]
 80102bc:	6978      	ldr	r0, [r7, #20]
 80102be:	f7ff feeb 	bl	8010098 <xQueueGenericCreateStatic>
 80102c2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f7ff ffb8 	bl	801023a <prvInitialiseMutex>

		return xNewQueue;
 80102ca:	68fb      	ldr	r3, [r7, #12]
	}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3718      	adds	r7, #24
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b08e      	sub	sp, #56	; 0x38
 80102d8:	af00      	add	r7, sp, #0
 80102da:	60f8      	str	r0, [r7, #12]
 80102dc:	60b9      	str	r1, [r7, #8]
 80102de:	607a      	str	r2, [r7, #4]
 80102e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80102e2:	2300      	movs	r3, #0
 80102e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80102ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d10a      	bne.n	8010306 <xQueueGenericSend+0x32>
	__asm volatile
 80102f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f4:	f383 8811 	msr	BASEPRI, r3
 80102f8:	f3bf 8f6f 	isb	sy
 80102fc:	f3bf 8f4f 	dsb	sy
 8010300:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010302:	bf00      	nop
 8010304:	e7fe      	b.n	8010304 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d103      	bne.n	8010314 <xQueueGenericSend+0x40>
 801030c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801030e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010310:	2b00      	cmp	r3, #0
 8010312:	d101      	bne.n	8010318 <xQueueGenericSend+0x44>
 8010314:	2301      	movs	r3, #1
 8010316:	e000      	b.n	801031a <xQueueGenericSend+0x46>
 8010318:	2300      	movs	r3, #0
 801031a:	2b00      	cmp	r3, #0
 801031c:	d10a      	bne.n	8010334 <xQueueGenericSend+0x60>
	__asm volatile
 801031e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010322:	f383 8811 	msr	BASEPRI, r3
 8010326:	f3bf 8f6f 	isb	sy
 801032a:	f3bf 8f4f 	dsb	sy
 801032e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010330:	bf00      	nop
 8010332:	e7fe      	b.n	8010332 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	2b02      	cmp	r3, #2
 8010338:	d103      	bne.n	8010342 <xQueueGenericSend+0x6e>
 801033a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801033e:	2b01      	cmp	r3, #1
 8010340:	d101      	bne.n	8010346 <xQueueGenericSend+0x72>
 8010342:	2301      	movs	r3, #1
 8010344:	e000      	b.n	8010348 <xQueueGenericSend+0x74>
 8010346:	2300      	movs	r3, #0
 8010348:	2b00      	cmp	r3, #0
 801034a:	d10a      	bne.n	8010362 <xQueueGenericSend+0x8e>
	__asm volatile
 801034c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010350:	f383 8811 	msr	BASEPRI, r3
 8010354:	f3bf 8f6f 	isb	sy
 8010358:	f3bf 8f4f 	dsb	sy
 801035c:	623b      	str	r3, [r7, #32]
}
 801035e:	bf00      	nop
 8010360:	e7fe      	b.n	8010360 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010362:	f001 fc09 	bl	8011b78 <xTaskGetSchedulerState>
 8010366:	4603      	mov	r3, r0
 8010368:	2b00      	cmp	r3, #0
 801036a:	d102      	bne.n	8010372 <xQueueGenericSend+0x9e>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d101      	bne.n	8010376 <xQueueGenericSend+0xa2>
 8010372:	2301      	movs	r3, #1
 8010374:	e000      	b.n	8010378 <xQueueGenericSend+0xa4>
 8010376:	2300      	movs	r3, #0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d10a      	bne.n	8010392 <xQueueGenericSend+0xbe>
	__asm volatile
 801037c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010380:	f383 8811 	msr	BASEPRI, r3
 8010384:	f3bf 8f6f 	isb	sy
 8010388:	f3bf 8f4f 	dsb	sy
 801038c:	61fb      	str	r3, [r7, #28]
}
 801038e:	bf00      	nop
 8010390:	e7fe      	b.n	8010390 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010392:	f001 ff3f 	bl	8012214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801039a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801039c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801039e:	429a      	cmp	r2, r3
 80103a0:	d302      	bcc.n	80103a8 <xQueueGenericSend+0xd4>
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	2b02      	cmp	r3, #2
 80103a6:	d129      	bne.n	80103fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80103a8:	683a      	ldr	r2, [r7, #0]
 80103aa:	68b9      	ldr	r1, [r7, #8]
 80103ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103ae:	f000 fc5e 	bl	8010c6e <prvCopyDataToQueue>
 80103b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d010      	beq.n	80103de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103be:	3324      	adds	r3, #36	; 0x24
 80103c0:	4618      	mov	r0, r3
 80103c2:	f001 f9bb 	bl	801173c <xTaskRemoveFromEventList>
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d013      	beq.n	80103f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80103cc:	4b3f      	ldr	r3, [pc, #252]	; (80104cc <xQueueGenericSend+0x1f8>)
 80103ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103d2:	601a      	str	r2, [r3, #0]
 80103d4:	f3bf 8f4f 	dsb	sy
 80103d8:	f3bf 8f6f 	isb	sy
 80103dc:	e00a      	b.n	80103f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80103de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d007      	beq.n	80103f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80103e4:	4b39      	ldr	r3, [pc, #228]	; (80104cc <xQueueGenericSend+0x1f8>)
 80103e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103ea:	601a      	str	r2, [r3, #0]
 80103ec:	f3bf 8f4f 	dsb	sy
 80103f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80103f4:	f001 ff3e 	bl	8012274 <vPortExitCritical>
				return pdPASS;
 80103f8:	2301      	movs	r3, #1
 80103fa:	e063      	b.n	80104c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d103      	bne.n	801040a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010402:	f001 ff37 	bl	8012274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010406:	2300      	movs	r3, #0
 8010408:	e05c      	b.n	80104c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801040a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040c:	2b00      	cmp	r3, #0
 801040e:	d106      	bne.n	801041e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010410:	f107 0314 	add.w	r3, r7, #20
 8010414:	4618      	mov	r0, r3
 8010416:	f001 fa55 	bl	80118c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801041a:	2301      	movs	r3, #1
 801041c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801041e:	f001 ff29 	bl	8012274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010422:	f000 ff87 	bl	8011334 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010426:	f001 fef5 	bl	8012214 <vPortEnterCritical>
 801042a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010430:	b25b      	sxtb	r3, r3
 8010432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010436:	d103      	bne.n	8010440 <xQueueGenericSend+0x16c>
 8010438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043a:	2200      	movs	r2, #0
 801043c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010446:	b25b      	sxtb	r3, r3
 8010448:	f1b3 3fff 	cmp.w	r3, #4294967295
 801044c:	d103      	bne.n	8010456 <xQueueGenericSend+0x182>
 801044e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010450:	2200      	movs	r2, #0
 8010452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010456:	f001 ff0d 	bl	8012274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801045a:	1d3a      	adds	r2, r7, #4
 801045c:	f107 0314 	add.w	r3, r7, #20
 8010460:	4611      	mov	r1, r2
 8010462:	4618      	mov	r0, r3
 8010464:	f001 fa44 	bl	80118f0 <xTaskCheckForTimeOut>
 8010468:	4603      	mov	r3, r0
 801046a:	2b00      	cmp	r3, #0
 801046c:	d124      	bne.n	80104b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801046e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010470:	f000 fcf5 	bl	8010e5e <prvIsQueueFull>
 8010474:	4603      	mov	r3, r0
 8010476:	2b00      	cmp	r3, #0
 8010478:	d018      	beq.n	80104ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801047a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801047c:	3310      	adds	r3, #16
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	4611      	mov	r1, r2
 8010482:	4618      	mov	r0, r3
 8010484:	f001 f936 	bl	80116f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801048a:	f000 fc80 	bl	8010d8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801048e:	f000 ff5f 	bl	8011350 <xTaskResumeAll>
 8010492:	4603      	mov	r3, r0
 8010494:	2b00      	cmp	r3, #0
 8010496:	f47f af7c 	bne.w	8010392 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801049a:	4b0c      	ldr	r3, [pc, #48]	; (80104cc <xQueueGenericSend+0x1f8>)
 801049c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104a0:	601a      	str	r2, [r3, #0]
 80104a2:	f3bf 8f4f 	dsb	sy
 80104a6:	f3bf 8f6f 	isb	sy
 80104aa:	e772      	b.n	8010392 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80104ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104ae:	f000 fc6e 	bl	8010d8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80104b2:	f000 ff4d 	bl	8011350 <xTaskResumeAll>
 80104b6:	e76c      	b.n	8010392 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80104b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104ba:	f000 fc68 	bl	8010d8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104be:	f000 ff47 	bl	8011350 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80104c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3738      	adds	r7, #56	; 0x38
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	e000ed04 	.word	0xe000ed04

080104d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b090      	sub	sp, #64	; 0x40
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	607a      	str	r2, [r7, #4]
 80104dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80104e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d10a      	bne.n	80104fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80104e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ec:	f383 8811 	msr	BASEPRI, r3
 80104f0:	f3bf 8f6f 	isb	sy
 80104f4:	f3bf 8f4f 	dsb	sy
 80104f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80104fa:	bf00      	nop
 80104fc:	e7fe      	b.n	80104fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d103      	bne.n	801050c <xQueueGenericSendFromISR+0x3c>
 8010504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010508:	2b00      	cmp	r3, #0
 801050a:	d101      	bne.n	8010510 <xQueueGenericSendFromISR+0x40>
 801050c:	2301      	movs	r3, #1
 801050e:	e000      	b.n	8010512 <xQueueGenericSendFromISR+0x42>
 8010510:	2300      	movs	r3, #0
 8010512:	2b00      	cmp	r3, #0
 8010514:	d10a      	bne.n	801052c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010516:	f04f 0350 	mov.w	r3, #80	; 0x50
 801051a:	f383 8811 	msr	BASEPRI, r3
 801051e:	f3bf 8f6f 	isb	sy
 8010522:	f3bf 8f4f 	dsb	sy
 8010526:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010528:	bf00      	nop
 801052a:	e7fe      	b.n	801052a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	2b02      	cmp	r3, #2
 8010530:	d103      	bne.n	801053a <xQueueGenericSendFromISR+0x6a>
 8010532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010536:	2b01      	cmp	r3, #1
 8010538:	d101      	bne.n	801053e <xQueueGenericSendFromISR+0x6e>
 801053a:	2301      	movs	r3, #1
 801053c:	e000      	b.n	8010540 <xQueueGenericSendFromISR+0x70>
 801053e:	2300      	movs	r3, #0
 8010540:	2b00      	cmp	r3, #0
 8010542:	d10a      	bne.n	801055a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010548:	f383 8811 	msr	BASEPRI, r3
 801054c:	f3bf 8f6f 	isb	sy
 8010550:	f3bf 8f4f 	dsb	sy
 8010554:	623b      	str	r3, [r7, #32]
}
 8010556:	bf00      	nop
 8010558:	e7fe      	b.n	8010558 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801055a:	f001 ff3d 	bl	80123d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801055e:	f3ef 8211 	mrs	r2, BASEPRI
 8010562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010566:	f383 8811 	msr	BASEPRI, r3
 801056a:	f3bf 8f6f 	isb	sy
 801056e:	f3bf 8f4f 	dsb	sy
 8010572:	61fa      	str	r2, [r7, #28]
 8010574:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010576:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010578:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801057a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801057e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010582:	429a      	cmp	r2, r3
 8010584:	d302      	bcc.n	801058c <xQueueGenericSendFromISR+0xbc>
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	2b02      	cmp	r3, #2
 801058a:	d12f      	bne.n	80105ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801058c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801058e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801059a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801059c:	683a      	ldr	r2, [r7, #0]
 801059e:	68b9      	ldr	r1, [r7, #8]
 80105a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80105a2:	f000 fb64 	bl	8010c6e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80105a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80105aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ae:	d112      	bne.n	80105d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d016      	beq.n	80105e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ba:	3324      	adds	r3, #36	; 0x24
 80105bc:	4618      	mov	r0, r3
 80105be:	f001 f8bd 	bl	801173c <xTaskRemoveFromEventList>
 80105c2:	4603      	mov	r3, r0
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00e      	beq.n	80105e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d00b      	beq.n	80105e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2201      	movs	r2, #1
 80105d2:	601a      	str	r2, [r3, #0]
 80105d4:	e007      	b.n	80105e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80105d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80105da:	3301      	adds	r3, #1
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	b25a      	sxtb	r2, r3
 80105e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80105e6:	2301      	movs	r3, #1
 80105e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80105ea:	e001      	b.n	80105f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80105ec:	2300      	movs	r3, #0
 80105ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80105fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80105fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3740      	adds	r7, #64	; 0x40
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}

08010606 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010606:	b580      	push	{r7, lr}
 8010608:	b08e      	sub	sp, #56	; 0x38
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
 801060e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010616:	2b00      	cmp	r3, #0
 8010618:	d10a      	bne.n	8010630 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801061a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801061e:	f383 8811 	msr	BASEPRI, r3
 8010622:	f3bf 8f6f 	isb	sy
 8010626:	f3bf 8f4f 	dsb	sy
 801062a:	623b      	str	r3, [r7, #32]
}
 801062c:	bf00      	nop
 801062e:	e7fe      	b.n	801062e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010634:	2b00      	cmp	r3, #0
 8010636:	d00a      	beq.n	801064e <xQueueGiveFromISR+0x48>
	__asm volatile
 8010638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801063c:	f383 8811 	msr	BASEPRI, r3
 8010640:	f3bf 8f6f 	isb	sy
 8010644:	f3bf 8f4f 	dsb	sy
 8010648:	61fb      	str	r3, [r7, #28]
}
 801064a:	bf00      	nop
 801064c:	e7fe      	b.n	801064c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801064e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d103      	bne.n	801065e <xQueueGiveFromISR+0x58>
 8010656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010658:	689b      	ldr	r3, [r3, #8]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d101      	bne.n	8010662 <xQueueGiveFromISR+0x5c>
 801065e:	2301      	movs	r3, #1
 8010660:	e000      	b.n	8010664 <xQueueGiveFromISR+0x5e>
 8010662:	2300      	movs	r3, #0
 8010664:	2b00      	cmp	r3, #0
 8010666:	d10a      	bne.n	801067e <xQueueGiveFromISR+0x78>
	__asm volatile
 8010668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066c:	f383 8811 	msr	BASEPRI, r3
 8010670:	f3bf 8f6f 	isb	sy
 8010674:	f3bf 8f4f 	dsb	sy
 8010678:	61bb      	str	r3, [r7, #24]
}
 801067a:	bf00      	nop
 801067c:	e7fe      	b.n	801067c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801067e:	f001 feab 	bl	80123d8 <vPortValidateInterruptPriority>
	__asm volatile
 8010682:	f3ef 8211 	mrs	r2, BASEPRI
 8010686:	f04f 0350 	mov.w	r3, #80	; 0x50
 801068a:	f383 8811 	msr	BASEPRI, r3
 801068e:	f3bf 8f6f 	isb	sy
 8010692:	f3bf 8f4f 	dsb	sy
 8010696:	617a      	str	r2, [r7, #20]
 8010698:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801069a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801069c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801069e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80106a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d22b      	bcs.n	8010706 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80106ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80106b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ba:	1c5a      	adds	r2, r3, #1
 80106bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106be:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80106c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80106c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106c8:	d112      	bne.n	80106f0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80106ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d016      	beq.n	8010700 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80106d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d4:	3324      	adds	r3, #36	; 0x24
 80106d6:	4618      	mov	r0, r3
 80106d8:	f001 f830 	bl	801173c <xTaskRemoveFromEventList>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d00e      	beq.n	8010700 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d00b      	beq.n	8010700 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	2201      	movs	r2, #1
 80106ec:	601a      	str	r2, [r3, #0]
 80106ee:	e007      	b.n	8010700 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80106f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106f4:	3301      	adds	r3, #1
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	b25a      	sxtb	r2, r3
 80106fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010700:	2301      	movs	r3, #1
 8010702:	637b      	str	r3, [r7, #52]	; 0x34
 8010704:	e001      	b.n	801070a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010706:	2300      	movs	r3, #0
 8010708:	637b      	str	r3, [r7, #52]	; 0x34
 801070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	f383 8811 	msr	BASEPRI, r3
}
 8010714:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010718:	4618      	mov	r0, r3
 801071a:	3738      	adds	r7, #56	; 0x38
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}

08010720 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b08c      	sub	sp, #48	; 0x30
 8010724:	af00      	add	r7, sp, #0
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801072c:	2300      	movs	r3, #0
 801072e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010736:	2b00      	cmp	r3, #0
 8010738:	d10a      	bne.n	8010750 <xQueueReceive+0x30>
	__asm volatile
 801073a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073e:	f383 8811 	msr	BASEPRI, r3
 8010742:	f3bf 8f6f 	isb	sy
 8010746:	f3bf 8f4f 	dsb	sy
 801074a:	623b      	str	r3, [r7, #32]
}
 801074c:	bf00      	nop
 801074e:	e7fe      	b.n	801074e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d103      	bne.n	801075e <xQueueReceive+0x3e>
 8010756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801075a:	2b00      	cmp	r3, #0
 801075c:	d101      	bne.n	8010762 <xQueueReceive+0x42>
 801075e:	2301      	movs	r3, #1
 8010760:	e000      	b.n	8010764 <xQueueReceive+0x44>
 8010762:	2300      	movs	r3, #0
 8010764:	2b00      	cmp	r3, #0
 8010766:	d10a      	bne.n	801077e <xQueueReceive+0x5e>
	__asm volatile
 8010768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801076c:	f383 8811 	msr	BASEPRI, r3
 8010770:	f3bf 8f6f 	isb	sy
 8010774:	f3bf 8f4f 	dsb	sy
 8010778:	61fb      	str	r3, [r7, #28]
}
 801077a:	bf00      	nop
 801077c:	e7fe      	b.n	801077c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801077e:	f001 f9fb 	bl	8011b78 <xTaskGetSchedulerState>
 8010782:	4603      	mov	r3, r0
 8010784:	2b00      	cmp	r3, #0
 8010786:	d102      	bne.n	801078e <xQueueReceive+0x6e>
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d101      	bne.n	8010792 <xQueueReceive+0x72>
 801078e:	2301      	movs	r3, #1
 8010790:	e000      	b.n	8010794 <xQueueReceive+0x74>
 8010792:	2300      	movs	r3, #0
 8010794:	2b00      	cmp	r3, #0
 8010796:	d10a      	bne.n	80107ae <xQueueReceive+0x8e>
	__asm volatile
 8010798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801079c:	f383 8811 	msr	BASEPRI, r3
 80107a0:	f3bf 8f6f 	isb	sy
 80107a4:	f3bf 8f4f 	dsb	sy
 80107a8:	61bb      	str	r3, [r7, #24]
}
 80107aa:	bf00      	nop
 80107ac:	e7fe      	b.n	80107ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80107ae:	f001 fd31 	bl	8012214 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d01f      	beq.n	80107fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80107be:	68b9      	ldr	r1, [r7, #8]
 80107c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107c2:	f000 fabe 	bl	8010d42 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80107c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c8:	1e5a      	subs	r2, r3, #1
 80107ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d0:	691b      	ldr	r3, [r3, #16]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d00f      	beq.n	80107f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d8:	3310      	adds	r3, #16
 80107da:	4618      	mov	r0, r3
 80107dc:	f000 ffae 	bl	801173c <xTaskRemoveFromEventList>
 80107e0:	4603      	mov	r3, r0
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d007      	beq.n	80107f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80107e6:	4b3d      	ldr	r3, [pc, #244]	; (80108dc <xQueueReceive+0x1bc>)
 80107e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107ec:	601a      	str	r2, [r3, #0]
 80107ee:	f3bf 8f4f 	dsb	sy
 80107f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80107f6:	f001 fd3d 	bl	8012274 <vPortExitCritical>
				return pdPASS;
 80107fa:	2301      	movs	r3, #1
 80107fc:	e069      	b.n	80108d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d103      	bne.n	801080c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010804:	f001 fd36 	bl	8012274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010808:	2300      	movs	r3, #0
 801080a:	e062      	b.n	80108d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801080c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801080e:	2b00      	cmp	r3, #0
 8010810:	d106      	bne.n	8010820 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010812:	f107 0310 	add.w	r3, r7, #16
 8010816:	4618      	mov	r0, r3
 8010818:	f001 f854 	bl	80118c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801081c:	2301      	movs	r3, #1
 801081e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010820:	f001 fd28 	bl	8012274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010824:	f000 fd86 	bl	8011334 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010828:	f001 fcf4 	bl	8012214 <vPortEnterCritical>
 801082c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801082e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010832:	b25b      	sxtb	r3, r3
 8010834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010838:	d103      	bne.n	8010842 <xQueueReceive+0x122>
 801083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083c:	2200      	movs	r2, #0
 801083e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010848:	b25b      	sxtb	r3, r3
 801084a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801084e:	d103      	bne.n	8010858 <xQueueReceive+0x138>
 8010850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010852:	2200      	movs	r2, #0
 8010854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010858:	f001 fd0c 	bl	8012274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801085c:	1d3a      	adds	r2, r7, #4
 801085e:	f107 0310 	add.w	r3, r7, #16
 8010862:	4611      	mov	r1, r2
 8010864:	4618      	mov	r0, r3
 8010866:	f001 f843 	bl	80118f0 <xTaskCheckForTimeOut>
 801086a:	4603      	mov	r3, r0
 801086c:	2b00      	cmp	r3, #0
 801086e:	d123      	bne.n	80108b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010872:	f000 fade 	bl	8010e32 <prvIsQueueEmpty>
 8010876:	4603      	mov	r3, r0
 8010878:	2b00      	cmp	r3, #0
 801087a:	d017      	beq.n	80108ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087e:	3324      	adds	r3, #36	; 0x24
 8010880:	687a      	ldr	r2, [r7, #4]
 8010882:	4611      	mov	r1, r2
 8010884:	4618      	mov	r0, r3
 8010886:	f000 ff35 	bl	80116f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801088a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801088c:	f000 fa7f 	bl	8010d8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010890:	f000 fd5e 	bl	8011350 <xTaskResumeAll>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d189      	bne.n	80107ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801089a:	4b10      	ldr	r3, [pc, #64]	; (80108dc <xQueueReceive+0x1bc>)
 801089c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108a0:	601a      	str	r2, [r3, #0]
 80108a2:	f3bf 8f4f 	dsb	sy
 80108a6:	f3bf 8f6f 	isb	sy
 80108aa:	e780      	b.n	80107ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80108ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108ae:	f000 fa6e 	bl	8010d8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108b2:	f000 fd4d 	bl	8011350 <xTaskResumeAll>
 80108b6:	e77a      	b.n	80107ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80108b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108ba:	f000 fa68 	bl	8010d8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108be:	f000 fd47 	bl	8011350 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108c4:	f000 fab5 	bl	8010e32 <prvIsQueueEmpty>
 80108c8:	4603      	mov	r3, r0
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	f43f af6f 	beq.w	80107ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80108d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3730      	adds	r7, #48	; 0x30
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	bf00      	nop
 80108dc:	e000ed04 	.word	0xe000ed04

080108e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b08e      	sub	sp, #56	; 0x38
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80108ea:	2300      	movs	r3, #0
 80108ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80108f2:	2300      	movs	r3, #0
 80108f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80108f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d10a      	bne.n	8010912 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80108fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010900:	f383 8811 	msr	BASEPRI, r3
 8010904:	f3bf 8f6f 	isb	sy
 8010908:	f3bf 8f4f 	dsb	sy
 801090c:	623b      	str	r3, [r7, #32]
}
 801090e:	bf00      	nop
 8010910:	e7fe      	b.n	8010910 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010916:	2b00      	cmp	r3, #0
 8010918:	d00a      	beq.n	8010930 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801091e:	f383 8811 	msr	BASEPRI, r3
 8010922:	f3bf 8f6f 	isb	sy
 8010926:	f3bf 8f4f 	dsb	sy
 801092a:	61fb      	str	r3, [r7, #28]
}
 801092c:	bf00      	nop
 801092e:	e7fe      	b.n	801092e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010930:	f001 f922 	bl	8011b78 <xTaskGetSchedulerState>
 8010934:	4603      	mov	r3, r0
 8010936:	2b00      	cmp	r3, #0
 8010938:	d102      	bne.n	8010940 <xQueueSemaphoreTake+0x60>
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d101      	bne.n	8010944 <xQueueSemaphoreTake+0x64>
 8010940:	2301      	movs	r3, #1
 8010942:	e000      	b.n	8010946 <xQueueSemaphoreTake+0x66>
 8010944:	2300      	movs	r3, #0
 8010946:	2b00      	cmp	r3, #0
 8010948:	d10a      	bne.n	8010960 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801094a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801094e:	f383 8811 	msr	BASEPRI, r3
 8010952:	f3bf 8f6f 	isb	sy
 8010956:	f3bf 8f4f 	dsb	sy
 801095a:	61bb      	str	r3, [r7, #24]
}
 801095c:	bf00      	nop
 801095e:	e7fe      	b.n	801095e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010960:	f001 fc58 	bl	8012214 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010968:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801096a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096c:	2b00      	cmp	r3, #0
 801096e:	d024      	beq.n	80109ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010972:	1e5a      	subs	r2, r3, #1
 8010974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010976:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d104      	bne.n	801098a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010980:	f001 faa2 	bl	8011ec8 <pvTaskIncrementMutexHeldCount>
 8010984:	4602      	mov	r2, r0
 8010986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010988:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801098a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801098c:	691b      	ldr	r3, [r3, #16]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d00f      	beq.n	80109b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010994:	3310      	adds	r3, #16
 8010996:	4618      	mov	r0, r3
 8010998:	f000 fed0 	bl	801173c <xTaskRemoveFromEventList>
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d007      	beq.n	80109b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80109a2:	4b54      	ldr	r3, [pc, #336]	; (8010af4 <xQueueSemaphoreTake+0x214>)
 80109a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109a8:	601a      	str	r2, [r3, #0]
 80109aa:	f3bf 8f4f 	dsb	sy
 80109ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80109b2:	f001 fc5f 	bl	8012274 <vPortExitCritical>
				return pdPASS;
 80109b6:	2301      	movs	r3, #1
 80109b8:	e097      	b.n	8010aea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d111      	bne.n	80109e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80109c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d00a      	beq.n	80109dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80109c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ca:	f383 8811 	msr	BASEPRI, r3
 80109ce:	f3bf 8f6f 	isb	sy
 80109d2:	f3bf 8f4f 	dsb	sy
 80109d6:	617b      	str	r3, [r7, #20]
}
 80109d8:	bf00      	nop
 80109da:	e7fe      	b.n	80109da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80109dc:	f001 fc4a 	bl	8012274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80109e0:	2300      	movs	r3, #0
 80109e2:	e082      	b.n	8010aea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80109e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d106      	bne.n	80109f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80109ea:	f107 030c 	add.w	r3, r7, #12
 80109ee:	4618      	mov	r0, r3
 80109f0:	f000 ff68 	bl	80118c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80109f4:	2301      	movs	r3, #1
 80109f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80109f8:	f001 fc3c 	bl	8012274 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80109fc:	f000 fc9a 	bl	8011334 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a00:	f001 fc08 	bl	8012214 <vPortEnterCritical>
 8010a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a0a:	b25b      	sxtb	r3, r3
 8010a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a10:	d103      	bne.n	8010a1a <xQueueSemaphoreTake+0x13a>
 8010a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a14:	2200      	movs	r2, #0
 8010a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a20:	b25b      	sxtb	r3, r3
 8010a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a26:	d103      	bne.n	8010a30 <xQueueSemaphoreTake+0x150>
 8010a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a30:	f001 fc20 	bl	8012274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a34:	463a      	mov	r2, r7
 8010a36:	f107 030c 	add.w	r3, r7, #12
 8010a3a:	4611      	mov	r1, r2
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f000 ff57 	bl	80118f0 <xTaskCheckForTimeOut>
 8010a42:	4603      	mov	r3, r0
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d132      	bne.n	8010aae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a4a:	f000 f9f2 	bl	8010e32 <prvIsQueueEmpty>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d026      	beq.n	8010aa2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d109      	bne.n	8010a70 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010a5c:	f001 fbda 	bl	8012214 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a62:	689b      	ldr	r3, [r3, #8]
 8010a64:	4618      	mov	r0, r3
 8010a66:	f001 f8a5 	bl	8011bb4 <xTaskPriorityInherit>
 8010a6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010a6c:	f001 fc02 	bl	8012274 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a72:	3324      	adds	r3, #36	; 0x24
 8010a74:	683a      	ldr	r2, [r7, #0]
 8010a76:	4611      	mov	r1, r2
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f000 fe3b 	bl	80116f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010a7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a80:	f000 f985 	bl	8010d8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010a84:	f000 fc64 	bl	8011350 <xTaskResumeAll>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	f47f af68 	bne.w	8010960 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010a90:	4b18      	ldr	r3, [pc, #96]	; (8010af4 <xQueueSemaphoreTake+0x214>)
 8010a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a96:	601a      	str	r2, [r3, #0]
 8010a98:	f3bf 8f4f 	dsb	sy
 8010a9c:	f3bf 8f6f 	isb	sy
 8010aa0:	e75e      	b.n	8010960 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010aa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010aa4:	f000 f973 	bl	8010d8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010aa8:	f000 fc52 	bl	8011350 <xTaskResumeAll>
 8010aac:	e758      	b.n	8010960 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010aae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ab0:	f000 f96d 	bl	8010d8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ab4:	f000 fc4c 	bl	8011350 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010aba:	f000 f9ba 	bl	8010e32 <prvIsQueueEmpty>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	f43f af4d 	beq.w	8010960 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d00d      	beq.n	8010ae8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010acc:	f001 fba2 	bl	8012214 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010ad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ad2:	f000 f8b4 	bl	8010c3e <prvGetDisinheritPriorityAfterTimeout>
 8010ad6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ada:	689b      	ldr	r3, [r3, #8]
 8010adc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f001 f964 	bl	8011dac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010ae4:	f001 fbc6 	bl	8012274 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010ae8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3738      	adds	r7, #56	; 0x38
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	e000ed04 	.word	0xe000ed04

08010af8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b08e      	sub	sp, #56	; 0x38
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d10a      	bne.n	8010b24 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b12:	f383 8811 	msr	BASEPRI, r3
 8010b16:	f3bf 8f6f 	isb	sy
 8010b1a:	f3bf 8f4f 	dsb	sy
 8010b1e:	623b      	str	r3, [r7, #32]
}
 8010b20:	bf00      	nop
 8010b22:	e7fe      	b.n	8010b22 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d103      	bne.n	8010b32 <xQueueReceiveFromISR+0x3a>
 8010b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d101      	bne.n	8010b36 <xQueueReceiveFromISR+0x3e>
 8010b32:	2301      	movs	r3, #1
 8010b34:	e000      	b.n	8010b38 <xQueueReceiveFromISR+0x40>
 8010b36:	2300      	movs	r3, #0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d10a      	bne.n	8010b52 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b40:	f383 8811 	msr	BASEPRI, r3
 8010b44:	f3bf 8f6f 	isb	sy
 8010b48:	f3bf 8f4f 	dsb	sy
 8010b4c:	61fb      	str	r3, [r7, #28]
}
 8010b4e:	bf00      	nop
 8010b50:	e7fe      	b.n	8010b50 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b52:	f001 fc41 	bl	80123d8 <vPortValidateInterruptPriority>
	__asm volatile
 8010b56:	f3ef 8211 	mrs	r2, BASEPRI
 8010b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b5e:	f383 8811 	msr	BASEPRI, r3
 8010b62:	f3bf 8f6f 	isb	sy
 8010b66:	f3bf 8f4f 	dsb	sy
 8010b6a:	61ba      	str	r2, [r7, #24]
 8010b6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010b6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d02f      	beq.n	8010bde <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b88:	68b9      	ldr	r1, [r7, #8]
 8010b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b8c:	f000 f8d9 	bl	8010d42 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b92:	1e5a      	subs	r2, r3, #1
 8010b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010b98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ba0:	d112      	bne.n	8010bc8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba4:	691b      	ldr	r3, [r3, #16]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d016      	beq.n	8010bd8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bac:	3310      	adds	r3, #16
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f000 fdc4 	bl	801173c <xTaskRemoveFromEventList>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d00e      	beq.n	8010bd8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d00b      	beq.n	8010bd8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2201      	movs	r2, #1
 8010bc4:	601a      	str	r2, [r3, #0]
 8010bc6:	e007      	b.n	8010bd8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bcc:	3301      	adds	r3, #1
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	b25a      	sxtb	r2, r3
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	637b      	str	r3, [r7, #52]	; 0x34
 8010bdc:	e001      	b.n	8010be2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010bde:	2300      	movs	r3, #0
 8010be0:	637b      	str	r3, [r7, #52]	; 0x34
 8010be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010be4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	f383 8811 	msr	BASEPRI, r3
}
 8010bec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3738      	adds	r7, #56	; 0x38
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}

08010bf8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b084      	sub	sp, #16
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d10a      	bne.n	8010c20 <vQueueDelete+0x28>
	__asm volatile
 8010c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c0e:	f383 8811 	msr	BASEPRI, r3
 8010c12:	f3bf 8f6f 	isb	sy
 8010c16:	f3bf 8f4f 	dsb	sy
 8010c1a:	60bb      	str	r3, [r7, #8]
}
 8010c1c:	bf00      	nop
 8010c1e:	e7fe      	b.n	8010c1e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f000 f935 	bl	8010e90 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d102      	bne.n	8010c36 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010c30:	68f8      	ldr	r0, [r7, #12]
 8010c32:	f001 fcdd 	bl	80125f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010c36:	bf00      	nop
 8010c38:	3710      	adds	r7, #16
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}

08010c3e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010c3e:	b480      	push	{r7}
 8010c40:	b085      	sub	sp, #20
 8010c42:	af00      	add	r7, sp, #0
 8010c44:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d006      	beq.n	8010c5c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	f1c3 0307 	rsb	r3, r3, #7
 8010c58:	60fb      	str	r3, [r7, #12]
 8010c5a:	e001      	b.n	8010c60 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010c60:	68fb      	ldr	r3, [r7, #12]
	}
 8010c62:	4618      	mov	r0, r3
 8010c64:	3714      	adds	r7, #20
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr

08010c6e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b086      	sub	sp, #24
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	60f8      	str	r0, [r7, #12]
 8010c76:	60b9      	str	r1, [r7, #8]
 8010c78:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c82:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d10d      	bne.n	8010ca8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d14d      	bne.n	8010d30 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	689b      	ldr	r3, [r3, #8]
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f001 f801 	bl	8011ca0 <xTaskPriorityDisinherit>
 8010c9e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	609a      	str	r2, [r3, #8]
 8010ca6:	e043      	b.n	8010d30 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d119      	bne.n	8010ce2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	6858      	ldr	r0, [r3, #4]
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	68b9      	ldr	r1, [r7, #8]
 8010cba:	f00e f917 	bl	801eeec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	685a      	ldr	r2, [r3, #4]
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cc6:	441a      	add	r2, r3
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	685a      	ldr	r2, [r3, #4]
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	689b      	ldr	r3, [r3, #8]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d32b      	bcc.n	8010d30 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	681a      	ldr	r2, [r3, #0]
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	605a      	str	r2, [r3, #4]
 8010ce0:	e026      	b.n	8010d30 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	68d8      	ldr	r0, [r3, #12]
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cea:	461a      	mov	r2, r3
 8010cec:	68b9      	ldr	r1, [r7, #8]
 8010cee:	f00e f8fd 	bl	801eeec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	68da      	ldr	r2, [r3, #12]
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cfa:	425b      	negs	r3, r3
 8010cfc:	441a      	add	r2, r3
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	68da      	ldr	r2, [r3, #12]
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d207      	bcs.n	8010d1e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	689a      	ldr	r2, [r3, #8]
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d16:	425b      	negs	r3, r3
 8010d18:	441a      	add	r2, r3
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2b02      	cmp	r3, #2
 8010d22:	d105      	bne.n	8010d30 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d24:	693b      	ldr	r3, [r7, #16]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d002      	beq.n	8010d30 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	3b01      	subs	r3, #1
 8010d2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	1c5a      	adds	r2, r3, #1
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010d38:	697b      	ldr	r3, [r7, #20]
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3718      	adds	r7, #24
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}

08010d42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010d42:	b580      	push	{r7, lr}
 8010d44:	b082      	sub	sp, #8
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
 8010d4a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d018      	beq.n	8010d86 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	68da      	ldr	r2, [r3, #12]
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d5c:	441a      	add	r2, r3
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	68da      	ldr	r2, [r3, #12]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	689b      	ldr	r3, [r3, #8]
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d303      	bcc.n	8010d76 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	68d9      	ldr	r1, [r3, #12]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d7e:	461a      	mov	r2, r3
 8010d80:	6838      	ldr	r0, [r7, #0]
 8010d82:	f00e f8b3 	bl	801eeec <memcpy>
	}
}
 8010d86:	bf00      	nop
 8010d88:	3708      	adds	r7, #8
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b084      	sub	sp, #16
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010d96:	f001 fa3d 	bl	8012214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010da0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010da2:	e011      	b.n	8010dc8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d012      	beq.n	8010dd2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	3324      	adds	r3, #36	; 0x24
 8010db0:	4618      	mov	r0, r3
 8010db2:	f000 fcc3 	bl	801173c <xTaskRemoveFromEventList>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d001      	beq.n	8010dc0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010dbc:	f000 fdfa 	bl	80119b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010dc0:	7bfb      	ldrb	r3, [r7, #15]
 8010dc2:	3b01      	subs	r3, #1
 8010dc4:	b2db      	uxtb	r3, r3
 8010dc6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	dce9      	bgt.n	8010da4 <prvUnlockQueue+0x16>
 8010dd0:	e000      	b.n	8010dd4 <prvUnlockQueue+0x46>
					break;
 8010dd2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	22ff      	movs	r2, #255	; 0xff
 8010dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010ddc:	f001 fa4a 	bl	8012274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010de0:	f001 fa18 	bl	8012214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010dea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010dec:	e011      	b.n	8010e12 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	691b      	ldr	r3, [r3, #16]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d012      	beq.n	8010e1c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	3310      	adds	r3, #16
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f000 fc9e 	bl	801173c <xTaskRemoveFromEventList>
 8010e00:	4603      	mov	r3, r0
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d001      	beq.n	8010e0a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010e06:	f000 fdd5 	bl	80119b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010e0a:	7bbb      	ldrb	r3, [r7, #14]
 8010e0c:	3b01      	subs	r3, #1
 8010e0e:	b2db      	uxtb	r3, r3
 8010e10:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	dce9      	bgt.n	8010dee <prvUnlockQueue+0x60>
 8010e1a:	e000      	b.n	8010e1e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010e1c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	22ff      	movs	r2, #255	; 0xff
 8010e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010e26:	f001 fa25 	bl	8012274 <vPortExitCritical>
}
 8010e2a:	bf00      	nop
 8010e2c:	3710      	adds	r7, #16
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}

08010e32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010e32:	b580      	push	{r7, lr}
 8010e34:	b084      	sub	sp, #16
 8010e36:	af00      	add	r7, sp, #0
 8010e38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010e3a:	f001 f9eb 	bl	8012214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d102      	bne.n	8010e4c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010e46:	2301      	movs	r3, #1
 8010e48:	60fb      	str	r3, [r7, #12]
 8010e4a:	e001      	b.n	8010e50 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010e50:	f001 fa10 	bl	8012274 <vPortExitCritical>

	return xReturn;
 8010e54:	68fb      	ldr	r3, [r7, #12]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3710      	adds	r7, #16
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}

08010e5e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010e5e:	b580      	push	{r7, lr}
 8010e60:	b084      	sub	sp, #16
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010e66:	f001 f9d5 	bl	8012214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d102      	bne.n	8010e7c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010e76:	2301      	movs	r3, #1
 8010e78:	60fb      	str	r3, [r7, #12]
 8010e7a:	e001      	b.n	8010e80 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010e80:	f001 f9f8 	bl	8012274 <vPortExitCritical>

	return xReturn;
 8010e84:	68fb      	ldr	r3, [r7, #12]
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3710      	adds	r7, #16
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}
	...

08010e90 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010e90:	b480      	push	{r7}
 8010e92:	b085      	sub	sp, #20
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010e98:	2300      	movs	r3, #0
 8010e9a:	60fb      	str	r3, [r7, #12]
 8010e9c:	e016      	b.n	8010ecc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010e9e:	4a10      	ldr	r2, [pc, #64]	; (8010ee0 <vQueueUnregisterQueue+0x50>)
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	00db      	lsls	r3, r3, #3
 8010ea4:	4413      	add	r3, r2
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	687a      	ldr	r2, [r7, #4]
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d10b      	bne.n	8010ec6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010eae:	4a0c      	ldr	r2, [pc, #48]	; (8010ee0 <vQueueUnregisterQueue+0x50>)
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2100      	movs	r1, #0
 8010eb4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010eb8:	4a09      	ldr	r2, [pc, #36]	; (8010ee0 <vQueueUnregisterQueue+0x50>)
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	00db      	lsls	r3, r3, #3
 8010ebe:	4413      	add	r3, r2
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	605a      	str	r2, [r3, #4]
				break;
 8010ec4:	e006      	b.n	8010ed4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	3301      	adds	r3, #1
 8010eca:	60fb      	str	r3, [r7, #12]
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	2b07      	cmp	r3, #7
 8010ed0:	d9e5      	bls.n	8010e9e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010ed2:	bf00      	nop
 8010ed4:	bf00      	nop
 8010ed6:	3714      	adds	r7, #20
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr
 8010ee0:	2001095c 	.word	0x2001095c

08010ee4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b08e      	sub	sp, #56	; 0x38
 8010ee8:	af04      	add	r7, sp, #16
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	607a      	str	r2, [r7, #4]
 8010ef0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d10a      	bne.n	8010f0e <xTaskCreateStatic+0x2a>
	__asm volatile
 8010ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010efc:	f383 8811 	msr	BASEPRI, r3
 8010f00:	f3bf 8f6f 	isb	sy
 8010f04:	f3bf 8f4f 	dsb	sy
 8010f08:	623b      	str	r3, [r7, #32]
}
 8010f0a:	bf00      	nop
 8010f0c:	e7fe      	b.n	8010f0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d10a      	bne.n	8010f2a <xTaskCreateStatic+0x46>
	__asm volatile
 8010f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f18:	f383 8811 	msr	BASEPRI, r3
 8010f1c:	f3bf 8f6f 	isb	sy
 8010f20:	f3bf 8f4f 	dsb	sy
 8010f24:	61fb      	str	r3, [r7, #28]
}
 8010f26:	bf00      	nop
 8010f28:	e7fe      	b.n	8010f28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010f2a:	2354      	movs	r3, #84	; 0x54
 8010f2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010f2e:	693b      	ldr	r3, [r7, #16]
 8010f30:	2b54      	cmp	r3, #84	; 0x54
 8010f32:	d00a      	beq.n	8010f4a <xTaskCreateStatic+0x66>
	__asm volatile
 8010f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f38:	f383 8811 	msr	BASEPRI, r3
 8010f3c:	f3bf 8f6f 	isb	sy
 8010f40:	f3bf 8f4f 	dsb	sy
 8010f44:	61bb      	str	r3, [r7, #24]
}
 8010f46:	bf00      	nop
 8010f48:	e7fe      	b.n	8010f48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010f4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d01e      	beq.n	8010f90 <xTaskCreateStatic+0xac>
 8010f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d01b      	beq.n	8010f90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f64:	2202      	movs	r2, #2
 8010f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	9303      	str	r3, [sp, #12]
 8010f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f70:	9302      	str	r3, [sp, #8]
 8010f72:	f107 0314 	add.w	r3, r7, #20
 8010f76:	9301      	str	r3, [sp, #4]
 8010f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f7a:	9300      	str	r3, [sp, #0]
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	687a      	ldr	r2, [r7, #4]
 8010f80:	68b9      	ldr	r1, [r7, #8]
 8010f82:	68f8      	ldr	r0, [r7, #12]
 8010f84:	f000 f850 	bl	8011028 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010f88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f8a:	f000 f8d5 	bl	8011138 <prvAddNewTaskToReadyList>
 8010f8e:	e001      	b.n	8010f94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010f90:	2300      	movs	r3, #0
 8010f92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010f94:	697b      	ldr	r3, [r7, #20]
	}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3728      	adds	r7, #40	; 0x28
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}

08010f9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b08c      	sub	sp, #48	; 0x30
 8010fa2:	af04      	add	r7, sp, #16
 8010fa4:	60f8      	str	r0, [r7, #12]
 8010fa6:	60b9      	str	r1, [r7, #8]
 8010fa8:	603b      	str	r3, [r7, #0]
 8010faa:	4613      	mov	r3, r2
 8010fac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010fae:	88fb      	ldrh	r3, [r7, #6]
 8010fb0:	009b      	lsls	r3, r3, #2
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f001 fa50 	bl	8012458 <pvPortMalloc>
 8010fb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d00e      	beq.n	8010fde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010fc0:	2054      	movs	r0, #84	; 0x54
 8010fc2:	f001 fa49 	bl	8012458 <pvPortMalloc>
 8010fc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d003      	beq.n	8010fd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	697a      	ldr	r2, [r7, #20]
 8010fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8010fd4:	e005      	b.n	8010fe2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010fd6:	6978      	ldr	r0, [r7, #20]
 8010fd8:	f001 fb0a 	bl	80125f0 <vPortFree>
 8010fdc:	e001      	b.n	8010fe2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010fe2:	69fb      	ldr	r3, [r7, #28]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d017      	beq.n	8011018 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	2200      	movs	r2, #0
 8010fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010ff0:	88fa      	ldrh	r2, [r7, #6]
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	9303      	str	r3, [sp, #12]
 8010ff6:	69fb      	ldr	r3, [r7, #28]
 8010ff8:	9302      	str	r3, [sp, #8]
 8010ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffc:	9301      	str	r3, [sp, #4]
 8010ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011000:	9300      	str	r3, [sp, #0]
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	68b9      	ldr	r1, [r7, #8]
 8011006:	68f8      	ldr	r0, [r7, #12]
 8011008:	f000 f80e 	bl	8011028 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801100c:	69f8      	ldr	r0, [r7, #28]
 801100e:	f000 f893 	bl	8011138 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011012:	2301      	movs	r3, #1
 8011014:	61bb      	str	r3, [r7, #24]
 8011016:	e002      	b.n	801101e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011018:	f04f 33ff 	mov.w	r3, #4294967295
 801101c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801101e:	69bb      	ldr	r3, [r7, #24]
	}
 8011020:	4618      	mov	r0, r3
 8011022:	3720      	adds	r7, #32
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b088      	sub	sp, #32
 801102c:	af00      	add	r7, sp, #0
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	607a      	str	r2, [r7, #4]
 8011034:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011040:	3b01      	subs	r3, #1
 8011042:	009b      	lsls	r3, r3, #2
 8011044:	4413      	add	r3, r2
 8011046:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011048:	69bb      	ldr	r3, [r7, #24]
 801104a:	f023 0307 	bic.w	r3, r3, #7
 801104e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011050:	69bb      	ldr	r3, [r7, #24]
 8011052:	f003 0307 	and.w	r3, r3, #7
 8011056:	2b00      	cmp	r3, #0
 8011058:	d00a      	beq.n	8011070 <prvInitialiseNewTask+0x48>
	__asm volatile
 801105a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801105e:	f383 8811 	msr	BASEPRI, r3
 8011062:	f3bf 8f6f 	isb	sy
 8011066:	f3bf 8f4f 	dsb	sy
 801106a:	617b      	str	r3, [r7, #20]
}
 801106c:	bf00      	nop
 801106e:	e7fe      	b.n	801106e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d01f      	beq.n	80110b6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011076:	2300      	movs	r3, #0
 8011078:	61fb      	str	r3, [r7, #28]
 801107a:	e012      	b.n	80110a2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801107c:	68ba      	ldr	r2, [r7, #8]
 801107e:	69fb      	ldr	r3, [r7, #28]
 8011080:	4413      	add	r3, r2
 8011082:	7819      	ldrb	r1, [r3, #0]
 8011084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011086:	69fb      	ldr	r3, [r7, #28]
 8011088:	4413      	add	r3, r2
 801108a:	3334      	adds	r3, #52	; 0x34
 801108c:	460a      	mov	r2, r1
 801108e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011090:	68ba      	ldr	r2, [r7, #8]
 8011092:	69fb      	ldr	r3, [r7, #28]
 8011094:	4413      	add	r3, r2
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d006      	beq.n	80110aa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801109c:	69fb      	ldr	r3, [r7, #28]
 801109e:	3301      	adds	r3, #1
 80110a0:	61fb      	str	r3, [r7, #28]
 80110a2:	69fb      	ldr	r3, [r7, #28]
 80110a4:	2b0f      	cmp	r3, #15
 80110a6:	d9e9      	bls.n	801107c <prvInitialiseNewTask+0x54>
 80110a8:	e000      	b.n	80110ac <prvInitialiseNewTask+0x84>
			{
				break;
 80110aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80110ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ae:	2200      	movs	r2, #0
 80110b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80110b4:	e003      	b.n	80110be <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80110b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b8:	2200      	movs	r2, #0
 80110ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80110be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c0:	2b06      	cmp	r3, #6
 80110c2:	d901      	bls.n	80110c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80110c4:	2306      	movs	r3, #6
 80110c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80110c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80110ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80110d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d6:	2200      	movs	r2, #0
 80110d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80110da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110dc:	3304      	adds	r3, #4
 80110de:	4618      	mov	r0, r3
 80110e0:	f7fe fedd 	bl	800fe9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80110e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e6:	3318      	adds	r3, #24
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7fe fed8 	bl	800fe9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80110ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f6:	f1c3 0207 	rsb	r2, r3, #7
 80110fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80110fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011102:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011106:	2200      	movs	r2, #0
 8011108:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801110a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801110c:	2200      	movs	r2, #0
 801110e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011112:	683a      	ldr	r2, [r7, #0]
 8011114:	68f9      	ldr	r1, [r7, #12]
 8011116:	69b8      	ldr	r0, [r7, #24]
 8011118:	f000 ff50 	bl	8011fbc <pxPortInitialiseStack>
 801111c:	4602      	mov	r2, r0
 801111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011120:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011124:	2b00      	cmp	r3, #0
 8011126:	d002      	beq.n	801112e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801112a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801112c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801112e:	bf00      	nop
 8011130:	3720      	adds	r7, #32
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
	...

08011138 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011140:	f001 f868 	bl	8012214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011144:	4b2a      	ldr	r3, [pc, #168]	; (80111f0 <prvAddNewTaskToReadyList+0xb8>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	3301      	adds	r3, #1
 801114a:	4a29      	ldr	r2, [pc, #164]	; (80111f0 <prvAddNewTaskToReadyList+0xb8>)
 801114c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801114e:	4b29      	ldr	r3, [pc, #164]	; (80111f4 <prvAddNewTaskToReadyList+0xbc>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d109      	bne.n	801116a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011156:	4a27      	ldr	r2, [pc, #156]	; (80111f4 <prvAddNewTaskToReadyList+0xbc>)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801115c:	4b24      	ldr	r3, [pc, #144]	; (80111f0 <prvAddNewTaskToReadyList+0xb8>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	2b01      	cmp	r3, #1
 8011162:	d110      	bne.n	8011186 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011164:	f000 fc4a 	bl	80119fc <prvInitialiseTaskLists>
 8011168:	e00d      	b.n	8011186 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801116a:	4b23      	ldr	r3, [pc, #140]	; (80111f8 <prvAddNewTaskToReadyList+0xc0>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d109      	bne.n	8011186 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011172:	4b20      	ldr	r3, [pc, #128]	; (80111f4 <prvAddNewTaskToReadyList+0xbc>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801117c:	429a      	cmp	r2, r3
 801117e:	d802      	bhi.n	8011186 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011180:	4a1c      	ldr	r2, [pc, #112]	; (80111f4 <prvAddNewTaskToReadyList+0xbc>)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011186:	4b1d      	ldr	r3, [pc, #116]	; (80111fc <prvAddNewTaskToReadyList+0xc4>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	3301      	adds	r3, #1
 801118c:	4a1b      	ldr	r2, [pc, #108]	; (80111fc <prvAddNewTaskToReadyList+0xc4>)
 801118e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011194:	2201      	movs	r2, #1
 8011196:	409a      	lsls	r2, r3
 8011198:	4b19      	ldr	r3, [pc, #100]	; (8011200 <prvAddNewTaskToReadyList+0xc8>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	4313      	orrs	r3, r2
 801119e:	4a18      	ldr	r2, [pc, #96]	; (8011200 <prvAddNewTaskToReadyList+0xc8>)
 80111a0:	6013      	str	r3, [r2, #0]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111a6:	4613      	mov	r3, r2
 80111a8:	009b      	lsls	r3, r3, #2
 80111aa:	4413      	add	r3, r2
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	4a15      	ldr	r2, [pc, #84]	; (8011204 <prvAddNewTaskToReadyList+0xcc>)
 80111b0:	441a      	add	r2, r3
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	3304      	adds	r3, #4
 80111b6:	4619      	mov	r1, r3
 80111b8:	4610      	mov	r0, r2
 80111ba:	f7fe fe7d 	bl	800feb8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80111be:	f001 f859 	bl	8012274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80111c2:	4b0d      	ldr	r3, [pc, #52]	; (80111f8 <prvAddNewTaskToReadyList+0xc0>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d00e      	beq.n	80111e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80111ca:	4b0a      	ldr	r3, [pc, #40]	; (80111f4 <prvAddNewTaskToReadyList+0xbc>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111d4:	429a      	cmp	r2, r3
 80111d6:	d207      	bcs.n	80111e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80111d8:	4b0b      	ldr	r3, [pc, #44]	; (8011208 <prvAddNewTaskToReadyList+0xd0>)
 80111da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111de:	601a      	str	r2, [r3, #0]
 80111e0:	f3bf 8f4f 	dsb	sy
 80111e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80111e8:	bf00      	nop
 80111ea:	3708      	adds	r7, #8
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	20000c64 	.word	0x20000c64
 80111f4:	20000b64 	.word	0x20000b64
 80111f8:	20000c70 	.word	0x20000c70
 80111fc:	20000c80 	.word	0x20000c80
 8011200:	20000c6c 	.word	0x20000c6c
 8011204:	20000b68 	.word	0x20000b68
 8011208:	e000ed04 	.word	0xe000ed04

0801120c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801120c:	b580      	push	{r7, lr}
 801120e:	b084      	sub	sp, #16
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011214:	2300      	movs	r3, #0
 8011216:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d017      	beq.n	801124e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801121e:	4b13      	ldr	r3, [pc, #76]	; (801126c <vTaskDelay+0x60>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d00a      	beq.n	801123c <vTaskDelay+0x30>
	__asm volatile
 8011226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801122a:	f383 8811 	msr	BASEPRI, r3
 801122e:	f3bf 8f6f 	isb	sy
 8011232:	f3bf 8f4f 	dsb	sy
 8011236:	60bb      	str	r3, [r7, #8]
}
 8011238:	bf00      	nop
 801123a:	e7fe      	b.n	801123a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801123c:	f000 f87a 	bl	8011334 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011240:	2100      	movs	r1, #0
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f000 fe54 	bl	8011ef0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011248:	f000 f882 	bl	8011350 <xTaskResumeAll>
 801124c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d107      	bne.n	8011264 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011254:	4b06      	ldr	r3, [pc, #24]	; (8011270 <vTaskDelay+0x64>)
 8011256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801125a:	601a      	str	r2, [r3, #0]
 801125c:	f3bf 8f4f 	dsb	sy
 8011260:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011264:	bf00      	nop
 8011266:	3710      	adds	r7, #16
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	20000c8c 	.word	0x20000c8c
 8011270:	e000ed04 	.word	0xe000ed04

08011274 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b08a      	sub	sp, #40	; 0x28
 8011278:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801127a:	2300      	movs	r3, #0
 801127c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801127e:	2300      	movs	r3, #0
 8011280:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011282:	463a      	mov	r2, r7
 8011284:	1d39      	adds	r1, r7, #4
 8011286:	f107 0308 	add.w	r3, r7, #8
 801128a:	4618      	mov	r0, r3
 801128c:	f7ef fbe2 	bl	8000a54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011290:	6839      	ldr	r1, [r7, #0]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	68ba      	ldr	r2, [r7, #8]
 8011296:	9202      	str	r2, [sp, #8]
 8011298:	9301      	str	r3, [sp, #4]
 801129a:	2300      	movs	r3, #0
 801129c:	9300      	str	r3, [sp, #0]
 801129e:	2300      	movs	r3, #0
 80112a0:	460a      	mov	r2, r1
 80112a2:	491e      	ldr	r1, [pc, #120]	; (801131c <vTaskStartScheduler+0xa8>)
 80112a4:	481e      	ldr	r0, [pc, #120]	; (8011320 <vTaskStartScheduler+0xac>)
 80112a6:	f7ff fe1d 	bl	8010ee4 <xTaskCreateStatic>
 80112aa:	4603      	mov	r3, r0
 80112ac:	4a1d      	ldr	r2, [pc, #116]	; (8011324 <vTaskStartScheduler+0xb0>)
 80112ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80112b0:	4b1c      	ldr	r3, [pc, #112]	; (8011324 <vTaskStartScheduler+0xb0>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d002      	beq.n	80112be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80112b8:	2301      	movs	r3, #1
 80112ba:	617b      	str	r3, [r7, #20]
 80112bc:	e001      	b.n	80112c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80112be:	2300      	movs	r3, #0
 80112c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	d116      	bne.n	80112f6 <vTaskStartScheduler+0x82>
	__asm volatile
 80112c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112cc:	f383 8811 	msr	BASEPRI, r3
 80112d0:	f3bf 8f6f 	isb	sy
 80112d4:	f3bf 8f4f 	dsb	sy
 80112d8:	613b      	str	r3, [r7, #16]
}
 80112da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80112dc:	4b12      	ldr	r3, [pc, #72]	; (8011328 <vTaskStartScheduler+0xb4>)
 80112de:	f04f 32ff 	mov.w	r2, #4294967295
 80112e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80112e4:	4b11      	ldr	r3, [pc, #68]	; (801132c <vTaskStartScheduler+0xb8>)
 80112e6:	2201      	movs	r2, #1
 80112e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80112ea:	4b11      	ldr	r3, [pc, #68]	; (8011330 <vTaskStartScheduler+0xbc>)
 80112ec:	2200      	movs	r2, #0
 80112ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80112f0:	f000 feee 	bl	80120d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80112f4:	e00e      	b.n	8011314 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112fc:	d10a      	bne.n	8011314 <vTaskStartScheduler+0xa0>
	__asm volatile
 80112fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011302:	f383 8811 	msr	BASEPRI, r3
 8011306:	f3bf 8f6f 	isb	sy
 801130a:	f3bf 8f4f 	dsb	sy
 801130e:	60fb      	str	r3, [r7, #12]
}
 8011310:	bf00      	nop
 8011312:	e7fe      	b.n	8011312 <vTaskStartScheduler+0x9e>
}
 8011314:	bf00      	nop
 8011316:	3718      	adds	r7, #24
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	080210f4 	.word	0x080210f4
 8011320:	080119cd 	.word	0x080119cd
 8011324:	20000c88 	.word	0x20000c88
 8011328:	20000c84 	.word	0x20000c84
 801132c:	20000c70 	.word	0x20000c70
 8011330:	20000c68 	.word	0x20000c68

08011334 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011334:	b480      	push	{r7}
 8011336:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011338:	4b04      	ldr	r3, [pc, #16]	; (801134c <vTaskSuspendAll+0x18>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	3301      	adds	r3, #1
 801133e:	4a03      	ldr	r2, [pc, #12]	; (801134c <vTaskSuspendAll+0x18>)
 8011340:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011342:	bf00      	nop
 8011344:	46bd      	mov	sp, r7
 8011346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134a:	4770      	bx	lr
 801134c:	20000c8c 	.word	0x20000c8c

08011350 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b084      	sub	sp, #16
 8011354:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011356:	2300      	movs	r3, #0
 8011358:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801135a:	2300      	movs	r3, #0
 801135c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801135e:	4b41      	ldr	r3, [pc, #260]	; (8011464 <xTaskResumeAll+0x114>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d10a      	bne.n	801137c <xTaskResumeAll+0x2c>
	__asm volatile
 8011366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801136a:	f383 8811 	msr	BASEPRI, r3
 801136e:	f3bf 8f6f 	isb	sy
 8011372:	f3bf 8f4f 	dsb	sy
 8011376:	603b      	str	r3, [r7, #0]
}
 8011378:	bf00      	nop
 801137a:	e7fe      	b.n	801137a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801137c:	f000 ff4a 	bl	8012214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011380:	4b38      	ldr	r3, [pc, #224]	; (8011464 <xTaskResumeAll+0x114>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	3b01      	subs	r3, #1
 8011386:	4a37      	ldr	r2, [pc, #220]	; (8011464 <xTaskResumeAll+0x114>)
 8011388:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801138a:	4b36      	ldr	r3, [pc, #216]	; (8011464 <xTaskResumeAll+0x114>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d161      	bne.n	8011456 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011392:	4b35      	ldr	r3, [pc, #212]	; (8011468 <xTaskResumeAll+0x118>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d05d      	beq.n	8011456 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801139a:	e02e      	b.n	80113fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801139c:	4b33      	ldr	r3, [pc, #204]	; (801146c <xTaskResumeAll+0x11c>)
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	68db      	ldr	r3, [r3, #12]
 80113a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	3318      	adds	r3, #24
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7fe fde2 	bl	800ff72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	3304      	adds	r3, #4
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7fe fddd 	bl	800ff72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113bc:	2201      	movs	r2, #1
 80113be:	409a      	lsls	r2, r3
 80113c0:	4b2b      	ldr	r3, [pc, #172]	; (8011470 <xTaskResumeAll+0x120>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	4313      	orrs	r3, r2
 80113c6:	4a2a      	ldr	r2, [pc, #168]	; (8011470 <xTaskResumeAll+0x120>)
 80113c8:	6013      	str	r3, [r2, #0]
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113ce:	4613      	mov	r3, r2
 80113d0:	009b      	lsls	r3, r3, #2
 80113d2:	4413      	add	r3, r2
 80113d4:	009b      	lsls	r3, r3, #2
 80113d6:	4a27      	ldr	r2, [pc, #156]	; (8011474 <xTaskResumeAll+0x124>)
 80113d8:	441a      	add	r2, r3
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	3304      	adds	r3, #4
 80113de:	4619      	mov	r1, r3
 80113e0:	4610      	mov	r0, r2
 80113e2:	f7fe fd69 	bl	800feb8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113ea:	4b23      	ldr	r3, [pc, #140]	; (8011478 <xTaskResumeAll+0x128>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d302      	bcc.n	80113fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80113f4:	4b21      	ldr	r3, [pc, #132]	; (801147c <xTaskResumeAll+0x12c>)
 80113f6:	2201      	movs	r2, #1
 80113f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80113fa:	4b1c      	ldr	r3, [pc, #112]	; (801146c <xTaskResumeAll+0x11c>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d1cc      	bne.n	801139c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d001      	beq.n	801140c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011408:	f000 fb96 	bl	8011b38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801140c:	4b1c      	ldr	r3, [pc, #112]	; (8011480 <xTaskResumeAll+0x130>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d010      	beq.n	801143a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011418:	f000 f858 	bl	80114cc <xTaskIncrementTick>
 801141c:	4603      	mov	r3, r0
 801141e:	2b00      	cmp	r3, #0
 8011420:	d002      	beq.n	8011428 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011422:	4b16      	ldr	r3, [pc, #88]	; (801147c <xTaskResumeAll+0x12c>)
 8011424:	2201      	movs	r2, #1
 8011426:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	3b01      	subs	r3, #1
 801142c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d1f1      	bne.n	8011418 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8011434:	4b12      	ldr	r3, [pc, #72]	; (8011480 <xTaskResumeAll+0x130>)
 8011436:	2200      	movs	r2, #0
 8011438:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801143a:	4b10      	ldr	r3, [pc, #64]	; (801147c <xTaskResumeAll+0x12c>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d009      	beq.n	8011456 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011442:	2301      	movs	r3, #1
 8011444:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011446:	4b0f      	ldr	r3, [pc, #60]	; (8011484 <xTaskResumeAll+0x134>)
 8011448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801144c:	601a      	str	r2, [r3, #0]
 801144e:	f3bf 8f4f 	dsb	sy
 8011452:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011456:	f000 ff0d 	bl	8012274 <vPortExitCritical>

	return xAlreadyYielded;
 801145a:	68bb      	ldr	r3, [r7, #8]
}
 801145c:	4618      	mov	r0, r3
 801145e:	3710      	adds	r7, #16
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}
 8011464:	20000c8c 	.word	0x20000c8c
 8011468:	20000c64 	.word	0x20000c64
 801146c:	20000c24 	.word	0x20000c24
 8011470:	20000c6c 	.word	0x20000c6c
 8011474:	20000b68 	.word	0x20000b68
 8011478:	20000b64 	.word	0x20000b64
 801147c:	20000c78 	.word	0x20000c78
 8011480:	20000c74 	.word	0x20000c74
 8011484:	e000ed04 	.word	0xe000ed04

08011488 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011488:	b480      	push	{r7}
 801148a:	b083      	sub	sp, #12
 801148c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801148e:	4b05      	ldr	r3, [pc, #20]	; (80114a4 <xTaskGetTickCount+0x1c>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011494:	687b      	ldr	r3, [r7, #4]
}
 8011496:	4618      	mov	r0, r3
 8011498:	370c      	adds	r7, #12
 801149a:	46bd      	mov	sp, r7
 801149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a0:	4770      	bx	lr
 80114a2:	bf00      	nop
 80114a4:	20000c68 	.word	0x20000c68

080114a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80114ae:	f000 ff93 	bl	80123d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80114b2:	2300      	movs	r3, #0
 80114b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80114b6:	4b04      	ldr	r3, [pc, #16]	; (80114c8 <xTaskGetTickCountFromISR+0x20>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80114bc:	683b      	ldr	r3, [r7, #0]
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3708      	adds	r7, #8
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}
 80114c6:	bf00      	nop
 80114c8:	20000c68 	.word	0x20000c68

080114cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b086      	sub	sp, #24
 80114d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80114d2:	2300      	movs	r3, #0
 80114d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114d6:	4b4e      	ldr	r3, [pc, #312]	; (8011610 <xTaskIncrementTick+0x144>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	f040 808e 	bne.w	80115fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80114e0:	4b4c      	ldr	r3, [pc, #304]	; (8011614 <xTaskIncrementTick+0x148>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	3301      	adds	r3, #1
 80114e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80114e8:	4a4a      	ldr	r2, [pc, #296]	; (8011614 <xTaskIncrementTick+0x148>)
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d120      	bne.n	8011536 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80114f4:	4b48      	ldr	r3, [pc, #288]	; (8011618 <xTaskIncrementTick+0x14c>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d00a      	beq.n	8011514 <xTaskIncrementTick+0x48>
	__asm volatile
 80114fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011502:	f383 8811 	msr	BASEPRI, r3
 8011506:	f3bf 8f6f 	isb	sy
 801150a:	f3bf 8f4f 	dsb	sy
 801150e:	603b      	str	r3, [r7, #0]
}
 8011510:	bf00      	nop
 8011512:	e7fe      	b.n	8011512 <xTaskIncrementTick+0x46>
 8011514:	4b40      	ldr	r3, [pc, #256]	; (8011618 <xTaskIncrementTick+0x14c>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	60fb      	str	r3, [r7, #12]
 801151a:	4b40      	ldr	r3, [pc, #256]	; (801161c <xTaskIncrementTick+0x150>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	4a3e      	ldr	r2, [pc, #248]	; (8011618 <xTaskIncrementTick+0x14c>)
 8011520:	6013      	str	r3, [r2, #0]
 8011522:	4a3e      	ldr	r2, [pc, #248]	; (801161c <xTaskIncrementTick+0x150>)
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	6013      	str	r3, [r2, #0]
 8011528:	4b3d      	ldr	r3, [pc, #244]	; (8011620 <xTaskIncrementTick+0x154>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	3301      	adds	r3, #1
 801152e:	4a3c      	ldr	r2, [pc, #240]	; (8011620 <xTaskIncrementTick+0x154>)
 8011530:	6013      	str	r3, [r2, #0]
 8011532:	f000 fb01 	bl	8011b38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011536:	4b3b      	ldr	r3, [pc, #236]	; (8011624 <xTaskIncrementTick+0x158>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	693a      	ldr	r2, [r7, #16]
 801153c:	429a      	cmp	r2, r3
 801153e:	d348      	bcc.n	80115d2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011540:	4b35      	ldr	r3, [pc, #212]	; (8011618 <xTaskIncrementTick+0x14c>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d104      	bne.n	8011554 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801154a:	4b36      	ldr	r3, [pc, #216]	; (8011624 <xTaskIncrementTick+0x158>)
 801154c:	f04f 32ff 	mov.w	r2, #4294967295
 8011550:	601a      	str	r2, [r3, #0]
					break;
 8011552:	e03e      	b.n	80115d2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011554:	4b30      	ldr	r3, [pc, #192]	; (8011618 <xTaskIncrementTick+0x14c>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	68db      	ldr	r3, [r3, #12]
 801155c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011564:	693a      	ldr	r2, [r7, #16]
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	429a      	cmp	r2, r3
 801156a:	d203      	bcs.n	8011574 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801156c:	4a2d      	ldr	r2, [pc, #180]	; (8011624 <xTaskIncrementTick+0x158>)
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011572:	e02e      	b.n	80115d2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	3304      	adds	r3, #4
 8011578:	4618      	mov	r0, r3
 801157a:	f7fe fcfa 	bl	800ff72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011582:	2b00      	cmp	r3, #0
 8011584:	d004      	beq.n	8011590 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	3318      	adds	r3, #24
 801158a:	4618      	mov	r0, r3
 801158c:	f7fe fcf1 	bl	800ff72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011594:	2201      	movs	r2, #1
 8011596:	409a      	lsls	r2, r3
 8011598:	4b23      	ldr	r3, [pc, #140]	; (8011628 <xTaskIncrementTick+0x15c>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	4313      	orrs	r3, r2
 801159e:	4a22      	ldr	r2, [pc, #136]	; (8011628 <xTaskIncrementTick+0x15c>)
 80115a0:	6013      	str	r3, [r2, #0]
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115a6:	4613      	mov	r3, r2
 80115a8:	009b      	lsls	r3, r3, #2
 80115aa:	4413      	add	r3, r2
 80115ac:	009b      	lsls	r3, r3, #2
 80115ae:	4a1f      	ldr	r2, [pc, #124]	; (801162c <xTaskIncrementTick+0x160>)
 80115b0:	441a      	add	r2, r3
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	3304      	adds	r3, #4
 80115b6:	4619      	mov	r1, r3
 80115b8:	4610      	mov	r0, r2
 80115ba:	f7fe fc7d 	bl	800feb8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115c2:	4b1b      	ldr	r3, [pc, #108]	; (8011630 <xTaskIncrementTick+0x164>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d3b9      	bcc.n	8011540 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80115cc:	2301      	movs	r3, #1
 80115ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80115d0:	e7b6      	b.n	8011540 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80115d2:	4b17      	ldr	r3, [pc, #92]	; (8011630 <xTaskIncrementTick+0x164>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115d8:	4914      	ldr	r1, [pc, #80]	; (801162c <xTaskIncrementTick+0x160>)
 80115da:	4613      	mov	r3, r2
 80115dc:	009b      	lsls	r3, r3, #2
 80115de:	4413      	add	r3, r2
 80115e0:	009b      	lsls	r3, r3, #2
 80115e2:	440b      	add	r3, r1
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d901      	bls.n	80115ee <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80115ea:	2301      	movs	r3, #1
 80115ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80115ee:	4b11      	ldr	r3, [pc, #68]	; (8011634 <xTaskIncrementTick+0x168>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d007      	beq.n	8011606 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80115f6:	2301      	movs	r3, #1
 80115f8:	617b      	str	r3, [r7, #20]
 80115fa:	e004      	b.n	8011606 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80115fc:	4b0e      	ldr	r3, [pc, #56]	; (8011638 <xTaskIncrementTick+0x16c>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	3301      	adds	r3, #1
 8011602:	4a0d      	ldr	r2, [pc, #52]	; (8011638 <xTaskIncrementTick+0x16c>)
 8011604:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011606:	697b      	ldr	r3, [r7, #20]
}
 8011608:	4618      	mov	r0, r3
 801160a:	3718      	adds	r7, #24
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}
 8011610:	20000c8c 	.word	0x20000c8c
 8011614:	20000c68 	.word	0x20000c68
 8011618:	20000c1c 	.word	0x20000c1c
 801161c:	20000c20 	.word	0x20000c20
 8011620:	20000c7c 	.word	0x20000c7c
 8011624:	20000c84 	.word	0x20000c84
 8011628:	20000c6c 	.word	0x20000c6c
 801162c:	20000b68 	.word	0x20000b68
 8011630:	20000b64 	.word	0x20000b64
 8011634:	20000c78 	.word	0x20000c78
 8011638:	20000c74 	.word	0x20000c74

0801163c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801163c:	b480      	push	{r7}
 801163e:	b087      	sub	sp, #28
 8011640:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011642:	4b27      	ldr	r3, [pc, #156]	; (80116e0 <vTaskSwitchContext+0xa4>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d003      	beq.n	8011652 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801164a:	4b26      	ldr	r3, [pc, #152]	; (80116e4 <vTaskSwitchContext+0xa8>)
 801164c:	2201      	movs	r2, #1
 801164e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011650:	e03f      	b.n	80116d2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8011652:	4b24      	ldr	r3, [pc, #144]	; (80116e4 <vTaskSwitchContext+0xa8>)
 8011654:	2200      	movs	r2, #0
 8011656:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011658:	4b23      	ldr	r3, [pc, #140]	; (80116e8 <vTaskSwitchContext+0xac>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	fab3 f383 	clz	r3, r3
 8011664:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011666:	7afb      	ldrb	r3, [r7, #11]
 8011668:	f1c3 031f 	rsb	r3, r3, #31
 801166c:	617b      	str	r3, [r7, #20]
 801166e:	491f      	ldr	r1, [pc, #124]	; (80116ec <vTaskSwitchContext+0xb0>)
 8011670:	697a      	ldr	r2, [r7, #20]
 8011672:	4613      	mov	r3, r2
 8011674:	009b      	lsls	r3, r3, #2
 8011676:	4413      	add	r3, r2
 8011678:	009b      	lsls	r3, r3, #2
 801167a:	440b      	add	r3, r1
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d10a      	bne.n	8011698 <vTaskSwitchContext+0x5c>
	__asm volatile
 8011682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011686:	f383 8811 	msr	BASEPRI, r3
 801168a:	f3bf 8f6f 	isb	sy
 801168e:	f3bf 8f4f 	dsb	sy
 8011692:	607b      	str	r3, [r7, #4]
}
 8011694:	bf00      	nop
 8011696:	e7fe      	b.n	8011696 <vTaskSwitchContext+0x5a>
 8011698:	697a      	ldr	r2, [r7, #20]
 801169a:	4613      	mov	r3, r2
 801169c:	009b      	lsls	r3, r3, #2
 801169e:	4413      	add	r3, r2
 80116a0:	009b      	lsls	r3, r3, #2
 80116a2:	4a12      	ldr	r2, [pc, #72]	; (80116ec <vTaskSwitchContext+0xb0>)
 80116a4:	4413      	add	r3, r2
 80116a6:	613b      	str	r3, [r7, #16]
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	685a      	ldr	r2, [r3, #4]
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	605a      	str	r2, [r3, #4]
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	685a      	ldr	r2, [r3, #4]
 80116b6:	693b      	ldr	r3, [r7, #16]
 80116b8:	3308      	adds	r3, #8
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d104      	bne.n	80116c8 <vTaskSwitchContext+0x8c>
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	685b      	ldr	r3, [r3, #4]
 80116c2:	685a      	ldr	r2, [r3, #4]
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	605a      	str	r2, [r3, #4]
 80116c8:	693b      	ldr	r3, [r7, #16]
 80116ca:	685b      	ldr	r3, [r3, #4]
 80116cc:	68db      	ldr	r3, [r3, #12]
 80116ce:	4a08      	ldr	r2, [pc, #32]	; (80116f0 <vTaskSwitchContext+0xb4>)
 80116d0:	6013      	str	r3, [r2, #0]
}
 80116d2:	bf00      	nop
 80116d4:	371c      	adds	r7, #28
 80116d6:	46bd      	mov	sp, r7
 80116d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116dc:	4770      	bx	lr
 80116de:	bf00      	nop
 80116e0:	20000c8c 	.word	0x20000c8c
 80116e4:	20000c78 	.word	0x20000c78
 80116e8:	20000c6c 	.word	0x20000c6c
 80116ec:	20000b68 	.word	0x20000b68
 80116f0:	20000b64 	.word	0x20000b64

080116f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b084      	sub	sp, #16
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d10a      	bne.n	801171a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011708:	f383 8811 	msr	BASEPRI, r3
 801170c:	f3bf 8f6f 	isb	sy
 8011710:	f3bf 8f4f 	dsb	sy
 8011714:	60fb      	str	r3, [r7, #12]
}
 8011716:	bf00      	nop
 8011718:	e7fe      	b.n	8011718 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801171a:	4b07      	ldr	r3, [pc, #28]	; (8011738 <vTaskPlaceOnEventList+0x44>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	3318      	adds	r3, #24
 8011720:	4619      	mov	r1, r3
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f7fe fbec 	bl	800ff00 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011728:	2101      	movs	r1, #1
 801172a:	6838      	ldr	r0, [r7, #0]
 801172c:	f000 fbe0 	bl	8011ef0 <prvAddCurrentTaskToDelayedList>
}
 8011730:	bf00      	nop
 8011732:	3710      	adds	r7, #16
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}
 8011738:	20000b64 	.word	0x20000b64

0801173c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b086      	sub	sp, #24
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	68db      	ldr	r3, [r3, #12]
 801174a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d10a      	bne.n	8011768 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011756:	f383 8811 	msr	BASEPRI, r3
 801175a:	f3bf 8f6f 	isb	sy
 801175e:	f3bf 8f4f 	dsb	sy
 8011762:	60fb      	str	r3, [r7, #12]
}
 8011764:	bf00      	nop
 8011766:	e7fe      	b.n	8011766 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	3318      	adds	r3, #24
 801176c:	4618      	mov	r0, r3
 801176e:	f7fe fc00 	bl	800ff72 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011772:	4b1d      	ldr	r3, [pc, #116]	; (80117e8 <xTaskRemoveFromEventList+0xac>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d11c      	bne.n	80117b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	3304      	adds	r3, #4
 801177e:	4618      	mov	r0, r3
 8011780:	f7fe fbf7 	bl	800ff72 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011784:	693b      	ldr	r3, [r7, #16]
 8011786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011788:	2201      	movs	r2, #1
 801178a:	409a      	lsls	r2, r3
 801178c:	4b17      	ldr	r3, [pc, #92]	; (80117ec <xTaskRemoveFromEventList+0xb0>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	4313      	orrs	r3, r2
 8011792:	4a16      	ldr	r2, [pc, #88]	; (80117ec <xTaskRemoveFromEventList+0xb0>)
 8011794:	6013      	str	r3, [r2, #0]
 8011796:	693b      	ldr	r3, [r7, #16]
 8011798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801179a:	4613      	mov	r3, r2
 801179c:	009b      	lsls	r3, r3, #2
 801179e:	4413      	add	r3, r2
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	4a13      	ldr	r2, [pc, #76]	; (80117f0 <xTaskRemoveFromEventList+0xb4>)
 80117a4:	441a      	add	r2, r3
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	3304      	adds	r3, #4
 80117aa:	4619      	mov	r1, r3
 80117ac:	4610      	mov	r0, r2
 80117ae:	f7fe fb83 	bl	800feb8 <vListInsertEnd>
 80117b2:	e005      	b.n	80117c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	3318      	adds	r3, #24
 80117b8:	4619      	mov	r1, r3
 80117ba:	480e      	ldr	r0, [pc, #56]	; (80117f4 <xTaskRemoveFromEventList+0xb8>)
 80117bc:	f7fe fb7c 	bl	800feb8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117c4:	4b0c      	ldr	r3, [pc, #48]	; (80117f8 <xTaskRemoveFromEventList+0xbc>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d905      	bls.n	80117da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80117ce:	2301      	movs	r3, #1
 80117d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80117d2:	4b0a      	ldr	r3, [pc, #40]	; (80117fc <xTaskRemoveFromEventList+0xc0>)
 80117d4:	2201      	movs	r2, #1
 80117d6:	601a      	str	r2, [r3, #0]
 80117d8:	e001      	b.n	80117de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80117da:	2300      	movs	r3, #0
 80117dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80117de:	697b      	ldr	r3, [r7, #20]
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3718      	adds	r7, #24
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}
 80117e8:	20000c8c 	.word	0x20000c8c
 80117ec:	20000c6c 	.word	0x20000c6c
 80117f0:	20000b68 	.word	0x20000b68
 80117f4:	20000c24 	.word	0x20000c24
 80117f8:	20000b64 	.word	0x20000b64
 80117fc:	20000c78 	.word	0x20000c78

08011800 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b086      	sub	sp, #24
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
 8011808:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801180a:	4b29      	ldr	r3, [pc, #164]	; (80118b0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d10a      	bne.n	8011828 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8011812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011816:	f383 8811 	msr	BASEPRI, r3
 801181a:	f3bf 8f6f 	isb	sy
 801181e:	f3bf 8f4f 	dsb	sy
 8011822:	613b      	str	r3, [r7, #16]
}
 8011824:	bf00      	nop
 8011826:	e7fe      	b.n	8011826 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	68db      	ldr	r3, [r3, #12]
 8011836:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d10a      	bne.n	8011854 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801183e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011842:	f383 8811 	msr	BASEPRI, r3
 8011846:	f3bf 8f6f 	isb	sy
 801184a:	f3bf 8f4f 	dsb	sy
 801184e:	60fb      	str	r3, [r7, #12]
}
 8011850:	bf00      	nop
 8011852:	e7fe      	b.n	8011852 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f7fe fb8c 	bl	800ff72 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	3304      	adds	r3, #4
 801185e:	4618      	mov	r0, r3
 8011860:	f7fe fb87 	bl	800ff72 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011868:	2201      	movs	r2, #1
 801186a:	409a      	lsls	r2, r3
 801186c:	4b11      	ldr	r3, [pc, #68]	; (80118b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	4313      	orrs	r3, r2
 8011872:	4a10      	ldr	r2, [pc, #64]	; (80118b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011874:	6013      	str	r3, [r2, #0]
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801187a:	4613      	mov	r3, r2
 801187c:	009b      	lsls	r3, r3, #2
 801187e:	4413      	add	r3, r2
 8011880:	009b      	lsls	r3, r3, #2
 8011882:	4a0d      	ldr	r2, [pc, #52]	; (80118b8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8011884:	441a      	add	r2, r3
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	3304      	adds	r3, #4
 801188a:	4619      	mov	r1, r3
 801188c:	4610      	mov	r0, r2
 801188e:	f7fe fb13 	bl	800feb8 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011896:	4b09      	ldr	r3, [pc, #36]	; (80118bc <vTaskRemoveFromUnorderedEventList+0xbc>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801189c:	429a      	cmp	r2, r3
 801189e:	d902      	bls.n	80118a6 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80118a0:	4b07      	ldr	r3, [pc, #28]	; (80118c0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80118a2:	2201      	movs	r2, #1
 80118a4:	601a      	str	r2, [r3, #0]
	}
}
 80118a6:	bf00      	nop
 80118a8:	3718      	adds	r7, #24
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	20000c8c 	.word	0x20000c8c
 80118b4:	20000c6c 	.word	0x20000c6c
 80118b8:	20000b68 	.word	0x20000b68
 80118bc:	20000b64 	.word	0x20000b64
 80118c0:	20000c78 	.word	0x20000c78

080118c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80118c4:	b480      	push	{r7}
 80118c6:	b083      	sub	sp, #12
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80118cc:	4b06      	ldr	r3, [pc, #24]	; (80118e8 <vTaskInternalSetTimeOutState+0x24>)
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80118d4:	4b05      	ldr	r3, [pc, #20]	; (80118ec <vTaskInternalSetTimeOutState+0x28>)
 80118d6:	681a      	ldr	r2, [r3, #0]
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	605a      	str	r2, [r3, #4]
}
 80118dc:	bf00      	nop
 80118de:	370c      	adds	r7, #12
 80118e0:	46bd      	mov	sp, r7
 80118e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e6:	4770      	bx	lr
 80118e8:	20000c7c 	.word	0x20000c7c
 80118ec:	20000c68 	.word	0x20000c68

080118f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b088      	sub	sp, #32
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
 80118f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d10a      	bne.n	8011916 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011904:	f383 8811 	msr	BASEPRI, r3
 8011908:	f3bf 8f6f 	isb	sy
 801190c:	f3bf 8f4f 	dsb	sy
 8011910:	613b      	str	r3, [r7, #16]
}
 8011912:	bf00      	nop
 8011914:	e7fe      	b.n	8011914 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d10a      	bne.n	8011932 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801191c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011920:	f383 8811 	msr	BASEPRI, r3
 8011924:	f3bf 8f6f 	isb	sy
 8011928:	f3bf 8f4f 	dsb	sy
 801192c:	60fb      	str	r3, [r7, #12]
}
 801192e:	bf00      	nop
 8011930:	e7fe      	b.n	8011930 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011932:	f000 fc6f 	bl	8012214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011936:	4b1d      	ldr	r3, [pc, #116]	; (80119ac <xTaskCheckForTimeOut+0xbc>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	685b      	ldr	r3, [r3, #4]
 8011940:	69ba      	ldr	r2, [r7, #24]
 8011942:	1ad3      	subs	r3, r2, r3
 8011944:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801194e:	d102      	bne.n	8011956 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011950:	2300      	movs	r3, #0
 8011952:	61fb      	str	r3, [r7, #28]
 8011954:	e023      	b.n	801199e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681a      	ldr	r2, [r3, #0]
 801195a:	4b15      	ldr	r3, [pc, #84]	; (80119b0 <xTaskCheckForTimeOut+0xc0>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	429a      	cmp	r2, r3
 8011960:	d007      	beq.n	8011972 <xTaskCheckForTimeOut+0x82>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	685b      	ldr	r3, [r3, #4]
 8011966:	69ba      	ldr	r2, [r7, #24]
 8011968:	429a      	cmp	r2, r3
 801196a:	d302      	bcc.n	8011972 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801196c:	2301      	movs	r3, #1
 801196e:	61fb      	str	r3, [r7, #28]
 8011970:	e015      	b.n	801199e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	697a      	ldr	r2, [r7, #20]
 8011978:	429a      	cmp	r2, r3
 801197a:	d20b      	bcs.n	8011994 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	681a      	ldr	r2, [r3, #0]
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	1ad2      	subs	r2, r2, r3
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f7ff ff9b 	bl	80118c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801198e:	2300      	movs	r3, #0
 8011990:	61fb      	str	r3, [r7, #28]
 8011992:	e004      	b.n	801199e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	2200      	movs	r2, #0
 8011998:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801199a:	2301      	movs	r3, #1
 801199c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801199e:	f000 fc69 	bl	8012274 <vPortExitCritical>

	return xReturn;
 80119a2:	69fb      	ldr	r3, [r7, #28]
}
 80119a4:	4618      	mov	r0, r3
 80119a6:	3720      	adds	r7, #32
 80119a8:	46bd      	mov	sp, r7
 80119aa:	bd80      	pop	{r7, pc}
 80119ac:	20000c68 	.word	0x20000c68
 80119b0:	20000c7c 	.word	0x20000c7c

080119b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80119b4:	b480      	push	{r7}
 80119b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80119b8:	4b03      	ldr	r3, [pc, #12]	; (80119c8 <vTaskMissedYield+0x14>)
 80119ba:	2201      	movs	r2, #1
 80119bc:	601a      	str	r2, [r3, #0]
}
 80119be:	bf00      	nop
 80119c0:	46bd      	mov	sp, r7
 80119c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c6:	4770      	bx	lr
 80119c8:	20000c78 	.word	0x20000c78

080119cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b082      	sub	sp, #8
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80119d4:	f000 f852 	bl	8011a7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80119d8:	4b06      	ldr	r3, [pc, #24]	; (80119f4 <prvIdleTask+0x28>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	2b01      	cmp	r3, #1
 80119de:	d9f9      	bls.n	80119d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80119e0:	4b05      	ldr	r3, [pc, #20]	; (80119f8 <prvIdleTask+0x2c>)
 80119e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119e6:	601a      	str	r2, [r3, #0]
 80119e8:	f3bf 8f4f 	dsb	sy
 80119ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80119f0:	e7f0      	b.n	80119d4 <prvIdleTask+0x8>
 80119f2:	bf00      	nop
 80119f4:	20000b68 	.word	0x20000b68
 80119f8:	e000ed04 	.word	0xe000ed04

080119fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b082      	sub	sp, #8
 8011a00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011a02:	2300      	movs	r3, #0
 8011a04:	607b      	str	r3, [r7, #4]
 8011a06:	e00c      	b.n	8011a22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011a08:	687a      	ldr	r2, [r7, #4]
 8011a0a:	4613      	mov	r3, r2
 8011a0c:	009b      	lsls	r3, r3, #2
 8011a0e:	4413      	add	r3, r2
 8011a10:	009b      	lsls	r3, r3, #2
 8011a12:	4a12      	ldr	r2, [pc, #72]	; (8011a5c <prvInitialiseTaskLists+0x60>)
 8011a14:	4413      	add	r3, r2
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7fe fa21 	bl	800fe5e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	3301      	adds	r3, #1
 8011a20:	607b      	str	r3, [r7, #4]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2b06      	cmp	r3, #6
 8011a26:	d9ef      	bls.n	8011a08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011a28:	480d      	ldr	r0, [pc, #52]	; (8011a60 <prvInitialiseTaskLists+0x64>)
 8011a2a:	f7fe fa18 	bl	800fe5e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011a2e:	480d      	ldr	r0, [pc, #52]	; (8011a64 <prvInitialiseTaskLists+0x68>)
 8011a30:	f7fe fa15 	bl	800fe5e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011a34:	480c      	ldr	r0, [pc, #48]	; (8011a68 <prvInitialiseTaskLists+0x6c>)
 8011a36:	f7fe fa12 	bl	800fe5e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011a3a:	480c      	ldr	r0, [pc, #48]	; (8011a6c <prvInitialiseTaskLists+0x70>)
 8011a3c:	f7fe fa0f 	bl	800fe5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011a40:	480b      	ldr	r0, [pc, #44]	; (8011a70 <prvInitialiseTaskLists+0x74>)
 8011a42:	f7fe fa0c 	bl	800fe5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011a46:	4b0b      	ldr	r3, [pc, #44]	; (8011a74 <prvInitialiseTaskLists+0x78>)
 8011a48:	4a05      	ldr	r2, [pc, #20]	; (8011a60 <prvInitialiseTaskLists+0x64>)
 8011a4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011a4c:	4b0a      	ldr	r3, [pc, #40]	; (8011a78 <prvInitialiseTaskLists+0x7c>)
 8011a4e:	4a05      	ldr	r2, [pc, #20]	; (8011a64 <prvInitialiseTaskLists+0x68>)
 8011a50:	601a      	str	r2, [r3, #0]
}
 8011a52:	bf00      	nop
 8011a54:	3708      	adds	r7, #8
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	20000b68 	.word	0x20000b68
 8011a60:	20000bf4 	.word	0x20000bf4
 8011a64:	20000c08 	.word	0x20000c08
 8011a68:	20000c24 	.word	0x20000c24
 8011a6c:	20000c38 	.word	0x20000c38
 8011a70:	20000c50 	.word	0x20000c50
 8011a74:	20000c1c 	.word	0x20000c1c
 8011a78:	20000c20 	.word	0x20000c20

08011a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b082      	sub	sp, #8
 8011a80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011a82:	e019      	b.n	8011ab8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011a84:	f000 fbc6 	bl	8012214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a88:	4b10      	ldr	r3, [pc, #64]	; (8011acc <prvCheckTasksWaitingTermination+0x50>)
 8011a8a:	68db      	ldr	r3, [r3, #12]
 8011a8c:	68db      	ldr	r3, [r3, #12]
 8011a8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	3304      	adds	r3, #4
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7fe fa6c 	bl	800ff72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011a9a:	4b0d      	ldr	r3, [pc, #52]	; (8011ad0 <prvCheckTasksWaitingTermination+0x54>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	3b01      	subs	r3, #1
 8011aa0:	4a0b      	ldr	r2, [pc, #44]	; (8011ad0 <prvCheckTasksWaitingTermination+0x54>)
 8011aa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011aa4:	4b0b      	ldr	r3, [pc, #44]	; (8011ad4 <prvCheckTasksWaitingTermination+0x58>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	3b01      	subs	r3, #1
 8011aaa:	4a0a      	ldr	r2, [pc, #40]	; (8011ad4 <prvCheckTasksWaitingTermination+0x58>)
 8011aac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011aae:	f000 fbe1 	bl	8012274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f000 f810 	bl	8011ad8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011ab8:	4b06      	ldr	r3, [pc, #24]	; (8011ad4 <prvCheckTasksWaitingTermination+0x58>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d1e1      	bne.n	8011a84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011ac0:	bf00      	nop
 8011ac2:	bf00      	nop
 8011ac4:	3708      	adds	r7, #8
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}
 8011aca:	bf00      	nop
 8011acc:	20000c38 	.word	0x20000c38
 8011ad0:	20000c64 	.word	0x20000c64
 8011ad4:	20000c4c 	.word	0x20000c4c

08011ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b084      	sub	sp, #16
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d108      	bne.n	8011afc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011aee:	4618      	mov	r0, r3
 8011af0:	f000 fd7e 	bl	80125f0 <vPortFree>
				vPortFree( pxTCB );
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	f000 fd7b 	bl	80125f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011afa:	e018      	b.n	8011b2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011b02:	2b01      	cmp	r3, #1
 8011b04:	d103      	bne.n	8011b0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	f000 fd72 	bl	80125f0 <vPortFree>
	}
 8011b0c:	e00f      	b.n	8011b2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011b14:	2b02      	cmp	r3, #2
 8011b16:	d00a      	beq.n	8011b2e <prvDeleteTCB+0x56>
	__asm volatile
 8011b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b1c:	f383 8811 	msr	BASEPRI, r3
 8011b20:	f3bf 8f6f 	isb	sy
 8011b24:	f3bf 8f4f 	dsb	sy
 8011b28:	60fb      	str	r3, [r7, #12]
}
 8011b2a:	bf00      	nop
 8011b2c:	e7fe      	b.n	8011b2c <prvDeleteTCB+0x54>
	}
 8011b2e:	bf00      	nop
 8011b30:	3710      	adds	r7, #16
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}
	...

08011b38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b083      	sub	sp, #12
 8011b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b3e:	4b0c      	ldr	r3, [pc, #48]	; (8011b70 <prvResetNextTaskUnblockTime+0x38>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d104      	bne.n	8011b52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011b48:	4b0a      	ldr	r3, [pc, #40]	; (8011b74 <prvResetNextTaskUnblockTime+0x3c>)
 8011b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8011b4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011b50:	e008      	b.n	8011b64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b52:	4b07      	ldr	r3, [pc, #28]	; (8011b70 <prvResetNextTaskUnblockTime+0x38>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	68db      	ldr	r3, [r3, #12]
 8011b58:	68db      	ldr	r3, [r3, #12]
 8011b5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	4a04      	ldr	r2, [pc, #16]	; (8011b74 <prvResetNextTaskUnblockTime+0x3c>)
 8011b62:	6013      	str	r3, [r2, #0]
}
 8011b64:	bf00      	nop
 8011b66:	370c      	adds	r7, #12
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6e:	4770      	bx	lr
 8011b70:	20000c1c 	.word	0x20000c1c
 8011b74:	20000c84 	.word	0x20000c84

08011b78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011b78:	b480      	push	{r7}
 8011b7a:	b083      	sub	sp, #12
 8011b7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011b7e:	4b0b      	ldr	r3, [pc, #44]	; (8011bac <xTaskGetSchedulerState+0x34>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d102      	bne.n	8011b8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011b86:	2301      	movs	r3, #1
 8011b88:	607b      	str	r3, [r7, #4]
 8011b8a:	e008      	b.n	8011b9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b8c:	4b08      	ldr	r3, [pc, #32]	; (8011bb0 <xTaskGetSchedulerState+0x38>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d102      	bne.n	8011b9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011b94:	2302      	movs	r3, #2
 8011b96:	607b      	str	r3, [r7, #4]
 8011b98:	e001      	b.n	8011b9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011b9e:	687b      	ldr	r3, [r7, #4]
	}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	370c      	adds	r7, #12
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011baa:	4770      	bx	lr
 8011bac:	20000c70 	.word	0x20000c70
 8011bb0:	20000c8c 	.word	0x20000c8c

08011bb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b084      	sub	sp, #16
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d05e      	beq.n	8011c88 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bce:	4b31      	ldr	r3, [pc, #196]	; (8011c94 <xTaskPriorityInherit+0xe0>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d24e      	bcs.n	8011c76 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	699b      	ldr	r3, [r3, #24]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	db06      	blt.n	8011bee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011be0:	4b2c      	ldr	r3, [pc, #176]	; (8011c94 <xTaskPriorityInherit+0xe0>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be6:	f1c3 0207 	rsb	r2, r3, #7
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	6959      	ldr	r1, [r3, #20]
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bf6:	4613      	mov	r3, r2
 8011bf8:	009b      	lsls	r3, r3, #2
 8011bfa:	4413      	add	r3, r2
 8011bfc:	009b      	lsls	r3, r3, #2
 8011bfe:	4a26      	ldr	r2, [pc, #152]	; (8011c98 <xTaskPriorityInherit+0xe4>)
 8011c00:	4413      	add	r3, r2
 8011c02:	4299      	cmp	r1, r3
 8011c04:	d12f      	bne.n	8011c66 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	3304      	adds	r3, #4
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fe f9b1 	bl	800ff72 <uxListRemove>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d10a      	bne.n	8011c2c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011c16:	68bb      	ldr	r3, [r7, #8]
 8011c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c1a:	2201      	movs	r2, #1
 8011c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8011c20:	43da      	mvns	r2, r3
 8011c22:	4b1e      	ldr	r3, [pc, #120]	; (8011c9c <xTaskPriorityInherit+0xe8>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	4013      	ands	r3, r2
 8011c28:	4a1c      	ldr	r2, [pc, #112]	; (8011c9c <xTaskPriorityInherit+0xe8>)
 8011c2a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011c2c:	4b19      	ldr	r3, [pc, #100]	; (8011c94 <xTaskPriorityInherit+0xe0>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c3a:	2201      	movs	r2, #1
 8011c3c:	409a      	lsls	r2, r3
 8011c3e:	4b17      	ldr	r3, [pc, #92]	; (8011c9c <xTaskPriorityInherit+0xe8>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	4313      	orrs	r3, r2
 8011c44:	4a15      	ldr	r2, [pc, #84]	; (8011c9c <xTaskPriorityInherit+0xe8>)
 8011c46:	6013      	str	r3, [r2, #0]
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c4c:	4613      	mov	r3, r2
 8011c4e:	009b      	lsls	r3, r3, #2
 8011c50:	4413      	add	r3, r2
 8011c52:	009b      	lsls	r3, r3, #2
 8011c54:	4a10      	ldr	r2, [pc, #64]	; (8011c98 <xTaskPriorityInherit+0xe4>)
 8011c56:	441a      	add	r2, r3
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	3304      	adds	r3, #4
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	4610      	mov	r0, r2
 8011c60:	f7fe f92a 	bl	800feb8 <vListInsertEnd>
 8011c64:	e004      	b.n	8011c70 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011c66:	4b0b      	ldr	r3, [pc, #44]	; (8011c94 <xTaskPriorityInherit+0xe0>)
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011c70:	2301      	movs	r3, #1
 8011c72:	60fb      	str	r3, [r7, #12]
 8011c74:	e008      	b.n	8011c88 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011c7a:	4b06      	ldr	r3, [pc, #24]	; (8011c94 <xTaskPriorityInherit+0xe0>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d201      	bcs.n	8011c88 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011c84:	2301      	movs	r3, #1
 8011c86:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011c88:	68fb      	ldr	r3, [r7, #12]
	}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3710      	adds	r7, #16
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}
 8011c92:	bf00      	nop
 8011c94:	20000b64 	.word	0x20000b64
 8011c98:	20000b68 	.word	0x20000b68
 8011c9c:	20000c6c 	.word	0x20000c6c

08011ca0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b086      	sub	sp, #24
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011cac:	2300      	movs	r3, #0
 8011cae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d06e      	beq.n	8011d94 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011cb6:	4b3a      	ldr	r3, [pc, #232]	; (8011da0 <xTaskPriorityDisinherit+0x100>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	693a      	ldr	r2, [r7, #16]
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d00a      	beq.n	8011cd6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc4:	f383 8811 	msr	BASEPRI, r3
 8011cc8:	f3bf 8f6f 	isb	sy
 8011ccc:	f3bf 8f4f 	dsb	sy
 8011cd0:	60fb      	str	r3, [r7, #12]
}
 8011cd2:	bf00      	nop
 8011cd4:	e7fe      	b.n	8011cd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d10a      	bne.n	8011cf4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ce2:	f383 8811 	msr	BASEPRI, r3
 8011ce6:	f3bf 8f6f 	isb	sy
 8011cea:	f3bf 8f4f 	dsb	sy
 8011cee:	60bb      	str	r3, [r7, #8]
}
 8011cf0:	bf00      	nop
 8011cf2:	e7fe      	b.n	8011cf2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011cf4:	693b      	ldr	r3, [r7, #16]
 8011cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cf8:	1e5a      	subs	r2, r3, #1
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d044      	beq.n	8011d94 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011d0a:	693b      	ldr	r3, [r7, #16]
 8011d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d140      	bne.n	8011d94 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	3304      	adds	r3, #4
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7fe f92b 	bl	800ff72 <uxListRemove>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d115      	bne.n	8011d4e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d26:	491f      	ldr	r1, [pc, #124]	; (8011da4 <xTaskPriorityDisinherit+0x104>)
 8011d28:	4613      	mov	r3, r2
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	4413      	add	r3, r2
 8011d2e:	009b      	lsls	r3, r3, #2
 8011d30:	440b      	add	r3, r1
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d10a      	bne.n	8011d4e <xTaskPriorityDisinherit+0xae>
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d3c:	2201      	movs	r2, #1
 8011d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8011d42:	43da      	mvns	r2, r3
 8011d44:	4b18      	ldr	r3, [pc, #96]	; (8011da8 <xTaskPriorityDisinherit+0x108>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	4013      	ands	r3, r2
 8011d4a:	4a17      	ldr	r2, [pc, #92]	; (8011da8 <xTaskPriorityDisinherit+0x108>)
 8011d4c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d5a:	f1c3 0207 	rsb	r2, r3, #7
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011d62:	693b      	ldr	r3, [r7, #16]
 8011d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d66:	2201      	movs	r2, #1
 8011d68:	409a      	lsls	r2, r3
 8011d6a:	4b0f      	ldr	r3, [pc, #60]	; (8011da8 <xTaskPriorityDisinherit+0x108>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4313      	orrs	r3, r2
 8011d70:	4a0d      	ldr	r2, [pc, #52]	; (8011da8 <xTaskPriorityDisinherit+0x108>)
 8011d72:	6013      	str	r3, [r2, #0]
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d78:	4613      	mov	r3, r2
 8011d7a:	009b      	lsls	r3, r3, #2
 8011d7c:	4413      	add	r3, r2
 8011d7e:	009b      	lsls	r3, r3, #2
 8011d80:	4a08      	ldr	r2, [pc, #32]	; (8011da4 <xTaskPriorityDisinherit+0x104>)
 8011d82:	441a      	add	r2, r3
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	3304      	adds	r3, #4
 8011d88:	4619      	mov	r1, r3
 8011d8a:	4610      	mov	r0, r2
 8011d8c:	f7fe f894 	bl	800feb8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011d90:	2301      	movs	r3, #1
 8011d92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011d94:	697b      	ldr	r3, [r7, #20]
	}
 8011d96:	4618      	mov	r0, r3
 8011d98:	3718      	adds	r7, #24
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}
 8011d9e:	bf00      	nop
 8011da0:	20000b64 	.word	0x20000b64
 8011da4:	20000b68 	.word	0x20000b68
 8011da8:	20000c6c 	.word	0x20000c6c

08011dac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b088      	sub	sp, #32
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011dba:	2301      	movs	r3, #1
 8011dbc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d077      	beq.n	8011eb4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011dc4:	69bb      	ldr	r3, [r7, #24]
 8011dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d10a      	bne.n	8011de2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dd0:	f383 8811 	msr	BASEPRI, r3
 8011dd4:	f3bf 8f6f 	isb	sy
 8011dd8:	f3bf 8f4f 	dsb	sy
 8011ddc:	60fb      	str	r3, [r7, #12]
}
 8011dde:	bf00      	nop
 8011de0:	e7fe      	b.n	8011de0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011de2:	69bb      	ldr	r3, [r7, #24]
 8011de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011de6:	683a      	ldr	r2, [r7, #0]
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d902      	bls.n	8011df2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	61fb      	str	r3, [r7, #28]
 8011df0:	e002      	b.n	8011df8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011df6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011df8:	69bb      	ldr	r3, [r7, #24]
 8011dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dfc:	69fa      	ldr	r2, [r7, #28]
 8011dfe:	429a      	cmp	r2, r3
 8011e00:	d058      	beq.n	8011eb4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011e02:	69bb      	ldr	r3, [r7, #24]
 8011e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e06:	697a      	ldr	r2, [r7, #20]
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d153      	bne.n	8011eb4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011e0c:	4b2b      	ldr	r3, [pc, #172]	; (8011ebc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	69ba      	ldr	r2, [r7, #24]
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d10a      	bne.n	8011e2c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e1a:	f383 8811 	msr	BASEPRI, r3
 8011e1e:	f3bf 8f6f 	isb	sy
 8011e22:	f3bf 8f4f 	dsb	sy
 8011e26:	60bb      	str	r3, [r7, #8]
}
 8011e28:	bf00      	nop
 8011e2a:	e7fe      	b.n	8011e2a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011e32:	69bb      	ldr	r3, [r7, #24]
 8011e34:	69fa      	ldr	r2, [r7, #28]
 8011e36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011e38:	69bb      	ldr	r3, [r7, #24]
 8011e3a:	699b      	ldr	r3, [r3, #24]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	db04      	blt.n	8011e4a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e40:	69fb      	ldr	r3, [r7, #28]
 8011e42:	f1c3 0207 	rsb	r2, r3, #7
 8011e46:	69bb      	ldr	r3, [r7, #24]
 8011e48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011e4a:	69bb      	ldr	r3, [r7, #24]
 8011e4c:	6959      	ldr	r1, [r3, #20]
 8011e4e:	693a      	ldr	r2, [r7, #16]
 8011e50:	4613      	mov	r3, r2
 8011e52:	009b      	lsls	r3, r3, #2
 8011e54:	4413      	add	r3, r2
 8011e56:	009b      	lsls	r3, r3, #2
 8011e58:	4a19      	ldr	r2, [pc, #100]	; (8011ec0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011e5a:	4413      	add	r3, r2
 8011e5c:	4299      	cmp	r1, r3
 8011e5e:	d129      	bne.n	8011eb4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e60:	69bb      	ldr	r3, [r7, #24]
 8011e62:	3304      	adds	r3, #4
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7fe f884 	bl	800ff72 <uxListRemove>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d10a      	bne.n	8011e86 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011e70:	69bb      	ldr	r3, [r7, #24]
 8011e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e74:	2201      	movs	r2, #1
 8011e76:	fa02 f303 	lsl.w	r3, r2, r3
 8011e7a:	43da      	mvns	r2, r3
 8011e7c:	4b11      	ldr	r3, [pc, #68]	; (8011ec4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	4013      	ands	r3, r2
 8011e82:	4a10      	ldr	r2, [pc, #64]	; (8011ec4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011e84:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011e86:	69bb      	ldr	r3, [r7, #24]
 8011e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e8a:	2201      	movs	r2, #1
 8011e8c:	409a      	lsls	r2, r3
 8011e8e:	4b0d      	ldr	r3, [pc, #52]	; (8011ec4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	4313      	orrs	r3, r2
 8011e94:	4a0b      	ldr	r2, [pc, #44]	; (8011ec4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011e96:	6013      	str	r3, [r2, #0]
 8011e98:	69bb      	ldr	r3, [r7, #24]
 8011e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e9c:	4613      	mov	r3, r2
 8011e9e:	009b      	lsls	r3, r3, #2
 8011ea0:	4413      	add	r3, r2
 8011ea2:	009b      	lsls	r3, r3, #2
 8011ea4:	4a06      	ldr	r2, [pc, #24]	; (8011ec0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011ea6:	441a      	add	r2, r3
 8011ea8:	69bb      	ldr	r3, [r7, #24]
 8011eaa:	3304      	adds	r3, #4
 8011eac:	4619      	mov	r1, r3
 8011eae:	4610      	mov	r0, r2
 8011eb0:	f7fe f802 	bl	800feb8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011eb4:	bf00      	nop
 8011eb6:	3720      	adds	r7, #32
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}
 8011ebc:	20000b64 	.word	0x20000b64
 8011ec0:	20000b68 	.word	0x20000b68
 8011ec4:	20000c6c 	.word	0x20000c6c

08011ec8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011ec8:	b480      	push	{r7}
 8011eca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011ecc:	4b07      	ldr	r3, [pc, #28]	; (8011eec <pvTaskIncrementMutexHeldCount+0x24>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d004      	beq.n	8011ede <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011ed4:	4b05      	ldr	r3, [pc, #20]	; (8011eec <pvTaskIncrementMutexHeldCount+0x24>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011eda:	3201      	adds	r2, #1
 8011edc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011ede:	4b03      	ldr	r3, [pc, #12]	; (8011eec <pvTaskIncrementMutexHeldCount+0x24>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
	}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eea:	4770      	bx	lr
 8011eec:	20000b64 	.word	0x20000b64

08011ef0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b084      	sub	sp, #16
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
 8011ef8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011efa:	4b29      	ldr	r3, [pc, #164]	; (8011fa0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f00:	4b28      	ldr	r3, [pc, #160]	; (8011fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	3304      	adds	r3, #4
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7fe f833 	bl	800ff72 <uxListRemove>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d10b      	bne.n	8011f2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011f12:	4b24      	ldr	r3, [pc, #144]	; (8011fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f18:	2201      	movs	r2, #1
 8011f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8011f1e:	43da      	mvns	r2, r3
 8011f20:	4b21      	ldr	r3, [pc, #132]	; (8011fa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	4013      	ands	r3, r2
 8011f26:	4a20      	ldr	r2, [pc, #128]	; (8011fa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011f28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f30:	d10a      	bne.n	8011f48 <prvAddCurrentTaskToDelayedList+0x58>
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d007      	beq.n	8011f48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f38:	4b1a      	ldr	r3, [pc, #104]	; (8011fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	3304      	adds	r3, #4
 8011f3e:	4619      	mov	r1, r3
 8011f40:	481a      	ldr	r0, [pc, #104]	; (8011fac <prvAddCurrentTaskToDelayedList+0xbc>)
 8011f42:	f7fd ffb9 	bl	800feb8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011f46:	e026      	b.n	8011f96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011f48:	68fa      	ldr	r2, [r7, #12]
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	4413      	add	r3, r2
 8011f4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011f50:	4b14      	ldr	r3, [pc, #80]	; (8011fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	68ba      	ldr	r2, [r7, #8]
 8011f56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011f58:	68ba      	ldr	r2, [r7, #8]
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d209      	bcs.n	8011f74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f60:	4b13      	ldr	r3, [pc, #76]	; (8011fb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011f62:	681a      	ldr	r2, [r3, #0]
 8011f64:	4b0f      	ldr	r3, [pc, #60]	; (8011fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	3304      	adds	r3, #4
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	4610      	mov	r0, r2
 8011f6e:	f7fd ffc7 	bl	800ff00 <vListInsert>
}
 8011f72:	e010      	b.n	8011f96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f74:	4b0f      	ldr	r3, [pc, #60]	; (8011fb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011f76:	681a      	ldr	r2, [r3, #0]
 8011f78:	4b0a      	ldr	r3, [pc, #40]	; (8011fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	3304      	adds	r3, #4
 8011f7e:	4619      	mov	r1, r3
 8011f80:	4610      	mov	r0, r2
 8011f82:	f7fd ffbd 	bl	800ff00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011f86:	4b0c      	ldr	r3, [pc, #48]	; (8011fb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	68ba      	ldr	r2, [r7, #8]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d202      	bcs.n	8011f96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011f90:	4a09      	ldr	r2, [pc, #36]	; (8011fb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	6013      	str	r3, [r2, #0]
}
 8011f96:	bf00      	nop
 8011f98:	3710      	adds	r7, #16
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}
 8011f9e:	bf00      	nop
 8011fa0:	20000c68 	.word	0x20000c68
 8011fa4:	20000b64 	.word	0x20000b64
 8011fa8:	20000c6c 	.word	0x20000c6c
 8011fac:	20000c50 	.word	0x20000c50
 8011fb0:	20000c20 	.word	0x20000c20
 8011fb4:	20000c1c 	.word	0x20000c1c
 8011fb8:	20000c84 	.word	0x20000c84

08011fbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b085      	sub	sp, #20
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	60f8      	str	r0, [r7, #12]
 8011fc4:	60b9      	str	r1, [r7, #8]
 8011fc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	3b04      	subs	r3, #4
 8011fcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	3b04      	subs	r3, #4
 8011fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	f023 0201 	bic.w	r2, r3, #1
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	3b04      	subs	r3, #4
 8011fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011fec:	4a0c      	ldr	r2, [pc, #48]	; (8012020 <pxPortInitialiseStack+0x64>)
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	3b14      	subs	r3, #20
 8011ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011ff8:	687a      	ldr	r2, [r7, #4]
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	3b04      	subs	r3, #4
 8012002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	f06f 0202 	mvn.w	r2, #2
 801200a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	3b20      	subs	r3, #32
 8012010:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012012:	68fb      	ldr	r3, [r7, #12]
}
 8012014:	4618      	mov	r0, r3
 8012016:	3714      	adds	r7, #20
 8012018:	46bd      	mov	sp, r7
 801201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201e:	4770      	bx	lr
 8012020:	08012025 	.word	0x08012025

08012024 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012024:	b480      	push	{r7}
 8012026:	b085      	sub	sp, #20
 8012028:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801202a:	2300      	movs	r3, #0
 801202c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801202e:	4b12      	ldr	r3, [pc, #72]	; (8012078 <prvTaskExitError+0x54>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012036:	d00a      	beq.n	801204e <prvTaskExitError+0x2a>
	__asm volatile
 8012038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801203c:	f383 8811 	msr	BASEPRI, r3
 8012040:	f3bf 8f6f 	isb	sy
 8012044:	f3bf 8f4f 	dsb	sy
 8012048:	60fb      	str	r3, [r7, #12]
}
 801204a:	bf00      	nop
 801204c:	e7fe      	b.n	801204c <prvTaskExitError+0x28>
	__asm volatile
 801204e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012052:	f383 8811 	msr	BASEPRI, r3
 8012056:	f3bf 8f6f 	isb	sy
 801205a:	f3bf 8f4f 	dsb	sy
 801205e:	60bb      	str	r3, [r7, #8]
}
 8012060:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012062:	bf00      	nop
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d0fc      	beq.n	8012064 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801206a:	bf00      	nop
 801206c:	bf00      	nop
 801206e:	3714      	adds	r7, #20
 8012070:	46bd      	mov	sp, r7
 8012072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012076:	4770      	bx	lr
 8012078:	2000001c 	.word	0x2000001c
 801207c:	00000000 	.word	0x00000000

08012080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012080:	4b07      	ldr	r3, [pc, #28]	; (80120a0 <pxCurrentTCBConst2>)
 8012082:	6819      	ldr	r1, [r3, #0]
 8012084:	6808      	ldr	r0, [r1, #0]
 8012086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801208a:	f380 8809 	msr	PSP, r0
 801208e:	f3bf 8f6f 	isb	sy
 8012092:	f04f 0000 	mov.w	r0, #0
 8012096:	f380 8811 	msr	BASEPRI, r0
 801209a:	4770      	bx	lr
 801209c:	f3af 8000 	nop.w

080120a0 <pxCurrentTCBConst2>:
 80120a0:	20000b64 	.word	0x20000b64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80120a4:	bf00      	nop
 80120a6:	bf00      	nop

080120a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80120a8:	4808      	ldr	r0, [pc, #32]	; (80120cc <prvPortStartFirstTask+0x24>)
 80120aa:	6800      	ldr	r0, [r0, #0]
 80120ac:	6800      	ldr	r0, [r0, #0]
 80120ae:	f380 8808 	msr	MSP, r0
 80120b2:	f04f 0000 	mov.w	r0, #0
 80120b6:	f380 8814 	msr	CONTROL, r0
 80120ba:	b662      	cpsie	i
 80120bc:	b661      	cpsie	f
 80120be:	f3bf 8f4f 	dsb	sy
 80120c2:	f3bf 8f6f 	isb	sy
 80120c6:	df00      	svc	0
 80120c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80120ca:	bf00      	nop
 80120cc:	e000ed08 	.word	0xe000ed08

080120d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b086      	sub	sp, #24
 80120d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80120d6:	4b46      	ldr	r3, [pc, #280]	; (80121f0 <xPortStartScheduler+0x120>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	4a46      	ldr	r2, [pc, #280]	; (80121f4 <xPortStartScheduler+0x124>)
 80120dc:	4293      	cmp	r3, r2
 80120de:	d10a      	bne.n	80120f6 <xPortStartScheduler+0x26>
	__asm volatile
 80120e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e4:	f383 8811 	msr	BASEPRI, r3
 80120e8:	f3bf 8f6f 	isb	sy
 80120ec:	f3bf 8f4f 	dsb	sy
 80120f0:	613b      	str	r3, [r7, #16]
}
 80120f2:	bf00      	nop
 80120f4:	e7fe      	b.n	80120f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80120f6:	4b3e      	ldr	r3, [pc, #248]	; (80121f0 <xPortStartScheduler+0x120>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	4a3f      	ldr	r2, [pc, #252]	; (80121f8 <xPortStartScheduler+0x128>)
 80120fc:	4293      	cmp	r3, r2
 80120fe:	d10a      	bne.n	8012116 <xPortStartScheduler+0x46>
	__asm volatile
 8012100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012104:	f383 8811 	msr	BASEPRI, r3
 8012108:	f3bf 8f6f 	isb	sy
 801210c:	f3bf 8f4f 	dsb	sy
 8012110:	60fb      	str	r3, [r7, #12]
}
 8012112:	bf00      	nop
 8012114:	e7fe      	b.n	8012114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012116:	4b39      	ldr	r3, [pc, #228]	; (80121fc <xPortStartScheduler+0x12c>)
 8012118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801211a:	697b      	ldr	r3, [r7, #20]
 801211c:	781b      	ldrb	r3, [r3, #0]
 801211e:	b2db      	uxtb	r3, r3
 8012120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	22ff      	movs	r2, #255	; 0xff
 8012126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	b2db      	uxtb	r3, r3
 801212e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012130:	78fb      	ldrb	r3, [r7, #3]
 8012132:	b2db      	uxtb	r3, r3
 8012134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012138:	b2da      	uxtb	r2, r3
 801213a:	4b31      	ldr	r3, [pc, #196]	; (8012200 <xPortStartScheduler+0x130>)
 801213c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801213e:	4b31      	ldr	r3, [pc, #196]	; (8012204 <xPortStartScheduler+0x134>)
 8012140:	2207      	movs	r2, #7
 8012142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012144:	e009      	b.n	801215a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012146:	4b2f      	ldr	r3, [pc, #188]	; (8012204 <xPortStartScheduler+0x134>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	3b01      	subs	r3, #1
 801214c:	4a2d      	ldr	r2, [pc, #180]	; (8012204 <xPortStartScheduler+0x134>)
 801214e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012150:	78fb      	ldrb	r3, [r7, #3]
 8012152:	b2db      	uxtb	r3, r3
 8012154:	005b      	lsls	r3, r3, #1
 8012156:	b2db      	uxtb	r3, r3
 8012158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801215a:	78fb      	ldrb	r3, [r7, #3]
 801215c:	b2db      	uxtb	r3, r3
 801215e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012162:	2b80      	cmp	r3, #128	; 0x80
 8012164:	d0ef      	beq.n	8012146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012166:	4b27      	ldr	r3, [pc, #156]	; (8012204 <xPortStartScheduler+0x134>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	f1c3 0307 	rsb	r3, r3, #7
 801216e:	2b04      	cmp	r3, #4
 8012170:	d00a      	beq.n	8012188 <xPortStartScheduler+0xb8>
	__asm volatile
 8012172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012176:	f383 8811 	msr	BASEPRI, r3
 801217a:	f3bf 8f6f 	isb	sy
 801217e:	f3bf 8f4f 	dsb	sy
 8012182:	60bb      	str	r3, [r7, #8]
}
 8012184:	bf00      	nop
 8012186:	e7fe      	b.n	8012186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012188:	4b1e      	ldr	r3, [pc, #120]	; (8012204 <xPortStartScheduler+0x134>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	021b      	lsls	r3, r3, #8
 801218e:	4a1d      	ldr	r2, [pc, #116]	; (8012204 <xPortStartScheduler+0x134>)
 8012190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012192:	4b1c      	ldr	r3, [pc, #112]	; (8012204 <xPortStartScheduler+0x134>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801219a:	4a1a      	ldr	r2, [pc, #104]	; (8012204 <xPortStartScheduler+0x134>)
 801219c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	b2da      	uxtb	r2, r3
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80121a6:	4b18      	ldr	r3, [pc, #96]	; (8012208 <xPortStartScheduler+0x138>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	4a17      	ldr	r2, [pc, #92]	; (8012208 <xPortStartScheduler+0x138>)
 80121ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80121b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80121b2:	4b15      	ldr	r3, [pc, #84]	; (8012208 <xPortStartScheduler+0x138>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	4a14      	ldr	r2, [pc, #80]	; (8012208 <xPortStartScheduler+0x138>)
 80121b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80121bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80121be:	f000 f8dd 	bl	801237c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80121c2:	4b12      	ldr	r3, [pc, #72]	; (801220c <xPortStartScheduler+0x13c>)
 80121c4:	2200      	movs	r2, #0
 80121c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80121c8:	f000 f8fc 	bl	80123c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80121cc:	4b10      	ldr	r3, [pc, #64]	; (8012210 <xPortStartScheduler+0x140>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	4a0f      	ldr	r2, [pc, #60]	; (8012210 <xPortStartScheduler+0x140>)
 80121d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80121d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80121d8:	f7ff ff66 	bl	80120a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80121dc:	f7ff fa2e 	bl	801163c <vTaskSwitchContext>
	prvTaskExitError();
 80121e0:	f7ff ff20 	bl	8012024 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80121e4:	2300      	movs	r3, #0
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	3718      	adds	r7, #24
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}
 80121ee:	bf00      	nop
 80121f0:	e000ed00 	.word	0xe000ed00
 80121f4:	410fc271 	.word	0x410fc271
 80121f8:	410fc270 	.word	0x410fc270
 80121fc:	e000e400 	.word	0xe000e400
 8012200:	20000c90 	.word	0x20000c90
 8012204:	20000c94 	.word	0x20000c94
 8012208:	e000ed20 	.word	0xe000ed20
 801220c:	2000001c 	.word	0x2000001c
 8012210:	e000ef34 	.word	0xe000ef34

08012214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012214:	b480      	push	{r7}
 8012216:	b083      	sub	sp, #12
 8012218:	af00      	add	r7, sp, #0
	__asm volatile
 801221a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801221e:	f383 8811 	msr	BASEPRI, r3
 8012222:	f3bf 8f6f 	isb	sy
 8012226:	f3bf 8f4f 	dsb	sy
 801222a:	607b      	str	r3, [r7, #4]
}
 801222c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801222e:	4b0f      	ldr	r3, [pc, #60]	; (801226c <vPortEnterCritical+0x58>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	3301      	adds	r3, #1
 8012234:	4a0d      	ldr	r2, [pc, #52]	; (801226c <vPortEnterCritical+0x58>)
 8012236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012238:	4b0c      	ldr	r3, [pc, #48]	; (801226c <vPortEnterCritical+0x58>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	2b01      	cmp	r3, #1
 801223e:	d10f      	bne.n	8012260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012240:	4b0b      	ldr	r3, [pc, #44]	; (8012270 <vPortEnterCritical+0x5c>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	b2db      	uxtb	r3, r3
 8012246:	2b00      	cmp	r3, #0
 8012248:	d00a      	beq.n	8012260 <vPortEnterCritical+0x4c>
	__asm volatile
 801224a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801224e:	f383 8811 	msr	BASEPRI, r3
 8012252:	f3bf 8f6f 	isb	sy
 8012256:	f3bf 8f4f 	dsb	sy
 801225a:	603b      	str	r3, [r7, #0]
}
 801225c:	bf00      	nop
 801225e:	e7fe      	b.n	801225e <vPortEnterCritical+0x4a>
	}
}
 8012260:	bf00      	nop
 8012262:	370c      	adds	r7, #12
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr
 801226c:	2000001c 	.word	0x2000001c
 8012270:	e000ed04 	.word	0xe000ed04

08012274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012274:	b480      	push	{r7}
 8012276:	b083      	sub	sp, #12
 8012278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801227a:	4b12      	ldr	r3, [pc, #72]	; (80122c4 <vPortExitCritical+0x50>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d10a      	bne.n	8012298 <vPortExitCritical+0x24>
	__asm volatile
 8012282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012286:	f383 8811 	msr	BASEPRI, r3
 801228a:	f3bf 8f6f 	isb	sy
 801228e:	f3bf 8f4f 	dsb	sy
 8012292:	607b      	str	r3, [r7, #4]
}
 8012294:	bf00      	nop
 8012296:	e7fe      	b.n	8012296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012298:	4b0a      	ldr	r3, [pc, #40]	; (80122c4 <vPortExitCritical+0x50>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	3b01      	subs	r3, #1
 801229e:	4a09      	ldr	r2, [pc, #36]	; (80122c4 <vPortExitCritical+0x50>)
 80122a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80122a2:	4b08      	ldr	r3, [pc, #32]	; (80122c4 <vPortExitCritical+0x50>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d105      	bne.n	80122b6 <vPortExitCritical+0x42>
 80122aa:	2300      	movs	r3, #0
 80122ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	f383 8811 	msr	BASEPRI, r3
}
 80122b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80122b6:	bf00      	nop
 80122b8:	370c      	adds	r7, #12
 80122ba:	46bd      	mov	sp, r7
 80122bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c0:	4770      	bx	lr
 80122c2:	bf00      	nop
 80122c4:	2000001c 	.word	0x2000001c
	...

080122d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80122d0:	f3ef 8009 	mrs	r0, PSP
 80122d4:	f3bf 8f6f 	isb	sy
 80122d8:	4b15      	ldr	r3, [pc, #84]	; (8012330 <pxCurrentTCBConst>)
 80122da:	681a      	ldr	r2, [r3, #0]
 80122dc:	f01e 0f10 	tst.w	lr, #16
 80122e0:	bf08      	it	eq
 80122e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80122e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ea:	6010      	str	r0, [r2, #0]
 80122ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80122f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80122f4:	f380 8811 	msr	BASEPRI, r0
 80122f8:	f3bf 8f4f 	dsb	sy
 80122fc:	f3bf 8f6f 	isb	sy
 8012300:	f7ff f99c 	bl	801163c <vTaskSwitchContext>
 8012304:	f04f 0000 	mov.w	r0, #0
 8012308:	f380 8811 	msr	BASEPRI, r0
 801230c:	bc09      	pop	{r0, r3}
 801230e:	6819      	ldr	r1, [r3, #0]
 8012310:	6808      	ldr	r0, [r1, #0]
 8012312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012316:	f01e 0f10 	tst.w	lr, #16
 801231a:	bf08      	it	eq
 801231c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012320:	f380 8809 	msr	PSP, r0
 8012324:	f3bf 8f6f 	isb	sy
 8012328:	4770      	bx	lr
 801232a:	bf00      	nop
 801232c:	f3af 8000 	nop.w

08012330 <pxCurrentTCBConst>:
 8012330:	20000b64 	.word	0x20000b64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012334:	bf00      	nop
 8012336:	bf00      	nop

08012338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
	__asm volatile
 801233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012342:	f383 8811 	msr	BASEPRI, r3
 8012346:	f3bf 8f6f 	isb	sy
 801234a:	f3bf 8f4f 	dsb	sy
 801234e:	607b      	str	r3, [r7, #4]
}
 8012350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012352:	f7ff f8bb 	bl	80114cc <xTaskIncrementTick>
 8012356:	4603      	mov	r3, r0
 8012358:	2b00      	cmp	r3, #0
 801235a:	d003      	beq.n	8012364 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801235c:	4b06      	ldr	r3, [pc, #24]	; (8012378 <SysTick_Handler+0x40>)
 801235e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012362:	601a      	str	r2, [r3, #0]
 8012364:	2300      	movs	r3, #0
 8012366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	f383 8811 	msr	BASEPRI, r3
}
 801236e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012370:	bf00      	nop
 8012372:	3708      	adds	r7, #8
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}
 8012378:	e000ed04 	.word	0xe000ed04

0801237c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801237c:	b480      	push	{r7}
 801237e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012380:	4b0b      	ldr	r3, [pc, #44]	; (80123b0 <vPortSetupTimerInterrupt+0x34>)
 8012382:	2200      	movs	r2, #0
 8012384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012386:	4b0b      	ldr	r3, [pc, #44]	; (80123b4 <vPortSetupTimerInterrupt+0x38>)
 8012388:	2200      	movs	r2, #0
 801238a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801238c:	4b0a      	ldr	r3, [pc, #40]	; (80123b8 <vPortSetupTimerInterrupt+0x3c>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	4a0a      	ldr	r2, [pc, #40]	; (80123bc <vPortSetupTimerInterrupt+0x40>)
 8012392:	fba2 2303 	umull	r2, r3, r2, r3
 8012396:	099b      	lsrs	r3, r3, #6
 8012398:	4a09      	ldr	r2, [pc, #36]	; (80123c0 <vPortSetupTimerInterrupt+0x44>)
 801239a:	3b01      	subs	r3, #1
 801239c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801239e:	4b04      	ldr	r3, [pc, #16]	; (80123b0 <vPortSetupTimerInterrupt+0x34>)
 80123a0:	2207      	movs	r2, #7
 80123a2:	601a      	str	r2, [r3, #0]
}
 80123a4:	bf00      	nop
 80123a6:	46bd      	mov	sp, r7
 80123a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ac:	4770      	bx	lr
 80123ae:	bf00      	nop
 80123b0:	e000e010 	.word	0xe000e010
 80123b4:	e000e018 	.word	0xe000e018
 80123b8:	20000010 	.word	0x20000010
 80123bc:	10624dd3 	.word	0x10624dd3
 80123c0:	e000e014 	.word	0xe000e014

080123c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80123c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80123d4 <vPortEnableVFP+0x10>
 80123c8:	6801      	ldr	r1, [r0, #0]
 80123ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80123ce:	6001      	str	r1, [r0, #0]
 80123d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80123d2:	bf00      	nop
 80123d4:	e000ed88 	.word	0xe000ed88

080123d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80123d8:	b480      	push	{r7}
 80123da:	b085      	sub	sp, #20
 80123dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80123de:	f3ef 8305 	mrs	r3, IPSR
 80123e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	2b0f      	cmp	r3, #15
 80123e8:	d914      	bls.n	8012414 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80123ea:	4a17      	ldr	r2, [pc, #92]	; (8012448 <vPortValidateInterruptPriority+0x70>)
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	4413      	add	r3, r2
 80123f0:	781b      	ldrb	r3, [r3, #0]
 80123f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80123f4:	4b15      	ldr	r3, [pc, #84]	; (801244c <vPortValidateInterruptPriority+0x74>)
 80123f6:	781b      	ldrb	r3, [r3, #0]
 80123f8:	7afa      	ldrb	r2, [r7, #11]
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d20a      	bcs.n	8012414 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80123fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012402:	f383 8811 	msr	BASEPRI, r3
 8012406:	f3bf 8f6f 	isb	sy
 801240a:	f3bf 8f4f 	dsb	sy
 801240e:	607b      	str	r3, [r7, #4]
}
 8012410:	bf00      	nop
 8012412:	e7fe      	b.n	8012412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012414:	4b0e      	ldr	r3, [pc, #56]	; (8012450 <vPortValidateInterruptPriority+0x78>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801241c:	4b0d      	ldr	r3, [pc, #52]	; (8012454 <vPortValidateInterruptPriority+0x7c>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	429a      	cmp	r2, r3
 8012422:	d90a      	bls.n	801243a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012428:	f383 8811 	msr	BASEPRI, r3
 801242c:	f3bf 8f6f 	isb	sy
 8012430:	f3bf 8f4f 	dsb	sy
 8012434:	603b      	str	r3, [r7, #0]
}
 8012436:	bf00      	nop
 8012438:	e7fe      	b.n	8012438 <vPortValidateInterruptPriority+0x60>
	}
 801243a:	bf00      	nop
 801243c:	3714      	adds	r7, #20
 801243e:	46bd      	mov	sp, r7
 8012440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012444:	4770      	bx	lr
 8012446:	bf00      	nop
 8012448:	e000e3f0 	.word	0xe000e3f0
 801244c:	20000c90 	.word	0x20000c90
 8012450:	e000ed0c 	.word	0xe000ed0c
 8012454:	20000c94 	.word	0x20000c94

08012458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b08a      	sub	sp, #40	; 0x28
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012460:	2300      	movs	r3, #0
 8012462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012464:	f7fe ff66 	bl	8011334 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012468:	4b5b      	ldr	r3, [pc, #364]	; (80125d8 <pvPortMalloc+0x180>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d101      	bne.n	8012474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012470:	f000 f920 	bl	80126b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012474:	4b59      	ldr	r3, [pc, #356]	; (80125dc <pvPortMalloc+0x184>)
 8012476:	681a      	ldr	r2, [r3, #0]
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	4013      	ands	r3, r2
 801247c:	2b00      	cmp	r3, #0
 801247e:	f040 8093 	bne.w	80125a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d01d      	beq.n	80124c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012488:	2208      	movs	r2, #8
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	4413      	add	r3, r2
 801248e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f003 0307 	and.w	r3, r3, #7
 8012496:	2b00      	cmp	r3, #0
 8012498:	d014      	beq.n	80124c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f023 0307 	bic.w	r3, r3, #7
 80124a0:	3308      	adds	r3, #8
 80124a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f003 0307 	and.w	r3, r3, #7
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d00a      	beq.n	80124c4 <pvPortMalloc+0x6c>
	__asm volatile
 80124ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b2:	f383 8811 	msr	BASEPRI, r3
 80124b6:	f3bf 8f6f 	isb	sy
 80124ba:	f3bf 8f4f 	dsb	sy
 80124be:	617b      	str	r3, [r7, #20]
}
 80124c0:	bf00      	nop
 80124c2:	e7fe      	b.n	80124c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d06e      	beq.n	80125a8 <pvPortMalloc+0x150>
 80124ca:	4b45      	ldr	r3, [pc, #276]	; (80125e0 <pvPortMalloc+0x188>)
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d869      	bhi.n	80125a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80124d4:	4b43      	ldr	r3, [pc, #268]	; (80125e4 <pvPortMalloc+0x18c>)
 80124d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80124d8:	4b42      	ldr	r3, [pc, #264]	; (80125e4 <pvPortMalloc+0x18c>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80124de:	e004      	b.n	80124ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80124e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80124e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80124ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ec:	685b      	ldr	r3, [r3, #4]
 80124ee:	687a      	ldr	r2, [r7, #4]
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d903      	bls.n	80124fc <pvPortMalloc+0xa4>
 80124f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d1f1      	bne.n	80124e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80124fc:	4b36      	ldr	r3, [pc, #216]	; (80125d8 <pvPortMalloc+0x180>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012502:	429a      	cmp	r2, r3
 8012504:	d050      	beq.n	80125a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012506:	6a3b      	ldr	r3, [r7, #32]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	2208      	movs	r2, #8
 801250c:	4413      	add	r3, r2
 801250e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012512:	681a      	ldr	r2, [r3, #0]
 8012514:	6a3b      	ldr	r3, [r7, #32]
 8012516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801251a:	685a      	ldr	r2, [r3, #4]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	1ad2      	subs	r2, r2, r3
 8012520:	2308      	movs	r3, #8
 8012522:	005b      	lsls	r3, r3, #1
 8012524:	429a      	cmp	r2, r3
 8012526:	d91f      	bls.n	8012568 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	4413      	add	r3, r2
 801252e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012530:	69bb      	ldr	r3, [r7, #24]
 8012532:	f003 0307 	and.w	r3, r3, #7
 8012536:	2b00      	cmp	r3, #0
 8012538:	d00a      	beq.n	8012550 <pvPortMalloc+0xf8>
	__asm volatile
 801253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801253e:	f383 8811 	msr	BASEPRI, r3
 8012542:	f3bf 8f6f 	isb	sy
 8012546:	f3bf 8f4f 	dsb	sy
 801254a:	613b      	str	r3, [r7, #16]
}
 801254c:	bf00      	nop
 801254e:	e7fe      	b.n	801254e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012552:	685a      	ldr	r2, [r3, #4]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	1ad2      	subs	r2, r2, r3
 8012558:	69bb      	ldr	r3, [r7, #24]
 801255a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255e:	687a      	ldr	r2, [r7, #4]
 8012560:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012562:	69b8      	ldr	r0, [r7, #24]
 8012564:	f000 f908 	bl	8012778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012568:	4b1d      	ldr	r3, [pc, #116]	; (80125e0 <pvPortMalloc+0x188>)
 801256a:	681a      	ldr	r2, [r3, #0]
 801256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	1ad3      	subs	r3, r2, r3
 8012572:	4a1b      	ldr	r2, [pc, #108]	; (80125e0 <pvPortMalloc+0x188>)
 8012574:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012576:	4b1a      	ldr	r3, [pc, #104]	; (80125e0 <pvPortMalloc+0x188>)
 8012578:	681a      	ldr	r2, [r3, #0]
 801257a:	4b1b      	ldr	r3, [pc, #108]	; (80125e8 <pvPortMalloc+0x190>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	429a      	cmp	r2, r3
 8012580:	d203      	bcs.n	801258a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012582:	4b17      	ldr	r3, [pc, #92]	; (80125e0 <pvPortMalloc+0x188>)
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	4a18      	ldr	r2, [pc, #96]	; (80125e8 <pvPortMalloc+0x190>)
 8012588:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801258c:	685a      	ldr	r2, [r3, #4]
 801258e:	4b13      	ldr	r3, [pc, #76]	; (80125dc <pvPortMalloc+0x184>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	431a      	orrs	r2, r3
 8012594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012596:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259a:	2200      	movs	r2, #0
 801259c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801259e:	4b13      	ldr	r3, [pc, #76]	; (80125ec <pvPortMalloc+0x194>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	3301      	adds	r3, #1
 80125a4:	4a11      	ldr	r2, [pc, #68]	; (80125ec <pvPortMalloc+0x194>)
 80125a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80125a8:	f7fe fed2 	bl	8011350 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80125ac:	69fb      	ldr	r3, [r7, #28]
 80125ae:	f003 0307 	and.w	r3, r3, #7
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d00a      	beq.n	80125cc <pvPortMalloc+0x174>
	__asm volatile
 80125b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ba:	f383 8811 	msr	BASEPRI, r3
 80125be:	f3bf 8f6f 	isb	sy
 80125c2:	f3bf 8f4f 	dsb	sy
 80125c6:	60fb      	str	r3, [r7, #12]
}
 80125c8:	bf00      	nop
 80125ca:	e7fe      	b.n	80125ca <pvPortMalloc+0x172>
	return pvReturn;
 80125cc:	69fb      	ldr	r3, [r7, #28]
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3728      	adds	r7, #40	; 0x28
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}
 80125d6:	bf00      	nop
 80125d8:	20008338 	.word	0x20008338
 80125dc:	2000834c 	.word	0x2000834c
 80125e0:	2000833c 	.word	0x2000833c
 80125e4:	20008330 	.word	0x20008330
 80125e8:	20008340 	.word	0x20008340
 80125ec:	20008344 	.word	0x20008344

080125f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b086      	sub	sp, #24
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d04d      	beq.n	801269e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012602:	2308      	movs	r3, #8
 8012604:	425b      	negs	r3, r3
 8012606:	697a      	ldr	r2, [r7, #20]
 8012608:	4413      	add	r3, r2
 801260a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	685a      	ldr	r2, [r3, #4]
 8012614:	4b24      	ldr	r3, [pc, #144]	; (80126a8 <vPortFree+0xb8>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	4013      	ands	r3, r2
 801261a:	2b00      	cmp	r3, #0
 801261c:	d10a      	bne.n	8012634 <vPortFree+0x44>
	__asm volatile
 801261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012622:	f383 8811 	msr	BASEPRI, r3
 8012626:	f3bf 8f6f 	isb	sy
 801262a:	f3bf 8f4f 	dsb	sy
 801262e:	60fb      	str	r3, [r7, #12]
}
 8012630:	bf00      	nop
 8012632:	e7fe      	b.n	8012632 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d00a      	beq.n	8012652 <vPortFree+0x62>
	__asm volatile
 801263c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012640:	f383 8811 	msr	BASEPRI, r3
 8012644:	f3bf 8f6f 	isb	sy
 8012648:	f3bf 8f4f 	dsb	sy
 801264c:	60bb      	str	r3, [r7, #8]
}
 801264e:	bf00      	nop
 8012650:	e7fe      	b.n	8012650 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012652:	693b      	ldr	r3, [r7, #16]
 8012654:	685a      	ldr	r2, [r3, #4]
 8012656:	4b14      	ldr	r3, [pc, #80]	; (80126a8 <vPortFree+0xb8>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	4013      	ands	r3, r2
 801265c:	2b00      	cmp	r3, #0
 801265e:	d01e      	beq.n	801269e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012660:	693b      	ldr	r3, [r7, #16]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d11a      	bne.n	801269e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	685a      	ldr	r2, [r3, #4]
 801266c:	4b0e      	ldr	r3, [pc, #56]	; (80126a8 <vPortFree+0xb8>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	43db      	mvns	r3, r3
 8012672:	401a      	ands	r2, r3
 8012674:	693b      	ldr	r3, [r7, #16]
 8012676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012678:	f7fe fe5c 	bl	8011334 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801267c:	693b      	ldr	r3, [r7, #16]
 801267e:	685a      	ldr	r2, [r3, #4]
 8012680:	4b0a      	ldr	r3, [pc, #40]	; (80126ac <vPortFree+0xbc>)
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	4413      	add	r3, r2
 8012686:	4a09      	ldr	r2, [pc, #36]	; (80126ac <vPortFree+0xbc>)
 8012688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801268a:	6938      	ldr	r0, [r7, #16]
 801268c:	f000 f874 	bl	8012778 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012690:	4b07      	ldr	r3, [pc, #28]	; (80126b0 <vPortFree+0xc0>)
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	3301      	adds	r3, #1
 8012696:	4a06      	ldr	r2, [pc, #24]	; (80126b0 <vPortFree+0xc0>)
 8012698:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801269a:	f7fe fe59 	bl	8011350 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801269e:	bf00      	nop
 80126a0:	3718      	adds	r7, #24
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	bf00      	nop
 80126a8:	2000834c 	.word	0x2000834c
 80126ac:	2000833c 	.word	0x2000833c
 80126b0:	20008348 	.word	0x20008348

080126b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80126b4:	b480      	push	{r7}
 80126b6:	b085      	sub	sp, #20
 80126b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80126ba:	f247 6398 	movw	r3, #30360	; 0x7698
 80126be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80126c0:	4b27      	ldr	r3, [pc, #156]	; (8012760 <prvHeapInit+0xac>)
 80126c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	f003 0307 	and.w	r3, r3, #7
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d00c      	beq.n	80126e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	3307      	adds	r3, #7
 80126d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	f023 0307 	bic.w	r3, r3, #7
 80126da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80126dc:	68ba      	ldr	r2, [r7, #8]
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	1ad3      	subs	r3, r2, r3
 80126e2:	4a1f      	ldr	r2, [pc, #124]	; (8012760 <prvHeapInit+0xac>)
 80126e4:	4413      	add	r3, r2
 80126e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80126ec:	4a1d      	ldr	r2, [pc, #116]	; (8012764 <prvHeapInit+0xb0>)
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80126f2:	4b1c      	ldr	r3, [pc, #112]	; (8012764 <prvHeapInit+0xb0>)
 80126f4:	2200      	movs	r2, #0
 80126f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	68ba      	ldr	r2, [r7, #8]
 80126fc:	4413      	add	r3, r2
 80126fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012700:	2208      	movs	r2, #8
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	1a9b      	subs	r3, r3, r2
 8012706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	f023 0307 	bic.w	r3, r3, #7
 801270e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	4a15      	ldr	r2, [pc, #84]	; (8012768 <prvHeapInit+0xb4>)
 8012714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012716:	4b14      	ldr	r3, [pc, #80]	; (8012768 <prvHeapInit+0xb4>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	2200      	movs	r2, #0
 801271c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801271e:	4b12      	ldr	r3, [pc, #72]	; (8012768 <prvHeapInit+0xb4>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	2200      	movs	r2, #0
 8012724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	68fa      	ldr	r2, [r7, #12]
 801272e:	1ad2      	subs	r2, r2, r3
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012734:	4b0c      	ldr	r3, [pc, #48]	; (8012768 <prvHeapInit+0xb4>)
 8012736:	681a      	ldr	r2, [r3, #0]
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	4a0a      	ldr	r2, [pc, #40]	; (801276c <prvHeapInit+0xb8>)
 8012742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	685b      	ldr	r3, [r3, #4]
 8012748:	4a09      	ldr	r2, [pc, #36]	; (8012770 <prvHeapInit+0xbc>)
 801274a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801274c:	4b09      	ldr	r3, [pc, #36]	; (8012774 <prvHeapInit+0xc0>)
 801274e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012752:	601a      	str	r2, [r3, #0]
}
 8012754:	bf00      	nop
 8012756:	3714      	adds	r7, #20
 8012758:	46bd      	mov	sp, r7
 801275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275e:	4770      	bx	lr
 8012760:	20000c98 	.word	0x20000c98
 8012764:	20008330 	.word	0x20008330
 8012768:	20008338 	.word	0x20008338
 801276c:	20008340 	.word	0x20008340
 8012770:	2000833c 	.word	0x2000833c
 8012774:	2000834c 	.word	0x2000834c

08012778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012778:	b480      	push	{r7}
 801277a:	b085      	sub	sp, #20
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012780:	4b28      	ldr	r3, [pc, #160]	; (8012824 <prvInsertBlockIntoFreeList+0xac>)
 8012782:	60fb      	str	r3, [r7, #12]
 8012784:	e002      	b.n	801278c <prvInsertBlockIntoFreeList+0x14>
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	60fb      	str	r3, [r7, #12]
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	687a      	ldr	r2, [r7, #4]
 8012792:	429a      	cmp	r2, r3
 8012794:	d8f7      	bhi.n	8012786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	68ba      	ldr	r2, [r7, #8]
 80127a0:	4413      	add	r3, r2
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d108      	bne.n	80127ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	685a      	ldr	r2, [r3, #4]
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	685b      	ldr	r3, [r3, #4]
 80127b0:	441a      	add	r2, r3
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	68ba      	ldr	r2, [r7, #8]
 80127c4:	441a      	add	r2, r3
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d118      	bne.n	8012800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	681a      	ldr	r2, [r3, #0]
 80127d2:	4b15      	ldr	r3, [pc, #84]	; (8012828 <prvInsertBlockIntoFreeList+0xb0>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d00d      	beq.n	80127f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	685a      	ldr	r2, [r3, #4]
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	441a      	add	r2, r3
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	681a      	ldr	r2, [r3, #0]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	601a      	str	r2, [r3, #0]
 80127f4:	e008      	b.n	8012808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80127f6:	4b0c      	ldr	r3, [pc, #48]	; (8012828 <prvInsertBlockIntoFreeList+0xb0>)
 80127f8:	681a      	ldr	r2, [r3, #0]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	601a      	str	r2, [r3, #0]
 80127fe:	e003      	b.n	8012808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	681a      	ldr	r2, [r3, #0]
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012808:	68fa      	ldr	r2, [r7, #12]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	429a      	cmp	r2, r3
 801280e:	d002      	beq.n	8012816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	687a      	ldr	r2, [r7, #4]
 8012814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012816:	bf00      	nop
 8012818:	3714      	adds	r7, #20
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr
 8012822:	bf00      	nop
 8012824:	20008330 	.word	0x20008330
 8012828:	20008338 	.word	0x20008338

0801282c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b084      	sub	sp, #16
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
 8012834:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012836:	f009 fd5b 	bl	801c2f0 <sys_timeouts_sleeptime>
 801283a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012842:	d10b      	bne.n	801285c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012844:	4813      	ldr	r0, [pc, #76]	; (8012894 <tcpip_timeouts_mbox_fetch+0x68>)
 8012846:	f00c faca 	bl	801edde <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801284a:	2200      	movs	r2, #0
 801284c:	6839      	ldr	r1, [r7, #0]
 801284e:	6878      	ldr	r0, [r7, #4]
 8012850:	f00c fa3c 	bl	801eccc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012854:	480f      	ldr	r0, [pc, #60]	; (8012894 <tcpip_timeouts_mbox_fetch+0x68>)
 8012856:	f00c fab3 	bl	801edc0 <sys_mutex_lock>
    return;
 801285a:	e018      	b.n	801288e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d102      	bne.n	8012868 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012862:	f009 fd0b 	bl	801c27c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012866:	e7e6      	b.n	8012836 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012868:	480a      	ldr	r0, [pc, #40]	; (8012894 <tcpip_timeouts_mbox_fetch+0x68>)
 801286a:	f00c fab8 	bl	801edde <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801286e:	68fa      	ldr	r2, [r7, #12]
 8012870:	6839      	ldr	r1, [r7, #0]
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f00c fa2a 	bl	801eccc <sys_arch_mbox_fetch>
 8012878:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801287a:	4806      	ldr	r0, [pc, #24]	; (8012894 <tcpip_timeouts_mbox_fetch+0x68>)
 801287c:	f00c faa0 	bl	801edc0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012880:	68bb      	ldr	r3, [r7, #8]
 8012882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012886:	d102      	bne.n	801288e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012888:	f009 fcf8 	bl	801c27c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801288c:	e7d3      	b.n	8012836 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801288e:	3710      	adds	r7, #16
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}
 8012894:	2001099c 	.word	0x2001099c

08012898 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b084      	sub	sp, #16
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80128a0:	4810      	ldr	r0, [pc, #64]	; (80128e4 <tcpip_thread+0x4c>)
 80128a2:	f00c fa8d 	bl	801edc0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80128a6:	4b10      	ldr	r3, [pc, #64]	; (80128e8 <tcpip_thread+0x50>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d005      	beq.n	80128ba <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80128ae:	4b0e      	ldr	r3, [pc, #56]	; (80128e8 <tcpip_thread+0x50>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	4a0e      	ldr	r2, [pc, #56]	; (80128ec <tcpip_thread+0x54>)
 80128b4:	6812      	ldr	r2, [r2, #0]
 80128b6:	4610      	mov	r0, r2
 80128b8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80128ba:	f107 030c 	add.w	r3, r7, #12
 80128be:	4619      	mov	r1, r3
 80128c0:	480b      	ldr	r0, [pc, #44]	; (80128f0 <tcpip_thread+0x58>)
 80128c2:	f7ff ffb3 	bl	801282c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d106      	bne.n	80128da <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80128cc:	4b09      	ldr	r3, [pc, #36]	; (80128f4 <tcpip_thread+0x5c>)
 80128ce:	2291      	movs	r2, #145	; 0x91
 80128d0:	4909      	ldr	r1, [pc, #36]	; (80128f8 <tcpip_thread+0x60>)
 80128d2:	480a      	ldr	r0, [pc, #40]	; (80128fc <tcpip_thread+0x64>)
 80128d4:	f00c fb3a 	bl	801ef4c <iprintf>
      continue;
 80128d8:	e003      	b.n	80128e2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	4618      	mov	r0, r3
 80128de:	f000 f80f 	bl	8012900 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80128e2:	e7ea      	b.n	80128ba <tcpip_thread+0x22>
 80128e4:	2001099c 	.word	0x2001099c
 80128e8:	20008350 	.word	0x20008350
 80128ec:	20008354 	.word	0x20008354
 80128f0:	20008358 	.word	0x20008358
 80128f4:	080210fc 	.word	0x080210fc
 80128f8:	0802112c 	.word	0x0802112c
 80128fc:	0802114c 	.word	0x0802114c

08012900 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	2b02      	cmp	r3, #2
 801290e:	d026      	beq.n	801295e <tcpip_thread_handle_msg+0x5e>
 8012910:	2b02      	cmp	r3, #2
 8012912:	dc2b      	bgt.n	801296c <tcpip_thread_handle_msg+0x6c>
 8012914:	2b00      	cmp	r3, #0
 8012916:	d002      	beq.n	801291e <tcpip_thread_handle_msg+0x1e>
 8012918:	2b01      	cmp	r3, #1
 801291a:	d015      	beq.n	8012948 <tcpip_thread_handle_msg+0x48>
 801291c:	e026      	b.n	801296c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	68db      	ldr	r3, [r3, #12]
 8012922:	687a      	ldr	r2, [r7, #4]
 8012924:	6850      	ldr	r0, [r2, #4]
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	6892      	ldr	r2, [r2, #8]
 801292a:	4611      	mov	r1, r2
 801292c:	4798      	blx	r3
 801292e:	4603      	mov	r3, r0
 8012930:	2b00      	cmp	r3, #0
 8012932:	d004      	beq.n	801293e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	685b      	ldr	r3, [r3, #4]
 8012938:	4618      	mov	r0, r3
 801293a:	f003 f8a7 	bl	8015a8c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801293e:	6879      	ldr	r1, [r7, #4]
 8012940:	2009      	movs	r0, #9
 8012942:	f002 f9ed 	bl	8014d20 <memp_free>
      break;
 8012946:	e018      	b.n	801297a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	685b      	ldr	r3, [r3, #4]
 801294c:	687a      	ldr	r2, [r7, #4]
 801294e:	6892      	ldr	r2, [r2, #8]
 8012950:	4610      	mov	r0, r2
 8012952:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012954:	6879      	ldr	r1, [r7, #4]
 8012956:	2008      	movs	r0, #8
 8012958:	f002 f9e2 	bl	8014d20 <memp_free>
      break;
 801295c:	e00d      	b.n	801297a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	685b      	ldr	r3, [r3, #4]
 8012962:	687a      	ldr	r2, [r7, #4]
 8012964:	6892      	ldr	r2, [r2, #8]
 8012966:	4610      	mov	r0, r2
 8012968:	4798      	blx	r3
      break;
 801296a:	e006      	b.n	801297a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801296c:	4b05      	ldr	r3, [pc, #20]	; (8012984 <tcpip_thread_handle_msg+0x84>)
 801296e:	22cf      	movs	r2, #207	; 0xcf
 8012970:	4905      	ldr	r1, [pc, #20]	; (8012988 <tcpip_thread_handle_msg+0x88>)
 8012972:	4806      	ldr	r0, [pc, #24]	; (801298c <tcpip_thread_handle_msg+0x8c>)
 8012974:	f00c faea 	bl	801ef4c <iprintf>
      break;
 8012978:	bf00      	nop
  }
}
 801297a:	bf00      	nop
 801297c:	3708      	adds	r7, #8
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
 8012982:	bf00      	nop
 8012984:	080210fc 	.word	0x080210fc
 8012988:	0802112c 	.word	0x0802112c
 801298c:	0802114c 	.word	0x0802114c

08012990 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b086      	sub	sp, #24
 8012994:	af00      	add	r7, sp, #0
 8012996:	60f8      	str	r0, [r7, #12]
 8012998:	60b9      	str	r1, [r7, #8]
 801299a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801299c:	481a      	ldr	r0, [pc, #104]	; (8012a08 <tcpip_inpkt+0x78>)
 801299e:	f00c f9d4 	bl	801ed4a <sys_mbox_valid>
 80129a2:	4603      	mov	r3, r0
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d105      	bne.n	80129b4 <tcpip_inpkt+0x24>
 80129a8:	4b18      	ldr	r3, [pc, #96]	; (8012a0c <tcpip_inpkt+0x7c>)
 80129aa:	22fc      	movs	r2, #252	; 0xfc
 80129ac:	4918      	ldr	r1, [pc, #96]	; (8012a10 <tcpip_inpkt+0x80>)
 80129ae:	4819      	ldr	r0, [pc, #100]	; (8012a14 <tcpip_inpkt+0x84>)
 80129b0:	f00c facc 	bl	801ef4c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80129b4:	2009      	movs	r0, #9
 80129b6:	f002 f961 	bl	8014c7c <memp_malloc>
 80129ba:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d102      	bne.n	80129c8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80129c2:	f04f 33ff 	mov.w	r3, #4294967295
 80129c6:	e01a      	b.n	80129fe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	2200      	movs	r2, #0
 80129cc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80129ce:	697b      	ldr	r3, [r7, #20]
 80129d0:	68fa      	ldr	r2, [r7, #12]
 80129d2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	68ba      	ldr	r2, [r7, #8]
 80129d8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80129da:	697b      	ldr	r3, [r7, #20]
 80129dc:	687a      	ldr	r2, [r7, #4]
 80129de:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80129e0:	6979      	ldr	r1, [r7, #20]
 80129e2:	4809      	ldr	r0, [pc, #36]	; (8012a08 <tcpip_inpkt+0x78>)
 80129e4:	f00c f958 	bl	801ec98 <sys_mbox_trypost>
 80129e8:	4603      	mov	r3, r0
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d006      	beq.n	80129fc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80129ee:	6979      	ldr	r1, [r7, #20]
 80129f0:	2009      	movs	r0, #9
 80129f2:	f002 f995 	bl	8014d20 <memp_free>
    return ERR_MEM;
 80129f6:	f04f 33ff 	mov.w	r3, #4294967295
 80129fa:	e000      	b.n	80129fe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80129fc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	3718      	adds	r7, #24
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}
 8012a06:	bf00      	nop
 8012a08:	20008358 	.word	0x20008358
 8012a0c:	080210fc 	.word	0x080210fc
 8012a10:	08021174 	.word	0x08021174
 8012a14:	0802114c 	.word	0x0802114c

08012a18 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b082      	sub	sp, #8
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a28:	f003 0318 	and.w	r3, r3, #24
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d006      	beq.n	8012a3e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012a30:	4a08      	ldr	r2, [pc, #32]	; (8012a54 <tcpip_input+0x3c>)
 8012a32:	6839      	ldr	r1, [r7, #0]
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f7ff ffab 	bl	8012990 <tcpip_inpkt>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	e005      	b.n	8012a4a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012a3e:	4a06      	ldr	r2, [pc, #24]	; (8012a58 <tcpip_input+0x40>)
 8012a40:	6839      	ldr	r1, [r7, #0]
 8012a42:	6878      	ldr	r0, [r7, #4]
 8012a44:	f7ff ffa4 	bl	8012990 <tcpip_inpkt>
 8012a48:	4603      	mov	r3, r0
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	3708      	adds	r7, #8
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}
 8012a52:	bf00      	nop
 8012a54:	0801eaa9 	.word	0x0801eaa9
 8012a58:	0801d9bd 	.word	0x0801d9bd

08012a5c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012a66:	4819      	ldr	r0, [pc, #100]	; (8012acc <tcpip_try_callback+0x70>)
 8012a68:	f00c f96f 	bl	801ed4a <sys_mbox_valid>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d106      	bne.n	8012a80 <tcpip_try_callback+0x24>
 8012a72:	4b17      	ldr	r3, [pc, #92]	; (8012ad0 <tcpip_try_callback+0x74>)
 8012a74:	f240 125d 	movw	r2, #349	; 0x15d
 8012a78:	4916      	ldr	r1, [pc, #88]	; (8012ad4 <tcpip_try_callback+0x78>)
 8012a7a:	4817      	ldr	r0, [pc, #92]	; (8012ad8 <tcpip_try_callback+0x7c>)
 8012a7c:	f00c fa66 	bl	801ef4c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012a80:	2008      	movs	r0, #8
 8012a82:	f002 f8fb 	bl	8014c7c <memp_malloc>
 8012a86:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d102      	bne.n	8012a94 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a92:	e017      	b.n	8012ac4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	2201      	movs	r2, #1
 8012a98:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	687a      	ldr	r2, [r7, #4]
 8012a9e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	683a      	ldr	r2, [r7, #0]
 8012aa4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012aa6:	68f9      	ldr	r1, [r7, #12]
 8012aa8:	4808      	ldr	r0, [pc, #32]	; (8012acc <tcpip_try_callback+0x70>)
 8012aaa:	f00c f8f5 	bl	801ec98 <sys_mbox_trypost>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d006      	beq.n	8012ac2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012ab4:	68f9      	ldr	r1, [r7, #12]
 8012ab6:	2008      	movs	r0, #8
 8012ab8:	f002 f932 	bl	8014d20 <memp_free>
    return ERR_MEM;
 8012abc:	f04f 33ff 	mov.w	r3, #4294967295
 8012ac0:	e000      	b.n	8012ac4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012ac2:	2300      	movs	r3, #0
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3710      	adds	r7, #16
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}
 8012acc:	20008358 	.word	0x20008358
 8012ad0:	080210fc 	.word	0x080210fc
 8012ad4:	08021174 	.word	0x08021174
 8012ad8:	0802114c 	.word	0x0802114c

08012adc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b084      	sub	sp, #16
 8012ae0:	af02      	add	r7, sp, #8
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012ae6:	f001 fc41 	bl	801436c <lwip_init>

  tcpip_init_done = initfunc;
 8012aea:	4a17      	ldr	r2, [pc, #92]	; (8012b48 <tcpip_init+0x6c>)
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012af0:	4a16      	ldr	r2, [pc, #88]	; (8012b4c <tcpip_init+0x70>)
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012af6:	2106      	movs	r1, #6
 8012af8:	4815      	ldr	r0, [pc, #84]	; (8012b50 <tcpip_init+0x74>)
 8012afa:	f00c f8ab 	bl	801ec54 <sys_mbox_new>
 8012afe:	4603      	mov	r3, r0
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d006      	beq.n	8012b12 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012b04:	4b13      	ldr	r3, [pc, #76]	; (8012b54 <tcpip_init+0x78>)
 8012b06:	f240 2261 	movw	r2, #609	; 0x261
 8012b0a:	4913      	ldr	r1, [pc, #76]	; (8012b58 <tcpip_init+0x7c>)
 8012b0c:	4813      	ldr	r0, [pc, #76]	; (8012b5c <tcpip_init+0x80>)
 8012b0e:	f00c fa1d 	bl	801ef4c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012b12:	4813      	ldr	r0, [pc, #76]	; (8012b60 <tcpip_init+0x84>)
 8012b14:	f00c f938 	bl	801ed88 <sys_mutex_new>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d006      	beq.n	8012b2c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012b1e:	4b0d      	ldr	r3, [pc, #52]	; (8012b54 <tcpip_init+0x78>)
 8012b20:	f240 2265 	movw	r2, #613	; 0x265
 8012b24:	490f      	ldr	r1, [pc, #60]	; (8012b64 <tcpip_init+0x88>)
 8012b26:	480d      	ldr	r0, [pc, #52]	; (8012b5c <tcpip_init+0x80>)
 8012b28:	f00c fa10 	bl	801ef4c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	9300      	str	r3, [sp, #0]
 8012b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012b34:	2200      	movs	r2, #0
 8012b36:	490c      	ldr	r1, [pc, #48]	; (8012b68 <tcpip_init+0x8c>)
 8012b38:	480c      	ldr	r0, [pc, #48]	; (8012b6c <tcpip_init+0x90>)
 8012b3a:	f00c f95d 	bl	801edf8 <sys_thread_new>
}
 8012b3e:	bf00      	nop
 8012b40:	3708      	adds	r7, #8
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	20008350 	.word	0x20008350
 8012b4c:	20008354 	.word	0x20008354
 8012b50:	20008358 	.word	0x20008358
 8012b54:	080210fc 	.word	0x080210fc
 8012b58:	08021184 	.word	0x08021184
 8012b5c:	0802114c 	.word	0x0802114c
 8012b60:	2001099c 	.word	0x2001099c
 8012b64:	080211a8 	.word	0x080211a8
 8012b68:	08012899 	.word	0x08012899
 8012b6c:	080211cc 	.word	0x080211cc

08012b70 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b084      	sub	sp, #16
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d002      	beq.n	8012b86 <fs_open+0x16>
 8012b80:	683b      	ldr	r3, [r7, #0]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d102      	bne.n	8012b8c <fs_open+0x1c>
    return ERR_ARG;
 8012b86:	f06f 030f 	mvn.w	r3, #15
 8012b8a:	e028      	b.n	8012bde <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8012b8c:	4b16      	ldr	r3, [pc, #88]	; (8012be8 <fs_open+0x78>)
 8012b8e:	60fb      	str	r3, [r7, #12]
 8012b90:	e020      	b.n	8012bd4 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	685b      	ldr	r3, [r3, #4]
 8012b96:	4619      	mov	r1, r3
 8012b98:	6838      	ldr	r0, [r7, #0]
 8012b9a:	f7ed fb19 	bl	80001d0 <strcmp>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d114      	bne.n	8012bce <fs_open+0x5e>
      file->data = (const char *)f->data;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	689a      	ldr	r2, [r3, #8]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	68da      	ldr	r2, [r3, #12]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	68da      	ldr	r2, [r3, #12]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	7c1a      	ldrb	r2, [r3, #16]
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8012bca:	2300      	movs	r3, #0
 8012bcc:	e007      	b.n	8012bde <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	60fb      	str	r3, [r7, #12]
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d1db      	bne.n	8012b92 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8012bda:	f06f 0305 	mvn.w	r3, #5
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3710      	adds	r7, #16
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}
 8012be6:	bf00      	nop
 8012be8:	0807ab34 	.word	0x0807ab34

08012bec <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8012bec:	b480      	push	{r7}
 8012bee:	b083      	sub	sp, #12
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8012bf4:	bf00      	nop
 8012bf6:	370c      	adds	r7, #12
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfe:	4770      	bx	lr

08012c00 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8012c00:	b480      	push	{r7}
 8012c02:	b083      	sub	sp, #12
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	685a      	ldr	r2, [r3, #4]
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	689b      	ldr	r3, [r3, #8]
 8012c10:	1ad3      	subs	r3, r2, r3
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	370c      	adds	r7, #12
 8012c16:	46bd      	mov	sp, r7
 8012c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1c:	4770      	bx	lr

08012c1e <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8012c1e:	b580      	push	{r7, lr}
 8012c20:	b082      	sub	sp, #8
 8012c22:	af00      	add	r7, sp, #0
 8012c24:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8012c26:	22b0      	movs	r2, #176	; 0xb0
 8012c28:	2100      	movs	r1, #0
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f00c f986 	bl	801ef3c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8012c30:	bf00      	nop
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}

08012c38 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8012c3e:	20b0      	movs	r0, #176	; 0xb0
 8012c40:	f001 fe9a 	bl	8014978 <mem_malloc>
 8012c44:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d002      	beq.n	8012c52 <http_state_alloc+0x1a>
    http_state_init(ret);
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f7ff ffe6 	bl	8012c1e <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8012c52:	687b      	ldr	r3, [r7, #4]
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3708      	adds	r7, #8
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <httpd_post_begin>:

err_t
httpd_post_begin(void *connection, const char *uri, const char *http_request,
                 u16_t http_request_len, int content_len, char *response_uri,
                 u16_t response_uri_len, u8_t *post_auto_wnd)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	607a      	str	r2, [r7, #4]
 8012c68:	807b      	strh	r3, [r7, #2]
  LWIP_UNUSED_ARG(connection);
  LWIP_UNUSED_ARG(http_request);
  LWIP_UNUSED_ARG(http_request_len);
  LWIP_UNUSED_ARG(content_len);
  LWIP_UNUSED_ARG(post_auto_wnd);
  if (!memcmp(uri, "/login.cgi", 11)) {
 8012c6a:	220b      	movs	r2, #11
 8012c6c:	4911      	ldr	r1, [pc, #68]	; (8012cb4 <httpd_post_begin+0x58>)
 8012c6e:	68b8      	ldr	r0, [r7, #8]
 8012c70:	f00c f92e 	bl	801eed0 <memcmp>
 8012c74:	4603      	mov	r3, r0
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d115      	bne.n	8012ca6 <httpd_post_begin+0x4a>
    if (current_connection != connection) {
 8012c7a:	4b0f      	ldr	r3, [pc, #60]	; (8012cb8 <httpd_post_begin+0x5c>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	68fa      	ldr	r2, [r7, #12]
 8012c80:	429a      	cmp	r2, r3
 8012c82:	d010      	beq.n	8012ca6 <httpd_post_begin+0x4a>
      current_connection = connection;
 8012c84:	4a0c      	ldr	r2, [pc, #48]	; (8012cb8 <httpd_post_begin+0x5c>)
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	6013      	str	r3, [r2, #0]
      valid_connection = NULL;
 8012c8a:	4b0c      	ldr	r3, [pc, #48]	; (8012cbc <httpd_post_begin+0x60>)
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	601a      	str	r2, [r3, #0]
      /* default page is "login failed" */
      snprintf(response_uri, response_uri_len, "/loginfail.html");
 8012c90:	8c3b      	ldrh	r3, [r7, #32]
 8012c92:	4a0b      	ldr	r2, [pc, #44]	; (8012cc0 <httpd_post_begin+0x64>)
 8012c94:	4619      	mov	r1, r3
 8012c96:	69f8      	ldr	r0, [r7, #28]
 8012c98:	f00c fa26 	bl	801f0e8 <sniprintf>
      /* e.g. for large uploads to slow flash over a fast connection, you should
         manually update the rx window. That way, a sender can only send a full
         tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
         We do not need to throttle upload speed here, so: */
      *post_auto_wnd = 1;
 8012c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	701a      	strb	r2, [r3, #0]
      return ERR_OK;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	e001      	b.n	8012caa <httpd_post_begin+0x4e>
    }
  }
  return ERR_VAL;
 8012ca6:	f06f 0305 	mvn.w	r3, #5
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3710      	adds	r7, #16
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	bf00      	nop
 8012cb4:	0802121c 	.word	0x0802121c
 8012cb8:	2000c7ac 	.word	0x2000c7ac
 8012cbc:	2000c7b0 	.word	0x2000c7b0
 8012cc0:	08021228 	.word	0x08021228

08012cc4 <first_end>:

int first_end(char * k1,const char* l){
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b084      	sub	sp, #16
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
 8012ccc:	6039      	str	r1, [r7, #0]
 int i=0;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	60fb      	str	r3, [r7, #12]
  for(i=0;i<strlen(k1);i++){
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	60fb      	str	r3, [r7, #12]
 8012cd6:	e00a      	b.n	8012cee <first_end+0x2a>
    if(*l==k1[i]){
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	781a      	ldrb	r2, [r3, #0]
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	6879      	ldr	r1, [r7, #4]
 8012ce0:	440b      	add	r3, r1
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	d00a      	beq.n	8012cfe <first_end+0x3a>
  for(i=0;i<strlen(k1);i++){
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	3301      	adds	r3, #1
 8012cec:	60fb      	str	r3, [r7, #12]
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f7ed fa78 	bl	80001e4 <strlen>
 8012cf4:	4602      	mov	r2, r0
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d8ed      	bhi.n	8012cd8 <first_end+0x14>
 8012cfc:	e000      	b.n	8012d00 <first_end+0x3c>
    //  printf("wo %d\n",i-1);
      break;
 8012cfe:	bf00      	nop
    }
  }
  return i;
 8012d00:	68fb      	ldr	r3, [r7, #12]
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3710      	adds	r7, #16
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}
	...

08012d0c <httpd_post_receive_data>:



err_t
httpd_post_receive_data(void *connection, struct pbuf *p)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b092      	sub	sp, #72	; 0x48
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
 8012d14:	6039      	str	r1, [r7, #0]
 memset(http_post_payload,0,LWIP_HTTPD_POST_MAX_PAYLOAD_LEN);
 8012d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012d1a:	2100      	movs	r1, #0
 8012d1c:	4870      	ldr	r0, [pc, #448]	; (8012ee0 <httpd_post_receive_data+0x1d4>)
 8012d1e:	f00c f90d 	bl	801ef3c <memset>

  if (current_connection == connection) {
 8012d22:	4b70      	ldr	r3, [pc, #448]	; (8012ee4 <httpd_post_receive_data+0x1d8>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	687a      	ldr	r2, [r7, #4]
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	f040 81b6 	bne.w	801309a <httpd_post_receive_data+0x38e>

      /* find pass len */


      if(sd_status!=3){
 8012d2e:	4b6e      	ldr	r3, [pc, #440]	; (8012ee8 <httpd_post_receive_data+0x1dc>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	2b03      	cmp	r3, #3
 8012d34:	d008      	beq.n	8012d48 <httpd_post_receive_data+0x3c>
           sd_status= f_mount(&fs1,"0:",1);
 8012d36:	2201      	movs	r2, #1
 8012d38:	496c      	ldr	r1, [pc, #432]	; (8012eec <httpd_post_receive_data+0x1e0>)
 8012d3a:	486d      	ldr	r0, [pc, #436]	; (8012ef0 <httpd_post_receive_data+0x1e4>)
 8012d3c:	f7fb f9ce 	bl	800e0dc <f_mount>
 8012d40:	4603      	mov	r3, r0
 8012d42:	461a      	mov	r2, r3
 8012d44:	4b68      	ldr	r3, [pc, #416]	; (8012ee8 <httpd_post_receive_data+0x1dc>)
 8012d46:	601a      	str	r2, [r3, #0]

      }


           //retSD=f_open(&file,"0:\\alt6.c",FA_OPEN_APPEND|FA_WRITE);
          hs=(struct http_state *)connection;
 8012d48:	4a6a      	ldr	r2, [pc, #424]	; (8012ef4 <httpd_post_receive_data+0x1e8>)
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6013      	str	r3, [r2, #0]
             struct pbuf *q =p;
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	647b      	str	r3, [r7, #68]	; 0x44
             int count;
             u32_t http_post_payload_full_flag=0;
 8012d52:	2300      	movs	r3, #0
 8012d54:	643b      	str	r3, [r7, #64]	; 0x40
           //  printf("+++++++++++%s--------------",(char*)q->payload);
            if(pack_num==0){
 8012d56:	4b68      	ldr	r3, [pc, #416]	; (8012ef8 <httpd_post_receive_data+0x1ec>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	f040 8191 	bne.w	8013082 <httpd_post_receive_data+0x376>
           pointer=boundary;
 8012d60:	4b66      	ldr	r3, [pc, #408]	; (8012efc <httpd_post_receive_data+0x1f0>)
 8012d62:	4a67      	ldr	r2, [pc, #412]	; (8012f00 <httpd_post_receive_data+0x1f4>)
 8012d64:	601a      	str	r2, [r3, #0]

           memset(filename2 ,0,24);
 8012d66:	2218      	movs	r2, #24
 8012d68:	2100      	movs	r1, #0
 8012d6a:	4866      	ldr	r0, [pc, #408]	; (8012f04 <httpd_post_receive_data+0x1f8>)
 8012d6c:	f00c f8e6 	bl	801ef3c <memset>

           uint32_t byteswritten;

           HAL_UART_Transmit(&huart1,boundary,200,HAL_MAX_DELAY);
 8012d70:	f04f 33ff 	mov.w	r3, #4294967295
 8012d74:	22c8      	movs	r2, #200	; 0xc8
 8012d76:	4962      	ldr	r1, [pc, #392]	; (8012f00 <httpd_post_receive_data+0x1f4>)
 8012d78:	4863      	ldr	r0, [pc, #396]	; (8012f08 <httpd_post_receive_data+0x1fc>)
 8012d7a:	f7f6 fa26 	bl	80091ca <HAL_UART_Transmit>
           HAL_UART_Transmit(&huart1,"\r\n",2,HAL_MAX_DELAY);
 8012d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d82:	2202      	movs	r2, #2
 8012d84:	4961      	ldr	r1, [pc, #388]	; (8012f0c <httpd_post_receive_data+0x200>)
 8012d86:	4860      	ldr	r0, [pc, #384]	; (8012f08 <httpd_post_receive_data+0x1fc>)
 8012d88:	f7f6 fa1f 	bl	80091ca <HAL_UART_Transmit>


           boundary_start=NULL;
 8012d8c:	4b60      	ldr	r3, [pc, #384]	; (8012f10 <httpd_post_receive_data+0x204>)
 8012d8e:	2200      	movs	r2, #0
 8012d90:	601a      	str	r2, [r3, #0]
           boundary_start =strnstr((char*)q->payload,pointer+2,q->len);
 8012d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d94:	6858      	ldr	r0, [r3, #4]
 8012d96:	4b59      	ldr	r3, [pc, #356]	; (8012efc <httpd_post_receive_data+0x1f0>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	1c99      	adds	r1, r3, #2
 8012d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d9e:	895b      	ldrh	r3, [r3, #10]
 8012da0:	461a      	mov	r2, r3
 8012da2:	f00c fa9c 	bl	801f2de <strnstr>
 8012da6:	4603      	mov	r3, r0
 8012da8:	4a59      	ldr	r2, [pc, #356]	; (8012f10 <httpd_post_receive_data+0x204>)
 8012daa:	6013      	str	r3, [r2, #0]


           int h=strlen(pointer);
 8012dac:	4b53      	ldr	r3, [pc, #332]	; (8012efc <httpd_post_receive_data+0x1f0>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	4618      	mov	r0, r3
 8012db2:	f7ed fa17 	bl	80001e4 <strlen>
 8012db6:	4603      	mov	r3, r0
 8012db8:	633b      	str	r3, [r7, #48]	; 0x30
           file_start=NULL;
 8012dba:	4b56      	ldr	r3, [pc, #344]	; (8012f14 <httpd_post_receive_data+0x208>)
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	601a      	str	r2, [r3, #0]
            file_start=strnstr(boundary_start+h,CRLF CRLF,q->len-h);
 8012dc0:	4b53      	ldr	r3, [pc, #332]	; (8012f10 <httpd_post_receive_data+0x204>)
 8012dc2:	681a      	ldr	r2, [r3, #0]
 8012dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc6:	18d0      	adds	r0, r2, r3
 8012dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dca:	895b      	ldrh	r3, [r3, #10]
 8012dcc:	461a      	mov	r2, r3
 8012dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd0:	1ad3      	subs	r3, r2, r3
 8012dd2:	461a      	mov	r2, r3
 8012dd4:	4950      	ldr	r1, [pc, #320]	; (8012f18 <httpd_post_receive_data+0x20c>)
 8012dd6:	f00c fa82 	bl	801f2de <strnstr>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	4a4d      	ldr	r2, [pc, #308]	; (8012f14 <httpd_post_receive_data+0x208>)
 8012dde:	6013      	str	r3, [r2, #0]
              pack_num+=1;
 8012de0:	4b45      	ldr	r3, [pc, #276]	; (8012ef8 <httpd_post_receive_data+0x1ec>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	3301      	adds	r3, #1
 8012de6:	4a44      	ldr	r2, [pc, #272]	; (8012ef8 <httpd_post_receive_data+0x1ec>)
 8012de8:	6013      	str	r3, [r2, #0]

              file_start+=4;
 8012dea:	4b4a      	ldr	r3, [pc, #296]	; (8012f14 <httpd_post_receive_data+0x208>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	3304      	adds	r3, #4
 8012df0:	4a48      	ldr	r2, [pc, #288]	; (8012f14 <httpd_post_receive_data+0x208>)
 8012df2:	6013      	str	r3, [r2, #0]
               s16_t intro_boundary_len=(s16_t)(file_start-(char*)q->payload);
 8012df4:	4b47      	ldr	r3, [pc, #284]	; (8012f14 <httpd_post_receive_data+0x208>)
 8012df6:	681a      	ldr	r2, [r3, #0]
 8012df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dfa:	685b      	ldr	r3, [r3, #4]
 8012dfc:	1ad3      	subs	r3, r2, r3
 8012dfe:	85fb      	strh	r3, [r7, #46]	; 0x2e
               char * filename;

                filename=strnstr(q->payload,"filename=",intro_boundary_len)+10;
 8012e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e02:	685b      	ldr	r3, [r3, #4]
 8012e04:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8012e08:	4944      	ldr	r1, [pc, #272]	; (8012f1c <httpd_post_receive_data+0x210>)
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f00c fa67 	bl	801f2de <strnstr>
 8012e10:	4603      	mov	r3, r0
 8012e12:	330a      	adds	r3, #10
 8012e14:	62bb      	str	r3, [r7, #40]	; 0x28
              int h2=first_end(filename,"\"");
 8012e16:	4942      	ldr	r1, [pc, #264]	; (8012f20 <httpd_post_receive_data+0x214>)
 8012e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e1a:	f7ff ff53 	bl	8012cc4 <first_end>
 8012e1e:	6278      	str	r0, [r7, #36]	; 0x24
               memcpy(filename2,filename,h2);
 8012e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e22:	461a      	mov	r2, r3
 8012e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012e26:	4837      	ldr	r0, [pc, #220]	; (8012f04 <httpd_post_receive_data+0x1f8>)
 8012e28:	f00c f860 	bl	801eeec <memcpy>
               filename2[h2]='\0';
 8012e2c:	4a35      	ldr	r2, [pc, #212]	; (8012f04 <httpd_post_receive_data+0x1f8>)
 8012e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e30:	4413      	add	r3, r2
 8012e32:	2200      	movs	r2, #0
 8012e34:	701a      	strb	r2, [r3, #0]
                   memset(filx ,0,200);
 8012e36:	22c8      	movs	r2, #200	; 0xc8
 8012e38:	2100      	movs	r1, #0
 8012e3a:	483a      	ldr	r0, [pc, #232]	; (8012f24 <httpd_post_receive_data+0x218>)
 8012e3c:	f00c f87e 	bl	801ef3c <memset>
                   memcpy(filx,prefix,20);
 8012e40:	2214      	movs	r2, #20
 8012e42:	4939      	ldr	r1, [pc, #228]	; (8012f28 <httpd_post_receive_data+0x21c>)
 8012e44:	4837      	ldr	r0, [pc, #220]	; (8012f24 <httpd_post_receive_data+0x218>)
 8012e46:	f00c f851 	bl	801eeec <memcpy>
              strcat(filx,filename2);
 8012e4a:	492e      	ldr	r1, [pc, #184]	; (8012f04 <httpd_post_receive_data+0x1f8>)
 8012e4c:	4835      	ldr	r0, [pc, #212]	; (8012f24 <httpd_post_receive_data+0x218>)
 8012e4e:	f00c fa10 	bl	801f272 <strcat>

               memset(filename_upload ,0,24);
 8012e52:	2218      	movs	r2, #24
 8012e54:	2100      	movs	r1, #0
 8012e56:	4835      	ldr	r0, [pc, #212]	; (8012f2c <httpd_post_receive_data+0x220>)
 8012e58:	f00c f870 	bl	801ef3c <memset>

               memcpy(filename_upload,filx,strlen(filx));
 8012e5c:	4831      	ldr	r0, [pc, #196]	; (8012f24 <httpd_post_receive_data+0x218>)
 8012e5e:	f7ed f9c1 	bl	80001e4 <strlen>
 8012e62:	4603      	mov	r3, r0
 8012e64:	461a      	mov	r2, r3
 8012e66:	492f      	ldr	r1, [pc, #188]	; (8012f24 <httpd_post_receive_data+0x218>)
 8012e68:	4830      	ldr	r0, [pc, #192]	; (8012f2c <httpd_post_receive_data+0x220>)
 8012e6a:	f00c f83f 	bl	801eeec <memcpy>
               //delete if file exists
        	   f_unlink(filename_upload);
 8012e6e:	482f      	ldr	r0, [pc, #188]	; (8012f2c <httpd_post_receive_data+0x220>)
 8012e70:	f7fc fa07 	bl	800f282 <f_unlink>
              retSD=f_open(&file,filename_upload,FA_OPEN_APPEND|FA_WRITE);
 8012e74:	2232      	movs	r2, #50	; 0x32
 8012e76:	492d      	ldr	r1, [pc, #180]	; (8012f2c <httpd_post_receive_data+0x220>)
 8012e78:	482d      	ldr	r0, [pc, #180]	; (8012f30 <httpd_post_receive_data+0x224>)
 8012e7a:	f7fb f993 	bl	800e1a4 <f_open>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	461a      	mov	r2, r3
 8012e82:	4b2c      	ldr	r3, [pc, #176]	; (8012f34 <httpd_post_receive_data+0x228>)
 8012e84:	701a      	strb	r2, [r3, #0]
              pbuf_header(q,-intro_boundary_len);
 8012e86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012e88:	425b      	negs	r3, r3
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	b21b      	sxth	r3, r3
 8012e8e:	4619      	mov	r1, r3
 8012e90:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012e92:	f002 fdd6 	bl	8015a42 <pbuf_header>
              MEMCPY(http_post_payload+http_post_payload_len,q->payload,q->len);
 8012e96:	4b28      	ldr	r3, [pc, #160]	; (8012f38 <httpd_post_receive_data+0x22c>)
 8012e98:	881b      	ldrh	r3, [r3, #0]
 8012e9a:	461a      	mov	r2, r3
 8012e9c:	4b10      	ldr	r3, [pc, #64]	; (8012ee0 <httpd_post_receive_data+0x1d4>)
 8012e9e:	18d0      	adds	r0, r2, r3
 8012ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ea2:	6859      	ldr	r1, [r3, #4]
 8012ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ea6:	895b      	ldrh	r3, [r3, #10]
 8012ea8:	461a      	mov	r2, r3
 8012eaa:	f00c f81f 	bl	801eeec <memcpy>
              http_post_payload_len+=q->len;
 8012eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012eb0:	895a      	ldrh	r2, [r3, #10]
 8012eb2:	4b21      	ldr	r3, [pc, #132]	; (8012f38 <httpd_post_receive_data+0x22c>)
 8012eb4:	881b      	ldrh	r3, [r3, #0]
 8012eb6:	4413      	add	r3, r2
 8012eb8:	b29a      	uxth	r2, r3
 8012eba:	4b1f      	ldr	r3, [pc, #124]	; (8012f38 <httpd_post_receive_data+0x22c>)
 8012ebc:	801a      	strh	r2, [r3, #0]
              retSD = f_write(&file, http_post_payload, q->len, (void *)&byteswritten);	//在文件内写入wtext内的内
 8012ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ec0:	895b      	ldrh	r3, [r3, #10]
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	f107 0320 	add.w	r3, r7, #32
 8012ec8:	4905      	ldr	r1, [pc, #20]	; (8012ee0 <httpd_post_receive_data+0x1d4>)
 8012eca:	4819      	ldr	r0, [pc, #100]	; (8012f30 <httpd_post_receive_data+0x224>)
 8012ecc:	f7fb fd2a 	bl	800e924 <f_write>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	461a      	mov	r2, r3
 8012ed4:	4b17      	ldr	r3, [pc, #92]	; (8012f34 <httpd_post_receive_data+0x228>)
 8012ed6:	701a      	strb	r2, [r3, #0]


     	      f_sync(&file);
 8012ed8:	4815      	ldr	r0, [pc, #84]	; (8012f30 <httpd_post_receive_data+0x224>)
 8012eda:	f7fb fec7 	bl	800ec6c <f_sync>
 8012ede:	e0d4      	b.n	801308a <httpd_post_receive_data+0x37e>
 8012ee0:	2000835c 	.word	0x2000835c
 8012ee4:	2000c7ac 	.word	0x2000c7ac
 8012ee8:	20000020 	.word	0x20000020
 8012eec:	08021238 	.word	0x08021238
 8012ef0:	20010cdc 	.word	0x20010cdc
 8012ef4:	200109d4 	.word	0x200109d4
 8012ef8:	20010f18 	.word	0x20010f18
 8012efc:	20010cd4 	.word	0x20010cd4
 8012f00:	20010f1c 	.word	0x20010f1c
 8012f04:	200109bc 	.word	0x200109bc
 8012f08:	2000cf60 	.word	0x2000cf60
 8012f0c:	0802123c 	.word	0x0802123c
 8012f10:	200109b8 	.word	0x200109b8
 8012f14:	20010f14 	.word	0x20010f14
 8012f18:	08021240 	.word	0x08021240
 8012f1c:	08021248 	.word	0x08021248
 8012f20:	08021254 	.word	0x08021254
 8012f24:	200109dc 	.word	0x200109dc
 8012f28:	20000024 	.word	0x20000024
 8012f2c:	200109a0 	.word	0x200109a0
 8012f30:	20010aa4 	.word	0x20010aa4
 8012f34:	2000d3b0 	.word	0x2000d3b0
 8012f38:	2000c35c 	.word	0x2000c35c

           while(q!=NULL){
               uint32_t byteswritten;
               unsigned char lens[20];
        	   int tail_boundary_len;
        	   if(0==hs->post_content_len_left){
 8012f3c:	4b5a      	ldr	r3, [pc, #360]	; (80130a8 <httpd_post_receive_data+0x39c>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d15f      	bne.n	8013008 <httpd_post_receive_data+0x2fc>
        			pack_num=0;
 8012f48:	4b58      	ldr	r3, [pc, #352]	; (80130ac <httpd_post_receive_data+0x3a0>)
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	601a      	str	r2, [r3, #0]

        		   tail_boundary_len=strlen(boundary);
 8012f4e:	4858      	ldr	r0, [pc, #352]	; (80130b0 <httpd_post_receive_data+0x3a4>)
 8012f50:	f7ed f948 	bl	80001e4 <strlen>
 8012f54:	4603      	mov	r3, r0
 8012f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        		   tail_boundary_len+=4;
 8012f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f5a:	3304      	adds	r3, #4
 8012f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
//        		   if(q->len<tail_boundary_len){
//        			   break;
//        		   }
        		   strcat(boundary, "--\r");
 8012f5e:	4854      	ldr	r0, [pc, #336]	; (80130b0 <httpd_post_receive_data+0x3a4>)
 8012f60:	f7ed f940 	bl	80001e4 <strlen>
 8012f64:	4603      	mov	r3, r0
 8012f66:	461a      	mov	r2, r3
 8012f68:	4b51      	ldr	r3, [pc, #324]	; (80130b0 <httpd_post_receive_data+0x3a4>)
 8012f6a:	4413      	add	r3, r2
 8012f6c:	4a51      	ldr	r2, [pc, #324]	; (80130b4 <httpd_post_receive_data+0x3a8>)
 8012f6e:	6810      	ldr	r0, [r2, #0]
 8012f70:	6018      	str	r0, [r3, #0]
        		   sprintf(lens, "%d", q->len); //
 8012f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f74:	895b      	ldrh	r3, [r3, #10]
 8012f76:	461a      	mov	r2, r3
 8012f78:	f107 0308 	add.w	r3, r7, #8
 8012f7c:	494e      	ldr	r1, [pc, #312]	; (80130b8 <httpd_post_receive_data+0x3ac>)
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f00c f8e6 	bl	801f150 <siprintf>
        		   if(q->len<tail_boundary_len){
 8012f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f86:	895b      	ldrh	r3, [r3, #10]
 8012f88:	461a      	mov	r2, r3
 8012f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f8c:	4293      	cmp	r3, r2
 8012f8e:	dd06      	ble.n	8012f9e <httpd_post_receive_data+0x292>
        			   q->payload+=q->len;
 8012f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f96:	8952      	ldrh	r2, [r2, #10]
 8012f98:	441a      	add	r2, r3
 8012f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f9c:	605a      	str	r2, [r3, #4]
        		   }


        		   char * tailing_boundary=(char*)q->payload+(q->len-tail_boundary_len);
 8012f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fa0:	685b      	ldr	r3, [r3, #4]
 8012fa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012fa4:	8952      	ldrh	r2, [r2, #10]
 8012fa6:	4611      	mov	r1, r2
 8012fa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012faa:	1a8a      	subs	r2, r1, r2
 8012fac:	4413      	add	r3, r2
 8012fae:	63bb      	str	r3, [r7, #56]	; 0x38
        		   char last_char=*((char*)q->payload+q->len-1);
 8012fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fb2:	685a      	ldr	r2, [r3, #4]
 8012fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fb6:	895b      	ldrh	r3, [r3, #10]
 8012fb8:	3b01      	subs	r3, #1
 8012fba:	4413      	add	r3, r2
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		   *((char*)q->payload+q->len-1)='\0';
 8012fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fc4:	685a      	ldr	r2, [r3, #4]
 8012fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fc8:	895b      	ldrh	r3, [r3, #10]
 8012fca:	3b01      	subs	r3, #1
 8012fcc:	4413      	add	r3, r2
 8012fce:	2200      	movs	r2, #0
 8012fd0:	701a      	strb	r2, [r3, #0]
        		  if(strcmp(tailing_boundary,boundary)==0){
 8012fd2:	4937      	ldr	r1, [pc, #220]	; (80130b0 <httpd_post_receive_data+0x3a4>)
 8012fd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012fd6:	f7ed f8fb 	bl	80001d0 <strcmp>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d107      	bne.n	8012ff0 <httpd_post_receive_data+0x2e4>
        			   q->len -= tail_boundary_len;
 8012fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fe2:	895a      	ldrh	r2, [r3, #10]
 8012fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fe6:	b29b      	uxth	r3, r3
 8012fe8:	1ad3      	subs	r3, r2, r3
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fee:	815a      	strh	r2, [r3, #10]
        		   }else{

        		   }
        		   *((char*)q->payload+q->len+tail_boundary_len-1)=last_char;
 8012ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ff2:	685a      	ldr	r2, [r3, #4]
 8012ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ff6:	895b      	ldrh	r3, [r3, #10]
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ffc:	440b      	add	r3, r1
 8012ffe:	3b01      	subs	r3, #1
 8013000:	4413      	add	r3, r2
 8013002:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013006:	701a      	strb	r2, [r3, #0]
        	   }
         	  if(http_post_payload_len+q->len<=LWIP_HTTPD_POST_MAX_PAYLOAD_LEN){
 8013008:	4b2c      	ldr	r3, [pc, #176]	; (80130bc <httpd_post_receive_data+0x3b0>)
 801300a:	881b      	ldrh	r3, [r3, #0]
 801300c:	461a      	mov	r2, r3
 801300e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013010:	895b      	ldrh	r3, [r3, #10]
 8013012:	4413      	add	r3, r2
 8013014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013018:	dc2d      	bgt.n	8013076 <httpd_post_receive_data+0x36a>
         		  MEMCPY(http_post_payload+http_post_payload_len,q->payload,q->len);
 801301a:	4b28      	ldr	r3, [pc, #160]	; (80130bc <httpd_post_receive_data+0x3b0>)
 801301c:	881b      	ldrh	r3, [r3, #0]
 801301e:	461a      	mov	r2, r3
 8013020:	4b27      	ldr	r3, [pc, #156]	; (80130c0 <httpd_post_receive_data+0x3b4>)
 8013022:	18d0      	adds	r0, r2, r3
 8013024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013026:	6859      	ldr	r1, [r3, #4]
 8013028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801302a:	895b      	ldrh	r3, [r3, #10]
 801302c:	461a      	mov	r2, r3
 801302e:	f00b ff5d 	bl	801eeec <memcpy>
         		  http_post_payload_len+=q->len;
 8013032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013034:	895a      	ldrh	r2, [r3, #10]
 8013036:	4b21      	ldr	r3, [pc, #132]	; (80130bc <httpd_post_receive_data+0x3b0>)
 8013038:	881b      	ldrh	r3, [r3, #0]
 801303a:	4413      	add	r3, r2
 801303c:	b29a      	uxth	r2, r3
 801303e:	4b1f      	ldr	r3, [pc, #124]	; (80130bc <httpd_post_receive_data+0x3b0>)
 8013040:	801a      	strh	r2, [r3, #0]
                  retSD=f_open(&file,filename_upload,FA_OPEN_APPEND|FA_WRITE);
 8013042:	2232      	movs	r2, #50	; 0x32
 8013044:	491f      	ldr	r1, [pc, #124]	; (80130c4 <httpd_post_receive_data+0x3b8>)
 8013046:	4820      	ldr	r0, [pc, #128]	; (80130c8 <httpd_post_receive_data+0x3bc>)
 8013048:	f7fb f8ac 	bl	800e1a4 <f_open>
 801304c:	4603      	mov	r3, r0
 801304e:	461a      	mov	r2, r3
 8013050:	4b1e      	ldr	r3, [pc, #120]	; (80130cc <httpd_post_receive_data+0x3c0>)
 8013052:	701a      	strb	r2, [r3, #0]
         	      retSD = f_write(&file, http_post_payload, q->len, (void *)&byteswritten);	//在文件内写入wtext内的内容
 8013054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013056:	895b      	ldrh	r3, [r3, #10]
 8013058:	461a      	mov	r2, r3
 801305a:	f107 031c 	add.w	r3, r7, #28
 801305e:	4918      	ldr	r1, [pc, #96]	; (80130c0 <httpd_post_receive_data+0x3b4>)
 8013060:	4819      	ldr	r0, [pc, #100]	; (80130c8 <httpd_post_receive_data+0x3bc>)
 8013062:	f7fb fc5f 	bl	800e924 <f_write>
 8013066:	4603      	mov	r3, r0
 8013068:	461a      	mov	r2, r3
 801306a:	4b18      	ldr	r3, [pc, #96]	; (80130cc <httpd_post_receive_data+0x3c0>)
 801306c:	701a      	strb	r2, [r3, #0]
         	      f_sync(&file);
 801306e:	4816      	ldr	r0, [pc, #88]	; (80130c8 <httpd_post_receive_data+0x3bc>)
 8013070:	f7fb fdfc 	bl	800ec6c <f_sync>
 8013074:	e002      	b.n	801307c <httpd_post_receive_data+0x370>

         	  }else{

         		  http_post_payload_full_flag=1;
 8013076:	2301      	movs	r3, #1
 8013078:	643b      	str	r3, [r7, #64]	; 0x40
 801307a:	e006      	b.n	801308a <httpd_post_receive_data+0x37e>
         		  break;
         	  }
         	  q=q->next;
 801307c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	647b      	str	r3, [r7, #68]	; 0x44
           while(q!=NULL){
 8013082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013084:	2b00      	cmp	r3, #0
 8013086:	f47f af59 	bne.w	8012f3c <httpd_post_receive_data+0x230>
           }
            }
           pbuf_free(p);
 801308a:	6838      	ldr	r0, [r7, #0]
 801308c:	f002 fcfe 	bl	8015a8c <pbuf_free>


    	http_post_payload_len=0;
 8013090:	4b0a      	ldr	r3, [pc, #40]	; (80130bc <httpd_post_receive_data+0x3b0>)
 8013092:	2200      	movs	r2, #0
 8013094:	801a      	strh	r2, [r3, #0]



    /* not returning ERR_OK aborts the connection, so return ERR_OK unless the
       conenction is unknown */
    return ERR_OK;
 8013096:	2300      	movs	r3, #0
 8013098:	e001      	b.n	801309e <httpd_post_receive_data+0x392>
  }
  return ERR_VAL;
 801309a:	f06f 0305 	mvn.w	r3, #5
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3748      	adds	r7, #72	; 0x48
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	200109d4 	.word	0x200109d4
 80130ac:	20010f18 	.word	0x20010f18
 80130b0:	20010f1c 	.word	0x20010f1c
 80130b4:	08021258 	.word	0x08021258
 80130b8:	0802125c 	.word	0x0802125c
 80130bc:	2000c35c 	.word	0x2000c35c
 80130c0:	2000835c 	.word	0x2000835c
 80130c4:	200109a0 	.word	0x200109a0
 80130c8:	20010aa4 	.word	0x20010aa4
 80130cc:	2000d3b0 	.word	0x2000d3b0

080130d0 <httpd_post_finished>:


void
httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b084      	sub	sp, #16
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	60f8      	str	r0, [r7, #12]
 80130d8:	60b9      	str	r1, [r7, #8]
 80130da:	4613      	mov	r3, r2
 80130dc:	80fb      	strh	r3, [r7, #6]
  /* default page is "login failed" */
  snprintf(response_uri, response_uri_len, "/loginfail.html");
 80130de:	88fb      	ldrh	r3, [r7, #6]
 80130e0:	4a0f      	ldr	r2, [pc, #60]	; (8013120 <httpd_post_finished+0x50>)
 80130e2:	4619      	mov	r1, r3
 80130e4:	68b8      	ldr	r0, [r7, #8]
 80130e6:	f00b ffff 	bl	801f0e8 <sniprintf>
  if (current_connection == connection) {
 80130ea:	4b0e      	ldr	r3, [pc, #56]	; (8013124 <httpd_post_finished+0x54>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	68fa      	ldr	r2, [r7, #12]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d110      	bne.n	8013116 <httpd_post_finished+0x46>
    if (valid_connection == connection) {
 80130f4:	4b0c      	ldr	r3, [pc, #48]	; (8013128 <httpd_post_finished+0x58>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	68fa      	ldr	r2, [r7, #12]
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d105      	bne.n	801310a <httpd_post_finished+0x3a>
      /* login succeeded */
      snprintf(response_uri, response_uri_len, "/session.html");
 80130fe:	88fb      	ldrh	r3, [r7, #6]
 8013100:	4a0a      	ldr	r2, [pc, #40]	; (801312c <httpd_post_finished+0x5c>)
 8013102:	4619      	mov	r1, r3
 8013104:	68b8      	ldr	r0, [r7, #8]
 8013106:	f00b ffef 	bl	801f0e8 <sniprintf>
    }
    current_connection = NULL;
 801310a:	4b06      	ldr	r3, [pc, #24]	; (8013124 <httpd_post_finished+0x54>)
 801310c:	2200      	movs	r2, #0
 801310e:	601a      	str	r2, [r3, #0]
    valid_connection = NULL;
 8013110:	4b05      	ldr	r3, [pc, #20]	; (8013128 <httpd_post_finished+0x58>)
 8013112:	2200      	movs	r2, #0
 8013114:	601a      	str	r2, [r3, #0]
  }
}
 8013116:	bf00      	nop
 8013118:	3710      	adds	r7, #16
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}
 801311e:	bf00      	nop
 8013120:	08021228 	.word	0x08021228
 8013124:	2000c7ac 	.word	0x2000c7ac
 8013128:	2000c7b0 	.word	0x2000c7b0
 801312c:	08021260 	.word	0x08021260

08013130 <http_state_eof>:



static void
http_state_eof(struct http_state *hs)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	695b      	ldr	r3, [r3, #20]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d007      	beq.n	8013150 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	695b      	ldr	r3, [r3, #20]
 8013144:	4618      	mov	r0, r3
 8013146:	f7ff fd51 	bl	8012bec <fs_close>
    hs->handle = NULL;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2200      	movs	r2, #0
 801314e:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6a1b      	ldr	r3, [r3, #32]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d007      	beq.n	8013168 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6a1b      	ldr	r3, [r3, #32]
 801315c:	4618      	mov	r0, r3
 801315e:	f002 fc95 	bl	8015a8c <pbuf_free>
    hs->req = NULL;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	2200      	movs	r2, #0
 8013166:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8013168:	bf00      	nop
 801316a:	3708      	adds	r7, #8
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}

08013170 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d005      	beq.n	801318a <http_state_free+0x1a>
    http_state_eof(hs);
 801317e:	6878      	ldr	r0, [r7, #4]
 8013180:	f7ff ffd6 	bl	8013130 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	f001 fa5d 	bl	8014644 <mem_free>
  }
}
 801318a:	bf00      	nop
 801318c:	3708      	adds	r7, #8
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}
	...

08013194 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b086      	sub	sp, #24
 8013198:	af00      	add	r7, sp, #0
 801319a:	60f8      	str	r0, [r7, #12]
 801319c:	60b9      	str	r1, [r7, #8]
 801319e:	607a      	str	r2, [r7, #4]
 80131a0:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d106      	bne.n	80131b6 <http_write+0x22>
 80131a8:	4b2c      	ldr	r3, [pc, #176]	; (801325c <http_write+0xc8>)
 80131aa:	f240 324a 	movw	r2, #842	; 0x34a
 80131ae:	492c      	ldr	r1, [pc, #176]	; (8013260 <http_write+0xcc>)
 80131b0:	482c      	ldr	r0, [pc, #176]	; (8013264 <http_write+0xd0>)
 80131b2:	f00b fecb 	bl	801ef4c <iprintf>
  len = *length;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	881b      	ldrh	r3, [r3, #0]
 80131ba:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80131bc:	8afb      	ldrh	r3, [r7, #22]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d101      	bne.n	80131c6 <http_write+0x32>
    return ERR_OK;
 80131c2:	2300      	movs	r3, #0
 80131c4:	e045      	b.n	8013252 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80131cc:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80131ce:	8aba      	ldrh	r2, [r7, #20]
 80131d0:	8afb      	ldrh	r3, [r7, #22]
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d201      	bcs.n	80131da <http_write+0x46>
    len = max_len;
 80131d6:	8abb      	ldrh	r3, [r7, #20]
 80131d8:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131de:	005b      	lsls	r3, r3, #1
 80131e0:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80131e2:	8afa      	ldrh	r2, [r7, #22]
 80131e4:	8abb      	ldrh	r3, [r7, #20]
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d901      	bls.n	80131ee <http_write+0x5a>
    len = max_len;
 80131ea:	8abb      	ldrh	r3, [r7, #20]
 80131ec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80131ee:	78fb      	ldrb	r3, [r7, #3]
 80131f0:	8afa      	ldrh	r2, [r7, #22]
 80131f2:	68b9      	ldr	r1, [r7, #8]
 80131f4:	68f8      	ldr	r0, [r7, #12]
 80131f6:	f007 f9d9 	bl	801a5ac <tcp_write>
 80131fa:	4603      	mov	r3, r0
 80131fc:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 80131fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013206:	d10f      	bne.n	8013228 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801320e:	2b00      	cmp	r3, #0
 8013210:	d004      	beq.n	801321c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8013218:	2b08      	cmp	r3, #8
 801321a:	d902      	bls.n	8013222 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 801321c:	2301      	movs	r3, #1
 801321e:	82fb      	strh	r3, [r7, #22]
 8013220:	e002      	b.n	8013228 <http_write+0x94>
      } else {
        len /= 2;
 8013222:	8afb      	ldrh	r3, [r7, #22]
 8013224:	085b      	lsrs	r3, r3, #1
 8013226:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8013228:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013230:	d102      	bne.n	8013238 <http_write+0xa4>
 8013232:	8afb      	ldrh	r3, [r7, #22]
 8013234:	2b01      	cmp	r3, #1
 8013236:	d8da      	bhi.n	80131ee <http_write+0x5a>

  if (err == ERR_OK) {
 8013238:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d103      	bne.n	8013248 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	8afa      	ldrh	r2, [r7, #22]
 8013244:	801a      	strh	r2, [r3, #0]
 8013246:	e002      	b.n	801324e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	2200      	movs	r2, #0
 801324c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 801324e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8013252:	4618      	mov	r0, r3
 8013254:	3718      	adds	r7, #24
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop
 801325c:	08021270 	.word	0x08021270
 8013260:	080212a8 	.word	0x080212a8
 8013264:	080212b8 	.word	0x080212b8

08013268 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b086      	sub	sp, #24
 801326c:	af00      	add	r7, sp, #0
 801326e:	60f8      	str	r0, [r7, #12]
 8013270:	60b9      	str	r1, [r7, #8]
 8013272:	4613      	mov	r3, r2
 8013274:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d00c      	beq.n	8013296 <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 801327c:	68bb      	ldr	r3, [r7, #8]
 801327e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013282:	2b00      	cmp	r3, #0
 8013284:	d007      	beq.n	8013296 <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 8013286:	4b1f      	ldr	r3, [pc, #124]	; (8013304 <http_close_or_abort_conn+0x9c>)
 8013288:	2200      	movs	r2, #0
 801328a:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 801328c:	223f      	movs	r2, #63	; 0x3f
 801328e:	491d      	ldr	r1, [pc, #116]	; (8013304 <http_close_or_abort_conn+0x9c>)
 8013290:	68b8      	ldr	r0, [r7, #8]
 8013292:	f7ff ff1d 	bl	80130d0 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8013296:	2100      	movs	r1, #0
 8013298:	68f8      	ldr	r0, [r7, #12]
 801329a:	f004 fa49 	bl	8017730 <tcp_arg>
  altcp_recv(pcb, NULL);
 801329e:	2100      	movs	r1, #0
 80132a0:	68f8      	ldr	r0, [r7, #12]
 80132a2:	f004 fa57 	bl	8017754 <tcp_recv>
  altcp_err(pcb, NULL);
 80132a6:	2100      	movs	r1, #0
 80132a8:	68f8      	ldr	r0, [r7, #12]
 80132aa:	f004 fa97 	bl	80177dc <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80132ae:	2200      	movs	r2, #0
 80132b0:	2100      	movs	r1, #0
 80132b2:	68f8      	ldr	r0, [r7, #12]
 80132b4:	f004 facc 	bl	8017850 <tcp_poll>
  altcp_sent(pcb, NULL);
 80132b8:	2100      	movs	r1, #0
 80132ba:	68f8      	ldr	r0, [r7, #12]
 80132bc:	f004 fa6c 	bl	8017798 <tcp_sent>
  if (hs != NULL) {
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d002      	beq.n	80132cc <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 80132c6:	68b8      	ldr	r0, [r7, #8]
 80132c8:	f7ff ff52 	bl	8013170 <http_state_free>
  }

  if (abort_conn) {
 80132cc:	79fb      	ldrb	r3, [r7, #7]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d004      	beq.n	80132dc <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 80132d2:	68f8      	ldr	r0, [r7, #12]
 80132d4:	f003 f96e 	bl	80165b4 <tcp_abort>
    return ERR_OK;
 80132d8:	2300      	movs	r3, #0
 80132da:	e00f      	b.n	80132fc <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 80132dc:	68f8      	ldr	r0, [r7, #12]
 80132de:	f003 f87f 	bl	80163e0 <tcp_close>
 80132e2:	4603      	mov	r3, r0
 80132e4:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80132e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d004      	beq.n	80132f8 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80132ee:	2204      	movs	r2, #4
 80132f0:	4905      	ldr	r1, [pc, #20]	; (8013308 <http_close_or_abort_conn+0xa0>)
 80132f2:	68f8      	ldr	r0, [r7, #12]
 80132f4:	f004 faac 	bl	8017850 <tcp_poll>
  }
  return err;
 80132f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80132fc:	4618      	mov	r0, r3
 80132fe:	3718      	adds	r7, #24
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}
 8013304:	2000c760 	.word	0x2000c760
 8013308:	08013f3f 	.word	0x08013f3f

0801330c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8013316:	2200      	movs	r2, #0
 8013318:	6839      	ldr	r1, [r7, #0]
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f7ff ffa4 	bl	8013268 <http_close_or_abort_conn>
 8013320:	4603      	mov	r3, r0
}
 8013322:	4618      	mov	r0, r3
 8013324:	3708      	adds	r7, #8
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}

0801332a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 801332a:	b580      	push	{r7, lr}
 801332c:	b082      	sub	sp, #8
 801332e:	af00      	add	r7, sp, #0
 8013330:	6078      	str	r0, [r7, #4]
 8013332:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8013334:	6839      	ldr	r1, [r7, #0]
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f7ff ffe8 	bl	801330c <http_close_conn>
  }
}
 801333c:	bf00      	nop
 801333e:	3708      	adds	r7, #8
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}

08013344 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b086      	sub	sp, #24
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d003      	beq.n	801335c <extract_uri_parameters+0x18>
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d101      	bne.n	8013360 <extract_uri_parameters+0x1c>
    return (0);
 801335c:	2300      	movs	r3, #0
 801335e:	e04e      	b.n	80133fe <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8013360:	683b      	ldr	r3, [r7, #0]
 8013362:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8013364:	2300      	movs	r3, #0
 8013366:	613b      	str	r3, [r7, #16]
 8013368:	e042      	b.n	80133f0 <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	330a      	adds	r3, #10
 8013370:	009b      	lsls	r3, r3, #2
 8013372:	4413      	add	r3, r2
 8013374:	697a      	ldr	r2, [r7, #20]
 8013376:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 801337c:	2126      	movs	r1, #38	; 0x26
 801337e:	6978      	ldr	r0, [r7, #20]
 8013380:	f00b ff86 	bl	801f290 <strchr>
 8013384:	6178      	str	r0, [r7, #20]
    if (pair) {
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d006      	beq.n	801339a <extract_uri_parameters+0x56>
      *pair = '\0';
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	2200      	movs	r2, #0
 8013390:	701a      	strb	r2, [r3, #0]
      pair++;
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	3301      	adds	r3, #1
 8013396:	617b      	str	r3, [r7, #20]
 8013398:	e00c      	b.n	80133b4 <extract_uri_parameters+0x70>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 801339a:	2120      	movs	r1, #32
 801339c:	68f8      	ldr	r0, [r7, #12]
 801339e:	f00b ff77 	bl	801f290 <strchr>
 80133a2:	6178      	str	r0, [r7, #20]
      if (pair) {
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d002      	beq.n	80133b0 <extract_uri_parameters+0x6c>
        *pair = '\0';
 80133aa:	697b      	ldr	r3, [r7, #20]
 80133ac:	2200      	movs	r2, #0
 80133ae:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 80133b0:	2300      	movs	r3, #0
 80133b2:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 80133b4:	213d      	movs	r1, #61	; 0x3d
 80133b6:	68f8      	ldr	r0, [r7, #12]
 80133b8:	f00b ff6a 	bl	801f290 <strchr>
 80133bc:	60f8      	str	r0, [r7, #12]
    if (equals) {
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d00b      	beq.n	80133dc <extract_uri_parameters+0x98>
      *equals = '\0';
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	2200      	movs	r2, #0
 80133c8:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	1c5a      	adds	r2, r3, #1
 80133ce:	6879      	ldr	r1, [r7, #4]
 80133d0:	693b      	ldr	r3, [r7, #16]
 80133d2:	331a      	adds	r3, #26
 80133d4:	009b      	lsls	r3, r3, #2
 80133d6:	440b      	add	r3, r1
 80133d8:	605a      	str	r2, [r3, #4]
 80133da:	e006      	b.n	80133ea <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 80133dc:	687a      	ldr	r2, [r7, #4]
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	331a      	adds	r3, #26
 80133e2:	009b      	lsls	r3, r3, #2
 80133e4:	4413      	add	r3, r2
 80133e6:	2200      	movs	r2, #0
 80133e8:	605a      	str	r2, [r3, #4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	3301      	adds	r3, #1
 80133ee:	613b      	str	r3, [r7, #16]
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	2b0f      	cmp	r3, #15
 80133f4:	dc02      	bgt.n	80133fc <extract_uri_parameters+0xb8>
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d1b6      	bne.n	801336a <extract_uri_parameters+0x26>
    }
  }

  return loop;
 80133fc:	693b      	ldr	r3, [r7, #16]
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3718      	adds	r7, #24
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
	...

08013408 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b084      	sub	sp, #16
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	695b      	ldr	r3, [r3, #20]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d105      	bne.n	8013426 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 801341a:	6839      	ldr	r1, [r7, #0]
 801341c:	6878      	ldr	r0, [r7, #4]
 801341e:	f7ff ff84 	bl	801332a <http_eof>
    return 0;
 8013422:	2300      	movs	r3, #0
 8013424:	e016      	b.n	8013454 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	695b      	ldr	r3, [r3, #20]
 801342a:	4618      	mov	r0, r3
 801342c:	f7ff fbe8 	bl	8012c00 <fs_bytes_left>
 8013430:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	2b00      	cmp	r3, #0
 8013436:	dc05      	bgt.n	8013444 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8013438:	6839      	ldr	r1, [r7, #0]
 801343a:	6878      	ldr	r0, [r7, #4]
 801343c:	f7ff ff75 	bl	801332a <http_eof>
    return 0;
 8013440:	2300      	movs	r3, #0
 8013442:	e007      	b.n	8013454 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8013444:	4b05      	ldr	r3, [pc, #20]	; (801345c <http_check_eof+0x54>)
 8013446:	f240 52ce 	movw	r2, #1486	; 0x5ce
 801344a:	4905      	ldr	r1, [pc, #20]	; (8013460 <http_check_eof+0x58>)
 801344c:	4805      	ldr	r0, [pc, #20]	; (8013464 <http_check_eof+0x5c>)
 801344e:	f00b fd7d 	bl	801ef4c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8013452:	2301      	movs	r3, #1
}
 8013454:	4618      	mov	r0, r3
 8013456:	3710      	adds	r7, #16
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}
 801345c:	08021270 	.word	0x08021270
 8013460:	080212e0 	.word	0x080212e0
 8013464:	080212b8 	.word	0x080212b8

08013468 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b084      	sub	sp, #16
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
 8013470:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8013472:	2300      	movs	r3, #0
 8013474:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801347a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801347e:	4293      	cmp	r3, r2
 8013480:	d803      	bhi.n	801348a <http_send_data_nonssi+0x22>
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013486:	b29b      	uxth	r3, r3
 8013488:	e001      	b.n	801348e <http_send_data_nonssi+0x26>
 801348a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801348e:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	6999      	ldr	r1, [r3, #24]
 8013494:	f107 020c 	add.w	r2, r7, #12
 8013498:	2300      	movs	r3, #0
 801349a:	6878      	ldr	r0, [r7, #4]
 801349c:	f7ff fe7a 	bl	8013194 <http_write>
 80134a0:	4603      	mov	r3, r0
 80134a2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 80134a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d10d      	bne.n	80134c8 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 80134ac:	2301      	movs	r3, #1
 80134ae:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	699b      	ldr	r3, [r3, #24]
 80134b4:	89ba      	ldrh	r2, [r7, #12]
 80134b6:	441a      	add	r2, r3
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134c0:	89ba      	ldrh	r2, [r7, #12]
 80134c2:	1a9a      	subs	r2, r3, r2
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 80134c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3710      	adds	r7, #16
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}

080134d2 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80134d2:	b580      	push	{r7, lr}
 80134d4:	b084      	sub	sp, #16
 80134d6:	af00      	add	r7, sp, #0
 80134d8:	6078      	str	r0, [r7, #4]
 80134da:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80134dc:	2300      	movs	r3, #0
 80134de:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d101      	bne.n	80134ea <http_send+0x18>
    return 0;
 80134e6:	2300      	movs	r3, #0
 80134e8:	e025      	b.n	8013536 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80134ea:	683b      	ldr	r3, [r7, #0]
 80134ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d108      	bne.n	8013504 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 80134f2:	6839      	ldr	r1, [r7, #0]
 80134f4:	6878      	ldr	r0, [r7, #4]
 80134f6:	f7ff ff87 	bl	8013408 <http_check_eof>
 80134fa:	4603      	mov	r3, r0
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d101      	bne.n	8013504 <http_send+0x32>
      return 0;
 8013500:	2300      	movs	r3, #0
 8013502:	e018      	b.n	8013536 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8013504:	6839      	ldr	r1, [r7, #0]
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f7ff ffae 	bl	8013468 <http_send_data_nonssi>
 801350c:	4603      	mov	r3, r0
 801350e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013514:	2b00      	cmp	r3, #0
 8013516:	d10d      	bne.n	8013534 <http_send+0x62>
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	695b      	ldr	r3, [r3, #20]
 801351c:	4618      	mov	r0, r3
 801351e:	f7ff fb6f 	bl	8012c00 <fs_bytes_left>
 8013522:	4603      	mov	r3, r0
 8013524:	2b00      	cmp	r3, #0
 8013526:	dc05      	bgt.n	8013534 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8013528:	6839      	ldr	r1, [r7, #0]
 801352a:	6878      	ldr	r0, [r7, #4]
 801352c:	f7ff fefd 	bl	801332a <http_eof>
    return 0;
 8013530:	2300      	movs	r3, #0
 8013532:	e000      	b.n	8013536 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8013534:	7bfb      	ldrb	r3, [r7, #15]
}
 8013536:	4618      	mov	r0, r3
 8013538:	3710      	adds	r7, #16
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}
	...

08013540 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b084      	sub	sp, #16
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
 8013548:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 801354a:	683b      	ldr	r3, [r7, #0]
 801354c:	4a1c      	ldr	r2, [pc, #112]	; (80135c0 <http_get_404_file+0x80>)
 801354e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8013550:	687a      	ldr	r2, [r7, #4]
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	4619      	mov	r1, r3
 8013558:	4610      	mov	r0, r2
 801355a:	f7ff fb09 	bl	8012b70 <fs_open>
 801355e:	4603      	mov	r3, r0
 8013560:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d024      	beq.n	80135b4 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	4a15      	ldr	r2, [pc, #84]	; (80135c4 <http_get_404_file+0x84>)
 801356e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8013570:	687a      	ldr	r2, [r7, #4]
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	4619      	mov	r1, r3
 8013578:	4610      	mov	r0, r2
 801357a:	f7ff faf9 	bl	8012b70 <fs_open>
 801357e:	4603      	mov	r3, r0
 8013580:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d014      	beq.n	80135b4 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	4a0e      	ldr	r2, [pc, #56]	; (80135c8 <http_get_404_file+0x88>)
 801358e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8013590:	687a      	ldr	r2, [r7, #4]
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	4619      	mov	r1, r3
 8013598:	4610      	mov	r0, r2
 801359a:	f7ff fae9 	bl	8012b70 <fs_open>
 801359e:	4603      	mov	r3, r0
 80135a0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80135a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d004      	beq.n	80135b4 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	2200      	movs	r2, #0
 80135ae:	601a      	str	r2, [r3, #0]
        return NULL;
 80135b0:	2300      	movs	r3, #0
 80135b2:	e000      	b.n	80135b6 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80135b4:	687b      	ldr	r3, [r7, #4]
}
 80135b6:	4618      	mov	r0, r3
 80135b8:	3710      	adds	r7, #16
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	bf00      	nop
 80135c0:	08021318 	.word	0x08021318
 80135c4:	08021324 	.word	0x08021324
 80135c8:	08021330 	.word	0x08021330

080135cc <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b082      	sub	sp, #8
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 80135d4:	4b08      	ldr	r3, [pc, #32]	; (80135f8 <http_handle_post_finished+0x2c>)
 80135d6:	2200      	movs	r2, #0
 80135d8:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80135da:	223f      	movs	r2, #63	; 0x3f
 80135dc:	4906      	ldr	r1, [pc, #24]	; (80135f8 <http_handle_post_finished+0x2c>)
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f7ff fd76 	bl	80130d0 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 80135e4:	2200      	movs	r2, #0
 80135e6:	4904      	ldr	r1, [pc, #16]	; (80135f8 <http_handle_post_finished+0x2c>)
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f000 fae9 	bl	8013bc0 <http_find_file>
 80135ee:	4603      	mov	r3, r0
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3708      	adds	r7, #8
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}
 80135f8:	2000c760 	.word	0x2000c760

080135fc <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b084      	sub	sp, #16
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
 8013604:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 8013606:	683b      	ldr	r3, [r7, #0]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d014      	beq.n	8013636 <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013612:	683a      	ldr	r2, [r7, #0]
 8013614:	8912      	ldrh	r2, [r2, #8]
 8013616:	4293      	cmp	r3, r2
 8013618:	d204      	bcs.n	8013624 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2200      	movs	r2, #0
 801361e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8013622:	e008      	b.n	8013636 <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801362a:	683a      	ldr	r2, [r7, #0]
 801362c:	8912      	ldrh	r2, [r2, #8]
 801362e:	1a9a      	subs	r2, r3, r2
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 8013636:	683b      	ldr	r3, [r7, #0]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d006      	beq.n	801364a <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 801363c:	6839      	ldr	r1, [r7, #0]
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f7ff fb64 	bl	8012d0c <httpd_post_receive_data>
 8013644:	4603      	mov	r3, r0
 8013646:	73fb      	strb	r3, [r7, #15]
 8013648:	e001      	b.n	801364e <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 801364a:	2300      	movs	r3, #0
 801364c:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 801364e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d003      	beq.n	801365e <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2200      	movs	r2, #0
 801365a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
  if (hs->post_content_len_left == 0) {
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013664:	2b00      	cmp	r3, #0
 8013666:	d104      	bne.n	8013672 <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f7ff ffaf 	bl	80135cc <http_handle_post_finished>
 801366e:	4603      	mov	r3, r0
 8013670:	e000      	b.n	8013674 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 8013672:	2300      	movs	r3, #0
}
 8013674:	4618      	mov	r0, r3
 8013676:	3710      	adds	r7, #16
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}

0801367c <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b0ac      	sub	sp, #176	; 0xb0
 8013680:	af04      	add	r7, sp, #16
 8013682:	60f8      	str	r0, [r7, #12]
 8013684:	60b9      	str	r1, [r7, #8]
 8013686:	607a      	str	r2, [r7, #4]
 8013688:	807b      	strh	r3, [r7, #2]




  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 801368a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801368e:	1c58      	adds	r0, r3, #1
 8013690:	887a      	ldrh	r2, [r7, #2]
 8013692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013696:	1c59      	adds	r1, r3, #1
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	1acb      	subs	r3, r1, r3
 801369c:	1ad3      	subs	r3, r2, r3
 801369e:	461a      	mov	r2, r3
 80136a0:	49a6      	ldr	r1, [pc, #664]	; (801393c <http_post_request+0x2c0>)
 80136a2:	f000 fe2d 	bl	8014300 <lwip_strnstr>
 80136a6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if (crlfcrlf != NULL) {
 80136aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	f000 813e 	beq.w	8013930 <http_post_request+0x2b4>


#define HTTP_HDR_BOUNDARY "boundary="
	//memcpy(boundary,0,300);

memcpy(boundary,boundary_prefix,5);
 80136b4:	4ba2      	ldr	r3, [pc, #648]	; (8013940 <http_post_request+0x2c4>)
 80136b6:	4aa3      	ldr	r2, [pc, #652]	; (8013944 <http_post_request+0x2c8>)
 80136b8:	6810      	ldr	r0, [r2, #0]
 80136ba:	6018      	str	r0, [r3, #0]
 80136bc:	7912      	ldrb	r2, [r2, #4]
 80136be:	711a      	strb	r2, [r3, #4]
#define HTTP_HDR_BOUNDARY_LEN (sizeof HTTP_HDR_BOUNDARY-1)
 boundary_start =strnstr(uri_end+1,HTTP_HDR_BOUNDARY,crlfcrlf-(uri_end+1));
 80136c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80136c4:	1c58      	adds	r0, r3, #1
 80136c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80136ca:	3301      	adds	r3, #1
 80136cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80136d0:	1ad3      	subs	r3, r2, r3
 80136d2:	461a      	mov	r2, r3
 80136d4:	499c      	ldr	r1, [pc, #624]	; (8013948 <http_post_request+0x2cc>)
 80136d6:	f00b fe02 	bl	801f2de <strnstr>
 80136da:	4603      	mov	r3, r0
 80136dc:	4a9b      	ldr	r2, [pc, #620]	; (801394c <http_post_request+0x2d0>)
 80136de:	6013      	str	r3, [r2, #0]
boundary_start+=HTTP_HDR_BOUNDARY_LEN;
 80136e0:	4b9a      	ldr	r3, [pc, #616]	; (801394c <http_post_request+0x2d0>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	3309      	adds	r3, #9
 80136e6:	4a99      	ldr	r2, [pc, #612]	; (801394c <http_post_request+0x2d0>)
 80136e8:	6013      	str	r3, [r2, #0]
boundary_end =strnstr(boundary_start+1, CRLF,crlfcrlf-(boundary_start+1));
 80136ea:	4b98      	ldr	r3, [pc, #608]	; (801394c <http_post_request+0x2d0>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	1c58      	adds	r0, r3, #1
 80136f0:	4b96      	ldr	r3, [pc, #600]	; (801394c <http_post_request+0x2d0>)
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	3301      	adds	r3, #1
 80136f6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80136fa:	1ad3      	subs	r3, r2, r3
 80136fc:	461a      	mov	r2, r3
 80136fe:	4994      	ldr	r1, [pc, #592]	; (8013950 <http_post_request+0x2d4>)
 8013700:	f00b fded 	bl	801f2de <strnstr>
 8013704:	4603      	mov	r3, r0
 8013706:	4a93      	ldr	r2, [pc, #588]	; (8013954 <http_post_request+0x2d8>)
 8013708:	6013      	str	r3, [r2, #0]
 boundary_lens=boundary_end-boundary_start;
 801370a:	4b92      	ldr	r3, [pc, #584]	; (8013954 <http_post_request+0x2d8>)
 801370c:	681a      	ldr	r2, [r3, #0]
 801370e:	4b8f      	ldr	r3, [pc, #572]	; (801394c <http_post_request+0x2d0>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	1ad3      	subs	r3, r2, r3
 8013714:	4a90      	ldr	r2, [pc, #576]	; (8013958 <http_post_request+0x2dc>)
 8013716:	6013      	str	r3, [r2, #0]
 char str[100]="";
 8013718:	2300      	movs	r3, #0
 801371a:	617b      	str	r3, [r7, #20]
 801371c:	f107 0318 	add.w	r3, r7, #24
 8013720:	2260      	movs	r2, #96	; 0x60
 8013722:	2100      	movs	r1, #0
 8013724:	4618      	mov	r0, r3
 8013726:	f00b fc09 	bl	801ef3c <memset>
 MEMCPY(str,boundary_start,boundary_lens);
 801372a:	4b88      	ldr	r3, [pc, #544]	; (801394c <http_post_request+0x2d0>)
 801372c:	6819      	ldr	r1, [r3, #0]
 801372e:	4b8a      	ldr	r3, [pc, #552]	; (8013958 <http_post_request+0x2dc>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	461a      	mov	r2, r3
 8013734:	f107 0314 	add.w	r3, r7, #20
 8013738:	4618      	mov	r0, r3
 801373a:	f00b fbd7 	bl	801eeec <memcpy>
 strcat(boundary,str);
 801373e:	f107 0314 	add.w	r3, r7, #20
 8013742:	4619      	mov	r1, r3
 8013744:	487e      	ldr	r0, [pc, #504]	; (8013940 <http_post_request+0x2c4>)
 8013746:	f00b fd94 	bl	801f272 <strcat>
 //printf("%s",boundary);


    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 801374a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801374e:	1c58      	adds	r0, r3, #1
 8013750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013754:	3301      	adds	r3, #1
 8013756:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801375a:	1ad3      	subs	r3, r2, r3
 801375c:	461a      	mov	r2, r3
 801375e:	497f      	ldr	r1, [pc, #508]	; (801395c <http_post_request+0x2e0>)
 8013760:	f000 fdce 	bl	8014300 <lwip_strnstr>
 8013764:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if (scontent_len != NULL) {
 8013768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801376c:	2b00      	cmp	r3, #0
 801376e:	f000 80dc 	beq.w	801392a <http_post_request+0x2ae>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8013772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013776:	3310      	adds	r3, #16
 8013778:	220a      	movs	r2, #10
 801377a:	4975      	ldr	r1, [pc, #468]	; (8013950 <http_post_request+0x2d4>)
 801377c:	4618      	mov	r0, r3
 801377e:	f000 fdbf 	bl	8014300 <lwip_strnstr>
 8013782:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
      if (scontent_len_end != NULL) {
 8013786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801378a:	2b00      	cmp	r3, #0
 801378c:	f000 80cd 	beq.w	801392a <http_post_request+0x2ae>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 8013790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013794:	3310      	adds	r3, #16
 8013796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        content_len = atoi(content_len_num);
 801379a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801379e:	f00b fb6f 	bl	801ee80 <atoi>
 80137a2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (content_len == 0) {
 80137a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d10e      	bne.n	80137cc <http_post_request+0x150>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 80137ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80137b2:	781b      	ldrb	r3, [r3, #0]
 80137b4:	2b30      	cmp	r3, #48	; 0x30
 80137b6:	d105      	bne.n	80137c4 <http_post_request+0x148>
 80137b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80137bc:	3301      	adds	r3, #1
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	2b0d      	cmp	r3, #13
 80137c2:	d003      	beq.n	80137cc <http_post_request+0x150>
            content_len = -1;
 80137c4:	f04f 33ff 	mov.w	r3, #4294967295
 80137c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
          }
        }
        if (content_len >= 0) {
 80137cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	f2c0 80a7 	blt.w	8013924 <http_post_request+0x2a8>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 80137d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80137da:	3301      	adds	r3, #1
 80137dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80137e0:	887a      	ldrh	r2, [r7, #2]
 80137e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80137e6:	1d19      	adds	r1, r3, #4
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	1acb      	subs	r3, r1, r3
 80137ec:	429a      	cmp	r2, r3
 80137ee:	db06      	blt.n	80137fe <http_post_request+0x182>
 80137f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80137f4:	1d1a      	adds	r2, r3, #4
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	1ad3      	subs	r3, r2, r3
 80137fa:	b29b      	uxth	r3, r3
 80137fc:	e000      	b.n	8013800 <http_post_request+0x184>
 80137fe:	887b      	ldrh	r3, [r7, #2]
 8013800:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8013804:	887a      	ldrh	r2, [r7, #2]
 8013806:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801380a:	1d19      	adds	r1, r3, #4
 801380c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013810:	1acb      	subs	r3, r1, r3
 8013812:	429a      	cmp	r2, r3
 8013814:	db07      	blt.n	8013826 <http_post_request+0x1aa>
 8013816:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801381a:	1d1a      	adds	r2, r3, #4
 801381c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013820:	1ad3      	subs	r3, r2, r3
 8013822:	b29b      	uxth	r3, r3
 8013824:	e000      	b.n	8013828 <http_post_request+0x1ac>
 8013826:	887b      	ldrh	r3, [r7, #2]
 8013828:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
          u8_t post_auto_wnd = 1;
 801382c:	2301      	movs	r3, #1
 801382e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
          http_uri_buf[0] = 0;
 8013832:	4b4b      	ldr	r3, [pc, #300]	; (8013960 <http_post_request+0x2e4>)
 8013834:	2200      	movs	r2, #0
 8013836:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 8013838:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801383c:	2200      	movs	r2, #0
 801383e:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8013840:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8013844:	f107 037a 	add.w	r3, r7, #122	; 0x7a
 8013848:	9303      	str	r3, [sp, #12]
 801384a:	233f      	movs	r3, #63	; 0x3f
 801384c:	9302      	str	r3, [sp, #8]
 801384e:	4b44      	ldr	r3, [pc, #272]	; (8013960 <http_post_request+0x2e4>)
 8013850:	9301      	str	r3, [sp, #4]
 8013852:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013856:	9300      	str	r3, [sp, #0]
 8013858:	4613      	mov	r3, r2
 801385a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801385e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013862:	68b8      	ldr	r0, [r7, #8]
 8013864:	f7ff f9fa 	bl	8012c5c <httpd_post_begin>
 8013868:	4603      	mov	r3, r0
 801386a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 801386e:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8013872:	2b00      	cmp	r3, #0
 8013874:	d14f      	bne.n	8013916 <http_post_request+0x29a>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            u16_t start_offset = hdr_len;
 801387c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8013880:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 8013884:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 801388e:	e00c      	b.n	80138aa <http_post_request+0x22e>
              start_offset -= q->len;
 8013890:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013894:	895b      	ldrh	r3, [r3, #10]
 8013896:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 801389a:	1ad3      	subs	r3, r2, r3
 801389c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
              q = q->next;
 80138a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            while ((q != NULL) && (q->len <= start_offset)) {
 80138aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d006      	beq.n	80138c0 <http_post_request+0x244>
 80138b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80138b6:	895b      	ldrh	r3, [r3, #10]
 80138b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80138bc:	429a      	cmp	r2, r3
 80138be:	d2e7      	bcs.n	8013890 <http_post_request+0x214>
            }
            if (q != NULL) {
 80138c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d011      	beq.n	80138ec <http_post_request+0x270>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 80138c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80138cc:	4619      	mov	r1, r3
 80138ce:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80138d2:	f002 f843 	bl	801595c <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 80138d6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80138da:	f002 f97d 	bl	8015bd8 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 80138de:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80138e2:	68b8      	ldr	r0, [r7, #8]
 80138e4:	f7ff fe8a 	bl	80135fc <http_post_rxpbuf>
 80138e8:	4603      	mov	r3, r0
 80138ea:	e023      	b.n	8013934 <http_post_request+0x2b8>
            } else if (hs->post_content_len_left == 0) {
 80138ec:	68bb      	ldr	r3, [r7, #8]
 80138ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d10d      	bne.n	8013912 <http_post_request+0x296>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 80138f6:	2241      	movs	r2, #65	; 0x41
 80138f8:	2100      	movs	r1, #0
 80138fa:	2000      	movs	r0, #0
 80138fc:	f001 fdd0 	bl	80154a0 <pbuf_alloc>
 8013900:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
              return http_post_rxpbuf(hs, q);
 8013904:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013908:	68b8      	ldr	r0, [r7, #8]
 801390a:	f7ff fe77 	bl	80135fc <http_post_rxpbuf>
 801390e:	4603      	mov	r3, r0
 8013910:	e010      	b.n	8013934 <http_post_request+0x2b8>
            } else {
              return ERR_OK;
 8013912:	2300      	movs	r3, #0
 8013914:	e00e      	b.n	8013934 <http_post_request+0x2b8>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 8013916:	2200      	movs	r2, #0
 8013918:	4911      	ldr	r1, [pc, #68]	; (8013960 <http_post_request+0x2e4>)
 801391a:	68b8      	ldr	r0, [r7, #8]
 801391c:	f000 f950 	bl	8013bc0 <http_find_file>
 8013920:	4603      	mov	r3, r0
 8013922:	e007      	b.n	8013934 <http_post_request+0x2b8>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 8013924:	f06f 030f 	mvn.w	r3, #15
 8013928:	e004      	b.n	8013934 <http_post_request+0x2b8>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 801392a:	f06f 030f 	mvn.w	r3, #15
 801392e:	e001      	b.n	8013934 <http_post_request+0x2b8>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 8013930:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8013934:	4618      	mov	r0, r3
 8013936:	37a0      	adds	r7, #160	; 0xa0
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}
 801393c:	08021240 	.word	0x08021240
 8013940:	20010f1c 	.word	0x20010f1c
 8013944:	20000030 	.word	0x20000030
 8013948:	0802133c 	.word	0x0802133c
 801394c:	200109b8 	.word	0x200109b8
 8013950:	0802123c 	.word	0x0802123c
 8013954:	200109d8 	.word	0x200109d8
 8013958:	20010cd8 	.word	0x20010cd8
 801395c:	08021348 	.word	0x08021348
 8013960:	2000c760 	.word	0x2000c760

08013964 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b092      	sub	sp, #72	; 0x48
 8013968:	af02      	add	r7, sp, #8
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	60b9      	str	r1, [r7, #8]
 801396e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8013974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013976:	2b00      	cmp	r3, #0
 8013978:	d106      	bne.n	8013988 <http_parse_request+0x24>
 801397a:	4b87      	ldr	r3, [pc, #540]	; (8013b98 <http_parse_request+0x234>)
 801397c:	f640 120c 	movw	r2, #2316	; 0x90c
 8013980:	4986      	ldr	r1, [pc, #536]	; (8013b9c <http_parse_request+0x238>)
 8013982:	4887      	ldr	r0, [pc, #540]	; (8013ba0 <http_parse_request+0x23c>)
 8013984:	f00b fae2 	bl	801ef4c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d106      	bne.n	801399c <http_parse_request+0x38>
 801398e:	4b82      	ldr	r3, [pc, #520]	; (8013b98 <http_parse_request+0x234>)
 8013990:	f640 120d 	movw	r2, #2317	; 0x90d
 8013994:	4983      	ldr	r1, [pc, #524]	; (8013ba4 <http_parse_request+0x240>)
 8013996:	4882      	ldr	r0, [pc, #520]	; (8013ba0 <http_parse_request+0x23c>)
 8013998:	f00b fad8 	bl	801ef4c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	695b      	ldr	r3, [r3, #20]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d103      	bne.n	80139ac <http_parse_request+0x48>
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	699b      	ldr	r3, [r3, #24]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d002      	beq.n	80139b2 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80139ac:	f06f 0307 	mvn.w	r3, #7
 80139b0:	e0ed      	b.n	8013b8e <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	6a1b      	ldr	r3, [r3, #32]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d103      	bne.n	80139c2 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80139ba:	68bb      	ldr	r3, [r7, #8]
 80139bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139be:	621a      	str	r2, [r3, #32]
 80139c0:	e005      	b.n	80139ce <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	6a1b      	ldr	r3, [r3, #32]
 80139c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80139c8:	4618      	mov	r0, r3
 80139ca:	f002 f92d 	bl	8015c28 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80139ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139d0:	f002 f902 	bl	8015bd8 <pbuf_ref>

  if (hs->req->next != NULL) {
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	6a1b      	ldr	r3, [r3, #32]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d012      	beq.n	8013a04 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	6a1b      	ldr	r3, [r3, #32]
 80139e2:	891b      	ldrh	r3, [r3, #8]
 80139e4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80139e8:	4293      	cmp	r3, r2
 80139ea:	bf28      	it	cs
 80139ec:	4613      	movcs	r3, r2
 80139ee:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80139f0:	68bb      	ldr	r3, [r7, #8]
 80139f2:	6a18      	ldr	r0, [r3, #32]
 80139f4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80139f6:	2300      	movs	r3, #0
 80139f8:	496b      	ldr	r1, [pc, #428]	; (8013ba8 <http_parse_request+0x244>)
 80139fa:	f002 fa3d 	bl	8015e78 <pbuf_copy_partial>
    data = httpd_req_buf;
 80139fe:	4b6a      	ldr	r3, [pc, #424]	; (8013ba8 <http_parse_request+0x244>)
 8013a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013a02:	e005      	b.n	8013a10 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8013a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a06:	685b      	ldr	r3, [r3, #4]
 8013a08:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 8013a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0c:	895b      	ldrh	r3, [r3, #10]
 8013a0e:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8013a10:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013a12:	2b06      	cmp	r3, #6
 8013a14:	f240 80a1 	bls.w	8013b5a <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8013a18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013a1a:	461a      	mov	r2, r3
 8013a1c:	4963      	ldr	r1, [pc, #396]	; (8013bac <http_parse_request+0x248>)
 8013a1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a20:	f000 fc6e 	bl	8014300 <lwip_strnstr>
 8013a24:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8013a26:	6a3b      	ldr	r3, [r7, #32]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f000 8096 	beq.w	8013b5a <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8013a32:	2300      	movs	r3, #0
 8013a34:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8013a36:	2204      	movs	r2, #4
 8013a38:	495d      	ldr	r1, [pc, #372]	; (8013bb0 <http_parse_request+0x24c>)
 8013a3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a3c:	f00b fc3d 	bl	801f2ba <strncmp>
 8013a40:	4603      	mov	r3, r0
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d103      	bne.n	8013a4e <http_parse_request+0xea>
        sp1 = data + 3;
 8013a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a48:	3303      	adds	r3, #3
 8013a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a4c:	e014      	b.n	8013a78 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 8013a4e:	2205      	movs	r2, #5
 8013a50:	4958      	ldr	r1, [pc, #352]	; (8013bb4 <http_parse_request+0x250>)
 8013a52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a54:	f00b fc31 	bl	801f2ba <strncmp>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d105      	bne.n	8013a6a <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 8013a5e:	2301      	movs	r3, #1
 8013a60:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 8013a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a64:	3304      	adds	r3, #4
 8013a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a68:	e006      	b.n	8013a78 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 8013a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a6c:	3304      	adds	r3, #4
 8013a6e:	2200      	movs	r2, #0
 8013a70:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 8013a72:	f06f 030f 	mvn.w	r3, #15
 8013a76:	e08a      	b.n	8013b8e <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8013a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a7a:	1c5a      	adds	r2, r3, #1
 8013a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a7e:	1ad3      	subs	r3, r2, r3
 8013a80:	b29b      	uxth	r3, r3
 8013a82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013a84:	1ad3      	subs	r3, r2, r3
 8013a86:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8013a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a8a:	3301      	adds	r3, #1
 8013a8c:	8bfa      	ldrh	r2, [r7, #30]
 8013a8e:	494a      	ldr	r1, [pc, #296]	; (8013bb8 <http_parse_request+0x254>)
 8013a90:	4618      	mov	r0, r3
 8013a92:	f000 fc35 	bl	8014300 <lwip_strnstr>
 8013a96:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8013a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d10c      	bne.n	8013ab8 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8013a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aa0:	3301      	adds	r3, #1
 8013aa2:	8bfa      	ldrh	r2, [r7, #30]
 8013aa4:	4941      	ldr	r1, [pc, #260]	; (8013bac <http_parse_request+0x248>)
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f000 fc2a 	bl	8014300 <lwip_strnstr>
 8013aac:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8013aae:	2301      	movs	r3, #1
 8013ab0:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 8013ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d163      	bne.n	8013b80 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8013ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aba:	3301      	adds	r3, #1
 8013abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013abe:	1ad3      	subs	r3, r2, r3
 8013ac0:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8013ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d048      	beq.n	8013b5a <http_parse_request+0x1f6>
 8013ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d944      	bls.n	8013b5a <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8013ad0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ad2:	461a      	mov	r2, r3
 8013ad4:	4939      	ldr	r1, [pc, #228]	; (8013bbc <http_parse_request+0x258>)
 8013ad6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013ad8:	f000 fc12 	bl	8014300 <lwip_strnstr>
 8013adc:	4603      	mov	r3, r0
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d03b      	beq.n	8013b5a <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 8013ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ae4:	3301      	adds	r3, #1
 8013ae6:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8013ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aea:	2200      	movs	r2, #0
 8013aec:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8013aee:	8bbb      	ldrh	r3, [r7, #28]
 8013af0:	69ba      	ldr	r2, [r7, #24]
 8013af2:	4413      	add	r3, r2
 8013af4:	2200      	movs	r2, #0
 8013af6:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 8013af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d026      	beq.n	8013b4c <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 8013afe:	68bb      	ldr	r3, [r7, #8]
 8013b00:	6a1b      	ldr	r3, [r3, #32]
 8013b02:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 8013b04:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b08:	9301      	str	r3, [sp, #4]
 8013b0a:	69bb      	ldr	r3, [r7, #24]
 8013b0c:	9300      	str	r3, [sp, #0]
 8013b0e:	4613      	mov	r3, r2
 8013b10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b12:	68b9      	ldr	r1, [r7, #8]
 8013b14:	6978      	ldr	r0, [r7, #20]
 8013b16:	f7ff fdb1 	bl	801367c <http_post_request>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 8013b1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d00a      	beq.n	8013b3c <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 8013b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b28:	2220      	movs	r2, #32
 8013b2a:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 8013b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b2e:	2220      	movs	r2, #32
 8013b30:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 8013b32:	8bbb      	ldrh	r3, [r7, #28]
 8013b34:	69ba      	ldr	r2, [r7, #24]
 8013b36:	4413      	add	r3, r2
 8013b38:	2220      	movs	r2, #32
 8013b3a:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 8013b3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b40:	f113 0f10 	cmn.w	r3, #16
 8013b44:	d01e      	beq.n	8013b84 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 8013b46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b4a:	e020      	b.n	8013b8e <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8013b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b4e:	69b9      	ldr	r1, [r7, #24]
 8013b50:	68b8      	ldr	r0, [r7, #8]
 8013b52:	f000 f835 	bl	8013bc0 <http_find_file>
 8013b56:	4603      	mov	r3, r0
 8013b58:	e019      	b.n	8013b8e <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	6a1b      	ldr	r3, [r3, #32]
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f002 f822 	bl	8015ba8 <pbuf_clen>
 8013b64:	4603      	mov	r3, r0
 8013b66:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	6a1b      	ldr	r3, [r3, #32]
 8013b6c:	891b      	ldrh	r3, [r3, #8]
 8013b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013b72:	d209      	bcs.n	8013b88 <http_parse_request+0x224>
 8013b74:	8a3b      	ldrh	r3, [r7, #16]
 8013b76:	2b05      	cmp	r3, #5
 8013b78:	d806      	bhi.n	8013b88 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8013b7a:	f06f 0304 	mvn.w	r3, #4
 8013b7e:	e006      	b.n	8013b8e <http_parse_request+0x22a>
          goto badrequest;
 8013b80:	bf00      	nop
 8013b82:	e002      	b.n	8013b8a <http_parse_request+0x226>
              goto badrequest;
 8013b84:	bf00      	nop
 8013b86:	e000      	b.n	8013b8a <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 8013b88:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8013b8a:	f06f 030f 	mvn.w	r3, #15
  }
}
 8013b8e:	4618      	mov	r0, r3
 8013b90:	3740      	adds	r7, #64	; 0x40
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
 8013b96:	bf00      	nop
 8013b98:	08021270 	.word	0x08021270
 8013b9c:	0802135c 	.word	0x0802135c
 8013ba0:	080212b8 	.word	0x080212b8
 8013ba4:	08021368 	.word	0x08021368
 8013ba8:	2000c360 	.word	0x2000c360
 8013bac:	0802123c 	.word	0x0802123c
 8013bb0:	08021374 	.word	0x08021374
 8013bb4:	0802137c 	.word	0x0802137c
 8013bb8:	08021384 	.word	0x08021384
 8013bbc:	08021240 	.word	0x08021240

08013bc0 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8013bc0:	b590      	push	{r4, r7, lr}
 8013bc2:	b093      	sub	sp, #76	; 0x4c
 8013bc4:	af02      	add	r7, sp, #8
 8013bc6:	60f8      	str	r0, [r7, #12]
 8013bc8:	60b9      	str	r1, [r7, #8]
 8013bca:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7ec fb01 	bl	80001e4 <strlen>
 8013be2:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8013be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d06b      	beq.n	8013cc2 <http_find_file+0x102>
 8013bea:	68ba      	ldr	r2, [r7, #8]
 8013bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bee:	3b01      	subs	r3, #1
 8013bf0:	4413      	add	r3, r2
 8013bf2:	781b      	ldrb	r3, [r3, #0]
 8013bf4:	2b2f      	cmp	r3, #47	; 0x2f
 8013bf6:	d164      	bne.n	8013cc2 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8013bf8:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8013bfa:	4a72      	ldr	r2, [pc, #456]	; (8013dc4 <http_find_file+0x204>)
 8013bfc:	4293      	cmp	r3, r2
 8013bfe:	d102      	bne.n	8013c06 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8013c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c02:	2b01      	cmp	r3, #1
 8013c04:	d15d      	bne.n	8013cc2 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8013c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c08:	3b01      	subs	r3, #1
 8013c0a:	2b3f      	cmp	r3, #63	; 0x3f
 8013c0c:	bf28      	it	cs
 8013c0e:	233f      	movcs	r3, #63	; 0x3f
 8013c10:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8013c12:	6a3b      	ldr	r3, [r7, #32]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d00a      	beq.n	8013c2e <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	6a3a      	ldr	r2, [r7, #32]
 8013c1c:	4619      	mov	r1, r3
 8013c1e:	4869      	ldr	r0, [pc, #420]	; (8013dc4 <http_find_file+0x204>)
 8013c20:	f00b f964 	bl	801eeec <memcpy>
      http_uri_buf[copy_len] = 0;
 8013c24:	4a67      	ldr	r2, [pc, #412]	; (8013dc4 <http_find_file+0x204>)
 8013c26:	6a3b      	ldr	r3, [r7, #32]
 8013c28:	4413      	add	r3, r2
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8013c2e:	2300      	movs	r3, #0
 8013c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013c32:	e043      	b.n	8013cbc <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8013c34:	6a3b      	ldr	r3, [r7, #32]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d028      	beq.n	8013c8c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8013c3a:	6a3b      	ldr	r3, [r7, #32]
 8013c3c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8013c40:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8013c42:	69fb      	ldr	r3, [r7, #28]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d01e      	beq.n	8013c86 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8013c48:	4a5f      	ldr	r2, [pc, #380]	; (8013dc8 <http_find_file+0x208>)
 8013c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7ec fac7 	bl	80001e4 <strlen>
 8013c56:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8013c58:	69ba      	ldr	r2, [r7, #24]
 8013c5a:	69fb      	ldr	r3, [r7, #28]
 8013c5c:	4293      	cmp	r3, r2
 8013c5e:	bf28      	it	cs
 8013c60:	4613      	movcs	r3, r2
 8013c62:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8013c64:	6a3b      	ldr	r3, [r7, #32]
 8013c66:	4a57      	ldr	r2, [pc, #348]	; (8013dc4 <http_find_file+0x204>)
 8013c68:	1898      	adds	r0, r3, r2
 8013c6a:	4a57      	ldr	r2, [pc, #348]	; (8013dc8 <http_find_file+0x208>)
 8013c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c6e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013c72:	697a      	ldr	r2, [r7, #20]
 8013c74:	4619      	mov	r1, r3
 8013c76:	f00b f939 	bl	801eeec <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8013c7a:	6a3a      	ldr	r2, [r7, #32]
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	4413      	add	r3, r2
 8013c80:	4a50      	ldr	r2, [pc, #320]	; (8013dc4 <http_find_file+0x204>)
 8013c82:	2100      	movs	r1, #0
 8013c84:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8013c86:	4b4f      	ldr	r3, [pc, #316]	; (8013dc4 <http_find_file+0x204>)
 8013c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c8a:	e004      	b.n	8013c96 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8013c8c:	4a4e      	ldr	r2, [pc, #312]	; (8013dc8 <http_find_file+0x208>)
 8013c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013c94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f7fe ff68 	bl	8012b70 <fs_open>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8013ca4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d104      	bne.n	8013cb6 <http_find_file+0xf6>
        uri = file_name;
 8013cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cae:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8013cb4:	e005      	b.n	8013cc2 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8013cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cb8:	3301      	adds	r3, #1
 8013cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cbe:	2b04      	cmp	r3, #4
 8013cc0:	d9b8      	bls.n	8013c34 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8013cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d161      	bne.n	8013d8c <http_find_file+0x1cc>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8013cc8:	68bb      	ldr	r3, [r7, #8]
 8013cca:	213f      	movs	r1, #63	; 0x3f
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f00b fadf 	bl	801f290 <strchr>
 8013cd2:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8013cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d005      	beq.n	8013ce6 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8013cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cdc:	2200      	movs	r2, #0
 8013cde:	701a      	strb	r2, [r3, #0]
      params++;
 8013ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ce2:	3301      	adds	r3, #1
 8013ce4:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8013ce6:	4b39      	ldr	r3, [pc, #228]	; (8013dcc <http_find_file+0x20c>)
 8013ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8013cec:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8013cee:	4b38      	ldr	r3, [pc, #224]	; (8013dd0 <http_find_file+0x210>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d034      	beq.n	8013d60 <http_find_file+0x1a0>
 8013cf6:	4b37      	ldr	r3, [pc, #220]	; (8013dd4 <http_find_file+0x214>)
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d030      	beq.n	8013d60 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 8013cfe:	2300      	movs	r3, #0
 8013d00:	633b      	str	r3, [r7, #48]	; 0x30
 8013d02:	e028      	b.n	8013d56 <http_find_file+0x196>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8013d04:	68b8      	ldr	r0, [r7, #8]
 8013d06:	4b33      	ldr	r3, [pc, #204]	; (8013dd4 <http_find_file+0x214>)
 8013d08:	681a      	ldr	r2, [r3, #0]
 8013d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d0c:	00db      	lsls	r3, r3, #3
 8013d0e:	4413      	add	r3, r2
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	4619      	mov	r1, r3
 8013d14:	f7ec fa5c 	bl	80001d0 <strcmp>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d118      	bne.n	8013d50 <http_find_file+0x190>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8013d1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	f7ff fb0f 	bl	8013344 <extract_uri_parameters>
 8013d26:	4603      	mov	r3, r0
 8013d28:	4a28      	ldr	r2, [pc, #160]	; (8013dcc <http_find_file+0x20c>)
 8013d2a:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8013d2c:	4b29      	ldr	r3, [pc, #164]	; (8013dd4 <http_find_file+0x214>)
 8013d2e:	681a      	ldr	r2, [r3, #0]
 8013d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d32:	00db      	lsls	r3, r3, #3
 8013d34:	4413      	add	r3, r2
 8013d36:	685c      	ldr	r4, [r3, #4]
 8013d38:	4b24      	ldr	r3, [pc, #144]	; (8013dcc <http_find_file+0x20c>)
 8013d3a:	6819      	ldr	r1, [r3, #0]
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
                                         hs->param_vals);
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	336c      	adds	r3, #108	; 0x6c
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8013d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d48:	47a0      	blx	r4
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	60bb      	str	r3, [r7, #8]
          break;
 8013d4e:	e007      	b.n	8013d60 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 8013d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d52:	3301      	adds	r3, #1
 8013d54:	633b      	str	r3, [r7, #48]	; 0x30
 8013d56:	4b1e      	ldr	r3, [pc, #120]	; (8013dd0 <http_find_file+0x210>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	dbd1      	blt.n	8013d04 <http_find_file+0x144>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	68ba      	ldr	r2, [r7, #8]
 8013d64:	4611      	mov	r1, r2
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7fe ff02 	bl	8012b70 <fs_open>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8013d70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d102      	bne.n	8013d7e <http_find_file+0x1be>
      file = &hs->file_handle;
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8013d7c:	e006      	b.n	8013d8c <http_find_file+0x1cc>
    } else {
      file = http_get_404_file(hs, &uri);
 8013d7e:	f107 0308 	add.w	r3, r7, #8
 8013d82:	4619      	mov	r1, r3
 8013d84:	68f8      	ldr	r0, [r7, #12]
 8013d86:	f7ff fbdb 	bl	8013540 <http_get_404_file>
 8013d8a:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8013d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d106      	bne.n	8013da0 <http_find_file+0x1e0>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8013d92:	f107 0308 	add.w	r3, r7, #8
 8013d96:	4619      	mov	r1, r3
 8013d98:	68f8      	ldr	r0, [r7, #12]
 8013d9a:	f7ff fbd1 	bl	8013540 <http_get_404_file>
 8013d9e:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8013da0:	68ba      	ldr	r2, [r7, #8]
 8013da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013da4:	9301      	str	r3, [sp, #4]
 8013da6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013daa:	9300      	str	r3, [sp, #0]
 8013dac:	4613      	mov	r3, r2
 8013dae:	687a      	ldr	r2, [r7, #4]
 8013db0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013db2:	68f8      	ldr	r0, [r7, #12]
 8013db4:	f000 f810 	bl	8013dd8 <http_init_file>
 8013db8:	4603      	mov	r3, r0
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3744      	adds	r7, #68	; 0x44
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd90      	pop	{r4, r7, pc}
 8013dc2:	bf00      	nop
 8013dc4:	2000c760 	.word	0x2000c760
 8013dc8:	0807ab48 	.word	0x0807ab48
 8013dcc:	2000c7a8 	.word	0x2000c7a8
 8013dd0:	2000c7a4 	.word	0x2000c7a4
 8013dd4:	2000c7a0 	.word	0x2000c7a0

08013dd8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b086      	sub	sp, #24
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	60f8      	str	r0, [r7, #12]
 8013de0:	60b9      	str	r1, [r7, #8]
 8013de2:	607a      	str	r2, [r7, #4]
 8013de4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d05c      	beq.n	8013ea6 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8013dec:	68bb      	ldr	r3, [r7, #8]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d106      	bne.n	8013e02 <http_init_file+0x2a>
 8013df4:	4b35      	ldr	r3, [pc, #212]	; (8013ecc <http_init_file+0xf4>)
 8013df6:	f640 2269 	movw	r2, #2665	; 0xa69
 8013dfa:	4935      	ldr	r1, [pc, #212]	; (8013ed0 <http_init_file+0xf8>)
 8013dfc:	4835      	ldr	r0, [pc, #212]	; (8013ed4 <http_init_file+0xfc>)
 8013dfe:	f00b f8a5 	bl	801ef4c <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	68ba      	ldr	r2, [r7, #8]
 8013e06:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	681a      	ldr	r2, [r3, #0]
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	685b      	ldr	r3, [r3, #4]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	da06      	bge.n	8013e26 <http_init_file+0x4e>
 8013e18:	4b2c      	ldr	r3, [pc, #176]	; (8013ecc <http_init_file+0xf4>)
 8013e1a:	f640 2292 	movw	r2, #2706	; 0xa92
 8013e1e:	492e      	ldr	r1, [pc, #184]	; (8013ed8 <http_init_file+0x100>)
 8013e20:	482c      	ldr	r0, [pc, #176]	; (8013ed4 <http_init_file+0xfc>)
 8013e22:	f00b f893 	bl	801ef4c <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8013e26:	68bb      	ldr	r3, [r7, #8]
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	461a      	mov	r2, r3
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	2200      	movs	r2, #0
 8013e34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	695b      	ldr	r3, [r3, #20]
 8013e3c:	7c1b      	ldrb	r3, [r3, #16]
 8013e3e:	f003 0301 	and.w	r3, r3, #1
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d106      	bne.n	8013e54 <http_init_file+0x7c>
 8013e46:	4b21      	ldr	r3, [pc, #132]	; (8013ecc <http_init_file+0xf4>)
 8013e48:	f640 22a1 	movw	r2, #2721	; 0xaa1
 8013e4c:	4923      	ldr	r1, [pc, #140]	; (8013edc <http_init_file+0x104>)
 8013e4e:	4821      	ldr	r0, [pc, #132]	; (8013ed4 <http_init_file+0xfc>)
 8013e50:	f00b f87c 	bl	801ef4c <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d032      	beq.n	8013ec0 <http_init_file+0xe8>
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	695b      	ldr	r3, [r3, #20]
 8013e5e:	7c1b      	ldrb	r3, [r3, #16]
 8013e60:	f003 0301 	and.w	r3, r3, #1
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d02b      	beq.n	8013ec0 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	6998      	ldr	r0, [r3, #24]
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e70:	461a      	mov	r2, r3
 8013e72:	491b      	ldr	r1, [pc, #108]	; (8013ee0 <http_init_file+0x108>)
 8013e74:	f000 fa44 	bl	8014300 <lwip_strnstr>
 8013e78:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d01f      	beq.n	8013ec0 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	1d1a      	adds	r2, r3, #4
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	699b      	ldr	r3, [r3, #24]
 8013e88:	1ad3      	subs	r3, r2, r3
 8013e8a:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	699a      	ldr	r2, [r3, #24]
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	441a      	add	r2, r3
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013e9c:	693b      	ldr	r3, [r7, #16]
 8013e9e:	1ad2      	subs	r2, r2, r3
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	625a      	str	r2, [r3, #36]	; 0x24
 8013ea4:	e00c      	b.n	8013ec0 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	2200      	movs	r2, #0
 8013eb0:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8013ec0:	2300      	movs	r3, #0
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	3718      	adds	r7, #24
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}
 8013eca:	bf00      	nop
 8013ecc:	08021270 	.word	0x08021270
 8013ed0:	08021388 	.word	0x08021388
 8013ed4:	080212b8 	.word	0x080212b8
 8013ed8:	0802139c 	.word	0x0802139c
 8013edc:	080213bc 	.word	0x080213bc
 8013ee0:	08021240 	.word	0x08021240

08013ee4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
 8013eec:	460b      	mov	r3, r1
 8013eee:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d002      	beq.n	8013f00 <http_err+0x1c>
    http_state_free(hs);
 8013efa:	68f8      	ldr	r0, [r7, #12]
 8013efc:	f7ff f938 	bl	8013170 <http_state_free>
  }
}
 8013f00:	bf00      	nop
 8013f02:	3710      	adds	r7, #16
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b086      	sub	sp, #24
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	4613      	mov	r3, r2
 8013f14:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d101      	bne.n	8013f24 <http_sent+0x1c>
    return ERR_OK;
 8013f20:	2300      	movs	r3, #0
 8013f22:	e008      	b.n	8013f36 <http_sent+0x2e>
  }

  hs->retries = 0;
 8013f24:	697b      	ldr	r3, [r7, #20]
 8013f26:	2200      	movs	r2, #0
 8013f28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8013f2c:	6979      	ldr	r1, [r7, #20]
 8013f2e:	68b8      	ldr	r0, [r7, #8]
 8013f30:	f7ff facf 	bl	80134d2 <http_send>

  return ERR_OK;
 8013f34:	2300      	movs	r3, #0
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	3718      	adds	r7, #24
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}

08013f3e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8013f3e:	b580      	push	{r7, lr}
 8013f40:	b084      	sub	sp, #16
 8013f42:	af00      	add	r7, sp, #0
 8013f44:	6078      	str	r0, [r7, #4]
 8013f46:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d107      	bne.n	8013f62 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8013f52:	2100      	movs	r1, #0
 8013f54:	6838      	ldr	r0, [r7, #0]
 8013f56:	f7ff f9d9 	bl	801330c <http_close_conn>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	e021      	b.n	8013fa6 <http_poll+0x68>
  } else {
    hs->retries++;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f68:	3301      	adds	r3, #1
 8013f6a:	b2da      	uxtb	r2, r3
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f78:	2b04      	cmp	r3, #4
 8013f7a:	d105      	bne.n	8013f88 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8013f7c:	68f9      	ldr	r1, [r7, #12]
 8013f7e:	6838      	ldr	r0, [r7, #0]
 8013f80:	f7ff f9c4 	bl	801330c <http_close_conn>
      return ERR_OK;
 8013f84:	2300      	movs	r3, #0
 8013f86:	e00e      	b.n	8013fa6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	695b      	ldr	r3, [r3, #20]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d009      	beq.n	8013fa4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8013f90:	68f9      	ldr	r1, [r7, #12]
 8013f92:	6838      	ldr	r0, [r7, #0]
 8013f94:	f7ff fa9d 	bl	80134d2 <http_send>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d002      	beq.n	8013fa4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8013f9e:	6838      	ldr	r0, [r7, #0]
 8013fa0:	f007 f8ee 	bl	801b180 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8013fa4:	2300      	movs	r3, #0
}
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	3710      	adds	r7, #16
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}
	...

08013fb0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b086      	sub	sp, #24
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	60f8      	str	r0, [r7, #12]
 8013fb8:	60b9      	str	r1, [r7, #8]
 8013fba:	607a      	str	r2, [r7, #4]
 8013fbc:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8013fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d105      	bne.n	8013fd6 <http_recv+0x26>
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d002      	beq.n	8013fd6 <http_recv+0x26>
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d111      	bne.n	8013ffa <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d008      	beq.n	8013fee <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	891b      	ldrh	r3, [r3, #8]
 8013fe0:	4619      	mov	r1, r3
 8013fe2:	68b8      	ldr	r0, [r7, #8]
 8013fe4:	f002 fcc0 	bl	8016968 <tcp_recved>
      pbuf_free(p);
 8013fe8:	6878      	ldr	r0, [r7, #4]
 8013fea:	f001 fd4f 	bl	8015a8c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8013fee:	6979      	ldr	r1, [r7, #20]
 8013ff0:	68b8      	ldr	r0, [r7, #8]
 8013ff2:	f7ff f98b 	bl	801330c <http_close_conn>
    return ERR_OK;
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	e072      	b.n	80140e0 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	891b      	ldrh	r3, [r3, #8]
 8013ffe:	4619      	mov	r1, r3
 8014000:	68b8      	ldr	r0, [r7, #8]
 8014002:	f002 fcb1 	bl	8016968 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801400c:	2b00      	cmp	r3, #0
 801400e:	d012      	beq.n	8014036 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 8014010:	697b      	ldr	r3, [r7, #20]
 8014012:	2200      	movs	r2, #0
 8014014:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 8014018:	6879      	ldr	r1, [r7, #4]
 801401a:	6978      	ldr	r0, [r7, #20]
 801401c:	f7ff faee 	bl	80135fc <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 8014020:	697b      	ldr	r3, [r7, #20]
 8014022:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014026:	2b00      	cmp	r3, #0
 8014028:	d103      	bne.n	8014032 <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 801402a:	6979      	ldr	r1, [r7, #20]
 801402c:	68b8      	ldr	r0, [r7, #8]
 801402e:	f7ff fa50 	bl	80134d2 <http_send>
    }
    return ERR_OK;
 8014032:	2300      	movs	r3, #0
 8014034:	e054      	b.n	80140e0 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	695b      	ldr	r3, [r3, #20]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d14c      	bne.n	80140d8 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 801403e:	68ba      	ldr	r2, [r7, #8]
 8014040:	6979      	ldr	r1, [r7, #20]
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	f7ff fc8e 	bl	8013964 <http_parse_request>
 8014048:	4603      	mov	r3, r0
 801404a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801404c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d015      	beq.n	8014080 <http_recv+0xd0>
 8014054:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014058:	f113 0f05 	cmn.w	r3, #5
 801405c:	d010      	beq.n	8014080 <http_recv+0xd0>
 801405e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014062:	f113 0f10 	cmn.w	r3, #16
 8014066:	d00b      	beq.n	8014080 <http_recv+0xd0>
 8014068:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801406c:	f113 0f08 	cmn.w	r3, #8
 8014070:	d006      	beq.n	8014080 <http_recv+0xd0>
 8014072:	4b1d      	ldr	r3, [pc, #116]	; (80140e8 <http_recv+0x138>)
 8014074:	f640 3262 	movw	r2, #2914	; 0xb62
 8014078:	491c      	ldr	r1, [pc, #112]	; (80140ec <http_recv+0x13c>)
 801407a:	481d      	ldr	r0, [pc, #116]	; (80140f0 <http_recv+0x140>)
 801407c:	f00a ff66 	bl	801ef4c <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8014080:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014084:	f113 0f05 	cmn.w	r3, #5
 8014088:	d00b      	beq.n	80140a2 <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	6a1b      	ldr	r3, [r3, #32]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d007      	beq.n	80140a2 <http_recv+0xf2>
          pbuf_free(hs->req);
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	6a1b      	ldr	r3, [r3, #32]
 8014096:	4618      	mov	r0, r3
 8014098:	f001 fcf8 	bl	8015a8c <pbuf_free>
          hs->req = NULL;
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	2200      	movs	r2, #0
 80140a0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80140a2:	6878      	ldr	r0, [r7, #4]
 80140a4:	f001 fcf2 	bl	8015a8c <pbuf_free>
      if (parsed == ERR_OK) {
 80140a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d109      	bne.n	80140c4 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 80140b0:	697b      	ldr	r3, [r7, #20]
 80140b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d111      	bne.n	80140de <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80140ba:	6979      	ldr	r1, [r7, #20]
 80140bc:	68b8      	ldr	r0, [r7, #8]
 80140be:	f7ff fa08 	bl	80134d2 <http_send>
 80140c2:	e00c      	b.n	80140de <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 80140c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140c8:	f113 0f10 	cmn.w	r3, #16
 80140cc:	d107      	bne.n	80140de <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80140ce:	6979      	ldr	r1, [r7, #20]
 80140d0:	68b8      	ldr	r0, [r7, #8]
 80140d2:	f7ff f91b 	bl	801330c <http_close_conn>
 80140d6:	e002      	b.n	80140de <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	f001 fcd7 	bl	8015a8c <pbuf_free>
    }
  }
  return ERR_OK;
 80140de:	2300      	movs	r3, #0
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	3718      	adds	r7, #24
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}
 80140e8:	08021270 	.word	0x08021270
 80140ec:	080213e8 	.word	0x080213e8
 80140f0:	080212b8 	.word	0x080212b8

080140f4 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b086      	sub	sp, #24
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	60f8      	str	r0, [r7, #12]
 80140fc:	60b9      	str	r1, [r7, #8]
 80140fe:	4613      	mov	r3, r2
 8014100:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8014102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d102      	bne.n	8014110 <http_accept+0x1c>
 801410a:	68bb      	ldr	r3, [r7, #8]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d102      	bne.n	8014116 <http_accept+0x22>
    return ERR_VAL;
 8014110:	f06f 0305 	mvn.w	r3, #5
 8014114:	e025      	b.n	8014162 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8014116:	2101      	movs	r1, #1
 8014118:	68b8      	ldr	r0, [r7, #8]
 801411a:	f003 f909 	bl	8017330 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 801411e:	f7fe fd8b 	bl	8012c38 <http_state_alloc>
 8014122:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d102      	bne.n	8014130 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 801412a:	f04f 33ff 	mov.w	r3, #4294967295
 801412e:	e018      	b.n	8014162 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8014130:	697b      	ldr	r3, [r7, #20]
 8014132:	68ba      	ldr	r2, [r7, #8]
 8014134:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8014136:	6979      	ldr	r1, [r7, #20]
 8014138:	68b8      	ldr	r0, [r7, #8]
 801413a:	f003 faf9 	bl	8017730 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 801413e:	490b      	ldr	r1, [pc, #44]	; (801416c <http_accept+0x78>)
 8014140:	68b8      	ldr	r0, [r7, #8]
 8014142:	f003 fb07 	bl	8017754 <tcp_recv>
  altcp_err(pcb, http_err);
 8014146:	490a      	ldr	r1, [pc, #40]	; (8014170 <http_accept+0x7c>)
 8014148:	68b8      	ldr	r0, [r7, #8]
 801414a:	f003 fb47 	bl	80177dc <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 801414e:	2204      	movs	r2, #4
 8014150:	4908      	ldr	r1, [pc, #32]	; (8014174 <http_accept+0x80>)
 8014152:	68b8      	ldr	r0, [r7, #8]
 8014154:	f003 fb7c 	bl	8017850 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8014158:	4907      	ldr	r1, [pc, #28]	; (8014178 <http_accept+0x84>)
 801415a:	68b8      	ldr	r0, [r7, #8]
 801415c:	f003 fb1c 	bl	8017798 <tcp_sent>

  return ERR_OK;
 8014160:	2300      	movs	r3, #0
}
 8014162:	4618      	mov	r0, r3
 8014164:	3718      	adds	r7, #24
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop
 801416c:	08013fb1 	.word	0x08013fb1
 8014170:	08013ee5 	.word	0x08013ee5
 8014174:	08013f3f 	.word	0x08013f3f
 8014178:	08013f09 	.word	0x08013f09

0801417c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b084      	sub	sp, #16
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	460b      	mov	r3, r1
 8014186:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d029      	beq.n	80141e2 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 801418e:	2101      	movs	r1, #1
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f003 f8cd 	bl	8017330 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8014196:	887b      	ldrh	r3, [r7, #2]
 8014198:	461a      	mov	r2, r3
 801419a:	4914      	ldr	r1, [pc, #80]	; (80141ec <httpd_init_pcb+0x70>)
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f002 fa15 	bl	80165cc <tcp_bind>
 80141a2:	4603      	mov	r3, r0
 80141a4:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80141a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d006      	beq.n	80141bc <httpd_init_pcb+0x40>
 80141ae:	4b10      	ldr	r3, [pc, #64]	; (80141f0 <httpd_init_pcb+0x74>)
 80141b0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80141b4:	490f      	ldr	r1, [pc, #60]	; (80141f4 <httpd_init_pcb+0x78>)
 80141b6:	4810      	ldr	r0, [pc, #64]	; (80141f8 <httpd_init_pcb+0x7c>)
 80141b8:	f00a fec8 	bl	801ef4c <iprintf>
    pcb = altcp_listen(pcb);
 80141bc:	21ff      	movs	r1, #255	; 0xff
 80141be:	6878      	ldr	r0, [r7, #4]
 80141c0:	f002 fabc 	bl	801673c <tcp_listen_with_backlog>
 80141c4:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d106      	bne.n	80141da <httpd_init_pcb+0x5e>
 80141cc:	4b08      	ldr	r3, [pc, #32]	; (80141f0 <httpd_init_pcb+0x74>)
 80141ce:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80141d2:	490a      	ldr	r1, [pc, #40]	; (80141fc <httpd_init_pcb+0x80>)
 80141d4:	4808      	ldr	r0, [pc, #32]	; (80141f8 <httpd_init_pcb+0x7c>)
 80141d6:	f00a feb9 	bl	801ef4c <iprintf>
    altcp_accept(pcb, http_accept);
 80141da:	4909      	ldr	r1, [pc, #36]	; (8014200 <httpd_init_pcb+0x84>)
 80141dc:	6878      	ldr	r0, [r7, #4]
 80141de:	f003 fb1f 	bl	8017820 <tcp_accept>
  }
}
 80141e2:	bf00      	nop
 80141e4:	3710      	adds	r7, #16
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}
 80141ea:	bf00      	nop
 80141ec:	0807ac80 	.word	0x0807ac80
 80141f0:	08021270 	.word	0x08021270
 80141f4:	08021414 	.word	0x08021414
 80141f8:	080212b8 	.word	0x080212b8
 80141fc:	08021430 	.word	0x08021430
 8014200:	080140f5 	.word	0x080140f5

08014204 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b082      	sub	sp, #8
 8014208:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801420a:	202e      	movs	r0, #46	; 0x2e
 801420c:	f003 fa82 	bl	8017714 <tcp_new_ip_type>
 8014210:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d106      	bne.n	8014226 <httpd_init+0x22>
 8014218:	4b07      	ldr	r3, [pc, #28]	; (8014238 <httpd_init+0x34>)
 801421a:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
 801421e:	4907      	ldr	r1, [pc, #28]	; (801423c <httpd_init+0x38>)
 8014220:	4807      	ldr	r0, [pc, #28]	; (8014240 <httpd_init+0x3c>)
 8014222:	f00a fe93 	bl	801ef4c <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8014226:	2150      	movs	r1, #80	; 0x50
 8014228:	6878      	ldr	r0, [r7, #4]
 801422a:	f7ff ffa7 	bl	801417c <httpd_init_pcb>
}
 801422e:	bf00      	nop
 8014230:	3708      	adds	r7, #8
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}
 8014236:	bf00      	nop
 8014238:	08021270 	.word	0x08021270
 801423c:	08021450 	.word	0x08021450
 8014240:	080212b8 	.word	0x080212b8

08014244 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b082      	sub	sp, #8
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
 801424c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d106      	bne.n	8014262 <http_set_cgi_handlers+0x1e>
 8014254:	4b0d      	ldr	r3, [pc, #52]	; (801428c <http_set_cgi_handlers+0x48>)
 8014256:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 801425a:	490d      	ldr	r1, [pc, #52]	; (8014290 <http_set_cgi_handlers+0x4c>)
 801425c:	480d      	ldr	r0, [pc, #52]	; (8014294 <http_set_cgi_handlers+0x50>)
 801425e:	f00a fe75 	bl	801ef4c <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	2b00      	cmp	r3, #0
 8014266:	dc06      	bgt.n	8014276 <http_set_cgi_handlers+0x32>
 8014268:	4b08      	ldr	r3, [pc, #32]	; (801428c <http_set_cgi_handlers+0x48>)
 801426a:	f640 4211 	movw	r2, #3089	; 0xc11
 801426e:	490a      	ldr	r1, [pc, #40]	; (8014298 <http_set_cgi_handlers+0x54>)
 8014270:	4808      	ldr	r0, [pc, #32]	; (8014294 <http_set_cgi_handlers+0x50>)
 8014272:	f00a fe6b 	bl	801ef4c <iprintf>

  httpd_cgis = cgis;
 8014276:	4a09      	ldr	r2, [pc, #36]	; (801429c <http_set_cgi_handlers+0x58>)
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 801427c:	4a08      	ldr	r2, [pc, #32]	; (80142a0 <http_set_cgi_handlers+0x5c>)
 801427e:	683b      	ldr	r3, [r7, #0]
 8014280:	6013      	str	r3, [r2, #0]
}
 8014282:	bf00      	nop
 8014284:	3708      	adds	r7, #8
 8014286:	46bd      	mov	sp, r7
 8014288:	bd80      	pop	{r7, pc}
 801428a:	bf00      	nop
 801428c:	08021270 	.word	0x08021270
 8014290:	0802146c 	.word	0x0802146c
 8014294:	080212b8 	.word	0x080212b8
 8014298:	0802147c 	.word	0x0802147c
 801429c:	2000c7a0 	.word	0x2000c7a0
 80142a0:	2000c7a4 	.word	0x2000c7a4

080142a4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80142a4:	b480      	push	{r7}
 80142a6:	b083      	sub	sp, #12
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	4603      	mov	r3, r0
 80142ac:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80142ae:	88fb      	ldrh	r3, [r7, #6]
 80142b0:	021b      	lsls	r3, r3, #8
 80142b2:	b21a      	sxth	r2, r3
 80142b4:	88fb      	ldrh	r3, [r7, #6]
 80142b6:	0a1b      	lsrs	r3, r3, #8
 80142b8:	b29b      	uxth	r3, r3
 80142ba:	b21b      	sxth	r3, r3
 80142bc:	4313      	orrs	r3, r2
 80142be:	b21b      	sxth	r3, r3
 80142c0:	b29b      	uxth	r3, r3
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	370c      	adds	r7, #12
 80142c6:	46bd      	mov	sp, r7
 80142c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142cc:	4770      	bx	lr

080142ce <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80142ce:	b480      	push	{r7}
 80142d0:	b083      	sub	sp, #12
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	061a      	lsls	r2, r3, #24
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	021b      	lsls	r3, r3, #8
 80142de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80142e2:	431a      	orrs	r2, r3
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	0a1b      	lsrs	r3, r3, #8
 80142e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80142ec:	431a      	orrs	r2, r3
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	0e1b      	lsrs	r3, r3, #24
 80142f2:	4313      	orrs	r3, r2
}
 80142f4:	4618      	mov	r0, r3
 80142f6:	370c      	adds	r7, #12
 80142f8:	46bd      	mov	sp, r7
 80142fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fe:	4770      	bx	lr

08014300 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b086      	sub	sp, #24
 8014304:	af00      	add	r7, sp, #0
 8014306:	60f8      	str	r0, [r7, #12]
 8014308:	60b9      	str	r1, [r7, #8]
 801430a:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 801430c:	68b8      	ldr	r0, [r7, #8]
 801430e:	f7eb ff69 	bl	80001e4 <strlen>
 8014312:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8014314:	693b      	ldr	r3, [r7, #16]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d101      	bne.n	801431e <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	e022      	b.n	8014364 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	617b      	str	r3, [r7, #20]
 8014322:	e012      	b.n	801434a <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	781a      	ldrb	r2, [r3, #0]
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	429a      	cmp	r2, r3
 801432e:	d109      	bne.n	8014344 <lwip_strnstr+0x44>
 8014330:	693a      	ldr	r2, [r7, #16]
 8014332:	68b9      	ldr	r1, [r7, #8]
 8014334:	6978      	ldr	r0, [r7, #20]
 8014336:	f00a ffc0 	bl	801f2ba <strncmp>
 801433a:	4603      	mov	r3, r0
 801433c:	2b00      	cmp	r3, #0
 801433e:	d101      	bne.n	8014344 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	e00f      	b.n	8014364 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8014344:	697b      	ldr	r3, [r7, #20]
 8014346:	3301      	adds	r3, #1
 8014348:	617b      	str	r3, [r7, #20]
 801434a:	697b      	ldr	r3, [r7, #20]
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d007      	beq.n	8014362 <lwip_strnstr+0x62>
 8014352:	697a      	ldr	r2, [r7, #20]
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	441a      	add	r2, r3
 8014358:	68f9      	ldr	r1, [r7, #12]
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	440b      	add	r3, r1
 801435e:	429a      	cmp	r2, r3
 8014360:	d9e0      	bls.n	8014324 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8014362:	2300      	movs	r3, #0
}
 8014364:	4618      	mov	r0, r3
 8014366:	3718      	adds	r7, #24
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}

0801436c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b082      	sub	sp, #8
 8014370:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8014372:	2300      	movs	r3, #0
 8014374:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8014376:	f00a fcf9 	bl	801ed6c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801437a:	f000 f8d5 	bl	8014528 <mem_init>
  memp_init();
 801437e:	f000 fc31 	bl	8014be4 <memp_init>
  pbuf_init();
  netif_init();
 8014382:	f000 fcf7 	bl	8014d74 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8014386:	f007 ffeb 	bl	801c360 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801438a:	f001 fe19 	bl	8015fc0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801438e:	f007 ff2d 	bl	801c1ec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8014392:	bf00      	nop
 8014394:	3708      	adds	r7, #8
 8014396:	46bd      	mov	sp, r7
 8014398:	bd80      	pop	{r7, pc}
	...

0801439c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801439c:	b480      	push	{r7}
 801439e:	b083      	sub	sp, #12
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	4603      	mov	r3, r0
 80143a4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80143a6:	4b05      	ldr	r3, [pc, #20]	; (80143bc <ptr_to_mem+0x20>)
 80143a8:	681a      	ldr	r2, [r3, #0]
 80143aa:	88fb      	ldrh	r3, [r7, #6]
 80143ac:	4413      	add	r3, r2
}
 80143ae:	4618      	mov	r0, r3
 80143b0:	370c      	adds	r7, #12
 80143b2:	46bd      	mov	sp, r7
 80143b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b8:	4770      	bx	lr
 80143ba:	bf00      	nop
 80143bc:	2000c7b4 	.word	0x2000c7b4

080143c0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80143c0:	b480      	push	{r7}
 80143c2:	b083      	sub	sp, #12
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80143c8:	4b05      	ldr	r3, [pc, #20]	; (80143e0 <mem_to_ptr+0x20>)
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	687a      	ldr	r2, [r7, #4]
 80143ce:	1ad3      	subs	r3, r2, r3
 80143d0:	b29b      	uxth	r3, r3
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	370c      	adds	r7, #12
 80143d6:	46bd      	mov	sp, r7
 80143d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143dc:	4770      	bx	lr
 80143de:	bf00      	nop
 80143e0:	2000c7b4 	.word	0x2000c7b4

080143e4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80143e4:	b590      	push	{r4, r7, lr}
 80143e6:	b085      	sub	sp, #20
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80143ec:	4b45      	ldr	r3, [pc, #276]	; (8014504 <plug_holes+0x120>)
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	687a      	ldr	r2, [r7, #4]
 80143f2:	429a      	cmp	r2, r3
 80143f4:	d206      	bcs.n	8014404 <plug_holes+0x20>
 80143f6:	4b44      	ldr	r3, [pc, #272]	; (8014508 <plug_holes+0x124>)
 80143f8:	f240 12df 	movw	r2, #479	; 0x1df
 80143fc:	4943      	ldr	r1, [pc, #268]	; (801450c <plug_holes+0x128>)
 80143fe:	4844      	ldr	r0, [pc, #272]	; (8014510 <plug_holes+0x12c>)
 8014400:	f00a fda4 	bl	801ef4c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014404:	4b43      	ldr	r3, [pc, #268]	; (8014514 <plug_holes+0x130>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	687a      	ldr	r2, [r7, #4]
 801440a:	429a      	cmp	r2, r3
 801440c:	d306      	bcc.n	801441c <plug_holes+0x38>
 801440e:	4b3e      	ldr	r3, [pc, #248]	; (8014508 <plug_holes+0x124>)
 8014410:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014414:	4940      	ldr	r1, [pc, #256]	; (8014518 <plug_holes+0x134>)
 8014416:	483e      	ldr	r0, [pc, #248]	; (8014510 <plug_holes+0x12c>)
 8014418:	f00a fd98 	bl	801ef4c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	791b      	ldrb	r3, [r3, #4]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d006      	beq.n	8014432 <plug_holes+0x4e>
 8014424:	4b38      	ldr	r3, [pc, #224]	; (8014508 <plug_holes+0x124>)
 8014426:	f240 12e1 	movw	r2, #481	; 0x1e1
 801442a:	493c      	ldr	r1, [pc, #240]	; (801451c <plug_holes+0x138>)
 801442c:	4838      	ldr	r0, [pc, #224]	; (8014510 <plug_holes+0x12c>)
 801442e:	f00a fd8d 	bl	801ef4c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	881b      	ldrh	r3, [r3, #0]
 8014436:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801443a:	d906      	bls.n	801444a <plug_holes+0x66>
 801443c:	4b32      	ldr	r3, [pc, #200]	; (8014508 <plug_holes+0x124>)
 801443e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8014442:	4937      	ldr	r1, [pc, #220]	; (8014520 <plug_holes+0x13c>)
 8014444:	4832      	ldr	r0, [pc, #200]	; (8014510 <plug_holes+0x12c>)
 8014446:	f00a fd81 	bl	801ef4c <iprintf>

  nmem = ptr_to_mem(mem->next);
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	881b      	ldrh	r3, [r3, #0]
 801444e:	4618      	mov	r0, r3
 8014450:	f7ff ffa4 	bl	801439c <ptr_to_mem>
 8014454:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8014456:	687a      	ldr	r2, [r7, #4]
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	429a      	cmp	r2, r3
 801445c:	d024      	beq.n	80144a8 <plug_holes+0xc4>
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	791b      	ldrb	r3, [r3, #4]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d120      	bne.n	80144a8 <plug_holes+0xc4>
 8014466:	4b2b      	ldr	r3, [pc, #172]	; (8014514 <plug_holes+0x130>)
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	68fa      	ldr	r2, [r7, #12]
 801446c:	429a      	cmp	r2, r3
 801446e:	d01b      	beq.n	80144a8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8014470:	4b2c      	ldr	r3, [pc, #176]	; (8014524 <plug_holes+0x140>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	68fa      	ldr	r2, [r7, #12]
 8014476:	429a      	cmp	r2, r3
 8014478:	d102      	bne.n	8014480 <plug_holes+0x9c>
      lfree = mem;
 801447a:	4a2a      	ldr	r2, [pc, #168]	; (8014524 <plug_holes+0x140>)
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	881a      	ldrh	r2, [r3, #0]
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	881b      	ldrh	r3, [r3, #0]
 801448c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014490:	d00a      	beq.n	80144a8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	881b      	ldrh	r3, [r3, #0]
 8014496:	4618      	mov	r0, r3
 8014498:	f7ff ff80 	bl	801439c <ptr_to_mem>
 801449c:	4604      	mov	r4, r0
 801449e:	6878      	ldr	r0, [r7, #4]
 80144a0:	f7ff ff8e 	bl	80143c0 <mem_to_ptr>
 80144a4:	4603      	mov	r3, r0
 80144a6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	885b      	ldrh	r3, [r3, #2]
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7ff ff75 	bl	801439c <ptr_to_mem>
 80144b2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80144b4:	68ba      	ldr	r2, [r7, #8]
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d01f      	beq.n	80144fc <plug_holes+0x118>
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	791b      	ldrb	r3, [r3, #4]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d11b      	bne.n	80144fc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80144c4:	4b17      	ldr	r3, [pc, #92]	; (8014524 <plug_holes+0x140>)
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	687a      	ldr	r2, [r7, #4]
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d102      	bne.n	80144d4 <plug_holes+0xf0>
      lfree = pmem;
 80144ce:	4a15      	ldr	r2, [pc, #84]	; (8014524 <plug_holes+0x140>)
 80144d0:	68bb      	ldr	r3, [r7, #8]
 80144d2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	881a      	ldrh	r2, [r3, #0]
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	881b      	ldrh	r3, [r3, #0]
 80144e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80144e4:	d00a      	beq.n	80144fc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	881b      	ldrh	r3, [r3, #0]
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7ff ff56 	bl	801439c <ptr_to_mem>
 80144f0:	4604      	mov	r4, r0
 80144f2:	68b8      	ldr	r0, [r7, #8]
 80144f4:	f7ff ff64 	bl	80143c0 <mem_to_ptr>
 80144f8:	4603      	mov	r3, r0
 80144fa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80144fc:	bf00      	nop
 80144fe:	3714      	adds	r7, #20
 8014500:	46bd      	mov	sp, r7
 8014502:	bd90      	pop	{r4, r7, pc}
 8014504:	2000c7b4 	.word	0x2000c7b4
 8014508:	08021498 	.word	0x08021498
 801450c:	080214c8 	.word	0x080214c8
 8014510:	080214e0 	.word	0x080214e0
 8014514:	2000c7b8 	.word	0x2000c7b8
 8014518:	08021508 	.word	0x08021508
 801451c:	08021524 	.word	0x08021524
 8014520:	08021540 	.word	0x08021540
 8014524:	2000c7c0 	.word	0x2000c7c0

08014528 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b082      	sub	sp, #8
 801452c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801452e:	4b1f      	ldr	r3, [pc, #124]	; (80145ac <mem_init+0x84>)
 8014530:	3303      	adds	r3, #3
 8014532:	f023 0303 	bic.w	r3, r3, #3
 8014536:	461a      	mov	r2, r3
 8014538:	4b1d      	ldr	r3, [pc, #116]	; (80145b0 <mem_init+0x88>)
 801453a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801453c:	4b1c      	ldr	r3, [pc, #112]	; (80145b0 <mem_init+0x88>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014548:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	2200      	movs	r2, #0
 801454e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2200      	movs	r2, #0
 8014554:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8014556:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801455a:	f7ff ff1f 	bl	801439c <ptr_to_mem>
 801455e:	4603      	mov	r3, r0
 8014560:	4a14      	ldr	r2, [pc, #80]	; (80145b4 <mem_init+0x8c>)
 8014562:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8014564:	4b13      	ldr	r3, [pc, #76]	; (80145b4 <mem_init+0x8c>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	2201      	movs	r2, #1
 801456a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801456c:	4b11      	ldr	r3, [pc, #68]	; (80145b4 <mem_init+0x8c>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014574:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8014576:	4b0f      	ldr	r3, [pc, #60]	; (80145b4 <mem_init+0x8c>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801457e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8014580:	4b0b      	ldr	r3, [pc, #44]	; (80145b0 <mem_init+0x88>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	4a0c      	ldr	r2, [pc, #48]	; (80145b8 <mem_init+0x90>)
 8014586:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8014588:	480c      	ldr	r0, [pc, #48]	; (80145bc <mem_init+0x94>)
 801458a:	f00a fbfd 	bl	801ed88 <sys_mutex_new>
 801458e:	4603      	mov	r3, r0
 8014590:	2b00      	cmp	r3, #0
 8014592:	d006      	beq.n	80145a2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8014594:	4b0a      	ldr	r3, [pc, #40]	; (80145c0 <mem_init+0x98>)
 8014596:	f240 221f 	movw	r2, #543	; 0x21f
 801459a:	490a      	ldr	r1, [pc, #40]	; (80145c4 <mem_init+0x9c>)
 801459c:	480a      	ldr	r0, [pc, #40]	; (80145c8 <mem_init+0xa0>)
 801459e:	f00a fcd5 	bl	801ef4c <iprintf>
  }
}
 80145a2:	bf00      	nop
 80145a4:	3708      	adds	r7, #8
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}
 80145aa:	bf00      	nop
 80145ac:	20011060 	.word	0x20011060
 80145b0:	2000c7b4 	.word	0x2000c7b4
 80145b4:	2000c7b8 	.word	0x2000c7b8
 80145b8:	2000c7c0 	.word	0x2000c7c0
 80145bc:	2000c7bc 	.word	0x2000c7bc
 80145c0:	08021498 	.word	0x08021498
 80145c4:	0802156c 	.word	0x0802156c
 80145c8:	080214e0 	.word	0x080214e0

080145cc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b086      	sub	sp, #24
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f7ff fef3 	bl	80143c0 <mem_to_ptr>
 80145da:	4603      	mov	r3, r0
 80145dc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	881b      	ldrh	r3, [r3, #0]
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7ff feda 	bl	801439c <ptr_to_mem>
 80145e8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	885b      	ldrh	r3, [r3, #2]
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7ff fed4 	bl	801439c <ptr_to_mem>
 80145f4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	881b      	ldrh	r3, [r3, #0]
 80145fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80145fe:	d818      	bhi.n	8014632 <mem_link_valid+0x66>
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	885b      	ldrh	r3, [r3, #2]
 8014604:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014608:	d813      	bhi.n	8014632 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801460e:	8afa      	ldrh	r2, [r7, #22]
 8014610:	429a      	cmp	r2, r3
 8014612:	d004      	beq.n	801461e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	881b      	ldrh	r3, [r3, #0]
 8014618:	8afa      	ldrh	r2, [r7, #22]
 801461a:	429a      	cmp	r2, r3
 801461c:	d109      	bne.n	8014632 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801461e:	4b08      	ldr	r3, [pc, #32]	; (8014640 <mem_link_valid+0x74>)
 8014620:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014622:	693a      	ldr	r2, [r7, #16]
 8014624:	429a      	cmp	r2, r3
 8014626:	d006      	beq.n	8014636 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014628:	693b      	ldr	r3, [r7, #16]
 801462a:	885b      	ldrh	r3, [r3, #2]
 801462c:	8afa      	ldrh	r2, [r7, #22]
 801462e:	429a      	cmp	r2, r3
 8014630:	d001      	beq.n	8014636 <mem_link_valid+0x6a>
    return 0;
 8014632:	2300      	movs	r3, #0
 8014634:	e000      	b.n	8014638 <mem_link_valid+0x6c>
  }
  return 1;
 8014636:	2301      	movs	r3, #1
}
 8014638:	4618      	mov	r0, r3
 801463a:	3718      	adds	r7, #24
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}
 8014640:	2000c7b8 	.word	0x2000c7b8

08014644 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b088      	sub	sp, #32
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d070      	beq.n	8014734 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	f003 0303 	and.w	r3, r3, #3
 8014658:	2b00      	cmp	r3, #0
 801465a:	d00d      	beq.n	8014678 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801465c:	4b37      	ldr	r3, [pc, #220]	; (801473c <mem_free+0xf8>)
 801465e:	f240 2273 	movw	r2, #627	; 0x273
 8014662:	4937      	ldr	r1, [pc, #220]	; (8014740 <mem_free+0xfc>)
 8014664:	4837      	ldr	r0, [pc, #220]	; (8014744 <mem_free+0x100>)
 8014666:	f00a fc71 	bl	801ef4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801466a:	f00a fbeb 	bl	801ee44 <sys_arch_protect>
 801466e:	60f8      	str	r0, [r7, #12]
 8014670:	68f8      	ldr	r0, [r7, #12]
 8014672:	f00a fbf5 	bl	801ee60 <sys_arch_unprotect>
    return;
 8014676:	e05e      	b.n	8014736 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	3b08      	subs	r3, #8
 801467c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801467e:	4b32      	ldr	r3, [pc, #200]	; (8014748 <mem_free+0x104>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	69fa      	ldr	r2, [r7, #28]
 8014684:	429a      	cmp	r2, r3
 8014686:	d306      	bcc.n	8014696 <mem_free+0x52>
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f103 020c 	add.w	r2, r3, #12
 801468e:	4b2f      	ldr	r3, [pc, #188]	; (801474c <mem_free+0x108>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	429a      	cmp	r2, r3
 8014694:	d90d      	bls.n	80146b2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8014696:	4b29      	ldr	r3, [pc, #164]	; (801473c <mem_free+0xf8>)
 8014698:	f240 227f 	movw	r2, #639	; 0x27f
 801469c:	492c      	ldr	r1, [pc, #176]	; (8014750 <mem_free+0x10c>)
 801469e:	4829      	ldr	r0, [pc, #164]	; (8014744 <mem_free+0x100>)
 80146a0:	f00a fc54 	bl	801ef4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80146a4:	f00a fbce 	bl	801ee44 <sys_arch_protect>
 80146a8:	6138      	str	r0, [r7, #16]
 80146aa:	6938      	ldr	r0, [r7, #16]
 80146ac:	f00a fbd8 	bl	801ee60 <sys_arch_unprotect>
    return;
 80146b0:	e041      	b.n	8014736 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80146b2:	4828      	ldr	r0, [pc, #160]	; (8014754 <mem_free+0x110>)
 80146b4:	f00a fb84 	bl	801edc0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80146b8:	69fb      	ldr	r3, [r7, #28]
 80146ba:	791b      	ldrb	r3, [r3, #4]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d110      	bne.n	80146e2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80146c0:	4b1e      	ldr	r3, [pc, #120]	; (801473c <mem_free+0xf8>)
 80146c2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80146c6:	4924      	ldr	r1, [pc, #144]	; (8014758 <mem_free+0x114>)
 80146c8:	481e      	ldr	r0, [pc, #120]	; (8014744 <mem_free+0x100>)
 80146ca:	f00a fc3f 	bl	801ef4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80146ce:	4821      	ldr	r0, [pc, #132]	; (8014754 <mem_free+0x110>)
 80146d0:	f00a fb85 	bl	801edde <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80146d4:	f00a fbb6 	bl	801ee44 <sys_arch_protect>
 80146d8:	6178      	str	r0, [r7, #20]
 80146da:	6978      	ldr	r0, [r7, #20]
 80146dc:	f00a fbc0 	bl	801ee60 <sys_arch_unprotect>
    return;
 80146e0:	e029      	b.n	8014736 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80146e2:	69f8      	ldr	r0, [r7, #28]
 80146e4:	f7ff ff72 	bl	80145cc <mem_link_valid>
 80146e8:	4603      	mov	r3, r0
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d110      	bne.n	8014710 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80146ee:	4b13      	ldr	r3, [pc, #76]	; (801473c <mem_free+0xf8>)
 80146f0:	f240 2295 	movw	r2, #661	; 0x295
 80146f4:	4919      	ldr	r1, [pc, #100]	; (801475c <mem_free+0x118>)
 80146f6:	4813      	ldr	r0, [pc, #76]	; (8014744 <mem_free+0x100>)
 80146f8:	f00a fc28 	bl	801ef4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80146fc:	4815      	ldr	r0, [pc, #84]	; (8014754 <mem_free+0x110>)
 80146fe:	f00a fb6e 	bl	801edde <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014702:	f00a fb9f 	bl	801ee44 <sys_arch_protect>
 8014706:	61b8      	str	r0, [r7, #24]
 8014708:	69b8      	ldr	r0, [r7, #24]
 801470a:	f00a fba9 	bl	801ee60 <sys_arch_unprotect>
    return;
 801470e:	e012      	b.n	8014736 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8014710:	69fb      	ldr	r3, [r7, #28]
 8014712:	2200      	movs	r2, #0
 8014714:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8014716:	4b12      	ldr	r3, [pc, #72]	; (8014760 <mem_free+0x11c>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	69fa      	ldr	r2, [r7, #28]
 801471c:	429a      	cmp	r2, r3
 801471e:	d202      	bcs.n	8014726 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8014720:	4a0f      	ldr	r2, [pc, #60]	; (8014760 <mem_free+0x11c>)
 8014722:	69fb      	ldr	r3, [r7, #28]
 8014724:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8014726:	69f8      	ldr	r0, [r7, #28]
 8014728:	f7ff fe5c 	bl	80143e4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801472c:	4809      	ldr	r0, [pc, #36]	; (8014754 <mem_free+0x110>)
 801472e:	f00a fb56 	bl	801edde <sys_mutex_unlock>
 8014732:	e000      	b.n	8014736 <mem_free+0xf2>
    return;
 8014734:	bf00      	nop
}
 8014736:	3720      	adds	r7, #32
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}
 801473c:	08021498 	.word	0x08021498
 8014740:	08021588 	.word	0x08021588
 8014744:	080214e0 	.word	0x080214e0
 8014748:	2000c7b4 	.word	0x2000c7b4
 801474c:	2000c7b8 	.word	0x2000c7b8
 8014750:	080215ac 	.word	0x080215ac
 8014754:	2000c7bc 	.word	0x2000c7bc
 8014758:	080215c8 	.word	0x080215c8
 801475c:	080215f0 	.word	0x080215f0
 8014760:	2000c7c0 	.word	0x2000c7c0

08014764 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b088      	sub	sp, #32
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
 801476c:	460b      	mov	r3, r1
 801476e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8014770:	887b      	ldrh	r3, [r7, #2]
 8014772:	3303      	adds	r3, #3
 8014774:	b29b      	uxth	r3, r3
 8014776:	f023 0303 	bic.w	r3, r3, #3
 801477a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801477c:	8bfb      	ldrh	r3, [r7, #30]
 801477e:	2b0b      	cmp	r3, #11
 8014780:	d801      	bhi.n	8014786 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8014782:	230c      	movs	r3, #12
 8014784:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8014786:	8bfb      	ldrh	r3, [r7, #30]
 8014788:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801478c:	d803      	bhi.n	8014796 <mem_trim+0x32>
 801478e:	8bfa      	ldrh	r2, [r7, #30]
 8014790:	887b      	ldrh	r3, [r7, #2]
 8014792:	429a      	cmp	r2, r3
 8014794:	d201      	bcs.n	801479a <mem_trim+0x36>
    return NULL;
 8014796:	2300      	movs	r3, #0
 8014798:	e0d8      	b.n	801494c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801479a:	4b6e      	ldr	r3, [pc, #440]	; (8014954 <mem_trim+0x1f0>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d304      	bcc.n	80147ae <mem_trim+0x4a>
 80147a4:	4b6c      	ldr	r3, [pc, #432]	; (8014958 <mem_trim+0x1f4>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	687a      	ldr	r2, [r7, #4]
 80147aa:	429a      	cmp	r2, r3
 80147ac:	d306      	bcc.n	80147bc <mem_trim+0x58>
 80147ae:	4b6b      	ldr	r3, [pc, #428]	; (801495c <mem_trim+0x1f8>)
 80147b0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80147b4:	496a      	ldr	r1, [pc, #424]	; (8014960 <mem_trim+0x1fc>)
 80147b6:	486b      	ldr	r0, [pc, #428]	; (8014964 <mem_trim+0x200>)
 80147b8:	f00a fbc8 	bl	801ef4c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80147bc:	4b65      	ldr	r3, [pc, #404]	; (8014954 <mem_trim+0x1f0>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	687a      	ldr	r2, [r7, #4]
 80147c2:	429a      	cmp	r2, r3
 80147c4:	d304      	bcc.n	80147d0 <mem_trim+0x6c>
 80147c6:	4b64      	ldr	r3, [pc, #400]	; (8014958 <mem_trim+0x1f4>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	687a      	ldr	r2, [r7, #4]
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d307      	bcc.n	80147e0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80147d0:	f00a fb38 	bl	801ee44 <sys_arch_protect>
 80147d4:	60b8      	str	r0, [r7, #8]
 80147d6:	68b8      	ldr	r0, [r7, #8]
 80147d8:	f00a fb42 	bl	801ee60 <sys_arch_unprotect>
    return rmem;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	e0b5      	b.n	801494c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	3b08      	subs	r3, #8
 80147e4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80147e6:	69b8      	ldr	r0, [r7, #24]
 80147e8:	f7ff fdea 	bl	80143c0 <mem_to_ptr>
 80147ec:	4603      	mov	r3, r0
 80147ee:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80147f0:	69bb      	ldr	r3, [r7, #24]
 80147f2:	881a      	ldrh	r2, [r3, #0]
 80147f4:	8afb      	ldrh	r3, [r7, #22]
 80147f6:	1ad3      	subs	r3, r2, r3
 80147f8:	b29b      	uxth	r3, r3
 80147fa:	3b08      	subs	r3, #8
 80147fc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80147fe:	8bfa      	ldrh	r2, [r7, #30]
 8014800:	8abb      	ldrh	r3, [r7, #20]
 8014802:	429a      	cmp	r2, r3
 8014804:	d906      	bls.n	8014814 <mem_trim+0xb0>
 8014806:	4b55      	ldr	r3, [pc, #340]	; (801495c <mem_trim+0x1f8>)
 8014808:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801480c:	4956      	ldr	r1, [pc, #344]	; (8014968 <mem_trim+0x204>)
 801480e:	4855      	ldr	r0, [pc, #340]	; (8014964 <mem_trim+0x200>)
 8014810:	f00a fb9c 	bl	801ef4c <iprintf>
  if (newsize > size) {
 8014814:	8bfa      	ldrh	r2, [r7, #30]
 8014816:	8abb      	ldrh	r3, [r7, #20]
 8014818:	429a      	cmp	r2, r3
 801481a:	d901      	bls.n	8014820 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801481c:	2300      	movs	r3, #0
 801481e:	e095      	b.n	801494c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8014820:	8bfa      	ldrh	r2, [r7, #30]
 8014822:	8abb      	ldrh	r3, [r7, #20]
 8014824:	429a      	cmp	r2, r3
 8014826:	d101      	bne.n	801482c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	e08f      	b.n	801494c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801482c:	484f      	ldr	r0, [pc, #316]	; (801496c <mem_trim+0x208>)
 801482e:	f00a fac7 	bl	801edc0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8014832:	69bb      	ldr	r3, [r7, #24]
 8014834:	881b      	ldrh	r3, [r3, #0]
 8014836:	4618      	mov	r0, r3
 8014838:	f7ff fdb0 	bl	801439c <ptr_to_mem>
 801483c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801483e:	693b      	ldr	r3, [r7, #16]
 8014840:	791b      	ldrb	r3, [r3, #4]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d13f      	bne.n	80148c6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014846:	69bb      	ldr	r3, [r7, #24]
 8014848:	881b      	ldrh	r3, [r3, #0]
 801484a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801484e:	d106      	bne.n	801485e <mem_trim+0xfa>
 8014850:	4b42      	ldr	r3, [pc, #264]	; (801495c <mem_trim+0x1f8>)
 8014852:	f240 22f5 	movw	r2, #757	; 0x2f5
 8014856:	4946      	ldr	r1, [pc, #280]	; (8014970 <mem_trim+0x20c>)
 8014858:	4842      	ldr	r0, [pc, #264]	; (8014964 <mem_trim+0x200>)
 801485a:	f00a fb77 	bl	801ef4c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	881b      	ldrh	r3, [r3, #0]
 8014862:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014864:	8afa      	ldrh	r2, [r7, #22]
 8014866:	8bfb      	ldrh	r3, [r7, #30]
 8014868:	4413      	add	r3, r2
 801486a:	b29b      	uxth	r3, r3
 801486c:	3308      	adds	r3, #8
 801486e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8014870:	4b40      	ldr	r3, [pc, #256]	; (8014974 <mem_trim+0x210>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	693a      	ldr	r2, [r7, #16]
 8014876:	429a      	cmp	r2, r3
 8014878:	d106      	bne.n	8014888 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801487a:	89fb      	ldrh	r3, [r7, #14]
 801487c:	4618      	mov	r0, r3
 801487e:	f7ff fd8d 	bl	801439c <ptr_to_mem>
 8014882:	4603      	mov	r3, r0
 8014884:	4a3b      	ldr	r2, [pc, #236]	; (8014974 <mem_trim+0x210>)
 8014886:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8014888:	89fb      	ldrh	r3, [r7, #14]
 801488a:	4618      	mov	r0, r3
 801488c:	f7ff fd86 	bl	801439c <ptr_to_mem>
 8014890:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	2200      	movs	r2, #0
 8014896:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	89ba      	ldrh	r2, [r7, #12]
 801489c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	8afa      	ldrh	r2, [r7, #22]
 80148a2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80148a4:	69bb      	ldr	r3, [r7, #24]
 80148a6:	89fa      	ldrh	r2, [r7, #14]
 80148a8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80148aa:	693b      	ldr	r3, [r7, #16]
 80148ac:	881b      	ldrh	r3, [r3, #0]
 80148ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80148b2:	d047      	beq.n	8014944 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80148b4:	693b      	ldr	r3, [r7, #16]
 80148b6:	881b      	ldrh	r3, [r3, #0]
 80148b8:	4618      	mov	r0, r3
 80148ba:	f7ff fd6f 	bl	801439c <ptr_to_mem>
 80148be:	4602      	mov	r2, r0
 80148c0:	89fb      	ldrh	r3, [r7, #14]
 80148c2:	8053      	strh	r3, [r2, #2]
 80148c4:	e03e      	b.n	8014944 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80148c6:	8bfb      	ldrh	r3, [r7, #30]
 80148c8:	f103 0214 	add.w	r2, r3, #20
 80148cc:	8abb      	ldrh	r3, [r7, #20]
 80148ce:	429a      	cmp	r2, r3
 80148d0:	d838      	bhi.n	8014944 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80148d2:	8afa      	ldrh	r2, [r7, #22]
 80148d4:	8bfb      	ldrh	r3, [r7, #30]
 80148d6:	4413      	add	r3, r2
 80148d8:	b29b      	uxth	r3, r3
 80148da:	3308      	adds	r3, #8
 80148dc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80148de:	69bb      	ldr	r3, [r7, #24]
 80148e0:	881b      	ldrh	r3, [r3, #0]
 80148e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80148e6:	d106      	bne.n	80148f6 <mem_trim+0x192>
 80148e8:	4b1c      	ldr	r3, [pc, #112]	; (801495c <mem_trim+0x1f8>)
 80148ea:	f240 3216 	movw	r2, #790	; 0x316
 80148ee:	4920      	ldr	r1, [pc, #128]	; (8014970 <mem_trim+0x20c>)
 80148f0:	481c      	ldr	r0, [pc, #112]	; (8014964 <mem_trim+0x200>)
 80148f2:	f00a fb2b 	bl	801ef4c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80148f6:	89fb      	ldrh	r3, [r7, #14]
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7ff fd4f 	bl	801439c <ptr_to_mem>
 80148fe:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8014900:	4b1c      	ldr	r3, [pc, #112]	; (8014974 <mem_trim+0x210>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	693a      	ldr	r2, [r7, #16]
 8014906:	429a      	cmp	r2, r3
 8014908:	d202      	bcs.n	8014910 <mem_trim+0x1ac>
      lfree = mem2;
 801490a:	4a1a      	ldr	r2, [pc, #104]	; (8014974 <mem_trim+0x210>)
 801490c:	693b      	ldr	r3, [r7, #16]
 801490e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	2200      	movs	r2, #0
 8014914:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8014916:	69bb      	ldr	r3, [r7, #24]
 8014918:	881a      	ldrh	r2, [r3, #0]
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801491e:	693b      	ldr	r3, [r7, #16]
 8014920:	8afa      	ldrh	r2, [r7, #22]
 8014922:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8014924:	69bb      	ldr	r3, [r7, #24]
 8014926:	89fa      	ldrh	r2, [r7, #14]
 8014928:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	881b      	ldrh	r3, [r3, #0]
 801492e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014932:	d007      	beq.n	8014944 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014934:	693b      	ldr	r3, [r7, #16]
 8014936:	881b      	ldrh	r3, [r3, #0]
 8014938:	4618      	mov	r0, r3
 801493a:	f7ff fd2f 	bl	801439c <ptr_to_mem>
 801493e:	4602      	mov	r2, r0
 8014940:	89fb      	ldrh	r3, [r7, #14]
 8014942:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014944:	4809      	ldr	r0, [pc, #36]	; (801496c <mem_trim+0x208>)
 8014946:	f00a fa4a 	bl	801edde <sys_mutex_unlock>
  return rmem;
 801494a:	687b      	ldr	r3, [r7, #4]
}
 801494c:	4618      	mov	r0, r3
 801494e:	3720      	adds	r7, #32
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}
 8014954:	2000c7b4 	.word	0x2000c7b4
 8014958:	2000c7b8 	.word	0x2000c7b8
 801495c:	08021498 	.word	0x08021498
 8014960:	08021624 	.word	0x08021624
 8014964:	080214e0 	.word	0x080214e0
 8014968:	0802163c 	.word	0x0802163c
 801496c:	2000c7bc 	.word	0x2000c7bc
 8014970:	0802165c 	.word	0x0802165c
 8014974:	2000c7c0 	.word	0x2000c7c0

08014978 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b088      	sub	sp, #32
 801497c:	af00      	add	r7, sp, #0
 801497e:	4603      	mov	r3, r0
 8014980:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8014982:	88fb      	ldrh	r3, [r7, #6]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d101      	bne.n	801498c <mem_malloc+0x14>
    return NULL;
 8014988:	2300      	movs	r3, #0
 801498a:	e0e2      	b.n	8014b52 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801498c:	88fb      	ldrh	r3, [r7, #6]
 801498e:	3303      	adds	r3, #3
 8014990:	b29b      	uxth	r3, r3
 8014992:	f023 0303 	bic.w	r3, r3, #3
 8014996:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8014998:	8bbb      	ldrh	r3, [r7, #28]
 801499a:	2b0b      	cmp	r3, #11
 801499c:	d801      	bhi.n	80149a2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801499e:	230c      	movs	r3, #12
 80149a0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80149a2:	8bbb      	ldrh	r3, [r7, #28]
 80149a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80149a8:	d803      	bhi.n	80149b2 <mem_malloc+0x3a>
 80149aa:	8bba      	ldrh	r2, [r7, #28]
 80149ac:	88fb      	ldrh	r3, [r7, #6]
 80149ae:	429a      	cmp	r2, r3
 80149b0:	d201      	bcs.n	80149b6 <mem_malloc+0x3e>
    return NULL;
 80149b2:	2300      	movs	r3, #0
 80149b4:	e0cd      	b.n	8014b52 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80149b6:	4869      	ldr	r0, [pc, #420]	; (8014b5c <mem_malloc+0x1e4>)
 80149b8:	f00a fa02 	bl	801edc0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80149bc:	4b68      	ldr	r3, [pc, #416]	; (8014b60 <mem_malloc+0x1e8>)
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	4618      	mov	r0, r3
 80149c2:	f7ff fcfd 	bl	80143c0 <mem_to_ptr>
 80149c6:	4603      	mov	r3, r0
 80149c8:	83fb      	strh	r3, [r7, #30]
 80149ca:	e0b7      	b.n	8014b3c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80149cc:	8bfb      	ldrh	r3, [r7, #30]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7ff fce4 	bl	801439c <ptr_to_mem>
 80149d4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80149d6:	697b      	ldr	r3, [r7, #20]
 80149d8:	791b      	ldrb	r3, [r3, #4]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	f040 80a7 	bne.w	8014b2e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	881b      	ldrh	r3, [r3, #0]
 80149e4:	461a      	mov	r2, r3
 80149e6:	8bfb      	ldrh	r3, [r7, #30]
 80149e8:	1ad3      	subs	r3, r2, r3
 80149ea:	f1a3 0208 	sub.w	r2, r3, #8
 80149ee:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80149f0:	429a      	cmp	r2, r3
 80149f2:	f0c0 809c 	bcc.w	8014b2e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	881b      	ldrh	r3, [r3, #0]
 80149fa:	461a      	mov	r2, r3
 80149fc:	8bfb      	ldrh	r3, [r7, #30]
 80149fe:	1ad3      	subs	r3, r2, r3
 8014a00:	f1a3 0208 	sub.w	r2, r3, #8
 8014a04:	8bbb      	ldrh	r3, [r7, #28]
 8014a06:	3314      	adds	r3, #20
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d333      	bcc.n	8014a74 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014a0c:	8bfa      	ldrh	r2, [r7, #30]
 8014a0e:	8bbb      	ldrh	r3, [r7, #28]
 8014a10:	4413      	add	r3, r2
 8014a12:	b29b      	uxth	r3, r3
 8014a14:	3308      	adds	r3, #8
 8014a16:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014a18:	8a7b      	ldrh	r3, [r7, #18]
 8014a1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014a1e:	d106      	bne.n	8014a2e <mem_malloc+0xb6>
 8014a20:	4b50      	ldr	r3, [pc, #320]	; (8014b64 <mem_malloc+0x1ec>)
 8014a22:	f240 3287 	movw	r2, #903	; 0x387
 8014a26:	4950      	ldr	r1, [pc, #320]	; (8014b68 <mem_malloc+0x1f0>)
 8014a28:	4850      	ldr	r0, [pc, #320]	; (8014b6c <mem_malloc+0x1f4>)
 8014a2a:	f00a fa8f 	bl	801ef4c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8014a2e:	8a7b      	ldrh	r3, [r7, #18]
 8014a30:	4618      	mov	r0, r3
 8014a32:	f7ff fcb3 	bl	801439c <ptr_to_mem>
 8014a36:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014a3e:	697b      	ldr	r3, [r7, #20]
 8014a40:	881a      	ldrh	r2, [r3, #0]
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	8bfa      	ldrh	r2, [r7, #30]
 8014a4a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	8a7a      	ldrh	r2, [r7, #18]
 8014a50:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014a52:	697b      	ldr	r3, [r7, #20]
 8014a54:	2201      	movs	r2, #1
 8014a56:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	881b      	ldrh	r3, [r3, #0]
 8014a5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014a60:	d00b      	beq.n	8014a7a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	881b      	ldrh	r3, [r3, #0]
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7ff fc98 	bl	801439c <ptr_to_mem>
 8014a6c:	4602      	mov	r2, r0
 8014a6e:	8a7b      	ldrh	r3, [r7, #18]
 8014a70:	8053      	strh	r3, [r2, #2]
 8014a72:	e002      	b.n	8014a7a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014a74:	697b      	ldr	r3, [r7, #20]
 8014a76:	2201      	movs	r2, #1
 8014a78:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014a7a:	4b39      	ldr	r3, [pc, #228]	; (8014b60 <mem_malloc+0x1e8>)
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	697a      	ldr	r2, [r7, #20]
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d127      	bne.n	8014ad4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8014a84:	4b36      	ldr	r3, [pc, #216]	; (8014b60 <mem_malloc+0x1e8>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014a8a:	e005      	b.n	8014a98 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014a8c:	69bb      	ldr	r3, [r7, #24]
 8014a8e:	881b      	ldrh	r3, [r3, #0]
 8014a90:	4618      	mov	r0, r3
 8014a92:	f7ff fc83 	bl	801439c <ptr_to_mem>
 8014a96:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014a98:	69bb      	ldr	r3, [r7, #24]
 8014a9a:	791b      	ldrb	r3, [r3, #4]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d004      	beq.n	8014aaa <mem_malloc+0x132>
 8014aa0:	4b33      	ldr	r3, [pc, #204]	; (8014b70 <mem_malloc+0x1f8>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	69ba      	ldr	r2, [r7, #24]
 8014aa6:	429a      	cmp	r2, r3
 8014aa8:	d1f0      	bne.n	8014a8c <mem_malloc+0x114>
          }
          lfree = cur;
 8014aaa:	4a2d      	ldr	r2, [pc, #180]	; (8014b60 <mem_malloc+0x1e8>)
 8014aac:	69bb      	ldr	r3, [r7, #24]
 8014aae:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8014ab0:	4b2b      	ldr	r3, [pc, #172]	; (8014b60 <mem_malloc+0x1e8>)
 8014ab2:	681a      	ldr	r2, [r3, #0]
 8014ab4:	4b2e      	ldr	r3, [pc, #184]	; (8014b70 <mem_malloc+0x1f8>)
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	429a      	cmp	r2, r3
 8014aba:	d00b      	beq.n	8014ad4 <mem_malloc+0x15c>
 8014abc:	4b28      	ldr	r3, [pc, #160]	; (8014b60 <mem_malloc+0x1e8>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	791b      	ldrb	r3, [r3, #4]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d006      	beq.n	8014ad4 <mem_malloc+0x15c>
 8014ac6:	4b27      	ldr	r3, [pc, #156]	; (8014b64 <mem_malloc+0x1ec>)
 8014ac8:	f240 32b5 	movw	r2, #949	; 0x3b5
 8014acc:	4929      	ldr	r1, [pc, #164]	; (8014b74 <mem_malloc+0x1fc>)
 8014ace:	4827      	ldr	r0, [pc, #156]	; (8014b6c <mem_malloc+0x1f4>)
 8014ad0:	f00a fa3c 	bl	801ef4c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8014ad4:	4821      	ldr	r0, [pc, #132]	; (8014b5c <mem_malloc+0x1e4>)
 8014ad6:	f00a f982 	bl	801edde <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8014ada:	8bba      	ldrh	r2, [r7, #28]
 8014adc:	697b      	ldr	r3, [r7, #20]
 8014ade:	4413      	add	r3, r2
 8014ae0:	3308      	adds	r3, #8
 8014ae2:	4a23      	ldr	r2, [pc, #140]	; (8014b70 <mem_malloc+0x1f8>)
 8014ae4:	6812      	ldr	r2, [r2, #0]
 8014ae6:	4293      	cmp	r3, r2
 8014ae8:	d906      	bls.n	8014af8 <mem_malloc+0x180>
 8014aea:	4b1e      	ldr	r3, [pc, #120]	; (8014b64 <mem_malloc+0x1ec>)
 8014aec:	f240 32b9 	movw	r2, #953	; 0x3b9
 8014af0:	4921      	ldr	r1, [pc, #132]	; (8014b78 <mem_malloc+0x200>)
 8014af2:	481e      	ldr	r0, [pc, #120]	; (8014b6c <mem_malloc+0x1f4>)
 8014af4:	f00a fa2a 	bl	801ef4c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014af8:	697b      	ldr	r3, [r7, #20]
 8014afa:	f003 0303 	and.w	r3, r3, #3
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d006      	beq.n	8014b10 <mem_malloc+0x198>
 8014b02:	4b18      	ldr	r3, [pc, #96]	; (8014b64 <mem_malloc+0x1ec>)
 8014b04:	f240 32bb 	movw	r2, #955	; 0x3bb
 8014b08:	491c      	ldr	r1, [pc, #112]	; (8014b7c <mem_malloc+0x204>)
 8014b0a:	4818      	ldr	r0, [pc, #96]	; (8014b6c <mem_malloc+0x1f4>)
 8014b0c:	f00a fa1e 	bl	801ef4c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014b10:	697b      	ldr	r3, [r7, #20]
 8014b12:	f003 0303 	and.w	r3, r3, #3
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d006      	beq.n	8014b28 <mem_malloc+0x1b0>
 8014b1a:	4b12      	ldr	r3, [pc, #72]	; (8014b64 <mem_malloc+0x1ec>)
 8014b1c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8014b20:	4917      	ldr	r1, [pc, #92]	; (8014b80 <mem_malloc+0x208>)
 8014b22:	4812      	ldr	r0, [pc, #72]	; (8014b6c <mem_malloc+0x1f4>)
 8014b24:	f00a fa12 	bl	801ef4c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014b28:	697b      	ldr	r3, [r7, #20]
 8014b2a:	3308      	adds	r3, #8
 8014b2c:	e011      	b.n	8014b52 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8014b2e:	8bfb      	ldrh	r3, [r7, #30]
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7ff fc33 	bl	801439c <ptr_to_mem>
 8014b36:	4603      	mov	r3, r0
 8014b38:	881b      	ldrh	r3, [r3, #0]
 8014b3a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014b3c:	8bfa      	ldrh	r2, [r7, #30]
 8014b3e:	8bbb      	ldrh	r3, [r7, #28]
 8014b40:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8014b44:	429a      	cmp	r2, r3
 8014b46:	f4ff af41 	bcc.w	80149cc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8014b4a:	4804      	ldr	r0, [pc, #16]	; (8014b5c <mem_malloc+0x1e4>)
 8014b4c:	f00a f947 	bl	801edde <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8014b50:	2300      	movs	r3, #0
}
 8014b52:	4618      	mov	r0, r3
 8014b54:	3720      	adds	r7, #32
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}
 8014b5a:	bf00      	nop
 8014b5c:	2000c7bc 	.word	0x2000c7bc
 8014b60:	2000c7c0 	.word	0x2000c7c0
 8014b64:	08021498 	.word	0x08021498
 8014b68:	0802165c 	.word	0x0802165c
 8014b6c:	080214e0 	.word	0x080214e0
 8014b70:	2000c7b8 	.word	0x2000c7b8
 8014b74:	08021670 	.word	0x08021670
 8014b78:	0802168c 	.word	0x0802168c
 8014b7c:	080216bc 	.word	0x080216bc
 8014b80:	080216ec 	.word	0x080216ec

08014b84 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8014b84:	b480      	push	{r7}
 8014b86:	b085      	sub	sp, #20
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	689b      	ldr	r3, [r3, #8]
 8014b90:	2200      	movs	r2, #0
 8014b92:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	685b      	ldr	r3, [r3, #4]
 8014b98:	3303      	adds	r3, #3
 8014b9a:	f023 0303 	bic.w	r3, r3, #3
 8014b9e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	60fb      	str	r3, [r7, #12]
 8014ba4:	e011      	b.n	8014bca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	689b      	ldr	r3, [r3, #8]
 8014baa:	681a      	ldr	r2, [r3, #0]
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	689b      	ldr	r3, [r3, #8]
 8014bb4:	68ba      	ldr	r2, [r7, #8]
 8014bb6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	881b      	ldrh	r3, [r3, #0]
 8014bbc:	461a      	mov	r2, r3
 8014bbe:	68bb      	ldr	r3, [r7, #8]
 8014bc0:	4413      	add	r3, r2
 8014bc2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	60fb      	str	r3, [r7, #12]
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	885b      	ldrh	r3, [r3, #2]
 8014bce:	461a      	mov	r2, r3
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	4293      	cmp	r3, r2
 8014bd4:	dbe7      	blt.n	8014ba6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8014bd6:	bf00      	nop
 8014bd8:	bf00      	nop
 8014bda:	3714      	adds	r7, #20
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be2:	4770      	bx	lr

08014be4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b082      	sub	sp, #8
 8014be8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014bea:	2300      	movs	r3, #0
 8014bec:	80fb      	strh	r3, [r7, #6]
 8014bee:	e009      	b.n	8014c04 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8014bf0:	88fb      	ldrh	r3, [r7, #6]
 8014bf2:	4a08      	ldr	r2, [pc, #32]	; (8014c14 <memp_init+0x30>)
 8014bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f7ff ffc3 	bl	8014b84 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014bfe:	88fb      	ldrh	r3, [r7, #6]
 8014c00:	3301      	adds	r3, #1
 8014c02:	80fb      	strh	r3, [r7, #6]
 8014c04:	88fb      	ldrh	r3, [r7, #6]
 8014c06:	2b0c      	cmp	r3, #12
 8014c08:	d9f2      	bls.n	8014bf0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8014c0a:	bf00      	nop
 8014c0c:	bf00      	nop
 8014c0e:	3708      	adds	r7, #8
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}
 8014c14:	0807ac0c 	.word	0x0807ac0c

08014c18 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b084      	sub	sp, #16
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8014c20:	f00a f910 	bl	801ee44 <sys_arch_protect>
 8014c24:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	689b      	ldr	r3, [r3, #8]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8014c2e:	68bb      	ldr	r3, [r7, #8]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d015      	beq.n	8014c60 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	689b      	ldr	r3, [r3, #8]
 8014c38:	68ba      	ldr	r2, [r7, #8]
 8014c3a:	6812      	ldr	r2, [r2, #0]
 8014c3c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8014c3e:	68bb      	ldr	r3, [r7, #8]
 8014c40:	f003 0303 	and.w	r3, r3, #3
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d006      	beq.n	8014c56 <do_memp_malloc_pool+0x3e>
 8014c48:	4b09      	ldr	r3, [pc, #36]	; (8014c70 <do_memp_malloc_pool+0x58>)
 8014c4a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8014c4e:	4909      	ldr	r1, [pc, #36]	; (8014c74 <do_memp_malloc_pool+0x5c>)
 8014c50:	4809      	ldr	r0, [pc, #36]	; (8014c78 <do_memp_malloc_pool+0x60>)
 8014c52:	f00a f97b 	bl	801ef4c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8014c56:	68f8      	ldr	r0, [r7, #12]
 8014c58:	f00a f902 	bl	801ee60 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	e003      	b.n	8014c68 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8014c60:	68f8      	ldr	r0, [r7, #12]
 8014c62:	f00a f8fd 	bl	801ee60 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8014c66:	2300      	movs	r3, #0
}
 8014c68:	4618      	mov	r0, r3
 8014c6a:	3710      	adds	r7, #16
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}
 8014c70:	08021710 	.word	0x08021710
 8014c74:	08021740 	.word	0x08021740
 8014c78:	08021764 	.word	0x08021764

08014c7c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b084      	sub	sp, #16
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	4603      	mov	r3, r0
 8014c84:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8014c86:	79fb      	ldrb	r3, [r7, #7]
 8014c88:	2b0c      	cmp	r3, #12
 8014c8a:	d908      	bls.n	8014c9e <memp_malloc+0x22>
 8014c8c:	4b0a      	ldr	r3, [pc, #40]	; (8014cb8 <memp_malloc+0x3c>)
 8014c8e:	f240 1257 	movw	r2, #343	; 0x157
 8014c92:	490a      	ldr	r1, [pc, #40]	; (8014cbc <memp_malloc+0x40>)
 8014c94:	480a      	ldr	r0, [pc, #40]	; (8014cc0 <memp_malloc+0x44>)
 8014c96:	f00a f959 	bl	801ef4c <iprintf>
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	e008      	b.n	8014cb0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8014c9e:	79fb      	ldrb	r3, [r7, #7]
 8014ca0:	4a08      	ldr	r2, [pc, #32]	; (8014cc4 <memp_malloc+0x48>)
 8014ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f7ff ffb6 	bl	8014c18 <do_memp_malloc_pool>
 8014cac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8014cae:	68fb      	ldr	r3, [r7, #12]
}
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	3710      	adds	r7, #16
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}
 8014cb8:	08021710 	.word	0x08021710
 8014cbc:	080217a0 	.word	0x080217a0
 8014cc0:	08021764 	.word	0x08021764
 8014cc4:	0807ac0c 	.word	0x0807ac0c

08014cc8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b084      	sub	sp, #16
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
 8014cd0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	f003 0303 	and.w	r3, r3, #3
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d006      	beq.n	8014cea <do_memp_free_pool+0x22>
 8014cdc:	4b0d      	ldr	r3, [pc, #52]	; (8014d14 <do_memp_free_pool+0x4c>)
 8014cde:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8014ce2:	490d      	ldr	r1, [pc, #52]	; (8014d18 <do_memp_free_pool+0x50>)
 8014ce4:	480d      	ldr	r0, [pc, #52]	; (8014d1c <do_memp_free_pool+0x54>)
 8014ce6:	f00a f931 	bl	801ef4c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8014cea:	683b      	ldr	r3, [r7, #0]
 8014cec:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8014cee:	f00a f8a9 	bl	801ee44 <sys_arch_protect>
 8014cf2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	689b      	ldr	r3, [r3, #8]
 8014cf8:	681a      	ldr	r2, [r3, #0]
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	689b      	ldr	r3, [r3, #8]
 8014d02:	68fa      	ldr	r2, [r7, #12]
 8014d04:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8014d06:	68b8      	ldr	r0, [r7, #8]
 8014d08:	f00a f8aa 	bl	801ee60 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8014d0c:	bf00      	nop
 8014d0e:	3710      	adds	r7, #16
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}
 8014d14:	08021710 	.word	0x08021710
 8014d18:	080217c0 	.word	0x080217c0
 8014d1c:	08021764 	.word	0x08021764

08014d20 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b082      	sub	sp, #8
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	4603      	mov	r3, r0
 8014d28:	6039      	str	r1, [r7, #0]
 8014d2a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8014d2c:	79fb      	ldrb	r3, [r7, #7]
 8014d2e:	2b0c      	cmp	r3, #12
 8014d30:	d907      	bls.n	8014d42 <memp_free+0x22>
 8014d32:	4b0c      	ldr	r3, [pc, #48]	; (8014d64 <memp_free+0x44>)
 8014d34:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8014d38:	490b      	ldr	r1, [pc, #44]	; (8014d68 <memp_free+0x48>)
 8014d3a:	480c      	ldr	r0, [pc, #48]	; (8014d6c <memp_free+0x4c>)
 8014d3c:	f00a f906 	bl	801ef4c <iprintf>
 8014d40:	e00c      	b.n	8014d5c <memp_free+0x3c>

  if (mem == NULL) {
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d008      	beq.n	8014d5a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014d48:	79fb      	ldrb	r3, [r7, #7]
 8014d4a:	4a09      	ldr	r2, [pc, #36]	; (8014d70 <memp_free+0x50>)
 8014d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d50:	6839      	ldr	r1, [r7, #0]
 8014d52:	4618      	mov	r0, r3
 8014d54:	f7ff ffb8 	bl	8014cc8 <do_memp_free_pool>
 8014d58:	e000      	b.n	8014d5c <memp_free+0x3c>
    return;
 8014d5a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8014d5c:	3708      	adds	r7, #8
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	bf00      	nop
 8014d64:	08021710 	.word	0x08021710
 8014d68:	080217e0 	.word	0x080217e0
 8014d6c:	08021764 	.word	0x08021764
 8014d70:	0807ac0c 	.word	0x0807ac0c

08014d74 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8014d74:	b480      	push	{r7}
 8014d76:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014d78:	bf00      	nop
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d80:	4770      	bx	lr
	...

08014d84 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b086      	sub	sp, #24
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	60f8      	str	r0, [r7, #12]
 8014d8c:	60b9      	str	r1, [r7, #8]
 8014d8e:	607a      	str	r2, [r7, #4]
 8014d90:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d108      	bne.n	8014daa <netif_add+0x26>
 8014d98:	4b57      	ldr	r3, [pc, #348]	; (8014ef8 <netif_add+0x174>)
 8014d9a:	f240 1227 	movw	r2, #295	; 0x127
 8014d9e:	4957      	ldr	r1, [pc, #348]	; (8014efc <netif_add+0x178>)
 8014da0:	4857      	ldr	r0, [pc, #348]	; (8014f00 <netif_add+0x17c>)
 8014da2:	f00a f8d3 	bl	801ef4c <iprintf>
 8014da6:	2300      	movs	r3, #0
 8014da8:	e0a2      	b.n	8014ef0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8014daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d108      	bne.n	8014dc2 <netif_add+0x3e>
 8014db0:	4b51      	ldr	r3, [pc, #324]	; (8014ef8 <netif_add+0x174>)
 8014db2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8014db6:	4953      	ldr	r1, [pc, #332]	; (8014f04 <netif_add+0x180>)
 8014db8:	4851      	ldr	r0, [pc, #324]	; (8014f00 <netif_add+0x17c>)
 8014dba:	f00a f8c7 	bl	801ef4c <iprintf>
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	e096      	b.n	8014ef0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8014dc2:	68bb      	ldr	r3, [r7, #8]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d101      	bne.n	8014dcc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8014dc8:	4b4f      	ldr	r3, [pc, #316]	; (8014f08 <netif_add+0x184>)
 8014dca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d101      	bne.n	8014dd6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8014dd2:	4b4d      	ldr	r3, [pc, #308]	; (8014f08 <netif_add+0x184>)
 8014dd4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8014dd6:	683b      	ldr	r3, [r7, #0]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d101      	bne.n	8014de0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8014ddc:	4b4a      	ldr	r3, [pc, #296]	; (8014f08 <netif_add+0x184>)
 8014dde:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	2200      	movs	r2, #0
 8014de4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	2200      	movs	r2, #0
 8014dea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	2200      	movs	r2, #0
 8014df0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	4a45      	ldr	r2, [pc, #276]	; (8014f0c <netif_add+0x188>)
 8014df6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	2200      	movs	r2, #0
 8014e02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	6a3a      	ldr	r2, [r7, #32]
 8014e10:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8014e12:	4b3f      	ldr	r3, [pc, #252]	; (8014f10 <netif_add+0x18c>)
 8014e14:	781a      	ldrb	r2, [r3, #0]
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e20:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	687a      	ldr	r2, [r7, #4]
 8014e26:	68b9      	ldr	r1, [r7, #8]
 8014e28:	68f8      	ldr	r0, [r7, #12]
 8014e2a:	f000 f913 	bl	8015054 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8014e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e30:	68f8      	ldr	r0, [r7, #12]
 8014e32:	4798      	blx	r3
 8014e34:	4603      	mov	r3, r0
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d001      	beq.n	8014e3e <netif_add+0xba>
    return NULL;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	e058      	b.n	8014ef0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014e44:	2bff      	cmp	r3, #255	; 0xff
 8014e46:	d103      	bne.n	8014e50 <netif_add+0xcc>
        netif->num = 0;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8014e50:	2300      	movs	r3, #0
 8014e52:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014e54:	4b2f      	ldr	r3, [pc, #188]	; (8014f14 <netif_add+0x190>)
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	617b      	str	r3, [r7, #20]
 8014e5a:	e02b      	b.n	8014eb4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8014e5c:	697a      	ldr	r2, [r7, #20]
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	429a      	cmp	r2, r3
 8014e62:	d106      	bne.n	8014e72 <netif_add+0xee>
 8014e64:	4b24      	ldr	r3, [pc, #144]	; (8014ef8 <netif_add+0x174>)
 8014e66:	f240 128b 	movw	r2, #395	; 0x18b
 8014e6a:	492b      	ldr	r1, [pc, #172]	; (8014f18 <netif_add+0x194>)
 8014e6c:	4824      	ldr	r0, [pc, #144]	; (8014f00 <netif_add+0x17c>)
 8014e6e:	f00a f86d 	bl	801ef4c <iprintf>
        num_netifs++;
 8014e72:	693b      	ldr	r3, [r7, #16]
 8014e74:	3301      	adds	r3, #1
 8014e76:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8014e78:	693b      	ldr	r3, [r7, #16]
 8014e7a:	2bff      	cmp	r3, #255	; 0xff
 8014e7c:	dd06      	ble.n	8014e8c <netif_add+0x108>
 8014e7e:	4b1e      	ldr	r3, [pc, #120]	; (8014ef8 <netif_add+0x174>)
 8014e80:	f240 128d 	movw	r2, #397	; 0x18d
 8014e84:	4925      	ldr	r1, [pc, #148]	; (8014f1c <netif_add+0x198>)
 8014e86:	481e      	ldr	r0, [pc, #120]	; (8014f00 <netif_add+0x17c>)
 8014e88:	f00a f860 	bl	801ef4c <iprintf>
        if (netif2->num == netif->num) {
 8014e8c:	697b      	ldr	r3, [r7, #20]
 8014e8e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014e98:	429a      	cmp	r2, r3
 8014e9a:	d108      	bne.n	8014eae <netif_add+0x12a>
          netif->num++;
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	b2da      	uxtb	r2, r3
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8014eac:	e005      	b.n	8014eba <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014eae:	697b      	ldr	r3, [r7, #20]
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	617b      	str	r3, [r7, #20]
 8014eb4:	697b      	ldr	r3, [r7, #20]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d1d0      	bne.n	8014e5c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8014eba:	697b      	ldr	r3, [r7, #20]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d1be      	bne.n	8014e3e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014ec6:	2bfe      	cmp	r3, #254	; 0xfe
 8014ec8:	d103      	bne.n	8014ed2 <netif_add+0x14e>
    netif_num = 0;
 8014eca:	4b11      	ldr	r3, [pc, #68]	; (8014f10 <netif_add+0x18c>)
 8014ecc:	2200      	movs	r2, #0
 8014ece:	701a      	strb	r2, [r3, #0]
 8014ed0:	e006      	b.n	8014ee0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014ed8:	3301      	adds	r3, #1
 8014eda:	b2da      	uxtb	r2, r3
 8014edc:	4b0c      	ldr	r3, [pc, #48]	; (8014f10 <netif_add+0x18c>)
 8014ede:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8014ee0:	4b0c      	ldr	r3, [pc, #48]	; (8014f14 <netif_add+0x190>)
 8014ee2:	681a      	ldr	r2, [r3, #0]
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8014ee8:	4a0a      	ldr	r2, [pc, #40]	; (8014f14 <netif_add+0x190>)
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8014eee:	68fb      	ldr	r3, [r7, #12]
}
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	3718      	adds	r7, #24
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd80      	pop	{r7, pc}
 8014ef8:	080217fc 	.word	0x080217fc
 8014efc:	08021890 	.word	0x08021890
 8014f00:	0802184c 	.word	0x0802184c
 8014f04:	080218ac 	.word	0x080218ac
 8014f08:	0807ac80 	.word	0x0807ac80
 8014f0c:	0801532f 	.word	0x0801532f
 8014f10:	2000c7f8 	.word	0x2000c7f8
 8014f14:	2001474c 	.word	0x2001474c
 8014f18:	080218d0 	.word	0x080218d0
 8014f1c:	080218e4 	.word	0x080218e4

08014f20 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b082      	sub	sp, #8
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
 8014f28:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8014f2a:	6839      	ldr	r1, [r7, #0]
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	f002 fe35 	bl	8017b9c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8014f32:	6839      	ldr	r1, [r7, #0]
 8014f34:	6878      	ldr	r0, [r7, #4]
 8014f36:	f007 fb9d 	bl	801c674 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8014f3a:	bf00      	nop
 8014f3c:	3708      	adds	r7, #8
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
	...

08014f44 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b086      	sub	sp, #24
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	60f8      	str	r0, [r7, #12]
 8014f4c:	60b9      	str	r1, [r7, #8]
 8014f4e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8014f50:	68bb      	ldr	r3, [r7, #8]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d106      	bne.n	8014f64 <netif_do_set_ipaddr+0x20>
 8014f56:	4b1d      	ldr	r3, [pc, #116]	; (8014fcc <netif_do_set_ipaddr+0x88>)
 8014f58:	f240 12cb 	movw	r2, #459	; 0x1cb
 8014f5c:	491c      	ldr	r1, [pc, #112]	; (8014fd0 <netif_do_set_ipaddr+0x8c>)
 8014f5e:	481d      	ldr	r0, [pc, #116]	; (8014fd4 <netif_do_set_ipaddr+0x90>)
 8014f60:	f009 fff4 	bl	801ef4c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d106      	bne.n	8014f78 <netif_do_set_ipaddr+0x34>
 8014f6a:	4b18      	ldr	r3, [pc, #96]	; (8014fcc <netif_do_set_ipaddr+0x88>)
 8014f6c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8014f70:	4917      	ldr	r1, [pc, #92]	; (8014fd0 <netif_do_set_ipaddr+0x8c>)
 8014f72:	4818      	ldr	r0, [pc, #96]	; (8014fd4 <netif_do_set_ipaddr+0x90>)
 8014f74:	f009 ffea 	bl	801ef4c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014f78:	68bb      	ldr	r3, [r7, #8]
 8014f7a:	681a      	ldr	r2, [r3, #0]
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	3304      	adds	r3, #4
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	429a      	cmp	r2, r3
 8014f84:	d01c      	beq.n	8014fc0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	3304      	adds	r3, #4
 8014f90:	681a      	ldr	r2, [r3, #0]
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8014f96:	f107 0314 	add.w	r3, r7, #20
 8014f9a:	4619      	mov	r1, r3
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f7ff ffbf 	bl	8014f20 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8014fa2:	68bb      	ldr	r3, [r7, #8]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d002      	beq.n	8014fae <netif_do_set_ipaddr+0x6a>
 8014fa8:	68bb      	ldr	r3, [r7, #8]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	e000      	b.n	8014fb0 <netif_do_set_ipaddr+0x6c>
 8014fae:	2300      	movs	r3, #0
 8014fb0:	68fa      	ldr	r2, [r7, #12]
 8014fb2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8014fb4:	2101      	movs	r1, #1
 8014fb6:	68f8      	ldr	r0, [r7, #12]
 8014fb8:	f000 f8d2 	bl	8015160 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8014fbc:	2301      	movs	r3, #1
 8014fbe:	e000      	b.n	8014fc2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8014fc0:	2300      	movs	r3, #0
}
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	3718      	adds	r7, #24
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}
 8014fca:	bf00      	nop
 8014fcc:	080217fc 	.word	0x080217fc
 8014fd0:	08021914 	.word	0x08021914
 8014fd4:	0802184c 	.word	0x0802184c

08014fd8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8014fd8:	b480      	push	{r7}
 8014fda:	b085      	sub	sp, #20
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	60b9      	str	r1, [r7, #8]
 8014fe2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8014fe4:	68bb      	ldr	r3, [r7, #8]
 8014fe6:	681a      	ldr	r2, [r3, #0]
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	3308      	adds	r3, #8
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	429a      	cmp	r2, r3
 8014ff0:	d00a      	beq.n	8015008 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8014ff2:	68bb      	ldr	r3, [r7, #8]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d002      	beq.n	8014ffe <netif_do_set_netmask+0x26>
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	e000      	b.n	8015000 <netif_do_set_netmask+0x28>
 8014ffe:	2300      	movs	r3, #0
 8015000:	68fa      	ldr	r2, [r7, #12]
 8015002:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8015004:	2301      	movs	r3, #1
 8015006:	e000      	b.n	801500a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8015008:	2300      	movs	r3, #0
}
 801500a:	4618      	mov	r0, r3
 801500c:	3714      	adds	r7, #20
 801500e:	46bd      	mov	sp, r7
 8015010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015014:	4770      	bx	lr

08015016 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8015016:	b480      	push	{r7}
 8015018:	b085      	sub	sp, #20
 801501a:	af00      	add	r7, sp, #0
 801501c:	60f8      	str	r0, [r7, #12]
 801501e:	60b9      	str	r1, [r7, #8]
 8015020:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	681a      	ldr	r2, [r3, #0]
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	330c      	adds	r3, #12
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	429a      	cmp	r2, r3
 801502e:	d00a      	beq.n	8015046 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8015030:	68bb      	ldr	r3, [r7, #8]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d002      	beq.n	801503c <netif_do_set_gw+0x26>
 8015036:	68bb      	ldr	r3, [r7, #8]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	e000      	b.n	801503e <netif_do_set_gw+0x28>
 801503c:	2300      	movs	r3, #0
 801503e:	68fa      	ldr	r2, [r7, #12]
 8015040:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8015042:	2301      	movs	r3, #1
 8015044:	e000      	b.n	8015048 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8015046:	2300      	movs	r3, #0
}
 8015048:	4618      	mov	r0, r3
 801504a:	3714      	adds	r7, #20
 801504c:	46bd      	mov	sp, r7
 801504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015052:	4770      	bx	lr

08015054 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b088      	sub	sp, #32
 8015058:	af00      	add	r7, sp, #0
 801505a:	60f8      	str	r0, [r7, #12]
 801505c:	60b9      	str	r1, [r7, #8]
 801505e:	607a      	str	r2, [r7, #4]
 8015060:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8015062:	2300      	movs	r3, #0
 8015064:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8015066:	2300      	movs	r3, #0
 8015068:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801506a:	68bb      	ldr	r3, [r7, #8]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d101      	bne.n	8015074 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8015070:	4b1c      	ldr	r3, [pc, #112]	; (80150e4 <netif_set_addr+0x90>)
 8015072:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d101      	bne.n	801507e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801507a:	4b1a      	ldr	r3, [pc, #104]	; (80150e4 <netif_set_addr+0x90>)
 801507c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801507e:	683b      	ldr	r3, [r7, #0]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d101      	bne.n	8015088 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8015084:	4b17      	ldr	r3, [pc, #92]	; (80150e4 <netif_set_addr+0x90>)
 8015086:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d003      	beq.n	8015096 <netif_set_addr+0x42>
 801508e:	68bb      	ldr	r3, [r7, #8]
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d101      	bne.n	801509a <netif_set_addr+0x46>
 8015096:	2301      	movs	r3, #1
 8015098:	e000      	b.n	801509c <netif_set_addr+0x48>
 801509a:	2300      	movs	r3, #0
 801509c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d006      	beq.n	80150b2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80150a4:	f107 0310 	add.w	r3, r7, #16
 80150a8:	461a      	mov	r2, r3
 80150aa:	68b9      	ldr	r1, [r7, #8]
 80150ac:	68f8      	ldr	r0, [r7, #12]
 80150ae:	f7ff ff49 	bl	8014f44 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80150b2:	69fa      	ldr	r2, [r7, #28]
 80150b4:	6879      	ldr	r1, [r7, #4]
 80150b6:	68f8      	ldr	r0, [r7, #12]
 80150b8:	f7ff ff8e 	bl	8014fd8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80150bc:	69ba      	ldr	r2, [r7, #24]
 80150be:	6839      	ldr	r1, [r7, #0]
 80150c0:	68f8      	ldr	r0, [r7, #12]
 80150c2:	f7ff ffa8 	bl	8015016 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80150c6:	697b      	ldr	r3, [r7, #20]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d106      	bne.n	80150da <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80150cc:	f107 0310 	add.w	r3, r7, #16
 80150d0:	461a      	mov	r2, r3
 80150d2:	68b9      	ldr	r1, [r7, #8]
 80150d4:	68f8      	ldr	r0, [r7, #12]
 80150d6:	f7ff ff35 	bl	8014f44 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80150da:	bf00      	nop
 80150dc:	3720      	adds	r7, #32
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd80      	pop	{r7, pc}
 80150e2:	bf00      	nop
 80150e4:	0807ac80 	.word	0x0807ac80

080150e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80150e8:	b480      	push	{r7}
 80150ea:	b083      	sub	sp, #12
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80150f0:	4a04      	ldr	r2, [pc, #16]	; (8015104 <netif_set_default+0x1c>)
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80150f6:	bf00      	nop
 80150f8:	370c      	adds	r7, #12
 80150fa:	46bd      	mov	sp, r7
 80150fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015100:	4770      	bx	lr
 8015102:	bf00      	nop
 8015104:	20014750 	.word	0x20014750

08015108 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d107      	bne.n	8015126 <netif_set_up+0x1e>
 8015116:	4b0f      	ldr	r3, [pc, #60]	; (8015154 <netif_set_up+0x4c>)
 8015118:	f44f 7254 	mov.w	r2, #848	; 0x350
 801511c:	490e      	ldr	r1, [pc, #56]	; (8015158 <netif_set_up+0x50>)
 801511e:	480f      	ldr	r0, [pc, #60]	; (801515c <netif_set_up+0x54>)
 8015120:	f009 ff14 	bl	801ef4c <iprintf>
 8015124:	e013      	b.n	801514e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801512c:	f003 0301 	and.w	r3, r3, #1
 8015130:	2b00      	cmp	r3, #0
 8015132:	d10c      	bne.n	801514e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801513a:	f043 0301 	orr.w	r3, r3, #1
 801513e:	b2da      	uxtb	r2, r3
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015146:	2103      	movs	r1, #3
 8015148:	6878      	ldr	r0, [r7, #4]
 801514a:	f000 f809 	bl	8015160 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801514e:	3708      	adds	r7, #8
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}
 8015154:	080217fc 	.word	0x080217fc
 8015158:	08021984 	.word	0x08021984
 801515c:	0802184c 	.word	0x0802184c

08015160 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
 8015168:	460b      	mov	r3, r1
 801516a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d106      	bne.n	8015180 <netif_issue_reports+0x20>
 8015172:	4b18      	ldr	r3, [pc, #96]	; (80151d4 <netif_issue_reports+0x74>)
 8015174:	f240 326d 	movw	r2, #877	; 0x36d
 8015178:	4917      	ldr	r1, [pc, #92]	; (80151d8 <netif_issue_reports+0x78>)
 801517a:	4818      	ldr	r0, [pc, #96]	; (80151dc <netif_issue_reports+0x7c>)
 801517c:	f009 fee6 	bl	801ef4c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015186:	f003 0304 	and.w	r3, r3, #4
 801518a:	2b00      	cmp	r3, #0
 801518c:	d01e      	beq.n	80151cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015194:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015198:	2b00      	cmp	r3, #0
 801519a:	d017      	beq.n	80151cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801519c:	78fb      	ldrb	r3, [r7, #3]
 801519e:	f003 0301 	and.w	r3, r3, #1
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d013      	beq.n	80151ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	3304      	adds	r3, #4
 80151aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d00e      	beq.n	80151ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151b6:	f003 0308 	and.w	r3, r3, #8
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d007      	beq.n	80151ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	3304      	adds	r3, #4
 80151c2:	4619      	mov	r1, r3
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	f008 f9bf 	bl	801d548 <etharp_request>
 80151ca:	e000      	b.n	80151ce <netif_issue_reports+0x6e>
    return;
 80151cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80151ce:	3708      	adds	r7, #8
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}
 80151d4:	080217fc 	.word	0x080217fc
 80151d8:	080219a0 	.word	0x080219a0
 80151dc:	0802184c 	.word	0x0802184c

080151e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b082      	sub	sp, #8
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d107      	bne.n	80151fe <netif_set_down+0x1e>
 80151ee:	4b12      	ldr	r3, [pc, #72]	; (8015238 <netif_set_down+0x58>)
 80151f0:	f240 329b 	movw	r2, #923	; 0x39b
 80151f4:	4911      	ldr	r1, [pc, #68]	; (801523c <netif_set_down+0x5c>)
 80151f6:	4812      	ldr	r0, [pc, #72]	; (8015240 <netif_set_down+0x60>)
 80151f8:	f009 fea8 	bl	801ef4c <iprintf>
 80151fc:	e019      	b.n	8015232 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015204:	f003 0301 	and.w	r3, r3, #1
 8015208:	2b00      	cmp	r3, #0
 801520a:	d012      	beq.n	8015232 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015212:	f023 0301 	bic.w	r3, r3, #1
 8015216:	b2da      	uxtb	r2, r3
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015224:	f003 0308 	and.w	r3, r3, #8
 8015228:	2b00      	cmp	r3, #0
 801522a:	d002      	beq.n	8015232 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801522c:	6878      	ldr	r0, [r7, #4]
 801522e:	f007 fd49 	bl	801ccc4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8015232:	3708      	adds	r7, #8
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}
 8015238:	080217fc 	.word	0x080217fc
 801523c:	080219c4 	.word	0x080219c4
 8015240:	0802184c 	.word	0x0802184c

08015244 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b082      	sub	sp, #8
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d107      	bne.n	8015262 <netif_set_link_up+0x1e>
 8015252:	4b13      	ldr	r3, [pc, #76]	; (80152a0 <netif_set_link_up+0x5c>)
 8015254:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8015258:	4912      	ldr	r1, [pc, #72]	; (80152a4 <netif_set_link_up+0x60>)
 801525a:	4813      	ldr	r0, [pc, #76]	; (80152a8 <netif_set_link_up+0x64>)
 801525c:	f009 fe76 	bl	801ef4c <iprintf>
 8015260:	e01b      	b.n	801529a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015268:	f003 0304 	and.w	r3, r3, #4
 801526c:	2b00      	cmp	r3, #0
 801526e:	d114      	bne.n	801529a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015276:	f043 0304 	orr.w	r3, r3, #4
 801527a:	b2da      	uxtb	r2, r3
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015282:	2103      	movs	r1, #3
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f7ff ff6b 	bl	8015160 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	69db      	ldr	r3, [r3, #28]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d003      	beq.n	801529a <netif_set_link_up+0x56>
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	69db      	ldr	r3, [r3, #28]
 8015296:	6878      	ldr	r0, [r7, #4]
 8015298:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801529a:	3708      	adds	r7, #8
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	080217fc 	.word	0x080217fc
 80152a4:	080219e4 	.word	0x080219e4
 80152a8:	0802184c 	.word	0x0802184c

080152ac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b082      	sub	sp, #8
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d107      	bne.n	80152ca <netif_set_link_down+0x1e>
 80152ba:	4b11      	ldr	r3, [pc, #68]	; (8015300 <netif_set_link_down+0x54>)
 80152bc:	f240 4206 	movw	r2, #1030	; 0x406
 80152c0:	4910      	ldr	r1, [pc, #64]	; (8015304 <netif_set_link_down+0x58>)
 80152c2:	4811      	ldr	r0, [pc, #68]	; (8015308 <netif_set_link_down+0x5c>)
 80152c4:	f009 fe42 	bl	801ef4c <iprintf>
 80152c8:	e017      	b.n	80152fa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152d0:	f003 0304 	and.w	r3, r3, #4
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d010      	beq.n	80152fa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152de:	f023 0304 	bic.w	r3, r3, #4
 80152e2:	b2da      	uxtb	r2, r3
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	69db      	ldr	r3, [r3, #28]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d003      	beq.n	80152fa <netif_set_link_down+0x4e>
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	69db      	ldr	r3, [r3, #28]
 80152f6:	6878      	ldr	r0, [r7, #4]
 80152f8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80152fa:	3708      	adds	r7, #8
 80152fc:	46bd      	mov	sp, r7
 80152fe:	bd80      	pop	{r7, pc}
 8015300:	080217fc 	.word	0x080217fc
 8015304:	08021a08 	.word	0x08021a08
 8015308:	0802184c 	.word	0x0802184c

0801530c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801530c:	b480      	push	{r7}
 801530e:	b083      	sub	sp, #12
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
 8015314:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d002      	beq.n	8015322 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	683a      	ldr	r2, [r7, #0]
 8015320:	61da      	str	r2, [r3, #28]
  }
}
 8015322:	bf00      	nop
 8015324:	370c      	adds	r7, #12
 8015326:	46bd      	mov	sp, r7
 8015328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532c:	4770      	bx	lr

0801532e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801532e:	b480      	push	{r7}
 8015330:	b085      	sub	sp, #20
 8015332:	af00      	add	r7, sp, #0
 8015334:	60f8      	str	r0, [r7, #12]
 8015336:	60b9      	str	r1, [r7, #8]
 8015338:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801533a:	f06f 030b 	mvn.w	r3, #11
}
 801533e:	4618      	mov	r0, r3
 8015340:	3714      	adds	r7, #20
 8015342:	46bd      	mov	sp, r7
 8015344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015348:	4770      	bx	lr
	...

0801534c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801534c:	b480      	push	{r7}
 801534e:	b085      	sub	sp, #20
 8015350:	af00      	add	r7, sp, #0
 8015352:	4603      	mov	r3, r0
 8015354:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8015356:	79fb      	ldrb	r3, [r7, #7]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d013      	beq.n	8015384 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801535c:	4b0d      	ldr	r3, [pc, #52]	; (8015394 <netif_get_by_index+0x48>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	60fb      	str	r3, [r7, #12]
 8015362:	e00c      	b.n	801537e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801536a:	3301      	adds	r3, #1
 801536c:	b2db      	uxtb	r3, r3
 801536e:	79fa      	ldrb	r2, [r7, #7]
 8015370:	429a      	cmp	r2, r3
 8015372:	d101      	bne.n	8015378 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	e006      	b.n	8015386 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	60fb      	str	r3, [r7, #12]
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d1ef      	bne.n	8015364 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8015384:	2300      	movs	r3, #0
}
 8015386:	4618      	mov	r0, r3
 8015388:	3714      	adds	r7, #20
 801538a:	46bd      	mov	sp, r7
 801538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015390:	4770      	bx	lr
 8015392:	bf00      	nop
 8015394:	2001474c 	.word	0x2001474c

08015398 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b082      	sub	sp, #8
 801539c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801539e:	f009 fd51 	bl	801ee44 <sys_arch_protect>
 80153a2:	6038      	str	r0, [r7, #0]
 80153a4:	4b0d      	ldr	r3, [pc, #52]	; (80153dc <pbuf_free_ooseq+0x44>)
 80153a6:	2200      	movs	r2, #0
 80153a8:	701a      	strb	r2, [r3, #0]
 80153aa:	6838      	ldr	r0, [r7, #0]
 80153ac:	f009 fd58 	bl	801ee60 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80153b0:	4b0b      	ldr	r3, [pc, #44]	; (80153e0 <pbuf_free_ooseq+0x48>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	607b      	str	r3, [r7, #4]
 80153b6:	e00a      	b.n	80153ce <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d003      	beq.n	80153c8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80153c0:	6878      	ldr	r0, [r7, #4]
 80153c2:	f002 fc29 	bl	8017c18 <tcp_free_ooseq>
      return;
 80153c6:	e005      	b.n	80153d4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	68db      	ldr	r3, [r3, #12]
 80153cc:	607b      	str	r3, [r7, #4]
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d1f1      	bne.n	80153b8 <pbuf_free_ooseq+0x20>
    }
  }
}
 80153d4:	3708      	adds	r7, #8
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}
 80153da:	bf00      	nop
 80153dc:	20014754 	.word	0x20014754
 80153e0:	2001475c 	.word	0x2001475c

080153e4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80153ec:	f7ff ffd4 	bl	8015398 <pbuf_free_ooseq>
}
 80153f0:	bf00      	nop
 80153f2:	3708      	adds	r7, #8
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}

080153f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b082      	sub	sp, #8
 80153fc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80153fe:	f009 fd21 	bl	801ee44 <sys_arch_protect>
 8015402:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8015404:	4b0f      	ldr	r3, [pc, #60]	; (8015444 <pbuf_pool_is_empty+0x4c>)
 8015406:	781b      	ldrb	r3, [r3, #0]
 8015408:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801540a:	4b0e      	ldr	r3, [pc, #56]	; (8015444 <pbuf_pool_is_empty+0x4c>)
 801540c:	2201      	movs	r2, #1
 801540e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f009 fd25 	bl	801ee60 <sys_arch_unprotect>

  if (!queued) {
 8015416:	78fb      	ldrb	r3, [r7, #3]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d10f      	bne.n	801543c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801541c:	2100      	movs	r1, #0
 801541e:	480a      	ldr	r0, [pc, #40]	; (8015448 <pbuf_pool_is_empty+0x50>)
 8015420:	f7fd fb1c 	bl	8012a5c <tcpip_try_callback>
 8015424:	4603      	mov	r3, r0
 8015426:	2b00      	cmp	r3, #0
 8015428:	d008      	beq.n	801543c <pbuf_pool_is_empty+0x44>
 801542a:	f009 fd0b 	bl	801ee44 <sys_arch_protect>
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	4b04      	ldr	r3, [pc, #16]	; (8015444 <pbuf_pool_is_empty+0x4c>)
 8015432:	2200      	movs	r2, #0
 8015434:	701a      	strb	r2, [r3, #0]
 8015436:	6878      	ldr	r0, [r7, #4]
 8015438:	f009 fd12 	bl	801ee60 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801543c:	bf00      	nop
 801543e:	3708      	adds	r7, #8
 8015440:	46bd      	mov	sp, r7
 8015442:	bd80      	pop	{r7, pc}
 8015444:	20014754 	.word	0x20014754
 8015448:	080153e5 	.word	0x080153e5

0801544c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801544c:	b480      	push	{r7}
 801544e:	b085      	sub	sp, #20
 8015450:	af00      	add	r7, sp, #0
 8015452:	60f8      	str	r0, [r7, #12]
 8015454:	60b9      	str	r1, [r7, #8]
 8015456:	4611      	mov	r1, r2
 8015458:	461a      	mov	r2, r3
 801545a:	460b      	mov	r3, r1
 801545c:	80fb      	strh	r3, [r7, #6]
 801545e:	4613      	mov	r3, r2
 8015460:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	2200      	movs	r2, #0
 8015466:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	68ba      	ldr	r2, [r7, #8]
 801546c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	88fa      	ldrh	r2, [r7, #6]
 8015472:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	88ba      	ldrh	r2, [r7, #4]
 8015478:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801547a:	8b3b      	ldrh	r3, [r7, #24]
 801547c:	b2da      	uxtb	r2, r3
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	7f3a      	ldrb	r2, [r7, #28]
 8015486:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	2201      	movs	r2, #1
 801548c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	2200      	movs	r2, #0
 8015492:	73da      	strb	r2, [r3, #15]
}
 8015494:	bf00      	nop
 8015496:	3714      	adds	r7, #20
 8015498:	46bd      	mov	sp, r7
 801549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549e:	4770      	bx	lr

080154a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b08c      	sub	sp, #48	; 0x30
 80154a4:	af02      	add	r7, sp, #8
 80154a6:	4603      	mov	r3, r0
 80154a8:	71fb      	strb	r3, [r7, #7]
 80154aa:	460b      	mov	r3, r1
 80154ac:	80bb      	strh	r3, [r7, #4]
 80154ae:	4613      	mov	r3, r2
 80154b0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80154b2:	79fb      	ldrb	r3, [r7, #7]
 80154b4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80154b6:	887b      	ldrh	r3, [r7, #2]
 80154b8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80154bc:	d07f      	beq.n	80155be <pbuf_alloc+0x11e>
 80154be:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80154c2:	f300 80c8 	bgt.w	8015656 <pbuf_alloc+0x1b6>
 80154c6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80154ca:	d010      	beq.n	80154ee <pbuf_alloc+0x4e>
 80154cc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80154d0:	f300 80c1 	bgt.w	8015656 <pbuf_alloc+0x1b6>
 80154d4:	2b01      	cmp	r3, #1
 80154d6:	d002      	beq.n	80154de <pbuf_alloc+0x3e>
 80154d8:	2b41      	cmp	r3, #65	; 0x41
 80154da:	f040 80bc 	bne.w	8015656 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80154de:	887a      	ldrh	r2, [r7, #2]
 80154e0:	88bb      	ldrh	r3, [r7, #4]
 80154e2:	4619      	mov	r1, r3
 80154e4:	2000      	movs	r0, #0
 80154e6:	f000 f8d1 	bl	801568c <pbuf_alloc_reference>
 80154ea:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80154ec:	e0bd      	b.n	801566a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80154ee:	2300      	movs	r3, #0
 80154f0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80154f2:	2300      	movs	r3, #0
 80154f4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80154f6:	88bb      	ldrh	r3, [r7, #4]
 80154f8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80154fa:	200c      	movs	r0, #12
 80154fc:	f7ff fbbe 	bl	8014c7c <memp_malloc>
 8015500:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8015502:	693b      	ldr	r3, [r7, #16]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d109      	bne.n	801551c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8015508:	f7ff ff76 	bl	80153f8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801550e:	2b00      	cmp	r3, #0
 8015510:	d002      	beq.n	8015518 <pbuf_alloc+0x78>
            pbuf_free(p);
 8015512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015514:	f000 faba 	bl	8015a8c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8015518:	2300      	movs	r3, #0
 801551a:	e0a7      	b.n	801566c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801551c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801551e:	3303      	adds	r3, #3
 8015520:	b29b      	uxth	r3, r3
 8015522:	f023 0303 	bic.w	r3, r3, #3
 8015526:	b29b      	uxth	r3, r3
 8015528:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801552c:	b29b      	uxth	r3, r3
 801552e:	8b7a      	ldrh	r2, [r7, #26]
 8015530:	4293      	cmp	r3, r2
 8015532:	bf28      	it	cs
 8015534:	4613      	movcs	r3, r2
 8015536:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8015538:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801553a:	3310      	adds	r3, #16
 801553c:	693a      	ldr	r2, [r7, #16]
 801553e:	4413      	add	r3, r2
 8015540:	3303      	adds	r3, #3
 8015542:	f023 0303 	bic.w	r3, r3, #3
 8015546:	4618      	mov	r0, r3
 8015548:	89f9      	ldrh	r1, [r7, #14]
 801554a:	8b7a      	ldrh	r2, [r7, #26]
 801554c:	2300      	movs	r3, #0
 801554e:	9301      	str	r3, [sp, #4]
 8015550:	887b      	ldrh	r3, [r7, #2]
 8015552:	9300      	str	r3, [sp, #0]
 8015554:	460b      	mov	r3, r1
 8015556:	4601      	mov	r1, r0
 8015558:	6938      	ldr	r0, [r7, #16]
 801555a:	f7ff ff77 	bl	801544c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801555e:	693b      	ldr	r3, [r7, #16]
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	f003 0303 	and.w	r3, r3, #3
 8015566:	2b00      	cmp	r3, #0
 8015568:	d006      	beq.n	8015578 <pbuf_alloc+0xd8>
 801556a:	4b42      	ldr	r3, [pc, #264]	; (8015674 <pbuf_alloc+0x1d4>)
 801556c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015570:	4941      	ldr	r1, [pc, #260]	; (8015678 <pbuf_alloc+0x1d8>)
 8015572:	4842      	ldr	r0, [pc, #264]	; (801567c <pbuf_alloc+0x1dc>)
 8015574:	f009 fcea 	bl	801ef4c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015578:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801557a:	3303      	adds	r3, #3
 801557c:	f023 0303 	bic.w	r3, r3, #3
 8015580:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8015584:	d106      	bne.n	8015594 <pbuf_alloc+0xf4>
 8015586:	4b3b      	ldr	r3, [pc, #236]	; (8015674 <pbuf_alloc+0x1d4>)
 8015588:	f44f 7281 	mov.w	r2, #258	; 0x102
 801558c:	493c      	ldr	r1, [pc, #240]	; (8015680 <pbuf_alloc+0x1e0>)
 801558e:	483b      	ldr	r0, [pc, #236]	; (801567c <pbuf_alloc+0x1dc>)
 8015590:	f009 fcdc 	bl	801ef4c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8015594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015596:	2b00      	cmp	r3, #0
 8015598:	d102      	bne.n	80155a0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801559a:	693b      	ldr	r3, [r7, #16]
 801559c:	627b      	str	r3, [r7, #36]	; 0x24
 801559e:	e002      	b.n	80155a6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80155a0:	69fb      	ldr	r3, [r7, #28]
 80155a2:	693a      	ldr	r2, [r7, #16]
 80155a4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80155a6:	693b      	ldr	r3, [r7, #16]
 80155a8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80155aa:	8b7a      	ldrh	r2, [r7, #26]
 80155ac:	89fb      	ldrh	r3, [r7, #14]
 80155ae:	1ad3      	subs	r3, r2, r3
 80155b0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80155b2:	2300      	movs	r3, #0
 80155b4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80155b6:	8b7b      	ldrh	r3, [r7, #26]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d19e      	bne.n	80154fa <pbuf_alloc+0x5a>
      break;
 80155bc:	e055      	b.n	801566a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80155be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155c0:	3303      	adds	r3, #3
 80155c2:	b29b      	uxth	r3, r3
 80155c4:	f023 0303 	bic.w	r3, r3, #3
 80155c8:	b29a      	uxth	r2, r3
 80155ca:	88bb      	ldrh	r3, [r7, #4]
 80155cc:	3303      	adds	r3, #3
 80155ce:	b29b      	uxth	r3, r3
 80155d0:	f023 0303 	bic.w	r3, r3, #3
 80155d4:	b29b      	uxth	r3, r3
 80155d6:	4413      	add	r3, r2
 80155d8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80155da:	8b3b      	ldrh	r3, [r7, #24]
 80155dc:	3310      	adds	r3, #16
 80155de:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80155e0:	8b3a      	ldrh	r2, [r7, #24]
 80155e2:	88bb      	ldrh	r3, [r7, #4]
 80155e4:	3303      	adds	r3, #3
 80155e6:	f023 0303 	bic.w	r3, r3, #3
 80155ea:	429a      	cmp	r2, r3
 80155ec:	d306      	bcc.n	80155fc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80155ee:	8afa      	ldrh	r2, [r7, #22]
 80155f0:	88bb      	ldrh	r3, [r7, #4]
 80155f2:	3303      	adds	r3, #3
 80155f4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80155f8:	429a      	cmp	r2, r3
 80155fa:	d201      	bcs.n	8015600 <pbuf_alloc+0x160>
        return NULL;
 80155fc:	2300      	movs	r3, #0
 80155fe:	e035      	b.n	801566c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8015600:	8afb      	ldrh	r3, [r7, #22]
 8015602:	4618      	mov	r0, r3
 8015604:	f7ff f9b8 	bl	8014978 <mem_malloc>
 8015608:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801560c:	2b00      	cmp	r3, #0
 801560e:	d101      	bne.n	8015614 <pbuf_alloc+0x174>
        return NULL;
 8015610:	2300      	movs	r3, #0
 8015612:	e02b      	b.n	801566c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8015614:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015616:	3310      	adds	r3, #16
 8015618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801561a:	4413      	add	r3, r2
 801561c:	3303      	adds	r3, #3
 801561e:	f023 0303 	bic.w	r3, r3, #3
 8015622:	4618      	mov	r0, r3
 8015624:	88b9      	ldrh	r1, [r7, #4]
 8015626:	88ba      	ldrh	r2, [r7, #4]
 8015628:	2300      	movs	r3, #0
 801562a:	9301      	str	r3, [sp, #4]
 801562c:	887b      	ldrh	r3, [r7, #2]
 801562e:	9300      	str	r3, [sp, #0]
 8015630:	460b      	mov	r3, r1
 8015632:	4601      	mov	r1, r0
 8015634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015636:	f7ff ff09 	bl	801544c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801563c:	685b      	ldr	r3, [r3, #4]
 801563e:	f003 0303 	and.w	r3, r3, #3
 8015642:	2b00      	cmp	r3, #0
 8015644:	d010      	beq.n	8015668 <pbuf_alloc+0x1c8>
 8015646:	4b0b      	ldr	r3, [pc, #44]	; (8015674 <pbuf_alloc+0x1d4>)
 8015648:	f44f 7291 	mov.w	r2, #290	; 0x122
 801564c:	490d      	ldr	r1, [pc, #52]	; (8015684 <pbuf_alloc+0x1e4>)
 801564e:	480b      	ldr	r0, [pc, #44]	; (801567c <pbuf_alloc+0x1dc>)
 8015650:	f009 fc7c 	bl	801ef4c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8015654:	e008      	b.n	8015668 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8015656:	4b07      	ldr	r3, [pc, #28]	; (8015674 <pbuf_alloc+0x1d4>)
 8015658:	f240 1227 	movw	r2, #295	; 0x127
 801565c:	490a      	ldr	r1, [pc, #40]	; (8015688 <pbuf_alloc+0x1e8>)
 801565e:	4807      	ldr	r0, [pc, #28]	; (801567c <pbuf_alloc+0x1dc>)
 8015660:	f009 fc74 	bl	801ef4c <iprintf>
      return NULL;
 8015664:	2300      	movs	r3, #0
 8015666:	e001      	b.n	801566c <pbuf_alloc+0x1cc>
      break;
 8015668:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801566c:	4618      	mov	r0, r3
 801566e:	3728      	adds	r7, #40	; 0x28
 8015670:	46bd      	mov	sp, r7
 8015672:	bd80      	pop	{r7, pc}
 8015674:	08021a2c 	.word	0x08021a2c
 8015678:	08021a5c 	.word	0x08021a5c
 801567c:	08021a8c 	.word	0x08021a8c
 8015680:	08021ab4 	.word	0x08021ab4
 8015684:	08021ae8 	.word	0x08021ae8
 8015688:	08021b14 	.word	0x08021b14

0801568c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b086      	sub	sp, #24
 8015690:	af02      	add	r7, sp, #8
 8015692:	6078      	str	r0, [r7, #4]
 8015694:	460b      	mov	r3, r1
 8015696:	807b      	strh	r3, [r7, #2]
 8015698:	4613      	mov	r3, r2
 801569a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801569c:	883b      	ldrh	r3, [r7, #0]
 801569e:	2b41      	cmp	r3, #65	; 0x41
 80156a0:	d009      	beq.n	80156b6 <pbuf_alloc_reference+0x2a>
 80156a2:	883b      	ldrh	r3, [r7, #0]
 80156a4:	2b01      	cmp	r3, #1
 80156a6:	d006      	beq.n	80156b6 <pbuf_alloc_reference+0x2a>
 80156a8:	4b0f      	ldr	r3, [pc, #60]	; (80156e8 <pbuf_alloc_reference+0x5c>)
 80156aa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80156ae:	490f      	ldr	r1, [pc, #60]	; (80156ec <pbuf_alloc_reference+0x60>)
 80156b0:	480f      	ldr	r0, [pc, #60]	; (80156f0 <pbuf_alloc_reference+0x64>)
 80156b2:	f009 fc4b 	bl	801ef4c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80156b6:	200b      	movs	r0, #11
 80156b8:	f7ff fae0 	bl	8014c7c <memp_malloc>
 80156bc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d101      	bne.n	80156c8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80156c4:	2300      	movs	r3, #0
 80156c6:	e00b      	b.n	80156e0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80156c8:	8879      	ldrh	r1, [r7, #2]
 80156ca:	887a      	ldrh	r2, [r7, #2]
 80156cc:	2300      	movs	r3, #0
 80156ce:	9301      	str	r3, [sp, #4]
 80156d0:	883b      	ldrh	r3, [r7, #0]
 80156d2:	9300      	str	r3, [sp, #0]
 80156d4:	460b      	mov	r3, r1
 80156d6:	6879      	ldr	r1, [r7, #4]
 80156d8:	68f8      	ldr	r0, [r7, #12]
 80156da:	f7ff feb7 	bl	801544c <pbuf_init_alloced_pbuf>
  return p;
 80156de:	68fb      	ldr	r3, [r7, #12]
}
 80156e0:	4618      	mov	r0, r3
 80156e2:	3710      	adds	r7, #16
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}
 80156e8:	08021a2c 	.word	0x08021a2c
 80156ec:	08021b30 	.word	0x08021b30
 80156f0:	08021a8c 	.word	0x08021a8c

080156f4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b088      	sub	sp, #32
 80156f8:	af02      	add	r7, sp, #8
 80156fa:	607b      	str	r3, [r7, #4]
 80156fc:	4603      	mov	r3, r0
 80156fe:	73fb      	strb	r3, [r7, #15]
 8015700:	460b      	mov	r3, r1
 8015702:	81bb      	strh	r3, [r7, #12]
 8015704:	4613      	mov	r3, r2
 8015706:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8015708:	7bfb      	ldrb	r3, [r7, #15]
 801570a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801570c:	8a7b      	ldrh	r3, [r7, #18]
 801570e:	3303      	adds	r3, #3
 8015710:	f023 0203 	bic.w	r2, r3, #3
 8015714:	89bb      	ldrh	r3, [r7, #12]
 8015716:	441a      	add	r2, r3
 8015718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801571a:	429a      	cmp	r2, r3
 801571c:	d901      	bls.n	8015722 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801571e:	2300      	movs	r3, #0
 8015720:	e018      	b.n	8015754 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8015722:	6a3b      	ldr	r3, [r7, #32]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d007      	beq.n	8015738 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015728:	8a7b      	ldrh	r3, [r7, #18]
 801572a:	3303      	adds	r3, #3
 801572c:	f023 0303 	bic.w	r3, r3, #3
 8015730:	6a3a      	ldr	r2, [r7, #32]
 8015732:	4413      	add	r3, r2
 8015734:	617b      	str	r3, [r7, #20]
 8015736:	e001      	b.n	801573c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8015738:	2300      	movs	r3, #0
 801573a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801573c:	6878      	ldr	r0, [r7, #4]
 801573e:	89b9      	ldrh	r1, [r7, #12]
 8015740:	89ba      	ldrh	r2, [r7, #12]
 8015742:	2302      	movs	r3, #2
 8015744:	9301      	str	r3, [sp, #4]
 8015746:	897b      	ldrh	r3, [r7, #10]
 8015748:	9300      	str	r3, [sp, #0]
 801574a:	460b      	mov	r3, r1
 801574c:	6979      	ldr	r1, [r7, #20]
 801574e:	f7ff fe7d 	bl	801544c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8015752:	687b      	ldr	r3, [r7, #4]
}
 8015754:	4618      	mov	r0, r3
 8015756:	3718      	adds	r7, #24
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}

0801575c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b084      	sub	sp, #16
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
 8015764:	460b      	mov	r3, r1
 8015766:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d106      	bne.n	801577c <pbuf_realloc+0x20>
 801576e:	4b3a      	ldr	r3, [pc, #232]	; (8015858 <pbuf_realloc+0xfc>)
 8015770:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8015774:	4939      	ldr	r1, [pc, #228]	; (801585c <pbuf_realloc+0x100>)
 8015776:	483a      	ldr	r0, [pc, #232]	; (8015860 <pbuf_realloc+0x104>)
 8015778:	f009 fbe8 	bl	801ef4c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	891b      	ldrh	r3, [r3, #8]
 8015780:	887a      	ldrh	r2, [r7, #2]
 8015782:	429a      	cmp	r2, r3
 8015784:	d263      	bcs.n	801584e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	891a      	ldrh	r2, [r3, #8]
 801578a:	887b      	ldrh	r3, [r7, #2]
 801578c:	1ad3      	subs	r3, r2, r3
 801578e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015790:	887b      	ldrh	r3, [r7, #2]
 8015792:	817b      	strh	r3, [r7, #10]
  q = p;
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015798:	e018      	b.n	80157cc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	895b      	ldrh	r3, [r3, #10]
 801579e:	897a      	ldrh	r2, [r7, #10]
 80157a0:	1ad3      	subs	r3, r2, r3
 80157a2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	891a      	ldrh	r2, [r3, #8]
 80157a8:	893b      	ldrh	r3, [r7, #8]
 80157aa:	1ad3      	subs	r3, r2, r3
 80157ac:	b29a      	uxth	r2, r3
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d106      	bne.n	80157cc <pbuf_realloc+0x70>
 80157be:	4b26      	ldr	r3, [pc, #152]	; (8015858 <pbuf_realloc+0xfc>)
 80157c0:	f240 12af 	movw	r2, #431	; 0x1af
 80157c4:	4927      	ldr	r1, [pc, #156]	; (8015864 <pbuf_realloc+0x108>)
 80157c6:	4826      	ldr	r0, [pc, #152]	; (8015860 <pbuf_realloc+0x104>)
 80157c8:	f009 fbc0 	bl	801ef4c <iprintf>
  while (rem_len > q->len) {
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	895b      	ldrh	r3, [r3, #10]
 80157d0:	897a      	ldrh	r2, [r7, #10]
 80157d2:	429a      	cmp	r2, r3
 80157d4:	d8e1      	bhi.n	801579a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	7b1b      	ldrb	r3, [r3, #12]
 80157da:	f003 030f 	and.w	r3, r3, #15
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d121      	bne.n	8015826 <pbuf_realloc+0xca>
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	895b      	ldrh	r3, [r3, #10]
 80157e6:	897a      	ldrh	r2, [r7, #10]
 80157e8:	429a      	cmp	r2, r3
 80157ea:	d01c      	beq.n	8015826 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	7b5b      	ldrb	r3, [r3, #13]
 80157f0:	f003 0302 	and.w	r3, r3, #2
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d116      	bne.n	8015826 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	685a      	ldr	r2, [r3, #4]
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	1ad3      	subs	r3, r2, r3
 8015800:	b29a      	uxth	r2, r3
 8015802:	897b      	ldrh	r3, [r7, #10]
 8015804:	4413      	add	r3, r2
 8015806:	b29b      	uxth	r3, r3
 8015808:	4619      	mov	r1, r3
 801580a:	68f8      	ldr	r0, [r7, #12]
 801580c:	f7fe ffaa 	bl	8014764 <mem_trim>
 8015810:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d106      	bne.n	8015826 <pbuf_realloc+0xca>
 8015818:	4b0f      	ldr	r3, [pc, #60]	; (8015858 <pbuf_realloc+0xfc>)
 801581a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801581e:	4912      	ldr	r1, [pc, #72]	; (8015868 <pbuf_realloc+0x10c>)
 8015820:	480f      	ldr	r0, [pc, #60]	; (8015860 <pbuf_realloc+0x104>)
 8015822:	f009 fb93 	bl	801ef4c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	897a      	ldrh	r2, [r7, #10]
 801582a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	895a      	ldrh	r2, [r3, #10]
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d004      	beq.n	8015846 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	4618      	mov	r0, r3
 8015842:	f000 f923 	bl	8015a8c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	2200      	movs	r2, #0
 801584a:	601a      	str	r2, [r3, #0]
 801584c:	e000      	b.n	8015850 <pbuf_realloc+0xf4>
    return;
 801584e:	bf00      	nop

}
 8015850:	3710      	adds	r7, #16
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}
 8015856:	bf00      	nop
 8015858:	08021a2c 	.word	0x08021a2c
 801585c:	08021b44 	.word	0x08021b44
 8015860:	08021a8c 	.word	0x08021a8c
 8015864:	08021b5c 	.word	0x08021b5c
 8015868:	08021b74 	.word	0x08021b74

0801586c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b086      	sub	sp, #24
 8015870:	af00      	add	r7, sp, #0
 8015872:	60f8      	str	r0, [r7, #12]
 8015874:	60b9      	str	r1, [r7, #8]
 8015876:	4613      	mov	r3, r2
 8015878:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d106      	bne.n	801588e <pbuf_add_header_impl+0x22>
 8015880:	4b2b      	ldr	r3, [pc, #172]	; (8015930 <pbuf_add_header_impl+0xc4>)
 8015882:	f240 12df 	movw	r2, #479	; 0x1df
 8015886:	492b      	ldr	r1, [pc, #172]	; (8015934 <pbuf_add_header_impl+0xc8>)
 8015888:	482b      	ldr	r0, [pc, #172]	; (8015938 <pbuf_add_header_impl+0xcc>)
 801588a:	f009 fb5f 	bl	801ef4c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d003      	beq.n	801589c <pbuf_add_header_impl+0x30>
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801589a:	d301      	bcc.n	80158a0 <pbuf_add_header_impl+0x34>
    return 1;
 801589c:	2301      	movs	r3, #1
 801589e:	e043      	b.n	8015928 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80158a0:	68bb      	ldr	r3, [r7, #8]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d101      	bne.n	80158aa <pbuf_add_header_impl+0x3e>
    return 0;
 80158a6:	2300      	movs	r3, #0
 80158a8:	e03e      	b.n	8015928 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	891a      	ldrh	r2, [r3, #8]
 80158b2:	8a7b      	ldrh	r3, [r7, #18]
 80158b4:	4413      	add	r3, r2
 80158b6:	b29b      	uxth	r3, r3
 80158b8:	8a7a      	ldrh	r2, [r7, #18]
 80158ba:	429a      	cmp	r2, r3
 80158bc:	d901      	bls.n	80158c2 <pbuf_add_header_impl+0x56>
    return 1;
 80158be:	2301      	movs	r3, #1
 80158c0:	e032      	b.n	8015928 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	7b1b      	ldrb	r3, [r3, #12]
 80158c6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80158c8:	8a3b      	ldrh	r3, [r7, #16]
 80158ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d00c      	beq.n	80158ec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	685a      	ldr	r2, [r3, #4]
 80158d6:	68bb      	ldr	r3, [r7, #8]
 80158d8:	425b      	negs	r3, r3
 80158da:	4413      	add	r3, r2
 80158dc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	3310      	adds	r3, #16
 80158e2:	697a      	ldr	r2, [r7, #20]
 80158e4:	429a      	cmp	r2, r3
 80158e6:	d20d      	bcs.n	8015904 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80158e8:	2301      	movs	r3, #1
 80158ea:	e01d      	b.n	8015928 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80158ec:	79fb      	ldrb	r3, [r7, #7]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d006      	beq.n	8015900 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	685a      	ldr	r2, [r3, #4]
 80158f6:	68bb      	ldr	r3, [r7, #8]
 80158f8:	425b      	negs	r3, r3
 80158fa:	4413      	add	r3, r2
 80158fc:	617b      	str	r3, [r7, #20]
 80158fe:	e001      	b.n	8015904 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8015900:	2301      	movs	r3, #1
 8015902:	e011      	b.n	8015928 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	697a      	ldr	r2, [r7, #20]
 8015908:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	895a      	ldrh	r2, [r3, #10]
 801590e:	8a7b      	ldrh	r3, [r7, #18]
 8015910:	4413      	add	r3, r2
 8015912:	b29a      	uxth	r2, r3
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	891a      	ldrh	r2, [r3, #8]
 801591c:	8a7b      	ldrh	r3, [r7, #18]
 801591e:	4413      	add	r3, r2
 8015920:	b29a      	uxth	r2, r3
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	811a      	strh	r2, [r3, #8]


  return 0;
 8015926:	2300      	movs	r3, #0
}
 8015928:	4618      	mov	r0, r3
 801592a:	3718      	adds	r7, #24
 801592c:	46bd      	mov	sp, r7
 801592e:	bd80      	pop	{r7, pc}
 8015930:	08021a2c 	.word	0x08021a2c
 8015934:	08021b90 	.word	0x08021b90
 8015938:	08021a8c 	.word	0x08021a8c

0801593c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b082      	sub	sp, #8
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
 8015944:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8015946:	2200      	movs	r2, #0
 8015948:	6839      	ldr	r1, [r7, #0]
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f7ff ff8e 	bl	801586c <pbuf_add_header_impl>
 8015950:	4603      	mov	r3, r0
}
 8015952:	4618      	mov	r0, r3
 8015954:	3708      	adds	r7, #8
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}
	...

0801595c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801595c:	b580      	push	{r7, lr}
 801595e:	b084      	sub	sp, #16
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
 8015964:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d106      	bne.n	801597a <pbuf_remove_header+0x1e>
 801596c:	4b20      	ldr	r3, [pc, #128]	; (80159f0 <pbuf_remove_header+0x94>)
 801596e:	f240 224b 	movw	r2, #587	; 0x24b
 8015972:	4920      	ldr	r1, [pc, #128]	; (80159f4 <pbuf_remove_header+0x98>)
 8015974:	4820      	ldr	r0, [pc, #128]	; (80159f8 <pbuf_remove_header+0x9c>)
 8015976:	f009 fae9 	bl	801ef4c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d003      	beq.n	8015988 <pbuf_remove_header+0x2c>
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015986:	d301      	bcc.n	801598c <pbuf_remove_header+0x30>
    return 1;
 8015988:	2301      	movs	r3, #1
 801598a:	e02c      	b.n	80159e6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d101      	bne.n	8015996 <pbuf_remove_header+0x3a>
    return 0;
 8015992:	2300      	movs	r3, #0
 8015994:	e027      	b.n	80159e6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	895b      	ldrh	r3, [r3, #10]
 801599e:	89fa      	ldrh	r2, [r7, #14]
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d908      	bls.n	80159b6 <pbuf_remove_header+0x5a>
 80159a4:	4b12      	ldr	r3, [pc, #72]	; (80159f0 <pbuf_remove_header+0x94>)
 80159a6:	f240 2255 	movw	r2, #597	; 0x255
 80159aa:	4914      	ldr	r1, [pc, #80]	; (80159fc <pbuf_remove_header+0xa0>)
 80159ac:	4812      	ldr	r0, [pc, #72]	; (80159f8 <pbuf_remove_header+0x9c>)
 80159ae:	f009 facd 	bl	801ef4c <iprintf>
 80159b2:	2301      	movs	r3, #1
 80159b4:	e017      	b.n	80159e6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	685b      	ldr	r3, [r3, #4]
 80159ba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	685a      	ldr	r2, [r3, #4]
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	441a      	add	r2, r3
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	895a      	ldrh	r2, [r3, #10]
 80159cc:	89fb      	ldrh	r3, [r7, #14]
 80159ce:	1ad3      	subs	r3, r2, r3
 80159d0:	b29a      	uxth	r2, r3
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	891a      	ldrh	r2, [r3, #8]
 80159da:	89fb      	ldrh	r3, [r7, #14]
 80159dc:	1ad3      	subs	r3, r2, r3
 80159de:	b29a      	uxth	r2, r3
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80159e4:	2300      	movs	r3, #0
}
 80159e6:	4618      	mov	r0, r3
 80159e8:	3710      	adds	r7, #16
 80159ea:	46bd      	mov	sp, r7
 80159ec:	bd80      	pop	{r7, pc}
 80159ee:	bf00      	nop
 80159f0:	08021a2c 	.word	0x08021a2c
 80159f4:	08021b90 	.word	0x08021b90
 80159f8:	08021a8c 	.word	0x08021a8c
 80159fc:	08021b9c 	.word	0x08021b9c

08015a00 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b082      	sub	sp, #8
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
 8015a08:	460b      	mov	r3, r1
 8015a0a:	807b      	strh	r3, [r7, #2]
 8015a0c:	4613      	mov	r3, r2
 8015a0e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8015a10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	da08      	bge.n	8015a2a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8015a18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015a1c:	425b      	negs	r3, r3
 8015a1e:	4619      	mov	r1, r3
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f7ff ff9b 	bl	801595c <pbuf_remove_header>
 8015a26:	4603      	mov	r3, r0
 8015a28:	e007      	b.n	8015a3a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8015a2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015a2e:	787a      	ldrb	r2, [r7, #1]
 8015a30:	4619      	mov	r1, r3
 8015a32:	6878      	ldr	r0, [r7, #4]
 8015a34:	f7ff ff1a 	bl	801586c <pbuf_add_header_impl>
 8015a38:	4603      	mov	r3, r0
  }
}
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	3708      	adds	r7, #8
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}

08015a42 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8015a42:	b580      	push	{r7, lr}
 8015a44:	b082      	sub	sp, #8
 8015a46:	af00      	add	r7, sp, #0
 8015a48:	6078      	str	r0, [r7, #4]
 8015a4a:	460b      	mov	r3, r1
 8015a4c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 0);
 8015a4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015a52:	2200      	movs	r2, #0
 8015a54:	4619      	mov	r1, r3
 8015a56:	6878      	ldr	r0, [r7, #4]
 8015a58:	f7ff ffd2 	bl	8015a00 <pbuf_header_impl>
 8015a5c:	4603      	mov	r3, r0
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3708      	adds	r7, #8
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}

08015a66 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015a66:	b580      	push	{r7, lr}
 8015a68:	b082      	sub	sp, #8
 8015a6a:	af00      	add	r7, sp, #0
 8015a6c:	6078      	str	r0, [r7, #4]
 8015a6e:	460b      	mov	r3, r1
 8015a70:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8015a72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015a76:	2201      	movs	r2, #1
 8015a78:	4619      	mov	r1, r3
 8015a7a:	6878      	ldr	r0, [r7, #4]
 8015a7c:	f7ff ffc0 	bl	8015a00 <pbuf_header_impl>
 8015a80:	4603      	mov	r3, r0
}
 8015a82:	4618      	mov	r0, r3
 8015a84:	3708      	adds	r7, #8
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bd80      	pop	{r7, pc}
	...

08015a8c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b088      	sub	sp, #32
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d10b      	bne.n	8015ab2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d106      	bne.n	8015aae <pbuf_free+0x22>
 8015aa0:	4b3b      	ldr	r3, [pc, #236]	; (8015b90 <pbuf_free+0x104>)
 8015aa2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8015aa6:	493b      	ldr	r1, [pc, #236]	; (8015b94 <pbuf_free+0x108>)
 8015aa8:	483b      	ldr	r0, [pc, #236]	; (8015b98 <pbuf_free+0x10c>)
 8015aaa:	f009 fa4f 	bl	801ef4c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015aae:	2300      	movs	r3, #0
 8015ab0:	e069      	b.n	8015b86 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015ab6:	e062      	b.n	8015b7e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8015ab8:	f009 f9c4 	bl	801ee44 <sys_arch_protect>
 8015abc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	7b9b      	ldrb	r3, [r3, #14]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d106      	bne.n	8015ad4 <pbuf_free+0x48>
 8015ac6:	4b32      	ldr	r3, [pc, #200]	; (8015b90 <pbuf_free+0x104>)
 8015ac8:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015acc:	4933      	ldr	r1, [pc, #204]	; (8015b9c <pbuf_free+0x110>)
 8015ace:	4832      	ldr	r0, [pc, #200]	; (8015b98 <pbuf_free+0x10c>)
 8015ad0:	f009 fa3c 	bl	801ef4c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	7b9b      	ldrb	r3, [r3, #14]
 8015ad8:	3b01      	subs	r3, #1
 8015ada:	b2da      	uxtb	r2, r3
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	739a      	strb	r2, [r3, #14]
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	7b9b      	ldrb	r3, [r3, #14]
 8015ae4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8015ae6:	69b8      	ldr	r0, [r7, #24]
 8015ae8:	f009 f9ba 	bl	801ee60 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015aec:	7dfb      	ldrb	r3, [r7, #23]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d143      	bne.n	8015b7a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	7b1b      	ldrb	r3, [r3, #12]
 8015afc:	f003 030f 	and.w	r3, r3, #15
 8015b00:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	7b5b      	ldrb	r3, [r3, #13]
 8015b06:	f003 0302 	and.w	r3, r3, #2
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d011      	beq.n	8015b32 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015b12:	68bb      	ldr	r3, [r7, #8]
 8015b14:	691b      	ldr	r3, [r3, #16]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d106      	bne.n	8015b28 <pbuf_free+0x9c>
 8015b1a:	4b1d      	ldr	r3, [pc, #116]	; (8015b90 <pbuf_free+0x104>)
 8015b1c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8015b20:	491f      	ldr	r1, [pc, #124]	; (8015ba0 <pbuf_free+0x114>)
 8015b22:	481d      	ldr	r0, [pc, #116]	; (8015b98 <pbuf_free+0x10c>)
 8015b24:	f009 fa12 	bl	801ef4c <iprintf>
        pc->custom_free_function(p);
 8015b28:	68bb      	ldr	r3, [r7, #8]
 8015b2a:	691b      	ldr	r3, [r3, #16]
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	4798      	blx	r3
 8015b30:	e01d      	b.n	8015b6e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8015b32:	7bfb      	ldrb	r3, [r7, #15]
 8015b34:	2b02      	cmp	r3, #2
 8015b36:	d104      	bne.n	8015b42 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8015b38:	6879      	ldr	r1, [r7, #4]
 8015b3a:	200c      	movs	r0, #12
 8015b3c:	f7ff f8f0 	bl	8014d20 <memp_free>
 8015b40:	e015      	b.n	8015b6e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8015b42:	7bfb      	ldrb	r3, [r7, #15]
 8015b44:	2b01      	cmp	r3, #1
 8015b46:	d104      	bne.n	8015b52 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8015b48:	6879      	ldr	r1, [r7, #4]
 8015b4a:	200b      	movs	r0, #11
 8015b4c:	f7ff f8e8 	bl	8014d20 <memp_free>
 8015b50:	e00d      	b.n	8015b6e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8015b52:	7bfb      	ldrb	r3, [r7, #15]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d103      	bne.n	8015b60 <pbuf_free+0xd4>
          mem_free(p);
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f7fe fd73 	bl	8014644 <mem_free>
 8015b5e:	e006      	b.n	8015b6e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8015b60:	4b0b      	ldr	r3, [pc, #44]	; (8015b90 <pbuf_free+0x104>)
 8015b62:	f240 320f 	movw	r2, #783	; 0x30f
 8015b66:	490f      	ldr	r1, [pc, #60]	; (8015ba4 <pbuf_free+0x118>)
 8015b68:	480b      	ldr	r0, [pc, #44]	; (8015b98 <pbuf_free+0x10c>)
 8015b6a:	f009 f9ef 	bl	801ef4c <iprintf>
        }
      }
      count++;
 8015b6e:	7ffb      	ldrb	r3, [r7, #31]
 8015b70:	3301      	adds	r3, #1
 8015b72:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8015b74:	693b      	ldr	r3, [r7, #16]
 8015b76:	607b      	str	r3, [r7, #4]
 8015b78:	e001      	b.n	8015b7e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d199      	bne.n	8015ab8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8015b84:	7ffb      	ldrb	r3, [r7, #31]
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	3720      	adds	r7, #32
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}
 8015b8e:	bf00      	nop
 8015b90:	08021a2c 	.word	0x08021a2c
 8015b94:	08021b90 	.word	0x08021b90
 8015b98:	08021a8c 	.word	0x08021a8c
 8015b9c:	08021bbc 	.word	0x08021bbc
 8015ba0:	08021bd4 	.word	0x08021bd4
 8015ba4:	08021bf8 	.word	0x08021bf8

08015ba8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8015ba8:	b480      	push	{r7}
 8015baa:	b085      	sub	sp, #20
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8015bb4:	e005      	b.n	8015bc2 <pbuf_clen+0x1a>
    ++len;
 8015bb6:	89fb      	ldrh	r3, [r7, #14]
 8015bb8:	3301      	adds	r3, #1
 8015bba:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d1f6      	bne.n	8015bb6 <pbuf_clen+0xe>
  }
  return len;
 8015bc8:	89fb      	ldrh	r3, [r7, #14]
}
 8015bca:	4618      	mov	r0, r3
 8015bcc:	3714      	adds	r7, #20
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd4:	4770      	bx	lr
	...

08015bd8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b084      	sub	sp, #16
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d016      	beq.n	8015c14 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8015be6:	f009 f92d 	bl	801ee44 <sys_arch_protect>
 8015bea:	60f8      	str	r0, [r7, #12]
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	7b9b      	ldrb	r3, [r3, #14]
 8015bf0:	3301      	adds	r3, #1
 8015bf2:	b2da      	uxtb	r2, r3
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	739a      	strb	r2, [r3, #14]
 8015bf8:	68f8      	ldr	r0, [r7, #12]
 8015bfa:	f009 f931 	bl	801ee60 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	7b9b      	ldrb	r3, [r3, #14]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d106      	bne.n	8015c14 <pbuf_ref+0x3c>
 8015c06:	4b05      	ldr	r3, [pc, #20]	; (8015c1c <pbuf_ref+0x44>)
 8015c08:	f240 3242 	movw	r2, #834	; 0x342
 8015c0c:	4904      	ldr	r1, [pc, #16]	; (8015c20 <pbuf_ref+0x48>)
 8015c0e:	4805      	ldr	r0, [pc, #20]	; (8015c24 <pbuf_ref+0x4c>)
 8015c10:	f009 f99c 	bl	801ef4c <iprintf>
  }
}
 8015c14:	bf00      	nop
 8015c16:	3710      	adds	r7, #16
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	bd80      	pop	{r7, pc}
 8015c1c:	08021a2c 	.word	0x08021a2c
 8015c20:	08021c0c 	.word	0x08021c0c
 8015c24:	08021a8c 	.word	0x08021a8c

08015c28 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b084      	sub	sp, #16
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
 8015c30:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d002      	beq.n	8015c3e <pbuf_cat+0x16>
 8015c38:	683b      	ldr	r3, [r7, #0]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d107      	bne.n	8015c4e <pbuf_cat+0x26>
 8015c3e:	4b20      	ldr	r3, [pc, #128]	; (8015cc0 <pbuf_cat+0x98>)
 8015c40:	f240 3259 	movw	r2, #857	; 0x359
 8015c44:	491f      	ldr	r1, [pc, #124]	; (8015cc4 <pbuf_cat+0x9c>)
 8015c46:	4820      	ldr	r0, [pc, #128]	; (8015cc8 <pbuf_cat+0xa0>)
 8015c48:	f009 f980 	bl	801ef4c <iprintf>
 8015c4c:	e034      	b.n	8015cb8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	60fb      	str	r3, [r7, #12]
 8015c52:	e00a      	b.n	8015c6a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	891a      	ldrh	r2, [r3, #8]
 8015c58:	683b      	ldr	r3, [r7, #0]
 8015c5a:	891b      	ldrh	r3, [r3, #8]
 8015c5c:	4413      	add	r3, r2
 8015c5e:	b29a      	uxth	r2, r3
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	60fb      	str	r3, [r7, #12]
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d1f0      	bne.n	8015c54 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	891a      	ldrh	r2, [r3, #8]
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	895b      	ldrh	r3, [r3, #10]
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	d006      	beq.n	8015c8c <pbuf_cat+0x64>
 8015c7e:	4b10      	ldr	r3, [pc, #64]	; (8015cc0 <pbuf_cat+0x98>)
 8015c80:	f240 3262 	movw	r2, #866	; 0x362
 8015c84:	4911      	ldr	r1, [pc, #68]	; (8015ccc <pbuf_cat+0xa4>)
 8015c86:	4810      	ldr	r0, [pc, #64]	; (8015cc8 <pbuf_cat+0xa0>)
 8015c88:	f009 f960 	bl	801ef4c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d006      	beq.n	8015ca2 <pbuf_cat+0x7a>
 8015c94:	4b0a      	ldr	r3, [pc, #40]	; (8015cc0 <pbuf_cat+0x98>)
 8015c96:	f240 3263 	movw	r2, #867	; 0x363
 8015c9a:	490d      	ldr	r1, [pc, #52]	; (8015cd0 <pbuf_cat+0xa8>)
 8015c9c:	480a      	ldr	r0, [pc, #40]	; (8015cc8 <pbuf_cat+0xa0>)
 8015c9e:	f009 f955 	bl	801ef4c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	891a      	ldrh	r2, [r3, #8]
 8015ca6:	683b      	ldr	r3, [r7, #0]
 8015ca8:	891b      	ldrh	r3, [r3, #8]
 8015caa:	4413      	add	r3, r2
 8015cac:	b29a      	uxth	r2, r3
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	683a      	ldr	r2, [r7, #0]
 8015cb6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8015cb8:	3710      	adds	r7, #16
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	bd80      	pop	{r7, pc}
 8015cbe:	bf00      	nop
 8015cc0:	08021a2c 	.word	0x08021a2c
 8015cc4:	08021c20 	.word	0x08021c20
 8015cc8:	08021a8c 	.word	0x08021a8c
 8015ccc:	08021c58 	.word	0x08021c58
 8015cd0:	08021c88 	.word	0x08021c88

08015cd4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b086      	sub	sp, #24
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
 8015cdc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8015cde:	2300      	movs	r3, #0
 8015ce0:	617b      	str	r3, [r7, #20]
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d008      	beq.n	8015cfe <pbuf_copy+0x2a>
 8015cec:	683b      	ldr	r3, [r7, #0]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d005      	beq.n	8015cfe <pbuf_copy+0x2a>
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	891a      	ldrh	r2, [r3, #8]
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	891b      	ldrh	r3, [r3, #8]
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	d209      	bcs.n	8015d12 <pbuf_copy+0x3e>
 8015cfe:	4b57      	ldr	r3, [pc, #348]	; (8015e5c <pbuf_copy+0x188>)
 8015d00:	f240 32c9 	movw	r2, #969	; 0x3c9
 8015d04:	4956      	ldr	r1, [pc, #344]	; (8015e60 <pbuf_copy+0x18c>)
 8015d06:	4857      	ldr	r0, [pc, #348]	; (8015e64 <pbuf_copy+0x190>)
 8015d08:	f009 f920 	bl	801ef4c <iprintf>
 8015d0c:	f06f 030f 	mvn.w	r3, #15
 8015d10:	e09f      	b.n	8015e52 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	895b      	ldrh	r3, [r3, #10]
 8015d16:	461a      	mov	r2, r3
 8015d18:	697b      	ldr	r3, [r7, #20]
 8015d1a:	1ad2      	subs	r2, r2, r3
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	895b      	ldrh	r3, [r3, #10]
 8015d20:	4619      	mov	r1, r3
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	1acb      	subs	r3, r1, r3
 8015d26:	429a      	cmp	r2, r3
 8015d28:	d306      	bcc.n	8015d38 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8015d2a:	683b      	ldr	r3, [r7, #0]
 8015d2c:	895b      	ldrh	r3, [r3, #10]
 8015d2e:	461a      	mov	r2, r3
 8015d30:	693b      	ldr	r3, [r7, #16]
 8015d32:	1ad3      	subs	r3, r2, r3
 8015d34:	60fb      	str	r3, [r7, #12]
 8015d36:	e005      	b.n	8015d44 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	895b      	ldrh	r3, [r3, #10]
 8015d3c:	461a      	mov	r2, r3
 8015d3e:	697b      	ldr	r3, [r7, #20]
 8015d40:	1ad3      	subs	r3, r2, r3
 8015d42:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	685a      	ldr	r2, [r3, #4]
 8015d48:	697b      	ldr	r3, [r7, #20]
 8015d4a:	18d0      	adds	r0, r2, r3
 8015d4c:	683b      	ldr	r3, [r7, #0]
 8015d4e:	685a      	ldr	r2, [r3, #4]
 8015d50:	693b      	ldr	r3, [r7, #16]
 8015d52:	4413      	add	r3, r2
 8015d54:	68fa      	ldr	r2, [r7, #12]
 8015d56:	4619      	mov	r1, r3
 8015d58:	f009 f8c8 	bl	801eeec <memcpy>
    offset_to += len;
 8015d5c:	697a      	ldr	r2, [r7, #20]
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	4413      	add	r3, r2
 8015d62:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8015d64:	693a      	ldr	r2, [r7, #16]
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	4413      	add	r3, r2
 8015d6a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	895b      	ldrh	r3, [r3, #10]
 8015d70:	461a      	mov	r2, r3
 8015d72:	697b      	ldr	r3, [r7, #20]
 8015d74:	4293      	cmp	r3, r2
 8015d76:	d906      	bls.n	8015d86 <pbuf_copy+0xb2>
 8015d78:	4b38      	ldr	r3, [pc, #224]	; (8015e5c <pbuf_copy+0x188>)
 8015d7a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8015d7e:	493a      	ldr	r1, [pc, #232]	; (8015e68 <pbuf_copy+0x194>)
 8015d80:	4838      	ldr	r0, [pc, #224]	; (8015e64 <pbuf_copy+0x190>)
 8015d82:	f009 f8e3 	bl	801ef4c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015d86:	683b      	ldr	r3, [r7, #0]
 8015d88:	895b      	ldrh	r3, [r3, #10]
 8015d8a:	461a      	mov	r2, r3
 8015d8c:	693b      	ldr	r3, [r7, #16]
 8015d8e:	4293      	cmp	r3, r2
 8015d90:	d906      	bls.n	8015da0 <pbuf_copy+0xcc>
 8015d92:	4b32      	ldr	r3, [pc, #200]	; (8015e5c <pbuf_copy+0x188>)
 8015d94:	f240 32da 	movw	r2, #986	; 0x3da
 8015d98:	4934      	ldr	r1, [pc, #208]	; (8015e6c <pbuf_copy+0x198>)
 8015d9a:	4832      	ldr	r0, [pc, #200]	; (8015e64 <pbuf_copy+0x190>)
 8015d9c:	f009 f8d6 	bl	801ef4c <iprintf>
    if (offset_from >= p_from->len) {
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	895b      	ldrh	r3, [r3, #10]
 8015da4:	461a      	mov	r2, r3
 8015da6:	693b      	ldr	r3, [r7, #16]
 8015da8:	4293      	cmp	r3, r2
 8015daa:	d304      	bcc.n	8015db6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015dac:	2300      	movs	r3, #0
 8015dae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8015db0:	683b      	ldr	r3, [r7, #0]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	895b      	ldrh	r3, [r3, #10]
 8015dba:	461a      	mov	r2, r3
 8015dbc:	697b      	ldr	r3, [r7, #20]
 8015dbe:	4293      	cmp	r3, r2
 8015dc0:	d114      	bne.n	8015dec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d10c      	bne.n	8015dec <pbuf_copy+0x118>
 8015dd2:	683b      	ldr	r3, [r7, #0]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d009      	beq.n	8015dec <pbuf_copy+0x118>
 8015dd8:	4b20      	ldr	r3, [pc, #128]	; (8015e5c <pbuf_copy+0x188>)
 8015dda:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8015dde:	4924      	ldr	r1, [pc, #144]	; (8015e70 <pbuf_copy+0x19c>)
 8015de0:	4820      	ldr	r0, [pc, #128]	; (8015e64 <pbuf_copy+0x190>)
 8015de2:	f009 f8b3 	bl	801ef4c <iprintf>
 8015de6:	f06f 030f 	mvn.w	r3, #15
 8015dea:	e032      	b.n	8015e52 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8015dec:	683b      	ldr	r3, [r7, #0]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d013      	beq.n	8015e1a <pbuf_copy+0x146>
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	895a      	ldrh	r2, [r3, #10]
 8015df6:	683b      	ldr	r3, [r7, #0]
 8015df8:	891b      	ldrh	r3, [r3, #8]
 8015dfa:	429a      	cmp	r2, r3
 8015dfc:	d10d      	bne.n	8015e1a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d009      	beq.n	8015e1a <pbuf_copy+0x146>
 8015e06:	4b15      	ldr	r3, [pc, #84]	; (8015e5c <pbuf_copy+0x188>)
 8015e08:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8015e0c:	4919      	ldr	r1, [pc, #100]	; (8015e74 <pbuf_copy+0x1a0>)
 8015e0e:	4815      	ldr	r0, [pc, #84]	; (8015e64 <pbuf_copy+0x190>)
 8015e10:	f009 f89c 	bl	801ef4c <iprintf>
 8015e14:	f06f 0305 	mvn.w	r3, #5
 8015e18:	e01b      	b.n	8015e52 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d013      	beq.n	8015e48 <pbuf_copy+0x174>
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	895a      	ldrh	r2, [r3, #10]
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	891b      	ldrh	r3, [r3, #8]
 8015e28:	429a      	cmp	r2, r3
 8015e2a:	d10d      	bne.n	8015e48 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d009      	beq.n	8015e48 <pbuf_copy+0x174>
 8015e34:	4b09      	ldr	r3, [pc, #36]	; (8015e5c <pbuf_copy+0x188>)
 8015e36:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8015e3a:	490e      	ldr	r1, [pc, #56]	; (8015e74 <pbuf_copy+0x1a0>)
 8015e3c:	4809      	ldr	r0, [pc, #36]	; (8015e64 <pbuf_copy+0x190>)
 8015e3e:	f009 f885 	bl	801ef4c <iprintf>
 8015e42:	f06f 0305 	mvn.w	r3, #5
 8015e46:	e004      	b.n	8015e52 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8015e48:	683b      	ldr	r3, [r7, #0]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	f47f af61 	bne.w	8015d12 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8015e50:	2300      	movs	r3, #0
}
 8015e52:	4618      	mov	r0, r3
 8015e54:	3718      	adds	r7, #24
 8015e56:	46bd      	mov	sp, r7
 8015e58:	bd80      	pop	{r7, pc}
 8015e5a:	bf00      	nop
 8015e5c:	08021a2c 	.word	0x08021a2c
 8015e60:	08021cd4 	.word	0x08021cd4
 8015e64:	08021a8c 	.word	0x08021a8c
 8015e68:	08021d04 	.word	0x08021d04
 8015e6c:	08021d1c 	.word	0x08021d1c
 8015e70:	08021d38 	.word	0x08021d38
 8015e74:	08021d48 	.word	0x08021d48

08015e78 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b088      	sub	sp, #32
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	60f8      	str	r0, [r7, #12]
 8015e80:	60b9      	str	r1, [r7, #8]
 8015e82:	4611      	mov	r1, r2
 8015e84:	461a      	mov	r2, r3
 8015e86:	460b      	mov	r3, r1
 8015e88:	80fb      	strh	r3, [r7, #6]
 8015e8a:	4613      	mov	r3, r2
 8015e8c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8015e92:	2300      	movs	r3, #0
 8015e94:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d108      	bne.n	8015eae <pbuf_copy_partial+0x36>
 8015e9c:	4b2b      	ldr	r3, [pc, #172]	; (8015f4c <pbuf_copy_partial+0xd4>)
 8015e9e:	f240 420a 	movw	r2, #1034	; 0x40a
 8015ea2:	492b      	ldr	r1, [pc, #172]	; (8015f50 <pbuf_copy_partial+0xd8>)
 8015ea4:	482b      	ldr	r0, [pc, #172]	; (8015f54 <pbuf_copy_partial+0xdc>)
 8015ea6:	f009 f851 	bl	801ef4c <iprintf>
 8015eaa:	2300      	movs	r3, #0
 8015eac:	e04a      	b.n	8015f44 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8015eae:	68bb      	ldr	r3, [r7, #8]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d108      	bne.n	8015ec6 <pbuf_copy_partial+0x4e>
 8015eb4:	4b25      	ldr	r3, [pc, #148]	; (8015f4c <pbuf_copy_partial+0xd4>)
 8015eb6:	f240 420b 	movw	r2, #1035	; 0x40b
 8015eba:	4927      	ldr	r1, [pc, #156]	; (8015f58 <pbuf_copy_partial+0xe0>)
 8015ebc:	4825      	ldr	r0, [pc, #148]	; (8015f54 <pbuf_copy_partial+0xdc>)
 8015ebe:	f009 f845 	bl	801ef4c <iprintf>
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	e03e      	b.n	8015f44 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	61fb      	str	r3, [r7, #28]
 8015eca:	e034      	b.n	8015f36 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8015ecc:	88bb      	ldrh	r3, [r7, #4]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d00a      	beq.n	8015ee8 <pbuf_copy_partial+0x70>
 8015ed2:	69fb      	ldr	r3, [r7, #28]
 8015ed4:	895b      	ldrh	r3, [r3, #10]
 8015ed6:	88ba      	ldrh	r2, [r7, #4]
 8015ed8:	429a      	cmp	r2, r3
 8015eda:	d305      	bcc.n	8015ee8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8015edc:	69fb      	ldr	r3, [r7, #28]
 8015ede:	895b      	ldrh	r3, [r3, #10]
 8015ee0:	88ba      	ldrh	r2, [r7, #4]
 8015ee2:	1ad3      	subs	r3, r2, r3
 8015ee4:	80bb      	strh	r3, [r7, #4]
 8015ee6:	e023      	b.n	8015f30 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8015ee8:	69fb      	ldr	r3, [r7, #28]
 8015eea:	895a      	ldrh	r2, [r3, #10]
 8015eec:	88bb      	ldrh	r3, [r7, #4]
 8015eee:	1ad3      	subs	r3, r2, r3
 8015ef0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8015ef2:	8b3a      	ldrh	r2, [r7, #24]
 8015ef4:	88fb      	ldrh	r3, [r7, #6]
 8015ef6:	429a      	cmp	r2, r3
 8015ef8:	d901      	bls.n	8015efe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8015efa:	88fb      	ldrh	r3, [r7, #6]
 8015efc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8015efe:	8b7b      	ldrh	r3, [r7, #26]
 8015f00:	68ba      	ldr	r2, [r7, #8]
 8015f02:	18d0      	adds	r0, r2, r3
 8015f04:	69fb      	ldr	r3, [r7, #28]
 8015f06:	685a      	ldr	r2, [r3, #4]
 8015f08:	88bb      	ldrh	r3, [r7, #4]
 8015f0a:	4413      	add	r3, r2
 8015f0c:	8b3a      	ldrh	r2, [r7, #24]
 8015f0e:	4619      	mov	r1, r3
 8015f10:	f008 ffec 	bl	801eeec <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015f14:	8afa      	ldrh	r2, [r7, #22]
 8015f16:	8b3b      	ldrh	r3, [r7, #24]
 8015f18:	4413      	add	r3, r2
 8015f1a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8015f1c:	8b7a      	ldrh	r2, [r7, #26]
 8015f1e:	8b3b      	ldrh	r3, [r7, #24]
 8015f20:	4413      	add	r3, r2
 8015f22:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015f24:	88fa      	ldrh	r2, [r7, #6]
 8015f26:	8b3b      	ldrh	r3, [r7, #24]
 8015f28:	1ad3      	subs	r3, r2, r3
 8015f2a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015f30:	69fb      	ldr	r3, [r7, #28]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	61fb      	str	r3, [r7, #28]
 8015f36:	88fb      	ldrh	r3, [r7, #6]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d002      	beq.n	8015f42 <pbuf_copy_partial+0xca>
 8015f3c:	69fb      	ldr	r3, [r7, #28]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d1c4      	bne.n	8015ecc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8015f42:	8afb      	ldrh	r3, [r7, #22]
}
 8015f44:	4618      	mov	r0, r3
 8015f46:	3720      	adds	r7, #32
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	bd80      	pop	{r7, pc}
 8015f4c:	08021a2c 	.word	0x08021a2c
 8015f50:	08021d74 	.word	0x08021d74
 8015f54:	08021a8c 	.word	0x08021a8c
 8015f58:	08021d94 	.word	0x08021d94

08015f5c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b084      	sub	sp, #16
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	4603      	mov	r3, r0
 8015f64:	603a      	str	r2, [r7, #0]
 8015f66:	71fb      	strb	r3, [r7, #7]
 8015f68:	460b      	mov	r3, r1
 8015f6a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	8919      	ldrh	r1, [r3, #8]
 8015f70:	88ba      	ldrh	r2, [r7, #4]
 8015f72:	79fb      	ldrb	r3, [r7, #7]
 8015f74:	4618      	mov	r0, r3
 8015f76:	f7ff fa93 	bl	80154a0 <pbuf_alloc>
 8015f7a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d101      	bne.n	8015f86 <pbuf_clone+0x2a>
    return NULL;
 8015f82:	2300      	movs	r3, #0
 8015f84:	e011      	b.n	8015faa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8015f86:	6839      	ldr	r1, [r7, #0]
 8015f88:	68f8      	ldr	r0, [r7, #12]
 8015f8a:	f7ff fea3 	bl	8015cd4 <pbuf_copy>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8015f92:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d006      	beq.n	8015fa8 <pbuf_clone+0x4c>
 8015f9a:	4b06      	ldr	r3, [pc, #24]	; (8015fb4 <pbuf_clone+0x58>)
 8015f9c:	f240 5224 	movw	r2, #1316	; 0x524
 8015fa0:	4905      	ldr	r1, [pc, #20]	; (8015fb8 <pbuf_clone+0x5c>)
 8015fa2:	4806      	ldr	r0, [pc, #24]	; (8015fbc <pbuf_clone+0x60>)
 8015fa4:	f008 ffd2 	bl	801ef4c <iprintf>
  return q;
 8015fa8:	68fb      	ldr	r3, [r7, #12]
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	3710      	adds	r7, #16
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}
 8015fb2:	bf00      	nop
 8015fb4:	08021a2c 	.word	0x08021a2c
 8015fb8:	08021ea0 	.word	0x08021ea0
 8015fbc:	08021a8c 	.word	0x08021a8c

08015fc0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015fc4:	f009 f850 	bl	801f068 <rand>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	b29b      	uxth	r3, r3
 8015fcc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015fd0:	b29b      	uxth	r3, r3
 8015fd2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015fd6:	b29a      	uxth	r2, r3
 8015fd8:	4b01      	ldr	r3, [pc, #4]	; (8015fe0 <tcp_init+0x20>)
 8015fda:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015fdc:	bf00      	nop
 8015fde:	bd80      	pop	{r7, pc}
 8015fe0:	20000036 	.word	0x20000036

08015fe4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b082      	sub	sp, #8
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	7d1b      	ldrb	r3, [r3, #20]
 8015ff0:	2b01      	cmp	r3, #1
 8015ff2:	d105      	bne.n	8016000 <tcp_free+0x1c>
 8015ff4:	4b06      	ldr	r3, [pc, #24]	; (8016010 <tcp_free+0x2c>)
 8015ff6:	22d4      	movs	r2, #212	; 0xd4
 8015ff8:	4906      	ldr	r1, [pc, #24]	; (8016014 <tcp_free+0x30>)
 8015ffa:	4807      	ldr	r0, [pc, #28]	; (8016018 <tcp_free+0x34>)
 8015ffc:	f008 ffa6 	bl	801ef4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016000:	6879      	ldr	r1, [r7, #4]
 8016002:	2001      	movs	r0, #1
 8016004:	f7fe fe8c 	bl	8014d20 <memp_free>
}
 8016008:	bf00      	nop
 801600a:	3708      	adds	r7, #8
 801600c:	46bd      	mov	sp, r7
 801600e:	bd80      	pop	{r7, pc}
 8016010:	08021f2c 	.word	0x08021f2c
 8016014:	08021f5c 	.word	0x08021f5c
 8016018:	08021f70 	.word	0x08021f70

0801601c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b082      	sub	sp, #8
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	7d1b      	ldrb	r3, [r3, #20]
 8016028:	2b01      	cmp	r3, #1
 801602a:	d105      	bne.n	8016038 <tcp_free_listen+0x1c>
 801602c:	4b06      	ldr	r3, [pc, #24]	; (8016048 <tcp_free_listen+0x2c>)
 801602e:	22df      	movs	r2, #223	; 0xdf
 8016030:	4906      	ldr	r1, [pc, #24]	; (801604c <tcp_free_listen+0x30>)
 8016032:	4807      	ldr	r0, [pc, #28]	; (8016050 <tcp_free_listen+0x34>)
 8016034:	f008 ff8a 	bl	801ef4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016038:	6879      	ldr	r1, [r7, #4]
 801603a:	2002      	movs	r0, #2
 801603c:	f7fe fe70 	bl	8014d20 <memp_free>
}
 8016040:	bf00      	nop
 8016042:	3708      	adds	r7, #8
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}
 8016048:	08021f2c 	.word	0x08021f2c
 801604c:	08021f98 	.word	0x08021f98
 8016050:	08021f70 	.word	0x08021f70

08016054 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8016058:	f001 f85c 	bl	8017114 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801605c:	4b07      	ldr	r3, [pc, #28]	; (801607c <tcp_tmr+0x28>)
 801605e:	781b      	ldrb	r3, [r3, #0]
 8016060:	3301      	adds	r3, #1
 8016062:	b2da      	uxtb	r2, r3
 8016064:	4b05      	ldr	r3, [pc, #20]	; (801607c <tcp_tmr+0x28>)
 8016066:	701a      	strb	r2, [r3, #0]
 8016068:	4b04      	ldr	r3, [pc, #16]	; (801607c <tcp_tmr+0x28>)
 801606a:	781b      	ldrb	r3, [r3, #0]
 801606c:	f003 0301 	and.w	r3, r3, #1
 8016070:	2b00      	cmp	r3, #0
 8016072:	d001      	beq.n	8016078 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8016074:	f000 fd0e 	bl	8016a94 <tcp_slowtmr>
  }
}
 8016078:	bf00      	nop
 801607a:	bd80      	pop	{r7, pc}
 801607c:	2000c7f9 	.word	0x2000c7f9

08016080 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b084      	sub	sp, #16
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
 8016088:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801608a:	683b      	ldr	r3, [r7, #0]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d105      	bne.n	801609c <tcp_remove_listener+0x1c>
 8016090:	4b0d      	ldr	r3, [pc, #52]	; (80160c8 <tcp_remove_listener+0x48>)
 8016092:	22ff      	movs	r2, #255	; 0xff
 8016094:	490d      	ldr	r1, [pc, #52]	; (80160cc <tcp_remove_listener+0x4c>)
 8016096:	480e      	ldr	r0, [pc, #56]	; (80160d0 <tcp_remove_listener+0x50>)
 8016098:	f008 ff58 	bl	801ef4c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	60fb      	str	r3, [r7, #12]
 80160a0:	e00a      	b.n	80160b8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80160a6:	683a      	ldr	r2, [r7, #0]
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d102      	bne.n	80160b2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	2200      	movs	r2, #0
 80160b0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	68db      	ldr	r3, [r3, #12]
 80160b6:	60fb      	str	r3, [r7, #12]
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d1f1      	bne.n	80160a2 <tcp_remove_listener+0x22>
    }
  }
}
 80160be:	bf00      	nop
 80160c0:	bf00      	nop
 80160c2:	3710      	adds	r7, #16
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bd80      	pop	{r7, pc}
 80160c8:	08021f2c 	.word	0x08021f2c
 80160cc:	08021fb4 	.word	0x08021fb4
 80160d0:	08021f70 	.word	0x08021f70

080160d4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b084      	sub	sp, #16
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d106      	bne.n	80160f0 <tcp_listen_closed+0x1c>
 80160e2:	4b14      	ldr	r3, [pc, #80]	; (8016134 <tcp_listen_closed+0x60>)
 80160e4:	f240 1211 	movw	r2, #273	; 0x111
 80160e8:	4913      	ldr	r1, [pc, #76]	; (8016138 <tcp_listen_closed+0x64>)
 80160ea:	4814      	ldr	r0, [pc, #80]	; (801613c <tcp_listen_closed+0x68>)
 80160ec:	f008 ff2e 	bl	801ef4c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	7d1b      	ldrb	r3, [r3, #20]
 80160f4:	2b01      	cmp	r3, #1
 80160f6:	d006      	beq.n	8016106 <tcp_listen_closed+0x32>
 80160f8:	4b0e      	ldr	r3, [pc, #56]	; (8016134 <tcp_listen_closed+0x60>)
 80160fa:	f44f 7289 	mov.w	r2, #274	; 0x112
 80160fe:	4910      	ldr	r1, [pc, #64]	; (8016140 <tcp_listen_closed+0x6c>)
 8016100:	480e      	ldr	r0, [pc, #56]	; (801613c <tcp_listen_closed+0x68>)
 8016102:	f008 ff23 	bl	801ef4c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016106:	2301      	movs	r3, #1
 8016108:	60fb      	str	r3, [r7, #12]
 801610a:	e00b      	b.n	8016124 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801610c:	4a0d      	ldr	r2, [pc, #52]	; (8016144 <tcp_listen_closed+0x70>)
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	6879      	ldr	r1, [r7, #4]
 8016118:	4618      	mov	r0, r3
 801611a:	f7ff ffb1 	bl	8016080 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	3301      	adds	r3, #1
 8016122:	60fb      	str	r3, [r7, #12]
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	2b03      	cmp	r3, #3
 8016128:	d9f0      	bls.n	801610c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801612a:	bf00      	nop
 801612c:	bf00      	nop
 801612e:	3710      	adds	r7, #16
 8016130:	46bd      	mov	sp, r7
 8016132:	bd80      	pop	{r7, pc}
 8016134:	08021f2c 	.word	0x08021f2c
 8016138:	08021fdc 	.word	0x08021fdc
 801613c:	08021f70 	.word	0x08021f70
 8016140:	08021fe8 	.word	0x08021fe8
 8016144:	0807ac58 	.word	0x0807ac58

08016148 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8016148:	b5b0      	push	{r4, r5, r7, lr}
 801614a:	b088      	sub	sp, #32
 801614c:	af04      	add	r7, sp, #16
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	460b      	mov	r3, r1
 8016152:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d106      	bne.n	8016168 <tcp_close_shutdown+0x20>
 801615a:	4b63      	ldr	r3, [pc, #396]	; (80162e8 <tcp_close_shutdown+0x1a0>)
 801615c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8016160:	4962      	ldr	r1, [pc, #392]	; (80162ec <tcp_close_shutdown+0x1a4>)
 8016162:	4863      	ldr	r0, [pc, #396]	; (80162f0 <tcp_close_shutdown+0x1a8>)
 8016164:	f008 fef2 	bl	801ef4c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8016168:	78fb      	ldrb	r3, [r7, #3]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d066      	beq.n	801623c <tcp_close_shutdown+0xf4>
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	7d1b      	ldrb	r3, [r3, #20]
 8016172:	2b04      	cmp	r3, #4
 8016174:	d003      	beq.n	801617e <tcp_close_shutdown+0x36>
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	7d1b      	ldrb	r3, [r3, #20]
 801617a:	2b07      	cmp	r3, #7
 801617c:	d15e      	bne.n	801623c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016182:	2b00      	cmp	r3, #0
 8016184:	d104      	bne.n	8016190 <tcp_close_shutdown+0x48>
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801618a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801618e:	d055      	beq.n	801623c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	8b5b      	ldrh	r3, [r3, #26]
 8016194:	f003 0310 	and.w	r3, r3, #16
 8016198:	2b00      	cmp	r3, #0
 801619a:	d106      	bne.n	80161aa <tcp_close_shutdown+0x62>
 801619c:	4b52      	ldr	r3, [pc, #328]	; (80162e8 <tcp_close_shutdown+0x1a0>)
 801619e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80161a2:	4954      	ldr	r1, [pc, #336]	; (80162f4 <tcp_close_shutdown+0x1ac>)
 80161a4:	4852      	ldr	r0, [pc, #328]	; (80162f0 <tcp_close_shutdown+0x1a8>)
 80161a6:	f008 fed1 	bl	801ef4c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80161b2:	687d      	ldr	r5, [r7, #4]
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	3304      	adds	r3, #4
 80161b8:	687a      	ldr	r2, [r7, #4]
 80161ba:	8ad2      	ldrh	r2, [r2, #22]
 80161bc:	6879      	ldr	r1, [r7, #4]
 80161be:	8b09      	ldrh	r1, [r1, #24]
 80161c0:	9102      	str	r1, [sp, #8]
 80161c2:	9201      	str	r2, [sp, #4]
 80161c4:	9300      	str	r3, [sp, #0]
 80161c6:	462b      	mov	r3, r5
 80161c8:	4622      	mov	r2, r4
 80161ca:	4601      	mov	r1, r0
 80161cc:	6878      	ldr	r0, [r7, #4]
 80161ce:	f005 fd8b 	bl	801bce8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80161d2:	6878      	ldr	r0, [r7, #4]
 80161d4:	f001 fb6c 	bl	80178b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80161d8:	4b47      	ldr	r3, [pc, #284]	; (80162f8 <tcp_close_shutdown+0x1b0>)
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	687a      	ldr	r2, [r7, #4]
 80161de:	429a      	cmp	r2, r3
 80161e0:	d105      	bne.n	80161ee <tcp_close_shutdown+0xa6>
 80161e2:	4b45      	ldr	r3, [pc, #276]	; (80162f8 <tcp_close_shutdown+0x1b0>)
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	68db      	ldr	r3, [r3, #12]
 80161e8:	4a43      	ldr	r2, [pc, #268]	; (80162f8 <tcp_close_shutdown+0x1b0>)
 80161ea:	6013      	str	r3, [r2, #0]
 80161ec:	e013      	b.n	8016216 <tcp_close_shutdown+0xce>
 80161ee:	4b42      	ldr	r3, [pc, #264]	; (80162f8 <tcp_close_shutdown+0x1b0>)
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	60fb      	str	r3, [r7, #12]
 80161f4:	e00c      	b.n	8016210 <tcp_close_shutdown+0xc8>
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	68db      	ldr	r3, [r3, #12]
 80161fa:	687a      	ldr	r2, [r7, #4]
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d104      	bne.n	801620a <tcp_close_shutdown+0xc2>
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	68da      	ldr	r2, [r3, #12]
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	60da      	str	r2, [r3, #12]
 8016208:	e005      	b.n	8016216 <tcp_close_shutdown+0xce>
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	68db      	ldr	r3, [r3, #12]
 801620e:	60fb      	str	r3, [r7, #12]
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d1ef      	bne.n	80161f6 <tcp_close_shutdown+0xae>
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2200      	movs	r2, #0
 801621a:	60da      	str	r2, [r3, #12]
 801621c:	4b37      	ldr	r3, [pc, #220]	; (80162fc <tcp_close_shutdown+0x1b4>)
 801621e:	2201      	movs	r2, #1
 8016220:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8016222:	4b37      	ldr	r3, [pc, #220]	; (8016300 <tcp_close_shutdown+0x1b8>)
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	687a      	ldr	r2, [r7, #4]
 8016228:	429a      	cmp	r2, r3
 801622a:	d102      	bne.n	8016232 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801622c:	f004 f800 	bl	801a230 <tcp_trigger_input_pcb_close>
 8016230:	e002      	b.n	8016238 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8016232:	6878      	ldr	r0, [r7, #4]
 8016234:	f7ff fed6 	bl	8015fe4 <tcp_free>
      }
      return ERR_OK;
 8016238:	2300      	movs	r3, #0
 801623a:	e050      	b.n	80162de <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	7d1b      	ldrb	r3, [r3, #20]
 8016240:	2b02      	cmp	r3, #2
 8016242:	d03b      	beq.n	80162bc <tcp_close_shutdown+0x174>
 8016244:	2b02      	cmp	r3, #2
 8016246:	dc44      	bgt.n	80162d2 <tcp_close_shutdown+0x18a>
 8016248:	2b00      	cmp	r3, #0
 801624a:	d002      	beq.n	8016252 <tcp_close_shutdown+0x10a>
 801624c:	2b01      	cmp	r3, #1
 801624e:	d02a      	beq.n	80162a6 <tcp_close_shutdown+0x15e>
 8016250:	e03f      	b.n	80162d2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	8adb      	ldrh	r3, [r3, #22]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d021      	beq.n	801629e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801625a:	4b2a      	ldr	r3, [pc, #168]	; (8016304 <tcp_close_shutdown+0x1bc>)
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	687a      	ldr	r2, [r7, #4]
 8016260:	429a      	cmp	r2, r3
 8016262:	d105      	bne.n	8016270 <tcp_close_shutdown+0x128>
 8016264:	4b27      	ldr	r3, [pc, #156]	; (8016304 <tcp_close_shutdown+0x1bc>)
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	68db      	ldr	r3, [r3, #12]
 801626a:	4a26      	ldr	r2, [pc, #152]	; (8016304 <tcp_close_shutdown+0x1bc>)
 801626c:	6013      	str	r3, [r2, #0]
 801626e:	e013      	b.n	8016298 <tcp_close_shutdown+0x150>
 8016270:	4b24      	ldr	r3, [pc, #144]	; (8016304 <tcp_close_shutdown+0x1bc>)
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	60bb      	str	r3, [r7, #8]
 8016276:	e00c      	b.n	8016292 <tcp_close_shutdown+0x14a>
 8016278:	68bb      	ldr	r3, [r7, #8]
 801627a:	68db      	ldr	r3, [r3, #12]
 801627c:	687a      	ldr	r2, [r7, #4]
 801627e:	429a      	cmp	r2, r3
 8016280:	d104      	bne.n	801628c <tcp_close_shutdown+0x144>
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	68da      	ldr	r2, [r3, #12]
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	60da      	str	r2, [r3, #12]
 801628a:	e005      	b.n	8016298 <tcp_close_shutdown+0x150>
 801628c:	68bb      	ldr	r3, [r7, #8]
 801628e:	68db      	ldr	r3, [r3, #12]
 8016290:	60bb      	str	r3, [r7, #8]
 8016292:	68bb      	ldr	r3, [r7, #8]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d1ef      	bne.n	8016278 <tcp_close_shutdown+0x130>
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2200      	movs	r2, #0
 801629c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	f7ff fea0 	bl	8015fe4 <tcp_free>
      break;
 80162a4:	e01a      	b.n	80162dc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80162a6:	6878      	ldr	r0, [r7, #4]
 80162a8:	f7ff ff14 	bl	80160d4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80162ac:	6879      	ldr	r1, [r7, #4]
 80162ae:	4816      	ldr	r0, [pc, #88]	; (8016308 <tcp_close_shutdown+0x1c0>)
 80162b0:	f001 fb4e 	bl	8017950 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	f7ff feb1 	bl	801601c <tcp_free_listen>
      break;
 80162ba:	e00f      	b.n	80162dc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80162bc:	6879      	ldr	r1, [r7, #4]
 80162be:	480e      	ldr	r0, [pc, #56]	; (80162f8 <tcp_close_shutdown+0x1b0>)
 80162c0:	f001 fb46 	bl	8017950 <tcp_pcb_remove>
 80162c4:	4b0d      	ldr	r3, [pc, #52]	; (80162fc <tcp_close_shutdown+0x1b4>)
 80162c6:	2201      	movs	r2, #1
 80162c8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80162ca:	6878      	ldr	r0, [r7, #4]
 80162cc:	f7ff fe8a 	bl	8015fe4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80162d0:	e004      	b.n	80162dc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f000 f81a 	bl	801630c <tcp_close_shutdown_fin>
 80162d8:	4603      	mov	r3, r0
 80162da:	e000      	b.n	80162de <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80162dc:	2300      	movs	r3, #0
}
 80162de:	4618      	mov	r0, r3
 80162e0:	3710      	adds	r7, #16
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bdb0      	pop	{r4, r5, r7, pc}
 80162e6:	bf00      	nop
 80162e8:	08021f2c 	.word	0x08021f2c
 80162ec:	08022000 	.word	0x08022000
 80162f0:	08021f70 	.word	0x08021f70
 80162f4:	08022020 	.word	0x08022020
 80162f8:	2001475c 	.word	0x2001475c
 80162fc:	20014758 	.word	0x20014758
 8016300:	20014770 	.word	0x20014770
 8016304:	20014768 	.word	0x20014768
 8016308:	20014764 	.word	0x20014764

0801630c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b084      	sub	sp, #16
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d106      	bne.n	8016328 <tcp_close_shutdown_fin+0x1c>
 801631a:	4b2e      	ldr	r3, [pc, #184]	; (80163d4 <tcp_close_shutdown_fin+0xc8>)
 801631c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8016320:	492d      	ldr	r1, [pc, #180]	; (80163d8 <tcp_close_shutdown_fin+0xcc>)
 8016322:	482e      	ldr	r0, [pc, #184]	; (80163dc <tcp_close_shutdown_fin+0xd0>)
 8016324:	f008 fe12 	bl	801ef4c <iprintf>

  switch (pcb->state) {
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	7d1b      	ldrb	r3, [r3, #20]
 801632c:	2b07      	cmp	r3, #7
 801632e:	d020      	beq.n	8016372 <tcp_close_shutdown_fin+0x66>
 8016330:	2b07      	cmp	r3, #7
 8016332:	dc2b      	bgt.n	801638c <tcp_close_shutdown_fin+0x80>
 8016334:	2b03      	cmp	r3, #3
 8016336:	d002      	beq.n	801633e <tcp_close_shutdown_fin+0x32>
 8016338:	2b04      	cmp	r3, #4
 801633a:	d00d      	beq.n	8016358 <tcp_close_shutdown_fin+0x4c>
 801633c:	e026      	b.n	801638c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801633e:	6878      	ldr	r0, [r7, #4]
 8016340:	f004 fde0 	bl	801af04 <tcp_send_fin>
 8016344:	4603      	mov	r3, r0
 8016346:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d11f      	bne.n	8016390 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	2205      	movs	r2, #5
 8016354:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016356:	e01b      	b.n	8016390 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	f004 fdd3 	bl	801af04 <tcp_send_fin>
 801635e:	4603      	mov	r3, r0
 8016360:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d114      	bne.n	8016394 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	2205      	movs	r2, #5
 801636e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016370:	e010      	b.n	8016394 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8016372:	6878      	ldr	r0, [r7, #4]
 8016374:	f004 fdc6 	bl	801af04 <tcp_send_fin>
 8016378:	4603      	mov	r3, r0
 801637a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801637c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d109      	bne.n	8016398 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	2209      	movs	r2, #9
 8016388:	751a      	strb	r2, [r3, #20]
      }
      break;
 801638a:	e005      	b.n	8016398 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801638c:	2300      	movs	r3, #0
 801638e:	e01c      	b.n	80163ca <tcp_close_shutdown_fin+0xbe>
      break;
 8016390:	bf00      	nop
 8016392:	e002      	b.n	801639a <tcp_close_shutdown_fin+0x8e>
      break;
 8016394:	bf00      	nop
 8016396:	e000      	b.n	801639a <tcp_close_shutdown_fin+0x8e>
      break;
 8016398:	bf00      	nop
  }

  if (err == ERR_OK) {
 801639a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d103      	bne.n	80163aa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80163a2:	6878      	ldr	r0, [r7, #4]
 80163a4:	f004 feec 	bl	801b180 <tcp_output>
 80163a8:	e00d      	b.n	80163c6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80163aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163b2:	d108      	bne.n	80163c6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	8b5b      	ldrh	r3, [r3, #26]
 80163b8:	f043 0308 	orr.w	r3, r3, #8
 80163bc:	b29a      	uxth	r2, r3
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80163c2:	2300      	movs	r3, #0
 80163c4:	e001      	b.n	80163ca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80163c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	3710      	adds	r7, #16
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}
 80163d2:	bf00      	nop
 80163d4:	08021f2c 	.word	0x08021f2c
 80163d8:	08021fdc 	.word	0x08021fdc
 80163dc:	08021f70 	.word	0x08021f70

080163e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b082      	sub	sp, #8
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d109      	bne.n	8016402 <tcp_close+0x22>
 80163ee:	4b0f      	ldr	r3, [pc, #60]	; (801642c <tcp_close+0x4c>)
 80163f0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80163f4:	490e      	ldr	r1, [pc, #56]	; (8016430 <tcp_close+0x50>)
 80163f6:	480f      	ldr	r0, [pc, #60]	; (8016434 <tcp_close+0x54>)
 80163f8:	f008 fda8 	bl	801ef4c <iprintf>
 80163fc:	f06f 030f 	mvn.w	r3, #15
 8016400:	e00f      	b.n	8016422 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	7d1b      	ldrb	r3, [r3, #20]
 8016406:	2b01      	cmp	r3, #1
 8016408:	d006      	beq.n	8016418 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	8b5b      	ldrh	r3, [r3, #26]
 801640e:	f043 0310 	orr.w	r3, r3, #16
 8016412:	b29a      	uxth	r2, r3
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016418:	2101      	movs	r1, #1
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	f7ff fe94 	bl	8016148 <tcp_close_shutdown>
 8016420:	4603      	mov	r3, r0
}
 8016422:	4618      	mov	r0, r3
 8016424:	3708      	adds	r7, #8
 8016426:	46bd      	mov	sp, r7
 8016428:	bd80      	pop	{r7, pc}
 801642a:	bf00      	nop
 801642c:	08021f2c 	.word	0x08021f2c
 8016430:	0802203c 	.word	0x0802203c
 8016434:	08021f70 	.word	0x08021f70

08016438 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b08e      	sub	sp, #56	; 0x38
 801643c:	af04      	add	r7, sp, #16
 801643e:	6078      	str	r0, [r7, #4]
 8016440:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d107      	bne.n	8016458 <tcp_abandon+0x20>
 8016448:	4b52      	ldr	r3, [pc, #328]	; (8016594 <tcp_abandon+0x15c>)
 801644a:	f240 223d 	movw	r2, #573	; 0x23d
 801644e:	4952      	ldr	r1, [pc, #328]	; (8016598 <tcp_abandon+0x160>)
 8016450:	4852      	ldr	r0, [pc, #328]	; (801659c <tcp_abandon+0x164>)
 8016452:	f008 fd7b 	bl	801ef4c <iprintf>
 8016456:	e099      	b.n	801658c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	7d1b      	ldrb	r3, [r3, #20]
 801645c:	2b01      	cmp	r3, #1
 801645e:	d106      	bne.n	801646e <tcp_abandon+0x36>
 8016460:	4b4c      	ldr	r3, [pc, #304]	; (8016594 <tcp_abandon+0x15c>)
 8016462:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016466:	494e      	ldr	r1, [pc, #312]	; (80165a0 <tcp_abandon+0x168>)
 8016468:	484c      	ldr	r0, [pc, #304]	; (801659c <tcp_abandon+0x164>)
 801646a:	f008 fd6f 	bl	801ef4c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	7d1b      	ldrb	r3, [r3, #20]
 8016472:	2b0a      	cmp	r3, #10
 8016474:	d107      	bne.n	8016486 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016476:	6879      	ldr	r1, [r7, #4]
 8016478:	484a      	ldr	r0, [pc, #296]	; (80165a4 <tcp_abandon+0x16c>)
 801647a:	f001 fa69 	bl	8017950 <tcp_pcb_remove>
    tcp_free(pcb);
 801647e:	6878      	ldr	r0, [r7, #4]
 8016480:	f7ff fdb0 	bl	8015fe4 <tcp_free>
 8016484:	e082      	b.n	801658c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8016486:	2300      	movs	r3, #0
 8016488:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801648a:	2300      	movs	r3, #0
 801648c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016492:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016498:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80164a0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	691b      	ldr	r3, [r3, #16]
 80164a6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	7d1b      	ldrb	r3, [r3, #20]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d126      	bne.n	80164fe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	8adb      	ldrh	r3, [r3, #22]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d02e      	beq.n	8016516 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80164b8:	4b3b      	ldr	r3, [pc, #236]	; (80165a8 <tcp_abandon+0x170>)
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	687a      	ldr	r2, [r7, #4]
 80164be:	429a      	cmp	r2, r3
 80164c0:	d105      	bne.n	80164ce <tcp_abandon+0x96>
 80164c2:	4b39      	ldr	r3, [pc, #228]	; (80165a8 <tcp_abandon+0x170>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	68db      	ldr	r3, [r3, #12]
 80164c8:	4a37      	ldr	r2, [pc, #220]	; (80165a8 <tcp_abandon+0x170>)
 80164ca:	6013      	str	r3, [r2, #0]
 80164cc:	e013      	b.n	80164f6 <tcp_abandon+0xbe>
 80164ce:	4b36      	ldr	r3, [pc, #216]	; (80165a8 <tcp_abandon+0x170>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	61fb      	str	r3, [r7, #28]
 80164d4:	e00c      	b.n	80164f0 <tcp_abandon+0xb8>
 80164d6:	69fb      	ldr	r3, [r7, #28]
 80164d8:	68db      	ldr	r3, [r3, #12]
 80164da:	687a      	ldr	r2, [r7, #4]
 80164dc:	429a      	cmp	r2, r3
 80164de:	d104      	bne.n	80164ea <tcp_abandon+0xb2>
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	68da      	ldr	r2, [r3, #12]
 80164e4:	69fb      	ldr	r3, [r7, #28]
 80164e6:	60da      	str	r2, [r3, #12]
 80164e8:	e005      	b.n	80164f6 <tcp_abandon+0xbe>
 80164ea:	69fb      	ldr	r3, [r7, #28]
 80164ec:	68db      	ldr	r3, [r3, #12]
 80164ee:	61fb      	str	r3, [r7, #28]
 80164f0:	69fb      	ldr	r3, [r7, #28]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d1ef      	bne.n	80164d6 <tcp_abandon+0x9e>
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	2200      	movs	r2, #0
 80164fa:	60da      	str	r2, [r3, #12]
 80164fc:	e00b      	b.n	8016516 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	8adb      	ldrh	r3, [r3, #22]
 8016506:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016508:	6879      	ldr	r1, [r7, #4]
 801650a:	4828      	ldr	r0, [pc, #160]	; (80165ac <tcp_abandon+0x174>)
 801650c:	f001 fa20 	bl	8017950 <tcp_pcb_remove>
 8016510:	4b27      	ldr	r3, [pc, #156]	; (80165b0 <tcp_abandon+0x178>)
 8016512:	2201      	movs	r2, #1
 8016514:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801651a:	2b00      	cmp	r3, #0
 801651c:	d004      	beq.n	8016528 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016522:	4618      	mov	r0, r3
 8016524:	f000 fed6 	bl	80172d4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801652c:	2b00      	cmp	r3, #0
 801652e:	d004      	beq.n	801653a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016534:	4618      	mov	r0, r3
 8016536:	f000 fecd 	bl	80172d4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801653e:	2b00      	cmp	r3, #0
 8016540:	d004      	beq.n	801654c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016546:	4618      	mov	r0, r3
 8016548:	f000 fec4 	bl	80172d4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801654e:	2b00      	cmp	r3, #0
 8016550:	d00e      	beq.n	8016570 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8016552:	6879      	ldr	r1, [r7, #4]
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	3304      	adds	r3, #4
 8016558:	687a      	ldr	r2, [r7, #4]
 801655a:	8b12      	ldrh	r2, [r2, #24]
 801655c:	9202      	str	r2, [sp, #8]
 801655e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016560:	9201      	str	r2, [sp, #4]
 8016562:	9300      	str	r3, [sp, #0]
 8016564:	460b      	mov	r3, r1
 8016566:	697a      	ldr	r2, [r7, #20]
 8016568:	69b9      	ldr	r1, [r7, #24]
 801656a:	6878      	ldr	r0, [r7, #4]
 801656c:	f005 fbbc 	bl	801bce8 <tcp_rst>
    }
    last_state = pcb->state;
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	7d1b      	ldrb	r3, [r3, #20]
 8016574:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8016576:	6878      	ldr	r0, [r7, #4]
 8016578:	f7ff fd34 	bl	8015fe4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801657c:	693b      	ldr	r3, [r7, #16]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d004      	beq.n	801658c <tcp_abandon+0x154>
 8016582:	693b      	ldr	r3, [r7, #16]
 8016584:	f06f 010c 	mvn.w	r1, #12
 8016588:	68f8      	ldr	r0, [r7, #12]
 801658a:	4798      	blx	r3
  }
}
 801658c:	3728      	adds	r7, #40	; 0x28
 801658e:	46bd      	mov	sp, r7
 8016590:	bd80      	pop	{r7, pc}
 8016592:	bf00      	nop
 8016594:	08021f2c 	.word	0x08021f2c
 8016598:	08022070 	.word	0x08022070
 801659c:	08021f70 	.word	0x08021f70
 80165a0:	0802208c 	.word	0x0802208c
 80165a4:	2001476c 	.word	0x2001476c
 80165a8:	20014768 	.word	0x20014768
 80165ac:	2001475c 	.word	0x2001475c
 80165b0:	20014758 	.word	0x20014758

080165b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b082      	sub	sp, #8
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80165bc:	2101      	movs	r1, #1
 80165be:	6878      	ldr	r0, [r7, #4]
 80165c0:	f7ff ff3a 	bl	8016438 <tcp_abandon>
}
 80165c4:	bf00      	nop
 80165c6:	3708      	adds	r7, #8
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bd80      	pop	{r7, pc}

080165cc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b088      	sub	sp, #32
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	60f8      	str	r0, [r7, #12]
 80165d4:	60b9      	str	r1, [r7, #8]
 80165d6:	4613      	mov	r3, r2
 80165d8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80165da:	2304      	movs	r3, #4
 80165dc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80165de:	68bb      	ldr	r3, [r7, #8]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d101      	bne.n	80165e8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80165e4:	4b3e      	ldr	r3, [pc, #248]	; (80166e0 <tcp_bind+0x114>)
 80165e6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d109      	bne.n	8016602 <tcp_bind+0x36>
 80165ee:	4b3d      	ldr	r3, [pc, #244]	; (80166e4 <tcp_bind+0x118>)
 80165f0:	f240 22a9 	movw	r2, #681	; 0x2a9
 80165f4:	493c      	ldr	r1, [pc, #240]	; (80166e8 <tcp_bind+0x11c>)
 80165f6:	483d      	ldr	r0, [pc, #244]	; (80166ec <tcp_bind+0x120>)
 80165f8:	f008 fca8 	bl	801ef4c <iprintf>
 80165fc:	f06f 030f 	mvn.w	r3, #15
 8016600:	e06a      	b.n	80166d8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	7d1b      	ldrb	r3, [r3, #20]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d009      	beq.n	801661e <tcp_bind+0x52>
 801660a:	4b36      	ldr	r3, [pc, #216]	; (80166e4 <tcp_bind+0x118>)
 801660c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016610:	4937      	ldr	r1, [pc, #220]	; (80166f0 <tcp_bind+0x124>)
 8016612:	4836      	ldr	r0, [pc, #216]	; (80166ec <tcp_bind+0x120>)
 8016614:	f008 fc9a 	bl	801ef4c <iprintf>
 8016618:	f06f 0305 	mvn.w	r3, #5
 801661c:	e05c      	b.n	80166d8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801661e:	88fb      	ldrh	r3, [r7, #6]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d109      	bne.n	8016638 <tcp_bind+0x6c>
    port = tcp_new_port();
 8016624:	f000 f9f0 	bl	8016a08 <tcp_new_port>
 8016628:	4603      	mov	r3, r0
 801662a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801662c:	88fb      	ldrh	r3, [r7, #6]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d135      	bne.n	801669e <tcp_bind+0xd2>
      return ERR_BUF;
 8016632:	f06f 0301 	mvn.w	r3, #1
 8016636:	e04f      	b.n	80166d8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8016638:	2300      	movs	r3, #0
 801663a:	61fb      	str	r3, [r7, #28]
 801663c:	e02b      	b.n	8016696 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801663e:	4a2d      	ldr	r2, [pc, #180]	; (80166f4 <tcp_bind+0x128>)
 8016640:	69fb      	ldr	r3, [r7, #28]
 8016642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	61bb      	str	r3, [r7, #24]
 801664a:	e01e      	b.n	801668a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801664c:	69bb      	ldr	r3, [r7, #24]
 801664e:	8adb      	ldrh	r3, [r3, #22]
 8016650:	88fa      	ldrh	r2, [r7, #6]
 8016652:	429a      	cmp	r2, r3
 8016654:	d116      	bne.n	8016684 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8016656:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016658:	2b00      	cmp	r3, #0
 801665a:	d010      	beq.n	801667e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801665c:	69bb      	ldr	r3, [r7, #24]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d00c      	beq.n	801667e <tcp_bind+0xb2>
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d009      	beq.n	801667e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801666a:	68bb      	ldr	r3, [r7, #8]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d005      	beq.n	801667e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8016672:	69bb      	ldr	r3, [r7, #24]
 8016674:	681a      	ldr	r2, [r3, #0]
 8016676:	68bb      	ldr	r3, [r7, #8]
 8016678:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801667a:	429a      	cmp	r2, r3
 801667c:	d102      	bne.n	8016684 <tcp_bind+0xb8>
              return ERR_USE;
 801667e:	f06f 0307 	mvn.w	r3, #7
 8016682:	e029      	b.n	80166d8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016684:	69bb      	ldr	r3, [r7, #24]
 8016686:	68db      	ldr	r3, [r3, #12]
 8016688:	61bb      	str	r3, [r7, #24]
 801668a:	69bb      	ldr	r3, [r7, #24]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d1dd      	bne.n	801664c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8016690:	69fb      	ldr	r3, [r7, #28]
 8016692:	3301      	adds	r3, #1
 8016694:	61fb      	str	r3, [r7, #28]
 8016696:	69fa      	ldr	r2, [r7, #28]
 8016698:	697b      	ldr	r3, [r7, #20]
 801669a:	429a      	cmp	r2, r3
 801669c:	dbcf      	blt.n	801663e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801669e:	68bb      	ldr	r3, [r7, #8]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d00c      	beq.n	80166be <tcp_bind+0xf2>
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d008      	beq.n	80166be <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80166ac:	68bb      	ldr	r3, [r7, #8]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d002      	beq.n	80166b8 <tcp_bind+0xec>
 80166b2:	68bb      	ldr	r3, [r7, #8]
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	e000      	b.n	80166ba <tcp_bind+0xee>
 80166b8:	2300      	movs	r3, #0
 80166ba:	68fa      	ldr	r2, [r7, #12]
 80166bc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	88fa      	ldrh	r2, [r7, #6]
 80166c2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80166c4:	4b0c      	ldr	r3, [pc, #48]	; (80166f8 <tcp_bind+0x12c>)
 80166c6:	681a      	ldr	r2, [r3, #0]
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	60da      	str	r2, [r3, #12]
 80166cc:	4a0a      	ldr	r2, [pc, #40]	; (80166f8 <tcp_bind+0x12c>)
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	6013      	str	r3, [r2, #0]
 80166d2:	f005 fccb 	bl	801c06c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80166d6:	2300      	movs	r3, #0
}
 80166d8:	4618      	mov	r0, r3
 80166da:	3720      	adds	r7, #32
 80166dc:	46bd      	mov	sp, r7
 80166de:	bd80      	pop	{r7, pc}
 80166e0:	0807ac80 	.word	0x0807ac80
 80166e4:	08021f2c 	.word	0x08021f2c
 80166e8:	080220c0 	.word	0x080220c0
 80166ec:	08021f70 	.word	0x08021f70
 80166f0:	080220d8 	.word	0x080220d8
 80166f4:	0807ac58 	.word	0x0807ac58
 80166f8:	20014768 	.word	0x20014768

080166fc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b084      	sub	sp, #16
 8016700:	af00      	add	r7, sp, #0
 8016702:	60f8      	str	r0, [r7, #12]
 8016704:	60b9      	str	r1, [r7, #8]
 8016706:	4613      	mov	r3, r2
 8016708:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801670a:	68bb      	ldr	r3, [r7, #8]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d106      	bne.n	801671e <tcp_accept_null+0x22>
 8016710:	4b07      	ldr	r3, [pc, #28]	; (8016730 <tcp_accept_null+0x34>)
 8016712:	f240 320f 	movw	r2, #783	; 0x30f
 8016716:	4907      	ldr	r1, [pc, #28]	; (8016734 <tcp_accept_null+0x38>)
 8016718:	4807      	ldr	r0, [pc, #28]	; (8016738 <tcp_accept_null+0x3c>)
 801671a:	f008 fc17 	bl	801ef4c <iprintf>

  tcp_abort(pcb);
 801671e:	68b8      	ldr	r0, [r7, #8]
 8016720:	f7ff ff48 	bl	80165b4 <tcp_abort>

  return ERR_ABRT;
 8016724:	f06f 030c 	mvn.w	r3, #12
}
 8016728:	4618      	mov	r0, r3
 801672a:	3710      	adds	r7, #16
 801672c:	46bd      	mov	sp, r7
 801672e:	bd80      	pop	{r7, pc}
 8016730:	08021f2c 	.word	0x08021f2c
 8016734:	08022100 	.word	0x08022100
 8016738:	08021f70 	.word	0x08021f70

0801673c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b082      	sub	sp, #8
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
 8016744:	460b      	mov	r3, r1
 8016746:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8016748:	78fb      	ldrb	r3, [r7, #3]
 801674a:	2200      	movs	r2, #0
 801674c:	4619      	mov	r1, r3
 801674e:	6878      	ldr	r0, [r7, #4]
 8016750:	f000 f806 	bl	8016760 <tcp_listen_with_backlog_and_err>
 8016754:	4603      	mov	r3, r0
}
 8016756:	4618      	mov	r0, r3
 8016758:	3708      	adds	r7, #8
 801675a:	46bd      	mov	sp, r7
 801675c:	bd80      	pop	{r7, pc}
	...

08016760 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8016760:	b580      	push	{r7, lr}
 8016762:	b088      	sub	sp, #32
 8016764:	af00      	add	r7, sp, #0
 8016766:	60f8      	str	r0, [r7, #12]
 8016768:	460b      	mov	r3, r1
 801676a:	607a      	str	r2, [r7, #4]
 801676c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801676e:	2300      	movs	r3, #0
 8016770:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d109      	bne.n	801678c <tcp_listen_with_backlog_and_err+0x2c>
 8016778:	4b47      	ldr	r3, [pc, #284]	; (8016898 <tcp_listen_with_backlog_and_err+0x138>)
 801677a:	f240 3259 	movw	r2, #857	; 0x359
 801677e:	4947      	ldr	r1, [pc, #284]	; (801689c <tcp_listen_with_backlog_and_err+0x13c>)
 8016780:	4847      	ldr	r0, [pc, #284]	; (80168a0 <tcp_listen_with_backlog_and_err+0x140>)
 8016782:	f008 fbe3 	bl	801ef4c <iprintf>
 8016786:	23f0      	movs	r3, #240	; 0xf0
 8016788:	76fb      	strb	r3, [r7, #27]
 801678a:	e079      	b.n	8016880 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	7d1b      	ldrb	r3, [r3, #20]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d009      	beq.n	80167a8 <tcp_listen_with_backlog_and_err+0x48>
 8016794:	4b40      	ldr	r3, [pc, #256]	; (8016898 <tcp_listen_with_backlog_and_err+0x138>)
 8016796:	f240 325a 	movw	r2, #858	; 0x35a
 801679a:	4942      	ldr	r1, [pc, #264]	; (80168a4 <tcp_listen_with_backlog_and_err+0x144>)
 801679c:	4840      	ldr	r0, [pc, #256]	; (80168a0 <tcp_listen_with_backlog_and_err+0x140>)
 801679e:	f008 fbd5 	bl	801ef4c <iprintf>
 80167a2:	23f1      	movs	r3, #241	; 0xf1
 80167a4:	76fb      	strb	r3, [r7, #27]
 80167a6:	e06b      	b.n	8016880 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	7d1b      	ldrb	r3, [r3, #20]
 80167ac:	2b01      	cmp	r3, #1
 80167ae:	d104      	bne.n	80167ba <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80167b4:	23f7      	movs	r3, #247	; 0xf7
 80167b6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80167b8:	e062      	b.n	8016880 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80167ba:	2002      	movs	r0, #2
 80167bc:	f7fe fa5e 	bl	8014c7c <memp_malloc>
 80167c0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80167c2:	69fb      	ldr	r3, [r7, #28]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d102      	bne.n	80167ce <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80167c8:	23ff      	movs	r3, #255	; 0xff
 80167ca:	76fb      	strb	r3, [r7, #27]
    goto done;
 80167cc:	e058      	b.n	8016880 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	691a      	ldr	r2, [r3, #16]
 80167d2:	69fb      	ldr	r3, [r7, #28]
 80167d4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	8ada      	ldrh	r2, [r3, #22]
 80167da:	69fb      	ldr	r3, [r7, #28]
 80167dc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80167de:	69fb      	ldr	r3, [r7, #28]
 80167e0:	2201      	movs	r2, #1
 80167e2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	7d5a      	ldrb	r2, [r3, #21]
 80167e8:	69fb      	ldr	r3, [r7, #28]
 80167ea:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	7a5a      	ldrb	r2, [r3, #9]
 80167f0:	69fb      	ldr	r3, [r7, #28]
 80167f2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80167f4:	69fb      	ldr	r3, [r7, #28]
 80167f6:	2200      	movs	r2, #0
 80167f8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	7ada      	ldrb	r2, [r3, #11]
 80167fe:	69fb      	ldr	r3, [r7, #28]
 8016800:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	7a9a      	ldrb	r2, [r3, #10]
 8016806:	69fb      	ldr	r3, [r7, #28]
 8016808:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	681a      	ldr	r2, [r3, #0]
 801680e:	69fb      	ldr	r3, [r7, #28]
 8016810:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	8adb      	ldrh	r3, [r3, #22]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d021      	beq.n	801685e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801681a:	4b23      	ldr	r3, [pc, #140]	; (80168a8 <tcp_listen_with_backlog_and_err+0x148>)
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	68fa      	ldr	r2, [r7, #12]
 8016820:	429a      	cmp	r2, r3
 8016822:	d105      	bne.n	8016830 <tcp_listen_with_backlog_and_err+0xd0>
 8016824:	4b20      	ldr	r3, [pc, #128]	; (80168a8 <tcp_listen_with_backlog_and_err+0x148>)
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	68db      	ldr	r3, [r3, #12]
 801682a:	4a1f      	ldr	r2, [pc, #124]	; (80168a8 <tcp_listen_with_backlog_and_err+0x148>)
 801682c:	6013      	str	r3, [r2, #0]
 801682e:	e013      	b.n	8016858 <tcp_listen_with_backlog_and_err+0xf8>
 8016830:	4b1d      	ldr	r3, [pc, #116]	; (80168a8 <tcp_listen_with_backlog_and_err+0x148>)
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	617b      	str	r3, [r7, #20]
 8016836:	e00c      	b.n	8016852 <tcp_listen_with_backlog_and_err+0xf2>
 8016838:	697b      	ldr	r3, [r7, #20]
 801683a:	68db      	ldr	r3, [r3, #12]
 801683c:	68fa      	ldr	r2, [r7, #12]
 801683e:	429a      	cmp	r2, r3
 8016840:	d104      	bne.n	801684c <tcp_listen_with_backlog_and_err+0xec>
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	68da      	ldr	r2, [r3, #12]
 8016846:	697b      	ldr	r3, [r7, #20]
 8016848:	60da      	str	r2, [r3, #12]
 801684a:	e005      	b.n	8016858 <tcp_listen_with_backlog_and_err+0xf8>
 801684c:	697b      	ldr	r3, [r7, #20]
 801684e:	68db      	ldr	r3, [r3, #12]
 8016850:	617b      	str	r3, [r7, #20]
 8016852:	697b      	ldr	r3, [r7, #20]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d1ef      	bne.n	8016838 <tcp_listen_with_backlog_and_err+0xd8>
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	2200      	movs	r2, #0
 801685c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801685e:	68f8      	ldr	r0, [r7, #12]
 8016860:	f7ff fbc0 	bl	8015fe4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8016864:	69fb      	ldr	r3, [r7, #28]
 8016866:	4a11      	ldr	r2, [pc, #68]	; (80168ac <tcp_listen_with_backlog_and_err+0x14c>)
 8016868:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801686a:	4b11      	ldr	r3, [pc, #68]	; (80168b0 <tcp_listen_with_backlog_and_err+0x150>)
 801686c:	681a      	ldr	r2, [r3, #0]
 801686e:	69fb      	ldr	r3, [r7, #28]
 8016870:	60da      	str	r2, [r3, #12]
 8016872:	4a0f      	ldr	r2, [pc, #60]	; (80168b0 <tcp_listen_with_backlog_and_err+0x150>)
 8016874:	69fb      	ldr	r3, [r7, #28]
 8016876:	6013      	str	r3, [r2, #0]
 8016878:	f005 fbf8 	bl	801c06c <tcp_timer_needed>
  res = ERR_OK;
 801687c:	2300      	movs	r3, #0
 801687e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d002      	beq.n	801688c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	7efa      	ldrb	r2, [r7, #27]
 801688a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801688c:	69fb      	ldr	r3, [r7, #28]
}
 801688e:	4618      	mov	r0, r3
 8016890:	3720      	adds	r7, #32
 8016892:	46bd      	mov	sp, r7
 8016894:	bd80      	pop	{r7, pc}
 8016896:	bf00      	nop
 8016898:	08021f2c 	.word	0x08021f2c
 801689c:	08022120 	.word	0x08022120
 80168a0:	08021f70 	.word	0x08021f70
 80168a4:	08022150 	.word	0x08022150
 80168a8:	20014768 	.word	0x20014768
 80168ac:	080166fd 	.word	0x080166fd
 80168b0:	20014764 	.word	0x20014764

080168b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b084      	sub	sp, #16
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d106      	bne.n	80168d0 <tcp_update_rcv_ann_wnd+0x1c>
 80168c2:	4b25      	ldr	r3, [pc, #148]	; (8016958 <tcp_update_rcv_ann_wnd+0xa4>)
 80168c4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80168c8:	4924      	ldr	r1, [pc, #144]	; (801695c <tcp_update_rcv_ann_wnd+0xa8>)
 80168ca:	4825      	ldr	r0, [pc, #148]	; (8016960 <tcp_update_rcv_ann_wnd+0xac>)
 80168cc:	f008 fb3e 	bl	801ef4c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168d4:	687a      	ldr	r2, [r7, #4]
 80168d6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80168d8:	4413      	add	r3, r2
 80168da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168e0:	687a      	ldr	r2, [r7, #4]
 80168e2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80168e4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80168e8:	bf28      	it	cs
 80168ea:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80168ee:	b292      	uxth	r2, r2
 80168f0:	4413      	add	r3, r2
 80168f2:	68fa      	ldr	r2, [r7, #12]
 80168f4:	1ad3      	subs	r3, r2, r3
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	db08      	blt.n	801690c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016906:	68fa      	ldr	r2, [r7, #12]
 8016908:	1ad3      	subs	r3, r2, r3
 801690a:	e020      	b.n	801694e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016914:	1ad3      	subs	r3, r2, r3
 8016916:	2b00      	cmp	r3, #0
 8016918:	dd03      	ble.n	8016922 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	2200      	movs	r2, #0
 801691e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016920:	e014      	b.n	801694c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801692a:	1ad3      	subs	r3, r2, r3
 801692c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801692e:	68bb      	ldr	r3, [r7, #8]
 8016930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016934:	d306      	bcc.n	8016944 <tcp_update_rcv_ann_wnd+0x90>
 8016936:	4b08      	ldr	r3, [pc, #32]	; (8016958 <tcp_update_rcv_ann_wnd+0xa4>)
 8016938:	f240 32b6 	movw	r2, #950	; 0x3b6
 801693c:	4909      	ldr	r1, [pc, #36]	; (8016964 <tcp_update_rcv_ann_wnd+0xb0>)
 801693e:	4808      	ldr	r0, [pc, #32]	; (8016960 <tcp_update_rcv_ann_wnd+0xac>)
 8016940:	f008 fb04 	bl	801ef4c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	b29a      	uxth	r2, r3
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801694c:	2300      	movs	r3, #0
  }
}
 801694e:	4618      	mov	r0, r3
 8016950:	3710      	adds	r7, #16
 8016952:	46bd      	mov	sp, r7
 8016954:	bd80      	pop	{r7, pc}
 8016956:	bf00      	nop
 8016958:	08021f2c 	.word	0x08021f2c
 801695c:	08022188 	.word	0x08022188
 8016960:	08021f70 	.word	0x08021f70
 8016964:	080221ac 	.word	0x080221ac

08016968 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b084      	sub	sp, #16
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	460b      	mov	r3, r1
 8016972:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d107      	bne.n	801698a <tcp_recved+0x22>
 801697a:	4b1f      	ldr	r3, [pc, #124]	; (80169f8 <tcp_recved+0x90>)
 801697c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016980:	491e      	ldr	r1, [pc, #120]	; (80169fc <tcp_recved+0x94>)
 8016982:	481f      	ldr	r0, [pc, #124]	; (8016a00 <tcp_recved+0x98>)
 8016984:	f008 fae2 	bl	801ef4c <iprintf>
 8016988:	e032      	b.n	80169f0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	7d1b      	ldrb	r3, [r3, #20]
 801698e:	2b01      	cmp	r3, #1
 8016990:	d106      	bne.n	80169a0 <tcp_recved+0x38>
 8016992:	4b19      	ldr	r3, [pc, #100]	; (80169f8 <tcp_recved+0x90>)
 8016994:	f240 32d2 	movw	r2, #978	; 0x3d2
 8016998:	491a      	ldr	r1, [pc, #104]	; (8016a04 <tcp_recved+0x9c>)
 801699a:	4819      	ldr	r0, [pc, #100]	; (8016a00 <tcp_recved+0x98>)
 801699c:	f008 fad6 	bl	801ef4c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80169a4:	887b      	ldrh	r3, [r7, #2]
 80169a6:	4413      	add	r3, r2
 80169a8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80169aa:	89fb      	ldrh	r3, [r7, #14]
 80169ac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80169b0:	d804      	bhi.n	80169bc <tcp_recved+0x54>
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80169b6:	89fa      	ldrh	r2, [r7, #14]
 80169b8:	429a      	cmp	r2, r3
 80169ba:	d204      	bcs.n	80169c6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80169c2:	851a      	strh	r2, [r3, #40]	; 0x28
 80169c4:	e002      	b.n	80169cc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	89fa      	ldrh	r2, [r7, #14]
 80169ca:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80169cc:	6878      	ldr	r0, [r7, #4]
 80169ce:	f7ff ff71 	bl	80168b4 <tcp_update_rcv_ann_wnd>
 80169d2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80169d4:	68bb      	ldr	r3, [r7, #8]
 80169d6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80169da:	d309      	bcc.n	80169f0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	8b5b      	ldrh	r3, [r3, #26]
 80169e0:	f043 0302 	orr.w	r3, r3, #2
 80169e4:	b29a      	uxth	r2, r3
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80169ea:	6878      	ldr	r0, [r7, #4]
 80169ec:	f004 fbc8 	bl	801b180 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80169f0:	3710      	adds	r7, #16
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bd80      	pop	{r7, pc}
 80169f6:	bf00      	nop
 80169f8:	08021f2c 	.word	0x08021f2c
 80169fc:	080221c8 	.word	0x080221c8
 8016a00:	08021f70 	.word	0x08021f70
 8016a04:	080221e0 	.word	0x080221e0

08016a08 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016a08:	b480      	push	{r7}
 8016a0a:	b083      	sub	sp, #12
 8016a0c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016a0e:	2300      	movs	r3, #0
 8016a10:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8016a12:	4b1e      	ldr	r3, [pc, #120]	; (8016a8c <tcp_new_port+0x84>)
 8016a14:	881b      	ldrh	r3, [r3, #0]
 8016a16:	3301      	adds	r3, #1
 8016a18:	b29a      	uxth	r2, r3
 8016a1a:	4b1c      	ldr	r3, [pc, #112]	; (8016a8c <tcp_new_port+0x84>)
 8016a1c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016a1e:	4b1b      	ldr	r3, [pc, #108]	; (8016a8c <tcp_new_port+0x84>)
 8016a20:	881b      	ldrh	r3, [r3, #0]
 8016a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a26:	4293      	cmp	r3, r2
 8016a28:	d103      	bne.n	8016a32 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016a2a:	4b18      	ldr	r3, [pc, #96]	; (8016a8c <tcp_new_port+0x84>)
 8016a2c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016a30:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016a32:	2300      	movs	r3, #0
 8016a34:	71fb      	strb	r3, [r7, #7]
 8016a36:	e01e      	b.n	8016a76 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016a38:	79fb      	ldrb	r3, [r7, #7]
 8016a3a:	4a15      	ldr	r2, [pc, #84]	; (8016a90 <tcp_new_port+0x88>)
 8016a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	603b      	str	r3, [r7, #0]
 8016a44:	e011      	b.n	8016a6a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	8ada      	ldrh	r2, [r3, #22]
 8016a4a:	4b10      	ldr	r3, [pc, #64]	; (8016a8c <tcp_new_port+0x84>)
 8016a4c:	881b      	ldrh	r3, [r3, #0]
 8016a4e:	429a      	cmp	r2, r3
 8016a50:	d108      	bne.n	8016a64 <tcp_new_port+0x5c>
        n++;
 8016a52:	88bb      	ldrh	r3, [r7, #4]
 8016a54:	3301      	adds	r3, #1
 8016a56:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016a58:	88bb      	ldrh	r3, [r7, #4]
 8016a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016a5e:	d3d8      	bcc.n	8016a12 <tcp_new_port+0xa>
          return 0;
 8016a60:	2300      	movs	r3, #0
 8016a62:	e00d      	b.n	8016a80 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016a64:	683b      	ldr	r3, [r7, #0]
 8016a66:	68db      	ldr	r3, [r3, #12]
 8016a68:	603b      	str	r3, [r7, #0]
 8016a6a:	683b      	ldr	r3, [r7, #0]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d1ea      	bne.n	8016a46 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016a70:	79fb      	ldrb	r3, [r7, #7]
 8016a72:	3301      	adds	r3, #1
 8016a74:	71fb      	strb	r3, [r7, #7]
 8016a76:	79fb      	ldrb	r3, [r7, #7]
 8016a78:	2b03      	cmp	r3, #3
 8016a7a:	d9dd      	bls.n	8016a38 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016a7c:	4b03      	ldr	r3, [pc, #12]	; (8016a8c <tcp_new_port+0x84>)
 8016a7e:	881b      	ldrh	r3, [r3, #0]
}
 8016a80:	4618      	mov	r0, r3
 8016a82:	370c      	adds	r7, #12
 8016a84:	46bd      	mov	sp, r7
 8016a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8a:	4770      	bx	lr
 8016a8c:	20000036 	.word	0x20000036
 8016a90:	0807ac58 	.word	0x0807ac58

08016a94 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016a94:	b5b0      	push	{r4, r5, r7, lr}
 8016a96:	b090      	sub	sp, #64	; 0x40
 8016a98:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8016aa0:	4b94      	ldr	r3, [pc, #592]	; (8016cf4 <tcp_slowtmr+0x260>)
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	3301      	adds	r3, #1
 8016aa6:	4a93      	ldr	r2, [pc, #588]	; (8016cf4 <tcp_slowtmr+0x260>)
 8016aa8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016aaa:	4b93      	ldr	r3, [pc, #588]	; (8016cf8 <tcp_slowtmr+0x264>)
 8016aac:	781b      	ldrb	r3, [r3, #0]
 8016aae:	3301      	adds	r3, #1
 8016ab0:	b2da      	uxtb	r2, r3
 8016ab2:	4b91      	ldr	r3, [pc, #580]	; (8016cf8 <tcp_slowtmr+0x264>)
 8016ab4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8016aba:	4b90      	ldr	r3, [pc, #576]	; (8016cfc <tcp_slowtmr+0x268>)
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8016ac0:	e29f      	b.n	8017002 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac4:	7d1b      	ldrb	r3, [r3, #20]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d106      	bne.n	8016ad8 <tcp_slowtmr+0x44>
 8016aca:	4b8d      	ldr	r3, [pc, #564]	; (8016d00 <tcp_slowtmr+0x26c>)
 8016acc:	f240 42be 	movw	r2, #1214	; 0x4be
 8016ad0:	498c      	ldr	r1, [pc, #560]	; (8016d04 <tcp_slowtmr+0x270>)
 8016ad2:	488d      	ldr	r0, [pc, #564]	; (8016d08 <tcp_slowtmr+0x274>)
 8016ad4:	f008 fa3a 	bl	801ef4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ada:	7d1b      	ldrb	r3, [r3, #20]
 8016adc:	2b01      	cmp	r3, #1
 8016ade:	d106      	bne.n	8016aee <tcp_slowtmr+0x5a>
 8016ae0:	4b87      	ldr	r3, [pc, #540]	; (8016d00 <tcp_slowtmr+0x26c>)
 8016ae2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8016ae6:	4989      	ldr	r1, [pc, #548]	; (8016d0c <tcp_slowtmr+0x278>)
 8016ae8:	4887      	ldr	r0, [pc, #540]	; (8016d08 <tcp_slowtmr+0x274>)
 8016aea:	f008 fa2f 	bl	801ef4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016af0:	7d1b      	ldrb	r3, [r3, #20]
 8016af2:	2b0a      	cmp	r3, #10
 8016af4:	d106      	bne.n	8016b04 <tcp_slowtmr+0x70>
 8016af6:	4b82      	ldr	r3, [pc, #520]	; (8016d00 <tcp_slowtmr+0x26c>)
 8016af8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016afc:	4984      	ldr	r1, [pc, #528]	; (8016d10 <tcp_slowtmr+0x27c>)
 8016afe:	4882      	ldr	r0, [pc, #520]	; (8016d08 <tcp_slowtmr+0x274>)
 8016b00:	f008 fa24 	bl	801ef4c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b06:	7f9a      	ldrb	r2, [r3, #30]
 8016b08:	4b7b      	ldr	r3, [pc, #492]	; (8016cf8 <tcp_slowtmr+0x264>)
 8016b0a:	781b      	ldrb	r3, [r3, #0]
 8016b0c:	429a      	cmp	r2, r3
 8016b0e:	d105      	bne.n	8016b1c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8016b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b12:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b16:	68db      	ldr	r3, [r3, #12]
 8016b18:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8016b1a:	e272      	b.n	8017002 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016b1c:	4b76      	ldr	r3, [pc, #472]	; (8016cf8 <tcp_slowtmr+0x264>)
 8016b1e:	781a      	ldrb	r2, [r3, #0]
 8016b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b22:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8016b24:	2300      	movs	r3, #0
 8016b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b32:	7d1b      	ldrb	r3, [r3, #20]
 8016b34:	2b02      	cmp	r3, #2
 8016b36:	d10a      	bne.n	8016b4e <tcp_slowtmr+0xba>
 8016b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016b3e:	2b05      	cmp	r3, #5
 8016b40:	d905      	bls.n	8016b4e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8016b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b46:	3301      	adds	r3, #1
 8016b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b4c:	e11e      	b.n	8016d8c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016b54:	2b0b      	cmp	r3, #11
 8016b56:	d905      	bls.n	8016b64 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8016b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b5c:	3301      	adds	r3, #1
 8016b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b62:	e113      	b.n	8016d8c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8016b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b66:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d075      	beq.n	8016c5a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8016b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d006      	beq.n	8016b84 <tcp_slowtmr+0xf0>
 8016b76:	4b62      	ldr	r3, [pc, #392]	; (8016d00 <tcp_slowtmr+0x26c>)
 8016b78:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8016b7c:	4965      	ldr	r1, [pc, #404]	; (8016d14 <tcp_slowtmr+0x280>)
 8016b7e:	4862      	ldr	r0, [pc, #392]	; (8016d08 <tcp_slowtmr+0x274>)
 8016b80:	f008 f9e4 	bl	801ef4c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8016b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d106      	bne.n	8016b9a <tcp_slowtmr+0x106>
 8016b8c:	4b5c      	ldr	r3, [pc, #368]	; (8016d00 <tcp_slowtmr+0x26c>)
 8016b8e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8016b92:	4961      	ldr	r1, [pc, #388]	; (8016d18 <tcp_slowtmr+0x284>)
 8016b94:	485c      	ldr	r0, [pc, #368]	; (8016d08 <tcp_slowtmr+0x274>)
 8016b96:	f008 f9d9 	bl	801ef4c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8016b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b9c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016ba0:	2b0b      	cmp	r3, #11
 8016ba2:	d905      	bls.n	8016bb0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8016ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ba8:	3301      	adds	r3, #1
 8016baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016bae:	e0ed      	b.n	8016d8c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8016bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bb2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016bb6:	3b01      	subs	r3, #1
 8016bb8:	4a58      	ldr	r2, [pc, #352]	; (8016d1c <tcp_slowtmr+0x288>)
 8016bba:	5cd3      	ldrb	r3, [r2, r3]
 8016bbc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8016bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bc0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016bc4:	7c7a      	ldrb	r2, [r7, #17]
 8016bc6:	429a      	cmp	r2, r3
 8016bc8:	d907      	bls.n	8016bda <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8016bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bcc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016bd0:	3301      	adds	r3, #1
 8016bd2:	b2da      	uxtb	r2, r3
 8016bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bd6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8016bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bdc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016be0:	7c7a      	ldrb	r2, [r7, #17]
 8016be2:	429a      	cmp	r2, r3
 8016be4:	f200 80d2 	bhi.w	8016d8c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8016be8:	2301      	movs	r3, #1
 8016bea:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8016bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d108      	bne.n	8016c08 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8016bf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016bf8:	f005 f96a 	bl	801bed0 <tcp_zero_window_probe>
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d014      	beq.n	8016c2c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8016c02:	2300      	movs	r3, #0
 8016c04:	623b      	str	r3, [r7, #32]
 8016c06:	e011      	b.n	8016c2c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8016c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016c0e:	4619      	mov	r1, r3
 8016c10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c12:	f004 f82f 	bl	801ac74 <tcp_split_unsent_seg>
 8016c16:	4603      	mov	r3, r0
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d107      	bne.n	8016c2c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8016c1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c1e:	f004 faaf 	bl	801b180 <tcp_output>
 8016c22:	4603      	mov	r3, r0
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d101      	bne.n	8016c2c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8016c28:	2300      	movs	r3, #0
 8016c2a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8016c2c:	6a3b      	ldr	r3, [r7, #32]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	f000 80ac 	beq.w	8016d8c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8016c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c36:	2200      	movs	r2, #0
 8016c38:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c3e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016c42:	2b06      	cmp	r3, #6
 8016c44:	f200 80a2 	bhi.w	8016d8c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8016c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016c4e:	3301      	adds	r3, #1
 8016c50:	b2da      	uxtb	r2, r3
 8016c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c54:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8016c58:	e098      	b.n	8016d8c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8016c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	db0f      	blt.n	8016c84 <tcp_slowtmr+0x1f0>
 8016c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016c6a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016c6e:	4293      	cmp	r3, r2
 8016c70:	d008      	beq.n	8016c84 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8016c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016c78:	b29b      	uxth	r3, r3
 8016c7a:	3301      	adds	r3, #1
 8016c7c:	b29b      	uxth	r3, r3
 8016c7e:	b21a      	sxth	r2, r3
 8016c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c82:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8016c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c86:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8016c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c8c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016c90:	429a      	cmp	r2, r3
 8016c92:	db7b      	blt.n	8016d8c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8016c94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c96:	f004 fd65 	bl	801b764 <tcp_rexmit_rto_prepare>
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d007      	beq.n	8016cb0 <tcp_slowtmr+0x21c>
 8016ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d171      	bne.n	8016d8c <tcp_slowtmr+0x2f8>
 8016ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d06d      	beq.n	8016d8c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8016cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cb2:	7d1b      	ldrb	r3, [r3, #20]
 8016cb4:	2b02      	cmp	r3, #2
 8016cb6:	d03a      	beq.n	8016d2e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8016cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016cbe:	2b0c      	cmp	r3, #12
 8016cc0:	bf28      	it	cs
 8016cc2:	230c      	movcs	r3, #12
 8016cc4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8016cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cc8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016ccc:	10db      	asrs	r3, r3, #3
 8016cce:	b21b      	sxth	r3, r3
 8016cd0:	461a      	mov	r2, r3
 8016cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cd4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016cd8:	4413      	add	r3, r2
 8016cda:	7efa      	ldrb	r2, [r7, #27]
 8016cdc:	4910      	ldr	r1, [pc, #64]	; (8016d20 <tcp_slowtmr+0x28c>)
 8016cde:	5c8a      	ldrb	r2, [r1, r2]
 8016ce0:	4093      	lsls	r3, r2
 8016ce2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8016cea:	4293      	cmp	r3, r2
 8016cec:	dc1a      	bgt.n	8016d24 <tcp_slowtmr+0x290>
 8016cee:	697b      	ldr	r3, [r7, #20]
 8016cf0:	b21a      	sxth	r2, r3
 8016cf2:	e019      	b.n	8016d28 <tcp_slowtmr+0x294>
 8016cf4:	20014760 	.word	0x20014760
 8016cf8:	2000c7fa 	.word	0x2000c7fa
 8016cfc:	2001475c 	.word	0x2001475c
 8016d00:	08021f2c 	.word	0x08021f2c
 8016d04:	08022270 	.word	0x08022270
 8016d08:	08021f70 	.word	0x08021f70
 8016d0c:	0802229c 	.word	0x0802229c
 8016d10:	080222c8 	.word	0x080222c8
 8016d14:	080222f8 	.word	0x080222f8
 8016d18:	0802232c 	.word	0x0802232c
 8016d1c:	0807ac50 	.word	0x0807ac50
 8016d20:	0807ac40 	.word	0x0807ac40
 8016d24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8016d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d30:	2200      	movs	r2, #0
 8016d32:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8016d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016d40:	4293      	cmp	r3, r2
 8016d42:	bf28      	it	cs
 8016d44:	4613      	movcs	r3, r2
 8016d46:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8016d48:	8a7b      	ldrh	r3, [r7, #18]
 8016d4a:	085b      	lsrs	r3, r3, #1
 8016d4c:	b29a      	uxth	r2, r3
 8016d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8016d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d56:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016d5e:	005b      	lsls	r3, r3, #1
 8016d60:	b29b      	uxth	r3, r3
 8016d62:	429a      	cmp	r2, r3
 8016d64:	d206      	bcs.n	8016d74 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8016d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016d6a:	005b      	lsls	r3, r3, #1
 8016d6c:	b29a      	uxth	r2, r3
 8016d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d70:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8016d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d76:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8016d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8016d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d80:	2200      	movs	r2, #0
 8016d82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8016d86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d88:	f004 fd5c 	bl	801b844 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8016d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d8e:	7d1b      	ldrb	r3, [r3, #20]
 8016d90:	2b06      	cmp	r3, #6
 8016d92:	d111      	bne.n	8016db8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8016d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d96:	8b5b      	ldrh	r3, [r3, #26]
 8016d98:	f003 0310 	and.w	r3, r3, #16
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d00b      	beq.n	8016db8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016da0:	4b9d      	ldr	r3, [pc, #628]	; (8017018 <tcp_slowtmr+0x584>)
 8016da2:	681a      	ldr	r2, [r3, #0]
 8016da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016da6:	6a1b      	ldr	r3, [r3, #32]
 8016da8:	1ad3      	subs	r3, r2, r3
 8016daa:	2b28      	cmp	r3, #40	; 0x28
 8016dac:	d904      	bls.n	8016db8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8016dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016db2:	3301      	adds	r3, #1
 8016db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dba:	7a5b      	ldrb	r3, [r3, #9]
 8016dbc:	f003 0308 	and.w	r3, r3, #8
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d04c      	beq.n	8016e5e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8016dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016dc8:	2b04      	cmp	r3, #4
 8016dca:	d003      	beq.n	8016dd4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8016dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8016dd0:	2b07      	cmp	r3, #7
 8016dd2:	d144      	bne.n	8016e5e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016dd4:	4b90      	ldr	r3, [pc, #576]	; (8017018 <tcp_slowtmr+0x584>)
 8016dd6:	681a      	ldr	r2, [r3, #0]
 8016dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dda:	6a1b      	ldr	r3, [r3, #32]
 8016ddc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8016dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016de4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8016de8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8016dec:	498b      	ldr	r1, [pc, #556]	; (801701c <tcp_slowtmr+0x588>)
 8016dee:	fba1 1303 	umull	r1, r3, r1, r3
 8016df2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016df4:	429a      	cmp	r2, r3
 8016df6:	d90a      	bls.n	8016e0e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8016df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dfc:	3301      	adds	r3, #1
 8016dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8016e02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e06:	3301      	adds	r3, #1
 8016e08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016e0c:	e027      	b.n	8016e5e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016e0e:	4b82      	ldr	r3, [pc, #520]	; (8017018 <tcp_slowtmr+0x584>)
 8016e10:	681a      	ldr	r2, [r3, #0]
 8016e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e14:	6a1b      	ldr	r3, [r3, #32]
 8016e16:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e1a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e20:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016e24:	4618      	mov	r0, r3
 8016e26:	4b7e      	ldr	r3, [pc, #504]	; (8017020 <tcp_slowtmr+0x58c>)
 8016e28:	fb03 f300 	mul.w	r3, r3, r0
 8016e2c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8016e2e:	497b      	ldr	r1, [pc, #492]	; (801701c <tcp_slowtmr+0x588>)
 8016e30:	fba1 1303 	umull	r1, r3, r1, r3
 8016e34:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016e36:	429a      	cmp	r2, r3
 8016e38:	d911      	bls.n	8016e5e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8016e3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e3c:	f005 f808 	bl	801be50 <tcp_keepalive>
 8016e40:	4603      	mov	r3, r0
 8016e42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8016e46:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d107      	bne.n	8016e5e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8016e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e50:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016e54:	3301      	adds	r3, #1
 8016e56:	b2da      	uxtb	r2, r3
 8016e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e5a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8016e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d011      	beq.n	8016e8a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8016e66:	4b6c      	ldr	r3, [pc, #432]	; (8017018 <tcp_slowtmr+0x584>)
 8016e68:	681a      	ldr	r2, [r3, #0]
 8016e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e6c:	6a1b      	ldr	r3, [r3, #32]
 8016e6e:	1ad2      	subs	r2, r2, r3
 8016e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e72:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016e76:	4619      	mov	r1, r3
 8016e78:	460b      	mov	r3, r1
 8016e7a:	005b      	lsls	r3, r3, #1
 8016e7c:	440b      	add	r3, r1
 8016e7e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8016e80:	429a      	cmp	r2, r3
 8016e82:	d302      	bcc.n	8016e8a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8016e84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e86:	f000 fec7 	bl	8017c18 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8016e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e8c:	7d1b      	ldrb	r3, [r3, #20]
 8016e8e:	2b03      	cmp	r3, #3
 8016e90:	d10b      	bne.n	8016eaa <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016e92:	4b61      	ldr	r3, [pc, #388]	; (8017018 <tcp_slowtmr+0x584>)
 8016e94:	681a      	ldr	r2, [r3, #0]
 8016e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e98:	6a1b      	ldr	r3, [r3, #32]
 8016e9a:	1ad3      	subs	r3, r2, r3
 8016e9c:	2b28      	cmp	r3, #40	; 0x28
 8016e9e:	d904      	bls.n	8016eaa <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8016ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8016eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eac:	7d1b      	ldrb	r3, [r3, #20]
 8016eae:	2b09      	cmp	r3, #9
 8016eb0:	d10b      	bne.n	8016eca <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016eb2:	4b59      	ldr	r3, [pc, #356]	; (8017018 <tcp_slowtmr+0x584>)
 8016eb4:	681a      	ldr	r2, [r3, #0]
 8016eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eb8:	6a1b      	ldr	r3, [r3, #32]
 8016eba:	1ad3      	subs	r3, r2, r3
 8016ebc:	2bf0      	cmp	r3, #240	; 0xf0
 8016ebe:	d904      	bls.n	8016eca <tcp_slowtmr+0x436>
        ++pcb_remove;
 8016ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ec4:	3301      	adds	r3, #1
 8016ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d060      	beq.n	8016f94 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8016ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ed8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8016eda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016edc:	f000 fce8 	bl	80178b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8016ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d010      	beq.n	8016f08 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8016ee6:	4b4f      	ldr	r3, [pc, #316]	; (8017024 <tcp_slowtmr+0x590>)
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016eec:	429a      	cmp	r2, r3
 8016eee:	d106      	bne.n	8016efe <tcp_slowtmr+0x46a>
 8016ef0:	4b4d      	ldr	r3, [pc, #308]	; (8017028 <tcp_slowtmr+0x594>)
 8016ef2:	f240 526d 	movw	r2, #1389	; 0x56d
 8016ef6:	494d      	ldr	r1, [pc, #308]	; (801702c <tcp_slowtmr+0x598>)
 8016ef8:	484d      	ldr	r0, [pc, #308]	; (8017030 <tcp_slowtmr+0x59c>)
 8016efa:	f008 f827 	bl	801ef4c <iprintf>
        prev->next = pcb->next;
 8016efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f00:	68da      	ldr	r2, [r3, #12]
 8016f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f04:	60da      	str	r2, [r3, #12]
 8016f06:	e00f      	b.n	8016f28 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016f08:	4b46      	ldr	r3, [pc, #280]	; (8017024 <tcp_slowtmr+0x590>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f0e:	429a      	cmp	r2, r3
 8016f10:	d006      	beq.n	8016f20 <tcp_slowtmr+0x48c>
 8016f12:	4b45      	ldr	r3, [pc, #276]	; (8017028 <tcp_slowtmr+0x594>)
 8016f14:	f240 5271 	movw	r2, #1393	; 0x571
 8016f18:	4946      	ldr	r1, [pc, #280]	; (8017034 <tcp_slowtmr+0x5a0>)
 8016f1a:	4845      	ldr	r0, [pc, #276]	; (8017030 <tcp_slowtmr+0x59c>)
 8016f1c:	f008 f816 	bl	801ef4c <iprintf>
        tcp_active_pcbs = pcb->next;
 8016f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f22:	68db      	ldr	r3, [r3, #12]
 8016f24:	4a3f      	ldr	r2, [pc, #252]	; (8017024 <tcp_slowtmr+0x590>)
 8016f26:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8016f28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d013      	beq.n	8016f58 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f32:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8016f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f36:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016f38:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8016f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f3c:	3304      	adds	r3, #4
 8016f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f40:	8ad2      	ldrh	r2, [r2, #22]
 8016f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016f44:	8b09      	ldrh	r1, [r1, #24]
 8016f46:	9102      	str	r1, [sp, #8]
 8016f48:	9201      	str	r2, [sp, #4]
 8016f4a:	9300      	str	r3, [sp, #0]
 8016f4c:	462b      	mov	r3, r5
 8016f4e:	4622      	mov	r2, r4
 8016f50:	4601      	mov	r1, r0
 8016f52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f54:	f004 fec8 	bl	801bce8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8016f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f5a:	691b      	ldr	r3, [r3, #16]
 8016f5c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8016f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f60:	7d1b      	ldrb	r3, [r3, #20]
 8016f62:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f66:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f6a:	68db      	ldr	r3, [r3, #12]
 8016f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016f6e:	6838      	ldr	r0, [r7, #0]
 8016f70:	f7ff f838 	bl	8015fe4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8016f74:	4b30      	ldr	r3, [pc, #192]	; (8017038 <tcp_slowtmr+0x5a4>)
 8016f76:	2200      	movs	r2, #0
 8016f78:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d004      	beq.n	8016f8a <tcp_slowtmr+0x4f6>
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	f06f 010c 	mvn.w	r1, #12
 8016f86:	68b8      	ldr	r0, [r7, #8]
 8016f88:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016f8a:	4b2b      	ldr	r3, [pc, #172]	; (8017038 <tcp_slowtmr+0x5a4>)
 8016f8c:	781b      	ldrb	r3, [r3, #0]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d037      	beq.n	8017002 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8016f92:	e590      	b.n	8016ab6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8016f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f9a:	68db      	ldr	r3, [r3, #12]
 8016f9c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8016f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa0:	7f1b      	ldrb	r3, [r3, #28]
 8016fa2:	3301      	adds	r3, #1
 8016fa4:	b2da      	uxtb	r2, r3
 8016fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8016faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fac:	7f1a      	ldrb	r2, [r3, #28]
 8016fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb0:	7f5b      	ldrb	r3, [r3, #29]
 8016fb2:	429a      	cmp	r2, r3
 8016fb4:	d325      	bcc.n	8017002 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8016fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb8:	2200      	movs	r2, #0
 8016fba:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8016fbc:	4b1e      	ldr	r3, [pc, #120]	; (8017038 <tcp_slowtmr+0x5a4>)
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8016fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d00b      	beq.n	8016fe4 <tcp_slowtmr+0x550>
 8016fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016fd4:	6912      	ldr	r2, [r2, #16]
 8016fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016fd8:	4610      	mov	r0, r2
 8016fda:	4798      	blx	r3
 8016fdc:	4603      	mov	r3, r0
 8016fde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8016fe2:	e002      	b.n	8016fea <tcp_slowtmr+0x556>
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8016fea:	4b13      	ldr	r3, [pc, #76]	; (8017038 <tcp_slowtmr+0x5a4>)
 8016fec:	781b      	ldrb	r3, [r3, #0]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d000      	beq.n	8016ff4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8016ff2:	e560      	b.n	8016ab6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8016ff4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d102      	bne.n	8017002 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8016ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ffe:	f004 f8bf 	bl	801b180 <tcp_output>
  while (pcb != NULL) {
 8017002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017004:	2b00      	cmp	r3, #0
 8017006:	f47f ad5c 	bne.w	8016ac2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801700a:	2300      	movs	r3, #0
 801700c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801700e:	4b0b      	ldr	r3, [pc, #44]	; (801703c <tcp_slowtmr+0x5a8>)
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017014:	e067      	b.n	80170e6 <tcp_slowtmr+0x652>
 8017016:	bf00      	nop
 8017018:	20014760 	.word	0x20014760
 801701c:	10624dd3 	.word	0x10624dd3
 8017020:	000124f8 	.word	0x000124f8
 8017024:	2001475c 	.word	0x2001475c
 8017028:	08021f2c 	.word	0x08021f2c
 801702c:	08022364 	.word	0x08022364
 8017030:	08021f70 	.word	0x08021f70
 8017034:	08022390 	.word	0x08022390
 8017038:	20014758 	.word	0x20014758
 801703c:	2001476c 	.word	0x2001476c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017042:	7d1b      	ldrb	r3, [r3, #20]
 8017044:	2b0a      	cmp	r3, #10
 8017046:	d006      	beq.n	8017056 <tcp_slowtmr+0x5c2>
 8017048:	4b2b      	ldr	r3, [pc, #172]	; (80170f8 <tcp_slowtmr+0x664>)
 801704a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801704e:	492b      	ldr	r1, [pc, #172]	; (80170fc <tcp_slowtmr+0x668>)
 8017050:	482b      	ldr	r0, [pc, #172]	; (8017100 <tcp_slowtmr+0x66c>)
 8017052:	f007 ff7b 	bl	801ef4c <iprintf>
    pcb_remove = 0;
 8017056:	2300      	movs	r3, #0
 8017058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801705c:	4b29      	ldr	r3, [pc, #164]	; (8017104 <tcp_slowtmr+0x670>)
 801705e:	681a      	ldr	r2, [r3, #0]
 8017060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017062:	6a1b      	ldr	r3, [r3, #32]
 8017064:	1ad3      	subs	r3, r2, r3
 8017066:	2bf0      	cmp	r3, #240	; 0xf0
 8017068:	d904      	bls.n	8017074 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801706a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801706e:	3301      	adds	r3, #1
 8017070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017078:	2b00      	cmp	r3, #0
 801707a:	d02f      	beq.n	80170dc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801707c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801707e:	f000 fc17 	bl	80178b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8017082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017084:	2b00      	cmp	r3, #0
 8017086:	d010      	beq.n	80170aa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017088:	4b1f      	ldr	r3, [pc, #124]	; (8017108 <tcp_slowtmr+0x674>)
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801708e:	429a      	cmp	r2, r3
 8017090:	d106      	bne.n	80170a0 <tcp_slowtmr+0x60c>
 8017092:	4b19      	ldr	r3, [pc, #100]	; (80170f8 <tcp_slowtmr+0x664>)
 8017094:	f240 52af 	movw	r2, #1455	; 0x5af
 8017098:	491c      	ldr	r1, [pc, #112]	; (801710c <tcp_slowtmr+0x678>)
 801709a:	4819      	ldr	r0, [pc, #100]	; (8017100 <tcp_slowtmr+0x66c>)
 801709c:	f007 ff56 	bl	801ef4c <iprintf>
        prev->next = pcb->next;
 80170a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170a2:	68da      	ldr	r2, [r3, #12]
 80170a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170a6:	60da      	str	r2, [r3, #12]
 80170a8:	e00f      	b.n	80170ca <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80170aa:	4b17      	ldr	r3, [pc, #92]	; (8017108 <tcp_slowtmr+0x674>)
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80170b0:	429a      	cmp	r2, r3
 80170b2:	d006      	beq.n	80170c2 <tcp_slowtmr+0x62e>
 80170b4:	4b10      	ldr	r3, [pc, #64]	; (80170f8 <tcp_slowtmr+0x664>)
 80170b6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80170ba:	4915      	ldr	r1, [pc, #84]	; (8017110 <tcp_slowtmr+0x67c>)
 80170bc:	4810      	ldr	r0, [pc, #64]	; (8017100 <tcp_slowtmr+0x66c>)
 80170be:	f007 ff45 	bl	801ef4c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80170c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c4:	68db      	ldr	r3, [r3, #12]
 80170c6:	4a10      	ldr	r2, [pc, #64]	; (8017108 <tcp_slowtmr+0x674>)
 80170c8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80170ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170cc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80170ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d0:	68db      	ldr	r3, [r3, #12]
 80170d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80170d4:	69f8      	ldr	r0, [r7, #28]
 80170d6:	f7fe ff85 	bl	8015fe4 <tcp_free>
 80170da:	e004      	b.n	80170e6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80170dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170de:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80170e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e2:	68db      	ldr	r3, [r3, #12]
 80170e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80170e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d1a9      	bne.n	8017040 <tcp_slowtmr+0x5ac>
    }
  }
}
 80170ec:	bf00      	nop
 80170ee:	bf00      	nop
 80170f0:	3730      	adds	r7, #48	; 0x30
 80170f2:	46bd      	mov	sp, r7
 80170f4:	bdb0      	pop	{r4, r5, r7, pc}
 80170f6:	bf00      	nop
 80170f8:	08021f2c 	.word	0x08021f2c
 80170fc:	080223bc 	.word	0x080223bc
 8017100:	08021f70 	.word	0x08021f70
 8017104:	20014760 	.word	0x20014760
 8017108:	2001476c 	.word	0x2001476c
 801710c:	080223ec 	.word	0x080223ec
 8017110:	08022414 	.word	0x08022414

08017114 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8017114:	b580      	push	{r7, lr}
 8017116:	b082      	sub	sp, #8
 8017118:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801711a:	4b2d      	ldr	r3, [pc, #180]	; (80171d0 <tcp_fasttmr+0xbc>)
 801711c:	781b      	ldrb	r3, [r3, #0]
 801711e:	3301      	adds	r3, #1
 8017120:	b2da      	uxtb	r2, r3
 8017122:	4b2b      	ldr	r3, [pc, #172]	; (80171d0 <tcp_fasttmr+0xbc>)
 8017124:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8017126:	4b2b      	ldr	r3, [pc, #172]	; (80171d4 <tcp_fasttmr+0xc0>)
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801712c:	e048      	b.n	80171c0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	7f9a      	ldrb	r2, [r3, #30]
 8017132:	4b27      	ldr	r3, [pc, #156]	; (80171d0 <tcp_fasttmr+0xbc>)
 8017134:	781b      	ldrb	r3, [r3, #0]
 8017136:	429a      	cmp	r2, r3
 8017138:	d03f      	beq.n	80171ba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801713a:	4b25      	ldr	r3, [pc, #148]	; (80171d0 <tcp_fasttmr+0xbc>)
 801713c:	781a      	ldrb	r2, [r3, #0]
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	8b5b      	ldrh	r3, [r3, #26]
 8017146:	f003 0301 	and.w	r3, r3, #1
 801714a:	2b00      	cmp	r3, #0
 801714c:	d010      	beq.n	8017170 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	8b5b      	ldrh	r3, [r3, #26]
 8017152:	f043 0302 	orr.w	r3, r3, #2
 8017156:	b29a      	uxth	r2, r3
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801715c:	6878      	ldr	r0, [r7, #4]
 801715e:	f004 f80f 	bl	801b180 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	8b5b      	ldrh	r3, [r3, #26]
 8017166:	f023 0303 	bic.w	r3, r3, #3
 801716a:	b29a      	uxth	r2, r3
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	8b5b      	ldrh	r3, [r3, #26]
 8017174:	f003 0308 	and.w	r3, r3, #8
 8017178:	2b00      	cmp	r3, #0
 801717a:	d009      	beq.n	8017190 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	8b5b      	ldrh	r3, [r3, #26]
 8017180:	f023 0308 	bic.w	r3, r3, #8
 8017184:	b29a      	uxth	r2, r3
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801718a:	6878      	ldr	r0, [r7, #4]
 801718c:	f7ff f8be 	bl	801630c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	68db      	ldr	r3, [r3, #12]
 8017194:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801719a:	2b00      	cmp	r3, #0
 801719c:	d00a      	beq.n	80171b4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801719e:	4b0e      	ldr	r3, [pc, #56]	; (80171d8 <tcp_fasttmr+0xc4>)
 80171a0:	2200      	movs	r2, #0
 80171a2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80171a4:	6878      	ldr	r0, [r7, #4]
 80171a6:	f000 f819 	bl	80171dc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80171aa:	4b0b      	ldr	r3, [pc, #44]	; (80171d8 <tcp_fasttmr+0xc4>)
 80171ac:	781b      	ldrb	r3, [r3, #0]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d000      	beq.n	80171b4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80171b2:	e7b8      	b.n	8017126 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80171b4:	683b      	ldr	r3, [r7, #0]
 80171b6:	607b      	str	r3, [r7, #4]
 80171b8:	e002      	b.n	80171c0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	68db      	ldr	r3, [r3, #12]
 80171be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d1b3      	bne.n	801712e <tcp_fasttmr+0x1a>
    }
  }
}
 80171c6:	bf00      	nop
 80171c8:	bf00      	nop
 80171ca:	3708      	adds	r7, #8
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bd80      	pop	{r7, pc}
 80171d0:	2000c7fa 	.word	0x2000c7fa
 80171d4:	2001475c 	.word	0x2001475c
 80171d8:	20014758 	.word	0x20014758

080171dc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80171dc:	b590      	push	{r4, r7, lr}
 80171de:	b085      	sub	sp, #20
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d109      	bne.n	80171fe <tcp_process_refused_data+0x22>
 80171ea:	4b37      	ldr	r3, [pc, #220]	; (80172c8 <tcp_process_refused_data+0xec>)
 80171ec:	f240 6209 	movw	r2, #1545	; 0x609
 80171f0:	4936      	ldr	r1, [pc, #216]	; (80172cc <tcp_process_refused_data+0xf0>)
 80171f2:	4837      	ldr	r0, [pc, #220]	; (80172d0 <tcp_process_refused_data+0xf4>)
 80171f4:	f007 feaa 	bl	801ef4c <iprintf>
 80171f8:	f06f 030f 	mvn.w	r3, #15
 80171fc:	e060      	b.n	80172c0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017202:	7b5b      	ldrb	r3, [r3, #13]
 8017204:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801720a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	2200      	movs	r2, #0
 8017210:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017218:	2b00      	cmp	r3, #0
 801721a:	d00b      	beq.n	8017234 <tcp_process_refused_data+0x58>
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	6918      	ldr	r0, [r3, #16]
 8017226:	2300      	movs	r3, #0
 8017228:	68ba      	ldr	r2, [r7, #8]
 801722a:	6879      	ldr	r1, [r7, #4]
 801722c:	47a0      	blx	r4
 801722e:	4603      	mov	r3, r0
 8017230:	73fb      	strb	r3, [r7, #15]
 8017232:	e007      	b.n	8017244 <tcp_process_refused_data+0x68>
 8017234:	2300      	movs	r3, #0
 8017236:	68ba      	ldr	r2, [r7, #8]
 8017238:	6879      	ldr	r1, [r7, #4]
 801723a:	2000      	movs	r0, #0
 801723c:	f000 f8c2 	bl	80173c4 <tcp_recv_null>
 8017240:	4603      	mov	r3, r0
 8017242:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8017244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d12a      	bne.n	80172a2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801724c:	7bbb      	ldrb	r3, [r7, #14]
 801724e:	f003 0320 	and.w	r3, r3, #32
 8017252:	2b00      	cmp	r3, #0
 8017254:	d033      	beq.n	80172be <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801725a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801725e:	d005      	beq.n	801726c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017264:	3301      	adds	r3, #1
 8017266:	b29a      	uxth	r2, r3
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017272:	2b00      	cmp	r3, #0
 8017274:	d00b      	beq.n	801728e <tcp_process_refused_data+0xb2>
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	6918      	ldr	r0, [r3, #16]
 8017280:	2300      	movs	r3, #0
 8017282:	2200      	movs	r2, #0
 8017284:	6879      	ldr	r1, [r7, #4]
 8017286:	47a0      	blx	r4
 8017288:	4603      	mov	r3, r0
 801728a:	73fb      	strb	r3, [r7, #15]
 801728c:	e001      	b.n	8017292 <tcp_process_refused_data+0xb6>
 801728e:	2300      	movs	r3, #0
 8017290:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8017292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017296:	f113 0f0d 	cmn.w	r3, #13
 801729a:	d110      	bne.n	80172be <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801729c:	f06f 030c 	mvn.w	r3, #12
 80172a0:	e00e      	b.n	80172c0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80172a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172a6:	f113 0f0d 	cmn.w	r3, #13
 80172aa:	d102      	bne.n	80172b2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80172ac:	f06f 030c 	mvn.w	r3, #12
 80172b0:	e006      	b.n	80172c0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	68ba      	ldr	r2, [r7, #8]
 80172b6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80172b8:	f06f 0304 	mvn.w	r3, #4
 80172bc:	e000      	b.n	80172c0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80172be:	2300      	movs	r3, #0
}
 80172c0:	4618      	mov	r0, r3
 80172c2:	3714      	adds	r7, #20
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd90      	pop	{r4, r7, pc}
 80172c8:	08021f2c 	.word	0x08021f2c
 80172cc:	0802243c 	.word	0x0802243c
 80172d0:	08021f70 	.word	0x08021f70

080172d4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b084      	sub	sp, #16
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80172dc:	e007      	b.n	80172ee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80172e4:	6878      	ldr	r0, [r7, #4]
 80172e6:	f000 f80a 	bl	80172fe <tcp_seg_free>
    seg = next;
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d1f4      	bne.n	80172de <tcp_segs_free+0xa>
  }
}
 80172f4:	bf00      	nop
 80172f6:	bf00      	nop
 80172f8:	3710      	adds	r7, #16
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bd80      	pop	{r7, pc}

080172fe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80172fe:	b580      	push	{r7, lr}
 8017300:	b082      	sub	sp, #8
 8017302:	af00      	add	r7, sp, #0
 8017304:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	2b00      	cmp	r3, #0
 801730a:	d00c      	beq.n	8017326 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	685b      	ldr	r3, [r3, #4]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d004      	beq.n	801731e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	685b      	ldr	r3, [r3, #4]
 8017318:	4618      	mov	r0, r3
 801731a:	f7fe fbb7 	bl	8015a8c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801731e:	6879      	ldr	r1, [r7, #4]
 8017320:	2003      	movs	r0, #3
 8017322:	f7fd fcfd 	bl	8014d20 <memp_free>
  }
}
 8017326:	bf00      	nop
 8017328:	3708      	adds	r7, #8
 801732a:	46bd      	mov	sp, r7
 801732c:	bd80      	pop	{r7, pc}
	...

08017330 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b082      	sub	sp, #8
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
 8017338:	460b      	mov	r3, r1
 801733a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d107      	bne.n	8017352 <tcp_setprio+0x22>
 8017342:	4b07      	ldr	r3, [pc, #28]	; (8017360 <tcp_setprio+0x30>)
 8017344:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8017348:	4906      	ldr	r1, [pc, #24]	; (8017364 <tcp_setprio+0x34>)
 801734a:	4807      	ldr	r0, [pc, #28]	; (8017368 <tcp_setprio+0x38>)
 801734c:	f007 fdfe 	bl	801ef4c <iprintf>
 8017350:	e002      	b.n	8017358 <tcp_setprio+0x28>

  pcb->prio = prio;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	78fa      	ldrb	r2, [r7, #3]
 8017356:	755a      	strb	r2, [r3, #21]
}
 8017358:	3708      	adds	r7, #8
 801735a:	46bd      	mov	sp, r7
 801735c:	bd80      	pop	{r7, pc}
 801735e:	bf00      	nop
 8017360:	08021f2c 	.word	0x08021f2c
 8017364:	08022464 	.word	0x08022464
 8017368:	08021f70 	.word	0x08021f70

0801736c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b084      	sub	sp, #16
 8017370:	af00      	add	r7, sp, #0
 8017372:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d106      	bne.n	8017388 <tcp_seg_copy+0x1c>
 801737a:	4b0f      	ldr	r3, [pc, #60]	; (80173b8 <tcp_seg_copy+0x4c>)
 801737c:	f240 6282 	movw	r2, #1666	; 0x682
 8017380:	490e      	ldr	r1, [pc, #56]	; (80173bc <tcp_seg_copy+0x50>)
 8017382:	480f      	ldr	r0, [pc, #60]	; (80173c0 <tcp_seg_copy+0x54>)
 8017384:	f007 fde2 	bl	801ef4c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017388:	2003      	movs	r0, #3
 801738a:	f7fd fc77 	bl	8014c7c <memp_malloc>
 801738e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d101      	bne.n	801739a <tcp_seg_copy+0x2e>
    return NULL;
 8017396:	2300      	movs	r3, #0
 8017398:	e00a      	b.n	80173b0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801739a:	2210      	movs	r2, #16
 801739c:	6879      	ldr	r1, [r7, #4]
 801739e:	68f8      	ldr	r0, [r7, #12]
 80173a0:	f007 fda4 	bl	801eeec <memcpy>
  pbuf_ref(cseg->p);
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	685b      	ldr	r3, [r3, #4]
 80173a8:	4618      	mov	r0, r3
 80173aa:	f7fe fc15 	bl	8015bd8 <pbuf_ref>
  return cseg;
 80173ae:	68fb      	ldr	r3, [r7, #12]
}
 80173b0:	4618      	mov	r0, r3
 80173b2:	3710      	adds	r7, #16
 80173b4:	46bd      	mov	sp, r7
 80173b6:	bd80      	pop	{r7, pc}
 80173b8:	08021f2c 	.word	0x08021f2c
 80173bc:	08022480 	.word	0x08022480
 80173c0:	08021f70 	.word	0x08021f70

080173c4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b084      	sub	sp, #16
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	60f8      	str	r0, [r7, #12]
 80173cc:	60b9      	str	r1, [r7, #8]
 80173ce:	607a      	str	r2, [r7, #4]
 80173d0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80173d2:	68bb      	ldr	r3, [r7, #8]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d109      	bne.n	80173ec <tcp_recv_null+0x28>
 80173d8:	4b12      	ldr	r3, [pc, #72]	; (8017424 <tcp_recv_null+0x60>)
 80173da:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80173de:	4912      	ldr	r1, [pc, #72]	; (8017428 <tcp_recv_null+0x64>)
 80173e0:	4812      	ldr	r0, [pc, #72]	; (801742c <tcp_recv_null+0x68>)
 80173e2:	f007 fdb3 	bl	801ef4c <iprintf>
 80173e6:	f06f 030f 	mvn.w	r3, #15
 80173ea:	e016      	b.n	801741a <tcp_recv_null+0x56>

  if (p != NULL) {
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d009      	beq.n	8017406 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	891b      	ldrh	r3, [r3, #8]
 80173f6:	4619      	mov	r1, r3
 80173f8:	68b8      	ldr	r0, [r7, #8]
 80173fa:	f7ff fab5 	bl	8016968 <tcp_recved>
    pbuf_free(p);
 80173fe:	6878      	ldr	r0, [r7, #4]
 8017400:	f7fe fb44 	bl	8015a8c <pbuf_free>
 8017404:	e008      	b.n	8017418 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8017406:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d104      	bne.n	8017418 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801740e:	68b8      	ldr	r0, [r7, #8]
 8017410:	f7fe ffe6 	bl	80163e0 <tcp_close>
 8017414:	4603      	mov	r3, r0
 8017416:	e000      	b.n	801741a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8017418:	2300      	movs	r3, #0
}
 801741a:	4618      	mov	r0, r3
 801741c:	3710      	adds	r7, #16
 801741e:	46bd      	mov	sp, r7
 8017420:	bd80      	pop	{r7, pc}
 8017422:	bf00      	nop
 8017424:	08021f2c 	.word	0x08021f2c
 8017428:	0802249c 	.word	0x0802249c
 801742c:	08021f70 	.word	0x08021f70

08017430 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b086      	sub	sp, #24
 8017434:	af00      	add	r7, sp, #0
 8017436:	4603      	mov	r3, r0
 8017438:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801743a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801743e:	2b00      	cmp	r3, #0
 8017440:	db01      	blt.n	8017446 <tcp_kill_prio+0x16>
 8017442:	79fb      	ldrb	r3, [r7, #7]
 8017444:	e000      	b.n	8017448 <tcp_kill_prio+0x18>
 8017446:	237f      	movs	r3, #127	; 0x7f
 8017448:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801744a:	7afb      	ldrb	r3, [r7, #11]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d034      	beq.n	80174ba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8017450:	7afb      	ldrb	r3, [r7, #11]
 8017452:	3b01      	subs	r3, #1
 8017454:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8017456:	2300      	movs	r3, #0
 8017458:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801745a:	2300      	movs	r3, #0
 801745c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801745e:	4b19      	ldr	r3, [pc, #100]	; (80174c4 <tcp_kill_prio+0x94>)
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	617b      	str	r3, [r7, #20]
 8017464:	e01f      	b.n	80174a6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8017466:	697b      	ldr	r3, [r7, #20]
 8017468:	7d5b      	ldrb	r3, [r3, #21]
 801746a:	7afa      	ldrb	r2, [r7, #11]
 801746c:	429a      	cmp	r2, r3
 801746e:	d80c      	bhi.n	801748a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017470:	697b      	ldr	r3, [r7, #20]
 8017472:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8017474:	7afa      	ldrb	r2, [r7, #11]
 8017476:	429a      	cmp	r2, r3
 8017478:	d112      	bne.n	80174a0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801747a:	4b13      	ldr	r3, [pc, #76]	; (80174c8 <tcp_kill_prio+0x98>)
 801747c:	681a      	ldr	r2, [r3, #0]
 801747e:	697b      	ldr	r3, [r7, #20]
 8017480:	6a1b      	ldr	r3, [r3, #32]
 8017482:	1ad3      	subs	r3, r2, r3
 8017484:	68fa      	ldr	r2, [r7, #12]
 8017486:	429a      	cmp	r2, r3
 8017488:	d80a      	bhi.n	80174a0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801748a:	4b0f      	ldr	r3, [pc, #60]	; (80174c8 <tcp_kill_prio+0x98>)
 801748c:	681a      	ldr	r2, [r3, #0]
 801748e:	697b      	ldr	r3, [r7, #20]
 8017490:	6a1b      	ldr	r3, [r3, #32]
 8017492:	1ad3      	subs	r3, r2, r3
 8017494:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8017496:	697b      	ldr	r3, [r7, #20]
 8017498:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801749a:	697b      	ldr	r3, [r7, #20]
 801749c:	7d5b      	ldrb	r3, [r3, #21]
 801749e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80174a0:	697b      	ldr	r3, [r7, #20]
 80174a2:	68db      	ldr	r3, [r3, #12]
 80174a4:	617b      	str	r3, [r7, #20]
 80174a6:	697b      	ldr	r3, [r7, #20]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d1dc      	bne.n	8017466 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80174ac:	693b      	ldr	r3, [r7, #16]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d004      	beq.n	80174bc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80174b2:	6938      	ldr	r0, [r7, #16]
 80174b4:	f7ff f87e 	bl	80165b4 <tcp_abort>
 80174b8:	e000      	b.n	80174bc <tcp_kill_prio+0x8c>
    return;
 80174ba:	bf00      	nop
  }
}
 80174bc:	3718      	adds	r7, #24
 80174be:	46bd      	mov	sp, r7
 80174c0:	bd80      	pop	{r7, pc}
 80174c2:	bf00      	nop
 80174c4:	2001475c 	.word	0x2001475c
 80174c8:	20014760 	.word	0x20014760

080174cc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b086      	sub	sp, #24
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	4603      	mov	r3, r0
 80174d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80174d6:	79fb      	ldrb	r3, [r7, #7]
 80174d8:	2b08      	cmp	r3, #8
 80174da:	d009      	beq.n	80174f0 <tcp_kill_state+0x24>
 80174dc:	79fb      	ldrb	r3, [r7, #7]
 80174de:	2b09      	cmp	r3, #9
 80174e0:	d006      	beq.n	80174f0 <tcp_kill_state+0x24>
 80174e2:	4b1a      	ldr	r3, [pc, #104]	; (801754c <tcp_kill_state+0x80>)
 80174e4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80174e8:	4919      	ldr	r1, [pc, #100]	; (8017550 <tcp_kill_state+0x84>)
 80174ea:	481a      	ldr	r0, [pc, #104]	; (8017554 <tcp_kill_state+0x88>)
 80174ec:	f007 fd2e 	bl	801ef4c <iprintf>

  inactivity = 0;
 80174f0:	2300      	movs	r3, #0
 80174f2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80174f4:	2300      	movs	r3, #0
 80174f6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80174f8:	4b17      	ldr	r3, [pc, #92]	; (8017558 <tcp_kill_state+0x8c>)
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	617b      	str	r3, [r7, #20]
 80174fe:	e017      	b.n	8017530 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017500:	697b      	ldr	r3, [r7, #20]
 8017502:	7d1b      	ldrb	r3, [r3, #20]
 8017504:	79fa      	ldrb	r2, [r7, #7]
 8017506:	429a      	cmp	r2, r3
 8017508:	d10f      	bne.n	801752a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801750a:	4b14      	ldr	r3, [pc, #80]	; (801755c <tcp_kill_state+0x90>)
 801750c:	681a      	ldr	r2, [r3, #0]
 801750e:	697b      	ldr	r3, [r7, #20]
 8017510:	6a1b      	ldr	r3, [r3, #32]
 8017512:	1ad3      	subs	r3, r2, r3
 8017514:	68fa      	ldr	r2, [r7, #12]
 8017516:	429a      	cmp	r2, r3
 8017518:	d807      	bhi.n	801752a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801751a:	4b10      	ldr	r3, [pc, #64]	; (801755c <tcp_kill_state+0x90>)
 801751c:	681a      	ldr	r2, [r3, #0]
 801751e:	697b      	ldr	r3, [r7, #20]
 8017520:	6a1b      	ldr	r3, [r3, #32]
 8017522:	1ad3      	subs	r3, r2, r3
 8017524:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017526:	697b      	ldr	r3, [r7, #20]
 8017528:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801752a:	697b      	ldr	r3, [r7, #20]
 801752c:	68db      	ldr	r3, [r3, #12]
 801752e:	617b      	str	r3, [r7, #20]
 8017530:	697b      	ldr	r3, [r7, #20]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d1e4      	bne.n	8017500 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017536:	693b      	ldr	r3, [r7, #16]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d003      	beq.n	8017544 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801753c:	2100      	movs	r1, #0
 801753e:	6938      	ldr	r0, [r7, #16]
 8017540:	f7fe ff7a 	bl	8016438 <tcp_abandon>
  }
}
 8017544:	bf00      	nop
 8017546:	3718      	adds	r7, #24
 8017548:	46bd      	mov	sp, r7
 801754a:	bd80      	pop	{r7, pc}
 801754c:	08021f2c 	.word	0x08021f2c
 8017550:	080224b8 	.word	0x080224b8
 8017554:	08021f70 	.word	0x08021f70
 8017558:	2001475c 	.word	0x2001475c
 801755c:	20014760 	.word	0x20014760

08017560 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b084      	sub	sp, #16
 8017564:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8017566:	2300      	movs	r3, #0
 8017568:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801756a:	2300      	movs	r3, #0
 801756c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801756e:	4b12      	ldr	r3, [pc, #72]	; (80175b8 <tcp_kill_timewait+0x58>)
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	60fb      	str	r3, [r7, #12]
 8017574:	e012      	b.n	801759c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017576:	4b11      	ldr	r3, [pc, #68]	; (80175bc <tcp_kill_timewait+0x5c>)
 8017578:	681a      	ldr	r2, [r3, #0]
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	6a1b      	ldr	r3, [r3, #32]
 801757e:	1ad3      	subs	r3, r2, r3
 8017580:	687a      	ldr	r2, [r7, #4]
 8017582:	429a      	cmp	r2, r3
 8017584:	d807      	bhi.n	8017596 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8017586:	4b0d      	ldr	r3, [pc, #52]	; (80175bc <tcp_kill_timewait+0x5c>)
 8017588:	681a      	ldr	r2, [r3, #0]
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	6a1b      	ldr	r3, [r3, #32]
 801758e:	1ad3      	subs	r3, r2, r3
 8017590:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	68db      	ldr	r3, [r3, #12]
 801759a:	60fb      	str	r3, [r7, #12]
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d1e9      	bne.n	8017576 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80175a2:	68bb      	ldr	r3, [r7, #8]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d002      	beq.n	80175ae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80175a8:	68b8      	ldr	r0, [r7, #8]
 80175aa:	f7ff f803 	bl	80165b4 <tcp_abort>
  }
}
 80175ae:	bf00      	nop
 80175b0:	3710      	adds	r7, #16
 80175b2:	46bd      	mov	sp, r7
 80175b4:	bd80      	pop	{r7, pc}
 80175b6:	bf00      	nop
 80175b8:	2001476c 	.word	0x2001476c
 80175bc:	20014760 	.word	0x20014760

080175c0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b082      	sub	sp, #8
 80175c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80175c6:	4b10      	ldr	r3, [pc, #64]	; (8017608 <tcp_handle_closepend+0x48>)
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80175cc:	e014      	b.n	80175f8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	68db      	ldr	r3, [r3, #12]
 80175d2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	8b5b      	ldrh	r3, [r3, #26]
 80175d8:	f003 0308 	and.w	r3, r3, #8
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d009      	beq.n	80175f4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	8b5b      	ldrh	r3, [r3, #26]
 80175e4:	f023 0308 	bic.w	r3, r3, #8
 80175e8:	b29a      	uxth	r2, r3
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80175ee:	6878      	ldr	r0, [r7, #4]
 80175f0:	f7fe fe8c 	bl	801630c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d1e7      	bne.n	80175ce <tcp_handle_closepend+0xe>
  }
}
 80175fe:	bf00      	nop
 8017600:	bf00      	nop
 8017602:	3708      	adds	r7, #8
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}
 8017608:	2001475c 	.word	0x2001475c

0801760c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801760c:	b580      	push	{r7, lr}
 801760e:	b084      	sub	sp, #16
 8017610:	af00      	add	r7, sp, #0
 8017612:	4603      	mov	r3, r0
 8017614:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017616:	2001      	movs	r0, #1
 8017618:	f7fd fb30 	bl	8014c7c <memp_malloc>
 801761c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d126      	bne.n	8017672 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017624:	f7ff ffcc 	bl	80175c0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017628:	f7ff ff9a 	bl	8017560 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801762c:	2001      	movs	r0, #1
 801762e:	f7fd fb25 	bl	8014c7c <memp_malloc>
 8017632:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d11b      	bne.n	8017672 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801763a:	2009      	movs	r0, #9
 801763c:	f7ff ff46 	bl	80174cc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017640:	2001      	movs	r0, #1
 8017642:	f7fd fb1b 	bl	8014c7c <memp_malloc>
 8017646:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d111      	bne.n	8017672 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801764e:	2008      	movs	r0, #8
 8017650:	f7ff ff3c 	bl	80174cc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017654:	2001      	movs	r0, #1
 8017656:	f7fd fb11 	bl	8014c7c <memp_malloc>
 801765a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d107      	bne.n	8017672 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8017662:	79fb      	ldrb	r3, [r7, #7]
 8017664:	4618      	mov	r0, r3
 8017666:	f7ff fee3 	bl	8017430 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801766a:	2001      	movs	r0, #1
 801766c:	f7fd fb06 	bl	8014c7c <memp_malloc>
 8017670:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d03f      	beq.n	80176f8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017678:	229c      	movs	r2, #156	; 0x9c
 801767a:	2100      	movs	r1, #0
 801767c:	68f8      	ldr	r0, [r7, #12]
 801767e:	f007 fc5d 	bl	801ef3c <memset>
    pcb->prio = prio;
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	79fa      	ldrb	r2, [r7, #7]
 8017686:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801768e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017698:	855a      	strh	r2, [r3, #42]	; 0x2a
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	22ff      	movs	r2, #255	; 0xff
 80176a6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80176ae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	2206      	movs	r2, #6
 80176b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	2206      	movs	r2, #6
 80176bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80176c4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	2201      	movs	r2, #1
 80176ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80176ce:	4b0d      	ldr	r3, [pc, #52]	; (8017704 <tcp_alloc+0xf8>)
 80176d0:	681a      	ldr	r2, [r3, #0]
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80176d6:	4b0c      	ldr	r3, [pc, #48]	; (8017708 <tcp_alloc+0xfc>)
 80176d8:	781a      	ldrb	r2, [r3, #0]
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80176e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	4a08      	ldr	r2, [pc, #32]	; (801770c <tcp_alloc+0x100>)
 80176ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	4a07      	ldr	r2, [pc, #28]	; (8017710 <tcp_alloc+0x104>)
 80176f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80176f8:	68fb      	ldr	r3, [r7, #12]
}
 80176fa:	4618      	mov	r0, r3
 80176fc:	3710      	adds	r7, #16
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}
 8017702:	bf00      	nop
 8017704:	20014760 	.word	0x20014760
 8017708:	2000c7fa 	.word	0x2000c7fa
 801770c:	080173c5 	.word	0x080173c5
 8017710:	006ddd00 	.word	0x006ddd00

08017714 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017714:	b580      	push	{r7, lr}
 8017716:	b084      	sub	sp, #16
 8017718:	af00      	add	r7, sp, #0
 801771a:	4603      	mov	r3, r0
 801771c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801771e:	2040      	movs	r0, #64	; 0x40
 8017720:	f7ff ff74 	bl	801760c <tcp_alloc>
 8017724:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017726:	68fb      	ldr	r3, [r7, #12]
}
 8017728:	4618      	mov	r0, r3
 801772a:	3710      	adds	r7, #16
 801772c:	46bd      	mov	sp, r7
 801772e:	bd80      	pop	{r7, pc}

08017730 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8017730:	b480      	push	{r7}
 8017732:	b083      	sub	sp, #12
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
 8017738:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d002      	beq.n	8017746 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	683a      	ldr	r2, [r7, #0]
 8017744:	611a      	str	r2, [r3, #16]
  }
}
 8017746:	bf00      	nop
 8017748:	370c      	adds	r7, #12
 801774a:	46bd      	mov	sp, r7
 801774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017750:	4770      	bx	lr
	...

08017754 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017754:	b580      	push	{r7, lr}
 8017756:	b082      	sub	sp, #8
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
 801775c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d00e      	beq.n	8017782 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	7d1b      	ldrb	r3, [r3, #20]
 8017768:	2b01      	cmp	r3, #1
 801776a:	d106      	bne.n	801777a <tcp_recv+0x26>
 801776c:	4b07      	ldr	r3, [pc, #28]	; (801778c <tcp_recv+0x38>)
 801776e:	f240 72df 	movw	r2, #2015	; 0x7df
 8017772:	4907      	ldr	r1, [pc, #28]	; (8017790 <tcp_recv+0x3c>)
 8017774:	4807      	ldr	r0, [pc, #28]	; (8017794 <tcp_recv+0x40>)
 8017776:	f007 fbe9 	bl	801ef4c <iprintf>
    pcb->recv = recv;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	683a      	ldr	r2, [r7, #0]
 801777e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8017782:	bf00      	nop
 8017784:	3708      	adds	r7, #8
 8017786:	46bd      	mov	sp, r7
 8017788:	bd80      	pop	{r7, pc}
 801778a:	bf00      	nop
 801778c:	08021f2c 	.word	0x08021f2c
 8017790:	080224c8 	.word	0x080224c8
 8017794:	08021f70 	.word	0x08021f70

08017798 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b082      	sub	sp, #8
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
 80177a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d00e      	beq.n	80177c6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	7d1b      	ldrb	r3, [r3, #20]
 80177ac:	2b01      	cmp	r3, #1
 80177ae:	d106      	bne.n	80177be <tcp_sent+0x26>
 80177b0:	4b07      	ldr	r3, [pc, #28]	; (80177d0 <tcp_sent+0x38>)
 80177b2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80177b6:	4907      	ldr	r1, [pc, #28]	; (80177d4 <tcp_sent+0x3c>)
 80177b8:	4807      	ldr	r0, [pc, #28]	; (80177d8 <tcp_sent+0x40>)
 80177ba:	f007 fbc7 	bl	801ef4c <iprintf>
    pcb->sent = sent;
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	683a      	ldr	r2, [r7, #0]
 80177c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80177c6:	bf00      	nop
 80177c8:	3708      	adds	r7, #8
 80177ca:	46bd      	mov	sp, r7
 80177cc:	bd80      	pop	{r7, pc}
 80177ce:	bf00      	nop
 80177d0:	08021f2c 	.word	0x08021f2c
 80177d4:	080224f0 	.word	0x080224f0
 80177d8:	08021f70 	.word	0x08021f70

080177dc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b082      	sub	sp, #8
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	6078      	str	r0, [r7, #4]
 80177e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d00e      	beq.n	801780a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	7d1b      	ldrb	r3, [r3, #20]
 80177f0:	2b01      	cmp	r3, #1
 80177f2:	d106      	bne.n	8017802 <tcp_err+0x26>
 80177f4:	4b07      	ldr	r3, [pc, #28]	; (8017814 <tcp_err+0x38>)
 80177f6:	f640 020d 	movw	r2, #2061	; 0x80d
 80177fa:	4907      	ldr	r1, [pc, #28]	; (8017818 <tcp_err+0x3c>)
 80177fc:	4807      	ldr	r0, [pc, #28]	; (801781c <tcp_err+0x40>)
 80177fe:	f007 fba5 	bl	801ef4c <iprintf>
    pcb->errf = err;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	683a      	ldr	r2, [r7, #0]
 8017806:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801780a:	bf00      	nop
 801780c:	3708      	adds	r7, #8
 801780e:	46bd      	mov	sp, r7
 8017810:	bd80      	pop	{r7, pc}
 8017812:	bf00      	nop
 8017814:	08021f2c 	.word	0x08021f2c
 8017818:	08022518 	.word	0x08022518
 801781c:	08021f70 	.word	0x08021f70

08017820 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8017820:	b480      	push	{r7}
 8017822:	b085      	sub	sp, #20
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
 8017828:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d008      	beq.n	8017842 <tcp_accept+0x22>
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	7d1b      	ldrb	r3, [r3, #20]
 8017834:	2b01      	cmp	r3, #1
 8017836:	d104      	bne.n	8017842 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	683a      	ldr	r2, [r7, #0]
 8017840:	619a      	str	r2, [r3, #24]
  }
}
 8017842:	bf00      	nop
 8017844:	3714      	adds	r7, #20
 8017846:	46bd      	mov	sp, r7
 8017848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784c:	4770      	bx	lr
	...

08017850 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8017850:	b580      	push	{r7, lr}
 8017852:	b084      	sub	sp, #16
 8017854:	af00      	add	r7, sp, #0
 8017856:	60f8      	str	r0, [r7, #12]
 8017858:	60b9      	str	r1, [r7, #8]
 801785a:	4613      	mov	r3, r2
 801785c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d107      	bne.n	8017874 <tcp_poll+0x24>
 8017864:	4b0e      	ldr	r3, [pc, #56]	; (80178a0 <tcp_poll+0x50>)
 8017866:	f640 023d 	movw	r2, #2109	; 0x83d
 801786a:	490e      	ldr	r1, [pc, #56]	; (80178a4 <tcp_poll+0x54>)
 801786c:	480e      	ldr	r0, [pc, #56]	; (80178a8 <tcp_poll+0x58>)
 801786e:	f007 fb6d 	bl	801ef4c <iprintf>
 8017872:	e011      	b.n	8017898 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	7d1b      	ldrb	r3, [r3, #20]
 8017878:	2b01      	cmp	r3, #1
 801787a:	d106      	bne.n	801788a <tcp_poll+0x3a>
 801787c:	4b08      	ldr	r3, [pc, #32]	; (80178a0 <tcp_poll+0x50>)
 801787e:	f640 023e 	movw	r2, #2110	; 0x83e
 8017882:	490a      	ldr	r1, [pc, #40]	; (80178ac <tcp_poll+0x5c>)
 8017884:	4808      	ldr	r0, [pc, #32]	; (80178a8 <tcp_poll+0x58>)
 8017886:	f007 fb61 	bl	801ef4c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	68ba      	ldr	r2, [r7, #8]
 801788e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	79fa      	ldrb	r2, [r7, #7]
 8017896:	775a      	strb	r2, [r3, #29]
}
 8017898:	3710      	adds	r7, #16
 801789a:	46bd      	mov	sp, r7
 801789c:	bd80      	pop	{r7, pc}
 801789e:	bf00      	nop
 80178a0:	08021f2c 	.word	0x08021f2c
 80178a4:	08022540 	.word	0x08022540
 80178a8:	08021f70 	.word	0x08021f70
 80178ac:	08022558 	.word	0x08022558

080178b0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b082      	sub	sp, #8
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d107      	bne.n	80178ce <tcp_pcb_purge+0x1e>
 80178be:	4b21      	ldr	r3, [pc, #132]	; (8017944 <tcp_pcb_purge+0x94>)
 80178c0:	f640 0251 	movw	r2, #2129	; 0x851
 80178c4:	4920      	ldr	r1, [pc, #128]	; (8017948 <tcp_pcb_purge+0x98>)
 80178c6:	4821      	ldr	r0, [pc, #132]	; (801794c <tcp_pcb_purge+0x9c>)
 80178c8:	f007 fb40 	bl	801ef4c <iprintf>
 80178cc:	e037      	b.n	801793e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	7d1b      	ldrb	r3, [r3, #20]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d033      	beq.n	801793e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80178da:	2b0a      	cmp	r3, #10
 80178dc:	d02f      	beq.n	801793e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80178e2:	2b01      	cmp	r3, #1
 80178e4:	d02b      	beq.n	801793e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d007      	beq.n	80178fe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80178f2:	4618      	mov	r0, r3
 80178f4:	f7fe f8ca 	bl	8015a8c <pbuf_free>
      pcb->refused_data = NULL;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2200      	movs	r2, #0
 80178fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017902:	2b00      	cmp	r3, #0
 8017904:	d002      	beq.n	801790c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017906:	6878      	ldr	r0, [r7, #4]
 8017908:	f000 f986 	bl	8017c18 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017912:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017918:	4618      	mov	r0, r3
 801791a:	f7ff fcdb 	bl	80172d4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017922:	4618      	mov	r0, r3
 8017924:	f7ff fcd6 	bl	80172d4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	2200      	movs	r2, #0
 801792c:	66da      	str	r2, [r3, #108]	; 0x6c
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	2200      	movs	r2, #0
 801793a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801793e:	3708      	adds	r7, #8
 8017940:	46bd      	mov	sp, r7
 8017942:	bd80      	pop	{r7, pc}
 8017944:	08021f2c 	.word	0x08021f2c
 8017948:	08022578 	.word	0x08022578
 801794c:	08021f70 	.word	0x08021f70

08017950 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017950:	b580      	push	{r7, lr}
 8017952:	b084      	sub	sp, #16
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
 8017958:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801795a:	683b      	ldr	r3, [r7, #0]
 801795c:	2b00      	cmp	r3, #0
 801795e:	d106      	bne.n	801796e <tcp_pcb_remove+0x1e>
 8017960:	4b3e      	ldr	r3, [pc, #248]	; (8017a5c <tcp_pcb_remove+0x10c>)
 8017962:	f640 0283 	movw	r2, #2179	; 0x883
 8017966:	493e      	ldr	r1, [pc, #248]	; (8017a60 <tcp_pcb_remove+0x110>)
 8017968:	483e      	ldr	r0, [pc, #248]	; (8017a64 <tcp_pcb_remove+0x114>)
 801796a:	f007 faef 	bl	801ef4c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d106      	bne.n	8017982 <tcp_pcb_remove+0x32>
 8017974:	4b39      	ldr	r3, [pc, #228]	; (8017a5c <tcp_pcb_remove+0x10c>)
 8017976:	f640 0284 	movw	r2, #2180	; 0x884
 801797a:	493b      	ldr	r1, [pc, #236]	; (8017a68 <tcp_pcb_remove+0x118>)
 801797c:	4839      	ldr	r0, [pc, #228]	; (8017a64 <tcp_pcb_remove+0x114>)
 801797e:	f007 fae5 	bl	801ef4c <iprintf>

  TCP_RMV(pcblist, pcb);
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	683a      	ldr	r2, [r7, #0]
 8017988:	429a      	cmp	r2, r3
 801798a:	d105      	bne.n	8017998 <tcp_pcb_remove+0x48>
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	68da      	ldr	r2, [r3, #12]
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	601a      	str	r2, [r3, #0]
 8017996:	e013      	b.n	80179c0 <tcp_pcb_remove+0x70>
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	60fb      	str	r3, [r7, #12]
 801799e:	e00c      	b.n	80179ba <tcp_pcb_remove+0x6a>
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	68db      	ldr	r3, [r3, #12]
 80179a4:	683a      	ldr	r2, [r7, #0]
 80179a6:	429a      	cmp	r2, r3
 80179a8:	d104      	bne.n	80179b4 <tcp_pcb_remove+0x64>
 80179aa:	683b      	ldr	r3, [r7, #0]
 80179ac:	68da      	ldr	r2, [r3, #12]
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	60da      	str	r2, [r3, #12]
 80179b2:	e005      	b.n	80179c0 <tcp_pcb_remove+0x70>
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	68db      	ldr	r3, [r3, #12]
 80179b8:	60fb      	str	r3, [r7, #12]
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d1ef      	bne.n	80179a0 <tcp_pcb_remove+0x50>
 80179c0:	683b      	ldr	r3, [r7, #0]
 80179c2:	2200      	movs	r2, #0
 80179c4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80179c6:	6838      	ldr	r0, [r7, #0]
 80179c8:	f7ff ff72 	bl	80178b0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80179cc:	683b      	ldr	r3, [r7, #0]
 80179ce:	7d1b      	ldrb	r3, [r3, #20]
 80179d0:	2b0a      	cmp	r3, #10
 80179d2:	d013      	beq.n	80179fc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80179d4:	683b      	ldr	r3, [r7, #0]
 80179d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80179d8:	2b01      	cmp	r3, #1
 80179da:	d00f      	beq.n	80179fc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80179dc:	683b      	ldr	r3, [r7, #0]
 80179de:	8b5b      	ldrh	r3, [r3, #26]
 80179e0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d009      	beq.n	80179fc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80179e8:	683b      	ldr	r3, [r7, #0]
 80179ea:	8b5b      	ldrh	r3, [r3, #26]
 80179ec:	f043 0302 	orr.w	r3, r3, #2
 80179f0:	b29a      	uxth	r2, r3
 80179f2:	683b      	ldr	r3, [r7, #0]
 80179f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80179f6:	6838      	ldr	r0, [r7, #0]
 80179f8:	f003 fbc2 	bl	801b180 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80179fc:	683b      	ldr	r3, [r7, #0]
 80179fe:	7d1b      	ldrb	r3, [r3, #20]
 8017a00:	2b01      	cmp	r3, #1
 8017a02:	d020      	beq.n	8017a46 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017a04:	683b      	ldr	r3, [r7, #0]
 8017a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d006      	beq.n	8017a1a <tcp_pcb_remove+0xca>
 8017a0c:	4b13      	ldr	r3, [pc, #76]	; (8017a5c <tcp_pcb_remove+0x10c>)
 8017a0e:	f640 0293 	movw	r2, #2195	; 0x893
 8017a12:	4916      	ldr	r1, [pc, #88]	; (8017a6c <tcp_pcb_remove+0x11c>)
 8017a14:	4813      	ldr	r0, [pc, #76]	; (8017a64 <tcp_pcb_remove+0x114>)
 8017a16:	f007 fa99 	bl	801ef4c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017a1a:	683b      	ldr	r3, [r7, #0]
 8017a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d006      	beq.n	8017a30 <tcp_pcb_remove+0xe0>
 8017a22:	4b0e      	ldr	r3, [pc, #56]	; (8017a5c <tcp_pcb_remove+0x10c>)
 8017a24:	f640 0294 	movw	r2, #2196	; 0x894
 8017a28:	4911      	ldr	r1, [pc, #68]	; (8017a70 <tcp_pcb_remove+0x120>)
 8017a2a:	480e      	ldr	r0, [pc, #56]	; (8017a64 <tcp_pcb_remove+0x114>)
 8017a2c:	f007 fa8e 	bl	801ef4c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017a30:	683b      	ldr	r3, [r7, #0]
 8017a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d006      	beq.n	8017a46 <tcp_pcb_remove+0xf6>
 8017a38:	4b08      	ldr	r3, [pc, #32]	; (8017a5c <tcp_pcb_remove+0x10c>)
 8017a3a:	f640 0296 	movw	r2, #2198	; 0x896
 8017a3e:	490d      	ldr	r1, [pc, #52]	; (8017a74 <tcp_pcb_remove+0x124>)
 8017a40:	4808      	ldr	r0, [pc, #32]	; (8017a64 <tcp_pcb_remove+0x114>)
 8017a42:	f007 fa83 	bl	801ef4c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017a46:	683b      	ldr	r3, [r7, #0]
 8017a48:	2200      	movs	r2, #0
 8017a4a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	2200      	movs	r2, #0
 8017a50:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8017a52:	bf00      	nop
 8017a54:	3710      	adds	r7, #16
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}
 8017a5a:	bf00      	nop
 8017a5c:	08021f2c 	.word	0x08021f2c
 8017a60:	08022594 	.word	0x08022594
 8017a64:	08021f70 	.word	0x08021f70
 8017a68:	080225b0 	.word	0x080225b0
 8017a6c:	080225d0 	.word	0x080225d0
 8017a70:	080225e8 	.word	0x080225e8
 8017a74:	08022604 	.word	0x08022604

08017a78 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d106      	bne.n	8017a94 <tcp_next_iss+0x1c>
 8017a86:	4b0a      	ldr	r3, [pc, #40]	; (8017ab0 <tcp_next_iss+0x38>)
 8017a88:	f640 02af 	movw	r2, #2223	; 0x8af
 8017a8c:	4909      	ldr	r1, [pc, #36]	; (8017ab4 <tcp_next_iss+0x3c>)
 8017a8e:	480a      	ldr	r0, [pc, #40]	; (8017ab8 <tcp_next_iss+0x40>)
 8017a90:	f007 fa5c 	bl	801ef4c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017a94:	4b09      	ldr	r3, [pc, #36]	; (8017abc <tcp_next_iss+0x44>)
 8017a96:	681a      	ldr	r2, [r3, #0]
 8017a98:	4b09      	ldr	r3, [pc, #36]	; (8017ac0 <tcp_next_iss+0x48>)
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	4413      	add	r3, r2
 8017a9e:	4a07      	ldr	r2, [pc, #28]	; (8017abc <tcp_next_iss+0x44>)
 8017aa0:	6013      	str	r3, [r2, #0]
  return iss;
 8017aa2:	4b06      	ldr	r3, [pc, #24]	; (8017abc <tcp_next_iss+0x44>)
 8017aa4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	3708      	adds	r7, #8
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	bd80      	pop	{r7, pc}
 8017aae:	bf00      	nop
 8017ab0:	08021f2c 	.word	0x08021f2c
 8017ab4:	0802261c 	.word	0x0802261c
 8017ab8:	08021f70 	.word	0x08021f70
 8017abc:	20000038 	.word	0x20000038
 8017ac0:	20014760 	.word	0x20014760

08017ac4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b086      	sub	sp, #24
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	4603      	mov	r3, r0
 8017acc:	60b9      	str	r1, [r7, #8]
 8017ace:	607a      	str	r2, [r7, #4]
 8017ad0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d106      	bne.n	8017ae6 <tcp_eff_send_mss_netif+0x22>
 8017ad8:	4b14      	ldr	r3, [pc, #80]	; (8017b2c <tcp_eff_send_mss_netif+0x68>)
 8017ada:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8017ade:	4914      	ldr	r1, [pc, #80]	; (8017b30 <tcp_eff_send_mss_netif+0x6c>)
 8017ae0:	4814      	ldr	r0, [pc, #80]	; (8017b34 <tcp_eff_send_mss_netif+0x70>)
 8017ae2:	f007 fa33 	bl	801ef4c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017ae6:	68bb      	ldr	r3, [r7, #8]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d101      	bne.n	8017af0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8017aec:	89fb      	ldrh	r3, [r7, #14]
 8017aee:	e019      	b.n	8017b24 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017af0:	68bb      	ldr	r3, [r7, #8]
 8017af2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017af4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017af6:	8afb      	ldrh	r3, [r7, #22]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d012      	beq.n	8017b22 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8017afc:	2328      	movs	r3, #40	; 0x28
 8017afe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017b00:	8afa      	ldrh	r2, [r7, #22]
 8017b02:	8abb      	ldrh	r3, [r7, #20]
 8017b04:	429a      	cmp	r2, r3
 8017b06:	d904      	bls.n	8017b12 <tcp_eff_send_mss_netif+0x4e>
 8017b08:	8afa      	ldrh	r2, [r7, #22]
 8017b0a:	8abb      	ldrh	r3, [r7, #20]
 8017b0c:	1ad3      	subs	r3, r2, r3
 8017b0e:	b29b      	uxth	r3, r3
 8017b10:	e000      	b.n	8017b14 <tcp_eff_send_mss_netif+0x50>
 8017b12:	2300      	movs	r3, #0
 8017b14:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017b16:	8a7a      	ldrh	r2, [r7, #18]
 8017b18:	89fb      	ldrh	r3, [r7, #14]
 8017b1a:	4293      	cmp	r3, r2
 8017b1c:	bf28      	it	cs
 8017b1e:	4613      	movcs	r3, r2
 8017b20:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8017b22:	89fb      	ldrh	r3, [r7, #14]
}
 8017b24:	4618      	mov	r0, r3
 8017b26:	3718      	adds	r7, #24
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	bd80      	pop	{r7, pc}
 8017b2c:	08021f2c 	.word	0x08021f2c
 8017b30:	08022638 	.word	0x08022638
 8017b34:	08021f70 	.word	0x08021f70

08017b38 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b084      	sub	sp, #16
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
 8017b40:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8017b42:	683b      	ldr	r3, [r7, #0]
 8017b44:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d119      	bne.n	8017b80 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8017b4c:	4b10      	ldr	r3, [pc, #64]	; (8017b90 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8017b4e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8017b52:	4910      	ldr	r1, [pc, #64]	; (8017b94 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8017b54:	4810      	ldr	r0, [pc, #64]	; (8017b98 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017b56:	f007 f9f9 	bl	801ef4c <iprintf>

  while (pcb != NULL) {
 8017b5a:	e011      	b.n	8017b80 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	681a      	ldr	r2, [r3, #0]
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	429a      	cmp	r2, r3
 8017b66:	d108      	bne.n	8017b7a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	68db      	ldr	r3, [r3, #12]
 8017b6c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8017b6e:	68f8      	ldr	r0, [r7, #12]
 8017b70:	f7fe fd20 	bl	80165b4 <tcp_abort>
      pcb = next;
 8017b74:	68bb      	ldr	r3, [r7, #8]
 8017b76:	60fb      	str	r3, [r7, #12]
 8017b78:	e002      	b.n	8017b80 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	68db      	ldr	r3, [r3, #12]
 8017b7e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d1ea      	bne.n	8017b5c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8017b86:	bf00      	nop
 8017b88:	bf00      	nop
 8017b8a:	3710      	adds	r7, #16
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	bd80      	pop	{r7, pc}
 8017b90:	08021f2c 	.word	0x08021f2c
 8017b94:	08022660 	.word	0x08022660
 8017b98:	08021f70 	.word	0x08021f70

08017b9c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b084      	sub	sp, #16
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
 8017ba4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d02a      	beq.n	8017c02 <tcp_netif_ip_addr_changed+0x66>
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d026      	beq.n	8017c02 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017bb4:	4b15      	ldr	r3, [pc, #84]	; (8017c0c <tcp_netif_ip_addr_changed+0x70>)
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	4619      	mov	r1, r3
 8017bba:	6878      	ldr	r0, [r7, #4]
 8017bbc:	f7ff ffbc 	bl	8017b38 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017bc0:	4b13      	ldr	r3, [pc, #76]	; (8017c10 <tcp_netif_ip_addr_changed+0x74>)
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	4619      	mov	r1, r3
 8017bc6:	6878      	ldr	r0, [r7, #4]
 8017bc8:	f7ff ffb6 	bl	8017b38 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017bcc:	683b      	ldr	r3, [r7, #0]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d017      	beq.n	8017c02 <tcp_netif_ip_addr_changed+0x66>
 8017bd2:	683b      	ldr	r3, [r7, #0]
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d013      	beq.n	8017c02 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017bda:	4b0e      	ldr	r3, [pc, #56]	; (8017c14 <tcp_netif_ip_addr_changed+0x78>)
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	60fb      	str	r3, [r7, #12]
 8017be0:	e00c      	b.n	8017bfc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	681a      	ldr	r2, [r3, #0]
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	429a      	cmp	r2, r3
 8017bec:	d103      	bne.n	8017bf6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8017bee:	683b      	ldr	r3, [r7, #0]
 8017bf0:	681a      	ldr	r2, [r3, #0]
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	68db      	ldr	r3, [r3, #12]
 8017bfa:	60fb      	str	r3, [r7, #12]
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d1ef      	bne.n	8017be2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8017c02:	bf00      	nop
 8017c04:	3710      	adds	r7, #16
 8017c06:	46bd      	mov	sp, r7
 8017c08:	bd80      	pop	{r7, pc}
 8017c0a:	bf00      	nop
 8017c0c:	2001475c 	.word	0x2001475c
 8017c10:	20014768 	.word	0x20014768
 8017c14:	20014764 	.word	0x20014764

08017c18 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b082      	sub	sp, #8
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d007      	beq.n	8017c38 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	f7ff fb51 	bl	80172d4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	2200      	movs	r2, #0
 8017c36:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017c38:	bf00      	nop
 8017c3a:	3708      	adds	r7, #8
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bd80      	pop	{r7, pc}

08017c40 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8017c40:	b590      	push	{r4, r7, lr}
 8017c42:	b08d      	sub	sp, #52	; 0x34
 8017c44:	af04      	add	r7, sp, #16
 8017c46:	6078      	str	r0, [r7, #4]
 8017c48:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d105      	bne.n	8017c5c <tcp_input+0x1c>
 8017c50:	4b9b      	ldr	r3, [pc, #620]	; (8017ec0 <tcp_input+0x280>)
 8017c52:	2283      	movs	r2, #131	; 0x83
 8017c54:	499b      	ldr	r1, [pc, #620]	; (8017ec4 <tcp_input+0x284>)
 8017c56:	489c      	ldr	r0, [pc, #624]	; (8017ec8 <tcp_input+0x288>)
 8017c58:	f007 f978 	bl	801ef4c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	685b      	ldr	r3, [r3, #4]
 8017c60:	4a9a      	ldr	r2, [pc, #616]	; (8017ecc <tcp_input+0x28c>)
 8017c62:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	895b      	ldrh	r3, [r3, #10]
 8017c68:	2b13      	cmp	r3, #19
 8017c6a:	f240 83c4 	bls.w	80183f6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017c6e:	4b98      	ldr	r3, [pc, #608]	; (8017ed0 <tcp_input+0x290>)
 8017c70:	695b      	ldr	r3, [r3, #20]
 8017c72:	4a97      	ldr	r2, [pc, #604]	; (8017ed0 <tcp_input+0x290>)
 8017c74:	6812      	ldr	r2, [r2, #0]
 8017c76:	4611      	mov	r1, r2
 8017c78:	4618      	mov	r0, r3
 8017c7a:	f006 f89b 	bl	801ddb4 <ip4_addr_isbroadcast_u32>
 8017c7e:	4603      	mov	r3, r0
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	f040 83ba 	bne.w	80183fa <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017c86:	4b92      	ldr	r3, [pc, #584]	; (8017ed0 <tcp_input+0x290>)
 8017c88:	695b      	ldr	r3, [r3, #20]
 8017c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017c8e:	2be0      	cmp	r3, #224	; 0xe0
 8017c90:	f000 83b3 	beq.w	80183fa <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8017c94:	4b8d      	ldr	r3, [pc, #564]	; (8017ecc <tcp_input+0x28c>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	899b      	ldrh	r3, [r3, #12]
 8017c9a:	b29b      	uxth	r3, r3
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	f7fc fb01 	bl	80142a4 <lwip_htons>
 8017ca2:	4603      	mov	r3, r0
 8017ca4:	0b1b      	lsrs	r3, r3, #12
 8017ca6:	b29b      	uxth	r3, r3
 8017ca8:	b2db      	uxtb	r3, r3
 8017caa:	009b      	lsls	r3, r3, #2
 8017cac:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8017cae:	7cbb      	ldrb	r3, [r7, #18]
 8017cb0:	2b13      	cmp	r3, #19
 8017cb2:	f240 83a4 	bls.w	80183fe <tcp_input+0x7be>
 8017cb6:	7cbb      	ldrb	r3, [r7, #18]
 8017cb8:	b29a      	uxth	r2, r3
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	891b      	ldrh	r3, [r3, #8]
 8017cbe:	429a      	cmp	r2, r3
 8017cc0:	f200 839d 	bhi.w	80183fe <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8017cc4:	7cbb      	ldrb	r3, [r7, #18]
 8017cc6:	b29b      	uxth	r3, r3
 8017cc8:	3b14      	subs	r3, #20
 8017cca:	b29a      	uxth	r2, r3
 8017ccc:	4b81      	ldr	r3, [pc, #516]	; (8017ed4 <tcp_input+0x294>)
 8017cce:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8017cd0:	4b81      	ldr	r3, [pc, #516]	; (8017ed8 <tcp_input+0x298>)
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	895a      	ldrh	r2, [r3, #10]
 8017cda:	7cbb      	ldrb	r3, [r7, #18]
 8017cdc:	b29b      	uxth	r3, r3
 8017cde:	429a      	cmp	r2, r3
 8017ce0:	d309      	bcc.n	8017cf6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8017ce2:	4b7c      	ldr	r3, [pc, #496]	; (8017ed4 <tcp_input+0x294>)
 8017ce4:	881a      	ldrh	r2, [r3, #0]
 8017ce6:	4b7d      	ldr	r3, [pc, #500]	; (8017edc <tcp_input+0x29c>)
 8017ce8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8017cea:	7cbb      	ldrb	r3, [r7, #18]
 8017cec:	4619      	mov	r1, r3
 8017cee:	6878      	ldr	r0, [r7, #4]
 8017cf0:	f7fd fe34 	bl	801595c <pbuf_remove_header>
 8017cf4:	e04e      	b.n	8017d94 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d105      	bne.n	8017d0a <tcp_input+0xca>
 8017cfe:	4b70      	ldr	r3, [pc, #448]	; (8017ec0 <tcp_input+0x280>)
 8017d00:	22c2      	movs	r2, #194	; 0xc2
 8017d02:	4977      	ldr	r1, [pc, #476]	; (8017ee0 <tcp_input+0x2a0>)
 8017d04:	4870      	ldr	r0, [pc, #448]	; (8017ec8 <tcp_input+0x288>)
 8017d06:	f007 f921 	bl	801ef4c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8017d0a:	2114      	movs	r1, #20
 8017d0c:	6878      	ldr	r0, [r7, #4]
 8017d0e:	f7fd fe25 	bl	801595c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	895a      	ldrh	r2, [r3, #10]
 8017d16:	4b71      	ldr	r3, [pc, #452]	; (8017edc <tcp_input+0x29c>)
 8017d18:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8017d1a:	4b6e      	ldr	r3, [pc, #440]	; (8017ed4 <tcp_input+0x294>)
 8017d1c:	881a      	ldrh	r2, [r3, #0]
 8017d1e:	4b6f      	ldr	r3, [pc, #444]	; (8017edc <tcp_input+0x29c>)
 8017d20:	881b      	ldrh	r3, [r3, #0]
 8017d22:	1ad3      	subs	r3, r2, r3
 8017d24:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017d26:	4b6d      	ldr	r3, [pc, #436]	; (8017edc <tcp_input+0x29c>)
 8017d28:	881b      	ldrh	r3, [r3, #0]
 8017d2a:	4619      	mov	r1, r3
 8017d2c:	6878      	ldr	r0, [r7, #4]
 8017d2e:	f7fd fe15 	bl	801595c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	895b      	ldrh	r3, [r3, #10]
 8017d38:	8a3a      	ldrh	r2, [r7, #16]
 8017d3a:	429a      	cmp	r2, r3
 8017d3c:	f200 8361 	bhi.w	8018402 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	685b      	ldr	r3, [r3, #4]
 8017d46:	4a64      	ldr	r2, [pc, #400]	; (8017ed8 <tcp_input+0x298>)
 8017d48:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	8a3a      	ldrh	r2, [r7, #16]
 8017d50:	4611      	mov	r1, r2
 8017d52:	4618      	mov	r0, r3
 8017d54:	f7fd fe02 	bl	801595c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	891a      	ldrh	r2, [r3, #8]
 8017d5c:	8a3b      	ldrh	r3, [r7, #16]
 8017d5e:	1ad3      	subs	r3, r2, r3
 8017d60:	b29a      	uxth	r2, r3
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	895b      	ldrh	r3, [r3, #10]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d005      	beq.n	8017d7a <tcp_input+0x13a>
 8017d6e:	4b54      	ldr	r3, [pc, #336]	; (8017ec0 <tcp_input+0x280>)
 8017d70:	22df      	movs	r2, #223	; 0xdf
 8017d72:	495c      	ldr	r1, [pc, #368]	; (8017ee4 <tcp_input+0x2a4>)
 8017d74:	4854      	ldr	r0, [pc, #336]	; (8017ec8 <tcp_input+0x288>)
 8017d76:	f007 f8e9 	bl	801ef4c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	891a      	ldrh	r2, [r3, #8]
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	891b      	ldrh	r3, [r3, #8]
 8017d84:	429a      	cmp	r2, r3
 8017d86:	d005      	beq.n	8017d94 <tcp_input+0x154>
 8017d88:	4b4d      	ldr	r3, [pc, #308]	; (8017ec0 <tcp_input+0x280>)
 8017d8a:	22e0      	movs	r2, #224	; 0xe0
 8017d8c:	4956      	ldr	r1, [pc, #344]	; (8017ee8 <tcp_input+0x2a8>)
 8017d8e:	484e      	ldr	r0, [pc, #312]	; (8017ec8 <tcp_input+0x288>)
 8017d90:	f007 f8dc 	bl	801ef4c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017d94:	4b4d      	ldr	r3, [pc, #308]	; (8017ecc <tcp_input+0x28c>)
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	881b      	ldrh	r3, [r3, #0]
 8017d9a:	b29b      	uxth	r3, r3
 8017d9c:	4a4b      	ldr	r2, [pc, #300]	; (8017ecc <tcp_input+0x28c>)
 8017d9e:	6814      	ldr	r4, [r2, #0]
 8017da0:	4618      	mov	r0, r3
 8017da2:	f7fc fa7f 	bl	80142a4 <lwip_htons>
 8017da6:	4603      	mov	r3, r0
 8017da8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017daa:	4b48      	ldr	r3, [pc, #288]	; (8017ecc <tcp_input+0x28c>)
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	885b      	ldrh	r3, [r3, #2]
 8017db0:	b29b      	uxth	r3, r3
 8017db2:	4a46      	ldr	r2, [pc, #280]	; (8017ecc <tcp_input+0x28c>)
 8017db4:	6814      	ldr	r4, [r2, #0]
 8017db6:	4618      	mov	r0, r3
 8017db8:	f7fc fa74 	bl	80142a4 <lwip_htons>
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017dc0:	4b42      	ldr	r3, [pc, #264]	; (8017ecc <tcp_input+0x28c>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	685b      	ldr	r3, [r3, #4]
 8017dc6:	4a41      	ldr	r2, [pc, #260]	; (8017ecc <tcp_input+0x28c>)
 8017dc8:	6814      	ldr	r4, [r2, #0]
 8017dca:	4618      	mov	r0, r3
 8017dcc:	f7fc fa7f 	bl	80142ce <lwip_htonl>
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	6063      	str	r3, [r4, #4]
 8017dd4:	6863      	ldr	r3, [r4, #4]
 8017dd6:	4a45      	ldr	r2, [pc, #276]	; (8017eec <tcp_input+0x2ac>)
 8017dd8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017dda:	4b3c      	ldr	r3, [pc, #240]	; (8017ecc <tcp_input+0x28c>)
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	689b      	ldr	r3, [r3, #8]
 8017de0:	4a3a      	ldr	r2, [pc, #232]	; (8017ecc <tcp_input+0x28c>)
 8017de2:	6814      	ldr	r4, [r2, #0]
 8017de4:	4618      	mov	r0, r3
 8017de6:	f7fc fa72 	bl	80142ce <lwip_htonl>
 8017dea:	4603      	mov	r3, r0
 8017dec:	60a3      	str	r3, [r4, #8]
 8017dee:	68a3      	ldr	r3, [r4, #8]
 8017df0:	4a3f      	ldr	r2, [pc, #252]	; (8017ef0 <tcp_input+0x2b0>)
 8017df2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017df4:	4b35      	ldr	r3, [pc, #212]	; (8017ecc <tcp_input+0x28c>)
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	89db      	ldrh	r3, [r3, #14]
 8017dfa:	b29b      	uxth	r3, r3
 8017dfc:	4a33      	ldr	r2, [pc, #204]	; (8017ecc <tcp_input+0x28c>)
 8017dfe:	6814      	ldr	r4, [r2, #0]
 8017e00:	4618      	mov	r0, r3
 8017e02:	f7fc fa4f 	bl	80142a4 <lwip_htons>
 8017e06:	4603      	mov	r3, r0
 8017e08:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017e0a:	4b30      	ldr	r3, [pc, #192]	; (8017ecc <tcp_input+0x28c>)
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	899b      	ldrh	r3, [r3, #12]
 8017e10:	b29b      	uxth	r3, r3
 8017e12:	4618      	mov	r0, r3
 8017e14:	f7fc fa46 	bl	80142a4 <lwip_htons>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	b2db      	uxtb	r3, r3
 8017e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017e20:	b2da      	uxtb	r2, r3
 8017e22:	4b34      	ldr	r3, [pc, #208]	; (8017ef4 <tcp_input+0x2b4>)
 8017e24:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	891a      	ldrh	r2, [r3, #8]
 8017e2a:	4b33      	ldr	r3, [pc, #204]	; (8017ef8 <tcp_input+0x2b8>)
 8017e2c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017e2e:	4b31      	ldr	r3, [pc, #196]	; (8017ef4 <tcp_input+0x2b4>)
 8017e30:	781b      	ldrb	r3, [r3, #0]
 8017e32:	f003 0303 	and.w	r3, r3, #3
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d00c      	beq.n	8017e54 <tcp_input+0x214>
    tcplen++;
 8017e3a:	4b2f      	ldr	r3, [pc, #188]	; (8017ef8 <tcp_input+0x2b8>)
 8017e3c:	881b      	ldrh	r3, [r3, #0]
 8017e3e:	3301      	adds	r3, #1
 8017e40:	b29a      	uxth	r2, r3
 8017e42:	4b2d      	ldr	r3, [pc, #180]	; (8017ef8 <tcp_input+0x2b8>)
 8017e44:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	891a      	ldrh	r2, [r3, #8]
 8017e4a:	4b2b      	ldr	r3, [pc, #172]	; (8017ef8 <tcp_input+0x2b8>)
 8017e4c:	881b      	ldrh	r3, [r3, #0]
 8017e4e:	429a      	cmp	r2, r3
 8017e50:	f200 82d9 	bhi.w	8018406 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017e54:	2300      	movs	r3, #0
 8017e56:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e58:	4b28      	ldr	r3, [pc, #160]	; (8017efc <tcp_input+0x2bc>)
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	61fb      	str	r3, [r7, #28]
 8017e5e:	e09d      	b.n	8017f9c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017e60:	69fb      	ldr	r3, [r7, #28]
 8017e62:	7d1b      	ldrb	r3, [r3, #20]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d105      	bne.n	8017e74 <tcp_input+0x234>
 8017e68:	4b15      	ldr	r3, [pc, #84]	; (8017ec0 <tcp_input+0x280>)
 8017e6a:	22fb      	movs	r2, #251	; 0xfb
 8017e6c:	4924      	ldr	r1, [pc, #144]	; (8017f00 <tcp_input+0x2c0>)
 8017e6e:	4816      	ldr	r0, [pc, #88]	; (8017ec8 <tcp_input+0x288>)
 8017e70:	f007 f86c 	bl	801ef4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017e74:	69fb      	ldr	r3, [r7, #28]
 8017e76:	7d1b      	ldrb	r3, [r3, #20]
 8017e78:	2b0a      	cmp	r3, #10
 8017e7a:	d105      	bne.n	8017e88 <tcp_input+0x248>
 8017e7c:	4b10      	ldr	r3, [pc, #64]	; (8017ec0 <tcp_input+0x280>)
 8017e7e:	22fc      	movs	r2, #252	; 0xfc
 8017e80:	4920      	ldr	r1, [pc, #128]	; (8017f04 <tcp_input+0x2c4>)
 8017e82:	4811      	ldr	r0, [pc, #68]	; (8017ec8 <tcp_input+0x288>)
 8017e84:	f007 f862 	bl	801ef4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017e88:	69fb      	ldr	r3, [r7, #28]
 8017e8a:	7d1b      	ldrb	r3, [r3, #20]
 8017e8c:	2b01      	cmp	r3, #1
 8017e8e:	d105      	bne.n	8017e9c <tcp_input+0x25c>
 8017e90:	4b0b      	ldr	r3, [pc, #44]	; (8017ec0 <tcp_input+0x280>)
 8017e92:	22fd      	movs	r2, #253	; 0xfd
 8017e94:	491c      	ldr	r1, [pc, #112]	; (8017f08 <tcp_input+0x2c8>)
 8017e96:	480c      	ldr	r0, [pc, #48]	; (8017ec8 <tcp_input+0x288>)
 8017e98:	f007 f858 	bl	801ef4c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e9c:	69fb      	ldr	r3, [r7, #28]
 8017e9e:	7a1b      	ldrb	r3, [r3, #8]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d033      	beq.n	8017f0c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017ea4:	69fb      	ldr	r3, [r7, #28]
 8017ea6:	7a1a      	ldrb	r2, [r3, #8]
 8017ea8:	4b09      	ldr	r3, [pc, #36]	; (8017ed0 <tcp_input+0x290>)
 8017eaa:	685b      	ldr	r3, [r3, #4]
 8017eac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017eb0:	3301      	adds	r3, #1
 8017eb2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017eb4:	429a      	cmp	r2, r3
 8017eb6:	d029      	beq.n	8017f0c <tcp_input+0x2cc>
      prev = pcb;
 8017eb8:	69fb      	ldr	r3, [r7, #28]
 8017eba:	61bb      	str	r3, [r7, #24]
      continue;
 8017ebc:	e06b      	b.n	8017f96 <tcp_input+0x356>
 8017ebe:	bf00      	nop
 8017ec0:	08022694 	.word	0x08022694
 8017ec4:	080226c8 	.word	0x080226c8
 8017ec8:	080226e0 	.word	0x080226e0
 8017ecc:	2000c80c 	.word	0x2000c80c
 8017ed0:	20011048 	.word	0x20011048
 8017ed4:	2000c810 	.word	0x2000c810
 8017ed8:	2000c814 	.word	0x2000c814
 8017edc:	2000c812 	.word	0x2000c812
 8017ee0:	08022708 	.word	0x08022708
 8017ee4:	08022718 	.word	0x08022718
 8017ee8:	08022724 	.word	0x08022724
 8017eec:	2000c81c 	.word	0x2000c81c
 8017ef0:	2000c820 	.word	0x2000c820
 8017ef4:	2000c828 	.word	0x2000c828
 8017ef8:	2000c826 	.word	0x2000c826
 8017efc:	2001475c 	.word	0x2001475c
 8017f00:	08022744 	.word	0x08022744
 8017f04:	0802276c 	.word	0x0802276c
 8017f08:	08022798 	.word	0x08022798
    }

    if (pcb->remote_port == tcphdr->src &&
 8017f0c:	69fb      	ldr	r3, [r7, #28]
 8017f0e:	8b1a      	ldrh	r2, [r3, #24]
 8017f10:	4b94      	ldr	r3, [pc, #592]	; (8018164 <tcp_input+0x524>)
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	881b      	ldrh	r3, [r3, #0]
 8017f16:	b29b      	uxth	r3, r3
 8017f18:	429a      	cmp	r2, r3
 8017f1a:	d13a      	bne.n	8017f92 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8017f1c:	69fb      	ldr	r3, [r7, #28]
 8017f1e:	8ada      	ldrh	r2, [r3, #22]
 8017f20:	4b90      	ldr	r3, [pc, #576]	; (8018164 <tcp_input+0x524>)
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	885b      	ldrh	r3, [r3, #2]
 8017f26:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017f28:	429a      	cmp	r2, r3
 8017f2a:	d132      	bne.n	8017f92 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017f2c:	69fb      	ldr	r3, [r7, #28]
 8017f2e:	685a      	ldr	r2, [r3, #4]
 8017f30:	4b8d      	ldr	r3, [pc, #564]	; (8018168 <tcp_input+0x528>)
 8017f32:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017f34:	429a      	cmp	r2, r3
 8017f36:	d12c      	bne.n	8017f92 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017f38:	69fb      	ldr	r3, [r7, #28]
 8017f3a:	681a      	ldr	r2, [r3, #0]
 8017f3c:	4b8a      	ldr	r3, [pc, #552]	; (8018168 <tcp_input+0x528>)
 8017f3e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017f40:	429a      	cmp	r2, r3
 8017f42:	d126      	bne.n	8017f92 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017f44:	69fb      	ldr	r3, [r7, #28]
 8017f46:	68db      	ldr	r3, [r3, #12]
 8017f48:	69fa      	ldr	r2, [r7, #28]
 8017f4a:	429a      	cmp	r2, r3
 8017f4c:	d106      	bne.n	8017f5c <tcp_input+0x31c>
 8017f4e:	4b87      	ldr	r3, [pc, #540]	; (801816c <tcp_input+0x52c>)
 8017f50:	f240 120d 	movw	r2, #269	; 0x10d
 8017f54:	4986      	ldr	r1, [pc, #536]	; (8018170 <tcp_input+0x530>)
 8017f56:	4887      	ldr	r0, [pc, #540]	; (8018174 <tcp_input+0x534>)
 8017f58:	f006 fff8 	bl	801ef4c <iprintf>
      if (prev != NULL) {
 8017f5c:	69bb      	ldr	r3, [r7, #24]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d00a      	beq.n	8017f78 <tcp_input+0x338>
        prev->next = pcb->next;
 8017f62:	69fb      	ldr	r3, [r7, #28]
 8017f64:	68da      	ldr	r2, [r3, #12]
 8017f66:	69bb      	ldr	r3, [r7, #24]
 8017f68:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017f6a:	4b83      	ldr	r3, [pc, #524]	; (8018178 <tcp_input+0x538>)
 8017f6c:	681a      	ldr	r2, [r3, #0]
 8017f6e:	69fb      	ldr	r3, [r7, #28]
 8017f70:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8017f72:	4a81      	ldr	r2, [pc, #516]	; (8018178 <tcp_input+0x538>)
 8017f74:	69fb      	ldr	r3, [r7, #28]
 8017f76:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017f78:	69fb      	ldr	r3, [r7, #28]
 8017f7a:	68db      	ldr	r3, [r3, #12]
 8017f7c:	69fa      	ldr	r2, [r7, #28]
 8017f7e:	429a      	cmp	r2, r3
 8017f80:	d111      	bne.n	8017fa6 <tcp_input+0x366>
 8017f82:	4b7a      	ldr	r3, [pc, #488]	; (801816c <tcp_input+0x52c>)
 8017f84:	f240 1215 	movw	r2, #277	; 0x115
 8017f88:	497c      	ldr	r1, [pc, #496]	; (801817c <tcp_input+0x53c>)
 8017f8a:	487a      	ldr	r0, [pc, #488]	; (8018174 <tcp_input+0x534>)
 8017f8c:	f006 ffde 	bl	801ef4c <iprintf>
      break;
 8017f90:	e009      	b.n	8017fa6 <tcp_input+0x366>
    }
    prev = pcb;
 8017f92:	69fb      	ldr	r3, [r7, #28]
 8017f94:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f96:	69fb      	ldr	r3, [r7, #28]
 8017f98:	68db      	ldr	r3, [r3, #12]
 8017f9a:	61fb      	str	r3, [r7, #28]
 8017f9c:	69fb      	ldr	r3, [r7, #28]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	f47f af5e 	bne.w	8017e60 <tcp_input+0x220>
 8017fa4:	e000      	b.n	8017fa8 <tcp_input+0x368>
      break;
 8017fa6:	bf00      	nop
  }

  if (pcb == NULL) {
 8017fa8:	69fb      	ldr	r3, [r7, #28]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	f040 8095 	bne.w	80180da <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017fb0:	4b73      	ldr	r3, [pc, #460]	; (8018180 <tcp_input+0x540>)
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	61fb      	str	r3, [r7, #28]
 8017fb6:	e03f      	b.n	8018038 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017fb8:	69fb      	ldr	r3, [r7, #28]
 8017fba:	7d1b      	ldrb	r3, [r3, #20]
 8017fbc:	2b0a      	cmp	r3, #10
 8017fbe:	d006      	beq.n	8017fce <tcp_input+0x38e>
 8017fc0:	4b6a      	ldr	r3, [pc, #424]	; (801816c <tcp_input+0x52c>)
 8017fc2:	f240 121f 	movw	r2, #287	; 0x11f
 8017fc6:	496f      	ldr	r1, [pc, #444]	; (8018184 <tcp_input+0x544>)
 8017fc8:	486a      	ldr	r0, [pc, #424]	; (8018174 <tcp_input+0x534>)
 8017fca:	f006 ffbf 	bl	801ef4c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017fce:	69fb      	ldr	r3, [r7, #28]
 8017fd0:	7a1b      	ldrb	r3, [r3, #8]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d009      	beq.n	8017fea <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017fd6:	69fb      	ldr	r3, [r7, #28]
 8017fd8:	7a1a      	ldrb	r2, [r3, #8]
 8017fda:	4b63      	ldr	r3, [pc, #396]	; (8018168 <tcp_input+0x528>)
 8017fdc:	685b      	ldr	r3, [r3, #4]
 8017fde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017fe2:	3301      	adds	r3, #1
 8017fe4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017fe6:	429a      	cmp	r2, r3
 8017fe8:	d122      	bne.n	8018030 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8017fea:	69fb      	ldr	r3, [r7, #28]
 8017fec:	8b1a      	ldrh	r2, [r3, #24]
 8017fee:	4b5d      	ldr	r3, [pc, #372]	; (8018164 <tcp_input+0x524>)
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	881b      	ldrh	r3, [r3, #0]
 8017ff4:	b29b      	uxth	r3, r3
 8017ff6:	429a      	cmp	r2, r3
 8017ff8:	d11b      	bne.n	8018032 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8017ffa:	69fb      	ldr	r3, [r7, #28]
 8017ffc:	8ada      	ldrh	r2, [r3, #22]
 8017ffe:	4b59      	ldr	r3, [pc, #356]	; (8018164 <tcp_input+0x524>)
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	885b      	ldrh	r3, [r3, #2]
 8018004:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8018006:	429a      	cmp	r2, r3
 8018008:	d113      	bne.n	8018032 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801800a:	69fb      	ldr	r3, [r7, #28]
 801800c:	685a      	ldr	r2, [r3, #4]
 801800e:	4b56      	ldr	r3, [pc, #344]	; (8018168 <tcp_input+0x528>)
 8018010:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8018012:	429a      	cmp	r2, r3
 8018014:	d10d      	bne.n	8018032 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018016:	69fb      	ldr	r3, [r7, #28]
 8018018:	681a      	ldr	r2, [r3, #0]
 801801a:	4b53      	ldr	r3, [pc, #332]	; (8018168 <tcp_input+0x528>)
 801801c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801801e:	429a      	cmp	r2, r3
 8018020:	d107      	bne.n	8018032 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8018022:	69f8      	ldr	r0, [r7, #28]
 8018024:	f000 fb54 	bl	80186d0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8018028:	6878      	ldr	r0, [r7, #4]
 801802a:	f7fd fd2f 	bl	8015a8c <pbuf_free>
        return;
 801802e:	e1f0      	b.n	8018412 <tcp_input+0x7d2>
        continue;
 8018030:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018032:	69fb      	ldr	r3, [r7, #28]
 8018034:	68db      	ldr	r3, [r3, #12]
 8018036:	61fb      	str	r3, [r7, #28]
 8018038:	69fb      	ldr	r3, [r7, #28]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d1bc      	bne.n	8017fb8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801803e:	2300      	movs	r3, #0
 8018040:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018042:	4b51      	ldr	r3, [pc, #324]	; (8018188 <tcp_input+0x548>)
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	617b      	str	r3, [r7, #20]
 8018048:	e02a      	b.n	80180a0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801804a:	697b      	ldr	r3, [r7, #20]
 801804c:	7a1b      	ldrb	r3, [r3, #8]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d00c      	beq.n	801806c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018052:	697b      	ldr	r3, [r7, #20]
 8018054:	7a1a      	ldrb	r2, [r3, #8]
 8018056:	4b44      	ldr	r3, [pc, #272]	; (8018168 <tcp_input+0x528>)
 8018058:	685b      	ldr	r3, [r3, #4]
 801805a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801805e:	3301      	adds	r3, #1
 8018060:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8018062:	429a      	cmp	r2, r3
 8018064:	d002      	beq.n	801806c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8018066:	697b      	ldr	r3, [r7, #20]
 8018068:	61bb      	str	r3, [r7, #24]
        continue;
 801806a:	e016      	b.n	801809a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801806c:	697b      	ldr	r3, [r7, #20]
 801806e:	8ada      	ldrh	r2, [r3, #22]
 8018070:	4b3c      	ldr	r3, [pc, #240]	; (8018164 <tcp_input+0x524>)
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	885b      	ldrh	r3, [r3, #2]
 8018076:	b29b      	uxth	r3, r3
 8018078:	429a      	cmp	r2, r3
 801807a:	d10c      	bne.n	8018096 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801807c:	697b      	ldr	r3, [r7, #20]
 801807e:	681a      	ldr	r2, [r3, #0]
 8018080:	4b39      	ldr	r3, [pc, #228]	; (8018168 <tcp_input+0x528>)
 8018082:	695b      	ldr	r3, [r3, #20]
 8018084:	429a      	cmp	r2, r3
 8018086:	d00f      	beq.n	80180a8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018088:	697b      	ldr	r3, [r7, #20]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d00d      	beq.n	80180aa <tcp_input+0x46a>
 801808e:	697b      	ldr	r3, [r7, #20]
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d009      	beq.n	80180aa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8018096:	697b      	ldr	r3, [r7, #20]
 8018098:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801809a:	697b      	ldr	r3, [r7, #20]
 801809c:	68db      	ldr	r3, [r3, #12]
 801809e:	617b      	str	r3, [r7, #20]
 80180a0:	697b      	ldr	r3, [r7, #20]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d1d1      	bne.n	801804a <tcp_input+0x40a>
 80180a6:	e000      	b.n	80180aa <tcp_input+0x46a>
            break;
 80180a8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80180aa:	697b      	ldr	r3, [r7, #20]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d014      	beq.n	80180da <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80180b0:	69bb      	ldr	r3, [r7, #24]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d00a      	beq.n	80180cc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80180b6:	697b      	ldr	r3, [r7, #20]
 80180b8:	68da      	ldr	r2, [r3, #12]
 80180ba:	69bb      	ldr	r3, [r7, #24]
 80180bc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80180be:	4b32      	ldr	r3, [pc, #200]	; (8018188 <tcp_input+0x548>)
 80180c0:	681a      	ldr	r2, [r3, #0]
 80180c2:	697b      	ldr	r3, [r7, #20]
 80180c4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80180c6:	4a30      	ldr	r2, [pc, #192]	; (8018188 <tcp_input+0x548>)
 80180c8:	697b      	ldr	r3, [r7, #20]
 80180ca:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80180cc:	6978      	ldr	r0, [r7, #20]
 80180ce:	f000 fa01 	bl	80184d4 <tcp_listen_input>
      }
      pbuf_free(p);
 80180d2:	6878      	ldr	r0, [r7, #4]
 80180d4:	f7fd fcda 	bl	8015a8c <pbuf_free>
      return;
 80180d8:	e19b      	b.n	8018412 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80180da:	69fb      	ldr	r3, [r7, #28]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	f000 8160 	beq.w	80183a2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80180e2:	4b2a      	ldr	r3, [pc, #168]	; (801818c <tcp_input+0x54c>)
 80180e4:	2200      	movs	r2, #0
 80180e6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	891a      	ldrh	r2, [r3, #8]
 80180ec:	4b27      	ldr	r3, [pc, #156]	; (801818c <tcp_input+0x54c>)
 80180ee:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80180f0:	4a26      	ldr	r2, [pc, #152]	; (801818c <tcp_input+0x54c>)
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80180f6:	4b1b      	ldr	r3, [pc, #108]	; (8018164 <tcp_input+0x524>)
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	4a24      	ldr	r2, [pc, #144]	; (801818c <tcp_input+0x54c>)
 80180fc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80180fe:	4b24      	ldr	r3, [pc, #144]	; (8018190 <tcp_input+0x550>)
 8018100:	2200      	movs	r2, #0
 8018102:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8018104:	4b23      	ldr	r3, [pc, #140]	; (8018194 <tcp_input+0x554>)
 8018106:	2200      	movs	r2, #0
 8018108:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801810a:	4b23      	ldr	r3, [pc, #140]	; (8018198 <tcp_input+0x558>)
 801810c:	2200      	movs	r2, #0
 801810e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8018110:	4b22      	ldr	r3, [pc, #136]	; (801819c <tcp_input+0x55c>)
 8018112:	781b      	ldrb	r3, [r3, #0]
 8018114:	f003 0308 	and.w	r3, r3, #8
 8018118:	2b00      	cmp	r3, #0
 801811a:	d006      	beq.n	801812a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	7b5b      	ldrb	r3, [r3, #13]
 8018120:	f043 0301 	orr.w	r3, r3, #1
 8018124:	b2da      	uxtb	r2, r3
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801812a:	69fb      	ldr	r3, [r7, #28]
 801812c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801812e:	2b00      	cmp	r3, #0
 8018130:	d038      	beq.n	80181a4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018132:	69f8      	ldr	r0, [r7, #28]
 8018134:	f7ff f852 	bl	80171dc <tcp_process_refused_data>
 8018138:	4603      	mov	r3, r0
 801813a:	f113 0f0d 	cmn.w	r3, #13
 801813e:	d007      	beq.n	8018150 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018140:	69fb      	ldr	r3, [r7, #28]
 8018142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018144:	2b00      	cmp	r3, #0
 8018146:	d02d      	beq.n	80181a4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018148:	4b15      	ldr	r3, [pc, #84]	; (80181a0 <tcp_input+0x560>)
 801814a:	881b      	ldrh	r3, [r3, #0]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d029      	beq.n	80181a4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8018150:	69fb      	ldr	r3, [r7, #28]
 8018152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018154:	2b00      	cmp	r3, #0
 8018156:	f040 8104 	bne.w	8018362 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801815a:	69f8      	ldr	r0, [r7, #28]
 801815c:	f003 fe16 	bl	801bd8c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8018160:	e0ff      	b.n	8018362 <tcp_input+0x722>
 8018162:	bf00      	nop
 8018164:	2000c80c 	.word	0x2000c80c
 8018168:	20011048 	.word	0x20011048
 801816c:	08022694 	.word	0x08022694
 8018170:	080227c0 	.word	0x080227c0
 8018174:	080226e0 	.word	0x080226e0
 8018178:	2001475c 	.word	0x2001475c
 801817c:	080227ec 	.word	0x080227ec
 8018180:	2001476c 	.word	0x2001476c
 8018184:	08022818 	.word	0x08022818
 8018188:	20014764 	.word	0x20014764
 801818c:	2000c7fc 	.word	0x2000c7fc
 8018190:	2000c82c 	.word	0x2000c82c
 8018194:	2000c829 	.word	0x2000c829
 8018198:	2000c824 	.word	0x2000c824
 801819c:	2000c828 	.word	0x2000c828
 80181a0:	2000c826 	.word	0x2000c826
      }
    }
    tcp_input_pcb = pcb;
 80181a4:	4a9c      	ldr	r2, [pc, #624]	; (8018418 <tcp_input+0x7d8>)
 80181a6:	69fb      	ldr	r3, [r7, #28]
 80181a8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80181aa:	69f8      	ldr	r0, [r7, #28]
 80181ac:	f000 fb0a 	bl	80187c4 <tcp_process>
 80181b0:	4603      	mov	r3, r0
 80181b2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80181b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80181b8:	f113 0f0d 	cmn.w	r3, #13
 80181bc:	f000 80d3 	beq.w	8018366 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80181c0:	4b96      	ldr	r3, [pc, #600]	; (801841c <tcp_input+0x7dc>)
 80181c2:	781b      	ldrb	r3, [r3, #0]
 80181c4:	f003 0308 	and.w	r3, r3, #8
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d015      	beq.n	80181f8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80181cc:	69fb      	ldr	r3, [r7, #28]
 80181ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d008      	beq.n	80181e8 <tcp_input+0x5a8>
 80181d6:	69fb      	ldr	r3, [r7, #28]
 80181d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181dc:	69fa      	ldr	r2, [r7, #28]
 80181de:	6912      	ldr	r2, [r2, #16]
 80181e0:	f06f 010d 	mvn.w	r1, #13
 80181e4:	4610      	mov	r0, r2
 80181e6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80181e8:	69f9      	ldr	r1, [r7, #28]
 80181ea:	488d      	ldr	r0, [pc, #564]	; (8018420 <tcp_input+0x7e0>)
 80181ec:	f7ff fbb0 	bl	8017950 <tcp_pcb_remove>
        tcp_free(pcb);
 80181f0:	69f8      	ldr	r0, [r7, #28]
 80181f2:	f7fd fef7 	bl	8015fe4 <tcp_free>
 80181f6:	e0c1      	b.n	801837c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80181f8:	2300      	movs	r3, #0
 80181fa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80181fc:	4b89      	ldr	r3, [pc, #548]	; (8018424 <tcp_input+0x7e4>)
 80181fe:	881b      	ldrh	r3, [r3, #0]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d01d      	beq.n	8018240 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8018204:	4b87      	ldr	r3, [pc, #540]	; (8018424 <tcp_input+0x7e4>)
 8018206:	881b      	ldrh	r3, [r3, #0]
 8018208:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801820a:	69fb      	ldr	r3, [r7, #28]
 801820c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018210:	2b00      	cmp	r3, #0
 8018212:	d00a      	beq.n	801822a <tcp_input+0x5ea>
 8018214:	69fb      	ldr	r3, [r7, #28]
 8018216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801821a:	69fa      	ldr	r2, [r7, #28]
 801821c:	6910      	ldr	r0, [r2, #16]
 801821e:	89fa      	ldrh	r2, [r7, #14]
 8018220:	69f9      	ldr	r1, [r7, #28]
 8018222:	4798      	blx	r3
 8018224:	4603      	mov	r3, r0
 8018226:	74fb      	strb	r3, [r7, #19]
 8018228:	e001      	b.n	801822e <tcp_input+0x5ee>
 801822a:	2300      	movs	r3, #0
 801822c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801822e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018232:	f113 0f0d 	cmn.w	r3, #13
 8018236:	f000 8098 	beq.w	801836a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801823a:	4b7a      	ldr	r3, [pc, #488]	; (8018424 <tcp_input+0x7e4>)
 801823c:	2200      	movs	r2, #0
 801823e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8018240:	69f8      	ldr	r0, [r7, #28]
 8018242:	f000 f907 	bl	8018454 <tcp_input_delayed_close>
 8018246:	4603      	mov	r3, r0
 8018248:	2b00      	cmp	r3, #0
 801824a:	f040 8090 	bne.w	801836e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801824e:	4b76      	ldr	r3, [pc, #472]	; (8018428 <tcp_input+0x7e8>)
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d041      	beq.n	80182da <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8018256:	69fb      	ldr	r3, [r7, #28]
 8018258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801825a:	2b00      	cmp	r3, #0
 801825c:	d006      	beq.n	801826c <tcp_input+0x62c>
 801825e:	4b73      	ldr	r3, [pc, #460]	; (801842c <tcp_input+0x7ec>)
 8018260:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8018264:	4972      	ldr	r1, [pc, #456]	; (8018430 <tcp_input+0x7f0>)
 8018266:	4873      	ldr	r0, [pc, #460]	; (8018434 <tcp_input+0x7f4>)
 8018268:	f006 fe70 	bl	801ef4c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801826c:	69fb      	ldr	r3, [r7, #28]
 801826e:	8b5b      	ldrh	r3, [r3, #26]
 8018270:	f003 0310 	and.w	r3, r3, #16
 8018274:	2b00      	cmp	r3, #0
 8018276:	d008      	beq.n	801828a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018278:	4b6b      	ldr	r3, [pc, #428]	; (8018428 <tcp_input+0x7e8>)
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	4618      	mov	r0, r3
 801827e:	f7fd fc05 	bl	8015a8c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8018282:	69f8      	ldr	r0, [r7, #28]
 8018284:	f7fe f996 	bl	80165b4 <tcp_abort>
            goto aborted;
 8018288:	e078      	b.n	801837c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801828a:	69fb      	ldr	r3, [r7, #28]
 801828c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018290:	2b00      	cmp	r3, #0
 8018292:	d00c      	beq.n	80182ae <tcp_input+0x66e>
 8018294:	69fb      	ldr	r3, [r7, #28]
 8018296:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801829a:	69fb      	ldr	r3, [r7, #28]
 801829c:	6918      	ldr	r0, [r3, #16]
 801829e:	4b62      	ldr	r3, [pc, #392]	; (8018428 <tcp_input+0x7e8>)
 80182a0:	681a      	ldr	r2, [r3, #0]
 80182a2:	2300      	movs	r3, #0
 80182a4:	69f9      	ldr	r1, [r7, #28]
 80182a6:	47a0      	blx	r4
 80182a8:	4603      	mov	r3, r0
 80182aa:	74fb      	strb	r3, [r7, #19]
 80182ac:	e008      	b.n	80182c0 <tcp_input+0x680>
 80182ae:	4b5e      	ldr	r3, [pc, #376]	; (8018428 <tcp_input+0x7e8>)
 80182b0:	681a      	ldr	r2, [r3, #0]
 80182b2:	2300      	movs	r3, #0
 80182b4:	69f9      	ldr	r1, [r7, #28]
 80182b6:	2000      	movs	r0, #0
 80182b8:	f7ff f884 	bl	80173c4 <tcp_recv_null>
 80182bc:	4603      	mov	r3, r0
 80182be:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80182c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80182c4:	f113 0f0d 	cmn.w	r3, #13
 80182c8:	d053      	beq.n	8018372 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80182ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d003      	beq.n	80182da <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80182d2:	4b55      	ldr	r3, [pc, #340]	; (8018428 <tcp_input+0x7e8>)
 80182d4:	681a      	ldr	r2, [r3, #0]
 80182d6:	69fb      	ldr	r3, [r7, #28]
 80182d8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80182da:	4b50      	ldr	r3, [pc, #320]	; (801841c <tcp_input+0x7dc>)
 80182dc:	781b      	ldrb	r3, [r3, #0]
 80182de:	f003 0320 	and.w	r3, r3, #32
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d030      	beq.n	8018348 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80182e6:	69fb      	ldr	r3, [r7, #28]
 80182e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d009      	beq.n	8018302 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80182ee:	69fb      	ldr	r3, [r7, #28]
 80182f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80182f2:	7b5a      	ldrb	r2, [r3, #13]
 80182f4:	69fb      	ldr	r3, [r7, #28]
 80182f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80182f8:	f042 0220 	orr.w	r2, r2, #32
 80182fc:	b2d2      	uxtb	r2, r2
 80182fe:	735a      	strb	r2, [r3, #13]
 8018300:	e022      	b.n	8018348 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8018302:	69fb      	ldr	r3, [r7, #28]
 8018304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018306:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801830a:	d005      	beq.n	8018318 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801830c:	69fb      	ldr	r3, [r7, #28]
 801830e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018310:	3301      	adds	r3, #1
 8018312:	b29a      	uxth	r2, r3
 8018314:	69fb      	ldr	r3, [r7, #28]
 8018316:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8018318:	69fb      	ldr	r3, [r7, #28]
 801831a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801831e:	2b00      	cmp	r3, #0
 8018320:	d00b      	beq.n	801833a <tcp_input+0x6fa>
 8018322:	69fb      	ldr	r3, [r7, #28]
 8018324:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018328:	69fb      	ldr	r3, [r7, #28]
 801832a:	6918      	ldr	r0, [r3, #16]
 801832c:	2300      	movs	r3, #0
 801832e:	2200      	movs	r2, #0
 8018330:	69f9      	ldr	r1, [r7, #28]
 8018332:	47a0      	blx	r4
 8018334:	4603      	mov	r3, r0
 8018336:	74fb      	strb	r3, [r7, #19]
 8018338:	e001      	b.n	801833e <tcp_input+0x6fe>
 801833a:	2300      	movs	r3, #0
 801833c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801833e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018342:	f113 0f0d 	cmn.w	r3, #13
 8018346:	d016      	beq.n	8018376 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8018348:	4b33      	ldr	r3, [pc, #204]	; (8018418 <tcp_input+0x7d8>)
 801834a:	2200      	movs	r2, #0
 801834c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801834e:	69f8      	ldr	r0, [r7, #28]
 8018350:	f000 f880 	bl	8018454 <tcp_input_delayed_close>
 8018354:	4603      	mov	r3, r0
 8018356:	2b00      	cmp	r3, #0
 8018358:	d10f      	bne.n	801837a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801835a:	69f8      	ldr	r0, [r7, #28]
 801835c:	f002 ff10 	bl	801b180 <tcp_output>
 8018360:	e00c      	b.n	801837c <tcp_input+0x73c>
        goto aborted;
 8018362:	bf00      	nop
 8018364:	e00a      	b.n	801837c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8018366:	bf00      	nop
 8018368:	e008      	b.n	801837c <tcp_input+0x73c>
              goto aborted;
 801836a:	bf00      	nop
 801836c:	e006      	b.n	801837c <tcp_input+0x73c>
          goto aborted;
 801836e:	bf00      	nop
 8018370:	e004      	b.n	801837c <tcp_input+0x73c>
            goto aborted;
 8018372:	bf00      	nop
 8018374:	e002      	b.n	801837c <tcp_input+0x73c>
              goto aborted;
 8018376:	bf00      	nop
 8018378:	e000      	b.n	801837c <tcp_input+0x73c>
          goto aborted;
 801837a:	bf00      	nop
    tcp_input_pcb = NULL;
 801837c:	4b26      	ldr	r3, [pc, #152]	; (8018418 <tcp_input+0x7d8>)
 801837e:	2200      	movs	r2, #0
 8018380:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8018382:	4b29      	ldr	r3, [pc, #164]	; (8018428 <tcp_input+0x7e8>)
 8018384:	2200      	movs	r2, #0
 8018386:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8018388:	4b2b      	ldr	r3, [pc, #172]	; (8018438 <tcp_input+0x7f8>)
 801838a:	685b      	ldr	r3, [r3, #4]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d03f      	beq.n	8018410 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8018390:	4b29      	ldr	r3, [pc, #164]	; (8018438 <tcp_input+0x7f8>)
 8018392:	685b      	ldr	r3, [r3, #4]
 8018394:	4618      	mov	r0, r3
 8018396:	f7fd fb79 	bl	8015a8c <pbuf_free>
      inseg.p = NULL;
 801839a:	4b27      	ldr	r3, [pc, #156]	; (8018438 <tcp_input+0x7f8>)
 801839c:	2200      	movs	r2, #0
 801839e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80183a0:	e036      	b.n	8018410 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80183a2:	4b26      	ldr	r3, [pc, #152]	; (801843c <tcp_input+0x7fc>)
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	899b      	ldrh	r3, [r3, #12]
 80183a8:	b29b      	uxth	r3, r3
 80183aa:	4618      	mov	r0, r3
 80183ac:	f7fb ff7a 	bl	80142a4 <lwip_htons>
 80183b0:	4603      	mov	r3, r0
 80183b2:	b2db      	uxtb	r3, r3
 80183b4:	f003 0304 	and.w	r3, r3, #4
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d118      	bne.n	80183ee <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183bc:	4b20      	ldr	r3, [pc, #128]	; (8018440 <tcp_input+0x800>)
 80183be:	6819      	ldr	r1, [r3, #0]
 80183c0:	4b20      	ldr	r3, [pc, #128]	; (8018444 <tcp_input+0x804>)
 80183c2:	881b      	ldrh	r3, [r3, #0]
 80183c4:	461a      	mov	r2, r3
 80183c6:	4b20      	ldr	r3, [pc, #128]	; (8018448 <tcp_input+0x808>)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80183cc:	4b1b      	ldr	r3, [pc, #108]	; (801843c <tcp_input+0x7fc>)
 80183ce:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183d0:	885b      	ldrh	r3, [r3, #2]
 80183d2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80183d4:	4a19      	ldr	r2, [pc, #100]	; (801843c <tcp_input+0x7fc>)
 80183d6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183d8:	8812      	ldrh	r2, [r2, #0]
 80183da:	b292      	uxth	r2, r2
 80183dc:	9202      	str	r2, [sp, #8]
 80183de:	9301      	str	r3, [sp, #4]
 80183e0:	4b1a      	ldr	r3, [pc, #104]	; (801844c <tcp_input+0x80c>)
 80183e2:	9300      	str	r3, [sp, #0]
 80183e4:	4b1a      	ldr	r3, [pc, #104]	; (8018450 <tcp_input+0x810>)
 80183e6:	4602      	mov	r2, r0
 80183e8:	2000      	movs	r0, #0
 80183ea:	f003 fc7d 	bl	801bce8 <tcp_rst>
    pbuf_free(p);
 80183ee:	6878      	ldr	r0, [r7, #4]
 80183f0:	f7fd fb4c 	bl	8015a8c <pbuf_free>
  return;
 80183f4:	e00c      	b.n	8018410 <tcp_input+0x7d0>
    goto dropped;
 80183f6:	bf00      	nop
 80183f8:	e006      	b.n	8018408 <tcp_input+0x7c8>
    goto dropped;
 80183fa:	bf00      	nop
 80183fc:	e004      	b.n	8018408 <tcp_input+0x7c8>
    goto dropped;
 80183fe:	bf00      	nop
 8018400:	e002      	b.n	8018408 <tcp_input+0x7c8>
      goto dropped;
 8018402:	bf00      	nop
 8018404:	e000      	b.n	8018408 <tcp_input+0x7c8>
      goto dropped;
 8018406:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8018408:	6878      	ldr	r0, [r7, #4]
 801840a:	f7fd fb3f 	bl	8015a8c <pbuf_free>
 801840e:	e000      	b.n	8018412 <tcp_input+0x7d2>
  return;
 8018410:	bf00      	nop
}
 8018412:	3724      	adds	r7, #36	; 0x24
 8018414:	46bd      	mov	sp, r7
 8018416:	bd90      	pop	{r4, r7, pc}
 8018418:	20014770 	.word	0x20014770
 801841c:	2000c829 	.word	0x2000c829
 8018420:	2001475c 	.word	0x2001475c
 8018424:	2000c824 	.word	0x2000c824
 8018428:	2000c82c 	.word	0x2000c82c
 801842c:	08022694 	.word	0x08022694
 8018430:	08022848 	.word	0x08022848
 8018434:	080226e0 	.word	0x080226e0
 8018438:	2000c7fc 	.word	0x2000c7fc
 801843c:	2000c80c 	.word	0x2000c80c
 8018440:	2000c820 	.word	0x2000c820
 8018444:	2000c826 	.word	0x2000c826
 8018448:	2000c81c 	.word	0x2000c81c
 801844c:	20011058 	.word	0x20011058
 8018450:	2001105c 	.word	0x2001105c

08018454 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b082      	sub	sp, #8
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	2b00      	cmp	r3, #0
 8018460:	d106      	bne.n	8018470 <tcp_input_delayed_close+0x1c>
 8018462:	4b17      	ldr	r3, [pc, #92]	; (80184c0 <tcp_input_delayed_close+0x6c>)
 8018464:	f240 225a 	movw	r2, #602	; 0x25a
 8018468:	4916      	ldr	r1, [pc, #88]	; (80184c4 <tcp_input_delayed_close+0x70>)
 801846a:	4817      	ldr	r0, [pc, #92]	; (80184c8 <tcp_input_delayed_close+0x74>)
 801846c:	f006 fd6e 	bl	801ef4c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8018470:	4b16      	ldr	r3, [pc, #88]	; (80184cc <tcp_input_delayed_close+0x78>)
 8018472:	781b      	ldrb	r3, [r3, #0]
 8018474:	f003 0310 	and.w	r3, r3, #16
 8018478:	2b00      	cmp	r3, #0
 801847a:	d01c      	beq.n	80184b6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	8b5b      	ldrh	r3, [r3, #26]
 8018480:	f003 0310 	and.w	r3, r3, #16
 8018484:	2b00      	cmp	r3, #0
 8018486:	d10d      	bne.n	80184a4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801848e:	2b00      	cmp	r3, #0
 8018490:	d008      	beq.n	80184a4 <tcp_input_delayed_close+0x50>
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018498:	687a      	ldr	r2, [r7, #4]
 801849a:	6912      	ldr	r2, [r2, #16]
 801849c:	f06f 010e 	mvn.w	r1, #14
 80184a0:	4610      	mov	r0, r2
 80184a2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80184a4:	6879      	ldr	r1, [r7, #4]
 80184a6:	480a      	ldr	r0, [pc, #40]	; (80184d0 <tcp_input_delayed_close+0x7c>)
 80184a8:	f7ff fa52 	bl	8017950 <tcp_pcb_remove>
    tcp_free(pcb);
 80184ac:	6878      	ldr	r0, [r7, #4]
 80184ae:	f7fd fd99 	bl	8015fe4 <tcp_free>
    return 1;
 80184b2:	2301      	movs	r3, #1
 80184b4:	e000      	b.n	80184b8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80184b6:	2300      	movs	r3, #0
}
 80184b8:	4618      	mov	r0, r3
 80184ba:	3708      	adds	r7, #8
 80184bc:	46bd      	mov	sp, r7
 80184be:	bd80      	pop	{r7, pc}
 80184c0:	08022694 	.word	0x08022694
 80184c4:	08022864 	.word	0x08022864
 80184c8:	080226e0 	.word	0x080226e0
 80184cc:	2000c829 	.word	0x2000c829
 80184d0:	2001475c 	.word	0x2001475c

080184d4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80184d4:	b590      	push	{r4, r7, lr}
 80184d6:	b08b      	sub	sp, #44	; 0x2c
 80184d8:	af04      	add	r7, sp, #16
 80184da:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80184dc:	4b6f      	ldr	r3, [pc, #444]	; (801869c <tcp_listen_input+0x1c8>)
 80184de:	781b      	ldrb	r3, [r3, #0]
 80184e0:	f003 0304 	and.w	r3, r3, #4
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	f040 80d2 	bne.w	801868e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d106      	bne.n	80184fe <tcp_listen_input+0x2a>
 80184f0:	4b6b      	ldr	r3, [pc, #428]	; (80186a0 <tcp_listen_input+0x1cc>)
 80184f2:	f240 2281 	movw	r2, #641	; 0x281
 80184f6:	496b      	ldr	r1, [pc, #428]	; (80186a4 <tcp_listen_input+0x1d0>)
 80184f8:	486b      	ldr	r0, [pc, #428]	; (80186a8 <tcp_listen_input+0x1d4>)
 80184fa:	f006 fd27 	bl	801ef4c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80184fe:	4b67      	ldr	r3, [pc, #412]	; (801869c <tcp_listen_input+0x1c8>)
 8018500:	781b      	ldrb	r3, [r3, #0]
 8018502:	f003 0310 	and.w	r3, r3, #16
 8018506:	2b00      	cmp	r3, #0
 8018508:	d019      	beq.n	801853e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801850a:	4b68      	ldr	r3, [pc, #416]	; (80186ac <tcp_listen_input+0x1d8>)
 801850c:	6819      	ldr	r1, [r3, #0]
 801850e:	4b68      	ldr	r3, [pc, #416]	; (80186b0 <tcp_listen_input+0x1dc>)
 8018510:	881b      	ldrh	r3, [r3, #0]
 8018512:	461a      	mov	r2, r3
 8018514:	4b67      	ldr	r3, [pc, #412]	; (80186b4 <tcp_listen_input+0x1e0>)
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801851a:	4b67      	ldr	r3, [pc, #412]	; (80186b8 <tcp_listen_input+0x1e4>)
 801851c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801851e:	885b      	ldrh	r3, [r3, #2]
 8018520:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018522:	4a65      	ldr	r2, [pc, #404]	; (80186b8 <tcp_listen_input+0x1e4>)
 8018524:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018526:	8812      	ldrh	r2, [r2, #0]
 8018528:	b292      	uxth	r2, r2
 801852a:	9202      	str	r2, [sp, #8]
 801852c:	9301      	str	r3, [sp, #4]
 801852e:	4b63      	ldr	r3, [pc, #396]	; (80186bc <tcp_listen_input+0x1e8>)
 8018530:	9300      	str	r3, [sp, #0]
 8018532:	4b63      	ldr	r3, [pc, #396]	; (80186c0 <tcp_listen_input+0x1ec>)
 8018534:	4602      	mov	r2, r0
 8018536:	6878      	ldr	r0, [r7, #4]
 8018538:	f003 fbd6 	bl	801bce8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801853c:	e0a9      	b.n	8018692 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801853e:	4b57      	ldr	r3, [pc, #348]	; (801869c <tcp_listen_input+0x1c8>)
 8018540:	781b      	ldrb	r3, [r3, #0]
 8018542:	f003 0302 	and.w	r3, r3, #2
 8018546:	2b00      	cmp	r3, #0
 8018548:	f000 80a3 	beq.w	8018692 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	7d5b      	ldrb	r3, [r3, #21]
 8018550:	4618      	mov	r0, r3
 8018552:	f7ff f85b 	bl	801760c <tcp_alloc>
 8018556:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018558:	697b      	ldr	r3, [r7, #20]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d111      	bne.n	8018582 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	699b      	ldr	r3, [r3, #24]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d00a      	beq.n	801857c <tcp_listen_input+0xa8>
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	699b      	ldr	r3, [r3, #24]
 801856a:	687a      	ldr	r2, [r7, #4]
 801856c:	6910      	ldr	r0, [r2, #16]
 801856e:	f04f 32ff 	mov.w	r2, #4294967295
 8018572:	2100      	movs	r1, #0
 8018574:	4798      	blx	r3
 8018576:	4603      	mov	r3, r0
 8018578:	73bb      	strb	r3, [r7, #14]
      return;
 801857a:	e08b      	b.n	8018694 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801857c:	23f0      	movs	r3, #240	; 0xf0
 801857e:	73bb      	strb	r3, [r7, #14]
      return;
 8018580:	e088      	b.n	8018694 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8018582:	4b50      	ldr	r3, [pc, #320]	; (80186c4 <tcp_listen_input+0x1f0>)
 8018584:	695a      	ldr	r2, [r3, #20]
 8018586:	697b      	ldr	r3, [r7, #20]
 8018588:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801858a:	4b4e      	ldr	r3, [pc, #312]	; (80186c4 <tcp_listen_input+0x1f0>)
 801858c:	691a      	ldr	r2, [r3, #16]
 801858e:	697b      	ldr	r3, [r7, #20]
 8018590:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	8ada      	ldrh	r2, [r3, #22]
 8018596:	697b      	ldr	r3, [r7, #20]
 8018598:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801859a:	4b47      	ldr	r3, [pc, #284]	; (80186b8 <tcp_listen_input+0x1e4>)
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	881b      	ldrh	r3, [r3, #0]
 80185a0:	b29a      	uxth	r2, r3
 80185a2:	697b      	ldr	r3, [r7, #20]
 80185a4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80185a6:	697b      	ldr	r3, [r7, #20]
 80185a8:	2203      	movs	r2, #3
 80185aa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80185ac:	4b41      	ldr	r3, [pc, #260]	; (80186b4 <tcp_listen_input+0x1e0>)
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	1c5a      	adds	r2, r3, #1
 80185b2:	697b      	ldr	r3, [r7, #20]
 80185b4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80185b6:	697b      	ldr	r3, [r7, #20]
 80185b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80185ba:	697b      	ldr	r3, [r7, #20]
 80185bc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80185be:	6978      	ldr	r0, [r7, #20]
 80185c0:	f7ff fa5a 	bl	8017a78 <tcp_next_iss>
 80185c4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80185c6:	697b      	ldr	r3, [r7, #20]
 80185c8:	693a      	ldr	r2, [r7, #16]
 80185ca:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80185cc:	697b      	ldr	r3, [r7, #20]
 80185ce:	693a      	ldr	r2, [r7, #16]
 80185d0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80185d2:	697b      	ldr	r3, [r7, #20]
 80185d4:	693a      	ldr	r2, [r7, #16]
 80185d6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80185d8:	697b      	ldr	r3, [r7, #20]
 80185da:	693a      	ldr	r2, [r7, #16]
 80185dc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80185de:	4b35      	ldr	r3, [pc, #212]	; (80186b4 <tcp_listen_input+0x1e0>)
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	1e5a      	subs	r2, r3, #1
 80185e4:	697b      	ldr	r3, [r7, #20]
 80185e6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	691a      	ldr	r2, [r3, #16]
 80185ec:	697b      	ldr	r3, [r7, #20]
 80185ee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80185f0:	697b      	ldr	r3, [r7, #20]
 80185f2:	687a      	ldr	r2, [r7, #4]
 80185f4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	7a5b      	ldrb	r3, [r3, #9]
 80185fa:	f003 030c 	and.w	r3, r3, #12
 80185fe:	b2da      	uxtb	r2, r3
 8018600:	697b      	ldr	r3, [r7, #20]
 8018602:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	7a1a      	ldrb	r2, [r3, #8]
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801860c:	4b2e      	ldr	r3, [pc, #184]	; (80186c8 <tcp_listen_input+0x1f4>)
 801860e:	681a      	ldr	r2, [r3, #0]
 8018610:	697b      	ldr	r3, [r7, #20]
 8018612:	60da      	str	r2, [r3, #12]
 8018614:	4a2c      	ldr	r2, [pc, #176]	; (80186c8 <tcp_listen_input+0x1f4>)
 8018616:	697b      	ldr	r3, [r7, #20]
 8018618:	6013      	str	r3, [r2, #0]
 801861a:	f003 fd27 	bl	801c06c <tcp_timer_needed>
 801861e:	4b2b      	ldr	r3, [pc, #172]	; (80186cc <tcp_listen_input+0x1f8>)
 8018620:	2201      	movs	r2, #1
 8018622:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018624:	6978      	ldr	r0, [r7, #20]
 8018626:	f001 fd8d 	bl	801a144 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801862a:	4b23      	ldr	r3, [pc, #140]	; (80186b8 <tcp_listen_input+0x1e4>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	89db      	ldrh	r3, [r3, #14]
 8018630:	b29a      	uxth	r2, r3
 8018632:	697b      	ldr	r3, [r7, #20]
 8018634:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018638:	697b      	ldr	r3, [r7, #20]
 801863a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801863e:	697b      	ldr	r3, [r7, #20]
 8018640:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018644:	697b      	ldr	r3, [r7, #20]
 8018646:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018648:	697b      	ldr	r3, [r7, #20]
 801864a:	3304      	adds	r3, #4
 801864c:	4618      	mov	r0, r3
 801864e:	f005 f91b 	bl	801d888 <ip4_route>
 8018652:	4601      	mov	r1, r0
 8018654:	697b      	ldr	r3, [r7, #20]
 8018656:	3304      	adds	r3, #4
 8018658:	461a      	mov	r2, r3
 801865a:	4620      	mov	r0, r4
 801865c:	f7ff fa32 	bl	8017ac4 <tcp_eff_send_mss_netif>
 8018660:	4603      	mov	r3, r0
 8018662:	461a      	mov	r2, r3
 8018664:	697b      	ldr	r3, [r7, #20]
 8018666:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018668:	2112      	movs	r1, #18
 801866a:	6978      	ldr	r0, [r7, #20]
 801866c:	f002 fc9a 	bl	801afa4 <tcp_enqueue_flags>
 8018670:	4603      	mov	r3, r0
 8018672:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d004      	beq.n	8018686 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801867c:	2100      	movs	r1, #0
 801867e:	6978      	ldr	r0, [r7, #20]
 8018680:	f7fd feda 	bl	8016438 <tcp_abandon>
      return;
 8018684:	e006      	b.n	8018694 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8018686:	6978      	ldr	r0, [r7, #20]
 8018688:	f002 fd7a 	bl	801b180 <tcp_output>
  return;
 801868c:	e001      	b.n	8018692 <tcp_listen_input+0x1be>
    return;
 801868e:	bf00      	nop
 8018690:	e000      	b.n	8018694 <tcp_listen_input+0x1c0>
  return;
 8018692:	bf00      	nop
}
 8018694:	371c      	adds	r7, #28
 8018696:	46bd      	mov	sp, r7
 8018698:	bd90      	pop	{r4, r7, pc}
 801869a:	bf00      	nop
 801869c:	2000c828 	.word	0x2000c828
 80186a0:	08022694 	.word	0x08022694
 80186a4:	0802288c 	.word	0x0802288c
 80186a8:	080226e0 	.word	0x080226e0
 80186ac:	2000c820 	.word	0x2000c820
 80186b0:	2000c826 	.word	0x2000c826
 80186b4:	2000c81c 	.word	0x2000c81c
 80186b8:	2000c80c 	.word	0x2000c80c
 80186bc:	20011058 	.word	0x20011058
 80186c0:	2001105c 	.word	0x2001105c
 80186c4:	20011048 	.word	0x20011048
 80186c8:	2001475c 	.word	0x2001475c
 80186cc:	20014758 	.word	0x20014758

080186d0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b086      	sub	sp, #24
 80186d4:	af04      	add	r7, sp, #16
 80186d6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80186d8:	4b2f      	ldr	r3, [pc, #188]	; (8018798 <tcp_timewait_input+0xc8>)
 80186da:	781b      	ldrb	r3, [r3, #0]
 80186dc:	f003 0304 	and.w	r3, r3, #4
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d153      	bne.n	801878c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d106      	bne.n	80186f8 <tcp_timewait_input+0x28>
 80186ea:	4b2c      	ldr	r3, [pc, #176]	; (801879c <tcp_timewait_input+0xcc>)
 80186ec:	f240 22ee 	movw	r2, #750	; 0x2ee
 80186f0:	492b      	ldr	r1, [pc, #172]	; (80187a0 <tcp_timewait_input+0xd0>)
 80186f2:	482c      	ldr	r0, [pc, #176]	; (80187a4 <tcp_timewait_input+0xd4>)
 80186f4:	f006 fc2a 	bl	801ef4c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80186f8:	4b27      	ldr	r3, [pc, #156]	; (8018798 <tcp_timewait_input+0xc8>)
 80186fa:	781b      	ldrb	r3, [r3, #0]
 80186fc:	f003 0302 	and.w	r3, r3, #2
 8018700:	2b00      	cmp	r3, #0
 8018702:	d02a      	beq.n	801875a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018704:	4b28      	ldr	r3, [pc, #160]	; (80187a8 <tcp_timewait_input+0xd8>)
 8018706:	681a      	ldr	r2, [r3, #0]
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801870c:	1ad3      	subs	r3, r2, r3
 801870e:	2b00      	cmp	r3, #0
 8018710:	db2d      	blt.n	801876e <tcp_timewait_input+0x9e>
 8018712:	4b25      	ldr	r3, [pc, #148]	; (80187a8 <tcp_timewait_input+0xd8>)
 8018714:	681a      	ldr	r2, [r3, #0]
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801871a:	6879      	ldr	r1, [r7, #4]
 801871c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801871e:	440b      	add	r3, r1
 8018720:	1ad3      	subs	r3, r2, r3
 8018722:	2b00      	cmp	r3, #0
 8018724:	dc23      	bgt.n	801876e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018726:	4b21      	ldr	r3, [pc, #132]	; (80187ac <tcp_timewait_input+0xdc>)
 8018728:	6819      	ldr	r1, [r3, #0]
 801872a:	4b21      	ldr	r3, [pc, #132]	; (80187b0 <tcp_timewait_input+0xe0>)
 801872c:	881b      	ldrh	r3, [r3, #0]
 801872e:	461a      	mov	r2, r3
 8018730:	4b1d      	ldr	r3, [pc, #116]	; (80187a8 <tcp_timewait_input+0xd8>)
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018736:	4b1f      	ldr	r3, [pc, #124]	; (80187b4 <tcp_timewait_input+0xe4>)
 8018738:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801873a:	885b      	ldrh	r3, [r3, #2]
 801873c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801873e:	4a1d      	ldr	r2, [pc, #116]	; (80187b4 <tcp_timewait_input+0xe4>)
 8018740:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018742:	8812      	ldrh	r2, [r2, #0]
 8018744:	b292      	uxth	r2, r2
 8018746:	9202      	str	r2, [sp, #8]
 8018748:	9301      	str	r3, [sp, #4]
 801874a:	4b1b      	ldr	r3, [pc, #108]	; (80187b8 <tcp_timewait_input+0xe8>)
 801874c:	9300      	str	r3, [sp, #0]
 801874e:	4b1b      	ldr	r3, [pc, #108]	; (80187bc <tcp_timewait_input+0xec>)
 8018750:	4602      	mov	r2, r0
 8018752:	6878      	ldr	r0, [r7, #4]
 8018754:	f003 fac8 	bl	801bce8 <tcp_rst>
      return;
 8018758:	e01b      	b.n	8018792 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801875a:	4b0f      	ldr	r3, [pc, #60]	; (8018798 <tcp_timewait_input+0xc8>)
 801875c:	781b      	ldrb	r3, [r3, #0]
 801875e:	f003 0301 	and.w	r3, r3, #1
 8018762:	2b00      	cmp	r3, #0
 8018764:	d003      	beq.n	801876e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018766:	4b16      	ldr	r3, [pc, #88]	; (80187c0 <tcp_timewait_input+0xf0>)
 8018768:	681a      	ldr	r2, [r3, #0]
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801876e:	4b10      	ldr	r3, [pc, #64]	; (80187b0 <tcp_timewait_input+0xe0>)
 8018770:	881b      	ldrh	r3, [r3, #0]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d00c      	beq.n	8018790 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	8b5b      	ldrh	r3, [r3, #26]
 801877a:	f043 0302 	orr.w	r3, r3, #2
 801877e:	b29a      	uxth	r2, r3
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018784:	6878      	ldr	r0, [r7, #4]
 8018786:	f002 fcfb 	bl	801b180 <tcp_output>
  }
  return;
 801878a:	e001      	b.n	8018790 <tcp_timewait_input+0xc0>
    return;
 801878c:	bf00      	nop
 801878e:	e000      	b.n	8018792 <tcp_timewait_input+0xc2>
  return;
 8018790:	bf00      	nop
}
 8018792:	3708      	adds	r7, #8
 8018794:	46bd      	mov	sp, r7
 8018796:	bd80      	pop	{r7, pc}
 8018798:	2000c828 	.word	0x2000c828
 801879c:	08022694 	.word	0x08022694
 80187a0:	080228ac 	.word	0x080228ac
 80187a4:	080226e0 	.word	0x080226e0
 80187a8:	2000c81c 	.word	0x2000c81c
 80187ac:	2000c820 	.word	0x2000c820
 80187b0:	2000c826 	.word	0x2000c826
 80187b4:	2000c80c 	.word	0x2000c80c
 80187b8:	20011058 	.word	0x20011058
 80187bc:	2001105c 	.word	0x2001105c
 80187c0:	20014760 	.word	0x20014760

080187c4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80187c4:	b590      	push	{r4, r7, lr}
 80187c6:	b08d      	sub	sp, #52	; 0x34
 80187c8:	af04      	add	r7, sp, #16
 80187ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80187cc:	2300      	movs	r3, #0
 80187ce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80187d0:	2300      	movs	r3, #0
 80187d2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d106      	bne.n	80187e8 <tcp_process+0x24>
 80187da:	4ba5      	ldr	r3, [pc, #660]	; (8018a70 <tcp_process+0x2ac>)
 80187dc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80187e0:	49a4      	ldr	r1, [pc, #656]	; (8018a74 <tcp_process+0x2b0>)
 80187e2:	48a5      	ldr	r0, [pc, #660]	; (8018a78 <tcp_process+0x2b4>)
 80187e4:	f006 fbb2 	bl	801ef4c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80187e8:	4ba4      	ldr	r3, [pc, #656]	; (8018a7c <tcp_process+0x2b8>)
 80187ea:	781b      	ldrb	r3, [r3, #0]
 80187ec:	f003 0304 	and.w	r3, r3, #4
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d04e      	beq.n	8018892 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	7d1b      	ldrb	r3, [r3, #20]
 80187f8:	2b02      	cmp	r3, #2
 80187fa:	d108      	bne.n	801880e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018800:	4b9f      	ldr	r3, [pc, #636]	; (8018a80 <tcp_process+0x2bc>)
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	429a      	cmp	r2, r3
 8018806:	d123      	bne.n	8018850 <tcp_process+0x8c>
        acceptable = 1;
 8018808:	2301      	movs	r3, #1
 801880a:	76fb      	strb	r3, [r7, #27]
 801880c:	e020      	b.n	8018850 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018812:	4b9c      	ldr	r3, [pc, #624]	; (8018a84 <tcp_process+0x2c0>)
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	429a      	cmp	r2, r3
 8018818:	d102      	bne.n	8018820 <tcp_process+0x5c>
        acceptable = 1;
 801881a:	2301      	movs	r3, #1
 801881c:	76fb      	strb	r3, [r7, #27]
 801881e:	e017      	b.n	8018850 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018820:	4b98      	ldr	r3, [pc, #608]	; (8018a84 <tcp_process+0x2c0>)
 8018822:	681a      	ldr	r2, [r3, #0]
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018828:	1ad3      	subs	r3, r2, r3
 801882a:	2b00      	cmp	r3, #0
 801882c:	db10      	blt.n	8018850 <tcp_process+0x8c>
 801882e:	4b95      	ldr	r3, [pc, #596]	; (8018a84 <tcp_process+0x2c0>)
 8018830:	681a      	ldr	r2, [r3, #0]
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018836:	6879      	ldr	r1, [r7, #4]
 8018838:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801883a:	440b      	add	r3, r1
 801883c:	1ad3      	subs	r3, r2, r3
 801883e:	2b00      	cmp	r3, #0
 8018840:	dc06      	bgt.n	8018850 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	8b5b      	ldrh	r3, [r3, #26]
 8018846:	f043 0302 	orr.w	r3, r3, #2
 801884a:	b29a      	uxth	r2, r3
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018850:	7efb      	ldrb	r3, [r7, #27]
 8018852:	2b00      	cmp	r3, #0
 8018854:	d01b      	beq.n	801888e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	7d1b      	ldrb	r3, [r3, #20]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d106      	bne.n	801886c <tcp_process+0xa8>
 801885e:	4b84      	ldr	r3, [pc, #528]	; (8018a70 <tcp_process+0x2ac>)
 8018860:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018864:	4988      	ldr	r1, [pc, #544]	; (8018a88 <tcp_process+0x2c4>)
 8018866:	4884      	ldr	r0, [pc, #528]	; (8018a78 <tcp_process+0x2b4>)
 8018868:	f006 fb70 	bl	801ef4c <iprintf>
      recv_flags |= TF_RESET;
 801886c:	4b87      	ldr	r3, [pc, #540]	; (8018a8c <tcp_process+0x2c8>)
 801886e:	781b      	ldrb	r3, [r3, #0]
 8018870:	f043 0308 	orr.w	r3, r3, #8
 8018874:	b2da      	uxtb	r2, r3
 8018876:	4b85      	ldr	r3, [pc, #532]	; (8018a8c <tcp_process+0x2c8>)
 8018878:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	8b5b      	ldrh	r3, [r3, #26]
 801887e:	f023 0301 	bic.w	r3, r3, #1
 8018882:	b29a      	uxth	r2, r3
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018888:	f06f 030d 	mvn.w	r3, #13
 801888c:	e37a      	b.n	8018f84 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801888e:	2300      	movs	r3, #0
 8018890:	e378      	b.n	8018f84 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018892:	4b7a      	ldr	r3, [pc, #488]	; (8018a7c <tcp_process+0x2b8>)
 8018894:	781b      	ldrb	r3, [r3, #0]
 8018896:	f003 0302 	and.w	r3, r3, #2
 801889a:	2b00      	cmp	r3, #0
 801889c:	d010      	beq.n	80188c0 <tcp_process+0xfc>
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	7d1b      	ldrb	r3, [r3, #20]
 80188a2:	2b02      	cmp	r3, #2
 80188a4:	d00c      	beq.n	80188c0 <tcp_process+0xfc>
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	7d1b      	ldrb	r3, [r3, #20]
 80188aa:	2b03      	cmp	r3, #3
 80188ac:	d008      	beq.n	80188c0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	8b5b      	ldrh	r3, [r3, #26]
 80188b2:	f043 0302 	orr.w	r3, r3, #2
 80188b6:	b29a      	uxth	r2, r3
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80188bc:	2300      	movs	r3, #0
 80188be:	e361      	b.n	8018f84 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	8b5b      	ldrh	r3, [r3, #26]
 80188c4:	f003 0310 	and.w	r3, r3, #16
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d103      	bne.n	80188d4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80188cc:	4b70      	ldr	r3, [pc, #448]	; (8018a90 <tcp_process+0x2cc>)
 80188ce:	681a      	ldr	r2, [r3, #0]
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	2200      	movs	r2, #0
 80188d8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	2200      	movs	r2, #0
 80188e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80188e4:	6878      	ldr	r0, [r7, #4]
 80188e6:	f001 fc2d 	bl	801a144 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	7d1b      	ldrb	r3, [r3, #20]
 80188ee:	3b02      	subs	r3, #2
 80188f0:	2b07      	cmp	r3, #7
 80188f2:	f200 8337 	bhi.w	8018f64 <tcp_process+0x7a0>
 80188f6:	a201      	add	r2, pc, #4	; (adr r2, 80188fc <tcp_process+0x138>)
 80188f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188fc:	0801891d 	.word	0x0801891d
 8018900:	08018b4d 	.word	0x08018b4d
 8018904:	08018cc5 	.word	0x08018cc5
 8018908:	08018cef 	.word	0x08018cef
 801890c:	08018e13 	.word	0x08018e13
 8018910:	08018cc5 	.word	0x08018cc5
 8018914:	08018e9f 	.word	0x08018e9f
 8018918:	08018f2f 	.word	0x08018f2f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801891c:	4b57      	ldr	r3, [pc, #348]	; (8018a7c <tcp_process+0x2b8>)
 801891e:	781b      	ldrb	r3, [r3, #0]
 8018920:	f003 0310 	and.w	r3, r3, #16
 8018924:	2b00      	cmp	r3, #0
 8018926:	f000 80e4 	beq.w	8018af2 <tcp_process+0x32e>
 801892a:	4b54      	ldr	r3, [pc, #336]	; (8018a7c <tcp_process+0x2b8>)
 801892c:	781b      	ldrb	r3, [r3, #0]
 801892e:	f003 0302 	and.w	r3, r3, #2
 8018932:	2b00      	cmp	r3, #0
 8018934:	f000 80dd 	beq.w	8018af2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801893c:	1c5a      	adds	r2, r3, #1
 801893e:	4b50      	ldr	r3, [pc, #320]	; (8018a80 <tcp_process+0x2bc>)
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	429a      	cmp	r2, r3
 8018944:	f040 80d5 	bne.w	8018af2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018948:	4b4e      	ldr	r3, [pc, #312]	; (8018a84 <tcp_process+0x2c0>)
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	1c5a      	adds	r2, r3, #1
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801895a:	4b49      	ldr	r3, [pc, #292]	; (8018a80 <tcp_process+0x2bc>)
 801895c:	681a      	ldr	r2, [r3, #0]
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018962:	4b4c      	ldr	r3, [pc, #304]	; (8018a94 <tcp_process+0x2d0>)
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	89db      	ldrh	r3, [r3, #14]
 8018968:	b29a      	uxth	r2, r3
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801897c:	4b41      	ldr	r3, [pc, #260]	; (8018a84 <tcp_process+0x2c0>)
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	1e5a      	subs	r2, r3, #1
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	2204      	movs	r2, #4
 801898a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	3304      	adds	r3, #4
 8018994:	4618      	mov	r0, r3
 8018996:	f004 ff77 	bl	801d888 <ip4_route>
 801899a:	4601      	mov	r1, r0
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	3304      	adds	r3, #4
 80189a0:	461a      	mov	r2, r3
 80189a2:	4620      	mov	r0, r4
 80189a4:	f7ff f88e 	bl	8017ac4 <tcp_eff_send_mss_netif>
 80189a8:	4603      	mov	r3, r0
 80189aa:	461a      	mov	r2, r3
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80189b4:	009a      	lsls	r2, r3, #2
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80189ba:	005b      	lsls	r3, r3, #1
 80189bc:	f241 111c 	movw	r1, #4380	; 0x111c
 80189c0:	428b      	cmp	r3, r1
 80189c2:	bf38      	it	cc
 80189c4:	460b      	movcc	r3, r1
 80189c6:	429a      	cmp	r2, r3
 80189c8:	d204      	bcs.n	80189d4 <tcp_process+0x210>
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80189ce:	009b      	lsls	r3, r3, #2
 80189d0:	b29b      	uxth	r3, r3
 80189d2:	e00d      	b.n	80189f0 <tcp_process+0x22c>
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80189d8:	005b      	lsls	r3, r3, #1
 80189da:	f241 121c 	movw	r2, #4380	; 0x111c
 80189de:	4293      	cmp	r3, r2
 80189e0:	d904      	bls.n	80189ec <tcp_process+0x228>
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80189e6:	005b      	lsls	r3, r3, #1
 80189e8:	b29b      	uxth	r3, r3
 80189ea:	e001      	b.n	80189f0 <tcp_process+0x22c>
 80189ec:	f241 131c 	movw	r3, #4380	; 0x111c
 80189f0:	687a      	ldr	r2, [r7, #4]
 80189f2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d106      	bne.n	8018a0e <tcp_process+0x24a>
 8018a00:	4b1b      	ldr	r3, [pc, #108]	; (8018a70 <tcp_process+0x2ac>)
 8018a02:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018a06:	4924      	ldr	r1, [pc, #144]	; (8018a98 <tcp_process+0x2d4>)
 8018a08:	481b      	ldr	r0, [pc, #108]	; (8018a78 <tcp_process+0x2b4>)
 8018a0a:	f006 fa9f 	bl	801ef4c <iprintf>
        --pcb->snd_queuelen;
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018a14:	3b01      	subs	r3, #1
 8018a16:	b29a      	uxth	r2, r3
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a22:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018a24:	69fb      	ldr	r3, [r7, #28]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d111      	bne.n	8018a4e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a2e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018a30:	69fb      	ldr	r3, [r7, #28]
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d106      	bne.n	8018a44 <tcp_process+0x280>
 8018a36:	4b0e      	ldr	r3, [pc, #56]	; (8018a70 <tcp_process+0x2ac>)
 8018a38:	f44f 725d 	mov.w	r2, #884	; 0x374
 8018a3c:	4917      	ldr	r1, [pc, #92]	; (8018a9c <tcp_process+0x2d8>)
 8018a3e:	480e      	ldr	r0, [pc, #56]	; (8018a78 <tcp_process+0x2b4>)
 8018a40:	f006 fa84 	bl	801ef4c <iprintf>
          pcb->unsent = rseg->next;
 8018a44:	69fb      	ldr	r3, [r7, #28]
 8018a46:	681a      	ldr	r2, [r3, #0]
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	66da      	str	r2, [r3, #108]	; 0x6c
 8018a4c:	e003      	b.n	8018a56 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8018a4e:	69fb      	ldr	r3, [r7, #28]
 8018a50:	681a      	ldr	r2, [r3, #0]
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8018a56:	69f8      	ldr	r0, [r7, #28]
 8018a58:	f7fe fc51 	bl	80172fe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d11d      	bne.n	8018aa0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a6a:	861a      	strh	r2, [r3, #48]	; 0x30
 8018a6c:	e01f      	b.n	8018aae <tcp_process+0x2ea>
 8018a6e:	bf00      	nop
 8018a70:	08022694 	.word	0x08022694
 8018a74:	080228cc 	.word	0x080228cc
 8018a78:	080226e0 	.word	0x080226e0
 8018a7c:	2000c828 	.word	0x2000c828
 8018a80:	2000c820 	.word	0x2000c820
 8018a84:	2000c81c 	.word	0x2000c81c
 8018a88:	080228e8 	.word	0x080228e8
 8018a8c:	2000c829 	.word	0x2000c829
 8018a90:	20014760 	.word	0x20014760
 8018a94:	2000c80c 	.word	0x2000c80c
 8018a98:	08022908 	.word	0x08022908
 8018a9c:	08022920 	.word	0x08022920
        } else {
          pcb->rtime = 0;
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	2200      	movs	r2, #0
 8018aa4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	2200      	movs	r2, #0
 8018aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d00a      	beq.n	8018ace <tcp_process+0x30a>
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018abe:	687a      	ldr	r2, [r7, #4]
 8018ac0:	6910      	ldr	r0, [r2, #16]
 8018ac2:	2200      	movs	r2, #0
 8018ac4:	6879      	ldr	r1, [r7, #4]
 8018ac6:	4798      	blx	r3
 8018ac8:	4603      	mov	r3, r0
 8018aca:	76bb      	strb	r3, [r7, #26]
 8018acc:	e001      	b.n	8018ad2 <tcp_process+0x30e>
 8018ace:	2300      	movs	r3, #0
 8018ad0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8018ad2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018ad6:	f113 0f0d 	cmn.w	r3, #13
 8018ada:	d102      	bne.n	8018ae2 <tcp_process+0x31e>
          return ERR_ABRT;
 8018adc:	f06f 030c 	mvn.w	r3, #12
 8018ae0:	e250      	b.n	8018f84 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	8b5b      	ldrh	r3, [r3, #26]
 8018ae6:	f043 0302 	orr.w	r3, r3, #2
 8018aea:	b29a      	uxth	r2, r3
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018af0:	e23a      	b.n	8018f68 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018af2:	4b9d      	ldr	r3, [pc, #628]	; (8018d68 <tcp_process+0x5a4>)
 8018af4:	781b      	ldrb	r3, [r3, #0]
 8018af6:	f003 0310 	and.w	r3, r3, #16
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	f000 8234 	beq.w	8018f68 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b00:	4b9a      	ldr	r3, [pc, #616]	; (8018d6c <tcp_process+0x5a8>)
 8018b02:	6819      	ldr	r1, [r3, #0]
 8018b04:	4b9a      	ldr	r3, [pc, #616]	; (8018d70 <tcp_process+0x5ac>)
 8018b06:	881b      	ldrh	r3, [r3, #0]
 8018b08:	461a      	mov	r2, r3
 8018b0a:	4b9a      	ldr	r3, [pc, #616]	; (8018d74 <tcp_process+0x5b0>)
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b10:	4b99      	ldr	r3, [pc, #612]	; (8018d78 <tcp_process+0x5b4>)
 8018b12:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b14:	885b      	ldrh	r3, [r3, #2]
 8018b16:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b18:	4a97      	ldr	r2, [pc, #604]	; (8018d78 <tcp_process+0x5b4>)
 8018b1a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b1c:	8812      	ldrh	r2, [r2, #0]
 8018b1e:	b292      	uxth	r2, r2
 8018b20:	9202      	str	r2, [sp, #8]
 8018b22:	9301      	str	r3, [sp, #4]
 8018b24:	4b95      	ldr	r3, [pc, #596]	; (8018d7c <tcp_process+0x5b8>)
 8018b26:	9300      	str	r3, [sp, #0]
 8018b28:	4b95      	ldr	r3, [pc, #596]	; (8018d80 <tcp_process+0x5bc>)
 8018b2a:	4602      	mov	r2, r0
 8018b2c:	6878      	ldr	r0, [r7, #4]
 8018b2e:	f003 f8db 	bl	801bce8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018b38:	2b05      	cmp	r3, #5
 8018b3a:	f200 8215 	bhi.w	8018f68 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	2200      	movs	r2, #0
 8018b42:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018b44:	6878      	ldr	r0, [r7, #4]
 8018b46:	f002 fea5 	bl	801b894 <tcp_rexmit_rto>
      break;
 8018b4a:	e20d      	b.n	8018f68 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8018b4c:	4b86      	ldr	r3, [pc, #536]	; (8018d68 <tcp_process+0x5a4>)
 8018b4e:	781b      	ldrb	r3, [r3, #0]
 8018b50:	f003 0310 	and.w	r3, r3, #16
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	f000 80a1 	beq.w	8018c9c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018b5a:	4b84      	ldr	r3, [pc, #528]	; (8018d6c <tcp_process+0x5a8>)
 8018b5c:	681a      	ldr	r2, [r3, #0]
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b62:	1ad3      	subs	r3, r2, r3
 8018b64:	3b01      	subs	r3, #1
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	db7e      	blt.n	8018c68 <tcp_process+0x4a4>
 8018b6a:	4b80      	ldr	r3, [pc, #512]	; (8018d6c <tcp_process+0x5a8>)
 8018b6c:	681a      	ldr	r2, [r3, #0]
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b72:	1ad3      	subs	r3, r2, r3
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	dc77      	bgt.n	8018c68 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	2204      	movs	r2, #4
 8018b7c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d102      	bne.n	8018b8c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018b86:	23fa      	movs	r3, #250	; 0xfa
 8018b88:	76bb      	strb	r3, [r7, #26]
 8018b8a:	e01d      	b.n	8018bc8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018b90:	699b      	ldr	r3, [r3, #24]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d106      	bne.n	8018ba4 <tcp_process+0x3e0>
 8018b96:	4b7b      	ldr	r3, [pc, #492]	; (8018d84 <tcp_process+0x5c0>)
 8018b98:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8018b9c:	497a      	ldr	r1, [pc, #488]	; (8018d88 <tcp_process+0x5c4>)
 8018b9e:	487b      	ldr	r0, [pc, #492]	; (8018d8c <tcp_process+0x5c8>)
 8018ba0:	f006 f9d4 	bl	801ef4c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018ba8:	699b      	ldr	r3, [r3, #24]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d00a      	beq.n	8018bc4 <tcp_process+0x400>
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018bb2:	699b      	ldr	r3, [r3, #24]
 8018bb4:	687a      	ldr	r2, [r7, #4]
 8018bb6:	6910      	ldr	r0, [r2, #16]
 8018bb8:	2200      	movs	r2, #0
 8018bba:	6879      	ldr	r1, [r7, #4]
 8018bbc:	4798      	blx	r3
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	76bb      	strb	r3, [r7, #26]
 8018bc2:	e001      	b.n	8018bc8 <tcp_process+0x404>
 8018bc4:	23f0      	movs	r3, #240	; 0xf0
 8018bc6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8018bc8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d00a      	beq.n	8018be6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8018bd0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018bd4:	f113 0f0d 	cmn.w	r3, #13
 8018bd8:	d002      	beq.n	8018be0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8018bda:	6878      	ldr	r0, [r7, #4]
 8018bdc:	f7fd fcea 	bl	80165b4 <tcp_abort>
            }
            return ERR_ABRT;
 8018be0:	f06f 030c 	mvn.w	r3, #12
 8018be4:	e1ce      	b.n	8018f84 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8018be6:	6878      	ldr	r0, [r7, #4]
 8018be8:	f000 fae0 	bl	80191ac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8018bec:	4b68      	ldr	r3, [pc, #416]	; (8018d90 <tcp_process+0x5cc>)
 8018bee:	881b      	ldrh	r3, [r3, #0]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d005      	beq.n	8018c00 <tcp_process+0x43c>
            recv_acked--;
 8018bf4:	4b66      	ldr	r3, [pc, #408]	; (8018d90 <tcp_process+0x5cc>)
 8018bf6:	881b      	ldrh	r3, [r3, #0]
 8018bf8:	3b01      	subs	r3, #1
 8018bfa:	b29a      	uxth	r2, r3
 8018bfc:	4b64      	ldr	r3, [pc, #400]	; (8018d90 <tcp_process+0x5cc>)
 8018bfe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c04:	009a      	lsls	r2, r3, #2
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c0a:	005b      	lsls	r3, r3, #1
 8018c0c:	f241 111c 	movw	r1, #4380	; 0x111c
 8018c10:	428b      	cmp	r3, r1
 8018c12:	bf38      	it	cc
 8018c14:	460b      	movcc	r3, r1
 8018c16:	429a      	cmp	r2, r3
 8018c18:	d204      	bcs.n	8018c24 <tcp_process+0x460>
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c1e:	009b      	lsls	r3, r3, #2
 8018c20:	b29b      	uxth	r3, r3
 8018c22:	e00d      	b.n	8018c40 <tcp_process+0x47c>
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c28:	005b      	lsls	r3, r3, #1
 8018c2a:	f241 121c 	movw	r2, #4380	; 0x111c
 8018c2e:	4293      	cmp	r3, r2
 8018c30:	d904      	bls.n	8018c3c <tcp_process+0x478>
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c36:	005b      	lsls	r3, r3, #1
 8018c38:	b29b      	uxth	r3, r3
 8018c3a:	e001      	b.n	8018c40 <tcp_process+0x47c>
 8018c3c:	f241 131c 	movw	r3, #4380	; 0x111c
 8018c40:	687a      	ldr	r2, [r7, #4]
 8018c42:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018c46:	4b53      	ldr	r3, [pc, #332]	; (8018d94 <tcp_process+0x5d0>)
 8018c48:	781b      	ldrb	r3, [r3, #0]
 8018c4a:	f003 0320 	and.w	r3, r3, #32
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d037      	beq.n	8018cc2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	8b5b      	ldrh	r3, [r3, #26]
 8018c56:	f043 0302 	orr.w	r3, r3, #2
 8018c5a:	b29a      	uxth	r2, r3
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	2207      	movs	r2, #7
 8018c64:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8018c66:	e02c      	b.n	8018cc2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c68:	4b40      	ldr	r3, [pc, #256]	; (8018d6c <tcp_process+0x5a8>)
 8018c6a:	6819      	ldr	r1, [r3, #0]
 8018c6c:	4b40      	ldr	r3, [pc, #256]	; (8018d70 <tcp_process+0x5ac>)
 8018c6e:	881b      	ldrh	r3, [r3, #0]
 8018c70:	461a      	mov	r2, r3
 8018c72:	4b40      	ldr	r3, [pc, #256]	; (8018d74 <tcp_process+0x5b0>)
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018c78:	4b3f      	ldr	r3, [pc, #252]	; (8018d78 <tcp_process+0x5b4>)
 8018c7a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c7c:	885b      	ldrh	r3, [r3, #2]
 8018c7e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018c80:	4a3d      	ldr	r2, [pc, #244]	; (8018d78 <tcp_process+0x5b4>)
 8018c82:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c84:	8812      	ldrh	r2, [r2, #0]
 8018c86:	b292      	uxth	r2, r2
 8018c88:	9202      	str	r2, [sp, #8]
 8018c8a:	9301      	str	r3, [sp, #4]
 8018c8c:	4b3b      	ldr	r3, [pc, #236]	; (8018d7c <tcp_process+0x5b8>)
 8018c8e:	9300      	str	r3, [sp, #0]
 8018c90:	4b3b      	ldr	r3, [pc, #236]	; (8018d80 <tcp_process+0x5bc>)
 8018c92:	4602      	mov	r2, r0
 8018c94:	6878      	ldr	r0, [r7, #4]
 8018c96:	f003 f827 	bl	801bce8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8018c9a:	e167      	b.n	8018f6c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8018c9c:	4b32      	ldr	r3, [pc, #200]	; (8018d68 <tcp_process+0x5a4>)
 8018c9e:	781b      	ldrb	r3, [r3, #0]
 8018ca0:	f003 0302 	and.w	r3, r3, #2
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	f000 8161 	beq.w	8018f6c <tcp_process+0x7a8>
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cae:	1e5a      	subs	r2, r3, #1
 8018cb0:	4b30      	ldr	r3, [pc, #192]	; (8018d74 <tcp_process+0x5b0>)
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	429a      	cmp	r2, r3
 8018cb6:	f040 8159 	bne.w	8018f6c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8018cba:	6878      	ldr	r0, [r7, #4]
 8018cbc:	f002 fe0c 	bl	801b8d8 <tcp_rexmit>
      break;
 8018cc0:	e154      	b.n	8018f6c <tcp_process+0x7a8>
 8018cc2:	e153      	b.n	8018f6c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8018cc4:	6878      	ldr	r0, [r7, #4]
 8018cc6:	f000 fa71 	bl	80191ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8018cca:	4b32      	ldr	r3, [pc, #200]	; (8018d94 <tcp_process+0x5d0>)
 8018ccc:	781b      	ldrb	r3, [r3, #0]
 8018cce:	f003 0320 	and.w	r3, r3, #32
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	f000 814c 	beq.w	8018f70 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	8b5b      	ldrh	r3, [r3, #26]
 8018cdc:	f043 0302 	orr.w	r3, r3, #2
 8018ce0:	b29a      	uxth	r2, r3
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	2207      	movs	r2, #7
 8018cea:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018cec:	e140      	b.n	8018f70 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8018cee:	6878      	ldr	r0, [r7, #4]
 8018cf0:	f000 fa5c 	bl	80191ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018cf4:	4b27      	ldr	r3, [pc, #156]	; (8018d94 <tcp_process+0x5d0>)
 8018cf6:	781b      	ldrb	r3, [r3, #0]
 8018cf8:	f003 0320 	and.w	r3, r3, #32
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d071      	beq.n	8018de4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018d00:	4b19      	ldr	r3, [pc, #100]	; (8018d68 <tcp_process+0x5a4>)
 8018d02:	781b      	ldrb	r3, [r3, #0]
 8018d04:	f003 0310 	and.w	r3, r3, #16
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d060      	beq.n	8018dce <tcp_process+0x60a>
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018d10:	4b16      	ldr	r3, [pc, #88]	; (8018d6c <tcp_process+0x5a8>)
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	429a      	cmp	r2, r3
 8018d16:	d15a      	bne.n	8018dce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d156      	bne.n	8018dce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	8b5b      	ldrh	r3, [r3, #26]
 8018d24:	f043 0302 	orr.w	r3, r3, #2
 8018d28:	b29a      	uxth	r2, r3
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8018d2e:	6878      	ldr	r0, [r7, #4]
 8018d30:	f7fe fdbe 	bl	80178b0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018d34:	4b18      	ldr	r3, [pc, #96]	; (8018d98 <tcp_process+0x5d4>)
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	687a      	ldr	r2, [r7, #4]
 8018d3a:	429a      	cmp	r2, r3
 8018d3c:	d105      	bne.n	8018d4a <tcp_process+0x586>
 8018d3e:	4b16      	ldr	r3, [pc, #88]	; (8018d98 <tcp_process+0x5d4>)
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	68db      	ldr	r3, [r3, #12]
 8018d44:	4a14      	ldr	r2, [pc, #80]	; (8018d98 <tcp_process+0x5d4>)
 8018d46:	6013      	str	r3, [r2, #0]
 8018d48:	e02e      	b.n	8018da8 <tcp_process+0x5e4>
 8018d4a:	4b13      	ldr	r3, [pc, #76]	; (8018d98 <tcp_process+0x5d4>)
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	617b      	str	r3, [r7, #20]
 8018d50:	e027      	b.n	8018da2 <tcp_process+0x5de>
 8018d52:	697b      	ldr	r3, [r7, #20]
 8018d54:	68db      	ldr	r3, [r3, #12]
 8018d56:	687a      	ldr	r2, [r7, #4]
 8018d58:	429a      	cmp	r2, r3
 8018d5a:	d11f      	bne.n	8018d9c <tcp_process+0x5d8>
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	68da      	ldr	r2, [r3, #12]
 8018d60:	697b      	ldr	r3, [r7, #20]
 8018d62:	60da      	str	r2, [r3, #12]
 8018d64:	e020      	b.n	8018da8 <tcp_process+0x5e4>
 8018d66:	bf00      	nop
 8018d68:	2000c828 	.word	0x2000c828
 8018d6c:	2000c820 	.word	0x2000c820
 8018d70:	2000c826 	.word	0x2000c826
 8018d74:	2000c81c 	.word	0x2000c81c
 8018d78:	2000c80c 	.word	0x2000c80c
 8018d7c:	20011058 	.word	0x20011058
 8018d80:	2001105c 	.word	0x2001105c
 8018d84:	08022694 	.word	0x08022694
 8018d88:	08022934 	.word	0x08022934
 8018d8c:	080226e0 	.word	0x080226e0
 8018d90:	2000c824 	.word	0x2000c824
 8018d94:	2000c829 	.word	0x2000c829
 8018d98:	2001475c 	.word	0x2001475c
 8018d9c:	697b      	ldr	r3, [r7, #20]
 8018d9e:	68db      	ldr	r3, [r3, #12]
 8018da0:	617b      	str	r3, [r7, #20]
 8018da2:	697b      	ldr	r3, [r7, #20]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d1d4      	bne.n	8018d52 <tcp_process+0x58e>
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	2200      	movs	r2, #0
 8018dac:	60da      	str	r2, [r3, #12]
 8018dae:	4b77      	ldr	r3, [pc, #476]	; (8018f8c <tcp_process+0x7c8>)
 8018db0:	2201      	movs	r2, #1
 8018db2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	220a      	movs	r2, #10
 8018db8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8018dba:	4b75      	ldr	r3, [pc, #468]	; (8018f90 <tcp_process+0x7cc>)
 8018dbc:	681a      	ldr	r2, [r3, #0]
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	60da      	str	r2, [r3, #12]
 8018dc2:	4a73      	ldr	r2, [pc, #460]	; (8018f90 <tcp_process+0x7cc>)
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	6013      	str	r3, [r2, #0]
 8018dc8:	f003 f950 	bl	801c06c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8018dcc:	e0d2      	b.n	8018f74 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	8b5b      	ldrh	r3, [r3, #26]
 8018dd2:	f043 0302 	orr.w	r3, r3, #2
 8018dd6:	b29a      	uxth	r2, r3
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	2208      	movs	r2, #8
 8018de0:	751a      	strb	r2, [r3, #20]
      break;
 8018de2:	e0c7      	b.n	8018f74 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018de4:	4b6b      	ldr	r3, [pc, #428]	; (8018f94 <tcp_process+0x7d0>)
 8018de6:	781b      	ldrb	r3, [r3, #0]
 8018de8:	f003 0310 	and.w	r3, r3, #16
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	f000 80c1 	beq.w	8018f74 <tcp_process+0x7b0>
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018df6:	4b68      	ldr	r3, [pc, #416]	; (8018f98 <tcp_process+0x7d4>)
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	429a      	cmp	r2, r3
 8018dfc:	f040 80ba 	bne.w	8018f74 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	f040 80b5 	bne.w	8018f74 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	2206      	movs	r2, #6
 8018e0e:	751a      	strb	r2, [r3, #20]
      break;
 8018e10:	e0b0      	b.n	8018f74 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018e12:	6878      	ldr	r0, [r7, #4]
 8018e14:	f000 f9ca 	bl	80191ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018e18:	4b60      	ldr	r3, [pc, #384]	; (8018f9c <tcp_process+0x7d8>)
 8018e1a:	781b      	ldrb	r3, [r3, #0]
 8018e1c:	f003 0320 	and.w	r3, r3, #32
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	f000 80a9 	beq.w	8018f78 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	8b5b      	ldrh	r3, [r3, #26]
 8018e2a:	f043 0302 	orr.w	r3, r3, #2
 8018e2e:	b29a      	uxth	r2, r3
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018e34:	6878      	ldr	r0, [r7, #4]
 8018e36:	f7fe fd3b 	bl	80178b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018e3a:	4b59      	ldr	r3, [pc, #356]	; (8018fa0 <tcp_process+0x7dc>)
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	687a      	ldr	r2, [r7, #4]
 8018e40:	429a      	cmp	r2, r3
 8018e42:	d105      	bne.n	8018e50 <tcp_process+0x68c>
 8018e44:	4b56      	ldr	r3, [pc, #344]	; (8018fa0 <tcp_process+0x7dc>)
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	68db      	ldr	r3, [r3, #12]
 8018e4a:	4a55      	ldr	r2, [pc, #340]	; (8018fa0 <tcp_process+0x7dc>)
 8018e4c:	6013      	str	r3, [r2, #0]
 8018e4e:	e013      	b.n	8018e78 <tcp_process+0x6b4>
 8018e50:	4b53      	ldr	r3, [pc, #332]	; (8018fa0 <tcp_process+0x7dc>)
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	613b      	str	r3, [r7, #16]
 8018e56:	e00c      	b.n	8018e72 <tcp_process+0x6ae>
 8018e58:	693b      	ldr	r3, [r7, #16]
 8018e5a:	68db      	ldr	r3, [r3, #12]
 8018e5c:	687a      	ldr	r2, [r7, #4]
 8018e5e:	429a      	cmp	r2, r3
 8018e60:	d104      	bne.n	8018e6c <tcp_process+0x6a8>
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	68da      	ldr	r2, [r3, #12]
 8018e66:	693b      	ldr	r3, [r7, #16]
 8018e68:	60da      	str	r2, [r3, #12]
 8018e6a:	e005      	b.n	8018e78 <tcp_process+0x6b4>
 8018e6c:	693b      	ldr	r3, [r7, #16]
 8018e6e:	68db      	ldr	r3, [r3, #12]
 8018e70:	613b      	str	r3, [r7, #16]
 8018e72:	693b      	ldr	r3, [r7, #16]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d1ef      	bne.n	8018e58 <tcp_process+0x694>
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	60da      	str	r2, [r3, #12]
 8018e7e:	4b43      	ldr	r3, [pc, #268]	; (8018f8c <tcp_process+0x7c8>)
 8018e80:	2201      	movs	r2, #1
 8018e82:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	220a      	movs	r2, #10
 8018e88:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018e8a:	4b41      	ldr	r3, [pc, #260]	; (8018f90 <tcp_process+0x7cc>)
 8018e8c:	681a      	ldr	r2, [r3, #0]
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	60da      	str	r2, [r3, #12]
 8018e92:	4a3f      	ldr	r2, [pc, #252]	; (8018f90 <tcp_process+0x7cc>)
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	6013      	str	r3, [r2, #0]
 8018e98:	f003 f8e8 	bl	801c06c <tcp_timer_needed>
      }
      break;
 8018e9c:	e06c      	b.n	8018f78 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018e9e:	6878      	ldr	r0, [r7, #4]
 8018ea0:	f000 f984 	bl	80191ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018ea4:	4b3b      	ldr	r3, [pc, #236]	; (8018f94 <tcp_process+0x7d0>)
 8018ea6:	781b      	ldrb	r3, [r3, #0]
 8018ea8:	f003 0310 	and.w	r3, r3, #16
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d065      	beq.n	8018f7c <tcp_process+0x7b8>
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018eb4:	4b38      	ldr	r3, [pc, #224]	; (8018f98 <tcp_process+0x7d4>)
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	429a      	cmp	r2, r3
 8018eba:	d15f      	bne.n	8018f7c <tcp_process+0x7b8>
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d15b      	bne.n	8018f7c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8018ec4:	6878      	ldr	r0, [r7, #4]
 8018ec6:	f7fe fcf3 	bl	80178b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018eca:	4b35      	ldr	r3, [pc, #212]	; (8018fa0 <tcp_process+0x7dc>)
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	687a      	ldr	r2, [r7, #4]
 8018ed0:	429a      	cmp	r2, r3
 8018ed2:	d105      	bne.n	8018ee0 <tcp_process+0x71c>
 8018ed4:	4b32      	ldr	r3, [pc, #200]	; (8018fa0 <tcp_process+0x7dc>)
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	68db      	ldr	r3, [r3, #12]
 8018eda:	4a31      	ldr	r2, [pc, #196]	; (8018fa0 <tcp_process+0x7dc>)
 8018edc:	6013      	str	r3, [r2, #0]
 8018ede:	e013      	b.n	8018f08 <tcp_process+0x744>
 8018ee0:	4b2f      	ldr	r3, [pc, #188]	; (8018fa0 <tcp_process+0x7dc>)
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	60fb      	str	r3, [r7, #12]
 8018ee6:	e00c      	b.n	8018f02 <tcp_process+0x73e>
 8018ee8:	68fb      	ldr	r3, [r7, #12]
 8018eea:	68db      	ldr	r3, [r3, #12]
 8018eec:	687a      	ldr	r2, [r7, #4]
 8018eee:	429a      	cmp	r2, r3
 8018ef0:	d104      	bne.n	8018efc <tcp_process+0x738>
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	68da      	ldr	r2, [r3, #12]
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	60da      	str	r2, [r3, #12]
 8018efa:	e005      	b.n	8018f08 <tcp_process+0x744>
 8018efc:	68fb      	ldr	r3, [r7, #12]
 8018efe:	68db      	ldr	r3, [r3, #12]
 8018f00:	60fb      	str	r3, [r7, #12]
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d1ef      	bne.n	8018ee8 <tcp_process+0x724>
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	2200      	movs	r2, #0
 8018f0c:	60da      	str	r2, [r3, #12]
 8018f0e:	4b1f      	ldr	r3, [pc, #124]	; (8018f8c <tcp_process+0x7c8>)
 8018f10:	2201      	movs	r2, #1
 8018f12:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	220a      	movs	r2, #10
 8018f18:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018f1a:	4b1d      	ldr	r3, [pc, #116]	; (8018f90 <tcp_process+0x7cc>)
 8018f1c:	681a      	ldr	r2, [r3, #0]
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	60da      	str	r2, [r3, #12]
 8018f22:	4a1b      	ldr	r2, [pc, #108]	; (8018f90 <tcp_process+0x7cc>)
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	6013      	str	r3, [r2, #0]
 8018f28:	f003 f8a0 	bl	801c06c <tcp_timer_needed>
      }
      break;
 8018f2c:	e026      	b.n	8018f7c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8018f2e:	6878      	ldr	r0, [r7, #4]
 8018f30:	f000 f93c 	bl	80191ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018f34:	4b17      	ldr	r3, [pc, #92]	; (8018f94 <tcp_process+0x7d0>)
 8018f36:	781b      	ldrb	r3, [r3, #0]
 8018f38:	f003 0310 	and.w	r3, r3, #16
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d01f      	beq.n	8018f80 <tcp_process+0x7bc>
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018f44:	4b14      	ldr	r3, [pc, #80]	; (8018f98 <tcp_process+0x7d4>)
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	429a      	cmp	r2, r3
 8018f4a:	d119      	bne.n	8018f80 <tcp_process+0x7bc>
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d115      	bne.n	8018f80 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8018f54:	4b11      	ldr	r3, [pc, #68]	; (8018f9c <tcp_process+0x7d8>)
 8018f56:	781b      	ldrb	r3, [r3, #0]
 8018f58:	f043 0310 	orr.w	r3, r3, #16
 8018f5c:	b2da      	uxtb	r2, r3
 8018f5e:	4b0f      	ldr	r3, [pc, #60]	; (8018f9c <tcp_process+0x7d8>)
 8018f60:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018f62:	e00d      	b.n	8018f80 <tcp_process+0x7bc>
    default:
      break;
 8018f64:	bf00      	nop
 8018f66:	e00c      	b.n	8018f82 <tcp_process+0x7be>
      break;
 8018f68:	bf00      	nop
 8018f6a:	e00a      	b.n	8018f82 <tcp_process+0x7be>
      break;
 8018f6c:	bf00      	nop
 8018f6e:	e008      	b.n	8018f82 <tcp_process+0x7be>
      break;
 8018f70:	bf00      	nop
 8018f72:	e006      	b.n	8018f82 <tcp_process+0x7be>
      break;
 8018f74:	bf00      	nop
 8018f76:	e004      	b.n	8018f82 <tcp_process+0x7be>
      break;
 8018f78:	bf00      	nop
 8018f7a:	e002      	b.n	8018f82 <tcp_process+0x7be>
      break;
 8018f7c:	bf00      	nop
 8018f7e:	e000      	b.n	8018f82 <tcp_process+0x7be>
      break;
 8018f80:	bf00      	nop
  }
  return ERR_OK;
 8018f82:	2300      	movs	r3, #0
}
 8018f84:	4618      	mov	r0, r3
 8018f86:	3724      	adds	r7, #36	; 0x24
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd90      	pop	{r4, r7, pc}
 8018f8c:	20014758 	.word	0x20014758
 8018f90:	2001476c 	.word	0x2001476c
 8018f94:	2000c828 	.word	0x2000c828
 8018f98:	2000c820 	.word	0x2000c820
 8018f9c:	2000c829 	.word	0x2000c829
 8018fa0:	2001475c 	.word	0x2001475c

08018fa4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018fa4:	b590      	push	{r4, r7, lr}
 8018fa6:	b085      	sub	sp, #20
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	6078      	str	r0, [r7, #4]
 8018fac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d106      	bne.n	8018fc2 <tcp_oos_insert_segment+0x1e>
 8018fb4:	4b3b      	ldr	r3, [pc, #236]	; (80190a4 <tcp_oos_insert_segment+0x100>)
 8018fb6:	f240 421f 	movw	r2, #1055	; 0x41f
 8018fba:	493b      	ldr	r1, [pc, #236]	; (80190a8 <tcp_oos_insert_segment+0x104>)
 8018fbc:	483b      	ldr	r0, [pc, #236]	; (80190ac <tcp_oos_insert_segment+0x108>)
 8018fbe:	f005 ffc5 	bl	801ef4c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	68db      	ldr	r3, [r3, #12]
 8018fc6:	899b      	ldrh	r3, [r3, #12]
 8018fc8:	b29b      	uxth	r3, r3
 8018fca:	4618      	mov	r0, r3
 8018fcc:	f7fb f96a 	bl	80142a4 <lwip_htons>
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	b2db      	uxtb	r3, r3
 8018fd4:	f003 0301 	and.w	r3, r3, #1
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d028      	beq.n	801902e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018fdc:	6838      	ldr	r0, [r7, #0]
 8018fde:	f7fe f979 	bl	80172d4 <tcp_segs_free>
    next = NULL;
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	603b      	str	r3, [r7, #0]
 8018fe6:	e056      	b.n	8019096 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018fe8:	683b      	ldr	r3, [r7, #0]
 8018fea:	68db      	ldr	r3, [r3, #12]
 8018fec:	899b      	ldrh	r3, [r3, #12]
 8018fee:	b29b      	uxth	r3, r3
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	f7fb f957 	bl	80142a4 <lwip_htons>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	b2db      	uxtb	r3, r3
 8018ffa:	f003 0301 	and.w	r3, r3, #1
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d00d      	beq.n	801901e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	68db      	ldr	r3, [r3, #12]
 8019006:	899b      	ldrh	r3, [r3, #12]
 8019008:	b29c      	uxth	r4, r3
 801900a:	2001      	movs	r0, #1
 801900c:	f7fb f94a 	bl	80142a4 <lwip_htons>
 8019010:	4603      	mov	r3, r0
 8019012:	461a      	mov	r2, r3
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	68db      	ldr	r3, [r3, #12]
 8019018:	4322      	orrs	r2, r4
 801901a:	b292      	uxth	r2, r2
 801901c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801901e:	683b      	ldr	r3, [r7, #0]
 8019020:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8019022:	683b      	ldr	r3, [r7, #0]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8019028:	68f8      	ldr	r0, [r7, #12]
 801902a:	f7fe f968 	bl	80172fe <tcp_seg_free>
    while (next &&
 801902e:	683b      	ldr	r3, [r7, #0]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d00e      	beq.n	8019052 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	891b      	ldrh	r3, [r3, #8]
 8019038:	461a      	mov	r2, r3
 801903a:	4b1d      	ldr	r3, [pc, #116]	; (80190b0 <tcp_oos_insert_segment+0x10c>)
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	441a      	add	r2, r3
 8019040:	683b      	ldr	r3, [r7, #0]
 8019042:	68db      	ldr	r3, [r3, #12]
 8019044:	685b      	ldr	r3, [r3, #4]
 8019046:	6839      	ldr	r1, [r7, #0]
 8019048:	8909      	ldrh	r1, [r1, #8]
 801904a:	440b      	add	r3, r1
 801904c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801904e:	2b00      	cmp	r3, #0
 8019050:	daca      	bge.n	8018fe8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8019052:	683b      	ldr	r3, [r7, #0]
 8019054:	2b00      	cmp	r3, #0
 8019056:	d01e      	beq.n	8019096 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	891b      	ldrh	r3, [r3, #8]
 801905c:	461a      	mov	r2, r3
 801905e:	4b14      	ldr	r3, [pc, #80]	; (80190b0 <tcp_oos_insert_segment+0x10c>)
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	441a      	add	r2, r3
 8019064:	683b      	ldr	r3, [r7, #0]
 8019066:	68db      	ldr	r3, [r3, #12]
 8019068:	685b      	ldr	r3, [r3, #4]
 801906a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801906c:	2b00      	cmp	r3, #0
 801906e:	dd12      	ble.n	8019096 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019070:	683b      	ldr	r3, [r7, #0]
 8019072:	68db      	ldr	r3, [r3, #12]
 8019074:	685b      	ldr	r3, [r3, #4]
 8019076:	b29a      	uxth	r2, r3
 8019078:	4b0d      	ldr	r3, [pc, #52]	; (80190b0 <tcp_oos_insert_segment+0x10c>)
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	b29b      	uxth	r3, r3
 801907e:	1ad3      	subs	r3, r2, r3
 8019080:	b29a      	uxth	r2, r3
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	685a      	ldr	r2, [r3, #4]
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	891b      	ldrh	r3, [r3, #8]
 801908e:	4619      	mov	r1, r3
 8019090:	4610      	mov	r0, r2
 8019092:	f7fc fb63 	bl	801575c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	683a      	ldr	r2, [r7, #0]
 801909a:	601a      	str	r2, [r3, #0]
}
 801909c:	bf00      	nop
 801909e:	3714      	adds	r7, #20
 80190a0:	46bd      	mov	sp, r7
 80190a2:	bd90      	pop	{r4, r7, pc}
 80190a4:	08022694 	.word	0x08022694
 80190a8:	08022954 	.word	0x08022954
 80190ac:	080226e0 	.word	0x080226e0
 80190b0:	2000c81c 	.word	0x2000c81c

080190b4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80190b4:	b5b0      	push	{r4, r5, r7, lr}
 80190b6:	b086      	sub	sp, #24
 80190b8:	af00      	add	r7, sp, #0
 80190ba:	60f8      	str	r0, [r7, #12]
 80190bc:	60b9      	str	r1, [r7, #8]
 80190be:	607a      	str	r2, [r7, #4]
 80190c0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80190c2:	e03e      	b.n	8019142 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80190c4:	68bb      	ldr	r3, [r7, #8]
 80190c6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80190c8:	68bb      	ldr	r3, [r7, #8]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80190ce:	697b      	ldr	r3, [r7, #20]
 80190d0:	685b      	ldr	r3, [r3, #4]
 80190d2:	4618      	mov	r0, r3
 80190d4:	f7fc fd68 	bl	8015ba8 <pbuf_clen>
 80190d8:	4603      	mov	r3, r0
 80190da:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80190dc:	68fb      	ldr	r3, [r7, #12]
 80190de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80190e2:	8a7a      	ldrh	r2, [r7, #18]
 80190e4:	429a      	cmp	r2, r3
 80190e6:	d906      	bls.n	80190f6 <tcp_free_acked_segments+0x42>
 80190e8:	4b2a      	ldr	r3, [pc, #168]	; (8019194 <tcp_free_acked_segments+0xe0>)
 80190ea:	f240 4257 	movw	r2, #1111	; 0x457
 80190ee:	492a      	ldr	r1, [pc, #168]	; (8019198 <tcp_free_acked_segments+0xe4>)
 80190f0:	482a      	ldr	r0, [pc, #168]	; (801919c <tcp_free_acked_segments+0xe8>)
 80190f2:	f005 ff2b 	bl	801ef4c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80190fc:	8a7b      	ldrh	r3, [r7, #18]
 80190fe:	1ad3      	subs	r3, r2, r3
 8019100:	b29a      	uxth	r2, r3
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8019108:	697b      	ldr	r3, [r7, #20]
 801910a:	891a      	ldrh	r2, [r3, #8]
 801910c:	4b24      	ldr	r3, [pc, #144]	; (80191a0 <tcp_free_acked_segments+0xec>)
 801910e:	881b      	ldrh	r3, [r3, #0]
 8019110:	4413      	add	r3, r2
 8019112:	b29a      	uxth	r2, r3
 8019114:	4b22      	ldr	r3, [pc, #136]	; (80191a0 <tcp_free_acked_segments+0xec>)
 8019116:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8019118:	6978      	ldr	r0, [r7, #20]
 801911a:	f7fe f8f0 	bl	80172fe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019124:	2b00      	cmp	r3, #0
 8019126:	d00c      	beq.n	8019142 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8019128:	68bb      	ldr	r3, [r7, #8]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d109      	bne.n	8019142 <tcp_free_acked_segments+0x8e>
 801912e:	683b      	ldr	r3, [r7, #0]
 8019130:	2b00      	cmp	r3, #0
 8019132:	d106      	bne.n	8019142 <tcp_free_acked_segments+0x8e>
 8019134:	4b17      	ldr	r3, [pc, #92]	; (8019194 <tcp_free_acked_segments+0xe0>)
 8019136:	f240 4261 	movw	r2, #1121	; 0x461
 801913a:	491a      	ldr	r1, [pc, #104]	; (80191a4 <tcp_free_acked_segments+0xf0>)
 801913c:	4817      	ldr	r0, [pc, #92]	; (801919c <tcp_free_acked_segments+0xe8>)
 801913e:	f005 ff05 	bl	801ef4c <iprintf>
  while (seg_list != NULL &&
 8019142:	68bb      	ldr	r3, [r7, #8]
 8019144:	2b00      	cmp	r3, #0
 8019146:	d020      	beq.n	801918a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8019148:	68bb      	ldr	r3, [r7, #8]
 801914a:	68db      	ldr	r3, [r3, #12]
 801914c:	685b      	ldr	r3, [r3, #4]
 801914e:	4618      	mov	r0, r3
 8019150:	f7fb f8bd 	bl	80142ce <lwip_htonl>
 8019154:	4604      	mov	r4, r0
 8019156:	68bb      	ldr	r3, [r7, #8]
 8019158:	891b      	ldrh	r3, [r3, #8]
 801915a:	461d      	mov	r5, r3
 801915c:	68bb      	ldr	r3, [r7, #8]
 801915e:	68db      	ldr	r3, [r3, #12]
 8019160:	899b      	ldrh	r3, [r3, #12]
 8019162:	b29b      	uxth	r3, r3
 8019164:	4618      	mov	r0, r3
 8019166:	f7fb f89d 	bl	80142a4 <lwip_htons>
 801916a:	4603      	mov	r3, r0
 801916c:	b2db      	uxtb	r3, r3
 801916e:	f003 0303 	and.w	r3, r3, #3
 8019172:	2b00      	cmp	r3, #0
 8019174:	d001      	beq.n	801917a <tcp_free_acked_segments+0xc6>
 8019176:	2301      	movs	r3, #1
 8019178:	e000      	b.n	801917c <tcp_free_acked_segments+0xc8>
 801917a:	2300      	movs	r3, #0
 801917c:	442b      	add	r3, r5
 801917e:	18e2      	adds	r2, r4, r3
 8019180:	4b09      	ldr	r3, [pc, #36]	; (80191a8 <tcp_free_acked_segments+0xf4>)
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8019186:	2b00      	cmp	r3, #0
 8019188:	dd9c      	ble.n	80190c4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801918a:	68bb      	ldr	r3, [r7, #8]
}
 801918c:	4618      	mov	r0, r3
 801918e:	3718      	adds	r7, #24
 8019190:	46bd      	mov	sp, r7
 8019192:	bdb0      	pop	{r4, r5, r7, pc}
 8019194:	08022694 	.word	0x08022694
 8019198:	0802297c 	.word	0x0802297c
 801919c:	080226e0 	.word	0x080226e0
 80191a0:	2000c824 	.word	0x2000c824
 80191a4:	080229a4 	.word	0x080229a4
 80191a8:	2000c820 	.word	0x2000c820

080191ac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80191ac:	b5b0      	push	{r4, r5, r7, lr}
 80191ae:	b094      	sub	sp, #80	; 0x50
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80191b4:	2300      	movs	r3, #0
 80191b6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d106      	bne.n	80191cc <tcp_receive+0x20>
 80191be:	4ba6      	ldr	r3, [pc, #664]	; (8019458 <tcp_receive+0x2ac>)
 80191c0:	f240 427b 	movw	r2, #1147	; 0x47b
 80191c4:	49a5      	ldr	r1, [pc, #660]	; (801945c <tcp_receive+0x2b0>)
 80191c6:	48a6      	ldr	r0, [pc, #664]	; (8019460 <tcp_receive+0x2b4>)
 80191c8:	f005 fec0 	bl	801ef4c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	7d1b      	ldrb	r3, [r3, #20]
 80191d0:	2b03      	cmp	r3, #3
 80191d2:	d806      	bhi.n	80191e2 <tcp_receive+0x36>
 80191d4:	4ba0      	ldr	r3, [pc, #640]	; (8019458 <tcp_receive+0x2ac>)
 80191d6:	f240 427c 	movw	r2, #1148	; 0x47c
 80191da:	49a2      	ldr	r1, [pc, #648]	; (8019464 <tcp_receive+0x2b8>)
 80191dc:	48a0      	ldr	r0, [pc, #640]	; (8019460 <tcp_receive+0x2b4>)
 80191de:	f005 feb5 	bl	801ef4c <iprintf>

  if (flags & TCP_ACK) {
 80191e2:	4ba1      	ldr	r3, [pc, #644]	; (8019468 <tcp_receive+0x2bc>)
 80191e4:	781b      	ldrb	r3, [r3, #0]
 80191e6:	f003 0310 	and.w	r3, r3, #16
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	f000 8263 	beq.w	80196b6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80191f6:	461a      	mov	r2, r3
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80191fc:	4413      	add	r3, r2
 80191fe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019204:	4b99      	ldr	r3, [pc, #612]	; (801946c <tcp_receive+0x2c0>)
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	1ad3      	subs	r3, r2, r3
 801920a:	2b00      	cmp	r3, #0
 801920c:	db1b      	blt.n	8019246 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019212:	4b96      	ldr	r3, [pc, #600]	; (801946c <tcp_receive+0x2c0>)
 8019214:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019216:	429a      	cmp	r2, r3
 8019218:	d106      	bne.n	8019228 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801921e:	4b94      	ldr	r3, [pc, #592]	; (8019470 <tcp_receive+0x2c4>)
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	1ad3      	subs	r3, r2, r3
 8019224:	2b00      	cmp	r3, #0
 8019226:	db0e      	blt.n	8019246 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801922c:	4b90      	ldr	r3, [pc, #576]	; (8019470 <tcp_receive+0x2c4>)
 801922e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019230:	429a      	cmp	r2, r3
 8019232:	d125      	bne.n	8019280 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019234:	4b8f      	ldr	r3, [pc, #572]	; (8019474 <tcp_receive+0x2c8>)
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	89db      	ldrh	r3, [r3, #14]
 801923a:	b29a      	uxth	r2, r3
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019242:	429a      	cmp	r2, r3
 8019244:	d91c      	bls.n	8019280 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8019246:	4b8b      	ldr	r3, [pc, #556]	; (8019474 <tcp_receive+0x2c8>)
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	89db      	ldrh	r3, [r3, #14]
 801924c:	b29a      	uxth	r2, r3
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019260:	429a      	cmp	r2, r3
 8019262:	d205      	bcs.n	8019270 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8019270:	4b7e      	ldr	r3, [pc, #504]	; (801946c <tcp_receive+0x2c0>)
 8019272:	681a      	ldr	r2, [r3, #0]
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8019278:	4b7d      	ldr	r3, [pc, #500]	; (8019470 <tcp_receive+0x2c4>)
 801927a:	681a      	ldr	r2, [r3, #0]
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8019280:	4b7b      	ldr	r3, [pc, #492]	; (8019470 <tcp_receive+0x2c4>)
 8019282:	681a      	ldr	r2, [r3, #0]
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019288:	1ad3      	subs	r3, r2, r3
 801928a:	2b00      	cmp	r3, #0
 801928c:	dc58      	bgt.n	8019340 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801928e:	4b7a      	ldr	r3, [pc, #488]	; (8019478 <tcp_receive+0x2cc>)
 8019290:	881b      	ldrh	r3, [r3, #0]
 8019292:	2b00      	cmp	r3, #0
 8019294:	d14b      	bne.n	801932e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801929a:	687a      	ldr	r2, [r7, #4]
 801929c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80192a0:	4413      	add	r3, r2
 80192a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80192a4:	429a      	cmp	r2, r3
 80192a6:	d142      	bne.n	801932e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	db3d      	blt.n	801932e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80192b6:	4b6e      	ldr	r3, [pc, #440]	; (8019470 <tcp_receive+0x2c4>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	429a      	cmp	r2, r3
 80192bc:	d137      	bne.n	801932e <tcp_receive+0x182>
              found_dupack = 1;
 80192be:	2301      	movs	r3, #1
 80192c0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80192c8:	2bff      	cmp	r3, #255	; 0xff
 80192ca:	d007      	beq.n	80192dc <tcp_receive+0x130>
                ++pcb->dupacks;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80192d2:	3301      	adds	r3, #1
 80192d4:	b2da      	uxtb	r2, r3
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80192e2:	2b03      	cmp	r3, #3
 80192e4:	d91b      	bls.n	801931e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80192f0:	4413      	add	r3, r2
 80192f2:	b29a      	uxth	r2, r3
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80192fa:	429a      	cmp	r2, r3
 80192fc:	d30a      	bcc.n	8019314 <tcp_receive+0x168>
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019308:	4413      	add	r3, r2
 801930a:	b29a      	uxth	r2, r3
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019312:	e004      	b.n	801931e <tcp_receive+0x172>
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801931a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019324:	2b02      	cmp	r3, #2
 8019326:	d902      	bls.n	801932e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8019328:	6878      	ldr	r0, [r7, #4]
 801932a:	f002 fb41 	bl	801b9b0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801932e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019330:	2b00      	cmp	r3, #0
 8019332:	f040 8160 	bne.w	80195f6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	2200      	movs	r2, #0
 801933a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801933e:	e15a      	b.n	80195f6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019340:	4b4b      	ldr	r3, [pc, #300]	; (8019470 <tcp_receive+0x2c4>)
 8019342:	681a      	ldr	r2, [r3, #0]
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019348:	1ad3      	subs	r3, r2, r3
 801934a:	3b01      	subs	r3, #1
 801934c:	2b00      	cmp	r3, #0
 801934e:	f2c0 814d 	blt.w	80195ec <tcp_receive+0x440>
 8019352:	4b47      	ldr	r3, [pc, #284]	; (8019470 <tcp_receive+0x2c4>)
 8019354:	681a      	ldr	r2, [r3, #0]
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801935a:	1ad3      	subs	r3, r2, r3
 801935c:	2b00      	cmp	r3, #0
 801935e:	f300 8145 	bgt.w	80195ec <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	8b5b      	ldrh	r3, [r3, #26]
 8019366:	f003 0304 	and.w	r3, r3, #4
 801936a:	2b00      	cmp	r3, #0
 801936c:	d010      	beq.n	8019390 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	8b5b      	ldrh	r3, [r3, #26]
 8019372:	f023 0304 	bic.w	r3, r3, #4
 8019376:	b29a      	uxth	r2, r3
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	2200      	movs	r2, #0
 801938c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	2200      	movs	r2, #0
 8019394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801939e:	10db      	asrs	r3, r3, #3
 80193a0:	b21b      	sxth	r3, r3
 80193a2:	b29a      	uxth	r2, r3
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80193aa:	b29b      	uxth	r3, r3
 80193ac:	4413      	add	r3, r2
 80193ae:	b29b      	uxth	r3, r3
 80193b0:	b21a      	sxth	r2, r3
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80193b8:	4b2d      	ldr	r3, [pc, #180]	; (8019470 <tcp_receive+0x2c4>)
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	b29a      	uxth	r2, r3
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193c2:	b29b      	uxth	r3, r3
 80193c4:	1ad3      	subs	r3, r2, r3
 80193c6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	2200      	movs	r2, #0
 80193cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80193d0:	4b27      	ldr	r3, [pc, #156]	; (8019470 <tcp_receive+0x2c4>)
 80193d2:	681a      	ldr	r2, [r3, #0]
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	7d1b      	ldrb	r3, [r3, #20]
 80193dc:	2b03      	cmp	r3, #3
 80193de:	f240 8096 	bls.w	801950e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80193ee:	429a      	cmp	r2, r3
 80193f0:	d244      	bcs.n	801947c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	8b5b      	ldrh	r3, [r3, #26]
 80193f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d001      	beq.n	8019402 <tcp_receive+0x256>
 80193fe:	2301      	movs	r3, #1
 8019400:	e000      	b.n	8019404 <tcp_receive+0x258>
 8019402:	2302      	movs	r3, #2
 8019404:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8019408:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801940c:	b29a      	uxth	r2, r3
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019412:	fb12 f303 	smulbb	r3, r2, r3
 8019416:	b29b      	uxth	r3, r3
 8019418:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801941a:	4293      	cmp	r3, r2
 801941c:	bf28      	it	cs
 801941e:	4613      	movcs	r3, r2
 8019420:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019428:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801942a:	4413      	add	r3, r2
 801942c:	b29a      	uxth	r2, r3
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019434:	429a      	cmp	r2, r3
 8019436:	d309      	bcc.n	801944c <tcp_receive+0x2a0>
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801943e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019440:	4413      	add	r3, r2
 8019442:	b29a      	uxth	r2, r3
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801944a:	e060      	b.n	801950e <tcp_receive+0x362>
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019452:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019456:	e05a      	b.n	801950e <tcp_receive+0x362>
 8019458:	08022694 	.word	0x08022694
 801945c:	080229c4 	.word	0x080229c4
 8019460:	080226e0 	.word	0x080226e0
 8019464:	080229e0 	.word	0x080229e0
 8019468:	2000c828 	.word	0x2000c828
 801946c:	2000c81c 	.word	0x2000c81c
 8019470:	2000c820 	.word	0x2000c820
 8019474:	2000c80c 	.word	0x2000c80c
 8019478:	2000c826 	.word	0x2000c826
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019482:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019484:	4413      	add	r3, r2
 8019486:	b29a      	uxth	r2, r3
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801948e:	429a      	cmp	r2, r3
 8019490:	d309      	bcc.n	80194a6 <tcp_receive+0x2fa>
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019498:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801949a:	4413      	add	r3, r2
 801949c:	b29a      	uxth	r2, r3
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80194a4:	e004      	b.n	80194b0 <tcp_receive+0x304>
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80194bc:	429a      	cmp	r2, r3
 80194be:	d326      	bcc.n	801950e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80194cc:	1ad3      	subs	r3, r2, r3
 80194ce:	b29a      	uxth	r2, r3
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194e0:	4413      	add	r3, r2
 80194e2:	b29a      	uxth	r2, r3
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80194ea:	429a      	cmp	r2, r3
 80194ec:	d30a      	bcc.n	8019504 <tcp_receive+0x358>
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194f8:	4413      	add	r3, r2
 80194fa:	b29a      	uxth	r2, r3
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019502:	e004      	b.n	801950e <tcp_receive+0x362>
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801950a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019516:	4a98      	ldr	r2, [pc, #608]	; (8019778 <tcp_receive+0x5cc>)
 8019518:	6878      	ldr	r0, [r7, #4]
 801951a:	f7ff fdcb 	bl	80190b4 <tcp_free_acked_segments>
 801951e:	4602      	mov	r2, r0
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801952c:	4a93      	ldr	r2, [pc, #588]	; (801977c <tcp_receive+0x5d0>)
 801952e:	6878      	ldr	r0, [r7, #4]
 8019530:	f7ff fdc0 	bl	80190b4 <tcp_free_acked_segments>
 8019534:	4602      	mov	r2, r0
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801953e:	2b00      	cmp	r3, #0
 8019540:	d104      	bne.n	801954c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019548:	861a      	strh	r2, [r3, #48]	; 0x30
 801954a:	e002      	b.n	8019552 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	2200      	movs	r2, #0
 8019550:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	2200      	movs	r2, #0
 8019556:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801955c:	2b00      	cmp	r3, #0
 801955e:	d103      	bne.n	8019568 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	2200      	movs	r2, #0
 8019564:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801956e:	4b84      	ldr	r3, [pc, #528]	; (8019780 <tcp_receive+0x5d4>)
 8019570:	881b      	ldrh	r3, [r3, #0]
 8019572:	4413      	add	r3, r2
 8019574:	b29a      	uxth	r2, r3
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	8b5b      	ldrh	r3, [r3, #26]
 8019580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019584:	2b00      	cmp	r3, #0
 8019586:	d035      	beq.n	80195f4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801958c:	2b00      	cmp	r3, #0
 801958e:	d118      	bne.n	80195c2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019594:	2b00      	cmp	r3, #0
 8019596:	d00c      	beq.n	80195b2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80195a0:	68db      	ldr	r3, [r3, #12]
 80195a2:	685b      	ldr	r3, [r3, #4]
 80195a4:	4618      	mov	r0, r3
 80195a6:	f7fa fe92 	bl	80142ce <lwip_htonl>
 80195aa:	4603      	mov	r3, r0
 80195ac:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	dc20      	bgt.n	80195f4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	8b5b      	ldrh	r3, [r3, #26]
 80195b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80195ba:	b29a      	uxth	r2, r3
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80195c0:	e018      	b.n	80195f4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195ca:	68db      	ldr	r3, [r3, #12]
 80195cc:	685b      	ldr	r3, [r3, #4]
 80195ce:	4618      	mov	r0, r3
 80195d0:	f7fa fe7d 	bl	80142ce <lwip_htonl>
 80195d4:	4603      	mov	r3, r0
 80195d6:	1ae3      	subs	r3, r4, r3
 80195d8:	2b00      	cmp	r3, #0
 80195da:	dc0b      	bgt.n	80195f4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	8b5b      	ldrh	r3, [r3, #26]
 80195e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80195e4:	b29a      	uxth	r2, r3
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80195ea:	e003      	b.n	80195f4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80195ec:	6878      	ldr	r0, [r7, #4]
 80195ee:	f002 fbcd 	bl	801bd8c <tcp_send_empty_ack>
 80195f2:	e000      	b.n	80195f6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80195f4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d05b      	beq.n	80196b6 <tcp_receive+0x50a>
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019602:	4b60      	ldr	r3, [pc, #384]	; (8019784 <tcp_receive+0x5d8>)
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	1ad3      	subs	r3, r2, r3
 8019608:	2b00      	cmp	r3, #0
 801960a:	da54      	bge.n	80196b6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801960c:	4b5e      	ldr	r3, [pc, #376]	; (8019788 <tcp_receive+0x5dc>)
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	b29a      	uxth	r2, r3
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019616:	b29b      	uxth	r3, r3
 8019618:	1ad3      	subs	r3, r2, r3
 801961a:	b29b      	uxth	r3, r3
 801961c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8019620:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801962a:	10db      	asrs	r3, r3, #3
 801962c:	b21b      	sxth	r3, r3
 801962e:	b29b      	uxth	r3, r3
 8019630:	1ad3      	subs	r3, r2, r3
 8019632:	b29b      	uxth	r3, r3
 8019634:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801963e:	b29a      	uxth	r2, r3
 8019640:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019644:	4413      	add	r3, r2
 8019646:	b29b      	uxth	r3, r3
 8019648:	b21a      	sxth	r2, r3
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801964e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8019652:	2b00      	cmp	r3, #0
 8019654:	da05      	bge.n	8019662 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8019656:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801965a:	425b      	negs	r3, r3
 801965c:	b29b      	uxth	r3, r3
 801965e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8019662:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801966c:	109b      	asrs	r3, r3, #2
 801966e:	b21b      	sxth	r3, r3
 8019670:	b29b      	uxth	r3, r3
 8019672:	1ad3      	subs	r3, r2, r3
 8019674:	b29b      	uxth	r3, r3
 8019676:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019680:	b29a      	uxth	r2, r3
 8019682:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019686:	4413      	add	r3, r2
 8019688:	b29b      	uxth	r3, r3
 801968a:	b21a      	sxth	r2, r3
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019696:	10db      	asrs	r3, r3, #3
 8019698:	b21b      	sxth	r3, r3
 801969a:	b29a      	uxth	r2, r3
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80196a2:	b29b      	uxth	r3, r3
 80196a4:	4413      	add	r3, r2
 80196a6:	b29b      	uxth	r3, r3
 80196a8:	b21a      	sxth	r2, r3
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	2200      	movs	r2, #0
 80196b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80196b6:	4b35      	ldr	r3, [pc, #212]	; (801978c <tcp_receive+0x5e0>)
 80196b8:	881b      	ldrh	r3, [r3, #0]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	f000 84e1 	beq.w	801a082 <tcp_receive+0xed6>
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	7d1b      	ldrb	r3, [r3, #20]
 80196c4:	2b06      	cmp	r3, #6
 80196c6:	f200 84dc 	bhi.w	801a082 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80196ce:	4b30      	ldr	r3, [pc, #192]	; (8019790 <tcp_receive+0x5e4>)
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	1ad3      	subs	r3, r2, r3
 80196d4:	3b01      	subs	r3, #1
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	f2c0 808e 	blt.w	80197f8 <tcp_receive+0x64c>
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80196e0:	4b2a      	ldr	r3, [pc, #168]	; (801978c <tcp_receive+0x5e0>)
 80196e2:	881b      	ldrh	r3, [r3, #0]
 80196e4:	4619      	mov	r1, r3
 80196e6:	4b2a      	ldr	r3, [pc, #168]	; (8019790 <tcp_receive+0x5e4>)
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	440b      	add	r3, r1
 80196ec:	1ad3      	subs	r3, r2, r3
 80196ee:	3301      	adds	r3, #1
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	f300 8081 	bgt.w	80197f8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80196f6:	4b27      	ldr	r3, [pc, #156]	; (8019794 <tcp_receive+0x5e8>)
 80196f8:	685b      	ldr	r3, [r3, #4]
 80196fa:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019700:	4b23      	ldr	r3, [pc, #140]	; (8019790 <tcp_receive+0x5e4>)
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	1ad3      	subs	r3, r2, r3
 8019706:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019708:	4b22      	ldr	r3, [pc, #136]	; (8019794 <tcp_receive+0x5e8>)
 801970a:	685b      	ldr	r3, [r3, #4]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d106      	bne.n	801971e <tcp_receive+0x572>
 8019710:	4b21      	ldr	r3, [pc, #132]	; (8019798 <tcp_receive+0x5ec>)
 8019712:	f240 5294 	movw	r2, #1428	; 0x594
 8019716:	4921      	ldr	r1, [pc, #132]	; (801979c <tcp_receive+0x5f0>)
 8019718:	4821      	ldr	r0, [pc, #132]	; (80197a0 <tcp_receive+0x5f4>)
 801971a:	f005 fc17 	bl	801ef4c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801971e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019720:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019724:	4293      	cmp	r3, r2
 8019726:	d906      	bls.n	8019736 <tcp_receive+0x58a>
 8019728:	4b1b      	ldr	r3, [pc, #108]	; (8019798 <tcp_receive+0x5ec>)
 801972a:	f240 5295 	movw	r2, #1429	; 0x595
 801972e:	491d      	ldr	r1, [pc, #116]	; (80197a4 <tcp_receive+0x5f8>)
 8019730:	481b      	ldr	r0, [pc, #108]	; (80197a0 <tcp_receive+0x5f4>)
 8019732:	f005 fc0b 	bl	801ef4c <iprintf>
      off = (u16_t)off32;
 8019736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019738:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801973c:	4b15      	ldr	r3, [pc, #84]	; (8019794 <tcp_receive+0x5e8>)
 801973e:	685b      	ldr	r3, [r3, #4]
 8019740:	891b      	ldrh	r3, [r3, #8]
 8019742:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019746:	429a      	cmp	r2, r3
 8019748:	d906      	bls.n	8019758 <tcp_receive+0x5ac>
 801974a:	4b13      	ldr	r3, [pc, #76]	; (8019798 <tcp_receive+0x5ec>)
 801974c:	f240 5297 	movw	r2, #1431	; 0x597
 8019750:	4915      	ldr	r1, [pc, #84]	; (80197a8 <tcp_receive+0x5fc>)
 8019752:	4813      	ldr	r0, [pc, #76]	; (80197a0 <tcp_receive+0x5f4>)
 8019754:	f005 fbfa 	bl	801ef4c <iprintf>
      inseg.len -= off;
 8019758:	4b0e      	ldr	r3, [pc, #56]	; (8019794 <tcp_receive+0x5e8>)
 801975a:	891a      	ldrh	r2, [r3, #8]
 801975c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019760:	1ad3      	subs	r3, r2, r3
 8019762:	b29a      	uxth	r2, r3
 8019764:	4b0b      	ldr	r3, [pc, #44]	; (8019794 <tcp_receive+0x5e8>)
 8019766:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019768:	4b0a      	ldr	r3, [pc, #40]	; (8019794 <tcp_receive+0x5e8>)
 801976a:	685b      	ldr	r3, [r3, #4]
 801976c:	891a      	ldrh	r2, [r3, #8]
 801976e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019772:	1ad3      	subs	r3, r2, r3
 8019774:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019776:	e029      	b.n	80197cc <tcp_receive+0x620>
 8019778:	080229fc 	.word	0x080229fc
 801977c:	08022a04 	.word	0x08022a04
 8019780:	2000c824 	.word	0x2000c824
 8019784:	2000c820 	.word	0x2000c820
 8019788:	20014760 	.word	0x20014760
 801978c:	2000c826 	.word	0x2000c826
 8019790:	2000c81c 	.word	0x2000c81c
 8019794:	2000c7fc 	.word	0x2000c7fc
 8019798:	08022694 	.word	0x08022694
 801979c:	08022a0c 	.word	0x08022a0c
 80197a0:	080226e0 	.word	0x080226e0
 80197a4:	08022a1c 	.word	0x08022a1c
 80197a8:	08022a2c 	.word	0x08022a2c
        off -= p->len;
 80197ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197ae:	895b      	ldrh	r3, [r3, #10]
 80197b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80197b4:	1ad3      	subs	r3, r2, r3
 80197b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80197ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80197be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80197c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197c2:	2200      	movs	r2, #0
 80197c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80197c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80197cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197ce:	895b      	ldrh	r3, [r3, #10]
 80197d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80197d4:	429a      	cmp	r2, r3
 80197d6:	d8e9      	bhi.n	80197ac <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80197d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80197dc:	4619      	mov	r1, r3
 80197de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80197e0:	f7fc f8bc 	bl	801595c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197e8:	4a91      	ldr	r2, [pc, #580]	; (8019a30 <tcp_receive+0x884>)
 80197ea:	6013      	str	r3, [r2, #0]
 80197ec:	4b91      	ldr	r3, [pc, #580]	; (8019a34 <tcp_receive+0x888>)
 80197ee:	68db      	ldr	r3, [r3, #12]
 80197f0:	4a8f      	ldr	r2, [pc, #572]	; (8019a30 <tcp_receive+0x884>)
 80197f2:	6812      	ldr	r2, [r2, #0]
 80197f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80197f6:	e00d      	b.n	8019814 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80197f8:	4b8d      	ldr	r3, [pc, #564]	; (8019a30 <tcp_receive+0x884>)
 80197fa:	681a      	ldr	r2, [r3, #0]
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019800:	1ad3      	subs	r3, r2, r3
 8019802:	2b00      	cmp	r3, #0
 8019804:	da06      	bge.n	8019814 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	8b5b      	ldrh	r3, [r3, #26]
 801980a:	f043 0302 	orr.w	r3, r3, #2
 801980e:	b29a      	uxth	r2, r3
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019814:	4b86      	ldr	r3, [pc, #536]	; (8019a30 <tcp_receive+0x884>)
 8019816:	681a      	ldr	r2, [r3, #0]
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801981c:	1ad3      	subs	r3, r2, r3
 801981e:	2b00      	cmp	r3, #0
 8019820:	f2c0 842a 	blt.w	801a078 <tcp_receive+0xecc>
 8019824:	4b82      	ldr	r3, [pc, #520]	; (8019a30 <tcp_receive+0x884>)
 8019826:	681a      	ldr	r2, [r3, #0]
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801982c:	6879      	ldr	r1, [r7, #4]
 801982e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019830:	440b      	add	r3, r1
 8019832:	1ad3      	subs	r3, r2, r3
 8019834:	3301      	adds	r3, #1
 8019836:	2b00      	cmp	r3, #0
 8019838:	f300 841e 	bgt.w	801a078 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019840:	4b7b      	ldr	r3, [pc, #492]	; (8019a30 <tcp_receive+0x884>)
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	429a      	cmp	r2, r3
 8019846:	f040 829a 	bne.w	8019d7e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801984a:	4b7a      	ldr	r3, [pc, #488]	; (8019a34 <tcp_receive+0x888>)
 801984c:	891c      	ldrh	r4, [r3, #8]
 801984e:	4b79      	ldr	r3, [pc, #484]	; (8019a34 <tcp_receive+0x888>)
 8019850:	68db      	ldr	r3, [r3, #12]
 8019852:	899b      	ldrh	r3, [r3, #12]
 8019854:	b29b      	uxth	r3, r3
 8019856:	4618      	mov	r0, r3
 8019858:	f7fa fd24 	bl	80142a4 <lwip_htons>
 801985c:	4603      	mov	r3, r0
 801985e:	b2db      	uxtb	r3, r3
 8019860:	f003 0303 	and.w	r3, r3, #3
 8019864:	2b00      	cmp	r3, #0
 8019866:	d001      	beq.n	801986c <tcp_receive+0x6c0>
 8019868:	2301      	movs	r3, #1
 801986a:	e000      	b.n	801986e <tcp_receive+0x6c2>
 801986c:	2300      	movs	r3, #0
 801986e:	4423      	add	r3, r4
 8019870:	b29a      	uxth	r2, r3
 8019872:	4b71      	ldr	r3, [pc, #452]	; (8019a38 <tcp_receive+0x88c>)
 8019874:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801987a:	4b6f      	ldr	r3, [pc, #444]	; (8019a38 <tcp_receive+0x88c>)
 801987c:	881b      	ldrh	r3, [r3, #0]
 801987e:	429a      	cmp	r2, r3
 8019880:	d275      	bcs.n	801996e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019882:	4b6c      	ldr	r3, [pc, #432]	; (8019a34 <tcp_receive+0x888>)
 8019884:	68db      	ldr	r3, [r3, #12]
 8019886:	899b      	ldrh	r3, [r3, #12]
 8019888:	b29b      	uxth	r3, r3
 801988a:	4618      	mov	r0, r3
 801988c:	f7fa fd0a 	bl	80142a4 <lwip_htons>
 8019890:	4603      	mov	r3, r0
 8019892:	b2db      	uxtb	r3, r3
 8019894:	f003 0301 	and.w	r3, r3, #1
 8019898:	2b00      	cmp	r3, #0
 801989a:	d01f      	beq.n	80198dc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801989c:	4b65      	ldr	r3, [pc, #404]	; (8019a34 <tcp_receive+0x888>)
 801989e:	68db      	ldr	r3, [r3, #12]
 80198a0:	899b      	ldrh	r3, [r3, #12]
 80198a2:	b29b      	uxth	r3, r3
 80198a4:	b21b      	sxth	r3, r3
 80198a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80198aa:	b21c      	sxth	r4, r3
 80198ac:	4b61      	ldr	r3, [pc, #388]	; (8019a34 <tcp_receive+0x888>)
 80198ae:	68db      	ldr	r3, [r3, #12]
 80198b0:	899b      	ldrh	r3, [r3, #12]
 80198b2:	b29b      	uxth	r3, r3
 80198b4:	4618      	mov	r0, r3
 80198b6:	f7fa fcf5 	bl	80142a4 <lwip_htons>
 80198ba:	4603      	mov	r3, r0
 80198bc:	b2db      	uxtb	r3, r3
 80198be:	b29b      	uxth	r3, r3
 80198c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80198c4:	b29b      	uxth	r3, r3
 80198c6:	4618      	mov	r0, r3
 80198c8:	f7fa fcec 	bl	80142a4 <lwip_htons>
 80198cc:	4603      	mov	r3, r0
 80198ce:	b21b      	sxth	r3, r3
 80198d0:	4323      	orrs	r3, r4
 80198d2:	b21a      	sxth	r2, r3
 80198d4:	4b57      	ldr	r3, [pc, #348]	; (8019a34 <tcp_receive+0x888>)
 80198d6:	68db      	ldr	r3, [r3, #12]
 80198d8:	b292      	uxth	r2, r2
 80198da:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80198e0:	4b54      	ldr	r3, [pc, #336]	; (8019a34 <tcp_receive+0x888>)
 80198e2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80198e4:	4b53      	ldr	r3, [pc, #332]	; (8019a34 <tcp_receive+0x888>)
 80198e6:	68db      	ldr	r3, [r3, #12]
 80198e8:	899b      	ldrh	r3, [r3, #12]
 80198ea:	b29b      	uxth	r3, r3
 80198ec:	4618      	mov	r0, r3
 80198ee:	f7fa fcd9 	bl	80142a4 <lwip_htons>
 80198f2:	4603      	mov	r3, r0
 80198f4:	b2db      	uxtb	r3, r3
 80198f6:	f003 0302 	and.w	r3, r3, #2
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d005      	beq.n	801990a <tcp_receive+0x75e>
            inseg.len -= 1;
 80198fe:	4b4d      	ldr	r3, [pc, #308]	; (8019a34 <tcp_receive+0x888>)
 8019900:	891b      	ldrh	r3, [r3, #8]
 8019902:	3b01      	subs	r3, #1
 8019904:	b29a      	uxth	r2, r3
 8019906:	4b4b      	ldr	r3, [pc, #300]	; (8019a34 <tcp_receive+0x888>)
 8019908:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801990a:	4b4a      	ldr	r3, [pc, #296]	; (8019a34 <tcp_receive+0x888>)
 801990c:	685b      	ldr	r3, [r3, #4]
 801990e:	4a49      	ldr	r2, [pc, #292]	; (8019a34 <tcp_receive+0x888>)
 8019910:	8912      	ldrh	r2, [r2, #8]
 8019912:	4611      	mov	r1, r2
 8019914:	4618      	mov	r0, r3
 8019916:	f7fb ff21 	bl	801575c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801991a:	4b46      	ldr	r3, [pc, #280]	; (8019a34 <tcp_receive+0x888>)
 801991c:	891c      	ldrh	r4, [r3, #8]
 801991e:	4b45      	ldr	r3, [pc, #276]	; (8019a34 <tcp_receive+0x888>)
 8019920:	68db      	ldr	r3, [r3, #12]
 8019922:	899b      	ldrh	r3, [r3, #12]
 8019924:	b29b      	uxth	r3, r3
 8019926:	4618      	mov	r0, r3
 8019928:	f7fa fcbc 	bl	80142a4 <lwip_htons>
 801992c:	4603      	mov	r3, r0
 801992e:	b2db      	uxtb	r3, r3
 8019930:	f003 0303 	and.w	r3, r3, #3
 8019934:	2b00      	cmp	r3, #0
 8019936:	d001      	beq.n	801993c <tcp_receive+0x790>
 8019938:	2301      	movs	r3, #1
 801993a:	e000      	b.n	801993e <tcp_receive+0x792>
 801993c:	2300      	movs	r3, #0
 801993e:	4423      	add	r3, r4
 8019940:	b29a      	uxth	r2, r3
 8019942:	4b3d      	ldr	r3, [pc, #244]	; (8019a38 <tcp_receive+0x88c>)
 8019944:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019946:	4b3c      	ldr	r3, [pc, #240]	; (8019a38 <tcp_receive+0x88c>)
 8019948:	881b      	ldrh	r3, [r3, #0]
 801994a:	461a      	mov	r2, r3
 801994c:	4b38      	ldr	r3, [pc, #224]	; (8019a30 <tcp_receive+0x884>)
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	441a      	add	r2, r3
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019956:	6879      	ldr	r1, [r7, #4]
 8019958:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801995a:	440b      	add	r3, r1
 801995c:	429a      	cmp	r2, r3
 801995e:	d006      	beq.n	801996e <tcp_receive+0x7c2>
 8019960:	4b36      	ldr	r3, [pc, #216]	; (8019a3c <tcp_receive+0x890>)
 8019962:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8019966:	4936      	ldr	r1, [pc, #216]	; (8019a40 <tcp_receive+0x894>)
 8019968:	4836      	ldr	r0, [pc, #216]	; (8019a44 <tcp_receive+0x898>)
 801996a:	f005 faef 	bl	801ef4c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019972:	2b00      	cmp	r3, #0
 8019974:	f000 80e7 	beq.w	8019b46 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019978:	4b2e      	ldr	r3, [pc, #184]	; (8019a34 <tcp_receive+0x888>)
 801997a:	68db      	ldr	r3, [r3, #12]
 801997c:	899b      	ldrh	r3, [r3, #12]
 801997e:	b29b      	uxth	r3, r3
 8019980:	4618      	mov	r0, r3
 8019982:	f7fa fc8f 	bl	80142a4 <lwip_htons>
 8019986:	4603      	mov	r3, r0
 8019988:	b2db      	uxtb	r3, r3
 801998a:	f003 0301 	and.w	r3, r3, #1
 801998e:	2b00      	cmp	r3, #0
 8019990:	d010      	beq.n	80199b4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019992:	e00a      	b.n	80199aa <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019998:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801999e:	681a      	ldr	r2, [r3, #0]
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80199a4:	68f8      	ldr	r0, [r7, #12]
 80199a6:	f7fd fcaa 	bl	80172fe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d1f0      	bne.n	8019994 <tcp_receive+0x7e8>
 80199b2:	e0c8      	b.n	8019b46 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80199b8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80199ba:	e052      	b.n	8019a62 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80199bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199be:	68db      	ldr	r3, [r3, #12]
 80199c0:	899b      	ldrh	r3, [r3, #12]
 80199c2:	b29b      	uxth	r3, r3
 80199c4:	4618      	mov	r0, r3
 80199c6:	f7fa fc6d 	bl	80142a4 <lwip_htons>
 80199ca:	4603      	mov	r3, r0
 80199cc:	b2db      	uxtb	r3, r3
 80199ce:	f003 0301 	and.w	r3, r3, #1
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d03d      	beq.n	8019a52 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80199d6:	4b17      	ldr	r3, [pc, #92]	; (8019a34 <tcp_receive+0x888>)
 80199d8:	68db      	ldr	r3, [r3, #12]
 80199da:	899b      	ldrh	r3, [r3, #12]
 80199dc:	b29b      	uxth	r3, r3
 80199de:	4618      	mov	r0, r3
 80199e0:	f7fa fc60 	bl	80142a4 <lwip_htons>
 80199e4:	4603      	mov	r3, r0
 80199e6:	b2db      	uxtb	r3, r3
 80199e8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d130      	bne.n	8019a52 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80199f0:	4b10      	ldr	r3, [pc, #64]	; (8019a34 <tcp_receive+0x888>)
 80199f2:	68db      	ldr	r3, [r3, #12]
 80199f4:	899b      	ldrh	r3, [r3, #12]
 80199f6:	b29c      	uxth	r4, r3
 80199f8:	2001      	movs	r0, #1
 80199fa:	f7fa fc53 	bl	80142a4 <lwip_htons>
 80199fe:	4603      	mov	r3, r0
 8019a00:	461a      	mov	r2, r3
 8019a02:	4b0c      	ldr	r3, [pc, #48]	; (8019a34 <tcp_receive+0x888>)
 8019a04:	68db      	ldr	r3, [r3, #12]
 8019a06:	4322      	orrs	r2, r4
 8019a08:	b292      	uxth	r2, r2
 8019a0a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019a0c:	4b09      	ldr	r3, [pc, #36]	; (8019a34 <tcp_receive+0x888>)
 8019a0e:	891c      	ldrh	r4, [r3, #8]
 8019a10:	4b08      	ldr	r3, [pc, #32]	; (8019a34 <tcp_receive+0x888>)
 8019a12:	68db      	ldr	r3, [r3, #12]
 8019a14:	899b      	ldrh	r3, [r3, #12]
 8019a16:	b29b      	uxth	r3, r3
 8019a18:	4618      	mov	r0, r3
 8019a1a:	f7fa fc43 	bl	80142a4 <lwip_htons>
 8019a1e:	4603      	mov	r3, r0
 8019a20:	b2db      	uxtb	r3, r3
 8019a22:	f003 0303 	and.w	r3, r3, #3
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d00e      	beq.n	8019a48 <tcp_receive+0x89c>
 8019a2a:	2301      	movs	r3, #1
 8019a2c:	e00d      	b.n	8019a4a <tcp_receive+0x89e>
 8019a2e:	bf00      	nop
 8019a30:	2000c81c 	.word	0x2000c81c
 8019a34:	2000c7fc 	.word	0x2000c7fc
 8019a38:	2000c826 	.word	0x2000c826
 8019a3c:	08022694 	.word	0x08022694
 8019a40:	08022a3c 	.word	0x08022a3c
 8019a44:	080226e0 	.word	0x080226e0
 8019a48:	2300      	movs	r3, #0
 8019a4a:	4423      	add	r3, r4
 8019a4c:	b29a      	uxth	r2, r3
 8019a4e:	4b98      	ldr	r3, [pc, #608]	; (8019cb0 <tcp_receive+0xb04>)
 8019a50:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8019a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a54:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8019a5c:	6938      	ldr	r0, [r7, #16]
 8019a5e:	f7fd fc4e 	bl	80172fe <tcp_seg_free>
            while (next &&
 8019a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d00e      	beq.n	8019a86 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019a68:	4b91      	ldr	r3, [pc, #580]	; (8019cb0 <tcp_receive+0xb04>)
 8019a6a:	881b      	ldrh	r3, [r3, #0]
 8019a6c:	461a      	mov	r2, r3
 8019a6e:	4b91      	ldr	r3, [pc, #580]	; (8019cb4 <tcp_receive+0xb08>)
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	441a      	add	r2, r3
 8019a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a76:	68db      	ldr	r3, [r3, #12]
 8019a78:	685b      	ldr	r3, [r3, #4]
 8019a7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019a7c:	8909      	ldrh	r1, [r1, #8]
 8019a7e:	440b      	add	r3, r1
 8019a80:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	da9a      	bge.n	80199bc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d059      	beq.n	8019b40 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019a8c:	4b88      	ldr	r3, [pc, #544]	; (8019cb0 <tcp_receive+0xb04>)
 8019a8e:	881b      	ldrh	r3, [r3, #0]
 8019a90:	461a      	mov	r2, r3
 8019a92:	4b88      	ldr	r3, [pc, #544]	; (8019cb4 <tcp_receive+0xb08>)
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	441a      	add	r2, r3
 8019a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a9a:	68db      	ldr	r3, [r3, #12]
 8019a9c:	685b      	ldr	r3, [r3, #4]
 8019a9e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	dd4d      	ble.n	8019b40 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019aa6:	68db      	ldr	r3, [r3, #12]
 8019aa8:	685b      	ldr	r3, [r3, #4]
 8019aaa:	b29a      	uxth	r2, r3
 8019aac:	4b81      	ldr	r3, [pc, #516]	; (8019cb4 <tcp_receive+0xb08>)
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	b29b      	uxth	r3, r3
 8019ab2:	1ad3      	subs	r3, r2, r3
 8019ab4:	b29a      	uxth	r2, r3
 8019ab6:	4b80      	ldr	r3, [pc, #512]	; (8019cb8 <tcp_receive+0xb0c>)
 8019ab8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019aba:	4b7f      	ldr	r3, [pc, #508]	; (8019cb8 <tcp_receive+0xb0c>)
 8019abc:	68db      	ldr	r3, [r3, #12]
 8019abe:	899b      	ldrh	r3, [r3, #12]
 8019ac0:	b29b      	uxth	r3, r3
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	f7fa fbee 	bl	80142a4 <lwip_htons>
 8019ac8:	4603      	mov	r3, r0
 8019aca:	b2db      	uxtb	r3, r3
 8019acc:	f003 0302 	and.w	r3, r3, #2
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d005      	beq.n	8019ae0 <tcp_receive+0x934>
                inseg.len -= 1;
 8019ad4:	4b78      	ldr	r3, [pc, #480]	; (8019cb8 <tcp_receive+0xb0c>)
 8019ad6:	891b      	ldrh	r3, [r3, #8]
 8019ad8:	3b01      	subs	r3, #1
 8019ada:	b29a      	uxth	r2, r3
 8019adc:	4b76      	ldr	r3, [pc, #472]	; (8019cb8 <tcp_receive+0xb0c>)
 8019ade:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019ae0:	4b75      	ldr	r3, [pc, #468]	; (8019cb8 <tcp_receive+0xb0c>)
 8019ae2:	685b      	ldr	r3, [r3, #4]
 8019ae4:	4a74      	ldr	r2, [pc, #464]	; (8019cb8 <tcp_receive+0xb0c>)
 8019ae6:	8912      	ldrh	r2, [r2, #8]
 8019ae8:	4611      	mov	r1, r2
 8019aea:	4618      	mov	r0, r3
 8019aec:	f7fb fe36 	bl	801575c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019af0:	4b71      	ldr	r3, [pc, #452]	; (8019cb8 <tcp_receive+0xb0c>)
 8019af2:	891c      	ldrh	r4, [r3, #8]
 8019af4:	4b70      	ldr	r3, [pc, #448]	; (8019cb8 <tcp_receive+0xb0c>)
 8019af6:	68db      	ldr	r3, [r3, #12]
 8019af8:	899b      	ldrh	r3, [r3, #12]
 8019afa:	b29b      	uxth	r3, r3
 8019afc:	4618      	mov	r0, r3
 8019afe:	f7fa fbd1 	bl	80142a4 <lwip_htons>
 8019b02:	4603      	mov	r3, r0
 8019b04:	b2db      	uxtb	r3, r3
 8019b06:	f003 0303 	and.w	r3, r3, #3
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d001      	beq.n	8019b12 <tcp_receive+0x966>
 8019b0e:	2301      	movs	r3, #1
 8019b10:	e000      	b.n	8019b14 <tcp_receive+0x968>
 8019b12:	2300      	movs	r3, #0
 8019b14:	4423      	add	r3, r4
 8019b16:	b29a      	uxth	r2, r3
 8019b18:	4b65      	ldr	r3, [pc, #404]	; (8019cb0 <tcp_receive+0xb04>)
 8019b1a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019b1c:	4b64      	ldr	r3, [pc, #400]	; (8019cb0 <tcp_receive+0xb04>)
 8019b1e:	881b      	ldrh	r3, [r3, #0]
 8019b20:	461a      	mov	r2, r3
 8019b22:	4b64      	ldr	r3, [pc, #400]	; (8019cb4 <tcp_receive+0xb08>)
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	441a      	add	r2, r3
 8019b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b2a:	68db      	ldr	r3, [r3, #12]
 8019b2c:	685b      	ldr	r3, [r3, #4]
 8019b2e:	429a      	cmp	r2, r3
 8019b30:	d006      	beq.n	8019b40 <tcp_receive+0x994>
 8019b32:	4b62      	ldr	r3, [pc, #392]	; (8019cbc <tcp_receive+0xb10>)
 8019b34:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8019b38:	4961      	ldr	r1, [pc, #388]	; (8019cc0 <tcp_receive+0xb14>)
 8019b3a:	4862      	ldr	r0, [pc, #392]	; (8019cc4 <tcp_receive+0xb18>)
 8019b3c:	f005 fa06 	bl	801ef4c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019b44:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019b46:	4b5a      	ldr	r3, [pc, #360]	; (8019cb0 <tcp_receive+0xb04>)
 8019b48:	881b      	ldrh	r3, [r3, #0]
 8019b4a:	461a      	mov	r2, r3
 8019b4c:	4b59      	ldr	r3, [pc, #356]	; (8019cb4 <tcp_receive+0xb08>)
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	441a      	add	r2, r3
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019b5a:	4b55      	ldr	r3, [pc, #340]	; (8019cb0 <tcp_receive+0xb04>)
 8019b5c:	881b      	ldrh	r3, [r3, #0]
 8019b5e:	429a      	cmp	r2, r3
 8019b60:	d206      	bcs.n	8019b70 <tcp_receive+0x9c4>
 8019b62:	4b56      	ldr	r3, [pc, #344]	; (8019cbc <tcp_receive+0xb10>)
 8019b64:	f240 6207 	movw	r2, #1543	; 0x607
 8019b68:	4957      	ldr	r1, [pc, #348]	; (8019cc8 <tcp_receive+0xb1c>)
 8019b6a:	4856      	ldr	r0, [pc, #344]	; (8019cc4 <tcp_receive+0xb18>)
 8019b6c:	f005 f9ee 	bl	801ef4c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019b74:	4b4e      	ldr	r3, [pc, #312]	; (8019cb0 <tcp_receive+0xb04>)
 8019b76:	881b      	ldrh	r3, [r3, #0]
 8019b78:	1ad3      	subs	r3, r2, r3
 8019b7a:	b29a      	uxth	r2, r3
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8019b80:	6878      	ldr	r0, [r7, #4]
 8019b82:	f7fc fe97 	bl	80168b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019b86:	4b4c      	ldr	r3, [pc, #304]	; (8019cb8 <tcp_receive+0xb0c>)
 8019b88:	685b      	ldr	r3, [r3, #4]
 8019b8a:	891b      	ldrh	r3, [r3, #8]
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d006      	beq.n	8019b9e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8019b90:	4b49      	ldr	r3, [pc, #292]	; (8019cb8 <tcp_receive+0xb0c>)
 8019b92:	685b      	ldr	r3, [r3, #4]
 8019b94:	4a4d      	ldr	r2, [pc, #308]	; (8019ccc <tcp_receive+0xb20>)
 8019b96:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019b98:	4b47      	ldr	r3, [pc, #284]	; (8019cb8 <tcp_receive+0xb0c>)
 8019b9a:	2200      	movs	r2, #0
 8019b9c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019b9e:	4b46      	ldr	r3, [pc, #280]	; (8019cb8 <tcp_receive+0xb0c>)
 8019ba0:	68db      	ldr	r3, [r3, #12]
 8019ba2:	899b      	ldrh	r3, [r3, #12]
 8019ba4:	b29b      	uxth	r3, r3
 8019ba6:	4618      	mov	r0, r3
 8019ba8:	f7fa fb7c 	bl	80142a4 <lwip_htons>
 8019bac:	4603      	mov	r3, r0
 8019bae:	b2db      	uxtb	r3, r3
 8019bb0:	f003 0301 	and.w	r3, r3, #1
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	f000 80b8 	beq.w	8019d2a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8019bba:	4b45      	ldr	r3, [pc, #276]	; (8019cd0 <tcp_receive+0xb24>)
 8019bbc:	781b      	ldrb	r3, [r3, #0]
 8019bbe:	f043 0320 	orr.w	r3, r3, #32
 8019bc2:	b2da      	uxtb	r2, r3
 8019bc4:	4b42      	ldr	r3, [pc, #264]	; (8019cd0 <tcp_receive+0xb24>)
 8019bc6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019bc8:	e0af      	b.n	8019d2a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019bce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019bd4:	68db      	ldr	r3, [r3, #12]
 8019bd6:	685b      	ldr	r3, [r3, #4]
 8019bd8:	4a36      	ldr	r2, [pc, #216]	; (8019cb4 <tcp_receive+0xb08>)
 8019bda:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019bdc:	68bb      	ldr	r3, [r7, #8]
 8019bde:	891b      	ldrh	r3, [r3, #8]
 8019be0:	461c      	mov	r4, r3
 8019be2:	68bb      	ldr	r3, [r7, #8]
 8019be4:	68db      	ldr	r3, [r3, #12]
 8019be6:	899b      	ldrh	r3, [r3, #12]
 8019be8:	b29b      	uxth	r3, r3
 8019bea:	4618      	mov	r0, r3
 8019bec:	f7fa fb5a 	bl	80142a4 <lwip_htons>
 8019bf0:	4603      	mov	r3, r0
 8019bf2:	b2db      	uxtb	r3, r3
 8019bf4:	f003 0303 	and.w	r3, r3, #3
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d001      	beq.n	8019c00 <tcp_receive+0xa54>
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	e000      	b.n	8019c02 <tcp_receive+0xa56>
 8019c00:	2300      	movs	r3, #0
 8019c02:	191a      	adds	r2, r3, r4
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c08:	441a      	add	r2, r3
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019c12:	461c      	mov	r4, r3
 8019c14:	68bb      	ldr	r3, [r7, #8]
 8019c16:	891b      	ldrh	r3, [r3, #8]
 8019c18:	461d      	mov	r5, r3
 8019c1a:	68bb      	ldr	r3, [r7, #8]
 8019c1c:	68db      	ldr	r3, [r3, #12]
 8019c1e:	899b      	ldrh	r3, [r3, #12]
 8019c20:	b29b      	uxth	r3, r3
 8019c22:	4618      	mov	r0, r3
 8019c24:	f7fa fb3e 	bl	80142a4 <lwip_htons>
 8019c28:	4603      	mov	r3, r0
 8019c2a:	b2db      	uxtb	r3, r3
 8019c2c:	f003 0303 	and.w	r3, r3, #3
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d001      	beq.n	8019c38 <tcp_receive+0xa8c>
 8019c34:	2301      	movs	r3, #1
 8019c36:	e000      	b.n	8019c3a <tcp_receive+0xa8e>
 8019c38:	2300      	movs	r3, #0
 8019c3a:	442b      	add	r3, r5
 8019c3c:	429c      	cmp	r4, r3
 8019c3e:	d206      	bcs.n	8019c4e <tcp_receive+0xaa2>
 8019c40:	4b1e      	ldr	r3, [pc, #120]	; (8019cbc <tcp_receive+0xb10>)
 8019c42:	f240 622b 	movw	r2, #1579	; 0x62b
 8019c46:	4923      	ldr	r1, [pc, #140]	; (8019cd4 <tcp_receive+0xb28>)
 8019c48:	481e      	ldr	r0, [pc, #120]	; (8019cc4 <tcp_receive+0xb18>)
 8019c4a:	f005 f97f 	bl	801ef4c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8019c4e:	68bb      	ldr	r3, [r7, #8]
 8019c50:	891b      	ldrh	r3, [r3, #8]
 8019c52:	461c      	mov	r4, r3
 8019c54:	68bb      	ldr	r3, [r7, #8]
 8019c56:	68db      	ldr	r3, [r3, #12]
 8019c58:	899b      	ldrh	r3, [r3, #12]
 8019c5a:	b29b      	uxth	r3, r3
 8019c5c:	4618      	mov	r0, r3
 8019c5e:	f7fa fb21 	bl	80142a4 <lwip_htons>
 8019c62:	4603      	mov	r3, r0
 8019c64:	b2db      	uxtb	r3, r3
 8019c66:	f003 0303 	and.w	r3, r3, #3
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d001      	beq.n	8019c72 <tcp_receive+0xac6>
 8019c6e:	2301      	movs	r3, #1
 8019c70:	e000      	b.n	8019c74 <tcp_receive+0xac8>
 8019c72:	2300      	movs	r3, #0
 8019c74:	1919      	adds	r1, r3, r4
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019c7a:	b28b      	uxth	r3, r1
 8019c7c:	1ad3      	subs	r3, r2, r3
 8019c7e:	b29a      	uxth	r2, r3
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019c84:	6878      	ldr	r0, [r7, #4]
 8019c86:	f7fc fe15 	bl	80168b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8019c8a:	68bb      	ldr	r3, [r7, #8]
 8019c8c:	685b      	ldr	r3, [r3, #4]
 8019c8e:	891b      	ldrh	r3, [r3, #8]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d028      	beq.n	8019ce6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019c94:	4b0d      	ldr	r3, [pc, #52]	; (8019ccc <tcp_receive+0xb20>)
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d01d      	beq.n	8019cd8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8019c9c:	4b0b      	ldr	r3, [pc, #44]	; (8019ccc <tcp_receive+0xb20>)
 8019c9e:	681a      	ldr	r2, [r3, #0]
 8019ca0:	68bb      	ldr	r3, [r7, #8]
 8019ca2:	685b      	ldr	r3, [r3, #4]
 8019ca4:	4619      	mov	r1, r3
 8019ca6:	4610      	mov	r0, r2
 8019ca8:	f7fb ffbe 	bl	8015c28 <pbuf_cat>
 8019cac:	e018      	b.n	8019ce0 <tcp_receive+0xb34>
 8019cae:	bf00      	nop
 8019cb0:	2000c826 	.word	0x2000c826
 8019cb4:	2000c81c 	.word	0x2000c81c
 8019cb8:	2000c7fc 	.word	0x2000c7fc
 8019cbc:	08022694 	.word	0x08022694
 8019cc0:	08022a74 	.word	0x08022a74
 8019cc4:	080226e0 	.word	0x080226e0
 8019cc8:	08022ab0 	.word	0x08022ab0
 8019ccc:	2000c82c 	.word	0x2000c82c
 8019cd0:	2000c829 	.word	0x2000c829
 8019cd4:	08022ad0 	.word	0x08022ad0
            } else {
              recv_data = cseg->p;
 8019cd8:	68bb      	ldr	r3, [r7, #8]
 8019cda:	685b      	ldr	r3, [r3, #4]
 8019cdc:	4a70      	ldr	r2, [pc, #448]	; (8019ea0 <tcp_receive+0xcf4>)
 8019cde:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8019ce0:	68bb      	ldr	r3, [r7, #8]
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019ce6:	68bb      	ldr	r3, [r7, #8]
 8019ce8:	68db      	ldr	r3, [r3, #12]
 8019cea:	899b      	ldrh	r3, [r3, #12]
 8019cec:	b29b      	uxth	r3, r3
 8019cee:	4618      	mov	r0, r3
 8019cf0:	f7fa fad8 	bl	80142a4 <lwip_htons>
 8019cf4:	4603      	mov	r3, r0
 8019cf6:	b2db      	uxtb	r3, r3
 8019cf8:	f003 0301 	and.w	r3, r3, #1
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d00d      	beq.n	8019d1c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019d00:	4b68      	ldr	r3, [pc, #416]	; (8019ea4 <tcp_receive+0xcf8>)
 8019d02:	781b      	ldrb	r3, [r3, #0]
 8019d04:	f043 0320 	orr.w	r3, r3, #32
 8019d08:	b2da      	uxtb	r2, r3
 8019d0a:	4b66      	ldr	r3, [pc, #408]	; (8019ea4 <tcp_receive+0xcf8>)
 8019d0c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	7d1b      	ldrb	r3, [r3, #20]
 8019d12:	2b04      	cmp	r3, #4
 8019d14:	d102      	bne.n	8019d1c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	2207      	movs	r2, #7
 8019d1a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019d1c:	68bb      	ldr	r3, [r7, #8]
 8019d1e:	681a      	ldr	r2, [r3, #0]
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8019d24:	68b8      	ldr	r0, [r7, #8]
 8019d26:	f7fd faea 	bl	80172fe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d008      	beq.n	8019d44 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d36:	68db      	ldr	r3, [r3, #12]
 8019d38:	685a      	ldr	r2, [r3, #4]
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8019d3e:	429a      	cmp	r2, r3
 8019d40:	f43f af43 	beq.w	8019bca <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	8b5b      	ldrh	r3, [r3, #26]
 8019d48:	f003 0301 	and.w	r3, r3, #1
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d00e      	beq.n	8019d6e <tcp_receive+0xbc2>
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	8b5b      	ldrh	r3, [r3, #26]
 8019d54:	f023 0301 	bic.w	r3, r3, #1
 8019d58:	b29a      	uxth	r2, r3
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	835a      	strh	r2, [r3, #26]
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	8b5b      	ldrh	r3, [r3, #26]
 8019d62:	f043 0302 	orr.w	r3, r3, #2
 8019d66:	b29a      	uxth	r2, r3
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019d6c:	e188      	b.n	801a080 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	8b5b      	ldrh	r3, [r3, #26]
 8019d72:	f043 0301 	orr.w	r3, r3, #1
 8019d76:	b29a      	uxth	r2, r3
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019d7c:	e180      	b.n	801a080 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d106      	bne.n	8019d94 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019d86:	4848      	ldr	r0, [pc, #288]	; (8019ea8 <tcp_receive+0xcfc>)
 8019d88:	f7fd faf0 	bl	801736c <tcp_seg_copy>
 8019d8c:	4602      	mov	r2, r0
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	675a      	str	r2, [r3, #116]	; 0x74
 8019d92:	e16d      	b.n	801a070 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019d94:	2300      	movs	r3, #0
 8019d96:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8019d9e:	e157      	b.n	801a050 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8019da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019da2:	68db      	ldr	r3, [r3, #12]
 8019da4:	685a      	ldr	r2, [r3, #4]
 8019da6:	4b41      	ldr	r3, [pc, #260]	; (8019eac <tcp_receive+0xd00>)
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	429a      	cmp	r2, r3
 8019dac:	d11d      	bne.n	8019dea <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019dae:	4b3e      	ldr	r3, [pc, #248]	; (8019ea8 <tcp_receive+0xcfc>)
 8019db0:	891a      	ldrh	r2, [r3, #8]
 8019db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019db4:	891b      	ldrh	r3, [r3, #8]
 8019db6:	429a      	cmp	r2, r3
 8019db8:	f240 814f 	bls.w	801a05a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019dbc:	483a      	ldr	r0, [pc, #232]	; (8019ea8 <tcp_receive+0xcfc>)
 8019dbe:	f7fd fad5 	bl	801736c <tcp_seg_copy>
 8019dc2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8019dc4:	697b      	ldr	r3, [r7, #20]
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	f000 8149 	beq.w	801a05e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8019dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d003      	beq.n	8019dda <tcp_receive+0xc2e>
                    prev->next = cseg;
 8019dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dd4:	697a      	ldr	r2, [r7, #20]
 8019dd6:	601a      	str	r2, [r3, #0]
 8019dd8:	e002      	b.n	8019de0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	697a      	ldr	r2, [r7, #20]
 8019dde:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019de0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019de2:	6978      	ldr	r0, [r7, #20]
 8019de4:	f7ff f8de 	bl	8018fa4 <tcp_oos_insert_segment>
                }
                break;
 8019de8:	e139      	b.n	801a05e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8019dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d117      	bne.n	8019e20 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019df0:	4b2e      	ldr	r3, [pc, #184]	; (8019eac <tcp_receive+0xd00>)
 8019df2:	681a      	ldr	r2, [r3, #0]
 8019df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019df6:	68db      	ldr	r3, [r3, #12]
 8019df8:	685b      	ldr	r3, [r3, #4]
 8019dfa:	1ad3      	subs	r3, r2, r3
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	da57      	bge.n	8019eb0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019e00:	4829      	ldr	r0, [pc, #164]	; (8019ea8 <tcp_receive+0xcfc>)
 8019e02:	f7fd fab3 	bl	801736c <tcp_seg_copy>
 8019e06:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8019e08:	69bb      	ldr	r3, [r7, #24]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	f000 8129 	beq.w	801a062 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	69ba      	ldr	r2, [r7, #24]
 8019e14:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8019e16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019e18:	69b8      	ldr	r0, [r7, #24]
 8019e1a:	f7ff f8c3 	bl	8018fa4 <tcp_oos_insert_segment>
                  }
                  break;
 8019e1e:	e120      	b.n	801a062 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019e20:	4b22      	ldr	r3, [pc, #136]	; (8019eac <tcp_receive+0xd00>)
 8019e22:	681a      	ldr	r2, [r3, #0]
 8019e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e26:	68db      	ldr	r3, [r3, #12]
 8019e28:	685b      	ldr	r3, [r3, #4]
 8019e2a:	1ad3      	subs	r3, r2, r3
 8019e2c:	3b01      	subs	r3, #1
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	db3e      	blt.n	8019eb0 <tcp_receive+0xd04>
 8019e32:	4b1e      	ldr	r3, [pc, #120]	; (8019eac <tcp_receive+0xd00>)
 8019e34:	681a      	ldr	r2, [r3, #0]
 8019e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e38:	68db      	ldr	r3, [r3, #12]
 8019e3a:	685b      	ldr	r3, [r3, #4]
 8019e3c:	1ad3      	subs	r3, r2, r3
 8019e3e:	3301      	adds	r3, #1
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	dc35      	bgt.n	8019eb0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019e44:	4818      	ldr	r0, [pc, #96]	; (8019ea8 <tcp_receive+0xcfc>)
 8019e46:	f7fd fa91 	bl	801736c <tcp_seg_copy>
 8019e4a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019e4c:	69fb      	ldr	r3, [r7, #28]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	f000 8109 	beq.w	801a066 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e56:	68db      	ldr	r3, [r3, #12]
 8019e58:	685b      	ldr	r3, [r3, #4]
 8019e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019e5c:	8912      	ldrh	r2, [r2, #8]
 8019e5e:	441a      	add	r2, r3
 8019e60:	4b12      	ldr	r3, [pc, #72]	; (8019eac <tcp_receive+0xd00>)
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	1ad3      	subs	r3, r2, r3
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	dd12      	ble.n	8019e90 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019e6a:	4b10      	ldr	r3, [pc, #64]	; (8019eac <tcp_receive+0xd00>)
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	b29a      	uxth	r2, r3
 8019e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e72:	68db      	ldr	r3, [r3, #12]
 8019e74:	685b      	ldr	r3, [r3, #4]
 8019e76:	b29b      	uxth	r3, r3
 8019e78:	1ad3      	subs	r3, r2, r3
 8019e7a:	b29a      	uxth	r2, r3
 8019e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e7e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e82:	685a      	ldr	r2, [r3, #4]
 8019e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e86:	891b      	ldrh	r3, [r3, #8]
 8019e88:	4619      	mov	r1, r3
 8019e8a:	4610      	mov	r0, r2
 8019e8c:	f7fb fc66 	bl	801575c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e92:	69fa      	ldr	r2, [r7, #28]
 8019e94:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019e96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019e98:	69f8      	ldr	r0, [r7, #28]
 8019e9a:	f7ff f883 	bl	8018fa4 <tcp_oos_insert_segment>
                  }
                  break;
 8019e9e:	e0e2      	b.n	801a066 <tcp_receive+0xeba>
 8019ea0:	2000c82c 	.word	0x2000c82c
 8019ea4:	2000c829 	.word	0x2000c829
 8019ea8:	2000c7fc 	.word	0x2000c7fc
 8019eac:	2000c81c 	.word	0x2000c81c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019eb2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	f040 80c6 	bne.w	801a04a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019ebe:	4b80      	ldr	r3, [pc, #512]	; (801a0c0 <tcp_receive+0xf14>)
 8019ec0:	681a      	ldr	r2, [r3, #0]
 8019ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ec4:	68db      	ldr	r3, [r3, #12]
 8019ec6:	685b      	ldr	r3, [r3, #4]
 8019ec8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	f340 80bd 	ble.w	801a04a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ed2:	68db      	ldr	r3, [r3, #12]
 8019ed4:	899b      	ldrh	r3, [r3, #12]
 8019ed6:	b29b      	uxth	r3, r3
 8019ed8:	4618      	mov	r0, r3
 8019eda:	f7fa f9e3 	bl	80142a4 <lwip_htons>
 8019ede:	4603      	mov	r3, r0
 8019ee0:	b2db      	uxtb	r3, r3
 8019ee2:	f003 0301 	and.w	r3, r3, #1
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	f040 80bf 	bne.w	801a06a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019eec:	4875      	ldr	r0, [pc, #468]	; (801a0c4 <tcp_receive+0xf18>)
 8019eee:	f7fd fa3d 	bl	801736c <tcp_seg_copy>
 8019ef2:	4602      	mov	r2, r0
 8019ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ef6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	f000 80b6 	beq.w	801a06e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f04:	68db      	ldr	r3, [r3, #12]
 8019f06:	685b      	ldr	r3, [r3, #4]
 8019f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019f0a:	8912      	ldrh	r2, [r2, #8]
 8019f0c:	441a      	add	r2, r3
 8019f0e:	4b6c      	ldr	r3, [pc, #432]	; (801a0c0 <tcp_receive+0xf14>)
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	1ad3      	subs	r3, r2, r3
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	dd12      	ble.n	8019f3e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019f18:	4b69      	ldr	r3, [pc, #420]	; (801a0c0 <tcp_receive+0xf14>)
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	b29a      	uxth	r2, r3
 8019f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f20:	68db      	ldr	r3, [r3, #12]
 8019f22:	685b      	ldr	r3, [r3, #4]
 8019f24:	b29b      	uxth	r3, r3
 8019f26:	1ad3      	subs	r3, r2, r3
 8019f28:	b29a      	uxth	r2, r3
 8019f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f2c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f30:	685a      	ldr	r2, [r3, #4]
 8019f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f34:	891b      	ldrh	r3, [r3, #8]
 8019f36:	4619      	mov	r1, r3
 8019f38:	4610      	mov	r0, r2
 8019f3a:	f7fb fc0f 	bl	801575c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019f3e:	4b62      	ldr	r3, [pc, #392]	; (801a0c8 <tcp_receive+0xf1c>)
 8019f40:	881b      	ldrh	r3, [r3, #0]
 8019f42:	461a      	mov	r2, r3
 8019f44:	4b5e      	ldr	r3, [pc, #376]	; (801a0c0 <tcp_receive+0xf14>)
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	441a      	add	r2, r3
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f4e:	6879      	ldr	r1, [r7, #4]
 8019f50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019f52:	440b      	add	r3, r1
 8019f54:	1ad3      	subs	r3, r2, r3
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	f340 8089 	ble.w	801a06e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	68db      	ldr	r3, [r3, #12]
 8019f62:	899b      	ldrh	r3, [r3, #12]
 8019f64:	b29b      	uxth	r3, r3
 8019f66:	4618      	mov	r0, r3
 8019f68:	f7fa f99c 	bl	80142a4 <lwip_htons>
 8019f6c:	4603      	mov	r3, r0
 8019f6e:	b2db      	uxtb	r3, r3
 8019f70:	f003 0301 	and.w	r3, r3, #1
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d022      	beq.n	8019fbe <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	68db      	ldr	r3, [r3, #12]
 8019f7e:	899b      	ldrh	r3, [r3, #12]
 8019f80:	b29b      	uxth	r3, r3
 8019f82:	b21b      	sxth	r3, r3
 8019f84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019f88:	b21c      	sxth	r4, r3
 8019f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	68db      	ldr	r3, [r3, #12]
 8019f90:	899b      	ldrh	r3, [r3, #12]
 8019f92:	b29b      	uxth	r3, r3
 8019f94:	4618      	mov	r0, r3
 8019f96:	f7fa f985 	bl	80142a4 <lwip_htons>
 8019f9a:	4603      	mov	r3, r0
 8019f9c:	b2db      	uxtb	r3, r3
 8019f9e:	b29b      	uxth	r3, r3
 8019fa0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019fa4:	b29b      	uxth	r3, r3
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f7fa f97c 	bl	80142a4 <lwip_htons>
 8019fac:	4603      	mov	r3, r0
 8019fae:	b21b      	sxth	r3, r3
 8019fb0:	4323      	orrs	r3, r4
 8019fb2:	b21a      	sxth	r2, r3
 8019fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	68db      	ldr	r3, [r3, #12]
 8019fba:	b292      	uxth	r2, r2
 8019fbc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fc2:	b29a      	uxth	r2, r3
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019fc8:	4413      	add	r3, r2
 8019fca:	b299      	uxth	r1, r3
 8019fcc:	4b3c      	ldr	r3, [pc, #240]	; (801a0c0 <tcp_receive+0xf14>)
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	b29a      	uxth	r2, r3
 8019fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	1a8a      	subs	r2, r1, r2
 8019fd8:	b292      	uxth	r2, r2
 8019fda:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	685a      	ldr	r2, [r3, #4]
 8019fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	891b      	ldrh	r3, [r3, #8]
 8019fe8:	4619      	mov	r1, r3
 8019fea:	4610      	mov	r0, r2
 8019fec:	f7fb fbb6 	bl	801575c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	891c      	ldrh	r4, [r3, #8]
 8019ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	68db      	ldr	r3, [r3, #12]
 8019ffc:	899b      	ldrh	r3, [r3, #12]
 8019ffe:	b29b      	uxth	r3, r3
 801a000:	4618      	mov	r0, r3
 801a002:	f7fa f94f 	bl	80142a4 <lwip_htons>
 801a006:	4603      	mov	r3, r0
 801a008:	b2db      	uxtb	r3, r3
 801a00a:	f003 0303 	and.w	r3, r3, #3
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d001      	beq.n	801a016 <tcp_receive+0xe6a>
 801a012:	2301      	movs	r3, #1
 801a014:	e000      	b.n	801a018 <tcp_receive+0xe6c>
 801a016:	2300      	movs	r3, #0
 801a018:	4423      	add	r3, r4
 801a01a:	b29a      	uxth	r2, r3
 801a01c:	4b2a      	ldr	r3, [pc, #168]	; (801a0c8 <tcp_receive+0xf1c>)
 801a01e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a020:	4b29      	ldr	r3, [pc, #164]	; (801a0c8 <tcp_receive+0xf1c>)
 801a022:	881b      	ldrh	r3, [r3, #0]
 801a024:	461a      	mov	r2, r3
 801a026:	4b26      	ldr	r3, [pc, #152]	; (801a0c0 <tcp_receive+0xf14>)
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	441a      	add	r2, r3
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a030:	6879      	ldr	r1, [r7, #4]
 801a032:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a034:	440b      	add	r3, r1
 801a036:	429a      	cmp	r2, r3
 801a038:	d019      	beq.n	801a06e <tcp_receive+0xec2>
 801a03a:	4b24      	ldr	r3, [pc, #144]	; (801a0cc <tcp_receive+0xf20>)
 801a03c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801a040:	4923      	ldr	r1, [pc, #140]	; (801a0d0 <tcp_receive+0xf24>)
 801a042:	4824      	ldr	r0, [pc, #144]	; (801a0d4 <tcp_receive+0xf28>)
 801a044:	f004 ff82 	bl	801ef4c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a048:	e011      	b.n	801a06e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	63bb      	str	r3, [r7, #56]	; 0x38
 801a050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a052:	2b00      	cmp	r3, #0
 801a054:	f47f aea4 	bne.w	8019da0 <tcp_receive+0xbf4>
 801a058:	e00a      	b.n	801a070 <tcp_receive+0xec4>
                break;
 801a05a:	bf00      	nop
 801a05c:	e008      	b.n	801a070 <tcp_receive+0xec4>
                break;
 801a05e:	bf00      	nop
 801a060:	e006      	b.n	801a070 <tcp_receive+0xec4>
                  break;
 801a062:	bf00      	nop
 801a064:	e004      	b.n	801a070 <tcp_receive+0xec4>
                  break;
 801a066:	bf00      	nop
 801a068:	e002      	b.n	801a070 <tcp_receive+0xec4>
                  break;
 801a06a:	bf00      	nop
 801a06c:	e000      	b.n	801a070 <tcp_receive+0xec4>
                break;
 801a06e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a070:	6878      	ldr	r0, [r7, #4]
 801a072:	f001 fe8b 	bl	801bd8c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a076:	e003      	b.n	801a080 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a078:	6878      	ldr	r0, [r7, #4]
 801a07a:	f001 fe87 	bl	801bd8c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a07e:	e01a      	b.n	801a0b6 <tcp_receive+0xf0a>
 801a080:	e019      	b.n	801a0b6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a082:	4b0f      	ldr	r3, [pc, #60]	; (801a0c0 <tcp_receive+0xf14>)
 801a084:	681a      	ldr	r2, [r3, #0]
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a08a:	1ad3      	subs	r3, r2, r3
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	db0a      	blt.n	801a0a6 <tcp_receive+0xefa>
 801a090:	4b0b      	ldr	r3, [pc, #44]	; (801a0c0 <tcp_receive+0xf14>)
 801a092:	681a      	ldr	r2, [r3, #0]
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a098:	6879      	ldr	r1, [r7, #4]
 801a09a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a09c:	440b      	add	r3, r1
 801a09e:	1ad3      	subs	r3, r2, r3
 801a0a0:	3301      	adds	r3, #1
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	dd07      	ble.n	801a0b6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	8b5b      	ldrh	r3, [r3, #26]
 801a0aa:	f043 0302 	orr.w	r3, r3, #2
 801a0ae:	b29a      	uxth	r2, r3
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a0b4:	e7ff      	b.n	801a0b6 <tcp_receive+0xf0a>
 801a0b6:	bf00      	nop
 801a0b8:	3750      	adds	r7, #80	; 0x50
 801a0ba:	46bd      	mov	sp, r7
 801a0bc:	bdb0      	pop	{r4, r5, r7, pc}
 801a0be:	bf00      	nop
 801a0c0:	2000c81c 	.word	0x2000c81c
 801a0c4:	2000c7fc 	.word	0x2000c7fc
 801a0c8:	2000c826 	.word	0x2000c826
 801a0cc:	08022694 	.word	0x08022694
 801a0d0:	08022a3c 	.word	0x08022a3c
 801a0d4:	080226e0 	.word	0x080226e0

0801a0d8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a0d8:	b480      	push	{r7}
 801a0da:	b083      	sub	sp, #12
 801a0dc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a0de:	4b15      	ldr	r3, [pc, #84]	; (801a134 <tcp_get_next_optbyte+0x5c>)
 801a0e0:	881b      	ldrh	r3, [r3, #0]
 801a0e2:	1c5a      	adds	r2, r3, #1
 801a0e4:	b291      	uxth	r1, r2
 801a0e6:	4a13      	ldr	r2, [pc, #76]	; (801a134 <tcp_get_next_optbyte+0x5c>)
 801a0e8:	8011      	strh	r1, [r2, #0]
 801a0ea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a0ec:	4b12      	ldr	r3, [pc, #72]	; (801a138 <tcp_get_next_optbyte+0x60>)
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d004      	beq.n	801a0fe <tcp_get_next_optbyte+0x26>
 801a0f4:	4b11      	ldr	r3, [pc, #68]	; (801a13c <tcp_get_next_optbyte+0x64>)
 801a0f6:	881b      	ldrh	r3, [r3, #0]
 801a0f8:	88fa      	ldrh	r2, [r7, #6]
 801a0fa:	429a      	cmp	r2, r3
 801a0fc:	d208      	bcs.n	801a110 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a0fe:	4b10      	ldr	r3, [pc, #64]	; (801a140 <tcp_get_next_optbyte+0x68>)
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	3314      	adds	r3, #20
 801a104:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a106:	88fb      	ldrh	r3, [r7, #6]
 801a108:	683a      	ldr	r2, [r7, #0]
 801a10a:	4413      	add	r3, r2
 801a10c:	781b      	ldrb	r3, [r3, #0]
 801a10e:	e00b      	b.n	801a128 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a110:	88fb      	ldrh	r3, [r7, #6]
 801a112:	b2da      	uxtb	r2, r3
 801a114:	4b09      	ldr	r3, [pc, #36]	; (801a13c <tcp_get_next_optbyte+0x64>)
 801a116:	881b      	ldrh	r3, [r3, #0]
 801a118:	b2db      	uxtb	r3, r3
 801a11a:	1ad3      	subs	r3, r2, r3
 801a11c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a11e:	4b06      	ldr	r3, [pc, #24]	; (801a138 <tcp_get_next_optbyte+0x60>)
 801a120:	681a      	ldr	r2, [r3, #0]
 801a122:	797b      	ldrb	r3, [r7, #5]
 801a124:	4413      	add	r3, r2
 801a126:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a128:	4618      	mov	r0, r3
 801a12a:	370c      	adds	r7, #12
 801a12c:	46bd      	mov	sp, r7
 801a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a132:	4770      	bx	lr
 801a134:	2000c818 	.word	0x2000c818
 801a138:	2000c814 	.word	0x2000c814
 801a13c:	2000c812 	.word	0x2000c812
 801a140:	2000c80c 	.word	0x2000c80c

0801a144 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a144:	b580      	push	{r7, lr}
 801a146:	b084      	sub	sp, #16
 801a148:	af00      	add	r7, sp, #0
 801a14a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d106      	bne.n	801a160 <tcp_parseopt+0x1c>
 801a152:	4b32      	ldr	r3, [pc, #200]	; (801a21c <tcp_parseopt+0xd8>)
 801a154:	f240 727d 	movw	r2, #1917	; 0x77d
 801a158:	4931      	ldr	r1, [pc, #196]	; (801a220 <tcp_parseopt+0xdc>)
 801a15a:	4832      	ldr	r0, [pc, #200]	; (801a224 <tcp_parseopt+0xe0>)
 801a15c:	f004 fef6 	bl	801ef4c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a160:	4b31      	ldr	r3, [pc, #196]	; (801a228 <tcp_parseopt+0xe4>)
 801a162:	881b      	ldrh	r3, [r3, #0]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d055      	beq.n	801a214 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a168:	4b30      	ldr	r3, [pc, #192]	; (801a22c <tcp_parseopt+0xe8>)
 801a16a:	2200      	movs	r2, #0
 801a16c:	801a      	strh	r2, [r3, #0]
 801a16e:	e045      	b.n	801a1fc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801a170:	f7ff ffb2 	bl	801a0d8 <tcp_get_next_optbyte>
 801a174:	4603      	mov	r3, r0
 801a176:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a178:	7bfb      	ldrb	r3, [r7, #15]
 801a17a:	2b02      	cmp	r3, #2
 801a17c:	d006      	beq.n	801a18c <tcp_parseopt+0x48>
 801a17e:	2b02      	cmp	r3, #2
 801a180:	dc2b      	bgt.n	801a1da <tcp_parseopt+0x96>
 801a182:	2b00      	cmp	r3, #0
 801a184:	d041      	beq.n	801a20a <tcp_parseopt+0xc6>
 801a186:	2b01      	cmp	r3, #1
 801a188:	d127      	bne.n	801a1da <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801a18a:	e037      	b.n	801a1fc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a18c:	f7ff ffa4 	bl	801a0d8 <tcp_get_next_optbyte>
 801a190:	4603      	mov	r3, r0
 801a192:	2b04      	cmp	r3, #4
 801a194:	d13b      	bne.n	801a20e <tcp_parseopt+0xca>
 801a196:	4b25      	ldr	r3, [pc, #148]	; (801a22c <tcp_parseopt+0xe8>)
 801a198:	881b      	ldrh	r3, [r3, #0]
 801a19a:	3301      	adds	r3, #1
 801a19c:	4a22      	ldr	r2, [pc, #136]	; (801a228 <tcp_parseopt+0xe4>)
 801a19e:	8812      	ldrh	r2, [r2, #0]
 801a1a0:	4293      	cmp	r3, r2
 801a1a2:	da34      	bge.n	801a20e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a1a4:	f7ff ff98 	bl	801a0d8 <tcp_get_next_optbyte>
 801a1a8:	4603      	mov	r3, r0
 801a1aa:	b29b      	uxth	r3, r3
 801a1ac:	021b      	lsls	r3, r3, #8
 801a1ae:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a1b0:	f7ff ff92 	bl	801a0d8 <tcp_get_next_optbyte>
 801a1b4:	4603      	mov	r3, r0
 801a1b6:	b29a      	uxth	r2, r3
 801a1b8:	89bb      	ldrh	r3, [r7, #12]
 801a1ba:	4313      	orrs	r3, r2
 801a1bc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a1be:	89bb      	ldrh	r3, [r7, #12]
 801a1c0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a1c4:	d804      	bhi.n	801a1d0 <tcp_parseopt+0x8c>
 801a1c6:	89bb      	ldrh	r3, [r7, #12]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d001      	beq.n	801a1d0 <tcp_parseopt+0x8c>
 801a1cc:	89ba      	ldrh	r2, [r7, #12]
 801a1ce:	e001      	b.n	801a1d4 <tcp_parseopt+0x90>
 801a1d0:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801a1d8:	e010      	b.n	801a1fc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a1da:	f7ff ff7d 	bl	801a0d8 <tcp_get_next_optbyte>
 801a1de:	4603      	mov	r3, r0
 801a1e0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a1e2:	7afb      	ldrb	r3, [r7, #11]
 801a1e4:	2b01      	cmp	r3, #1
 801a1e6:	d914      	bls.n	801a212 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a1e8:	7afb      	ldrb	r3, [r7, #11]
 801a1ea:	b29a      	uxth	r2, r3
 801a1ec:	4b0f      	ldr	r3, [pc, #60]	; (801a22c <tcp_parseopt+0xe8>)
 801a1ee:	881b      	ldrh	r3, [r3, #0]
 801a1f0:	4413      	add	r3, r2
 801a1f2:	b29b      	uxth	r3, r3
 801a1f4:	3b02      	subs	r3, #2
 801a1f6:	b29a      	uxth	r2, r3
 801a1f8:	4b0c      	ldr	r3, [pc, #48]	; (801a22c <tcp_parseopt+0xe8>)
 801a1fa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a1fc:	4b0b      	ldr	r3, [pc, #44]	; (801a22c <tcp_parseopt+0xe8>)
 801a1fe:	881a      	ldrh	r2, [r3, #0]
 801a200:	4b09      	ldr	r3, [pc, #36]	; (801a228 <tcp_parseopt+0xe4>)
 801a202:	881b      	ldrh	r3, [r3, #0]
 801a204:	429a      	cmp	r2, r3
 801a206:	d3b3      	bcc.n	801a170 <tcp_parseopt+0x2c>
 801a208:	e004      	b.n	801a214 <tcp_parseopt+0xd0>
          return;
 801a20a:	bf00      	nop
 801a20c:	e002      	b.n	801a214 <tcp_parseopt+0xd0>
            return;
 801a20e:	bf00      	nop
 801a210:	e000      	b.n	801a214 <tcp_parseopt+0xd0>
            return;
 801a212:	bf00      	nop
      }
    }
  }
}
 801a214:	3710      	adds	r7, #16
 801a216:	46bd      	mov	sp, r7
 801a218:	bd80      	pop	{r7, pc}
 801a21a:	bf00      	nop
 801a21c:	08022694 	.word	0x08022694
 801a220:	08022af8 	.word	0x08022af8
 801a224:	080226e0 	.word	0x080226e0
 801a228:	2000c810 	.word	0x2000c810
 801a22c:	2000c818 	.word	0x2000c818

0801a230 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a230:	b480      	push	{r7}
 801a232:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a234:	4b05      	ldr	r3, [pc, #20]	; (801a24c <tcp_trigger_input_pcb_close+0x1c>)
 801a236:	781b      	ldrb	r3, [r3, #0]
 801a238:	f043 0310 	orr.w	r3, r3, #16
 801a23c:	b2da      	uxtb	r2, r3
 801a23e:	4b03      	ldr	r3, [pc, #12]	; (801a24c <tcp_trigger_input_pcb_close+0x1c>)
 801a240:	701a      	strb	r2, [r3, #0]
}
 801a242:	bf00      	nop
 801a244:	46bd      	mov	sp, r7
 801a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a24a:	4770      	bx	lr
 801a24c:	2000c829 	.word	0x2000c829

0801a250 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a250:	b580      	push	{r7, lr}
 801a252:	b084      	sub	sp, #16
 801a254:	af00      	add	r7, sp, #0
 801a256:	60f8      	str	r0, [r7, #12]
 801a258:	60b9      	str	r1, [r7, #8]
 801a25a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d00a      	beq.n	801a278 <tcp_route+0x28>
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	7a1b      	ldrb	r3, [r3, #8]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d006      	beq.n	801a278 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	7a1b      	ldrb	r3, [r3, #8]
 801a26e:	4618      	mov	r0, r3
 801a270:	f7fb f86c 	bl	801534c <netif_get_by_index>
 801a274:	4603      	mov	r3, r0
 801a276:	e003      	b.n	801a280 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a278:	6878      	ldr	r0, [r7, #4]
 801a27a:	f003 fb05 	bl	801d888 <ip4_route>
 801a27e:	4603      	mov	r3, r0
  }
}
 801a280:	4618      	mov	r0, r3
 801a282:	3710      	adds	r7, #16
 801a284:	46bd      	mov	sp, r7
 801a286:	bd80      	pop	{r7, pc}

0801a288 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a288:	b590      	push	{r4, r7, lr}
 801a28a:	b087      	sub	sp, #28
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	60f8      	str	r0, [r7, #12]
 801a290:	60b9      	str	r1, [r7, #8]
 801a292:	603b      	str	r3, [r7, #0]
 801a294:	4613      	mov	r3, r2
 801a296:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a298:	68fb      	ldr	r3, [r7, #12]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d105      	bne.n	801a2aa <tcp_create_segment+0x22>
 801a29e:	4b44      	ldr	r3, [pc, #272]	; (801a3b0 <tcp_create_segment+0x128>)
 801a2a0:	22a3      	movs	r2, #163	; 0xa3
 801a2a2:	4944      	ldr	r1, [pc, #272]	; (801a3b4 <tcp_create_segment+0x12c>)
 801a2a4:	4844      	ldr	r0, [pc, #272]	; (801a3b8 <tcp_create_segment+0x130>)
 801a2a6:	f004 fe51 	bl	801ef4c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a2aa:	68bb      	ldr	r3, [r7, #8]
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d105      	bne.n	801a2bc <tcp_create_segment+0x34>
 801a2b0:	4b3f      	ldr	r3, [pc, #252]	; (801a3b0 <tcp_create_segment+0x128>)
 801a2b2:	22a4      	movs	r2, #164	; 0xa4
 801a2b4:	4941      	ldr	r1, [pc, #260]	; (801a3bc <tcp_create_segment+0x134>)
 801a2b6:	4840      	ldr	r0, [pc, #256]	; (801a3b8 <tcp_create_segment+0x130>)
 801a2b8:	f004 fe48 	bl	801ef4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a2bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a2c0:	009b      	lsls	r3, r3, #2
 801a2c2:	b2db      	uxtb	r3, r3
 801a2c4:	f003 0304 	and.w	r3, r3, #4
 801a2c8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a2ca:	2003      	movs	r0, #3
 801a2cc:	f7fa fcd6 	bl	8014c7c <memp_malloc>
 801a2d0:	6138      	str	r0, [r7, #16]
 801a2d2:	693b      	ldr	r3, [r7, #16]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d104      	bne.n	801a2e2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a2d8:	68b8      	ldr	r0, [r7, #8]
 801a2da:	f7fb fbd7 	bl	8015a8c <pbuf_free>
    return NULL;
 801a2de:	2300      	movs	r3, #0
 801a2e0:	e061      	b.n	801a3a6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801a2e2:	693b      	ldr	r3, [r7, #16]
 801a2e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a2e8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a2ea:	693b      	ldr	r3, [r7, #16]
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a2f0:	693b      	ldr	r3, [r7, #16]
 801a2f2:	68ba      	ldr	r2, [r7, #8]
 801a2f4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a2f6:	68bb      	ldr	r3, [r7, #8]
 801a2f8:	891a      	ldrh	r2, [r3, #8]
 801a2fa:	7dfb      	ldrb	r3, [r7, #23]
 801a2fc:	b29b      	uxth	r3, r3
 801a2fe:	429a      	cmp	r2, r3
 801a300:	d205      	bcs.n	801a30e <tcp_create_segment+0x86>
 801a302:	4b2b      	ldr	r3, [pc, #172]	; (801a3b0 <tcp_create_segment+0x128>)
 801a304:	22b0      	movs	r2, #176	; 0xb0
 801a306:	492e      	ldr	r1, [pc, #184]	; (801a3c0 <tcp_create_segment+0x138>)
 801a308:	482b      	ldr	r0, [pc, #172]	; (801a3b8 <tcp_create_segment+0x130>)
 801a30a:	f004 fe1f 	bl	801ef4c <iprintf>
  seg->len = p->tot_len - optlen;
 801a30e:	68bb      	ldr	r3, [r7, #8]
 801a310:	891a      	ldrh	r2, [r3, #8]
 801a312:	7dfb      	ldrb	r3, [r7, #23]
 801a314:	b29b      	uxth	r3, r3
 801a316:	1ad3      	subs	r3, r2, r3
 801a318:	b29a      	uxth	r2, r3
 801a31a:	693b      	ldr	r3, [r7, #16]
 801a31c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a31e:	2114      	movs	r1, #20
 801a320:	68b8      	ldr	r0, [r7, #8]
 801a322:	f7fb fb0b 	bl	801593c <pbuf_add_header>
 801a326:	4603      	mov	r3, r0
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d004      	beq.n	801a336 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a32c:	6938      	ldr	r0, [r7, #16]
 801a32e:	f7fc ffe6 	bl	80172fe <tcp_seg_free>
    return NULL;
 801a332:	2300      	movs	r3, #0
 801a334:	e037      	b.n	801a3a6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a336:	693b      	ldr	r3, [r7, #16]
 801a338:	685b      	ldr	r3, [r3, #4]
 801a33a:	685a      	ldr	r2, [r3, #4]
 801a33c:	693b      	ldr	r3, [r7, #16]
 801a33e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	8ada      	ldrh	r2, [r3, #22]
 801a344:	693b      	ldr	r3, [r7, #16]
 801a346:	68dc      	ldr	r4, [r3, #12]
 801a348:	4610      	mov	r0, r2
 801a34a:	f7f9 ffab 	bl	80142a4 <lwip_htons>
 801a34e:	4603      	mov	r3, r0
 801a350:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	8b1a      	ldrh	r2, [r3, #24]
 801a356:	693b      	ldr	r3, [r7, #16]
 801a358:	68dc      	ldr	r4, [r3, #12]
 801a35a:	4610      	mov	r0, r2
 801a35c:	f7f9 ffa2 	bl	80142a4 <lwip_htons>
 801a360:	4603      	mov	r3, r0
 801a362:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a364:	693b      	ldr	r3, [r7, #16]
 801a366:	68dc      	ldr	r4, [r3, #12]
 801a368:	6838      	ldr	r0, [r7, #0]
 801a36a:	f7f9 ffb0 	bl	80142ce <lwip_htonl>
 801a36e:	4603      	mov	r3, r0
 801a370:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a372:	7dfb      	ldrb	r3, [r7, #23]
 801a374:	089b      	lsrs	r3, r3, #2
 801a376:	b2db      	uxtb	r3, r3
 801a378:	b29b      	uxth	r3, r3
 801a37a:	3305      	adds	r3, #5
 801a37c:	b29b      	uxth	r3, r3
 801a37e:	031b      	lsls	r3, r3, #12
 801a380:	b29a      	uxth	r2, r3
 801a382:	79fb      	ldrb	r3, [r7, #7]
 801a384:	b29b      	uxth	r3, r3
 801a386:	4313      	orrs	r3, r2
 801a388:	b29a      	uxth	r2, r3
 801a38a:	693b      	ldr	r3, [r7, #16]
 801a38c:	68dc      	ldr	r4, [r3, #12]
 801a38e:	4610      	mov	r0, r2
 801a390:	f7f9 ff88 	bl	80142a4 <lwip_htons>
 801a394:	4603      	mov	r3, r0
 801a396:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a398:	693b      	ldr	r3, [r7, #16]
 801a39a:	68db      	ldr	r3, [r3, #12]
 801a39c:	2200      	movs	r2, #0
 801a39e:	749a      	strb	r2, [r3, #18]
 801a3a0:	2200      	movs	r2, #0
 801a3a2:	74da      	strb	r2, [r3, #19]
  return seg;
 801a3a4:	693b      	ldr	r3, [r7, #16]
}
 801a3a6:	4618      	mov	r0, r3
 801a3a8:	371c      	adds	r7, #28
 801a3aa:	46bd      	mov	sp, r7
 801a3ac:	bd90      	pop	{r4, r7, pc}
 801a3ae:	bf00      	nop
 801a3b0:	08022b14 	.word	0x08022b14
 801a3b4:	08022b48 	.word	0x08022b48
 801a3b8:	08022b68 	.word	0x08022b68
 801a3bc:	08022b90 	.word	0x08022b90
 801a3c0:	08022bb4 	.word	0x08022bb4

0801a3c4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a3c4:	b580      	push	{r7, lr}
 801a3c6:	b086      	sub	sp, #24
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	607b      	str	r3, [r7, #4]
 801a3cc:	4603      	mov	r3, r0
 801a3ce:	73fb      	strb	r3, [r7, #15]
 801a3d0:	460b      	mov	r3, r1
 801a3d2:	81bb      	strh	r3, [r7, #12]
 801a3d4:	4613      	mov	r3, r2
 801a3d6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a3d8:	89bb      	ldrh	r3, [r7, #12]
 801a3da:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d105      	bne.n	801a3ee <tcp_pbuf_prealloc+0x2a>
 801a3e2:	4b30      	ldr	r3, [pc, #192]	; (801a4a4 <tcp_pbuf_prealloc+0xe0>)
 801a3e4:	22e8      	movs	r2, #232	; 0xe8
 801a3e6:	4930      	ldr	r1, [pc, #192]	; (801a4a8 <tcp_pbuf_prealloc+0xe4>)
 801a3e8:	4830      	ldr	r0, [pc, #192]	; (801a4ac <tcp_pbuf_prealloc+0xe8>)
 801a3ea:	f004 fdaf 	bl	801ef4c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a3ee:	6a3b      	ldr	r3, [r7, #32]
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d105      	bne.n	801a400 <tcp_pbuf_prealloc+0x3c>
 801a3f4:	4b2b      	ldr	r3, [pc, #172]	; (801a4a4 <tcp_pbuf_prealloc+0xe0>)
 801a3f6:	22e9      	movs	r2, #233	; 0xe9
 801a3f8:	492d      	ldr	r1, [pc, #180]	; (801a4b0 <tcp_pbuf_prealloc+0xec>)
 801a3fa:	482c      	ldr	r0, [pc, #176]	; (801a4ac <tcp_pbuf_prealloc+0xe8>)
 801a3fc:	f004 fda6 	bl	801ef4c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801a400:	89ba      	ldrh	r2, [r7, #12]
 801a402:	897b      	ldrh	r3, [r7, #10]
 801a404:	429a      	cmp	r2, r3
 801a406:	d221      	bcs.n	801a44c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a408:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a40c:	f003 0302 	and.w	r3, r3, #2
 801a410:	2b00      	cmp	r3, #0
 801a412:	d111      	bne.n	801a438 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801a414:	6a3b      	ldr	r3, [r7, #32]
 801a416:	8b5b      	ldrh	r3, [r3, #26]
 801a418:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d115      	bne.n	801a44c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801a420:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a424:	2b00      	cmp	r3, #0
 801a426:	d007      	beq.n	801a438 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a428:	6a3b      	ldr	r3, [r7, #32]
 801a42a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	d103      	bne.n	801a438 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801a430:	6a3b      	ldr	r3, [r7, #32]
 801a432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801a434:	2b00      	cmp	r3, #0
 801a436:	d009      	beq.n	801a44c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a438:	89bb      	ldrh	r3, [r7, #12]
 801a43a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801a43e:	f023 0203 	bic.w	r2, r3, #3
 801a442:	897b      	ldrh	r3, [r7, #10]
 801a444:	4293      	cmp	r3, r2
 801a446:	bf28      	it	cs
 801a448:	4613      	movcs	r3, r2
 801a44a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801a44c:	8af9      	ldrh	r1, [r7, #22]
 801a44e:	7bfb      	ldrb	r3, [r7, #15]
 801a450:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a454:	4618      	mov	r0, r3
 801a456:	f7fb f823 	bl	80154a0 <pbuf_alloc>
 801a45a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a45c:	693b      	ldr	r3, [r7, #16]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d101      	bne.n	801a466 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801a462:	2300      	movs	r3, #0
 801a464:	e019      	b.n	801a49a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801a466:	693b      	ldr	r3, [r7, #16]
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d006      	beq.n	801a47c <tcp_pbuf_prealloc+0xb8>
 801a46e:	4b0d      	ldr	r3, [pc, #52]	; (801a4a4 <tcp_pbuf_prealloc+0xe0>)
 801a470:	f240 120b 	movw	r2, #267	; 0x10b
 801a474:	490f      	ldr	r1, [pc, #60]	; (801a4b4 <tcp_pbuf_prealloc+0xf0>)
 801a476:	480d      	ldr	r0, [pc, #52]	; (801a4ac <tcp_pbuf_prealloc+0xe8>)
 801a478:	f004 fd68 	bl	801ef4c <iprintf>
  *oversize = p->len - length;
 801a47c:	693b      	ldr	r3, [r7, #16]
 801a47e:	895a      	ldrh	r2, [r3, #10]
 801a480:	89bb      	ldrh	r3, [r7, #12]
 801a482:	1ad3      	subs	r3, r2, r3
 801a484:	b29a      	uxth	r2, r3
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801a48a:	693b      	ldr	r3, [r7, #16]
 801a48c:	89ba      	ldrh	r2, [r7, #12]
 801a48e:	811a      	strh	r2, [r3, #8]
 801a490:	693b      	ldr	r3, [r7, #16]
 801a492:	891a      	ldrh	r2, [r3, #8]
 801a494:	693b      	ldr	r3, [r7, #16]
 801a496:	815a      	strh	r2, [r3, #10]
  return p;
 801a498:	693b      	ldr	r3, [r7, #16]
}
 801a49a:	4618      	mov	r0, r3
 801a49c:	3718      	adds	r7, #24
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	bd80      	pop	{r7, pc}
 801a4a2:	bf00      	nop
 801a4a4:	08022b14 	.word	0x08022b14
 801a4a8:	08022bcc 	.word	0x08022bcc
 801a4ac:	08022b68 	.word	0x08022b68
 801a4b0:	08022bf0 	.word	0x08022bf0
 801a4b4:	08022c10 	.word	0x08022c10

0801a4b8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b082      	sub	sp, #8
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
 801a4c0:	460b      	mov	r3, r1
 801a4c2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d106      	bne.n	801a4d8 <tcp_write_checks+0x20>
 801a4ca:	4b33      	ldr	r3, [pc, #204]	; (801a598 <tcp_write_checks+0xe0>)
 801a4cc:	f240 1233 	movw	r2, #307	; 0x133
 801a4d0:	4932      	ldr	r1, [pc, #200]	; (801a59c <tcp_write_checks+0xe4>)
 801a4d2:	4833      	ldr	r0, [pc, #204]	; (801a5a0 <tcp_write_checks+0xe8>)
 801a4d4:	f004 fd3a 	bl	801ef4c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	7d1b      	ldrb	r3, [r3, #20]
 801a4dc:	2b04      	cmp	r3, #4
 801a4de:	d00e      	beq.n	801a4fe <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801a4e4:	2b07      	cmp	r3, #7
 801a4e6:	d00a      	beq.n	801a4fe <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801a4ec:	2b02      	cmp	r3, #2
 801a4ee:	d006      	beq.n	801a4fe <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801a4f4:	2b03      	cmp	r3, #3
 801a4f6:	d002      	beq.n	801a4fe <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801a4f8:	f06f 030a 	mvn.w	r3, #10
 801a4fc:	e048      	b.n	801a590 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801a4fe:	887b      	ldrh	r3, [r7, #2]
 801a500:	2b00      	cmp	r3, #0
 801a502:	d101      	bne.n	801a508 <tcp_write_checks+0x50>
    return ERR_OK;
 801a504:	2300      	movs	r3, #0
 801a506:	e043      	b.n	801a590 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a50e:	887a      	ldrh	r2, [r7, #2]
 801a510:	429a      	cmp	r2, r3
 801a512:	d909      	bls.n	801a528 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	8b5b      	ldrh	r3, [r3, #26]
 801a518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a51c:	b29a      	uxth	r2, r3
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a522:	f04f 33ff 	mov.w	r3, #4294967295
 801a526:	e033      	b.n	801a590 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a52e:	2b08      	cmp	r3, #8
 801a530:	d909      	bls.n	801a546 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	8b5b      	ldrh	r3, [r3, #26]
 801a536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a53a:	b29a      	uxth	r2, r3
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a540:	f04f 33ff 	mov.w	r3, #4294967295
 801a544:	e024      	b.n	801a590 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d00f      	beq.n	801a570 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a554:	2b00      	cmp	r3, #0
 801a556:	d11a      	bne.n	801a58e <tcp_write_checks+0xd6>
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d116      	bne.n	801a58e <tcp_write_checks+0xd6>
 801a560:	4b0d      	ldr	r3, [pc, #52]	; (801a598 <tcp_write_checks+0xe0>)
 801a562:	f240 1255 	movw	r2, #341	; 0x155
 801a566:	490f      	ldr	r1, [pc, #60]	; (801a5a4 <tcp_write_checks+0xec>)
 801a568:	480d      	ldr	r0, [pc, #52]	; (801a5a0 <tcp_write_checks+0xe8>)
 801a56a:	f004 fcef 	bl	801ef4c <iprintf>
 801a56e:	e00e      	b.n	801a58e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a574:	2b00      	cmp	r3, #0
 801a576:	d103      	bne.n	801a580 <tcp_write_checks+0xc8>
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d006      	beq.n	801a58e <tcp_write_checks+0xd6>
 801a580:	4b05      	ldr	r3, [pc, #20]	; (801a598 <tcp_write_checks+0xe0>)
 801a582:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801a586:	4908      	ldr	r1, [pc, #32]	; (801a5a8 <tcp_write_checks+0xf0>)
 801a588:	4805      	ldr	r0, [pc, #20]	; (801a5a0 <tcp_write_checks+0xe8>)
 801a58a:	f004 fcdf 	bl	801ef4c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801a58e:	2300      	movs	r3, #0
}
 801a590:	4618      	mov	r0, r3
 801a592:	3708      	adds	r7, #8
 801a594:	46bd      	mov	sp, r7
 801a596:	bd80      	pop	{r7, pc}
 801a598:	08022b14 	.word	0x08022b14
 801a59c:	08022c24 	.word	0x08022c24
 801a5a0:	08022b68 	.word	0x08022b68
 801a5a4:	08022c44 	.word	0x08022c44
 801a5a8:	08022c80 	.word	0x08022c80

0801a5ac <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801a5ac:	b590      	push	{r4, r7, lr}
 801a5ae:	b09b      	sub	sp, #108	; 0x6c
 801a5b0:	af04      	add	r7, sp, #16
 801a5b2:	60f8      	str	r0, [r7, #12]
 801a5b4:	60b9      	str	r1, [r7, #8]
 801a5b6:	4611      	mov	r1, r2
 801a5b8:	461a      	mov	r2, r3
 801a5ba:	460b      	mov	r3, r1
 801a5bc:	80fb      	strh	r3, [r7, #6]
 801a5be:	4613      	mov	r3, r2
 801a5c0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a5c6:	2300      	movs	r3, #0
 801a5c8:	653b      	str	r3, [r7, #80]	; 0x50
 801a5ca:	2300      	movs	r3, #0
 801a5cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a5ce:	2300      	movs	r3, #0
 801a5d0:	64bb      	str	r3, [r7, #72]	; 0x48
 801a5d2:	2300      	movs	r3, #0
 801a5d4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801a5d6:	2300      	movs	r3, #0
 801a5d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801a5dc:	2300      	movs	r3, #0
 801a5de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801a5e6:	2300      	movs	r3, #0
 801a5e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801a5ea:	2300      	movs	r3, #0
 801a5ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d109      	bne.n	801a608 <tcp_write+0x5c>
 801a5f4:	4ba4      	ldr	r3, [pc, #656]	; (801a888 <tcp_write+0x2dc>)
 801a5f6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801a5fa:	49a4      	ldr	r1, [pc, #656]	; (801a88c <tcp_write+0x2e0>)
 801a5fc:	48a4      	ldr	r0, [pc, #656]	; (801a890 <tcp_write+0x2e4>)
 801a5fe:	f004 fca5 	bl	801ef4c <iprintf>
 801a602:	f06f 030f 	mvn.w	r3, #15
 801a606:	e32a      	b.n	801ac5e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801a60e:	085b      	lsrs	r3, r3, #1
 801a610:	b29a      	uxth	r2, r3
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a616:	4293      	cmp	r3, r2
 801a618:	bf28      	it	cs
 801a61a:	4613      	movcs	r3, r2
 801a61c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801a61e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a620:	2b00      	cmp	r3, #0
 801a622:	d102      	bne.n	801a62a <tcp_write+0x7e>
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a628:	e000      	b.n	801a62c <tcp_write+0x80>
 801a62a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a62c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801a62e:	68bb      	ldr	r3, [r7, #8]
 801a630:	2b00      	cmp	r3, #0
 801a632:	d109      	bne.n	801a648 <tcp_write+0x9c>
 801a634:	4b94      	ldr	r3, [pc, #592]	; (801a888 <tcp_write+0x2dc>)
 801a636:	f240 12ad 	movw	r2, #429	; 0x1ad
 801a63a:	4996      	ldr	r1, [pc, #600]	; (801a894 <tcp_write+0x2e8>)
 801a63c:	4894      	ldr	r0, [pc, #592]	; (801a890 <tcp_write+0x2e4>)
 801a63e:	f004 fc85 	bl	801ef4c <iprintf>
 801a642:	f06f 030f 	mvn.w	r3, #15
 801a646:	e30a      	b.n	801ac5e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801a648:	88fb      	ldrh	r3, [r7, #6]
 801a64a:	4619      	mov	r1, r3
 801a64c:	68f8      	ldr	r0, [r7, #12]
 801a64e:	f7ff ff33 	bl	801a4b8 <tcp_write_checks>
 801a652:	4603      	mov	r3, r0
 801a654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801a658:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d002      	beq.n	801a666 <tcp_write+0xba>
    return err;
 801a660:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801a664:	e2fb      	b.n	801ac5e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a66c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a670:	2300      	movs	r3, #0
 801a672:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	f000 80f6 	beq.w	801a86c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a684:	653b      	str	r3, [r7, #80]	; 0x50
 801a686:	e002      	b.n	801a68e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801a688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a68e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	2b00      	cmp	r3, #0
 801a694:	d1f8      	bne.n	801a688 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801a696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a698:	7a9b      	ldrb	r3, [r3, #10]
 801a69a:	009b      	lsls	r3, r3, #2
 801a69c:	b29b      	uxth	r3, r3
 801a69e:	f003 0304 	and.w	r3, r3, #4
 801a6a2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a6a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a6a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6a8:	891b      	ldrh	r3, [r3, #8]
 801a6aa:	4619      	mov	r1, r3
 801a6ac:	8c3b      	ldrh	r3, [r7, #32]
 801a6ae:	440b      	add	r3, r1
 801a6b0:	429a      	cmp	r2, r3
 801a6b2:	da06      	bge.n	801a6c2 <tcp_write+0x116>
 801a6b4:	4b74      	ldr	r3, [pc, #464]	; (801a888 <tcp_write+0x2dc>)
 801a6b6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a6ba:	4977      	ldr	r1, [pc, #476]	; (801a898 <tcp_write+0x2ec>)
 801a6bc:	4874      	ldr	r0, [pc, #464]	; (801a890 <tcp_write+0x2e4>)
 801a6be:	f004 fc45 	bl	801ef4c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a6c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6c4:	891a      	ldrh	r2, [r3, #8]
 801a6c6:	8c3b      	ldrh	r3, [r7, #32]
 801a6c8:	4413      	add	r3, r2
 801a6ca:	b29b      	uxth	r3, r3
 801a6cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a6ce:	1ad3      	subs	r3, r2, r3
 801a6d0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801a6d2:	68fb      	ldr	r3, [r7, #12]
 801a6d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a6d8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801a6da:	8a7b      	ldrh	r3, [r7, #18]
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d026      	beq.n	801a72e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a6e0:	8a7b      	ldrh	r3, [r7, #18]
 801a6e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a6e4:	429a      	cmp	r2, r3
 801a6e6:	d206      	bcs.n	801a6f6 <tcp_write+0x14a>
 801a6e8:	4b67      	ldr	r3, [pc, #412]	; (801a888 <tcp_write+0x2dc>)
 801a6ea:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801a6ee:	496b      	ldr	r1, [pc, #428]	; (801a89c <tcp_write+0x2f0>)
 801a6f0:	4867      	ldr	r0, [pc, #412]	; (801a890 <tcp_write+0x2e4>)
 801a6f2:	f004 fc2b 	bl	801ef4c <iprintf>
      seg = last_unsent;
 801a6f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6f8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a6fa:	8a7b      	ldrh	r3, [r7, #18]
 801a6fc:	88fa      	ldrh	r2, [r7, #6]
 801a6fe:	4293      	cmp	r3, r2
 801a700:	bf28      	it	cs
 801a702:	4613      	movcs	r3, r2
 801a704:	b29b      	uxth	r3, r3
 801a706:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a708:	4293      	cmp	r3, r2
 801a70a:	bf28      	it	cs
 801a70c:	4613      	movcs	r3, r2
 801a70e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801a710:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a714:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a716:	4413      	add	r3, r2
 801a718:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801a71c:	8a7a      	ldrh	r2, [r7, #18]
 801a71e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a720:	1ad3      	subs	r3, r2, r3
 801a722:	b29b      	uxth	r3, r3
 801a724:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801a726:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a728:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a72a:	1ad3      	subs	r3, r2, r3
 801a72c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a72e:	8a7b      	ldrh	r3, [r7, #18]
 801a730:	2b00      	cmp	r3, #0
 801a732:	d00b      	beq.n	801a74c <tcp_write+0x1a0>
 801a734:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a738:	88fb      	ldrh	r3, [r7, #6]
 801a73a:	429a      	cmp	r2, r3
 801a73c:	d006      	beq.n	801a74c <tcp_write+0x1a0>
 801a73e:	4b52      	ldr	r3, [pc, #328]	; (801a888 <tcp_write+0x2dc>)
 801a740:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a744:	4956      	ldr	r1, [pc, #344]	; (801a8a0 <tcp_write+0x2f4>)
 801a746:	4852      	ldr	r0, [pc, #328]	; (801a890 <tcp_write+0x2e4>)
 801a748:	f004 fc00 	bl	801ef4c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a74c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a750:	88fb      	ldrh	r3, [r7, #6]
 801a752:	429a      	cmp	r2, r3
 801a754:	f080 8167 	bcs.w	801aa26 <tcp_write+0x47a>
 801a758:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	f000 8163 	beq.w	801aa26 <tcp_write+0x47a>
 801a760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a762:	891b      	ldrh	r3, [r3, #8]
 801a764:	2b00      	cmp	r3, #0
 801a766:	f000 815e 	beq.w	801aa26 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a76a:	88fa      	ldrh	r2, [r7, #6]
 801a76c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a770:	1ad2      	subs	r2, r2, r3
 801a772:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a774:	4293      	cmp	r3, r2
 801a776:	bfa8      	it	ge
 801a778:	4613      	movge	r3, r2
 801a77a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801a77c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a77e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a780:	797b      	ldrb	r3, [r7, #5]
 801a782:	f003 0301 	and.w	r3, r3, #1
 801a786:	2b00      	cmp	r3, #0
 801a788:	d027      	beq.n	801a7da <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a78a:	f107 0012 	add.w	r0, r7, #18
 801a78e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a790:	8bf9      	ldrh	r1, [r7, #30]
 801a792:	2301      	movs	r3, #1
 801a794:	9302      	str	r3, [sp, #8]
 801a796:	797b      	ldrb	r3, [r7, #5]
 801a798:	9301      	str	r3, [sp, #4]
 801a79a:	68fb      	ldr	r3, [r7, #12]
 801a79c:	9300      	str	r3, [sp, #0]
 801a79e:	4603      	mov	r3, r0
 801a7a0:	2000      	movs	r0, #0
 801a7a2:	f7ff fe0f 	bl	801a3c4 <tcp_pbuf_prealloc>
 801a7a6:	6578      	str	r0, [r7, #84]	; 0x54
 801a7a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	f000 8225 	beq.w	801abfa <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a7b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7b2:	6858      	ldr	r0, [r3, #4]
 801a7b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a7b8:	68ba      	ldr	r2, [r7, #8]
 801a7ba:	4413      	add	r3, r2
 801a7bc:	8bfa      	ldrh	r2, [r7, #30]
 801a7be:	4619      	mov	r1, r3
 801a7c0:	f004 fb94 	bl	801eeec <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801a7c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a7c6:	f7fb f9ef 	bl	8015ba8 <pbuf_clen>
 801a7ca:	4603      	mov	r3, r0
 801a7cc:	461a      	mov	r2, r3
 801a7ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a7d2:	4413      	add	r3, r2
 801a7d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801a7d8:	e041      	b.n	801a85e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a7da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7dc:	685b      	ldr	r3, [r3, #4]
 801a7de:	637b      	str	r3, [r7, #52]	; 0x34
 801a7e0:	e002      	b.n	801a7e8 <tcp_write+0x23c>
 801a7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	637b      	str	r3, [r7, #52]	; 0x34
 801a7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d1f8      	bne.n	801a7e2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7f2:	7b1b      	ldrb	r3, [r3, #12]
 801a7f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d115      	bne.n	801a828 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7fe:	685b      	ldr	r3, [r3, #4]
 801a800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a802:	8952      	ldrh	r2, [r2, #10]
 801a804:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a806:	68ba      	ldr	r2, [r7, #8]
 801a808:	429a      	cmp	r2, r3
 801a80a:	d10d      	bne.n	801a828 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a80c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a810:	2b00      	cmp	r3, #0
 801a812:	d006      	beq.n	801a822 <tcp_write+0x276>
 801a814:	4b1c      	ldr	r3, [pc, #112]	; (801a888 <tcp_write+0x2dc>)
 801a816:	f240 2231 	movw	r2, #561	; 0x231
 801a81a:	4922      	ldr	r1, [pc, #136]	; (801a8a4 <tcp_write+0x2f8>)
 801a81c:	481c      	ldr	r0, [pc, #112]	; (801a890 <tcp_write+0x2e4>)
 801a81e:	f004 fb95 	bl	801ef4c <iprintf>
          extendlen = seglen;
 801a822:	8bfb      	ldrh	r3, [r7, #30]
 801a824:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801a826:	e01a      	b.n	801a85e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a828:	8bfb      	ldrh	r3, [r7, #30]
 801a82a:	2201      	movs	r2, #1
 801a82c:	4619      	mov	r1, r3
 801a82e:	2000      	movs	r0, #0
 801a830:	f7fa fe36 	bl	80154a0 <pbuf_alloc>
 801a834:	6578      	str	r0, [r7, #84]	; 0x54
 801a836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a838:	2b00      	cmp	r3, #0
 801a83a:	f000 81e0 	beq.w	801abfe <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a83e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a842:	68ba      	ldr	r2, [r7, #8]
 801a844:	441a      	add	r2, r3
 801a846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a848:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801a84a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a84c:	f7fb f9ac 	bl	8015ba8 <pbuf_clen>
 801a850:	4603      	mov	r3, r0
 801a852:	461a      	mov	r2, r3
 801a854:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a858:	4413      	add	r3, r2
 801a85a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801a85e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a862:	8bfb      	ldrh	r3, [r7, #30]
 801a864:	4413      	add	r3, r2
 801a866:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801a86a:	e0dc      	b.n	801aa26 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a872:	2b00      	cmp	r3, #0
 801a874:	f000 80d7 	beq.w	801aa26 <tcp_write+0x47a>
 801a878:	4b03      	ldr	r3, [pc, #12]	; (801a888 <tcp_write+0x2dc>)
 801a87a:	f240 224a 	movw	r2, #586	; 0x24a
 801a87e:	490a      	ldr	r1, [pc, #40]	; (801a8a8 <tcp_write+0x2fc>)
 801a880:	4803      	ldr	r0, [pc, #12]	; (801a890 <tcp_write+0x2e4>)
 801a882:	f004 fb63 	bl	801ef4c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801a886:	e0ce      	b.n	801aa26 <tcp_write+0x47a>
 801a888:	08022b14 	.word	0x08022b14
 801a88c:	08022cb4 	.word	0x08022cb4
 801a890:	08022b68 	.word	0x08022b68
 801a894:	08022ccc 	.word	0x08022ccc
 801a898:	08022d00 	.word	0x08022d00
 801a89c:	08022d18 	.word	0x08022d18
 801a8a0:	08022d38 	.word	0x08022d38
 801a8a4:	08022d58 	.word	0x08022d58
 801a8a8:	08022d84 	.word	0x08022d84
    struct pbuf *p;
    u16_t left = len - pos;
 801a8ac:	88fa      	ldrh	r2, [r7, #6]
 801a8ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a8b2:	1ad3      	subs	r3, r2, r3
 801a8b4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801a8b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a8ba:	b29b      	uxth	r3, r3
 801a8bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a8be:	1ad3      	subs	r3, r2, r3
 801a8c0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a8c2:	8b7a      	ldrh	r2, [r7, #26]
 801a8c4:	8bbb      	ldrh	r3, [r7, #28]
 801a8c6:	4293      	cmp	r3, r2
 801a8c8:	bf28      	it	cs
 801a8ca:	4613      	movcs	r3, r2
 801a8cc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a8ce:	797b      	ldrb	r3, [r7, #5]
 801a8d0:	f003 0301 	and.w	r3, r3, #1
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d036      	beq.n	801a946 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a8d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a8dc:	b29a      	uxth	r2, r3
 801a8de:	8b3b      	ldrh	r3, [r7, #24]
 801a8e0:	4413      	add	r3, r2
 801a8e2:	b299      	uxth	r1, r3
 801a8e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	bf0c      	ite	eq
 801a8ea:	2301      	moveq	r3, #1
 801a8ec:	2300      	movne	r3, #0
 801a8ee:	b2db      	uxtb	r3, r3
 801a8f0:	f107 0012 	add.w	r0, r7, #18
 801a8f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a8f6:	9302      	str	r3, [sp, #8]
 801a8f8:	797b      	ldrb	r3, [r7, #5]
 801a8fa:	9301      	str	r3, [sp, #4]
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	9300      	str	r3, [sp, #0]
 801a900:	4603      	mov	r3, r0
 801a902:	2036      	movs	r0, #54	; 0x36
 801a904:	f7ff fd5e 	bl	801a3c4 <tcp_pbuf_prealloc>
 801a908:	6338      	str	r0, [r7, #48]	; 0x30
 801a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	f000 8178 	beq.w	801ac02 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a914:	895b      	ldrh	r3, [r3, #10]
 801a916:	8b3a      	ldrh	r2, [r7, #24]
 801a918:	429a      	cmp	r2, r3
 801a91a:	d906      	bls.n	801a92a <tcp_write+0x37e>
 801a91c:	4b8c      	ldr	r3, [pc, #560]	; (801ab50 <tcp_write+0x5a4>)
 801a91e:	f240 2266 	movw	r2, #614	; 0x266
 801a922:	498c      	ldr	r1, [pc, #560]	; (801ab54 <tcp_write+0x5a8>)
 801a924:	488c      	ldr	r0, [pc, #560]	; (801ab58 <tcp_write+0x5ac>)
 801a926:	f004 fb11 	bl	801ef4c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a92c:	685a      	ldr	r2, [r3, #4]
 801a92e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a932:	18d0      	adds	r0, r2, r3
 801a934:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a938:	68ba      	ldr	r2, [r7, #8]
 801a93a:	4413      	add	r3, r2
 801a93c:	8b3a      	ldrh	r2, [r7, #24]
 801a93e:	4619      	mov	r1, r3
 801a940:	f004 fad4 	bl	801eeec <memcpy>
 801a944:	e02f      	b.n	801a9a6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a946:	8a7b      	ldrh	r3, [r7, #18]
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d006      	beq.n	801a95a <tcp_write+0x3ae>
 801a94c:	4b80      	ldr	r3, [pc, #512]	; (801ab50 <tcp_write+0x5a4>)
 801a94e:	f240 2271 	movw	r2, #625	; 0x271
 801a952:	4982      	ldr	r1, [pc, #520]	; (801ab5c <tcp_write+0x5b0>)
 801a954:	4880      	ldr	r0, [pc, #512]	; (801ab58 <tcp_write+0x5ac>)
 801a956:	f004 faf9 	bl	801ef4c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a95a:	8b3b      	ldrh	r3, [r7, #24]
 801a95c:	2201      	movs	r2, #1
 801a95e:	4619      	mov	r1, r3
 801a960:	2036      	movs	r0, #54	; 0x36
 801a962:	f7fa fd9d 	bl	80154a0 <pbuf_alloc>
 801a966:	6178      	str	r0, [r7, #20]
 801a968:	697b      	ldr	r3, [r7, #20]
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	f000 814b 	beq.w	801ac06 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a970:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a974:	68ba      	ldr	r2, [r7, #8]
 801a976:	441a      	add	r2, r3
 801a978:	697b      	ldr	r3, [r7, #20]
 801a97a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a97c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a980:	b29b      	uxth	r3, r3
 801a982:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a986:	4619      	mov	r1, r3
 801a988:	2036      	movs	r0, #54	; 0x36
 801a98a:	f7fa fd89 	bl	80154a0 <pbuf_alloc>
 801a98e:	6338      	str	r0, [r7, #48]	; 0x30
 801a990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a992:	2b00      	cmp	r3, #0
 801a994:	d103      	bne.n	801a99e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801a996:	6978      	ldr	r0, [r7, #20]
 801a998:	f7fb f878 	bl	8015a8c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801a99c:	e136      	b.n	801ac0c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801a99e:	6979      	ldr	r1, [r7, #20]
 801a9a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9a2:	f7fb f941 	bl	8015c28 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801a9a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9a8:	f7fb f8fe 	bl	8015ba8 <pbuf_clen>
 801a9ac:	4603      	mov	r3, r0
 801a9ae:	461a      	mov	r2, r3
 801a9b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a9b4:	4413      	add	r3, r2
 801a9b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a9ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a9be:	2b09      	cmp	r3, #9
 801a9c0:	d903      	bls.n	801a9ca <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801a9c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9c4:	f7fb f862 	bl	8015a8c <pbuf_free>
      goto memerr;
 801a9c8:	e120      	b.n	801ac0c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801a9ca:	68fb      	ldr	r3, [r7, #12]
 801a9cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a9ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a9d2:	441a      	add	r2, r3
 801a9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9d8:	9300      	str	r3, [sp, #0]
 801a9da:	4613      	mov	r3, r2
 801a9dc:	2200      	movs	r2, #0
 801a9de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a9e0:	68f8      	ldr	r0, [r7, #12]
 801a9e2:	f7ff fc51 	bl	801a288 <tcp_create_segment>
 801a9e6:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a9e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	f000 810d 	beq.w	801ac0a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801a9f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d102      	bne.n	801a9fc <tcp_write+0x450>
      queue = seg;
 801a9f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a9f8:	647b      	str	r3, [r7, #68]	; 0x44
 801a9fa:	e00c      	b.n	801aa16 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a9fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d106      	bne.n	801aa10 <tcp_write+0x464>
 801aa02:	4b53      	ldr	r3, [pc, #332]	; (801ab50 <tcp_write+0x5a4>)
 801aa04:	f240 22ab 	movw	r2, #683	; 0x2ab
 801aa08:	4955      	ldr	r1, [pc, #340]	; (801ab60 <tcp_write+0x5b4>)
 801aa0a:	4853      	ldr	r0, [pc, #332]	; (801ab58 <tcp_write+0x5ac>)
 801aa0c:	f004 fa9e 	bl	801ef4c <iprintf>
      prev_seg->next = seg;
 801aa10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801aa12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801aa14:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801aa16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aa18:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801aa1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801aa1e:	8b3b      	ldrh	r3, [r7, #24]
 801aa20:	4413      	add	r3, r2
 801aa22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801aa26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801aa2a:	88fb      	ldrh	r3, [r7, #6]
 801aa2c:	429a      	cmp	r2, r3
 801aa2e:	f4ff af3d 	bcc.w	801a8ac <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801aa32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d02c      	beq.n	801aa92 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801aa38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aa3a:	685b      	ldr	r3, [r3, #4]
 801aa3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aa3e:	e01e      	b.n	801aa7e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa42:	891a      	ldrh	r2, [r3, #8]
 801aa44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aa46:	4413      	add	r3, r2
 801aa48:	b29a      	uxth	r2, r3
 801aa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa4c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801aa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d110      	bne.n	801aa78 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801aa56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa58:	685b      	ldr	r3, [r3, #4]
 801aa5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801aa5c:	8952      	ldrh	r2, [r2, #10]
 801aa5e:	4413      	add	r3, r2
 801aa60:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801aa62:	68b9      	ldr	r1, [r7, #8]
 801aa64:	4618      	mov	r0, r3
 801aa66:	f004 fa41 	bl	801eeec <memcpy>
        p->len += oversize_used;
 801aa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa6c:	895a      	ldrh	r2, [r3, #10]
 801aa6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aa70:	4413      	add	r3, r2
 801aa72:	b29a      	uxth	r2, r3
 801aa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa76:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d1dd      	bne.n	801aa40 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801aa84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aa86:	891a      	ldrh	r2, [r3, #8]
 801aa88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aa8a:	4413      	add	r3, r2
 801aa8c:	b29a      	uxth	r2, r3
 801aa8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aa90:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801aa92:	8a7a      	ldrh	r2, [r7, #18]
 801aa94:	68fb      	ldr	r3, [r7, #12]
 801aa96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801aa9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d018      	beq.n	801aad2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801aaa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d106      	bne.n	801aab4 <tcp_write+0x508>
 801aaa6:	4b2a      	ldr	r3, [pc, #168]	; (801ab50 <tcp_write+0x5a4>)
 801aaa8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801aaac:	492d      	ldr	r1, [pc, #180]	; (801ab64 <tcp_write+0x5b8>)
 801aaae:	482a      	ldr	r0, [pc, #168]	; (801ab58 <tcp_write+0x5ac>)
 801aab0:	f004 fa4c 	bl	801ef4c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801aab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aab6:	685b      	ldr	r3, [r3, #4]
 801aab8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801aaba:	4618      	mov	r0, r3
 801aabc:	f7fb f8b4 	bl	8015c28 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801aac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aac2:	891a      	ldrh	r2, [r3, #8]
 801aac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aac6:	891b      	ldrh	r3, [r3, #8]
 801aac8:	4413      	add	r3, r2
 801aaca:	b29a      	uxth	r2, r3
 801aacc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aace:	811a      	strh	r2, [r3, #8]
 801aad0:	e037      	b.n	801ab42 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801aad2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d034      	beq.n	801ab42 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801aad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d003      	beq.n	801aae6 <tcp_write+0x53a>
 801aade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aae0:	685b      	ldr	r3, [r3, #4]
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d106      	bne.n	801aaf4 <tcp_write+0x548>
 801aae6:	4b1a      	ldr	r3, [pc, #104]	; (801ab50 <tcp_write+0x5a4>)
 801aae8:	f240 22e6 	movw	r2, #742	; 0x2e6
 801aaec:	491e      	ldr	r1, [pc, #120]	; (801ab68 <tcp_write+0x5bc>)
 801aaee:	481a      	ldr	r0, [pc, #104]	; (801ab58 <tcp_write+0x5ac>)
 801aaf0:	f004 fa2c 	bl	801ef4c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801aaf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aaf6:	685b      	ldr	r3, [r3, #4]
 801aaf8:	62bb      	str	r3, [r7, #40]	; 0x28
 801aafa:	e009      	b.n	801ab10 <tcp_write+0x564>
      p->tot_len += extendlen;
 801aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aafe:	891a      	ldrh	r2, [r3, #8]
 801ab00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab02:	4413      	add	r3, r2
 801ab04:	b29a      	uxth	r2, r3
 801ab06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab08:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ab0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	62bb      	str	r3, [r7, #40]	; 0x28
 801ab10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d1f1      	bne.n	801aafc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab1a:	891a      	ldrh	r2, [r3, #8]
 801ab1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab1e:	4413      	add	r3, r2
 801ab20:	b29a      	uxth	r2, r3
 801ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab24:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab28:	895a      	ldrh	r2, [r3, #10]
 801ab2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab2c:	4413      	add	r3, r2
 801ab2e:	b29a      	uxth	r2, r3
 801ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab32:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801ab34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab36:	891a      	ldrh	r2, [r3, #8]
 801ab38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab3a:	4413      	add	r3, r2
 801ab3c:	b29a      	uxth	r2, r3
 801ab3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab40:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801ab42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d111      	bne.n	801ab6c <tcp_write+0x5c0>
    pcb->unsent = queue;
 801ab48:	68fb      	ldr	r3, [r7, #12]
 801ab4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ab4c:	66da      	str	r2, [r3, #108]	; 0x6c
 801ab4e:	e010      	b.n	801ab72 <tcp_write+0x5c6>
 801ab50:	08022b14 	.word	0x08022b14
 801ab54:	08022db4 	.word	0x08022db4
 801ab58:	08022b68 	.word	0x08022b68
 801ab5c:	08022df4 	.word	0x08022df4
 801ab60:	08022e04 	.word	0x08022e04
 801ab64:	08022e18 	.word	0x08022e18
 801ab68:	08022e50 	.word	0x08022e50
  } else {
    last_unsent->next = queue;
 801ab6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ab70:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801ab72:	68fb      	ldr	r3, [r7, #12]
 801ab74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801ab76:	88fb      	ldrh	r3, [r7, #6]
 801ab78:	441a      	add	r2, r3
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801ab7e:	68fb      	ldr	r3, [r7, #12]
 801ab80:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801ab84:	88fb      	ldrh	r3, [r7, #6]
 801ab86:	1ad3      	subs	r3, r2, r3
 801ab88:	b29a      	uxth	r2, r3
 801ab8a:	68fb      	ldr	r3, [r7, #12]
 801ab8c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801ab96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d00e      	beq.n	801abc2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801aba4:	68fb      	ldr	r3, [r7, #12]
 801aba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d10a      	bne.n	801abc2 <tcp_write+0x616>
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d106      	bne.n	801abc2 <tcp_write+0x616>
 801abb4:	4b2c      	ldr	r3, [pc, #176]	; (801ac68 <tcp_write+0x6bc>)
 801abb6:	f240 3212 	movw	r2, #786	; 0x312
 801abba:	492c      	ldr	r1, [pc, #176]	; (801ac6c <tcp_write+0x6c0>)
 801abbc:	482c      	ldr	r0, [pc, #176]	; (801ac70 <tcp_write+0x6c4>)
 801abbe:	f004 f9c5 	bl	801ef4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801abc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d016      	beq.n	801abf6 <tcp_write+0x64a>
 801abc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abca:	68db      	ldr	r3, [r3, #12]
 801abcc:	2b00      	cmp	r3, #0
 801abce:	d012      	beq.n	801abf6 <tcp_write+0x64a>
 801abd0:	797b      	ldrb	r3, [r7, #5]
 801abd2:	f003 0302 	and.w	r3, r3, #2
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d10d      	bne.n	801abf6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801abda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abdc:	68db      	ldr	r3, [r3, #12]
 801abde:	899b      	ldrh	r3, [r3, #12]
 801abe0:	b29c      	uxth	r4, r3
 801abe2:	2008      	movs	r0, #8
 801abe4:	f7f9 fb5e 	bl	80142a4 <lwip_htons>
 801abe8:	4603      	mov	r3, r0
 801abea:	461a      	mov	r2, r3
 801abec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abee:	68db      	ldr	r3, [r3, #12]
 801abf0:	4322      	orrs	r2, r4
 801abf2:	b292      	uxth	r2, r2
 801abf4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801abf6:	2300      	movs	r3, #0
 801abf8:	e031      	b.n	801ac5e <tcp_write+0x6b2>
          goto memerr;
 801abfa:	bf00      	nop
 801abfc:	e006      	b.n	801ac0c <tcp_write+0x660>
            goto memerr;
 801abfe:	bf00      	nop
 801ac00:	e004      	b.n	801ac0c <tcp_write+0x660>
        goto memerr;
 801ac02:	bf00      	nop
 801ac04:	e002      	b.n	801ac0c <tcp_write+0x660>
        goto memerr;
 801ac06:	bf00      	nop
 801ac08:	e000      	b.n	801ac0c <tcp_write+0x660>
      goto memerr;
 801ac0a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	8b5b      	ldrh	r3, [r3, #26]
 801ac10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ac14:	b29a      	uxth	r2, r3
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801ac1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d002      	beq.n	801ac26 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801ac20:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ac22:	f7fa ff33 	bl	8015a8c <pbuf_free>
  }
  if (queue != NULL) {
 801ac26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	d002      	beq.n	801ac32 <tcp_write+0x686>
    tcp_segs_free(queue);
 801ac2c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ac2e:	f7fc fb51 	bl	80172d4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d00e      	beq.n	801ac5a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d10a      	bne.n	801ac5a <tcp_write+0x6ae>
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d106      	bne.n	801ac5a <tcp_write+0x6ae>
 801ac4c:	4b06      	ldr	r3, [pc, #24]	; (801ac68 <tcp_write+0x6bc>)
 801ac4e:	f240 3227 	movw	r2, #807	; 0x327
 801ac52:	4906      	ldr	r1, [pc, #24]	; (801ac6c <tcp_write+0x6c0>)
 801ac54:	4806      	ldr	r0, [pc, #24]	; (801ac70 <tcp_write+0x6c4>)
 801ac56:	f004 f979 	bl	801ef4c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801ac5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ac5e:	4618      	mov	r0, r3
 801ac60:	375c      	adds	r7, #92	; 0x5c
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bd90      	pop	{r4, r7, pc}
 801ac66:	bf00      	nop
 801ac68:	08022b14 	.word	0x08022b14
 801ac6c:	08022e88 	.word	0x08022e88
 801ac70:	08022b68 	.word	0x08022b68

0801ac74 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801ac74:	b590      	push	{r4, r7, lr}
 801ac76:	b08b      	sub	sp, #44	; 0x2c
 801ac78:	af02      	add	r7, sp, #8
 801ac7a:	6078      	str	r0, [r7, #4]
 801ac7c:	460b      	mov	r3, r1
 801ac7e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801ac80:	2300      	movs	r3, #0
 801ac82:	61fb      	str	r3, [r7, #28]
 801ac84:	2300      	movs	r3, #0
 801ac86:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801ac88:	2300      	movs	r3, #0
 801ac8a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d106      	bne.n	801aca0 <tcp_split_unsent_seg+0x2c>
 801ac92:	4b95      	ldr	r3, [pc, #596]	; (801aee8 <tcp_split_unsent_seg+0x274>)
 801ac94:	f240 324b 	movw	r2, #843	; 0x34b
 801ac98:	4994      	ldr	r1, [pc, #592]	; (801aeec <tcp_split_unsent_seg+0x278>)
 801ac9a:	4895      	ldr	r0, [pc, #596]	; (801aef0 <tcp_split_unsent_seg+0x27c>)
 801ac9c:	f004 f956 	bl	801ef4c <iprintf>

  useg = pcb->unsent;
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aca4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801aca6:	697b      	ldr	r3, [r7, #20]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d102      	bne.n	801acb2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801acac:	f04f 33ff 	mov.w	r3, #4294967295
 801acb0:	e116      	b.n	801aee0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801acb2:	887b      	ldrh	r3, [r7, #2]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d109      	bne.n	801accc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801acb8:	4b8b      	ldr	r3, [pc, #556]	; (801aee8 <tcp_split_unsent_seg+0x274>)
 801acba:	f240 3253 	movw	r2, #851	; 0x353
 801acbe:	498d      	ldr	r1, [pc, #564]	; (801aef4 <tcp_split_unsent_seg+0x280>)
 801acc0:	488b      	ldr	r0, [pc, #556]	; (801aef0 <tcp_split_unsent_seg+0x27c>)
 801acc2:	f004 f943 	bl	801ef4c <iprintf>
    return ERR_VAL;
 801acc6:	f06f 0305 	mvn.w	r3, #5
 801acca:	e109      	b.n	801aee0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801accc:	697b      	ldr	r3, [r7, #20]
 801acce:	891b      	ldrh	r3, [r3, #8]
 801acd0:	887a      	ldrh	r2, [r7, #2]
 801acd2:	429a      	cmp	r2, r3
 801acd4:	d301      	bcc.n	801acda <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801acd6:	2300      	movs	r3, #0
 801acd8:	e102      	b.n	801aee0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801acde:	887a      	ldrh	r2, [r7, #2]
 801ace0:	429a      	cmp	r2, r3
 801ace2:	d906      	bls.n	801acf2 <tcp_split_unsent_seg+0x7e>
 801ace4:	4b80      	ldr	r3, [pc, #512]	; (801aee8 <tcp_split_unsent_seg+0x274>)
 801ace6:	f240 325b 	movw	r2, #859	; 0x35b
 801acea:	4983      	ldr	r1, [pc, #524]	; (801aef8 <tcp_split_unsent_seg+0x284>)
 801acec:	4880      	ldr	r0, [pc, #512]	; (801aef0 <tcp_split_unsent_seg+0x27c>)
 801acee:	f004 f92d 	bl	801ef4c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801acf2:	697b      	ldr	r3, [r7, #20]
 801acf4:	891b      	ldrh	r3, [r3, #8]
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d106      	bne.n	801ad08 <tcp_split_unsent_seg+0x94>
 801acfa:	4b7b      	ldr	r3, [pc, #492]	; (801aee8 <tcp_split_unsent_seg+0x274>)
 801acfc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801ad00:	497e      	ldr	r1, [pc, #504]	; (801aefc <tcp_split_unsent_seg+0x288>)
 801ad02:	487b      	ldr	r0, [pc, #492]	; (801aef0 <tcp_split_unsent_seg+0x27c>)
 801ad04:	f004 f922 	bl	801ef4c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801ad08:	697b      	ldr	r3, [r7, #20]
 801ad0a:	7a9b      	ldrb	r3, [r3, #10]
 801ad0c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ad0e:	7bfb      	ldrb	r3, [r7, #15]
 801ad10:	009b      	lsls	r3, r3, #2
 801ad12:	b2db      	uxtb	r3, r3
 801ad14:	f003 0304 	and.w	r3, r3, #4
 801ad18:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801ad1a:	697b      	ldr	r3, [r7, #20]
 801ad1c:	891a      	ldrh	r2, [r3, #8]
 801ad1e:	887b      	ldrh	r3, [r7, #2]
 801ad20:	1ad3      	subs	r3, r2, r3
 801ad22:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ad24:	7bbb      	ldrb	r3, [r7, #14]
 801ad26:	b29a      	uxth	r2, r3
 801ad28:	89bb      	ldrh	r3, [r7, #12]
 801ad2a:	4413      	add	r3, r2
 801ad2c:	b29b      	uxth	r3, r3
 801ad2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ad32:	4619      	mov	r1, r3
 801ad34:	2036      	movs	r0, #54	; 0x36
 801ad36:	f7fa fbb3 	bl	80154a0 <pbuf_alloc>
 801ad3a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ad3c:	693b      	ldr	r3, [r7, #16]
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	f000 80b7 	beq.w	801aeb2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801ad44:	697b      	ldr	r3, [r7, #20]
 801ad46:	685b      	ldr	r3, [r3, #4]
 801ad48:	891a      	ldrh	r2, [r3, #8]
 801ad4a:	697b      	ldr	r3, [r7, #20]
 801ad4c:	891b      	ldrh	r3, [r3, #8]
 801ad4e:	1ad3      	subs	r3, r2, r3
 801ad50:	b29a      	uxth	r2, r3
 801ad52:	887b      	ldrh	r3, [r7, #2]
 801ad54:	4413      	add	r3, r2
 801ad56:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ad58:	697b      	ldr	r3, [r7, #20]
 801ad5a:	6858      	ldr	r0, [r3, #4]
 801ad5c:	693b      	ldr	r3, [r7, #16]
 801ad5e:	685a      	ldr	r2, [r3, #4]
 801ad60:	7bbb      	ldrb	r3, [r7, #14]
 801ad62:	18d1      	adds	r1, r2, r3
 801ad64:	897b      	ldrh	r3, [r7, #10]
 801ad66:	89ba      	ldrh	r2, [r7, #12]
 801ad68:	f7fb f886 	bl	8015e78 <pbuf_copy_partial>
 801ad6c:	4603      	mov	r3, r0
 801ad6e:	461a      	mov	r2, r3
 801ad70:	89bb      	ldrh	r3, [r7, #12]
 801ad72:	4293      	cmp	r3, r2
 801ad74:	f040 809f 	bne.w	801aeb6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801ad78:	697b      	ldr	r3, [r7, #20]
 801ad7a:	68db      	ldr	r3, [r3, #12]
 801ad7c:	899b      	ldrh	r3, [r3, #12]
 801ad7e:	b29b      	uxth	r3, r3
 801ad80:	4618      	mov	r0, r3
 801ad82:	f7f9 fa8f 	bl	80142a4 <lwip_htons>
 801ad86:	4603      	mov	r3, r0
 801ad88:	b2db      	uxtb	r3, r3
 801ad8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ad8e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801ad90:	2300      	movs	r3, #0
 801ad92:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801ad94:	7efb      	ldrb	r3, [r7, #27]
 801ad96:	f003 0308 	and.w	r3, r3, #8
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d007      	beq.n	801adae <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801ad9e:	7efb      	ldrb	r3, [r7, #27]
 801ada0:	f023 0308 	bic.w	r3, r3, #8
 801ada4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801ada6:	7ebb      	ldrb	r3, [r7, #26]
 801ada8:	f043 0308 	orr.w	r3, r3, #8
 801adac:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801adae:	7efb      	ldrb	r3, [r7, #27]
 801adb0:	f003 0301 	and.w	r3, r3, #1
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d007      	beq.n	801adc8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801adb8:	7efb      	ldrb	r3, [r7, #27]
 801adba:	f023 0301 	bic.w	r3, r3, #1
 801adbe:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801adc0:	7ebb      	ldrb	r3, [r7, #26]
 801adc2:	f043 0301 	orr.w	r3, r3, #1
 801adc6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801adc8:	697b      	ldr	r3, [r7, #20]
 801adca:	68db      	ldr	r3, [r3, #12]
 801adcc:	685b      	ldr	r3, [r3, #4]
 801adce:	4618      	mov	r0, r3
 801add0:	f7f9 fa7d 	bl	80142ce <lwip_htonl>
 801add4:	4602      	mov	r2, r0
 801add6:	887b      	ldrh	r3, [r7, #2]
 801add8:	18d1      	adds	r1, r2, r3
 801adda:	7eba      	ldrb	r2, [r7, #26]
 801addc:	7bfb      	ldrb	r3, [r7, #15]
 801adde:	9300      	str	r3, [sp, #0]
 801ade0:	460b      	mov	r3, r1
 801ade2:	6939      	ldr	r1, [r7, #16]
 801ade4:	6878      	ldr	r0, [r7, #4]
 801ade6:	f7ff fa4f 	bl	801a288 <tcp_create_segment>
 801adea:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801adec:	69fb      	ldr	r3, [r7, #28]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d063      	beq.n	801aeba <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801adf2:	697b      	ldr	r3, [r7, #20]
 801adf4:	685b      	ldr	r3, [r3, #4]
 801adf6:	4618      	mov	r0, r3
 801adf8:	f7fa fed6 	bl	8015ba8 <pbuf_clen>
 801adfc:	4603      	mov	r3, r0
 801adfe:	461a      	mov	r2, r3
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ae06:	1a9b      	subs	r3, r3, r2
 801ae08:	b29a      	uxth	r2, r3
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801ae10:	697b      	ldr	r3, [r7, #20]
 801ae12:	6858      	ldr	r0, [r3, #4]
 801ae14:	697b      	ldr	r3, [r7, #20]
 801ae16:	685b      	ldr	r3, [r3, #4]
 801ae18:	891a      	ldrh	r2, [r3, #8]
 801ae1a:	89bb      	ldrh	r3, [r7, #12]
 801ae1c:	1ad3      	subs	r3, r2, r3
 801ae1e:	b29b      	uxth	r3, r3
 801ae20:	4619      	mov	r1, r3
 801ae22:	f7fa fc9b 	bl	801575c <pbuf_realloc>
  useg->len -= remainder;
 801ae26:	697b      	ldr	r3, [r7, #20]
 801ae28:	891a      	ldrh	r2, [r3, #8]
 801ae2a:	89bb      	ldrh	r3, [r7, #12]
 801ae2c:	1ad3      	subs	r3, r2, r3
 801ae2e:	b29a      	uxth	r2, r3
 801ae30:	697b      	ldr	r3, [r7, #20]
 801ae32:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ae34:	697b      	ldr	r3, [r7, #20]
 801ae36:	68db      	ldr	r3, [r3, #12]
 801ae38:	899b      	ldrh	r3, [r3, #12]
 801ae3a:	b29c      	uxth	r4, r3
 801ae3c:	7efb      	ldrb	r3, [r7, #27]
 801ae3e:	b29b      	uxth	r3, r3
 801ae40:	4618      	mov	r0, r3
 801ae42:	f7f9 fa2f 	bl	80142a4 <lwip_htons>
 801ae46:	4603      	mov	r3, r0
 801ae48:	461a      	mov	r2, r3
 801ae4a:	697b      	ldr	r3, [r7, #20]
 801ae4c:	68db      	ldr	r3, [r3, #12]
 801ae4e:	4322      	orrs	r2, r4
 801ae50:	b292      	uxth	r2, r2
 801ae52:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801ae54:	697b      	ldr	r3, [r7, #20]
 801ae56:	685b      	ldr	r3, [r3, #4]
 801ae58:	4618      	mov	r0, r3
 801ae5a:	f7fa fea5 	bl	8015ba8 <pbuf_clen>
 801ae5e:	4603      	mov	r3, r0
 801ae60:	461a      	mov	r2, r3
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ae68:	4413      	add	r3, r2
 801ae6a:	b29a      	uxth	r2, r3
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ae72:	69fb      	ldr	r3, [r7, #28]
 801ae74:	685b      	ldr	r3, [r3, #4]
 801ae76:	4618      	mov	r0, r3
 801ae78:	f7fa fe96 	bl	8015ba8 <pbuf_clen>
 801ae7c:	4603      	mov	r3, r0
 801ae7e:	461a      	mov	r2, r3
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ae86:	4413      	add	r3, r2
 801ae88:	b29a      	uxth	r2, r3
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801ae90:	697b      	ldr	r3, [r7, #20]
 801ae92:	681a      	ldr	r2, [r3, #0]
 801ae94:	69fb      	ldr	r3, [r7, #28]
 801ae96:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801ae98:	697b      	ldr	r3, [r7, #20]
 801ae9a:	69fa      	ldr	r2, [r7, #28]
 801ae9c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801ae9e:	69fb      	ldr	r3, [r7, #28]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d103      	bne.n	801aeae <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	2200      	movs	r2, #0
 801aeaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801aeae:	2300      	movs	r3, #0
 801aeb0:	e016      	b.n	801aee0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801aeb2:	bf00      	nop
 801aeb4:	e002      	b.n	801aebc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801aeb6:	bf00      	nop
 801aeb8:	e000      	b.n	801aebc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801aeba:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801aebc:	69fb      	ldr	r3, [r7, #28]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d006      	beq.n	801aed0 <tcp_split_unsent_seg+0x25c>
 801aec2:	4b09      	ldr	r3, [pc, #36]	; (801aee8 <tcp_split_unsent_seg+0x274>)
 801aec4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801aec8:	490d      	ldr	r1, [pc, #52]	; (801af00 <tcp_split_unsent_seg+0x28c>)
 801aeca:	4809      	ldr	r0, [pc, #36]	; (801aef0 <tcp_split_unsent_seg+0x27c>)
 801aecc:	f004 f83e 	bl	801ef4c <iprintf>
  if (p != NULL) {
 801aed0:	693b      	ldr	r3, [r7, #16]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d002      	beq.n	801aedc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801aed6:	6938      	ldr	r0, [r7, #16]
 801aed8:	f7fa fdd8 	bl	8015a8c <pbuf_free>
  }

  return ERR_MEM;
 801aedc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801aee0:	4618      	mov	r0, r3
 801aee2:	3724      	adds	r7, #36	; 0x24
 801aee4:	46bd      	mov	sp, r7
 801aee6:	bd90      	pop	{r4, r7, pc}
 801aee8:	08022b14 	.word	0x08022b14
 801aeec:	08022ea8 	.word	0x08022ea8
 801aef0:	08022b68 	.word	0x08022b68
 801aef4:	08022ecc 	.word	0x08022ecc
 801aef8:	08022ef0 	.word	0x08022ef0
 801aefc:	08022f00 	.word	0x08022f00
 801af00:	08022f10 	.word	0x08022f10

0801af04 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801af04:	b590      	push	{r4, r7, lr}
 801af06:	b085      	sub	sp, #20
 801af08:	af00      	add	r7, sp, #0
 801af0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d106      	bne.n	801af20 <tcp_send_fin+0x1c>
 801af12:	4b21      	ldr	r3, [pc, #132]	; (801af98 <tcp_send_fin+0x94>)
 801af14:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801af18:	4920      	ldr	r1, [pc, #128]	; (801af9c <tcp_send_fin+0x98>)
 801af1a:	4821      	ldr	r0, [pc, #132]	; (801afa0 <tcp_send_fin+0x9c>)
 801af1c:	f004 f816 	bl	801ef4c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af24:	2b00      	cmp	r3, #0
 801af26:	d02e      	beq.n	801af86 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af2c:	60fb      	str	r3, [r7, #12]
 801af2e:	e002      	b.n	801af36 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	681b      	ldr	r3, [r3, #0]
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d1f8      	bne.n	801af30 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801af3e:	68fb      	ldr	r3, [r7, #12]
 801af40:	68db      	ldr	r3, [r3, #12]
 801af42:	899b      	ldrh	r3, [r3, #12]
 801af44:	b29b      	uxth	r3, r3
 801af46:	4618      	mov	r0, r3
 801af48:	f7f9 f9ac 	bl	80142a4 <lwip_htons>
 801af4c:	4603      	mov	r3, r0
 801af4e:	b2db      	uxtb	r3, r3
 801af50:	f003 0307 	and.w	r3, r3, #7
 801af54:	2b00      	cmp	r3, #0
 801af56:	d116      	bne.n	801af86 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	68db      	ldr	r3, [r3, #12]
 801af5c:	899b      	ldrh	r3, [r3, #12]
 801af5e:	b29c      	uxth	r4, r3
 801af60:	2001      	movs	r0, #1
 801af62:	f7f9 f99f 	bl	80142a4 <lwip_htons>
 801af66:	4603      	mov	r3, r0
 801af68:	461a      	mov	r2, r3
 801af6a:	68fb      	ldr	r3, [r7, #12]
 801af6c:	68db      	ldr	r3, [r3, #12]
 801af6e:	4322      	orrs	r2, r4
 801af70:	b292      	uxth	r2, r2
 801af72:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	8b5b      	ldrh	r3, [r3, #26]
 801af78:	f043 0320 	orr.w	r3, r3, #32
 801af7c:	b29a      	uxth	r2, r3
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801af82:	2300      	movs	r3, #0
 801af84:	e004      	b.n	801af90 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801af86:	2101      	movs	r1, #1
 801af88:	6878      	ldr	r0, [r7, #4]
 801af8a:	f000 f80b 	bl	801afa4 <tcp_enqueue_flags>
 801af8e:	4603      	mov	r3, r0
}
 801af90:	4618      	mov	r0, r3
 801af92:	3714      	adds	r7, #20
 801af94:	46bd      	mov	sp, r7
 801af96:	bd90      	pop	{r4, r7, pc}
 801af98:	08022b14 	.word	0x08022b14
 801af9c:	08022f1c 	.word	0x08022f1c
 801afa0:	08022b68 	.word	0x08022b68

0801afa4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b08a      	sub	sp, #40	; 0x28
 801afa8:	af02      	add	r7, sp, #8
 801afaa:	6078      	str	r0, [r7, #4]
 801afac:	460b      	mov	r3, r1
 801afae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801afb0:	2300      	movs	r3, #0
 801afb2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801afb4:	2300      	movs	r3, #0
 801afb6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801afb8:	78fb      	ldrb	r3, [r7, #3]
 801afba:	f003 0303 	and.w	r3, r3, #3
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d106      	bne.n	801afd0 <tcp_enqueue_flags+0x2c>
 801afc2:	4b67      	ldr	r3, [pc, #412]	; (801b160 <tcp_enqueue_flags+0x1bc>)
 801afc4:	f240 4211 	movw	r2, #1041	; 0x411
 801afc8:	4966      	ldr	r1, [pc, #408]	; (801b164 <tcp_enqueue_flags+0x1c0>)
 801afca:	4867      	ldr	r0, [pc, #412]	; (801b168 <tcp_enqueue_flags+0x1c4>)
 801afcc:	f003 ffbe 	bl	801ef4c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d106      	bne.n	801afe4 <tcp_enqueue_flags+0x40>
 801afd6:	4b62      	ldr	r3, [pc, #392]	; (801b160 <tcp_enqueue_flags+0x1bc>)
 801afd8:	f240 4213 	movw	r2, #1043	; 0x413
 801afdc:	4963      	ldr	r1, [pc, #396]	; (801b16c <tcp_enqueue_flags+0x1c8>)
 801afde:	4862      	ldr	r0, [pc, #392]	; (801b168 <tcp_enqueue_flags+0x1c4>)
 801afe0:	f003 ffb4 	bl	801ef4c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801afe4:	78fb      	ldrb	r3, [r7, #3]
 801afe6:	f003 0302 	and.w	r3, r3, #2
 801afea:	2b00      	cmp	r3, #0
 801afec:	d001      	beq.n	801aff2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801afee:	2301      	movs	r3, #1
 801aff0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801aff2:	7ffb      	ldrb	r3, [r7, #31]
 801aff4:	009b      	lsls	r3, r3, #2
 801aff6:	b2db      	uxtb	r3, r3
 801aff8:	f003 0304 	and.w	r3, r3, #4
 801affc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801affe:	7dfb      	ldrb	r3, [r7, #23]
 801b000:	b29b      	uxth	r3, r3
 801b002:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b006:	4619      	mov	r1, r3
 801b008:	2036      	movs	r0, #54	; 0x36
 801b00a:	f7fa fa49 	bl	80154a0 <pbuf_alloc>
 801b00e:	6138      	str	r0, [r7, #16]
 801b010:	693b      	ldr	r3, [r7, #16]
 801b012:	2b00      	cmp	r3, #0
 801b014:	d109      	bne.n	801b02a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	8b5b      	ldrh	r3, [r3, #26]
 801b01a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b01e:	b29a      	uxth	r2, r3
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b024:	f04f 33ff 	mov.w	r3, #4294967295
 801b028:	e095      	b.n	801b156 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b02a:	693b      	ldr	r3, [r7, #16]
 801b02c:	895a      	ldrh	r2, [r3, #10]
 801b02e:	7dfb      	ldrb	r3, [r7, #23]
 801b030:	b29b      	uxth	r3, r3
 801b032:	429a      	cmp	r2, r3
 801b034:	d206      	bcs.n	801b044 <tcp_enqueue_flags+0xa0>
 801b036:	4b4a      	ldr	r3, [pc, #296]	; (801b160 <tcp_enqueue_flags+0x1bc>)
 801b038:	f240 4239 	movw	r2, #1081	; 0x439
 801b03c:	494c      	ldr	r1, [pc, #304]	; (801b170 <tcp_enqueue_flags+0x1cc>)
 801b03e:	484a      	ldr	r0, [pc, #296]	; (801b168 <tcp_enqueue_flags+0x1c4>)
 801b040:	f003 ff84 	bl	801ef4c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801b048:	78fa      	ldrb	r2, [r7, #3]
 801b04a:	7ffb      	ldrb	r3, [r7, #31]
 801b04c:	9300      	str	r3, [sp, #0]
 801b04e:	460b      	mov	r3, r1
 801b050:	6939      	ldr	r1, [r7, #16]
 801b052:	6878      	ldr	r0, [r7, #4]
 801b054:	f7ff f918 	bl	801a288 <tcp_create_segment>
 801b058:	60f8      	str	r0, [r7, #12]
 801b05a:	68fb      	ldr	r3, [r7, #12]
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d109      	bne.n	801b074 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	8b5b      	ldrh	r3, [r3, #26]
 801b064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b068:	b29a      	uxth	r2, r3
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b06e:	f04f 33ff 	mov.w	r3, #4294967295
 801b072:	e070      	b.n	801b156 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b074:	68fb      	ldr	r3, [r7, #12]
 801b076:	68db      	ldr	r3, [r3, #12]
 801b078:	f003 0303 	and.w	r3, r3, #3
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d006      	beq.n	801b08e <tcp_enqueue_flags+0xea>
 801b080:	4b37      	ldr	r3, [pc, #220]	; (801b160 <tcp_enqueue_flags+0x1bc>)
 801b082:	f240 4242 	movw	r2, #1090	; 0x442
 801b086:	493b      	ldr	r1, [pc, #236]	; (801b174 <tcp_enqueue_flags+0x1d0>)
 801b088:	4837      	ldr	r0, [pc, #220]	; (801b168 <tcp_enqueue_flags+0x1c4>)
 801b08a:	f003 ff5f 	bl	801ef4c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b08e:	68fb      	ldr	r3, [r7, #12]
 801b090:	891b      	ldrh	r3, [r3, #8]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d006      	beq.n	801b0a4 <tcp_enqueue_flags+0x100>
 801b096:	4b32      	ldr	r3, [pc, #200]	; (801b160 <tcp_enqueue_flags+0x1bc>)
 801b098:	f240 4243 	movw	r2, #1091	; 0x443
 801b09c:	4936      	ldr	r1, [pc, #216]	; (801b178 <tcp_enqueue_flags+0x1d4>)
 801b09e:	4832      	ldr	r0, [pc, #200]	; (801b168 <tcp_enqueue_flags+0x1c4>)
 801b0a0:	f003 ff54 	bl	801ef4c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d103      	bne.n	801b0b4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	68fa      	ldr	r2, [r7, #12]
 801b0b0:	66da      	str	r2, [r3, #108]	; 0x6c
 801b0b2:	e00d      	b.n	801b0d0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b0b8:	61bb      	str	r3, [r7, #24]
 801b0ba:	e002      	b.n	801b0c2 <tcp_enqueue_flags+0x11e>
 801b0bc:	69bb      	ldr	r3, [r7, #24]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	61bb      	str	r3, [r7, #24]
 801b0c2:	69bb      	ldr	r3, [r7, #24]
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d1f8      	bne.n	801b0bc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801b0ca:	69bb      	ldr	r3, [r7, #24]
 801b0cc:	68fa      	ldr	r2, [r7, #12]
 801b0ce:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	2200      	movs	r2, #0
 801b0d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b0d8:	78fb      	ldrb	r3, [r7, #3]
 801b0da:	f003 0302 	and.w	r3, r3, #2
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d104      	bne.n	801b0ec <tcp_enqueue_flags+0x148>
 801b0e2:	78fb      	ldrb	r3, [r7, #3]
 801b0e4:	f003 0301 	and.w	r3, r3, #1
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d004      	beq.n	801b0f6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b0f0:	1c5a      	adds	r2, r3, #1
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801b0f6:	78fb      	ldrb	r3, [r7, #3]
 801b0f8:	f003 0301 	and.w	r3, r3, #1
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d006      	beq.n	801b10e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	8b5b      	ldrh	r3, [r3, #26]
 801b104:	f043 0320 	orr.w	r3, r3, #32
 801b108:	b29a      	uxth	r2, r3
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	685b      	ldr	r3, [r3, #4]
 801b112:	4618      	mov	r0, r3
 801b114:	f7fa fd48 	bl	8015ba8 <pbuf_clen>
 801b118:	4603      	mov	r3, r0
 801b11a:	461a      	mov	r2, r3
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b122:	4413      	add	r3, r2
 801b124:	b29a      	uxth	r2, r3
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b132:	2b00      	cmp	r3, #0
 801b134:	d00e      	beq.n	801b154 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d10a      	bne.n	801b154 <tcp_enqueue_flags+0x1b0>
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b142:	2b00      	cmp	r3, #0
 801b144:	d106      	bne.n	801b154 <tcp_enqueue_flags+0x1b0>
 801b146:	4b06      	ldr	r3, [pc, #24]	; (801b160 <tcp_enqueue_flags+0x1bc>)
 801b148:	f240 4265 	movw	r2, #1125	; 0x465
 801b14c:	490b      	ldr	r1, [pc, #44]	; (801b17c <tcp_enqueue_flags+0x1d8>)
 801b14e:	4806      	ldr	r0, [pc, #24]	; (801b168 <tcp_enqueue_flags+0x1c4>)
 801b150:	f003 fefc 	bl	801ef4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801b154:	2300      	movs	r3, #0
}
 801b156:	4618      	mov	r0, r3
 801b158:	3720      	adds	r7, #32
 801b15a:	46bd      	mov	sp, r7
 801b15c:	bd80      	pop	{r7, pc}
 801b15e:	bf00      	nop
 801b160:	08022b14 	.word	0x08022b14
 801b164:	08022f38 	.word	0x08022f38
 801b168:	08022b68 	.word	0x08022b68
 801b16c:	08022f90 	.word	0x08022f90
 801b170:	08022fb0 	.word	0x08022fb0
 801b174:	08022fec 	.word	0x08022fec
 801b178:	08023004 	.word	0x08023004
 801b17c:	08023030 	.word	0x08023030

0801b180 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801b180:	b5b0      	push	{r4, r5, r7, lr}
 801b182:	b08a      	sub	sp, #40	; 0x28
 801b184:	af00      	add	r7, sp, #0
 801b186:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d106      	bne.n	801b19c <tcp_output+0x1c>
 801b18e:	4b9e      	ldr	r3, [pc, #632]	; (801b408 <tcp_output+0x288>)
 801b190:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801b194:	499d      	ldr	r1, [pc, #628]	; (801b40c <tcp_output+0x28c>)
 801b196:	489e      	ldr	r0, [pc, #632]	; (801b410 <tcp_output+0x290>)
 801b198:	f003 fed8 	bl	801ef4c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	7d1b      	ldrb	r3, [r3, #20]
 801b1a0:	2b01      	cmp	r3, #1
 801b1a2:	d106      	bne.n	801b1b2 <tcp_output+0x32>
 801b1a4:	4b98      	ldr	r3, [pc, #608]	; (801b408 <tcp_output+0x288>)
 801b1a6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801b1aa:	499a      	ldr	r1, [pc, #616]	; (801b414 <tcp_output+0x294>)
 801b1ac:	4898      	ldr	r0, [pc, #608]	; (801b410 <tcp_output+0x290>)
 801b1ae:	f003 fecd 	bl	801ef4c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b1b2:	4b99      	ldr	r3, [pc, #612]	; (801b418 <tcp_output+0x298>)
 801b1b4:	681b      	ldr	r3, [r3, #0]
 801b1b6:	687a      	ldr	r2, [r7, #4]
 801b1b8:	429a      	cmp	r2, r3
 801b1ba:	d101      	bne.n	801b1c0 <tcp_output+0x40>
    return ERR_OK;
 801b1bc:	2300      	movs	r3, #0
 801b1be:	e1ce      	b.n	801b55e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b1cc:	4293      	cmp	r3, r2
 801b1ce:	bf28      	it	cs
 801b1d0:	4613      	movcs	r3, r2
 801b1d2:	b29b      	uxth	r3, r3
 801b1d4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b1da:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d10b      	bne.n	801b1fa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	8b5b      	ldrh	r3, [r3, #26]
 801b1e6:	f003 0302 	and.w	r3, r3, #2
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	f000 81aa 	beq.w	801b544 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801b1f0:	6878      	ldr	r0, [r7, #4]
 801b1f2:	f000 fdcb 	bl	801bd8c <tcp_send_empty_ack>
 801b1f6:	4603      	mov	r3, r0
 801b1f8:	e1b1      	b.n	801b55e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801b1fa:	6879      	ldr	r1, [r7, #4]
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	3304      	adds	r3, #4
 801b200:	461a      	mov	r2, r3
 801b202:	6878      	ldr	r0, [r7, #4]
 801b204:	f7ff f824 	bl	801a250 <tcp_route>
 801b208:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b20a:	697b      	ldr	r3, [r7, #20]
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d102      	bne.n	801b216 <tcp_output+0x96>
    return ERR_RTE;
 801b210:	f06f 0303 	mvn.w	r3, #3
 801b214:	e1a3      	b.n	801b55e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d003      	beq.n	801b224 <tcp_output+0xa4>
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	2b00      	cmp	r3, #0
 801b222:	d111      	bne.n	801b248 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b224:	697b      	ldr	r3, [r7, #20]
 801b226:	2b00      	cmp	r3, #0
 801b228:	d002      	beq.n	801b230 <tcp_output+0xb0>
 801b22a:	697b      	ldr	r3, [r7, #20]
 801b22c:	3304      	adds	r3, #4
 801b22e:	e000      	b.n	801b232 <tcp_output+0xb2>
 801b230:	2300      	movs	r3, #0
 801b232:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b234:	693b      	ldr	r3, [r7, #16]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d102      	bne.n	801b240 <tcp_output+0xc0>
      return ERR_RTE;
 801b23a:	f06f 0303 	mvn.w	r3, #3
 801b23e:	e18e      	b.n	801b55e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b240:	693b      	ldr	r3, [r7, #16]
 801b242:	681a      	ldr	r2, [r3, #0]
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b24a:	68db      	ldr	r3, [r3, #12]
 801b24c:	685b      	ldr	r3, [r3, #4]
 801b24e:	4618      	mov	r0, r3
 801b250:	f7f9 f83d 	bl	80142ce <lwip_htonl>
 801b254:	4602      	mov	r2, r0
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b25a:	1ad3      	subs	r3, r2, r3
 801b25c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b25e:	8912      	ldrh	r2, [r2, #8]
 801b260:	4413      	add	r3, r2
 801b262:	69ba      	ldr	r2, [r7, #24]
 801b264:	429a      	cmp	r2, r3
 801b266:	d227      	bcs.n	801b2b8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b26e:	461a      	mov	r2, r3
 801b270:	69bb      	ldr	r3, [r7, #24]
 801b272:	4293      	cmp	r3, r2
 801b274:	d114      	bne.n	801b2a0 <tcp_output+0x120>
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d110      	bne.n	801b2a0 <tcp_output+0x120>
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b284:	2b00      	cmp	r3, #0
 801b286:	d10b      	bne.n	801b2a0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	2200      	movs	r2, #0
 801b28c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	2201      	movs	r2, #1
 801b294:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	2200      	movs	r2, #0
 801b29c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	8b5b      	ldrh	r3, [r3, #26]
 801b2a4:	f003 0302 	and.w	r3, r3, #2
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	f000 814d 	beq.w	801b548 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801b2ae:	6878      	ldr	r0, [r7, #4]
 801b2b0:	f000 fd6c 	bl	801bd8c <tcp_send_empty_ack>
 801b2b4:	4603      	mov	r3, r0
 801b2b6:	e152      	b.n	801b55e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	2200      	movs	r2, #0
 801b2bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2c4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b2c6:	6a3b      	ldr	r3, [r7, #32]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	f000 811c 	beq.w	801b506 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801b2ce:	e002      	b.n	801b2d6 <tcp_output+0x156>
 801b2d0:	6a3b      	ldr	r3, [r7, #32]
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	623b      	str	r3, [r7, #32]
 801b2d6:	6a3b      	ldr	r3, [r7, #32]
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d1f8      	bne.n	801b2d0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801b2de:	e112      	b.n	801b506 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2e2:	68db      	ldr	r3, [r3, #12]
 801b2e4:	899b      	ldrh	r3, [r3, #12]
 801b2e6:	b29b      	uxth	r3, r3
 801b2e8:	4618      	mov	r0, r3
 801b2ea:	f7f8 ffdb 	bl	80142a4 <lwip_htons>
 801b2ee:	4603      	mov	r3, r0
 801b2f0:	b2db      	uxtb	r3, r3
 801b2f2:	f003 0304 	and.w	r3, r3, #4
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d006      	beq.n	801b308 <tcp_output+0x188>
 801b2fa:	4b43      	ldr	r3, [pc, #268]	; (801b408 <tcp_output+0x288>)
 801b2fc:	f240 5236 	movw	r2, #1334	; 0x536
 801b300:	4946      	ldr	r1, [pc, #280]	; (801b41c <tcp_output+0x29c>)
 801b302:	4843      	ldr	r0, [pc, #268]	; (801b410 <tcp_output+0x290>)
 801b304:	f003 fe22 	bl	801ef4c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d01f      	beq.n	801b350 <tcp_output+0x1d0>
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	8b5b      	ldrh	r3, [r3, #26]
 801b314:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d119      	bne.n	801b350 <tcp_output+0x1d0>
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b320:	2b00      	cmp	r3, #0
 801b322:	d00b      	beq.n	801b33c <tcp_output+0x1bc>
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b328:	681b      	ldr	r3, [r3, #0]
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d110      	bne.n	801b350 <tcp_output+0x1d0>
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b332:	891a      	ldrh	r2, [r3, #8]
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b338:	429a      	cmp	r2, r3
 801b33a:	d209      	bcs.n	801b350 <tcp_output+0x1d0>
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b342:	2b00      	cmp	r3, #0
 801b344:	d004      	beq.n	801b350 <tcp_output+0x1d0>
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b34c:	2b08      	cmp	r3, #8
 801b34e:	d901      	bls.n	801b354 <tcp_output+0x1d4>
 801b350:	2301      	movs	r3, #1
 801b352:	e000      	b.n	801b356 <tcp_output+0x1d6>
 801b354:	2300      	movs	r3, #0
 801b356:	2b00      	cmp	r3, #0
 801b358:	d106      	bne.n	801b368 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	8b5b      	ldrh	r3, [r3, #26]
 801b35e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b362:	2b00      	cmp	r3, #0
 801b364:	f000 80e4 	beq.w	801b530 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	7d1b      	ldrb	r3, [r3, #20]
 801b36c:	2b02      	cmp	r3, #2
 801b36e:	d00d      	beq.n	801b38c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b372:	68db      	ldr	r3, [r3, #12]
 801b374:	899b      	ldrh	r3, [r3, #12]
 801b376:	b29c      	uxth	r4, r3
 801b378:	2010      	movs	r0, #16
 801b37a:	f7f8 ff93 	bl	80142a4 <lwip_htons>
 801b37e:	4603      	mov	r3, r0
 801b380:	461a      	mov	r2, r3
 801b382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b384:	68db      	ldr	r3, [r3, #12]
 801b386:	4322      	orrs	r2, r4
 801b388:	b292      	uxth	r2, r2
 801b38a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b38c:	697a      	ldr	r2, [r7, #20]
 801b38e:	6879      	ldr	r1, [r7, #4]
 801b390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b392:	f000 f909 	bl	801b5a8 <tcp_output_segment>
 801b396:	4603      	mov	r3, r0
 801b398:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b39a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d009      	beq.n	801b3b6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	8b5b      	ldrh	r3, [r3, #26]
 801b3a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b3aa:	b29a      	uxth	r2, r3
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	835a      	strh	r2, [r3, #26]
      return err;
 801b3b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b3b4:	e0d3      	b.n	801b55e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3b8:	681a      	ldr	r2, [r3, #0]
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	7d1b      	ldrb	r3, [r3, #20]
 801b3c2:	2b02      	cmp	r3, #2
 801b3c4:	d006      	beq.n	801b3d4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	8b5b      	ldrh	r3, [r3, #26]
 801b3ca:	f023 0303 	bic.w	r3, r3, #3
 801b3ce:	b29a      	uxth	r2, r3
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3d6:	68db      	ldr	r3, [r3, #12]
 801b3d8:	685b      	ldr	r3, [r3, #4]
 801b3da:	4618      	mov	r0, r3
 801b3dc:	f7f8 ff77 	bl	80142ce <lwip_htonl>
 801b3e0:	4604      	mov	r4, r0
 801b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3e4:	891b      	ldrh	r3, [r3, #8]
 801b3e6:	461d      	mov	r5, r3
 801b3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3ea:	68db      	ldr	r3, [r3, #12]
 801b3ec:	899b      	ldrh	r3, [r3, #12]
 801b3ee:	b29b      	uxth	r3, r3
 801b3f0:	4618      	mov	r0, r3
 801b3f2:	f7f8 ff57 	bl	80142a4 <lwip_htons>
 801b3f6:	4603      	mov	r3, r0
 801b3f8:	b2db      	uxtb	r3, r3
 801b3fa:	f003 0303 	and.w	r3, r3, #3
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d00e      	beq.n	801b420 <tcp_output+0x2a0>
 801b402:	2301      	movs	r3, #1
 801b404:	e00d      	b.n	801b422 <tcp_output+0x2a2>
 801b406:	bf00      	nop
 801b408:	08022b14 	.word	0x08022b14
 801b40c:	08023058 	.word	0x08023058
 801b410:	08022b68 	.word	0x08022b68
 801b414:	08023070 	.word	0x08023070
 801b418:	20014770 	.word	0x20014770
 801b41c:	08023098 	.word	0x08023098
 801b420:	2300      	movs	r3, #0
 801b422:	442b      	add	r3, r5
 801b424:	4423      	add	r3, r4
 801b426:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b42c:	68bb      	ldr	r3, [r7, #8]
 801b42e:	1ad3      	subs	r3, r2, r3
 801b430:	2b00      	cmp	r3, #0
 801b432:	da02      	bge.n	801b43a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	68ba      	ldr	r2, [r7, #8]
 801b438:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b43c:	891b      	ldrh	r3, [r3, #8]
 801b43e:	461c      	mov	r4, r3
 801b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b442:	68db      	ldr	r3, [r3, #12]
 801b444:	899b      	ldrh	r3, [r3, #12]
 801b446:	b29b      	uxth	r3, r3
 801b448:	4618      	mov	r0, r3
 801b44a:	f7f8 ff2b 	bl	80142a4 <lwip_htons>
 801b44e:	4603      	mov	r3, r0
 801b450:	b2db      	uxtb	r3, r3
 801b452:	f003 0303 	and.w	r3, r3, #3
 801b456:	2b00      	cmp	r3, #0
 801b458:	d001      	beq.n	801b45e <tcp_output+0x2de>
 801b45a:	2301      	movs	r3, #1
 801b45c:	e000      	b.n	801b460 <tcp_output+0x2e0>
 801b45e:	2300      	movs	r3, #0
 801b460:	4423      	add	r3, r4
 801b462:	2b00      	cmp	r3, #0
 801b464:	d049      	beq.n	801b4fa <tcp_output+0x37a>
      seg->next = NULL;
 801b466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b468:	2200      	movs	r2, #0
 801b46a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b470:	2b00      	cmp	r3, #0
 801b472:	d105      	bne.n	801b480 <tcp_output+0x300>
        pcb->unacked = seg;
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b478:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b47c:	623b      	str	r3, [r7, #32]
 801b47e:	e03f      	b.n	801b500 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b482:	68db      	ldr	r3, [r3, #12]
 801b484:	685b      	ldr	r3, [r3, #4]
 801b486:	4618      	mov	r0, r3
 801b488:	f7f8 ff21 	bl	80142ce <lwip_htonl>
 801b48c:	4604      	mov	r4, r0
 801b48e:	6a3b      	ldr	r3, [r7, #32]
 801b490:	68db      	ldr	r3, [r3, #12]
 801b492:	685b      	ldr	r3, [r3, #4]
 801b494:	4618      	mov	r0, r3
 801b496:	f7f8 ff1a 	bl	80142ce <lwip_htonl>
 801b49a:	4603      	mov	r3, r0
 801b49c:	1ae3      	subs	r3, r4, r3
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	da24      	bge.n	801b4ec <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	3370      	adds	r3, #112	; 0x70
 801b4a6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b4a8:	e002      	b.n	801b4b0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801b4aa:	69fb      	ldr	r3, [r7, #28]
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b4b0:	69fb      	ldr	r3, [r7, #28]
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	d011      	beq.n	801b4dc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b4b8:	69fb      	ldr	r3, [r7, #28]
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	68db      	ldr	r3, [r3, #12]
 801b4be:	685b      	ldr	r3, [r3, #4]
 801b4c0:	4618      	mov	r0, r3
 801b4c2:	f7f8 ff04 	bl	80142ce <lwip_htonl>
 801b4c6:	4604      	mov	r4, r0
 801b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4ca:	68db      	ldr	r3, [r3, #12]
 801b4cc:	685b      	ldr	r3, [r3, #4]
 801b4ce:	4618      	mov	r0, r3
 801b4d0:	f7f8 fefd 	bl	80142ce <lwip_htonl>
 801b4d4:	4603      	mov	r3, r0
 801b4d6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	dbe6      	blt.n	801b4aa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801b4dc:	69fb      	ldr	r3, [r7, #28]
 801b4de:	681a      	ldr	r2, [r3, #0]
 801b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4e2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b4e4:	69fb      	ldr	r3, [r7, #28]
 801b4e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b4e8:	601a      	str	r2, [r3, #0]
 801b4ea:	e009      	b.n	801b500 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b4ec:	6a3b      	ldr	r3, [r7, #32]
 801b4ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b4f0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b4f2:	6a3b      	ldr	r3, [r7, #32]
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	623b      	str	r3, [r7, #32]
 801b4f8:	e002      	b.n	801b500 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b4fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b4fc:	f7fb feff 	bl	80172fe <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b504:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d012      	beq.n	801b532 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b50e:	68db      	ldr	r3, [r3, #12]
 801b510:	685b      	ldr	r3, [r3, #4]
 801b512:	4618      	mov	r0, r3
 801b514:	f7f8 fedb 	bl	80142ce <lwip_htonl>
 801b518:	4602      	mov	r2, r0
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b51e:	1ad3      	subs	r3, r2, r3
 801b520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b522:	8912      	ldrh	r2, [r2, #8]
 801b524:	4413      	add	r3, r2
  while (seg != NULL &&
 801b526:	69ba      	ldr	r2, [r7, #24]
 801b528:	429a      	cmp	r2, r3
 801b52a:	f4bf aed9 	bcs.w	801b2e0 <tcp_output+0x160>
 801b52e:	e000      	b.n	801b532 <tcp_output+0x3b2>
      break;
 801b530:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b536:	2b00      	cmp	r3, #0
 801b538:	d108      	bne.n	801b54c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	2200      	movs	r2, #0
 801b53e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801b542:	e004      	b.n	801b54e <tcp_output+0x3ce>
    goto output_done;
 801b544:	bf00      	nop
 801b546:	e002      	b.n	801b54e <tcp_output+0x3ce>
    goto output_done;
 801b548:	bf00      	nop
 801b54a:	e000      	b.n	801b54e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801b54c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	8b5b      	ldrh	r3, [r3, #26]
 801b552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b556:	b29a      	uxth	r2, r3
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801b55c:	2300      	movs	r3, #0
}
 801b55e:	4618      	mov	r0, r3
 801b560:	3728      	adds	r7, #40	; 0x28
 801b562:	46bd      	mov	sp, r7
 801b564:	bdb0      	pop	{r4, r5, r7, pc}
 801b566:	bf00      	nop

0801b568 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b568:	b580      	push	{r7, lr}
 801b56a:	b082      	sub	sp, #8
 801b56c:	af00      	add	r7, sp, #0
 801b56e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	2b00      	cmp	r3, #0
 801b574:	d106      	bne.n	801b584 <tcp_output_segment_busy+0x1c>
 801b576:	4b09      	ldr	r3, [pc, #36]	; (801b59c <tcp_output_segment_busy+0x34>)
 801b578:	f240 529a 	movw	r2, #1434	; 0x59a
 801b57c:	4908      	ldr	r1, [pc, #32]	; (801b5a0 <tcp_output_segment_busy+0x38>)
 801b57e:	4809      	ldr	r0, [pc, #36]	; (801b5a4 <tcp_output_segment_busy+0x3c>)
 801b580:	f003 fce4 	bl	801ef4c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	685b      	ldr	r3, [r3, #4]
 801b588:	7b9b      	ldrb	r3, [r3, #14]
 801b58a:	2b01      	cmp	r3, #1
 801b58c:	d001      	beq.n	801b592 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801b58e:	2301      	movs	r3, #1
 801b590:	e000      	b.n	801b594 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801b592:	2300      	movs	r3, #0
}
 801b594:	4618      	mov	r0, r3
 801b596:	3708      	adds	r7, #8
 801b598:	46bd      	mov	sp, r7
 801b59a:	bd80      	pop	{r7, pc}
 801b59c:	08022b14 	.word	0x08022b14
 801b5a0:	080230b0 	.word	0x080230b0
 801b5a4:	08022b68 	.word	0x08022b68

0801b5a8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b5a8:	b5b0      	push	{r4, r5, r7, lr}
 801b5aa:	b08c      	sub	sp, #48	; 0x30
 801b5ac:	af04      	add	r7, sp, #16
 801b5ae:	60f8      	str	r0, [r7, #12]
 801b5b0:	60b9      	str	r1, [r7, #8]
 801b5b2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d106      	bne.n	801b5c8 <tcp_output_segment+0x20>
 801b5ba:	4b63      	ldr	r3, [pc, #396]	; (801b748 <tcp_output_segment+0x1a0>)
 801b5bc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801b5c0:	4962      	ldr	r1, [pc, #392]	; (801b74c <tcp_output_segment+0x1a4>)
 801b5c2:	4863      	ldr	r0, [pc, #396]	; (801b750 <tcp_output_segment+0x1a8>)
 801b5c4:	f003 fcc2 	bl	801ef4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801b5c8:	68bb      	ldr	r3, [r7, #8]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d106      	bne.n	801b5dc <tcp_output_segment+0x34>
 801b5ce:	4b5e      	ldr	r3, [pc, #376]	; (801b748 <tcp_output_segment+0x1a0>)
 801b5d0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801b5d4:	495f      	ldr	r1, [pc, #380]	; (801b754 <tcp_output_segment+0x1ac>)
 801b5d6:	485e      	ldr	r0, [pc, #376]	; (801b750 <tcp_output_segment+0x1a8>)
 801b5d8:	f003 fcb8 	bl	801ef4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d106      	bne.n	801b5f0 <tcp_output_segment+0x48>
 801b5e2:	4b59      	ldr	r3, [pc, #356]	; (801b748 <tcp_output_segment+0x1a0>)
 801b5e4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801b5e8:	495b      	ldr	r1, [pc, #364]	; (801b758 <tcp_output_segment+0x1b0>)
 801b5ea:	4859      	ldr	r0, [pc, #356]	; (801b750 <tcp_output_segment+0x1a8>)
 801b5ec:	f003 fcae 	bl	801ef4c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801b5f0:	68f8      	ldr	r0, [r7, #12]
 801b5f2:	f7ff ffb9 	bl	801b568 <tcp_output_segment_busy>
 801b5f6:	4603      	mov	r3, r0
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d001      	beq.n	801b600 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801b5fc:	2300      	movs	r3, #0
 801b5fe:	e09f      	b.n	801b740 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b600:	68bb      	ldr	r3, [r7, #8]
 801b602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b604:	68fb      	ldr	r3, [r7, #12]
 801b606:	68dc      	ldr	r4, [r3, #12]
 801b608:	4610      	mov	r0, r2
 801b60a:	f7f8 fe60 	bl	80142ce <lwip_htonl>
 801b60e:	4603      	mov	r3, r0
 801b610:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b612:	68bb      	ldr	r3, [r7, #8]
 801b614:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801b616:	68fb      	ldr	r3, [r7, #12]
 801b618:	68dc      	ldr	r4, [r3, #12]
 801b61a:	4610      	mov	r0, r2
 801b61c:	f7f8 fe42 	bl	80142a4 <lwip_htons>
 801b620:	4603      	mov	r3, r0
 801b622:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b624:	68bb      	ldr	r3, [r7, #8]
 801b626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b628:	68ba      	ldr	r2, [r7, #8]
 801b62a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b62c:	441a      	add	r2, r3
 801b62e:	68bb      	ldr	r3, [r7, #8]
 801b630:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	68db      	ldr	r3, [r3, #12]
 801b636:	3314      	adds	r3, #20
 801b638:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b63a:	68fb      	ldr	r3, [r7, #12]
 801b63c:	7a9b      	ldrb	r3, [r3, #10]
 801b63e:	f003 0301 	and.w	r3, r3, #1
 801b642:	2b00      	cmp	r3, #0
 801b644:	d015      	beq.n	801b672 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b646:	68bb      	ldr	r3, [r7, #8]
 801b648:	3304      	adds	r3, #4
 801b64a:	461a      	mov	r2, r3
 801b64c:	6879      	ldr	r1, [r7, #4]
 801b64e:	f44f 7006 	mov.w	r0, #536	; 0x218
 801b652:	f7fc fa37 	bl	8017ac4 <tcp_eff_send_mss_netif>
 801b656:	4603      	mov	r3, r0
 801b658:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b65a:	8b7b      	ldrh	r3, [r7, #26]
 801b65c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801b660:	4618      	mov	r0, r3
 801b662:	f7f8 fe34 	bl	80142ce <lwip_htonl>
 801b666:	4602      	mov	r2, r0
 801b668:	69fb      	ldr	r3, [r7, #28]
 801b66a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b66c:	69fb      	ldr	r3, [r7, #28]
 801b66e:	3304      	adds	r3, #4
 801b670:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b672:	68bb      	ldr	r3, [r7, #8]
 801b674:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b678:	2b00      	cmp	r3, #0
 801b67a:	da02      	bge.n	801b682 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801b67c:	68bb      	ldr	r3, [r7, #8]
 801b67e:	2200      	movs	r2, #0
 801b680:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801b682:	68bb      	ldr	r3, [r7, #8]
 801b684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b686:	2b00      	cmp	r3, #0
 801b688:	d10c      	bne.n	801b6a4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801b68a:	4b34      	ldr	r3, [pc, #208]	; (801b75c <tcp_output_segment+0x1b4>)
 801b68c:	681a      	ldr	r2, [r3, #0]
 801b68e:	68bb      	ldr	r3, [r7, #8]
 801b690:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b692:	68fb      	ldr	r3, [r7, #12]
 801b694:	68db      	ldr	r3, [r3, #12]
 801b696:	685b      	ldr	r3, [r3, #4]
 801b698:	4618      	mov	r0, r3
 801b69a:	f7f8 fe18 	bl	80142ce <lwip_htonl>
 801b69e:	4602      	mov	r2, r0
 801b6a0:	68bb      	ldr	r3, [r7, #8]
 801b6a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b6a4:	68fb      	ldr	r3, [r7, #12]
 801b6a6:	68da      	ldr	r2, [r3, #12]
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	685b      	ldr	r3, [r3, #4]
 801b6ac:	685b      	ldr	r3, [r3, #4]
 801b6ae:	1ad3      	subs	r3, r2, r3
 801b6b0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	685b      	ldr	r3, [r3, #4]
 801b6b6:	8959      	ldrh	r1, [r3, #10]
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	685b      	ldr	r3, [r3, #4]
 801b6bc:	8b3a      	ldrh	r2, [r7, #24]
 801b6be:	1a8a      	subs	r2, r1, r2
 801b6c0:	b292      	uxth	r2, r2
 801b6c2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801b6c4:	68fb      	ldr	r3, [r7, #12]
 801b6c6:	685b      	ldr	r3, [r3, #4]
 801b6c8:	8919      	ldrh	r1, [r3, #8]
 801b6ca:	68fb      	ldr	r3, [r7, #12]
 801b6cc:	685b      	ldr	r3, [r3, #4]
 801b6ce:	8b3a      	ldrh	r2, [r7, #24]
 801b6d0:	1a8a      	subs	r2, r1, r2
 801b6d2:	b292      	uxth	r2, r2
 801b6d4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801b6d6:	68fb      	ldr	r3, [r7, #12]
 801b6d8:	685b      	ldr	r3, [r3, #4]
 801b6da:	68fa      	ldr	r2, [r7, #12]
 801b6dc:	68d2      	ldr	r2, [r2, #12]
 801b6de:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	68db      	ldr	r3, [r3, #12]
 801b6e4:	2200      	movs	r2, #0
 801b6e6:	741a      	strb	r2, [r3, #16]
 801b6e8:	2200      	movs	r2, #0
 801b6ea:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b6ec:	68fb      	ldr	r3, [r7, #12]
 801b6ee:	68db      	ldr	r3, [r3, #12]
 801b6f0:	f103 0214 	add.w	r2, r3, #20
 801b6f4:	68fb      	ldr	r3, [r7, #12]
 801b6f6:	7a9b      	ldrb	r3, [r3, #10]
 801b6f8:	009b      	lsls	r3, r3, #2
 801b6fa:	f003 0304 	and.w	r3, r3, #4
 801b6fe:	4413      	add	r3, r2
 801b700:	69fa      	ldr	r2, [r7, #28]
 801b702:	429a      	cmp	r2, r3
 801b704:	d006      	beq.n	801b714 <tcp_output_segment+0x16c>
 801b706:	4b10      	ldr	r3, [pc, #64]	; (801b748 <tcp_output_segment+0x1a0>)
 801b708:	f240 621c 	movw	r2, #1564	; 0x61c
 801b70c:	4914      	ldr	r1, [pc, #80]	; (801b760 <tcp_output_segment+0x1b8>)
 801b70e:	4810      	ldr	r0, [pc, #64]	; (801b750 <tcp_output_segment+0x1a8>)
 801b710:	f003 fc1c 	bl	801ef4c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b714:	68fb      	ldr	r3, [r7, #12]
 801b716:	6858      	ldr	r0, [r3, #4]
 801b718:	68b9      	ldr	r1, [r7, #8]
 801b71a:	68bb      	ldr	r3, [r7, #8]
 801b71c:	1d1c      	adds	r4, r3, #4
 801b71e:	68bb      	ldr	r3, [r7, #8]
 801b720:	7add      	ldrb	r5, [r3, #11]
 801b722:	68bb      	ldr	r3, [r7, #8]
 801b724:	7a9b      	ldrb	r3, [r3, #10]
 801b726:	687a      	ldr	r2, [r7, #4]
 801b728:	9202      	str	r2, [sp, #8]
 801b72a:	2206      	movs	r2, #6
 801b72c:	9201      	str	r2, [sp, #4]
 801b72e:	9300      	str	r3, [sp, #0]
 801b730:	462b      	mov	r3, r5
 801b732:	4622      	mov	r2, r4
 801b734:	f002 fa66 	bl	801dc04 <ip4_output_if>
 801b738:	4603      	mov	r3, r0
 801b73a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b73c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b740:	4618      	mov	r0, r3
 801b742:	3720      	adds	r7, #32
 801b744:	46bd      	mov	sp, r7
 801b746:	bdb0      	pop	{r4, r5, r7, pc}
 801b748:	08022b14 	.word	0x08022b14
 801b74c:	080230d8 	.word	0x080230d8
 801b750:	08022b68 	.word	0x08022b68
 801b754:	080230f8 	.word	0x080230f8
 801b758:	08023118 	.word	0x08023118
 801b75c:	20014760 	.word	0x20014760
 801b760:	0802313c 	.word	0x0802313c

0801b764 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b764:	b5b0      	push	{r4, r5, r7, lr}
 801b766:	b084      	sub	sp, #16
 801b768:	af00      	add	r7, sp, #0
 801b76a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d106      	bne.n	801b780 <tcp_rexmit_rto_prepare+0x1c>
 801b772:	4b31      	ldr	r3, [pc, #196]	; (801b838 <tcp_rexmit_rto_prepare+0xd4>)
 801b774:	f240 6263 	movw	r2, #1635	; 0x663
 801b778:	4930      	ldr	r1, [pc, #192]	; (801b83c <tcp_rexmit_rto_prepare+0xd8>)
 801b77a:	4831      	ldr	r0, [pc, #196]	; (801b840 <tcp_rexmit_rto_prepare+0xdc>)
 801b77c:	f003 fbe6 	bl	801ef4c <iprintf>

  if (pcb->unacked == NULL) {
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b784:	2b00      	cmp	r3, #0
 801b786:	d102      	bne.n	801b78e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b788:	f06f 0305 	mvn.w	r3, #5
 801b78c:	e050      	b.n	801b830 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b792:	60fb      	str	r3, [r7, #12]
 801b794:	e00b      	b.n	801b7ae <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b796:	68f8      	ldr	r0, [r7, #12]
 801b798:	f7ff fee6 	bl	801b568 <tcp_output_segment_busy>
 801b79c:	4603      	mov	r3, r0
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d002      	beq.n	801b7a8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b7a2:	f06f 0305 	mvn.w	r3, #5
 801b7a6:	e043      	b.n	801b830 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b7a8:	68fb      	ldr	r3, [r7, #12]
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	60fb      	str	r3, [r7, #12]
 801b7ae:	68fb      	ldr	r3, [r7, #12]
 801b7b0:	681b      	ldr	r3, [r3, #0]
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d1ef      	bne.n	801b796 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b7b6:	68f8      	ldr	r0, [r7, #12]
 801b7b8:	f7ff fed6 	bl	801b568 <tcp_output_segment_busy>
 801b7bc:	4603      	mov	r3, r0
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d002      	beq.n	801b7c8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b7c2:	f06f 0305 	mvn.w	r3, #5
 801b7c6:	e033      	b.n	801b830 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b7cc:	68fb      	ldr	r3, [r7, #12]
 801b7ce:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	2200      	movs	r2, #0
 801b7dc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	8b5b      	ldrh	r3, [r3, #26]
 801b7e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b7e6:	b29a      	uxth	r2, r3
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b7ec:	68fb      	ldr	r3, [r7, #12]
 801b7ee:	68db      	ldr	r3, [r3, #12]
 801b7f0:	685b      	ldr	r3, [r3, #4]
 801b7f2:	4618      	mov	r0, r3
 801b7f4:	f7f8 fd6b 	bl	80142ce <lwip_htonl>
 801b7f8:	4604      	mov	r4, r0
 801b7fa:	68fb      	ldr	r3, [r7, #12]
 801b7fc:	891b      	ldrh	r3, [r3, #8]
 801b7fe:	461d      	mov	r5, r3
 801b800:	68fb      	ldr	r3, [r7, #12]
 801b802:	68db      	ldr	r3, [r3, #12]
 801b804:	899b      	ldrh	r3, [r3, #12]
 801b806:	b29b      	uxth	r3, r3
 801b808:	4618      	mov	r0, r3
 801b80a:	f7f8 fd4b 	bl	80142a4 <lwip_htons>
 801b80e:	4603      	mov	r3, r0
 801b810:	b2db      	uxtb	r3, r3
 801b812:	f003 0303 	and.w	r3, r3, #3
 801b816:	2b00      	cmp	r3, #0
 801b818:	d001      	beq.n	801b81e <tcp_rexmit_rto_prepare+0xba>
 801b81a:	2301      	movs	r3, #1
 801b81c:	e000      	b.n	801b820 <tcp_rexmit_rto_prepare+0xbc>
 801b81e:	2300      	movs	r3, #0
 801b820:	442b      	add	r3, r5
 801b822:	18e2      	adds	r2, r4, r3
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	2200      	movs	r2, #0
 801b82c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801b82e:	2300      	movs	r3, #0
}
 801b830:	4618      	mov	r0, r3
 801b832:	3710      	adds	r7, #16
 801b834:	46bd      	mov	sp, r7
 801b836:	bdb0      	pop	{r4, r5, r7, pc}
 801b838:	08022b14 	.word	0x08022b14
 801b83c:	08023150 	.word	0x08023150
 801b840:	08022b68 	.word	0x08022b68

0801b844 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b844:	b580      	push	{r7, lr}
 801b846:	b082      	sub	sp, #8
 801b848:	af00      	add	r7, sp, #0
 801b84a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d106      	bne.n	801b860 <tcp_rexmit_rto_commit+0x1c>
 801b852:	4b0d      	ldr	r3, [pc, #52]	; (801b888 <tcp_rexmit_rto_commit+0x44>)
 801b854:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801b858:	490c      	ldr	r1, [pc, #48]	; (801b88c <tcp_rexmit_rto_commit+0x48>)
 801b85a:	480d      	ldr	r0, [pc, #52]	; (801b890 <tcp_rexmit_rto_commit+0x4c>)
 801b85c:	f003 fb76 	bl	801ef4c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b866:	2bff      	cmp	r3, #255	; 0xff
 801b868:	d007      	beq.n	801b87a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b870:	3301      	adds	r3, #1
 801b872:	b2da      	uxtb	r2, r3
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b87a:	6878      	ldr	r0, [r7, #4]
 801b87c:	f7ff fc80 	bl	801b180 <tcp_output>
}
 801b880:	bf00      	nop
 801b882:	3708      	adds	r7, #8
 801b884:	46bd      	mov	sp, r7
 801b886:	bd80      	pop	{r7, pc}
 801b888:	08022b14 	.word	0x08022b14
 801b88c:	08023174 	.word	0x08023174
 801b890:	08022b68 	.word	0x08022b68

0801b894 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b894:	b580      	push	{r7, lr}
 801b896:	b082      	sub	sp, #8
 801b898:	af00      	add	r7, sp, #0
 801b89a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d106      	bne.n	801b8b0 <tcp_rexmit_rto+0x1c>
 801b8a2:	4b0a      	ldr	r3, [pc, #40]	; (801b8cc <tcp_rexmit_rto+0x38>)
 801b8a4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801b8a8:	4909      	ldr	r1, [pc, #36]	; (801b8d0 <tcp_rexmit_rto+0x3c>)
 801b8aa:	480a      	ldr	r0, [pc, #40]	; (801b8d4 <tcp_rexmit_rto+0x40>)
 801b8ac:	f003 fb4e 	bl	801ef4c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b8b0:	6878      	ldr	r0, [r7, #4]
 801b8b2:	f7ff ff57 	bl	801b764 <tcp_rexmit_rto_prepare>
 801b8b6:	4603      	mov	r3, r0
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d102      	bne.n	801b8c2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b8bc:	6878      	ldr	r0, [r7, #4]
 801b8be:	f7ff ffc1 	bl	801b844 <tcp_rexmit_rto_commit>
  }
}
 801b8c2:	bf00      	nop
 801b8c4:	3708      	adds	r7, #8
 801b8c6:	46bd      	mov	sp, r7
 801b8c8:	bd80      	pop	{r7, pc}
 801b8ca:	bf00      	nop
 801b8cc:	08022b14 	.word	0x08022b14
 801b8d0:	08023198 	.word	0x08023198
 801b8d4:	08022b68 	.word	0x08022b68

0801b8d8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b8d8:	b590      	push	{r4, r7, lr}
 801b8da:	b085      	sub	sp, #20
 801b8dc:	af00      	add	r7, sp, #0
 801b8de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d106      	bne.n	801b8f4 <tcp_rexmit+0x1c>
 801b8e6:	4b2f      	ldr	r3, [pc, #188]	; (801b9a4 <tcp_rexmit+0xcc>)
 801b8e8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801b8ec:	492e      	ldr	r1, [pc, #184]	; (801b9a8 <tcp_rexmit+0xd0>)
 801b8ee:	482f      	ldr	r0, [pc, #188]	; (801b9ac <tcp_rexmit+0xd4>)
 801b8f0:	f003 fb2c 	bl	801ef4c <iprintf>

  if (pcb->unacked == NULL) {
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d102      	bne.n	801b902 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b8fc:	f06f 0305 	mvn.w	r3, #5
 801b900:	e04c      	b.n	801b99c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b906:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b908:	68b8      	ldr	r0, [r7, #8]
 801b90a:	f7ff fe2d 	bl	801b568 <tcp_output_segment_busy>
 801b90e:	4603      	mov	r3, r0
 801b910:	2b00      	cmp	r3, #0
 801b912:	d002      	beq.n	801b91a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b914:	f06f 0305 	mvn.w	r3, #5
 801b918:	e040      	b.n	801b99c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b91a:	68bb      	ldr	r3, [r7, #8]
 801b91c:	681a      	ldr	r2, [r3, #0]
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	336c      	adds	r3, #108	; 0x6c
 801b926:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b928:	e002      	b.n	801b930 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b92a:	68fb      	ldr	r3, [r7, #12]
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b930:	68fb      	ldr	r3, [r7, #12]
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	2b00      	cmp	r3, #0
 801b936:	d011      	beq.n	801b95c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	681b      	ldr	r3, [r3, #0]
 801b93c:	68db      	ldr	r3, [r3, #12]
 801b93e:	685b      	ldr	r3, [r3, #4]
 801b940:	4618      	mov	r0, r3
 801b942:	f7f8 fcc4 	bl	80142ce <lwip_htonl>
 801b946:	4604      	mov	r4, r0
 801b948:	68bb      	ldr	r3, [r7, #8]
 801b94a:	68db      	ldr	r3, [r3, #12]
 801b94c:	685b      	ldr	r3, [r3, #4]
 801b94e:	4618      	mov	r0, r3
 801b950:	f7f8 fcbd 	bl	80142ce <lwip_htonl>
 801b954:	4603      	mov	r3, r0
 801b956:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b958:	2b00      	cmp	r3, #0
 801b95a:	dbe6      	blt.n	801b92a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b95c:	68fb      	ldr	r3, [r7, #12]
 801b95e:	681a      	ldr	r2, [r3, #0]
 801b960:	68bb      	ldr	r3, [r7, #8]
 801b962:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b964:	68fb      	ldr	r3, [r7, #12]
 801b966:	68ba      	ldr	r2, [r7, #8]
 801b968:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b96a:	68bb      	ldr	r3, [r7, #8]
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	2b00      	cmp	r3, #0
 801b970:	d103      	bne.n	801b97a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	2200      	movs	r2, #0
 801b976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b980:	2bff      	cmp	r3, #255	; 0xff
 801b982:	d007      	beq.n	801b994 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b98a:	3301      	adds	r3, #1
 801b98c:	b2da      	uxtb	r2, r3
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	2200      	movs	r2, #0
 801b998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b99a:	2300      	movs	r3, #0
}
 801b99c:	4618      	mov	r0, r3
 801b99e:	3714      	adds	r7, #20
 801b9a0:	46bd      	mov	sp, r7
 801b9a2:	bd90      	pop	{r4, r7, pc}
 801b9a4:	08022b14 	.word	0x08022b14
 801b9a8:	080231b4 	.word	0x080231b4
 801b9ac:	08022b68 	.word	0x08022b68

0801b9b0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b9b0:	b580      	push	{r7, lr}
 801b9b2:	b082      	sub	sp, #8
 801b9b4:	af00      	add	r7, sp, #0
 801b9b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d106      	bne.n	801b9cc <tcp_rexmit_fast+0x1c>
 801b9be:	4b2a      	ldr	r3, [pc, #168]	; (801ba68 <tcp_rexmit_fast+0xb8>)
 801b9c0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801b9c4:	4929      	ldr	r1, [pc, #164]	; (801ba6c <tcp_rexmit_fast+0xbc>)
 801b9c6:	482a      	ldr	r0, [pc, #168]	; (801ba70 <tcp_rexmit_fast+0xc0>)
 801b9c8:	f003 fac0 	bl	801ef4c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	d044      	beq.n	801ba5e <tcp_rexmit_fast+0xae>
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	8b5b      	ldrh	r3, [r3, #26]
 801b9d8:	f003 0304 	and.w	r3, r3, #4
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d13e      	bne.n	801ba5e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b9e0:	6878      	ldr	r0, [r7, #4]
 801b9e2:	f7ff ff79 	bl	801b8d8 <tcp_rexmit>
 801b9e6:	4603      	mov	r3, r0
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d138      	bne.n	801ba5e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b9f8:	4293      	cmp	r3, r2
 801b9fa:	bf28      	it	cs
 801b9fc:	4613      	movcs	r3, r2
 801b9fe:	b29b      	uxth	r3, r3
 801ba00:	0fda      	lsrs	r2, r3, #31
 801ba02:	4413      	add	r3, r2
 801ba04:	105b      	asrs	r3, r3, #1
 801ba06:	b29a      	uxth	r2, r3
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801ba14:	461a      	mov	r2, r3
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ba1a:	005b      	lsls	r3, r3, #1
 801ba1c:	429a      	cmp	r2, r3
 801ba1e:	d206      	bcs.n	801ba2e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ba24:	005b      	lsls	r3, r3, #1
 801ba26:	b29a      	uxth	r2, r3
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ba2e:	687b      	ldr	r3, [r7, #4]
 801ba30:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ba38:	4619      	mov	r1, r3
 801ba3a:	0049      	lsls	r1, r1, #1
 801ba3c:	440b      	add	r3, r1
 801ba3e:	b29b      	uxth	r3, r3
 801ba40:	4413      	add	r3, r2
 801ba42:	b29a      	uxth	r2, r3
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	8b5b      	ldrh	r3, [r3, #26]
 801ba4e:	f043 0304 	orr.w	r3, r3, #4
 801ba52:	b29a      	uxth	r2, r3
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	2200      	movs	r2, #0
 801ba5c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801ba5e:	bf00      	nop
 801ba60:	3708      	adds	r7, #8
 801ba62:	46bd      	mov	sp, r7
 801ba64:	bd80      	pop	{r7, pc}
 801ba66:	bf00      	nop
 801ba68:	08022b14 	.word	0x08022b14
 801ba6c:	080231cc 	.word	0x080231cc
 801ba70:	08022b68 	.word	0x08022b68

0801ba74 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ba74:	b580      	push	{r7, lr}
 801ba76:	b086      	sub	sp, #24
 801ba78:	af00      	add	r7, sp, #0
 801ba7a:	60f8      	str	r0, [r7, #12]
 801ba7c:	607b      	str	r3, [r7, #4]
 801ba7e:	460b      	mov	r3, r1
 801ba80:	817b      	strh	r3, [r7, #10]
 801ba82:	4613      	mov	r3, r2
 801ba84:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ba86:	897a      	ldrh	r2, [r7, #10]
 801ba88:	893b      	ldrh	r3, [r7, #8]
 801ba8a:	4413      	add	r3, r2
 801ba8c:	b29b      	uxth	r3, r3
 801ba8e:	3314      	adds	r3, #20
 801ba90:	b29b      	uxth	r3, r3
 801ba92:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ba96:	4619      	mov	r1, r3
 801ba98:	2022      	movs	r0, #34	; 0x22
 801ba9a:	f7f9 fd01 	bl	80154a0 <pbuf_alloc>
 801ba9e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801baa0:	697b      	ldr	r3, [r7, #20]
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d04d      	beq.n	801bb42 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801baa6:	897b      	ldrh	r3, [r7, #10]
 801baa8:	3313      	adds	r3, #19
 801baaa:	697a      	ldr	r2, [r7, #20]
 801baac:	8952      	ldrh	r2, [r2, #10]
 801baae:	4293      	cmp	r3, r2
 801bab0:	db06      	blt.n	801bac0 <tcp_output_alloc_header_common+0x4c>
 801bab2:	4b26      	ldr	r3, [pc, #152]	; (801bb4c <tcp_output_alloc_header_common+0xd8>)
 801bab4:	f240 7223 	movw	r2, #1827	; 0x723
 801bab8:	4925      	ldr	r1, [pc, #148]	; (801bb50 <tcp_output_alloc_header_common+0xdc>)
 801baba:	4826      	ldr	r0, [pc, #152]	; (801bb54 <tcp_output_alloc_header_common+0xe0>)
 801babc:	f003 fa46 	bl	801ef4c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801bac0:	697b      	ldr	r3, [r7, #20]
 801bac2:	685b      	ldr	r3, [r3, #4]
 801bac4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801bac6:	8c3b      	ldrh	r3, [r7, #32]
 801bac8:	4618      	mov	r0, r3
 801baca:	f7f8 fbeb 	bl	80142a4 <lwip_htons>
 801bace:	4603      	mov	r3, r0
 801bad0:	461a      	mov	r2, r3
 801bad2:	693b      	ldr	r3, [r7, #16]
 801bad4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801bad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bad8:	4618      	mov	r0, r3
 801bada:	f7f8 fbe3 	bl	80142a4 <lwip_htons>
 801bade:	4603      	mov	r3, r0
 801bae0:	461a      	mov	r2, r3
 801bae2:	693b      	ldr	r3, [r7, #16]
 801bae4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801bae6:	693b      	ldr	r3, [r7, #16]
 801bae8:	687a      	ldr	r2, [r7, #4]
 801baea:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801baec:	68f8      	ldr	r0, [r7, #12]
 801baee:	f7f8 fbee 	bl	80142ce <lwip_htonl>
 801baf2:	4602      	mov	r2, r0
 801baf4:	693b      	ldr	r3, [r7, #16]
 801baf6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801baf8:	897b      	ldrh	r3, [r7, #10]
 801bafa:	089b      	lsrs	r3, r3, #2
 801bafc:	b29b      	uxth	r3, r3
 801bafe:	3305      	adds	r3, #5
 801bb00:	b29b      	uxth	r3, r3
 801bb02:	031b      	lsls	r3, r3, #12
 801bb04:	b29a      	uxth	r2, r3
 801bb06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bb0a:	b29b      	uxth	r3, r3
 801bb0c:	4313      	orrs	r3, r2
 801bb0e:	b29b      	uxth	r3, r3
 801bb10:	4618      	mov	r0, r3
 801bb12:	f7f8 fbc7 	bl	80142a4 <lwip_htons>
 801bb16:	4603      	mov	r3, r0
 801bb18:	461a      	mov	r2, r3
 801bb1a:	693b      	ldr	r3, [r7, #16]
 801bb1c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801bb1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801bb20:	4618      	mov	r0, r3
 801bb22:	f7f8 fbbf 	bl	80142a4 <lwip_htons>
 801bb26:	4603      	mov	r3, r0
 801bb28:	461a      	mov	r2, r3
 801bb2a:	693b      	ldr	r3, [r7, #16]
 801bb2c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801bb2e:	693b      	ldr	r3, [r7, #16]
 801bb30:	2200      	movs	r2, #0
 801bb32:	741a      	strb	r2, [r3, #16]
 801bb34:	2200      	movs	r2, #0
 801bb36:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801bb38:	693b      	ldr	r3, [r7, #16]
 801bb3a:	2200      	movs	r2, #0
 801bb3c:	749a      	strb	r2, [r3, #18]
 801bb3e:	2200      	movs	r2, #0
 801bb40:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801bb42:	697b      	ldr	r3, [r7, #20]
}
 801bb44:	4618      	mov	r0, r3
 801bb46:	3718      	adds	r7, #24
 801bb48:	46bd      	mov	sp, r7
 801bb4a:	bd80      	pop	{r7, pc}
 801bb4c:	08022b14 	.word	0x08022b14
 801bb50:	080231ec 	.word	0x080231ec
 801bb54:	08022b68 	.word	0x08022b68

0801bb58 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801bb58:	b5b0      	push	{r4, r5, r7, lr}
 801bb5a:	b08a      	sub	sp, #40	; 0x28
 801bb5c:	af04      	add	r7, sp, #16
 801bb5e:	60f8      	str	r0, [r7, #12]
 801bb60:	607b      	str	r3, [r7, #4]
 801bb62:	460b      	mov	r3, r1
 801bb64:	817b      	strh	r3, [r7, #10]
 801bb66:	4613      	mov	r3, r2
 801bb68:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801bb6a:	68fb      	ldr	r3, [r7, #12]
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d106      	bne.n	801bb7e <tcp_output_alloc_header+0x26>
 801bb70:	4b15      	ldr	r3, [pc, #84]	; (801bbc8 <tcp_output_alloc_header+0x70>)
 801bb72:	f240 7242 	movw	r2, #1858	; 0x742
 801bb76:	4915      	ldr	r1, [pc, #84]	; (801bbcc <tcp_output_alloc_header+0x74>)
 801bb78:	4815      	ldr	r0, [pc, #84]	; (801bbd0 <tcp_output_alloc_header+0x78>)
 801bb7a:	f003 f9e7 	bl	801ef4c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801bb82:	68fb      	ldr	r3, [r7, #12]
 801bb84:	8adb      	ldrh	r3, [r3, #22]
 801bb86:	68fa      	ldr	r2, [r7, #12]
 801bb88:	8b12      	ldrh	r2, [r2, #24]
 801bb8a:	68f9      	ldr	r1, [r7, #12]
 801bb8c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801bb8e:	893d      	ldrh	r5, [r7, #8]
 801bb90:	897c      	ldrh	r4, [r7, #10]
 801bb92:	9103      	str	r1, [sp, #12]
 801bb94:	2110      	movs	r1, #16
 801bb96:	9102      	str	r1, [sp, #8]
 801bb98:	9201      	str	r2, [sp, #4]
 801bb9a:	9300      	str	r3, [sp, #0]
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	462a      	mov	r2, r5
 801bba0:	4621      	mov	r1, r4
 801bba2:	f7ff ff67 	bl	801ba74 <tcp_output_alloc_header_common>
 801bba6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801bba8:	697b      	ldr	r3, [r7, #20]
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d006      	beq.n	801bbbc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bbae:	68fb      	ldr	r3, [r7, #12]
 801bbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbb2:	68fa      	ldr	r2, [r7, #12]
 801bbb4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801bbb6:	441a      	add	r2, r3
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801bbbc:	697b      	ldr	r3, [r7, #20]
}
 801bbbe:	4618      	mov	r0, r3
 801bbc0:	3718      	adds	r7, #24
 801bbc2:	46bd      	mov	sp, r7
 801bbc4:	bdb0      	pop	{r4, r5, r7, pc}
 801bbc6:	bf00      	nop
 801bbc8:	08022b14 	.word	0x08022b14
 801bbcc:	0802321c 	.word	0x0802321c
 801bbd0:	08022b68 	.word	0x08022b68

0801bbd4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801bbd4:	b580      	push	{r7, lr}
 801bbd6:	b088      	sub	sp, #32
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	60f8      	str	r0, [r7, #12]
 801bbdc:	60b9      	str	r1, [r7, #8]
 801bbde:	4611      	mov	r1, r2
 801bbe0:	461a      	mov	r2, r3
 801bbe2:	460b      	mov	r3, r1
 801bbe4:	71fb      	strb	r3, [r7, #7]
 801bbe6:	4613      	mov	r3, r2
 801bbe8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801bbea:	2300      	movs	r3, #0
 801bbec:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801bbee:	68bb      	ldr	r3, [r7, #8]
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	d106      	bne.n	801bc02 <tcp_output_fill_options+0x2e>
 801bbf4:	4b13      	ldr	r3, [pc, #76]	; (801bc44 <tcp_output_fill_options+0x70>)
 801bbf6:	f240 7256 	movw	r2, #1878	; 0x756
 801bbfa:	4913      	ldr	r1, [pc, #76]	; (801bc48 <tcp_output_fill_options+0x74>)
 801bbfc:	4813      	ldr	r0, [pc, #76]	; (801bc4c <tcp_output_fill_options+0x78>)
 801bbfe:	f003 f9a5 	bl	801ef4c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801bc02:	68bb      	ldr	r3, [r7, #8]
 801bc04:	685b      	ldr	r3, [r3, #4]
 801bc06:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801bc08:	69bb      	ldr	r3, [r7, #24]
 801bc0a:	3314      	adds	r3, #20
 801bc0c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801bc0e:	69bb      	ldr	r3, [r7, #24]
 801bc10:	f103 0214 	add.w	r2, r3, #20
 801bc14:	8bfb      	ldrh	r3, [r7, #30]
 801bc16:	009b      	lsls	r3, r3, #2
 801bc18:	4619      	mov	r1, r3
 801bc1a:	79fb      	ldrb	r3, [r7, #7]
 801bc1c:	009b      	lsls	r3, r3, #2
 801bc1e:	f003 0304 	and.w	r3, r3, #4
 801bc22:	440b      	add	r3, r1
 801bc24:	4413      	add	r3, r2
 801bc26:	697a      	ldr	r2, [r7, #20]
 801bc28:	429a      	cmp	r2, r3
 801bc2a:	d006      	beq.n	801bc3a <tcp_output_fill_options+0x66>
 801bc2c:	4b05      	ldr	r3, [pc, #20]	; (801bc44 <tcp_output_fill_options+0x70>)
 801bc2e:	f240 7275 	movw	r2, #1909	; 0x775
 801bc32:	4907      	ldr	r1, [pc, #28]	; (801bc50 <tcp_output_fill_options+0x7c>)
 801bc34:	4805      	ldr	r0, [pc, #20]	; (801bc4c <tcp_output_fill_options+0x78>)
 801bc36:	f003 f989 	bl	801ef4c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801bc3a:	bf00      	nop
 801bc3c:	3720      	adds	r7, #32
 801bc3e:	46bd      	mov	sp, r7
 801bc40:	bd80      	pop	{r7, pc}
 801bc42:	bf00      	nop
 801bc44:	08022b14 	.word	0x08022b14
 801bc48:	08023244 	.word	0x08023244
 801bc4c:	08022b68 	.word	0x08022b68
 801bc50:	0802313c 	.word	0x0802313c

0801bc54 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801bc54:	b580      	push	{r7, lr}
 801bc56:	b08a      	sub	sp, #40	; 0x28
 801bc58:	af04      	add	r7, sp, #16
 801bc5a:	60f8      	str	r0, [r7, #12]
 801bc5c:	60b9      	str	r1, [r7, #8]
 801bc5e:	607a      	str	r2, [r7, #4]
 801bc60:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801bc62:	68bb      	ldr	r3, [r7, #8]
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	d106      	bne.n	801bc76 <tcp_output_control_segment+0x22>
 801bc68:	4b1c      	ldr	r3, [pc, #112]	; (801bcdc <tcp_output_control_segment+0x88>)
 801bc6a:	f240 7287 	movw	r2, #1927	; 0x787
 801bc6e:	491c      	ldr	r1, [pc, #112]	; (801bce0 <tcp_output_control_segment+0x8c>)
 801bc70:	481c      	ldr	r0, [pc, #112]	; (801bce4 <tcp_output_control_segment+0x90>)
 801bc72:	f003 f96b 	bl	801ef4c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801bc76:	683a      	ldr	r2, [r7, #0]
 801bc78:	6879      	ldr	r1, [r7, #4]
 801bc7a:	68f8      	ldr	r0, [r7, #12]
 801bc7c:	f7fe fae8 	bl	801a250 <tcp_route>
 801bc80:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801bc82:	693b      	ldr	r3, [r7, #16]
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	d102      	bne.n	801bc8e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801bc88:	23fc      	movs	r3, #252	; 0xfc
 801bc8a:	75fb      	strb	r3, [r7, #23]
 801bc8c:	e01c      	b.n	801bcc8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d006      	beq.n	801bca2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	7adb      	ldrb	r3, [r3, #11]
 801bc98:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	7a9b      	ldrb	r3, [r3, #10]
 801bc9e:	757b      	strb	r3, [r7, #21]
 801bca0:	e003      	b.n	801bcaa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801bca2:	23ff      	movs	r3, #255	; 0xff
 801bca4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801bca6:	2300      	movs	r3, #0
 801bca8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801bcaa:	7dba      	ldrb	r2, [r7, #22]
 801bcac:	693b      	ldr	r3, [r7, #16]
 801bcae:	9302      	str	r3, [sp, #8]
 801bcb0:	2306      	movs	r3, #6
 801bcb2:	9301      	str	r3, [sp, #4]
 801bcb4:	7d7b      	ldrb	r3, [r7, #21]
 801bcb6:	9300      	str	r3, [sp, #0]
 801bcb8:	4613      	mov	r3, r2
 801bcba:	683a      	ldr	r2, [r7, #0]
 801bcbc:	6879      	ldr	r1, [r7, #4]
 801bcbe:	68b8      	ldr	r0, [r7, #8]
 801bcc0:	f001 ffa0 	bl	801dc04 <ip4_output_if>
 801bcc4:	4603      	mov	r3, r0
 801bcc6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801bcc8:	68b8      	ldr	r0, [r7, #8]
 801bcca:	f7f9 fedf 	bl	8015a8c <pbuf_free>
  return err;
 801bcce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bcd2:	4618      	mov	r0, r3
 801bcd4:	3718      	adds	r7, #24
 801bcd6:	46bd      	mov	sp, r7
 801bcd8:	bd80      	pop	{r7, pc}
 801bcda:	bf00      	nop
 801bcdc:	08022b14 	.word	0x08022b14
 801bce0:	0802326c 	.word	0x0802326c
 801bce4:	08022b68 	.word	0x08022b68

0801bce8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801bce8:	b590      	push	{r4, r7, lr}
 801bcea:	b08b      	sub	sp, #44	; 0x2c
 801bcec:	af04      	add	r7, sp, #16
 801bcee:	60f8      	str	r0, [r7, #12]
 801bcf0:	60b9      	str	r1, [r7, #8]
 801bcf2:	607a      	str	r2, [r7, #4]
 801bcf4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801bcf6:	683b      	ldr	r3, [r7, #0]
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	d106      	bne.n	801bd0a <tcp_rst+0x22>
 801bcfc:	4b1f      	ldr	r3, [pc, #124]	; (801bd7c <tcp_rst+0x94>)
 801bcfe:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801bd02:	491f      	ldr	r1, [pc, #124]	; (801bd80 <tcp_rst+0x98>)
 801bd04:	481f      	ldr	r0, [pc, #124]	; (801bd84 <tcp_rst+0x9c>)
 801bd06:	f003 f921 	bl	801ef4c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801bd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d106      	bne.n	801bd1e <tcp_rst+0x36>
 801bd10:	4b1a      	ldr	r3, [pc, #104]	; (801bd7c <tcp_rst+0x94>)
 801bd12:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801bd16:	491c      	ldr	r1, [pc, #112]	; (801bd88 <tcp_rst+0xa0>)
 801bd18:	481a      	ldr	r0, [pc, #104]	; (801bd84 <tcp_rst+0x9c>)
 801bd1a:	f003 f917 	bl	801ef4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bd1e:	2300      	movs	r3, #0
 801bd20:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801bd22:	f246 0308 	movw	r3, #24584	; 0x6008
 801bd26:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801bd28:	7dfb      	ldrb	r3, [r7, #23]
 801bd2a:	b29c      	uxth	r4, r3
 801bd2c:	68b8      	ldr	r0, [r7, #8]
 801bd2e:	f7f8 face 	bl	80142ce <lwip_htonl>
 801bd32:	4602      	mov	r2, r0
 801bd34:	8abb      	ldrh	r3, [r7, #20]
 801bd36:	9303      	str	r3, [sp, #12]
 801bd38:	2314      	movs	r3, #20
 801bd3a:	9302      	str	r3, [sp, #8]
 801bd3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801bd3e:	9301      	str	r3, [sp, #4]
 801bd40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801bd42:	9300      	str	r3, [sp, #0]
 801bd44:	4613      	mov	r3, r2
 801bd46:	2200      	movs	r2, #0
 801bd48:	4621      	mov	r1, r4
 801bd4a:	6878      	ldr	r0, [r7, #4]
 801bd4c:	f7ff fe92 	bl	801ba74 <tcp_output_alloc_header_common>
 801bd50:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801bd52:	693b      	ldr	r3, [r7, #16]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d00c      	beq.n	801bd72 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bd58:	7dfb      	ldrb	r3, [r7, #23]
 801bd5a:	2200      	movs	r2, #0
 801bd5c:	6939      	ldr	r1, [r7, #16]
 801bd5e:	68f8      	ldr	r0, [r7, #12]
 801bd60:	f7ff ff38 	bl	801bbd4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801bd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd66:	683a      	ldr	r2, [r7, #0]
 801bd68:	6939      	ldr	r1, [r7, #16]
 801bd6a:	68f8      	ldr	r0, [r7, #12]
 801bd6c:	f7ff ff72 	bl	801bc54 <tcp_output_control_segment>
 801bd70:	e000      	b.n	801bd74 <tcp_rst+0x8c>
    return;
 801bd72:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801bd74:	371c      	adds	r7, #28
 801bd76:	46bd      	mov	sp, r7
 801bd78:	bd90      	pop	{r4, r7, pc}
 801bd7a:	bf00      	nop
 801bd7c:	08022b14 	.word	0x08022b14
 801bd80:	08023298 	.word	0x08023298
 801bd84:	08022b68 	.word	0x08022b68
 801bd88:	080232b4 	.word	0x080232b4

0801bd8c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801bd8c:	b590      	push	{r4, r7, lr}
 801bd8e:	b087      	sub	sp, #28
 801bd90:	af00      	add	r7, sp, #0
 801bd92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801bd94:	2300      	movs	r3, #0
 801bd96:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801bd98:	2300      	movs	r3, #0
 801bd9a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d106      	bne.n	801bdb0 <tcp_send_empty_ack+0x24>
 801bda2:	4b28      	ldr	r3, [pc, #160]	; (801be44 <tcp_send_empty_ack+0xb8>)
 801bda4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801bda8:	4927      	ldr	r1, [pc, #156]	; (801be48 <tcp_send_empty_ack+0xbc>)
 801bdaa:	4828      	ldr	r0, [pc, #160]	; (801be4c <tcp_send_empty_ack+0xc0>)
 801bdac:	f003 f8ce 	bl	801ef4c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801bdb0:	7dfb      	ldrb	r3, [r7, #23]
 801bdb2:	009b      	lsls	r3, r3, #2
 801bdb4:	b2db      	uxtb	r3, r3
 801bdb6:	f003 0304 	and.w	r3, r3, #4
 801bdba:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801bdbc:	7d7b      	ldrb	r3, [r7, #21]
 801bdbe:	b29c      	uxth	r4, r3
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bdc4:	4618      	mov	r0, r3
 801bdc6:	f7f8 fa82 	bl	80142ce <lwip_htonl>
 801bdca:	4603      	mov	r3, r0
 801bdcc:	2200      	movs	r2, #0
 801bdce:	4621      	mov	r1, r4
 801bdd0:	6878      	ldr	r0, [r7, #4]
 801bdd2:	f7ff fec1 	bl	801bb58 <tcp_output_alloc_header>
 801bdd6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bdd8:	693b      	ldr	r3, [r7, #16]
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d109      	bne.n	801bdf2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	8b5b      	ldrh	r3, [r3, #26]
 801bde2:	f043 0303 	orr.w	r3, r3, #3
 801bde6:	b29a      	uxth	r2, r3
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801bdec:	f06f 0301 	mvn.w	r3, #1
 801bdf0:	e023      	b.n	801be3a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801bdf2:	7dbb      	ldrb	r3, [r7, #22]
 801bdf4:	7dfa      	ldrb	r2, [r7, #23]
 801bdf6:	6939      	ldr	r1, [r7, #16]
 801bdf8:	6878      	ldr	r0, [r7, #4]
 801bdfa:	f7ff feeb 	bl	801bbd4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bdfe:	687a      	ldr	r2, [r7, #4]
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	3304      	adds	r3, #4
 801be04:	6939      	ldr	r1, [r7, #16]
 801be06:	6878      	ldr	r0, [r7, #4]
 801be08:	f7ff ff24 	bl	801bc54 <tcp_output_control_segment>
 801be0c:	4603      	mov	r3, r0
 801be0e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801be10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801be14:	2b00      	cmp	r3, #0
 801be16:	d007      	beq.n	801be28 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	8b5b      	ldrh	r3, [r3, #26]
 801be1c:	f043 0303 	orr.w	r3, r3, #3
 801be20:	b29a      	uxth	r2, r3
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	835a      	strh	r2, [r3, #26]
 801be26:	e006      	b.n	801be36 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	8b5b      	ldrh	r3, [r3, #26]
 801be2c:	f023 0303 	bic.w	r3, r3, #3
 801be30:	b29a      	uxth	r2, r3
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801be36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801be3a:	4618      	mov	r0, r3
 801be3c:	371c      	adds	r7, #28
 801be3e:	46bd      	mov	sp, r7
 801be40:	bd90      	pop	{r4, r7, pc}
 801be42:	bf00      	nop
 801be44:	08022b14 	.word	0x08022b14
 801be48:	080232d0 	.word	0x080232d0
 801be4c:	08022b68 	.word	0x08022b68

0801be50 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801be50:	b590      	push	{r4, r7, lr}
 801be52:	b087      	sub	sp, #28
 801be54:	af00      	add	r7, sp, #0
 801be56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801be58:	2300      	movs	r3, #0
 801be5a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d106      	bne.n	801be70 <tcp_keepalive+0x20>
 801be62:	4b18      	ldr	r3, [pc, #96]	; (801bec4 <tcp_keepalive+0x74>)
 801be64:	f640 0224 	movw	r2, #2084	; 0x824
 801be68:	4917      	ldr	r1, [pc, #92]	; (801bec8 <tcp_keepalive+0x78>)
 801be6a:	4818      	ldr	r0, [pc, #96]	; (801becc <tcp_keepalive+0x7c>)
 801be6c:	f003 f86e 	bl	801ef4c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801be70:	7dfb      	ldrb	r3, [r7, #23]
 801be72:	b29c      	uxth	r4, r3
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801be78:	3b01      	subs	r3, #1
 801be7a:	4618      	mov	r0, r3
 801be7c:	f7f8 fa27 	bl	80142ce <lwip_htonl>
 801be80:	4603      	mov	r3, r0
 801be82:	2200      	movs	r2, #0
 801be84:	4621      	mov	r1, r4
 801be86:	6878      	ldr	r0, [r7, #4]
 801be88:	f7ff fe66 	bl	801bb58 <tcp_output_alloc_header>
 801be8c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801be8e:	693b      	ldr	r3, [r7, #16]
 801be90:	2b00      	cmp	r3, #0
 801be92:	d102      	bne.n	801be9a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801be94:	f04f 33ff 	mov.w	r3, #4294967295
 801be98:	e010      	b.n	801bebc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801be9a:	7dfb      	ldrb	r3, [r7, #23]
 801be9c:	2200      	movs	r2, #0
 801be9e:	6939      	ldr	r1, [r7, #16]
 801bea0:	6878      	ldr	r0, [r7, #4]
 801bea2:	f7ff fe97 	bl	801bbd4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bea6:	687a      	ldr	r2, [r7, #4]
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	3304      	adds	r3, #4
 801beac:	6939      	ldr	r1, [r7, #16]
 801beae:	6878      	ldr	r0, [r7, #4]
 801beb0:	f7ff fed0 	bl	801bc54 <tcp_output_control_segment>
 801beb4:	4603      	mov	r3, r0
 801beb6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801beb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bebc:	4618      	mov	r0, r3
 801bebe:	371c      	adds	r7, #28
 801bec0:	46bd      	mov	sp, r7
 801bec2:	bd90      	pop	{r4, r7, pc}
 801bec4:	08022b14 	.word	0x08022b14
 801bec8:	080232f0 	.word	0x080232f0
 801becc:	08022b68 	.word	0x08022b68

0801bed0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801bed0:	b590      	push	{r4, r7, lr}
 801bed2:	b08b      	sub	sp, #44	; 0x2c
 801bed4:	af00      	add	r7, sp, #0
 801bed6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bed8:	2300      	movs	r3, #0
 801beda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d106      	bne.n	801bef2 <tcp_zero_window_probe+0x22>
 801bee4:	4b4c      	ldr	r3, [pc, #304]	; (801c018 <tcp_zero_window_probe+0x148>)
 801bee6:	f640 024f 	movw	r2, #2127	; 0x84f
 801beea:	494c      	ldr	r1, [pc, #304]	; (801c01c <tcp_zero_window_probe+0x14c>)
 801beec:	484c      	ldr	r0, [pc, #304]	; (801c020 <tcp_zero_window_probe+0x150>)
 801beee:	f003 f82d 	bl	801ef4c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bef6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801bef8:	6a3b      	ldr	r3, [r7, #32]
 801befa:	2b00      	cmp	r3, #0
 801befc:	d101      	bne.n	801bf02 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801befe:	2300      	movs	r3, #0
 801bf00:	e086      	b.n	801c010 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801bf02:	687b      	ldr	r3, [r7, #4]
 801bf04:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801bf08:	2bff      	cmp	r3, #255	; 0xff
 801bf0a:	d007      	beq.n	801bf1c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801bf12:	3301      	adds	r3, #1
 801bf14:	b2da      	uxtb	r2, r3
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801bf1c:	6a3b      	ldr	r3, [r7, #32]
 801bf1e:	68db      	ldr	r3, [r3, #12]
 801bf20:	899b      	ldrh	r3, [r3, #12]
 801bf22:	b29b      	uxth	r3, r3
 801bf24:	4618      	mov	r0, r3
 801bf26:	f7f8 f9bd 	bl	80142a4 <lwip_htons>
 801bf2a:	4603      	mov	r3, r0
 801bf2c:	b2db      	uxtb	r3, r3
 801bf2e:	f003 0301 	and.w	r3, r3, #1
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d005      	beq.n	801bf42 <tcp_zero_window_probe+0x72>
 801bf36:	6a3b      	ldr	r3, [r7, #32]
 801bf38:	891b      	ldrh	r3, [r3, #8]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d101      	bne.n	801bf42 <tcp_zero_window_probe+0x72>
 801bf3e:	2301      	movs	r3, #1
 801bf40:	e000      	b.n	801bf44 <tcp_zero_window_probe+0x74>
 801bf42:	2300      	movs	r3, #0
 801bf44:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801bf46:	7ffb      	ldrb	r3, [r7, #31]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	bf0c      	ite	eq
 801bf4c:	2301      	moveq	r3, #1
 801bf4e:	2300      	movne	r3, #0
 801bf50:	b2db      	uxtb	r3, r3
 801bf52:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801bf54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bf58:	b299      	uxth	r1, r3
 801bf5a:	6a3b      	ldr	r3, [r7, #32]
 801bf5c:	68db      	ldr	r3, [r3, #12]
 801bf5e:	685b      	ldr	r3, [r3, #4]
 801bf60:	8bba      	ldrh	r2, [r7, #28]
 801bf62:	6878      	ldr	r0, [r7, #4]
 801bf64:	f7ff fdf8 	bl	801bb58 <tcp_output_alloc_header>
 801bf68:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801bf6a:	69bb      	ldr	r3, [r7, #24]
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d102      	bne.n	801bf76 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801bf70:	f04f 33ff 	mov.w	r3, #4294967295
 801bf74:	e04c      	b.n	801c010 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801bf76:	69bb      	ldr	r3, [r7, #24]
 801bf78:	685b      	ldr	r3, [r3, #4]
 801bf7a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801bf7c:	7ffb      	ldrb	r3, [r7, #31]
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d011      	beq.n	801bfa6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801bf82:	697b      	ldr	r3, [r7, #20]
 801bf84:	899b      	ldrh	r3, [r3, #12]
 801bf86:	b29b      	uxth	r3, r3
 801bf88:	b21b      	sxth	r3, r3
 801bf8a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801bf8e:	b21c      	sxth	r4, r3
 801bf90:	2011      	movs	r0, #17
 801bf92:	f7f8 f987 	bl	80142a4 <lwip_htons>
 801bf96:	4603      	mov	r3, r0
 801bf98:	b21b      	sxth	r3, r3
 801bf9a:	4323      	orrs	r3, r4
 801bf9c:	b21b      	sxth	r3, r3
 801bf9e:	b29a      	uxth	r2, r3
 801bfa0:	697b      	ldr	r3, [r7, #20]
 801bfa2:	819a      	strh	r2, [r3, #12]
 801bfa4:	e010      	b.n	801bfc8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801bfa6:	69bb      	ldr	r3, [r7, #24]
 801bfa8:	685b      	ldr	r3, [r3, #4]
 801bfaa:	3314      	adds	r3, #20
 801bfac:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801bfae:	6a3b      	ldr	r3, [r7, #32]
 801bfb0:	6858      	ldr	r0, [r3, #4]
 801bfb2:	6a3b      	ldr	r3, [r7, #32]
 801bfb4:	685b      	ldr	r3, [r3, #4]
 801bfb6:	891a      	ldrh	r2, [r3, #8]
 801bfb8:	6a3b      	ldr	r3, [r7, #32]
 801bfba:	891b      	ldrh	r3, [r3, #8]
 801bfbc:	1ad3      	subs	r3, r2, r3
 801bfbe:	b29b      	uxth	r3, r3
 801bfc0:	2201      	movs	r2, #1
 801bfc2:	6939      	ldr	r1, [r7, #16]
 801bfc4:	f7f9 ff58 	bl	8015e78 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801bfc8:	6a3b      	ldr	r3, [r7, #32]
 801bfca:	68db      	ldr	r3, [r3, #12]
 801bfcc:	685b      	ldr	r3, [r3, #4]
 801bfce:	4618      	mov	r0, r3
 801bfd0:	f7f8 f97d 	bl	80142ce <lwip_htonl>
 801bfd4:	4603      	mov	r3, r0
 801bfd6:	3301      	adds	r3, #1
 801bfd8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bfde:	68fb      	ldr	r3, [r7, #12]
 801bfe0:	1ad3      	subs	r3, r2, r3
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	da02      	bge.n	801bfec <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	68fa      	ldr	r2, [r7, #12]
 801bfea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bfec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bff0:	2200      	movs	r2, #0
 801bff2:	69b9      	ldr	r1, [r7, #24]
 801bff4:	6878      	ldr	r0, [r7, #4]
 801bff6:	f7ff fded 	bl	801bbd4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bffa:	687a      	ldr	r2, [r7, #4]
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	3304      	adds	r3, #4
 801c000:	69b9      	ldr	r1, [r7, #24]
 801c002:	6878      	ldr	r0, [r7, #4]
 801c004:	f7ff fe26 	bl	801bc54 <tcp_output_control_segment>
 801c008:	4603      	mov	r3, r0
 801c00a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c00c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c010:	4618      	mov	r0, r3
 801c012:	372c      	adds	r7, #44	; 0x2c
 801c014:	46bd      	mov	sp, r7
 801c016:	bd90      	pop	{r4, r7, pc}
 801c018:	08022b14 	.word	0x08022b14
 801c01c:	0802330c 	.word	0x0802330c
 801c020:	08022b68 	.word	0x08022b68

0801c024 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801c024:	b580      	push	{r7, lr}
 801c026:	b082      	sub	sp, #8
 801c028:	af00      	add	r7, sp, #0
 801c02a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801c02c:	f7fa f812 	bl	8016054 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c030:	4b0a      	ldr	r3, [pc, #40]	; (801c05c <tcpip_tcp_timer+0x38>)
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	2b00      	cmp	r3, #0
 801c036:	d103      	bne.n	801c040 <tcpip_tcp_timer+0x1c>
 801c038:	4b09      	ldr	r3, [pc, #36]	; (801c060 <tcpip_tcp_timer+0x3c>)
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d005      	beq.n	801c04c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c040:	2200      	movs	r2, #0
 801c042:	4908      	ldr	r1, [pc, #32]	; (801c064 <tcpip_tcp_timer+0x40>)
 801c044:	20fa      	movs	r0, #250	; 0xfa
 801c046:	f000 f8f3 	bl	801c230 <sys_timeout>
 801c04a:	e003      	b.n	801c054 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801c04c:	4b06      	ldr	r3, [pc, #24]	; (801c068 <tcpip_tcp_timer+0x44>)
 801c04e:	2200      	movs	r2, #0
 801c050:	601a      	str	r2, [r3, #0]
  }
}
 801c052:	bf00      	nop
 801c054:	bf00      	nop
 801c056:	3708      	adds	r7, #8
 801c058:	46bd      	mov	sp, r7
 801c05a:	bd80      	pop	{r7, pc}
 801c05c:	2001475c 	.word	0x2001475c
 801c060:	2001476c 	.word	0x2001476c
 801c064:	0801c025 	.word	0x0801c025
 801c068:	2000c838 	.word	0x2000c838

0801c06c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801c06c:	b580      	push	{r7, lr}
 801c06e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c070:	4b0a      	ldr	r3, [pc, #40]	; (801c09c <tcp_timer_needed+0x30>)
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	2b00      	cmp	r3, #0
 801c076:	d10f      	bne.n	801c098 <tcp_timer_needed+0x2c>
 801c078:	4b09      	ldr	r3, [pc, #36]	; (801c0a0 <tcp_timer_needed+0x34>)
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d103      	bne.n	801c088 <tcp_timer_needed+0x1c>
 801c080:	4b08      	ldr	r3, [pc, #32]	; (801c0a4 <tcp_timer_needed+0x38>)
 801c082:	681b      	ldr	r3, [r3, #0]
 801c084:	2b00      	cmp	r3, #0
 801c086:	d007      	beq.n	801c098 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801c088:	4b04      	ldr	r3, [pc, #16]	; (801c09c <tcp_timer_needed+0x30>)
 801c08a:	2201      	movs	r2, #1
 801c08c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c08e:	2200      	movs	r2, #0
 801c090:	4905      	ldr	r1, [pc, #20]	; (801c0a8 <tcp_timer_needed+0x3c>)
 801c092:	20fa      	movs	r0, #250	; 0xfa
 801c094:	f000 f8cc 	bl	801c230 <sys_timeout>
  }
}
 801c098:	bf00      	nop
 801c09a:	bd80      	pop	{r7, pc}
 801c09c:	2000c838 	.word	0x2000c838
 801c0a0:	2001475c 	.word	0x2001475c
 801c0a4:	2001476c 	.word	0x2001476c
 801c0a8:	0801c025 	.word	0x0801c025

0801c0ac <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801c0ac:	b580      	push	{r7, lr}
 801c0ae:	b086      	sub	sp, #24
 801c0b0:	af00      	add	r7, sp, #0
 801c0b2:	60f8      	str	r0, [r7, #12]
 801c0b4:	60b9      	str	r1, [r7, #8]
 801c0b6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c0b8:	200a      	movs	r0, #10
 801c0ba:	f7f8 fddf 	bl	8014c7c <memp_malloc>
 801c0be:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801c0c0:	693b      	ldr	r3, [r7, #16]
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d109      	bne.n	801c0da <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c0c6:	693b      	ldr	r3, [r7, #16]
 801c0c8:	2b00      	cmp	r3, #0
 801c0ca:	d151      	bne.n	801c170 <sys_timeout_abs+0xc4>
 801c0cc:	4b2a      	ldr	r3, [pc, #168]	; (801c178 <sys_timeout_abs+0xcc>)
 801c0ce:	22be      	movs	r2, #190	; 0xbe
 801c0d0:	492a      	ldr	r1, [pc, #168]	; (801c17c <sys_timeout_abs+0xd0>)
 801c0d2:	482b      	ldr	r0, [pc, #172]	; (801c180 <sys_timeout_abs+0xd4>)
 801c0d4:	f002 ff3a 	bl	801ef4c <iprintf>
    return;
 801c0d8:	e04a      	b.n	801c170 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801c0da:	693b      	ldr	r3, [r7, #16]
 801c0dc:	2200      	movs	r2, #0
 801c0de:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c0e0:	693b      	ldr	r3, [r7, #16]
 801c0e2:	68ba      	ldr	r2, [r7, #8]
 801c0e4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c0e6:	693b      	ldr	r3, [r7, #16]
 801c0e8:	687a      	ldr	r2, [r7, #4]
 801c0ea:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801c0ec:	693b      	ldr	r3, [r7, #16]
 801c0ee:	68fa      	ldr	r2, [r7, #12]
 801c0f0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c0f2:	4b24      	ldr	r3, [pc, #144]	; (801c184 <sys_timeout_abs+0xd8>)
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d103      	bne.n	801c102 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801c0fa:	4a22      	ldr	r2, [pc, #136]	; (801c184 <sys_timeout_abs+0xd8>)
 801c0fc:	693b      	ldr	r3, [r7, #16]
 801c0fe:	6013      	str	r3, [r2, #0]
    return;
 801c100:	e037      	b.n	801c172 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801c102:	693b      	ldr	r3, [r7, #16]
 801c104:	685a      	ldr	r2, [r3, #4]
 801c106:	4b1f      	ldr	r3, [pc, #124]	; (801c184 <sys_timeout_abs+0xd8>)
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	685b      	ldr	r3, [r3, #4]
 801c10c:	1ad3      	subs	r3, r2, r3
 801c10e:	0fdb      	lsrs	r3, r3, #31
 801c110:	f003 0301 	and.w	r3, r3, #1
 801c114:	b2db      	uxtb	r3, r3
 801c116:	2b00      	cmp	r3, #0
 801c118:	d007      	beq.n	801c12a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801c11a:	4b1a      	ldr	r3, [pc, #104]	; (801c184 <sys_timeout_abs+0xd8>)
 801c11c:	681a      	ldr	r2, [r3, #0]
 801c11e:	693b      	ldr	r3, [r7, #16]
 801c120:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c122:	4a18      	ldr	r2, [pc, #96]	; (801c184 <sys_timeout_abs+0xd8>)
 801c124:	693b      	ldr	r3, [r7, #16]
 801c126:	6013      	str	r3, [r2, #0]
 801c128:	e023      	b.n	801c172 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c12a:	4b16      	ldr	r3, [pc, #88]	; (801c184 <sys_timeout_abs+0xd8>)
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	617b      	str	r3, [r7, #20]
 801c130:	e01a      	b.n	801c168 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801c132:	697b      	ldr	r3, [r7, #20]
 801c134:	681b      	ldr	r3, [r3, #0]
 801c136:	2b00      	cmp	r3, #0
 801c138:	d00b      	beq.n	801c152 <sys_timeout_abs+0xa6>
 801c13a:	693b      	ldr	r3, [r7, #16]
 801c13c:	685a      	ldr	r2, [r3, #4]
 801c13e:	697b      	ldr	r3, [r7, #20]
 801c140:	681b      	ldr	r3, [r3, #0]
 801c142:	685b      	ldr	r3, [r3, #4]
 801c144:	1ad3      	subs	r3, r2, r3
 801c146:	0fdb      	lsrs	r3, r3, #31
 801c148:	f003 0301 	and.w	r3, r3, #1
 801c14c:	b2db      	uxtb	r3, r3
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d007      	beq.n	801c162 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801c152:	697b      	ldr	r3, [r7, #20]
 801c154:	681a      	ldr	r2, [r3, #0]
 801c156:	693b      	ldr	r3, [r7, #16]
 801c158:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c15a:	697b      	ldr	r3, [r7, #20]
 801c15c:	693a      	ldr	r2, [r7, #16]
 801c15e:	601a      	str	r2, [r3, #0]
        break;
 801c160:	e007      	b.n	801c172 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c162:	697b      	ldr	r3, [r7, #20]
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	617b      	str	r3, [r7, #20]
 801c168:	697b      	ldr	r3, [r7, #20]
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	d1e1      	bne.n	801c132 <sys_timeout_abs+0x86>
 801c16e:	e000      	b.n	801c172 <sys_timeout_abs+0xc6>
    return;
 801c170:	bf00      	nop
      }
    }
  }
}
 801c172:	3718      	adds	r7, #24
 801c174:	46bd      	mov	sp, r7
 801c176:	bd80      	pop	{r7, pc}
 801c178:	08023330 	.word	0x08023330
 801c17c:	08023364 	.word	0x08023364
 801c180:	080233a4 	.word	0x080233a4
 801c184:	2000c830 	.word	0x2000c830

0801c188 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801c188:	b580      	push	{r7, lr}
 801c18a:	b086      	sub	sp, #24
 801c18c:	af00      	add	r7, sp, #0
 801c18e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c194:	697b      	ldr	r3, [r7, #20]
 801c196:	685b      	ldr	r3, [r3, #4]
 801c198:	4798      	blx	r3

  now = sys_now();
 801c19a:	f7ef fbb9 	bl	800b910 <sys_now>
 801c19e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c1a0:	697b      	ldr	r3, [r7, #20]
 801c1a2:	681a      	ldr	r2, [r3, #0]
 801c1a4:	4b0f      	ldr	r3, [pc, #60]	; (801c1e4 <lwip_cyclic_timer+0x5c>)
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	4413      	add	r3, r2
 801c1aa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c1ac:	68fa      	ldr	r2, [r7, #12]
 801c1ae:	693b      	ldr	r3, [r7, #16]
 801c1b0:	1ad3      	subs	r3, r2, r3
 801c1b2:	0fdb      	lsrs	r3, r3, #31
 801c1b4:	f003 0301 	and.w	r3, r3, #1
 801c1b8:	b2db      	uxtb	r3, r3
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d009      	beq.n	801c1d2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c1be:	697b      	ldr	r3, [r7, #20]
 801c1c0:	681a      	ldr	r2, [r3, #0]
 801c1c2:	693b      	ldr	r3, [r7, #16]
 801c1c4:	4413      	add	r3, r2
 801c1c6:	687a      	ldr	r2, [r7, #4]
 801c1c8:	4907      	ldr	r1, [pc, #28]	; (801c1e8 <lwip_cyclic_timer+0x60>)
 801c1ca:	4618      	mov	r0, r3
 801c1cc:	f7ff ff6e 	bl	801c0ac <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c1d0:	e004      	b.n	801c1dc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c1d2:	687a      	ldr	r2, [r7, #4]
 801c1d4:	4904      	ldr	r1, [pc, #16]	; (801c1e8 <lwip_cyclic_timer+0x60>)
 801c1d6:	68f8      	ldr	r0, [r7, #12]
 801c1d8:	f7ff ff68 	bl	801c0ac <sys_timeout_abs>
}
 801c1dc:	bf00      	nop
 801c1de:	3718      	adds	r7, #24
 801c1e0:	46bd      	mov	sp, r7
 801c1e2:	bd80      	pop	{r7, pc}
 801c1e4:	2000c834 	.word	0x2000c834
 801c1e8:	0801c189 	.word	0x0801c189

0801c1ec <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801c1ec:	b580      	push	{r7, lr}
 801c1ee:	b082      	sub	sp, #8
 801c1f0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c1f2:	2301      	movs	r3, #1
 801c1f4:	607b      	str	r3, [r7, #4]
 801c1f6:	e00e      	b.n	801c216 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c1f8:	4a0b      	ldr	r2, [pc, #44]	; (801c228 <sys_timeouts_init+0x3c>)
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	00db      	lsls	r3, r3, #3
 801c204:	4a08      	ldr	r2, [pc, #32]	; (801c228 <sys_timeouts_init+0x3c>)
 801c206:	4413      	add	r3, r2
 801c208:	461a      	mov	r2, r3
 801c20a:	4908      	ldr	r1, [pc, #32]	; (801c22c <sys_timeouts_init+0x40>)
 801c20c:	f000 f810 	bl	801c230 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	3301      	adds	r3, #1
 801c214:	607b      	str	r3, [r7, #4]
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	2b02      	cmp	r3, #2
 801c21a:	d9ed      	bls.n	801c1f8 <sys_timeouts_init+0xc>
  }
}
 801c21c:	bf00      	nop
 801c21e:	bf00      	nop
 801c220:	3708      	adds	r7, #8
 801c222:	46bd      	mov	sp, r7
 801c224:	bd80      	pop	{r7, pc}
 801c226:	bf00      	nop
 801c228:	0807ac68 	.word	0x0807ac68
 801c22c:	0801c189 	.word	0x0801c189

0801c230 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c230:	b580      	push	{r7, lr}
 801c232:	b086      	sub	sp, #24
 801c234:	af00      	add	r7, sp, #0
 801c236:	60f8      	str	r0, [r7, #12]
 801c238:	60b9      	str	r1, [r7, #8]
 801c23a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c23c:	68fb      	ldr	r3, [r7, #12]
 801c23e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c242:	d306      	bcc.n	801c252 <sys_timeout+0x22>
 801c244:	4b0a      	ldr	r3, [pc, #40]	; (801c270 <sys_timeout+0x40>)
 801c246:	f240 1229 	movw	r2, #297	; 0x129
 801c24a:	490a      	ldr	r1, [pc, #40]	; (801c274 <sys_timeout+0x44>)
 801c24c:	480a      	ldr	r0, [pc, #40]	; (801c278 <sys_timeout+0x48>)
 801c24e:	f002 fe7d 	bl	801ef4c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c252:	f7ef fb5d 	bl	800b910 <sys_now>
 801c256:	4602      	mov	r2, r0
 801c258:	68fb      	ldr	r3, [r7, #12]
 801c25a:	4413      	add	r3, r2
 801c25c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c25e:	687a      	ldr	r2, [r7, #4]
 801c260:	68b9      	ldr	r1, [r7, #8]
 801c262:	6978      	ldr	r0, [r7, #20]
 801c264:	f7ff ff22 	bl	801c0ac <sys_timeout_abs>
#endif
}
 801c268:	bf00      	nop
 801c26a:	3718      	adds	r7, #24
 801c26c:	46bd      	mov	sp, r7
 801c26e:	bd80      	pop	{r7, pc}
 801c270:	08023330 	.word	0x08023330
 801c274:	080233cc 	.word	0x080233cc
 801c278:	080233a4 	.word	0x080233a4

0801c27c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c27c:	b580      	push	{r7, lr}
 801c27e:	b084      	sub	sp, #16
 801c280:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c282:	f7ef fb45 	bl	800b910 <sys_now>
 801c286:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801c288:	4b17      	ldr	r3, [pc, #92]	; (801c2e8 <sys_check_timeouts+0x6c>)
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c28e:	68bb      	ldr	r3, [r7, #8]
 801c290:	2b00      	cmp	r3, #0
 801c292:	d022      	beq.n	801c2da <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c294:	68bb      	ldr	r3, [r7, #8]
 801c296:	685b      	ldr	r3, [r3, #4]
 801c298:	68fa      	ldr	r2, [r7, #12]
 801c29a:	1ad3      	subs	r3, r2, r3
 801c29c:	0fdb      	lsrs	r3, r3, #31
 801c29e:	f003 0301 	and.w	r3, r3, #1
 801c2a2:	b2db      	uxtb	r3, r3
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	d11a      	bne.n	801c2de <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c2a8:	68bb      	ldr	r3, [r7, #8]
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	4a0e      	ldr	r2, [pc, #56]	; (801c2e8 <sys_check_timeouts+0x6c>)
 801c2ae:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c2b0:	68bb      	ldr	r3, [r7, #8]
 801c2b2:	689b      	ldr	r3, [r3, #8]
 801c2b4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c2b6:	68bb      	ldr	r3, [r7, #8]
 801c2b8:	68db      	ldr	r3, [r3, #12]
 801c2ba:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c2bc:	68bb      	ldr	r3, [r7, #8]
 801c2be:	685b      	ldr	r3, [r3, #4]
 801c2c0:	4a0a      	ldr	r2, [pc, #40]	; (801c2ec <sys_check_timeouts+0x70>)
 801c2c2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c2c4:	68b9      	ldr	r1, [r7, #8]
 801c2c6:	200a      	movs	r0, #10
 801c2c8:	f7f8 fd2a 	bl	8014d20 <memp_free>
    if (handler != NULL) {
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d0da      	beq.n	801c288 <sys_check_timeouts+0xc>
      handler(arg);
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	6838      	ldr	r0, [r7, #0]
 801c2d6:	4798      	blx	r3
  do {
 801c2d8:	e7d6      	b.n	801c288 <sys_check_timeouts+0xc>
      return;
 801c2da:	bf00      	nop
 801c2dc:	e000      	b.n	801c2e0 <sys_check_timeouts+0x64>
      return;
 801c2de:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c2e0:	3710      	adds	r7, #16
 801c2e2:	46bd      	mov	sp, r7
 801c2e4:	bd80      	pop	{r7, pc}
 801c2e6:	bf00      	nop
 801c2e8:	2000c830 	.word	0x2000c830
 801c2ec:	2000c834 	.word	0x2000c834

0801c2f0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801c2f0:	b580      	push	{r7, lr}
 801c2f2:	b082      	sub	sp, #8
 801c2f4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c2f6:	4b16      	ldr	r3, [pc, #88]	; (801c350 <sys_timeouts_sleeptime+0x60>)
 801c2f8:	681b      	ldr	r3, [r3, #0]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d102      	bne.n	801c304 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801c2fe:	f04f 33ff 	mov.w	r3, #4294967295
 801c302:	e020      	b.n	801c346 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801c304:	f7ef fb04 	bl	800b910 <sys_now>
 801c308:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801c30a:	4b11      	ldr	r3, [pc, #68]	; (801c350 <sys_timeouts_sleeptime+0x60>)
 801c30c:	681b      	ldr	r3, [r3, #0]
 801c30e:	685a      	ldr	r2, [r3, #4]
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	1ad3      	subs	r3, r2, r3
 801c314:	0fdb      	lsrs	r3, r3, #31
 801c316:	f003 0301 	and.w	r3, r3, #1
 801c31a:	b2db      	uxtb	r3, r3
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d001      	beq.n	801c324 <sys_timeouts_sleeptime+0x34>
    return 0;
 801c320:	2300      	movs	r3, #0
 801c322:	e010      	b.n	801c346 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801c324:	4b0a      	ldr	r3, [pc, #40]	; (801c350 <sys_timeouts_sleeptime+0x60>)
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	685a      	ldr	r2, [r3, #4]
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	1ad3      	subs	r3, r2, r3
 801c32e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801c330:	683b      	ldr	r3, [r7, #0]
 801c332:	2b00      	cmp	r3, #0
 801c334:	da06      	bge.n	801c344 <sys_timeouts_sleeptime+0x54>
 801c336:	4b07      	ldr	r3, [pc, #28]	; (801c354 <sys_timeouts_sleeptime+0x64>)
 801c338:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801c33c:	4906      	ldr	r1, [pc, #24]	; (801c358 <sys_timeouts_sleeptime+0x68>)
 801c33e:	4807      	ldr	r0, [pc, #28]	; (801c35c <sys_timeouts_sleeptime+0x6c>)
 801c340:	f002 fe04 	bl	801ef4c <iprintf>
    return ret;
 801c344:	683b      	ldr	r3, [r7, #0]
  }
}
 801c346:	4618      	mov	r0, r3
 801c348:	3708      	adds	r7, #8
 801c34a:	46bd      	mov	sp, r7
 801c34c:	bd80      	pop	{r7, pc}
 801c34e:	bf00      	nop
 801c350:	2000c830 	.word	0x2000c830
 801c354:	08023330 	.word	0x08023330
 801c358:	08023404 	.word	0x08023404
 801c35c:	080233a4 	.word	0x080233a4

0801c360 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c360:	b580      	push	{r7, lr}
 801c362:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c364:	f002 fe80 	bl	801f068 <rand>
 801c368:	4603      	mov	r3, r0
 801c36a:	b29b      	uxth	r3, r3
 801c36c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c370:	b29b      	uxth	r3, r3
 801c372:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801c376:	b29a      	uxth	r2, r3
 801c378:	4b01      	ldr	r3, [pc, #4]	; (801c380 <udp_init+0x20>)
 801c37a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c37c:	bf00      	nop
 801c37e:	bd80      	pop	{r7, pc}
 801c380:	2000003c 	.word	0x2000003c

0801c384 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c384:	b580      	push	{r7, lr}
 801c386:	b084      	sub	sp, #16
 801c388:	af00      	add	r7, sp, #0
 801c38a:	60f8      	str	r0, [r7, #12]
 801c38c:	60b9      	str	r1, [r7, #8]
 801c38e:	4613      	mov	r3, r2
 801c390:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c392:	68fb      	ldr	r3, [r7, #12]
 801c394:	2b00      	cmp	r3, #0
 801c396:	d105      	bne.n	801c3a4 <udp_input_local_match+0x20>
 801c398:	4b27      	ldr	r3, [pc, #156]	; (801c438 <udp_input_local_match+0xb4>)
 801c39a:	2287      	movs	r2, #135	; 0x87
 801c39c:	4927      	ldr	r1, [pc, #156]	; (801c43c <udp_input_local_match+0xb8>)
 801c39e:	4828      	ldr	r0, [pc, #160]	; (801c440 <udp_input_local_match+0xbc>)
 801c3a0:	f002 fdd4 	bl	801ef4c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c3a4:	68bb      	ldr	r3, [r7, #8]
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d105      	bne.n	801c3b6 <udp_input_local_match+0x32>
 801c3aa:	4b23      	ldr	r3, [pc, #140]	; (801c438 <udp_input_local_match+0xb4>)
 801c3ac:	2288      	movs	r2, #136	; 0x88
 801c3ae:	4925      	ldr	r1, [pc, #148]	; (801c444 <udp_input_local_match+0xc0>)
 801c3b0:	4823      	ldr	r0, [pc, #140]	; (801c440 <udp_input_local_match+0xbc>)
 801c3b2:	f002 fdcb 	bl	801ef4c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	7a1b      	ldrb	r3, [r3, #8]
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d00b      	beq.n	801c3d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	7a1a      	ldrb	r2, [r3, #8]
 801c3c2:	4b21      	ldr	r3, [pc, #132]	; (801c448 <udp_input_local_match+0xc4>)
 801c3c4:	685b      	ldr	r3, [r3, #4]
 801c3c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c3ca:	3301      	adds	r3, #1
 801c3cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c3ce:	429a      	cmp	r2, r3
 801c3d0:	d001      	beq.n	801c3d6 <udp_input_local_match+0x52>
    return 0;
 801c3d2:	2300      	movs	r3, #0
 801c3d4:	e02b      	b.n	801c42e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c3d6:	79fb      	ldrb	r3, [r7, #7]
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d018      	beq.n	801c40e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c3dc:	68fb      	ldr	r3, [r7, #12]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d013      	beq.n	801c40a <udp_input_local_match+0x86>
 801c3e2:	68fb      	ldr	r3, [r7, #12]
 801c3e4:	681b      	ldr	r3, [r3, #0]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d00f      	beq.n	801c40a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c3ea:	4b17      	ldr	r3, [pc, #92]	; (801c448 <udp_input_local_match+0xc4>)
 801c3ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3f2:	d00a      	beq.n	801c40a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c3f4:	68fb      	ldr	r3, [r7, #12]
 801c3f6:	681a      	ldr	r2, [r3, #0]
 801c3f8:	4b13      	ldr	r3, [pc, #76]	; (801c448 <udp_input_local_match+0xc4>)
 801c3fa:	695b      	ldr	r3, [r3, #20]
 801c3fc:	405a      	eors	r2, r3
 801c3fe:	68bb      	ldr	r3, [r7, #8]
 801c400:	3308      	adds	r3, #8
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c406:	2b00      	cmp	r3, #0
 801c408:	d110      	bne.n	801c42c <udp_input_local_match+0xa8>
          return 1;
 801c40a:	2301      	movs	r3, #1
 801c40c:	e00f      	b.n	801c42e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c40e:	68fb      	ldr	r3, [r7, #12]
 801c410:	2b00      	cmp	r3, #0
 801c412:	d009      	beq.n	801c428 <udp_input_local_match+0xa4>
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	681b      	ldr	r3, [r3, #0]
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d005      	beq.n	801c428 <udp_input_local_match+0xa4>
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	681a      	ldr	r2, [r3, #0]
 801c420:	4b09      	ldr	r3, [pc, #36]	; (801c448 <udp_input_local_match+0xc4>)
 801c422:	695b      	ldr	r3, [r3, #20]
 801c424:	429a      	cmp	r2, r3
 801c426:	d101      	bne.n	801c42c <udp_input_local_match+0xa8>
        return 1;
 801c428:	2301      	movs	r3, #1
 801c42a:	e000      	b.n	801c42e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c42c:	2300      	movs	r3, #0
}
 801c42e:	4618      	mov	r0, r3
 801c430:	3710      	adds	r7, #16
 801c432:	46bd      	mov	sp, r7
 801c434:	bd80      	pop	{r7, pc}
 801c436:	bf00      	nop
 801c438:	08023418 	.word	0x08023418
 801c43c:	08023448 	.word	0x08023448
 801c440:	0802346c 	.word	0x0802346c
 801c444:	08023494 	.word	0x08023494
 801c448:	20011048 	.word	0x20011048

0801c44c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c44c:	b590      	push	{r4, r7, lr}
 801c44e:	b08d      	sub	sp, #52	; 0x34
 801c450:	af02      	add	r7, sp, #8
 801c452:	6078      	str	r0, [r7, #4]
 801c454:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c456:	2300      	movs	r3, #0
 801c458:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d105      	bne.n	801c46c <udp_input+0x20>
 801c460:	4b7c      	ldr	r3, [pc, #496]	; (801c654 <udp_input+0x208>)
 801c462:	22cf      	movs	r2, #207	; 0xcf
 801c464:	497c      	ldr	r1, [pc, #496]	; (801c658 <udp_input+0x20c>)
 801c466:	487d      	ldr	r0, [pc, #500]	; (801c65c <udp_input+0x210>)
 801c468:	f002 fd70 	bl	801ef4c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c46c:	683b      	ldr	r3, [r7, #0]
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d105      	bne.n	801c47e <udp_input+0x32>
 801c472:	4b78      	ldr	r3, [pc, #480]	; (801c654 <udp_input+0x208>)
 801c474:	22d0      	movs	r2, #208	; 0xd0
 801c476:	497a      	ldr	r1, [pc, #488]	; (801c660 <udp_input+0x214>)
 801c478:	4878      	ldr	r0, [pc, #480]	; (801c65c <udp_input+0x210>)
 801c47a:	f002 fd67 	bl	801ef4c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	895b      	ldrh	r3, [r3, #10]
 801c482:	2b07      	cmp	r3, #7
 801c484:	d803      	bhi.n	801c48e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c486:	6878      	ldr	r0, [r7, #4]
 801c488:	f7f9 fb00 	bl	8015a8c <pbuf_free>
    goto end;
 801c48c:	e0de      	b.n	801c64c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	685b      	ldr	r3, [r3, #4]
 801c492:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c494:	4b73      	ldr	r3, [pc, #460]	; (801c664 <udp_input+0x218>)
 801c496:	695b      	ldr	r3, [r3, #20]
 801c498:	4a72      	ldr	r2, [pc, #456]	; (801c664 <udp_input+0x218>)
 801c49a:	6812      	ldr	r2, [r2, #0]
 801c49c:	4611      	mov	r1, r2
 801c49e:	4618      	mov	r0, r3
 801c4a0:	f001 fc88 	bl	801ddb4 <ip4_addr_isbroadcast_u32>
 801c4a4:	4603      	mov	r3, r0
 801c4a6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c4a8:	697b      	ldr	r3, [r7, #20]
 801c4aa:	881b      	ldrh	r3, [r3, #0]
 801c4ac:	b29b      	uxth	r3, r3
 801c4ae:	4618      	mov	r0, r3
 801c4b0:	f7f7 fef8 	bl	80142a4 <lwip_htons>
 801c4b4:	4603      	mov	r3, r0
 801c4b6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c4b8:	697b      	ldr	r3, [r7, #20]
 801c4ba:	885b      	ldrh	r3, [r3, #2]
 801c4bc:	b29b      	uxth	r3, r3
 801c4be:	4618      	mov	r0, r3
 801c4c0:	f7f7 fef0 	bl	80142a4 <lwip_htons>
 801c4c4:	4603      	mov	r3, r0
 801c4c6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c4c8:	2300      	movs	r3, #0
 801c4ca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801c4cc:	2300      	movs	r3, #0
 801c4ce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c4d0:	2300      	movs	r3, #0
 801c4d2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c4d4:	4b64      	ldr	r3, [pc, #400]	; (801c668 <udp_input+0x21c>)
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	627b      	str	r3, [r7, #36]	; 0x24
 801c4da:	e054      	b.n	801c586 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4de:	8a5b      	ldrh	r3, [r3, #18]
 801c4e0:	89fa      	ldrh	r2, [r7, #14]
 801c4e2:	429a      	cmp	r2, r3
 801c4e4:	d14a      	bne.n	801c57c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c4e6:	7cfb      	ldrb	r3, [r7, #19]
 801c4e8:	461a      	mov	r2, r3
 801c4ea:	6839      	ldr	r1, [r7, #0]
 801c4ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c4ee:	f7ff ff49 	bl	801c384 <udp_input_local_match>
 801c4f2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	d041      	beq.n	801c57c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4fa:	7c1b      	ldrb	r3, [r3, #16]
 801c4fc:	f003 0304 	and.w	r3, r3, #4
 801c500:	2b00      	cmp	r3, #0
 801c502:	d11d      	bne.n	801c540 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801c504:	69fb      	ldr	r3, [r7, #28]
 801c506:	2b00      	cmp	r3, #0
 801c508:	d102      	bne.n	801c510 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c50c:	61fb      	str	r3, [r7, #28]
 801c50e:	e017      	b.n	801c540 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c510:	7cfb      	ldrb	r3, [r7, #19]
 801c512:	2b00      	cmp	r3, #0
 801c514:	d014      	beq.n	801c540 <udp_input+0xf4>
 801c516:	4b53      	ldr	r3, [pc, #332]	; (801c664 <udp_input+0x218>)
 801c518:	695b      	ldr	r3, [r3, #20]
 801c51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c51e:	d10f      	bne.n	801c540 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c520:	69fb      	ldr	r3, [r7, #28]
 801c522:	681a      	ldr	r2, [r3, #0]
 801c524:	683b      	ldr	r3, [r7, #0]
 801c526:	3304      	adds	r3, #4
 801c528:	681b      	ldr	r3, [r3, #0]
 801c52a:	429a      	cmp	r2, r3
 801c52c:	d008      	beq.n	801c540 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c530:	681a      	ldr	r2, [r3, #0]
 801c532:	683b      	ldr	r3, [r7, #0]
 801c534:	3304      	adds	r3, #4
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	429a      	cmp	r2, r3
 801c53a:	d101      	bne.n	801c540 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801c53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c53e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c542:	8a9b      	ldrh	r3, [r3, #20]
 801c544:	8a3a      	ldrh	r2, [r7, #16]
 801c546:	429a      	cmp	r2, r3
 801c548:	d118      	bne.n	801c57c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c54c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d005      	beq.n	801c55e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c554:	685a      	ldr	r2, [r3, #4]
 801c556:	4b43      	ldr	r3, [pc, #268]	; (801c664 <udp_input+0x218>)
 801c558:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c55a:	429a      	cmp	r2, r3
 801c55c:	d10e      	bne.n	801c57c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c55e:	6a3b      	ldr	r3, [r7, #32]
 801c560:	2b00      	cmp	r3, #0
 801c562:	d014      	beq.n	801c58e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c566:	68da      	ldr	r2, [r3, #12]
 801c568:	6a3b      	ldr	r3, [r7, #32]
 801c56a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c56c:	4b3e      	ldr	r3, [pc, #248]	; (801c668 <udp_input+0x21c>)
 801c56e:	681a      	ldr	r2, [r3, #0]
 801c570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c572:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c574:	4a3c      	ldr	r2, [pc, #240]	; (801c668 <udp_input+0x21c>)
 801c576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c578:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c57a:	e008      	b.n	801c58e <udp_input+0x142>
      }
    }

    prev = pcb;
 801c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c57e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c582:	68db      	ldr	r3, [r3, #12]
 801c584:	627b      	str	r3, [r7, #36]	; 0x24
 801c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d1a7      	bne.n	801c4dc <udp_input+0x90>
 801c58c:	e000      	b.n	801c590 <udp_input+0x144>
        break;
 801c58e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c592:	2b00      	cmp	r3, #0
 801c594:	d101      	bne.n	801c59a <udp_input+0x14e>
    pcb = uncon_pcb;
 801c596:	69fb      	ldr	r3, [r7, #28]
 801c598:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d002      	beq.n	801c5a6 <udp_input+0x15a>
    for_us = 1;
 801c5a0:	2301      	movs	r3, #1
 801c5a2:	76fb      	strb	r3, [r7, #27]
 801c5a4:	e00a      	b.n	801c5bc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c5a6:	683b      	ldr	r3, [r7, #0]
 801c5a8:	3304      	adds	r3, #4
 801c5aa:	681a      	ldr	r2, [r3, #0]
 801c5ac:	4b2d      	ldr	r3, [pc, #180]	; (801c664 <udp_input+0x218>)
 801c5ae:	695b      	ldr	r3, [r3, #20]
 801c5b0:	429a      	cmp	r2, r3
 801c5b2:	bf0c      	ite	eq
 801c5b4:	2301      	moveq	r3, #1
 801c5b6:	2300      	movne	r3, #0
 801c5b8:	b2db      	uxtb	r3, r3
 801c5ba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c5bc:	7efb      	ldrb	r3, [r7, #27]
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	d041      	beq.n	801c646 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c5c2:	2108      	movs	r1, #8
 801c5c4:	6878      	ldr	r0, [r7, #4]
 801c5c6:	f7f9 f9c9 	bl	801595c <pbuf_remove_header>
 801c5ca:	4603      	mov	r3, r0
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d00a      	beq.n	801c5e6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c5d0:	4b20      	ldr	r3, [pc, #128]	; (801c654 <udp_input+0x208>)
 801c5d2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801c5d6:	4925      	ldr	r1, [pc, #148]	; (801c66c <udp_input+0x220>)
 801c5d8:	4820      	ldr	r0, [pc, #128]	; (801c65c <udp_input+0x210>)
 801c5da:	f002 fcb7 	bl	801ef4c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c5de:	6878      	ldr	r0, [r7, #4]
 801c5e0:	f7f9 fa54 	bl	8015a8c <pbuf_free>
      goto end;
 801c5e4:	e032      	b.n	801c64c <udp_input+0x200>
    }

    if (pcb != NULL) {
 801c5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d012      	beq.n	801c612 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5ee:	699b      	ldr	r3, [r3, #24]
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	d00a      	beq.n	801c60a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5f6:	699c      	ldr	r4, [r3, #24]
 801c5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5fa:	69d8      	ldr	r0, [r3, #28]
 801c5fc:	8a3b      	ldrh	r3, [r7, #16]
 801c5fe:	9300      	str	r3, [sp, #0]
 801c600:	4b1b      	ldr	r3, [pc, #108]	; (801c670 <udp_input+0x224>)
 801c602:	687a      	ldr	r2, [r7, #4]
 801c604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c606:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c608:	e021      	b.n	801c64e <udp_input+0x202>
        pbuf_free(p);
 801c60a:	6878      	ldr	r0, [r7, #4]
 801c60c:	f7f9 fa3e 	bl	8015a8c <pbuf_free>
        goto end;
 801c610:	e01c      	b.n	801c64c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c612:	7cfb      	ldrb	r3, [r7, #19]
 801c614:	2b00      	cmp	r3, #0
 801c616:	d112      	bne.n	801c63e <udp_input+0x1f2>
 801c618:	4b12      	ldr	r3, [pc, #72]	; (801c664 <udp_input+0x218>)
 801c61a:	695b      	ldr	r3, [r3, #20]
 801c61c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c620:	2be0      	cmp	r3, #224	; 0xe0
 801c622:	d00c      	beq.n	801c63e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c624:	4b0f      	ldr	r3, [pc, #60]	; (801c664 <udp_input+0x218>)
 801c626:	899b      	ldrh	r3, [r3, #12]
 801c628:	3308      	adds	r3, #8
 801c62a:	b29b      	uxth	r3, r3
 801c62c:	b21b      	sxth	r3, r3
 801c62e:	4619      	mov	r1, r3
 801c630:	6878      	ldr	r0, [r7, #4]
 801c632:	f7f9 fa18 	bl	8015a66 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c636:	2103      	movs	r1, #3
 801c638:	6878      	ldr	r0, [r7, #4]
 801c63a:	f001 f89b 	bl	801d774 <icmp_dest_unreach>
      pbuf_free(p);
 801c63e:	6878      	ldr	r0, [r7, #4]
 801c640:	f7f9 fa24 	bl	8015a8c <pbuf_free>
  return;
 801c644:	e003      	b.n	801c64e <udp_input+0x202>
    pbuf_free(p);
 801c646:	6878      	ldr	r0, [r7, #4]
 801c648:	f7f9 fa20 	bl	8015a8c <pbuf_free>
  return;
 801c64c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c64e:	372c      	adds	r7, #44	; 0x2c
 801c650:	46bd      	mov	sp, r7
 801c652:	bd90      	pop	{r4, r7, pc}
 801c654:	08023418 	.word	0x08023418
 801c658:	080234bc 	.word	0x080234bc
 801c65c:	0802346c 	.word	0x0802346c
 801c660:	080234d4 	.word	0x080234d4
 801c664:	20011048 	.word	0x20011048
 801c668:	20014774 	.word	0x20014774
 801c66c:	080234f0 	.word	0x080234f0
 801c670:	20011058 	.word	0x20011058

0801c674 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c674:	b480      	push	{r7}
 801c676:	b085      	sub	sp, #20
 801c678:	af00      	add	r7, sp, #0
 801c67a:	6078      	str	r0, [r7, #4]
 801c67c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	2b00      	cmp	r3, #0
 801c682:	d01e      	beq.n	801c6c2 <udp_netif_ip_addr_changed+0x4e>
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d01a      	beq.n	801c6c2 <udp_netif_ip_addr_changed+0x4e>
 801c68c:	683b      	ldr	r3, [r7, #0]
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d017      	beq.n	801c6c2 <udp_netif_ip_addr_changed+0x4e>
 801c692:	683b      	ldr	r3, [r7, #0]
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	2b00      	cmp	r3, #0
 801c698:	d013      	beq.n	801c6c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c69a:	4b0d      	ldr	r3, [pc, #52]	; (801c6d0 <udp_netif_ip_addr_changed+0x5c>)
 801c69c:	681b      	ldr	r3, [r3, #0]
 801c69e:	60fb      	str	r3, [r7, #12]
 801c6a0:	e00c      	b.n	801c6bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c6a2:	68fb      	ldr	r3, [r7, #12]
 801c6a4:	681a      	ldr	r2, [r3, #0]
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	681b      	ldr	r3, [r3, #0]
 801c6aa:	429a      	cmp	r2, r3
 801c6ac:	d103      	bne.n	801c6b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c6ae:	683b      	ldr	r3, [r7, #0]
 801c6b0:	681a      	ldr	r2, [r3, #0]
 801c6b2:	68fb      	ldr	r3, [r7, #12]
 801c6b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c6b6:	68fb      	ldr	r3, [r7, #12]
 801c6b8:	68db      	ldr	r3, [r3, #12]
 801c6ba:	60fb      	str	r3, [r7, #12]
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d1ef      	bne.n	801c6a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c6c2:	bf00      	nop
 801c6c4:	3714      	adds	r7, #20
 801c6c6:	46bd      	mov	sp, r7
 801c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6cc:	4770      	bx	lr
 801c6ce:	bf00      	nop
 801c6d0:	20014774 	.word	0x20014774

0801c6d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801c6d4:	b580      	push	{r7, lr}
 801c6d6:	b082      	sub	sp, #8
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801c6dc:	4915      	ldr	r1, [pc, #84]	; (801c734 <etharp_free_entry+0x60>)
 801c6de:	687a      	ldr	r2, [r7, #4]
 801c6e0:	4613      	mov	r3, r2
 801c6e2:	005b      	lsls	r3, r3, #1
 801c6e4:	4413      	add	r3, r2
 801c6e6:	00db      	lsls	r3, r3, #3
 801c6e8:	440b      	add	r3, r1
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	2b00      	cmp	r3, #0
 801c6ee:	d013      	beq.n	801c718 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801c6f0:	4910      	ldr	r1, [pc, #64]	; (801c734 <etharp_free_entry+0x60>)
 801c6f2:	687a      	ldr	r2, [r7, #4]
 801c6f4:	4613      	mov	r3, r2
 801c6f6:	005b      	lsls	r3, r3, #1
 801c6f8:	4413      	add	r3, r2
 801c6fa:	00db      	lsls	r3, r3, #3
 801c6fc:	440b      	add	r3, r1
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	4618      	mov	r0, r3
 801c702:	f7f9 f9c3 	bl	8015a8c <pbuf_free>
    arp_table[i].q = NULL;
 801c706:	490b      	ldr	r1, [pc, #44]	; (801c734 <etharp_free_entry+0x60>)
 801c708:	687a      	ldr	r2, [r7, #4]
 801c70a:	4613      	mov	r3, r2
 801c70c:	005b      	lsls	r3, r3, #1
 801c70e:	4413      	add	r3, r2
 801c710:	00db      	lsls	r3, r3, #3
 801c712:	440b      	add	r3, r1
 801c714:	2200      	movs	r2, #0
 801c716:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801c718:	4906      	ldr	r1, [pc, #24]	; (801c734 <etharp_free_entry+0x60>)
 801c71a:	687a      	ldr	r2, [r7, #4]
 801c71c:	4613      	mov	r3, r2
 801c71e:	005b      	lsls	r3, r3, #1
 801c720:	4413      	add	r3, r2
 801c722:	00db      	lsls	r3, r3, #3
 801c724:	440b      	add	r3, r1
 801c726:	3314      	adds	r3, #20
 801c728:	2200      	movs	r2, #0
 801c72a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801c72c:	bf00      	nop
 801c72e:	3708      	adds	r7, #8
 801c730:	46bd      	mov	sp, r7
 801c732:	bd80      	pop	{r7, pc}
 801c734:	2000c83c 	.word	0x2000c83c

0801c738 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801c738:	b580      	push	{r7, lr}
 801c73a:	b082      	sub	sp, #8
 801c73c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c73e:	2300      	movs	r3, #0
 801c740:	607b      	str	r3, [r7, #4]
 801c742:	e096      	b.n	801c872 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801c744:	494f      	ldr	r1, [pc, #316]	; (801c884 <etharp_tmr+0x14c>)
 801c746:	687a      	ldr	r2, [r7, #4]
 801c748:	4613      	mov	r3, r2
 801c74a:	005b      	lsls	r3, r3, #1
 801c74c:	4413      	add	r3, r2
 801c74e:	00db      	lsls	r3, r3, #3
 801c750:	440b      	add	r3, r1
 801c752:	3314      	adds	r3, #20
 801c754:	781b      	ldrb	r3, [r3, #0]
 801c756:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801c758:	78fb      	ldrb	r3, [r7, #3]
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	f000 8086 	beq.w	801c86c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801c760:	4948      	ldr	r1, [pc, #288]	; (801c884 <etharp_tmr+0x14c>)
 801c762:	687a      	ldr	r2, [r7, #4]
 801c764:	4613      	mov	r3, r2
 801c766:	005b      	lsls	r3, r3, #1
 801c768:	4413      	add	r3, r2
 801c76a:	00db      	lsls	r3, r3, #3
 801c76c:	440b      	add	r3, r1
 801c76e:	3312      	adds	r3, #18
 801c770:	881b      	ldrh	r3, [r3, #0]
 801c772:	3301      	adds	r3, #1
 801c774:	b298      	uxth	r0, r3
 801c776:	4943      	ldr	r1, [pc, #268]	; (801c884 <etharp_tmr+0x14c>)
 801c778:	687a      	ldr	r2, [r7, #4]
 801c77a:	4613      	mov	r3, r2
 801c77c:	005b      	lsls	r3, r3, #1
 801c77e:	4413      	add	r3, r2
 801c780:	00db      	lsls	r3, r3, #3
 801c782:	440b      	add	r3, r1
 801c784:	3312      	adds	r3, #18
 801c786:	4602      	mov	r2, r0
 801c788:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c78a:	493e      	ldr	r1, [pc, #248]	; (801c884 <etharp_tmr+0x14c>)
 801c78c:	687a      	ldr	r2, [r7, #4]
 801c78e:	4613      	mov	r3, r2
 801c790:	005b      	lsls	r3, r3, #1
 801c792:	4413      	add	r3, r2
 801c794:	00db      	lsls	r3, r3, #3
 801c796:	440b      	add	r3, r1
 801c798:	3312      	adds	r3, #18
 801c79a:	881b      	ldrh	r3, [r3, #0]
 801c79c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801c7a0:	d215      	bcs.n	801c7ce <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c7a2:	4938      	ldr	r1, [pc, #224]	; (801c884 <etharp_tmr+0x14c>)
 801c7a4:	687a      	ldr	r2, [r7, #4]
 801c7a6:	4613      	mov	r3, r2
 801c7a8:	005b      	lsls	r3, r3, #1
 801c7aa:	4413      	add	r3, r2
 801c7ac:	00db      	lsls	r3, r3, #3
 801c7ae:	440b      	add	r3, r1
 801c7b0:	3314      	adds	r3, #20
 801c7b2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c7b4:	2b01      	cmp	r3, #1
 801c7b6:	d10e      	bne.n	801c7d6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801c7b8:	4932      	ldr	r1, [pc, #200]	; (801c884 <etharp_tmr+0x14c>)
 801c7ba:	687a      	ldr	r2, [r7, #4]
 801c7bc:	4613      	mov	r3, r2
 801c7be:	005b      	lsls	r3, r3, #1
 801c7c0:	4413      	add	r3, r2
 801c7c2:	00db      	lsls	r3, r3, #3
 801c7c4:	440b      	add	r3, r1
 801c7c6:	3312      	adds	r3, #18
 801c7c8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c7ca:	2b04      	cmp	r3, #4
 801c7cc:	d903      	bls.n	801c7d6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801c7ce:	6878      	ldr	r0, [r7, #4]
 801c7d0:	f7ff ff80 	bl	801c6d4 <etharp_free_entry>
 801c7d4:	e04a      	b.n	801c86c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801c7d6:	492b      	ldr	r1, [pc, #172]	; (801c884 <etharp_tmr+0x14c>)
 801c7d8:	687a      	ldr	r2, [r7, #4]
 801c7da:	4613      	mov	r3, r2
 801c7dc:	005b      	lsls	r3, r3, #1
 801c7de:	4413      	add	r3, r2
 801c7e0:	00db      	lsls	r3, r3, #3
 801c7e2:	440b      	add	r3, r1
 801c7e4:	3314      	adds	r3, #20
 801c7e6:	781b      	ldrb	r3, [r3, #0]
 801c7e8:	2b03      	cmp	r3, #3
 801c7ea:	d10a      	bne.n	801c802 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801c7ec:	4925      	ldr	r1, [pc, #148]	; (801c884 <etharp_tmr+0x14c>)
 801c7ee:	687a      	ldr	r2, [r7, #4]
 801c7f0:	4613      	mov	r3, r2
 801c7f2:	005b      	lsls	r3, r3, #1
 801c7f4:	4413      	add	r3, r2
 801c7f6:	00db      	lsls	r3, r3, #3
 801c7f8:	440b      	add	r3, r1
 801c7fa:	3314      	adds	r3, #20
 801c7fc:	2204      	movs	r2, #4
 801c7fe:	701a      	strb	r2, [r3, #0]
 801c800:	e034      	b.n	801c86c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801c802:	4920      	ldr	r1, [pc, #128]	; (801c884 <etharp_tmr+0x14c>)
 801c804:	687a      	ldr	r2, [r7, #4]
 801c806:	4613      	mov	r3, r2
 801c808:	005b      	lsls	r3, r3, #1
 801c80a:	4413      	add	r3, r2
 801c80c:	00db      	lsls	r3, r3, #3
 801c80e:	440b      	add	r3, r1
 801c810:	3314      	adds	r3, #20
 801c812:	781b      	ldrb	r3, [r3, #0]
 801c814:	2b04      	cmp	r3, #4
 801c816:	d10a      	bne.n	801c82e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801c818:	491a      	ldr	r1, [pc, #104]	; (801c884 <etharp_tmr+0x14c>)
 801c81a:	687a      	ldr	r2, [r7, #4]
 801c81c:	4613      	mov	r3, r2
 801c81e:	005b      	lsls	r3, r3, #1
 801c820:	4413      	add	r3, r2
 801c822:	00db      	lsls	r3, r3, #3
 801c824:	440b      	add	r3, r1
 801c826:	3314      	adds	r3, #20
 801c828:	2202      	movs	r2, #2
 801c82a:	701a      	strb	r2, [r3, #0]
 801c82c:	e01e      	b.n	801c86c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c82e:	4915      	ldr	r1, [pc, #84]	; (801c884 <etharp_tmr+0x14c>)
 801c830:	687a      	ldr	r2, [r7, #4]
 801c832:	4613      	mov	r3, r2
 801c834:	005b      	lsls	r3, r3, #1
 801c836:	4413      	add	r3, r2
 801c838:	00db      	lsls	r3, r3, #3
 801c83a:	440b      	add	r3, r1
 801c83c:	3314      	adds	r3, #20
 801c83e:	781b      	ldrb	r3, [r3, #0]
 801c840:	2b01      	cmp	r3, #1
 801c842:	d113      	bne.n	801c86c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801c844:	490f      	ldr	r1, [pc, #60]	; (801c884 <etharp_tmr+0x14c>)
 801c846:	687a      	ldr	r2, [r7, #4]
 801c848:	4613      	mov	r3, r2
 801c84a:	005b      	lsls	r3, r3, #1
 801c84c:	4413      	add	r3, r2
 801c84e:	00db      	lsls	r3, r3, #3
 801c850:	440b      	add	r3, r1
 801c852:	3308      	adds	r3, #8
 801c854:	6818      	ldr	r0, [r3, #0]
 801c856:	687a      	ldr	r2, [r7, #4]
 801c858:	4613      	mov	r3, r2
 801c85a:	005b      	lsls	r3, r3, #1
 801c85c:	4413      	add	r3, r2
 801c85e:	00db      	lsls	r3, r3, #3
 801c860:	4a08      	ldr	r2, [pc, #32]	; (801c884 <etharp_tmr+0x14c>)
 801c862:	4413      	add	r3, r2
 801c864:	3304      	adds	r3, #4
 801c866:	4619      	mov	r1, r3
 801c868:	f000 fe6e 	bl	801d548 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	3301      	adds	r3, #1
 801c870:	607b      	str	r3, [r7, #4]
 801c872:	687b      	ldr	r3, [r7, #4]
 801c874:	2b09      	cmp	r3, #9
 801c876:	f77f af65 	ble.w	801c744 <etharp_tmr+0xc>
      }
    }
  }
}
 801c87a:	bf00      	nop
 801c87c:	bf00      	nop
 801c87e:	3708      	adds	r7, #8
 801c880:	46bd      	mov	sp, r7
 801c882:	bd80      	pop	{r7, pc}
 801c884:	2000c83c 	.word	0x2000c83c

0801c888 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801c888:	b580      	push	{r7, lr}
 801c88a:	b08a      	sub	sp, #40	; 0x28
 801c88c:	af00      	add	r7, sp, #0
 801c88e:	60f8      	str	r0, [r7, #12]
 801c890:	460b      	mov	r3, r1
 801c892:	607a      	str	r2, [r7, #4]
 801c894:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801c896:	230a      	movs	r3, #10
 801c898:	84fb      	strh	r3, [r7, #38]	; 0x26
 801c89a:	230a      	movs	r3, #10
 801c89c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801c89e:	230a      	movs	r3, #10
 801c8a0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801c8a2:	2300      	movs	r3, #0
 801c8a4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801c8a6:	230a      	movs	r3, #10
 801c8a8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801c8aa:	2300      	movs	r3, #0
 801c8ac:	83bb      	strh	r3, [r7, #28]
 801c8ae:	2300      	movs	r3, #0
 801c8b0:	837b      	strh	r3, [r7, #26]
 801c8b2:	2300      	movs	r3, #0
 801c8b4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c8b6:	2300      	movs	r3, #0
 801c8b8:	843b      	strh	r3, [r7, #32]
 801c8ba:	e0ae      	b.n	801ca1a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801c8bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c8c0:	49a6      	ldr	r1, [pc, #664]	; (801cb5c <etharp_find_entry+0x2d4>)
 801c8c2:	4613      	mov	r3, r2
 801c8c4:	005b      	lsls	r3, r3, #1
 801c8c6:	4413      	add	r3, r2
 801c8c8:	00db      	lsls	r3, r3, #3
 801c8ca:	440b      	add	r3, r1
 801c8cc:	3314      	adds	r3, #20
 801c8ce:	781b      	ldrb	r3, [r3, #0]
 801c8d0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801c8d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c8d6:	2b0a      	cmp	r3, #10
 801c8d8:	d105      	bne.n	801c8e6 <etharp_find_entry+0x5e>
 801c8da:	7dfb      	ldrb	r3, [r7, #23]
 801c8dc:	2b00      	cmp	r3, #0
 801c8de:	d102      	bne.n	801c8e6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801c8e0:	8c3b      	ldrh	r3, [r7, #32]
 801c8e2:	847b      	strh	r3, [r7, #34]	; 0x22
 801c8e4:	e095      	b.n	801ca12 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801c8e6:	7dfb      	ldrb	r3, [r7, #23]
 801c8e8:	2b00      	cmp	r3, #0
 801c8ea:	f000 8092 	beq.w	801ca12 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801c8ee:	7dfb      	ldrb	r3, [r7, #23]
 801c8f0:	2b01      	cmp	r3, #1
 801c8f2:	d009      	beq.n	801c908 <etharp_find_entry+0x80>
 801c8f4:	7dfb      	ldrb	r3, [r7, #23]
 801c8f6:	2b01      	cmp	r3, #1
 801c8f8:	d806      	bhi.n	801c908 <etharp_find_entry+0x80>
 801c8fa:	4b99      	ldr	r3, [pc, #612]	; (801cb60 <etharp_find_entry+0x2d8>)
 801c8fc:	f240 1223 	movw	r2, #291	; 0x123
 801c900:	4998      	ldr	r1, [pc, #608]	; (801cb64 <etharp_find_entry+0x2dc>)
 801c902:	4899      	ldr	r0, [pc, #612]	; (801cb68 <etharp_find_entry+0x2e0>)
 801c904:	f002 fb22 	bl	801ef4c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801c908:	68fb      	ldr	r3, [r7, #12]
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	d020      	beq.n	801c950 <etharp_find_entry+0xc8>
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	6819      	ldr	r1, [r3, #0]
 801c912:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c916:	4891      	ldr	r0, [pc, #580]	; (801cb5c <etharp_find_entry+0x2d4>)
 801c918:	4613      	mov	r3, r2
 801c91a:	005b      	lsls	r3, r3, #1
 801c91c:	4413      	add	r3, r2
 801c91e:	00db      	lsls	r3, r3, #3
 801c920:	4403      	add	r3, r0
 801c922:	3304      	adds	r3, #4
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	4299      	cmp	r1, r3
 801c928:	d112      	bne.n	801c950 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d00c      	beq.n	801c94a <etharp_find_entry+0xc2>
 801c930:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c934:	4989      	ldr	r1, [pc, #548]	; (801cb5c <etharp_find_entry+0x2d4>)
 801c936:	4613      	mov	r3, r2
 801c938:	005b      	lsls	r3, r3, #1
 801c93a:	4413      	add	r3, r2
 801c93c:	00db      	lsls	r3, r3, #3
 801c93e:	440b      	add	r3, r1
 801c940:	3308      	adds	r3, #8
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	687a      	ldr	r2, [r7, #4]
 801c946:	429a      	cmp	r2, r3
 801c948:	d102      	bne.n	801c950 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801c94a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c94e:	e100      	b.n	801cb52 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801c950:	7dfb      	ldrb	r3, [r7, #23]
 801c952:	2b01      	cmp	r3, #1
 801c954:	d140      	bne.n	801c9d8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801c956:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c95a:	4980      	ldr	r1, [pc, #512]	; (801cb5c <etharp_find_entry+0x2d4>)
 801c95c:	4613      	mov	r3, r2
 801c95e:	005b      	lsls	r3, r3, #1
 801c960:	4413      	add	r3, r2
 801c962:	00db      	lsls	r3, r3, #3
 801c964:	440b      	add	r3, r1
 801c966:	681b      	ldr	r3, [r3, #0]
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d01a      	beq.n	801c9a2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801c96c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c970:	497a      	ldr	r1, [pc, #488]	; (801cb5c <etharp_find_entry+0x2d4>)
 801c972:	4613      	mov	r3, r2
 801c974:	005b      	lsls	r3, r3, #1
 801c976:	4413      	add	r3, r2
 801c978:	00db      	lsls	r3, r3, #3
 801c97a:	440b      	add	r3, r1
 801c97c:	3312      	adds	r3, #18
 801c97e:	881b      	ldrh	r3, [r3, #0]
 801c980:	8bba      	ldrh	r2, [r7, #28]
 801c982:	429a      	cmp	r2, r3
 801c984:	d845      	bhi.n	801ca12 <etharp_find_entry+0x18a>
            old_queue = i;
 801c986:	8c3b      	ldrh	r3, [r7, #32]
 801c988:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801c98a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c98e:	4973      	ldr	r1, [pc, #460]	; (801cb5c <etharp_find_entry+0x2d4>)
 801c990:	4613      	mov	r3, r2
 801c992:	005b      	lsls	r3, r3, #1
 801c994:	4413      	add	r3, r2
 801c996:	00db      	lsls	r3, r3, #3
 801c998:	440b      	add	r3, r1
 801c99a:	3312      	adds	r3, #18
 801c99c:	881b      	ldrh	r3, [r3, #0]
 801c99e:	83bb      	strh	r3, [r7, #28]
 801c9a0:	e037      	b.n	801ca12 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801c9a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c9a6:	496d      	ldr	r1, [pc, #436]	; (801cb5c <etharp_find_entry+0x2d4>)
 801c9a8:	4613      	mov	r3, r2
 801c9aa:	005b      	lsls	r3, r3, #1
 801c9ac:	4413      	add	r3, r2
 801c9ae:	00db      	lsls	r3, r3, #3
 801c9b0:	440b      	add	r3, r1
 801c9b2:	3312      	adds	r3, #18
 801c9b4:	881b      	ldrh	r3, [r3, #0]
 801c9b6:	8b7a      	ldrh	r2, [r7, #26]
 801c9b8:	429a      	cmp	r2, r3
 801c9ba:	d82a      	bhi.n	801ca12 <etharp_find_entry+0x18a>
            old_pending = i;
 801c9bc:	8c3b      	ldrh	r3, [r7, #32]
 801c9be:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801c9c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c9c4:	4965      	ldr	r1, [pc, #404]	; (801cb5c <etharp_find_entry+0x2d4>)
 801c9c6:	4613      	mov	r3, r2
 801c9c8:	005b      	lsls	r3, r3, #1
 801c9ca:	4413      	add	r3, r2
 801c9cc:	00db      	lsls	r3, r3, #3
 801c9ce:	440b      	add	r3, r1
 801c9d0:	3312      	adds	r3, #18
 801c9d2:	881b      	ldrh	r3, [r3, #0]
 801c9d4:	837b      	strh	r3, [r7, #26]
 801c9d6:	e01c      	b.n	801ca12 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801c9d8:	7dfb      	ldrb	r3, [r7, #23]
 801c9da:	2b01      	cmp	r3, #1
 801c9dc:	d919      	bls.n	801ca12 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801c9de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c9e2:	495e      	ldr	r1, [pc, #376]	; (801cb5c <etharp_find_entry+0x2d4>)
 801c9e4:	4613      	mov	r3, r2
 801c9e6:	005b      	lsls	r3, r3, #1
 801c9e8:	4413      	add	r3, r2
 801c9ea:	00db      	lsls	r3, r3, #3
 801c9ec:	440b      	add	r3, r1
 801c9ee:	3312      	adds	r3, #18
 801c9f0:	881b      	ldrh	r3, [r3, #0]
 801c9f2:	8b3a      	ldrh	r2, [r7, #24]
 801c9f4:	429a      	cmp	r2, r3
 801c9f6:	d80c      	bhi.n	801ca12 <etharp_find_entry+0x18a>
            old_stable = i;
 801c9f8:	8c3b      	ldrh	r3, [r7, #32]
 801c9fa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801c9fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ca00:	4956      	ldr	r1, [pc, #344]	; (801cb5c <etharp_find_entry+0x2d4>)
 801ca02:	4613      	mov	r3, r2
 801ca04:	005b      	lsls	r3, r3, #1
 801ca06:	4413      	add	r3, r2
 801ca08:	00db      	lsls	r3, r3, #3
 801ca0a:	440b      	add	r3, r1
 801ca0c:	3312      	adds	r3, #18
 801ca0e:	881b      	ldrh	r3, [r3, #0]
 801ca10:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ca12:	8c3b      	ldrh	r3, [r7, #32]
 801ca14:	3301      	adds	r3, #1
 801ca16:	b29b      	uxth	r3, r3
 801ca18:	843b      	strh	r3, [r7, #32]
 801ca1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ca1e:	2b09      	cmp	r3, #9
 801ca20:	f77f af4c 	ble.w	801c8bc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801ca24:	7afb      	ldrb	r3, [r7, #11]
 801ca26:	f003 0302 	and.w	r3, r3, #2
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d108      	bne.n	801ca40 <etharp_find_entry+0x1b8>
 801ca2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ca32:	2b0a      	cmp	r3, #10
 801ca34:	d107      	bne.n	801ca46 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801ca36:	7afb      	ldrb	r3, [r7, #11]
 801ca38:	f003 0301 	and.w	r3, r3, #1
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d102      	bne.n	801ca46 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801ca40:	f04f 33ff 	mov.w	r3, #4294967295
 801ca44:	e085      	b.n	801cb52 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801ca46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ca4a:	2b09      	cmp	r3, #9
 801ca4c:	dc02      	bgt.n	801ca54 <etharp_find_entry+0x1cc>
    i = empty;
 801ca4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ca50:	843b      	strh	r3, [r7, #32]
 801ca52:	e039      	b.n	801cac8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801ca54:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801ca58:	2b09      	cmp	r3, #9
 801ca5a:	dc14      	bgt.n	801ca86 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801ca5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ca5e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801ca60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ca64:	493d      	ldr	r1, [pc, #244]	; (801cb5c <etharp_find_entry+0x2d4>)
 801ca66:	4613      	mov	r3, r2
 801ca68:	005b      	lsls	r3, r3, #1
 801ca6a:	4413      	add	r3, r2
 801ca6c:	00db      	lsls	r3, r3, #3
 801ca6e:	440b      	add	r3, r1
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d018      	beq.n	801caa8 <etharp_find_entry+0x220>
 801ca76:	4b3a      	ldr	r3, [pc, #232]	; (801cb60 <etharp_find_entry+0x2d8>)
 801ca78:	f240 126d 	movw	r2, #365	; 0x16d
 801ca7c:	493b      	ldr	r1, [pc, #236]	; (801cb6c <etharp_find_entry+0x2e4>)
 801ca7e:	483a      	ldr	r0, [pc, #232]	; (801cb68 <etharp_find_entry+0x2e0>)
 801ca80:	f002 fa64 	bl	801ef4c <iprintf>
 801ca84:	e010      	b.n	801caa8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ca86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ca8a:	2b09      	cmp	r3, #9
 801ca8c:	dc02      	bgt.n	801ca94 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801ca8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ca90:	843b      	strh	r3, [r7, #32]
 801ca92:	e009      	b.n	801caa8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ca94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ca98:	2b09      	cmp	r3, #9
 801ca9a:	dc02      	bgt.n	801caa2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ca9c:	8bfb      	ldrh	r3, [r7, #30]
 801ca9e:	843b      	strh	r3, [r7, #32]
 801caa0:	e002      	b.n	801caa8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801caa2:	f04f 33ff 	mov.w	r3, #4294967295
 801caa6:	e054      	b.n	801cb52 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801caa8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801caac:	2b09      	cmp	r3, #9
 801caae:	dd06      	ble.n	801cabe <etharp_find_entry+0x236>
 801cab0:	4b2b      	ldr	r3, [pc, #172]	; (801cb60 <etharp_find_entry+0x2d8>)
 801cab2:	f240 127f 	movw	r2, #383	; 0x17f
 801cab6:	492e      	ldr	r1, [pc, #184]	; (801cb70 <etharp_find_entry+0x2e8>)
 801cab8:	482b      	ldr	r0, [pc, #172]	; (801cb68 <etharp_find_entry+0x2e0>)
 801caba:	f002 fa47 	bl	801ef4c <iprintf>
    etharp_free_entry(i);
 801cabe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cac2:	4618      	mov	r0, r3
 801cac4:	f7ff fe06 	bl	801c6d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801cac8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cacc:	2b09      	cmp	r3, #9
 801cace:	dd06      	ble.n	801cade <etharp_find_entry+0x256>
 801cad0:	4b23      	ldr	r3, [pc, #140]	; (801cb60 <etharp_find_entry+0x2d8>)
 801cad2:	f240 1283 	movw	r2, #387	; 0x183
 801cad6:	4926      	ldr	r1, [pc, #152]	; (801cb70 <etharp_find_entry+0x2e8>)
 801cad8:	4823      	ldr	r0, [pc, #140]	; (801cb68 <etharp_find_entry+0x2e0>)
 801cada:	f002 fa37 	bl	801ef4c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801cade:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cae2:	491e      	ldr	r1, [pc, #120]	; (801cb5c <etharp_find_entry+0x2d4>)
 801cae4:	4613      	mov	r3, r2
 801cae6:	005b      	lsls	r3, r3, #1
 801cae8:	4413      	add	r3, r2
 801caea:	00db      	lsls	r3, r3, #3
 801caec:	440b      	add	r3, r1
 801caee:	3314      	adds	r3, #20
 801caf0:	781b      	ldrb	r3, [r3, #0]
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	d006      	beq.n	801cb04 <etharp_find_entry+0x27c>
 801caf6:	4b1a      	ldr	r3, [pc, #104]	; (801cb60 <etharp_find_entry+0x2d8>)
 801caf8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801cafc:	491d      	ldr	r1, [pc, #116]	; (801cb74 <etharp_find_entry+0x2ec>)
 801cafe:	481a      	ldr	r0, [pc, #104]	; (801cb68 <etharp_find_entry+0x2e0>)
 801cb00:	f002 fa24 	bl	801ef4c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d00b      	beq.n	801cb22 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801cb0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	6819      	ldr	r1, [r3, #0]
 801cb12:	4812      	ldr	r0, [pc, #72]	; (801cb5c <etharp_find_entry+0x2d4>)
 801cb14:	4613      	mov	r3, r2
 801cb16:	005b      	lsls	r3, r3, #1
 801cb18:	4413      	add	r3, r2
 801cb1a:	00db      	lsls	r3, r3, #3
 801cb1c:	4403      	add	r3, r0
 801cb1e:	3304      	adds	r3, #4
 801cb20:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801cb22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb26:	490d      	ldr	r1, [pc, #52]	; (801cb5c <etharp_find_entry+0x2d4>)
 801cb28:	4613      	mov	r3, r2
 801cb2a:	005b      	lsls	r3, r3, #1
 801cb2c:	4413      	add	r3, r2
 801cb2e:	00db      	lsls	r3, r3, #3
 801cb30:	440b      	add	r3, r1
 801cb32:	3312      	adds	r3, #18
 801cb34:	2200      	movs	r2, #0
 801cb36:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801cb38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb3c:	4907      	ldr	r1, [pc, #28]	; (801cb5c <etharp_find_entry+0x2d4>)
 801cb3e:	4613      	mov	r3, r2
 801cb40:	005b      	lsls	r3, r3, #1
 801cb42:	4413      	add	r3, r2
 801cb44:	00db      	lsls	r3, r3, #3
 801cb46:	440b      	add	r3, r1
 801cb48:	3308      	adds	r3, #8
 801cb4a:	687a      	ldr	r2, [r7, #4]
 801cb4c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801cb4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801cb52:	4618      	mov	r0, r3
 801cb54:	3728      	adds	r7, #40	; 0x28
 801cb56:	46bd      	mov	sp, r7
 801cb58:	bd80      	pop	{r7, pc}
 801cb5a:	bf00      	nop
 801cb5c:	2000c83c 	.word	0x2000c83c
 801cb60:	0802377c 	.word	0x0802377c
 801cb64:	080237b4 	.word	0x080237b4
 801cb68:	080237f4 	.word	0x080237f4
 801cb6c:	0802381c 	.word	0x0802381c
 801cb70:	08023834 	.word	0x08023834
 801cb74:	08023848 	.word	0x08023848

0801cb78 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801cb78:	b580      	push	{r7, lr}
 801cb7a:	b088      	sub	sp, #32
 801cb7c:	af02      	add	r7, sp, #8
 801cb7e:	60f8      	str	r0, [r7, #12]
 801cb80:	60b9      	str	r1, [r7, #8]
 801cb82:	607a      	str	r2, [r7, #4]
 801cb84:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801cb86:	68fb      	ldr	r3, [r7, #12]
 801cb88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801cb8c:	2b06      	cmp	r3, #6
 801cb8e:	d006      	beq.n	801cb9e <etharp_update_arp_entry+0x26>
 801cb90:	4b48      	ldr	r3, [pc, #288]	; (801ccb4 <etharp_update_arp_entry+0x13c>)
 801cb92:	f240 12a9 	movw	r2, #425	; 0x1a9
 801cb96:	4948      	ldr	r1, [pc, #288]	; (801ccb8 <etharp_update_arp_entry+0x140>)
 801cb98:	4848      	ldr	r0, [pc, #288]	; (801ccbc <etharp_update_arp_entry+0x144>)
 801cb9a:	f002 f9d7 	bl	801ef4c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801cb9e:	68bb      	ldr	r3, [r7, #8]
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d012      	beq.n	801cbca <etharp_update_arp_entry+0x52>
 801cba4:	68bb      	ldr	r3, [r7, #8]
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	d00e      	beq.n	801cbca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801cbac:	68bb      	ldr	r3, [r7, #8]
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	68f9      	ldr	r1, [r7, #12]
 801cbb2:	4618      	mov	r0, r3
 801cbb4:	f001 f8fe 	bl	801ddb4 <ip4_addr_isbroadcast_u32>
 801cbb8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d105      	bne.n	801cbca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801cbbe:	68bb      	ldr	r3, [r7, #8]
 801cbc0:	681b      	ldr	r3, [r3, #0]
 801cbc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801cbc6:	2be0      	cmp	r3, #224	; 0xe0
 801cbc8:	d102      	bne.n	801cbd0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801cbca:	f06f 030f 	mvn.w	r3, #15
 801cbce:	e06c      	b.n	801ccaa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801cbd0:	78fb      	ldrb	r3, [r7, #3]
 801cbd2:	68fa      	ldr	r2, [r7, #12]
 801cbd4:	4619      	mov	r1, r3
 801cbd6:	68b8      	ldr	r0, [r7, #8]
 801cbd8:	f7ff fe56 	bl	801c888 <etharp_find_entry>
 801cbdc:	4603      	mov	r3, r0
 801cbde:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801cbe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	da02      	bge.n	801cbee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801cbe8:	8afb      	ldrh	r3, [r7, #22]
 801cbea:	b25b      	sxtb	r3, r3
 801cbec:	e05d      	b.n	801ccaa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801cbee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cbf2:	4933      	ldr	r1, [pc, #204]	; (801ccc0 <etharp_update_arp_entry+0x148>)
 801cbf4:	4613      	mov	r3, r2
 801cbf6:	005b      	lsls	r3, r3, #1
 801cbf8:	4413      	add	r3, r2
 801cbfa:	00db      	lsls	r3, r3, #3
 801cbfc:	440b      	add	r3, r1
 801cbfe:	3314      	adds	r3, #20
 801cc00:	2202      	movs	r2, #2
 801cc02:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801cc04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cc08:	492d      	ldr	r1, [pc, #180]	; (801ccc0 <etharp_update_arp_entry+0x148>)
 801cc0a:	4613      	mov	r3, r2
 801cc0c:	005b      	lsls	r3, r3, #1
 801cc0e:	4413      	add	r3, r2
 801cc10:	00db      	lsls	r3, r3, #3
 801cc12:	440b      	add	r3, r1
 801cc14:	3308      	adds	r3, #8
 801cc16:	68fa      	ldr	r2, [r7, #12]
 801cc18:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801cc1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cc1e:	4613      	mov	r3, r2
 801cc20:	005b      	lsls	r3, r3, #1
 801cc22:	4413      	add	r3, r2
 801cc24:	00db      	lsls	r3, r3, #3
 801cc26:	3308      	adds	r3, #8
 801cc28:	4a25      	ldr	r2, [pc, #148]	; (801ccc0 <etharp_update_arp_entry+0x148>)
 801cc2a:	4413      	add	r3, r2
 801cc2c:	3304      	adds	r3, #4
 801cc2e:	2206      	movs	r2, #6
 801cc30:	6879      	ldr	r1, [r7, #4]
 801cc32:	4618      	mov	r0, r3
 801cc34:	f002 f95a 	bl	801eeec <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801cc38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cc3c:	4920      	ldr	r1, [pc, #128]	; (801ccc0 <etharp_update_arp_entry+0x148>)
 801cc3e:	4613      	mov	r3, r2
 801cc40:	005b      	lsls	r3, r3, #1
 801cc42:	4413      	add	r3, r2
 801cc44:	00db      	lsls	r3, r3, #3
 801cc46:	440b      	add	r3, r1
 801cc48:	3312      	adds	r3, #18
 801cc4a:	2200      	movs	r2, #0
 801cc4c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801cc4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cc52:	491b      	ldr	r1, [pc, #108]	; (801ccc0 <etharp_update_arp_entry+0x148>)
 801cc54:	4613      	mov	r3, r2
 801cc56:	005b      	lsls	r3, r3, #1
 801cc58:	4413      	add	r3, r2
 801cc5a:	00db      	lsls	r3, r3, #3
 801cc5c:	440b      	add	r3, r1
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d021      	beq.n	801cca8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801cc64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cc68:	4915      	ldr	r1, [pc, #84]	; (801ccc0 <etharp_update_arp_entry+0x148>)
 801cc6a:	4613      	mov	r3, r2
 801cc6c:	005b      	lsls	r3, r3, #1
 801cc6e:	4413      	add	r3, r2
 801cc70:	00db      	lsls	r3, r3, #3
 801cc72:	440b      	add	r3, r1
 801cc74:	681b      	ldr	r3, [r3, #0]
 801cc76:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801cc78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cc7c:	4910      	ldr	r1, [pc, #64]	; (801ccc0 <etharp_update_arp_entry+0x148>)
 801cc7e:	4613      	mov	r3, r2
 801cc80:	005b      	lsls	r3, r3, #1
 801cc82:	4413      	add	r3, r2
 801cc84:	00db      	lsls	r3, r3, #3
 801cc86:	440b      	add	r3, r1
 801cc88:	2200      	movs	r2, #0
 801cc8a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801cc92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801cc96:	9300      	str	r3, [sp, #0]
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	6939      	ldr	r1, [r7, #16]
 801cc9c:	68f8      	ldr	r0, [r7, #12]
 801cc9e:	f001 ff91 	bl	801ebc4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801cca2:	6938      	ldr	r0, [r7, #16]
 801cca4:	f7f8 fef2 	bl	8015a8c <pbuf_free>
  }
  return ERR_OK;
 801cca8:	2300      	movs	r3, #0
}
 801ccaa:	4618      	mov	r0, r3
 801ccac:	3718      	adds	r7, #24
 801ccae:	46bd      	mov	sp, r7
 801ccb0:	bd80      	pop	{r7, pc}
 801ccb2:	bf00      	nop
 801ccb4:	0802377c 	.word	0x0802377c
 801ccb8:	08023874 	.word	0x08023874
 801ccbc:	080237f4 	.word	0x080237f4
 801ccc0:	2000c83c 	.word	0x2000c83c

0801ccc4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801ccc4:	b580      	push	{r7, lr}
 801ccc6:	b084      	sub	sp, #16
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cccc:	2300      	movs	r3, #0
 801ccce:	60fb      	str	r3, [r7, #12]
 801ccd0:	e01e      	b.n	801cd10 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801ccd2:	4913      	ldr	r1, [pc, #76]	; (801cd20 <etharp_cleanup_netif+0x5c>)
 801ccd4:	68fa      	ldr	r2, [r7, #12]
 801ccd6:	4613      	mov	r3, r2
 801ccd8:	005b      	lsls	r3, r3, #1
 801ccda:	4413      	add	r3, r2
 801ccdc:	00db      	lsls	r3, r3, #3
 801ccde:	440b      	add	r3, r1
 801cce0:	3314      	adds	r3, #20
 801cce2:	781b      	ldrb	r3, [r3, #0]
 801cce4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801cce6:	7afb      	ldrb	r3, [r7, #11]
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	d00e      	beq.n	801cd0a <etharp_cleanup_netif+0x46>
 801ccec:	490c      	ldr	r1, [pc, #48]	; (801cd20 <etharp_cleanup_netif+0x5c>)
 801ccee:	68fa      	ldr	r2, [r7, #12]
 801ccf0:	4613      	mov	r3, r2
 801ccf2:	005b      	lsls	r3, r3, #1
 801ccf4:	4413      	add	r3, r2
 801ccf6:	00db      	lsls	r3, r3, #3
 801ccf8:	440b      	add	r3, r1
 801ccfa:	3308      	adds	r3, #8
 801ccfc:	681b      	ldr	r3, [r3, #0]
 801ccfe:	687a      	ldr	r2, [r7, #4]
 801cd00:	429a      	cmp	r2, r3
 801cd02:	d102      	bne.n	801cd0a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801cd04:	68f8      	ldr	r0, [r7, #12]
 801cd06:	f7ff fce5 	bl	801c6d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cd0a:	68fb      	ldr	r3, [r7, #12]
 801cd0c:	3301      	adds	r3, #1
 801cd0e:	60fb      	str	r3, [r7, #12]
 801cd10:	68fb      	ldr	r3, [r7, #12]
 801cd12:	2b09      	cmp	r3, #9
 801cd14:	dddd      	ble.n	801ccd2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801cd16:	bf00      	nop
 801cd18:	bf00      	nop
 801cd1a:	3710      	adds	r7, #16
 801cd1c:	46bd      	mov	sp, r7
 801cd1e:	bd80      	pop	{r7, pc}
 801cd20:	2000c83c 	.word	0x2000c83c

0801cd24 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801cd24:	b5b0      	push	{r4, r5, r7, lr}
 801cd26:	b08a      	sub	sp, #40	; 0x28
 801cd28:	af04      	add	r7, sp, #16
 801cd2a:	6078      	str	r0, [r7, #4]
 801cd2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801cd2e:	683b      	ldr	r3, [r7, #0]
 801cd30:	2b00      	cmp	r3, #0
 801cd32:	d107      	bne.n	801cd44 <etharp_input+0x20>
 801cd34:	4b3d      	ldr	r3, [pc, #244]	; (801ce2c <etharp_input+0x108>)
 801cd36:	f240 228a 	movw	r2, #650	; 0x28a
 801cd3a:	493d      	ldr	r1, [pc, #244]	; (801ce30 <etharp_input+0x10c>)
 801cd3c:	483d      	ldr	r0, [pc, #244]	; (801ce34 <etharp_input+0x110>)
 801cd3e:	f002 f905 	bl	801ef4c <iprintf>
 801cd42:	e06f      	b.n	801ce24 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	685b      	ldr	r3, [r3, #4]
 801cd48:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801cd4a:	693b      	ldr	r3, [r7, #16]
 801cd4c:	881b      	ldrh	r3, [r3, #0]
 801cd4e:	b29b      	uxth	r3, r3
 801cd50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cd54:	d10c      	bne.n	801cd70 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801cd56:	693b      	ldr	r3, [r7, #16]
 801cd58:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801cd5a:	2b06      	cmp	r3, #6
 801cd5c:	d108      	bne.n	801cd70 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801cd5e:	693b      	ldr	r3, [r7, #16]
 801cd60:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801cd62:	2b04      	cmp	r3, #4
 801cd64:	d104      	bne.n	801cd70 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801cd66:	693b      	ldr	r3, [r7, #16]
 801cd68:	885b      	ldrh	r3, [r3, #2]
 801cd6a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801cd6c:	2b08      	cmp	r3, #8
 801cd6e:	d003      	beq.n	801cd78 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801cd70:	6878      	ldr	r0, [r7, #4]
 801cd72:	f7f8 fe8b 	bl	8015a8c <pbuf_free>
    return;
 801cd76:	e055      	b.n	801ce24 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801cd78:	693b      	ldr	r3, [r7, #16]
 801cd7a:	330e      	adds	r3, #14
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801cd80:	693b      	ldr	r3, [r7, #16]
 801cd82:	3318      	adds	r3, #24
 801cd84:	681b      	ldr	r3, [r3, #0]
 801cd86:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801cd88:	683b      	ldr	r3, [r7, #0]
 801cd8a:	3304      	adds	r3, #4
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	d102      	bne.n	801cd98 <etharp_input+0x74>
    for_us = 0;
 801cd92:	2300      	movs	r3, #0
 801cd94:	75fb      	strb	r3, [r7, #23]
 801cd96:	e009      	b.n	801cdac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801cd98:	68ba      	ldr	r2, [r7, #8]
 801cd9a:	683b      	ldr	r3, [r7, #0]
 801cd9c:	3304      	adds	r3, #4
 801cd9e:	681b      	ldr	r3, [r3, #0]
 801cda0:	429a      	cmp	r2, r3
 801cda2:	bf0c      	ite	eq
 801cda4:	2301      	moveq	r3, #1
 801cda6:	2300      	movne	r3, #0
 801cda8:	b2db      	uxtb	r3, r3
 801cdaa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801cdac:	693b      	ldr	r3, [r7, #16]
 801cdae:	f103 0208 	add.w	r2, r3, #8
 801cdb2:	7dfb      	ldrb	r3, [r7, #23]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d001      	beq.n	801cdbc <etharp_input+0x98>
 801cdb8:	2301      	movs	r3, #1
 801cdba:	e000      	b.n	801cdbe <etharp_input+0x9a>
 801cdbc:	2302      	movs	r3, #2
 801cdbe:	f107 010c 	add.w	r1, r7, #12
 801cdc2:	6838      	ldr	r0, [r7, #0]
 801cdc4:	f7ff fed8 	bl	801cb78 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801cdc8:	693b      	ldr	r3, [r7, #16]
 801cdca:	88db      	ldrh	r3, [r3, #6]
 801cdcc:	b29b      	uxth	r3, r3
 801cdce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cdd2:	d003      	beq.n	801cddc <etharp_input+0xb8>
 801cdd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cdd8:	d01e      	beq.n	801ce18 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801cdda:	e020      	b.n	801ce1e <etharp_input+0xfa>
      if (for_us) {
 801cddc:	7dfb      	ldrb	r3, [r7, #23]
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	d01c      	beq.n	801ce1c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801cde2:	683b      	ldr	r3, [r7, #0]
 801cde4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801cde8:	693b      	ldr	r3, [r7, #16]
 801cdea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801cdee:	683b      	ldr	r3, [r7, #0]
 801cdf0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801cdf4:	683b      	ldr	r3, [r7, #0]
 801cdf6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801cdf8:	693a      	ldr	r2, [r7, #16]
 801cdfa:	3208      	adds	r2, #8
        etharp_raw(netif,
 801cdfc:	2102      	movs	r1, #2
 801cdfe:	9103      	str	r1, [sp, #12]
 801ce00:	f107 010c 	add.w	r1, r7, #12
 801ce04:	9102      	str	r1, [sp, #8]
 801ce06:	9201      	str	r2, [sp, #4]
 801ce08:	9300      	str	r3, [sp, #0]
 801ce0a:	462b      	mov	r3, r5
 801ce0c:	4622      	mov	r2, r4
 801ce0e:	4601      	mov	r1, r0
 801ce10:	6838      	ldr	r0, [r7, #0]
 801ce12:	f000 faeb 	bl	801d3ec <etharp_raw>
      break;
 801ce16:	e001      	b.n	801ce1c <etharp_input+0xf8>
      break;
 801ce18:	bf00      	nop
 801ce1a:	e000      	b.n	801ce1e <etharp_input+0xfa>
      break;
 801ce1c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801ce1e:	6878      	ldr	r0, [r7, #4]
 801ce20:	f7f8 fe34 	bl	8015a8c <pbuf_free>
}
 801ce24:	3718      	adds	r7, #24
 801ce26:	46bd      	mov	sp, r7
 801ce28:	bdb0      	pop	{r4, r5, r7, pc}
 801ce2a:	bf00      	nop
 801ce2c:	0802377c 	.word	0x0802377c
 801ce30:	080238cc 	.word	0x080238cc
 801ce34:	080237f4 	.word	0x080237f4

0801ce38 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801ce38:	b580      	push	{r7, lr}
 801ce3a:	b086      	sub	sp, #24
 801ce3c:	af02      	add	r7, sp, #8
 801ce3e:	60f8      	str	r0, [r7, #12]
 801ce40:	60b9      	str	r1, [r7, #8]
 801ce42:	4613      	mov	r3, r2
 801ce44:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801ce46:	79fa      	ldrb	r2, [r7, #7]
 801ce48:	4944      	ldr	r1, [pc, #272]	; (801cf5c <etharp_output_to_arp_index+0x124>)
 801ce4a:	4613      	mov	r3, r2
 801ce4c:	005b      	lsls	r3, r3, #1
 801ce4e:	4413      	add	r3, r2
 801ce50:	00db      	lsls	r3, r3, #3
 801ce52:	440b      	add	r3, r1
 801ce54:	3314      	adds	r3, #20
 801ce56:	781b      	ldrb	r3, [r3, #0]
 801ce58:	2b01      	cmp	r3, #1
 801ce5a:	d806      	bhi.n	801ce6a <etharp_output_to_arp_index+0x32>
 801ce5c:	4b40      	ldr	r3, [pc, #256]	; (801cf60 <etharp_output_to_arp_index+0x128>)
 801ce5e:	f240 22ee 	movw	r2, #750	; 0x2ee
 801ce62:	4940      	ldr	r1, [pc, #256]	; (801cf64 <etharp_output_to_arp_index+0x12c>)
 801ce64:	4840      	ldr	r0, [pc, #256]	; (801cf68 <etharp_output_to_arp_index+0x130>)
 801ce66:	f002 f871 	bl	801ef4c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801ce6a:	79fa      	ldrb	r2, [r7, #7]
 801ce6c:	493b      	ldr	r1, [pc, #236]	; (801cf5c <etharp_output_to_arp_index+0x124>)
 801ce6e:	4613      	mov	r3, r2
 801ce70:	005b      	lsls	r3, r3, #1
 801ce72:	4413      	add	r3, r2
 801ce74:	00db      	lsls	r3, r3, #3
 801ce76:	440b      	add	r3, r1
 801ce78:	3314      	adds	r3, #20
 801ce7a:	781b      	ldrb	r3, [r3, #0]
 801ce7c:	2b02      	cmp	r3, #2
 801ce7e:	d153      	bne.n	801cf28 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801ce80:	79fa      	ldrb	r2, [r7, #7]
 801ce82:	4936      	ldr	r1, [pc, #216]	; (801cf5c <etharp_output_to_arp_index+0x124>)
 801ce84:	4613      	mov	r3, r2
 801ce86:	005b      	lsls	r3, r3, #1
 801ce88:	4413      	add	r3, r2
 801ce8a:	00db      	lsls	r3, r3, #3
 801ce8c:	440b      	add	r3, r1
 801ce8e:	3312      	adds	r3, #18
 801ce90:	881b      	ldrh	r3, [r3, #0]
 801ce92:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801ce96:	d919      	bls.n	801cecc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801ce98:	79fa      	ldrb	r2, [r7, #7]
 801ce9a:	4613      	mov	r3, r2
 801ce9c:	005b      	lsls	r3, r3, #1
 801ce9e:	4413      	add	r3, r2
 801cea0:	00db      	lsls	r3, r3, #3
 801cea2:	4a2e      	ldr	r2, [pc, #184]	; (801cf5c <etharp_output_to_arp_index+0x124>)
 801cea4:	4413      	add	r3, r2
 801cea6:	3304      	adds	r3, #4
 801cea8:	4619      	mov	r1, r3
 801ceaa:	68f8      	ldr	r0, [r7, #12]
 801ceac:	f000 fb4c 	bl	801d548 <etharp_request>
 801ceb0:	4603      	mov	r3, r0
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	d138      	bne.n	801cf28 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ceb6:	79fa      	ldrb	r2, [r7, #7]
 801ceb8:	4928      	ldr	r1, [pc, #160]	; (801cf5c <etharp_output_to_arp_index+0x124>)
 801ceba:	4613      	mov	r3, r2
 801cebc:	005b      	lsls	r3, r3, #1
 801cebe:	4413      	add	r3, r2
 801cec0:	00db      	lsls	r3, r3, #3
 801cec2:	440b      	add	r3, r1
 801cec4:	3314      	adds	r3, #20
 801cec6:	2203      	movs	r2, #3
 801cec8:	701a      	strb	r2, [r3, #0]
 801ceca:	e02d      	b.n	801cf28 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801cecc:	79fa      	ldrb	r2, [r7, #7]
 801cece:	4923      	ldr	r1, [pc, #140]	; (801cf5c <etharp_output_to_arp_index+0x124>)
 801ced0:	4613      	mov	r3, r2
 801ced2:	005b      	lsls	r3, r3, #1
 801ced4:	4413      	add	r3, r2
 801ced6:	00db      	lsls	r3, r3, #3
 801ced8:	440b      	add	r3, r1
 801ceda:	3312      	adds	r3, #18
 801cedc:	881b      	ldrh	r3, [r3, #0]
 801cede:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801cee2:	d321      	bcc.n	801cf28 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801cee4:	79fa      	ldrb	r2, [r7, #7]
 801cee6:	4613      	mov	r3, r2
 801cee8:	005b      	lsls	r3, r3, #1
 801ceea:	4413      	add	r3, r2
 801ceec:	00db      	lsls	r3, r3, #3
 801ceee:	4a1b      	ldr	r2, [pc, #108]	; (801cf5c <etharp_output_to_arp_index+0x124>)
 801cef0:	4413      	add	r3, r2
 801cef2:	1d19      	adds	r1, r3, #4
 801cef4:	79fa      	ldrb	r2, [r7, #7]
 801cef6:	4613      	mov	r3, r2
 801cef8:	005b      	lsls	r3, r3, #1
 801cefa:	4413      	add	r3, r2
 801cefc:	00db      	lsls	r3, r3, #3
 801cefe:	3308      	adds	r3, #8
 801cf00:	4a16      	ldr	r2, [pc, #88]	; (801cf5c <etharp_output_to_arp_index+0x124>)
 801cf02:	4413      	add	r3, r2
 801cf04:	3304      	adds	r3, #4
 801cf06:	461a      	mov	r2, r3
 801cf08:	68f8      	ldr	r0, [r7, #12]
 801cf0a:	f000 fafb 	bl	801d504 <etharp_request_dst>
 801cf0e:	4603      	mov	r3, r0
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d109      	bne.n	801cf28 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801cf14:	79fa      	ldrb	r2, [r7, #7]
 801cf16:	4911      	ldr	r1, [pc, #68]	; (801cf5c <etharp_output_to_arp_index+0x124>)
 801cf18:	4613      	mov	r3, r2
 801cf1a:	005b      	lsls	r3, r3, #1
 801cf1c:	4413      	add	r3, r2
 801cf1e:	00db      	lsls	r3, r3, #3
 801cf20:	440b      	add	r3, r1
 801cf22:	3314      	adds	r3, #20
 801cf24:	2203      	movs	r2, #3
 801cf26:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801cf2e:	79fa      	ldrb	r2, [r7, #7]
 801cf30:	4613      	mov	r3, r2
 801cf32:	005b      	lsls	r3, r3, #1
 801cf34:	4413      	add	r3, r2
 801cf36:	00db      	lsls	r3, r3, #3
 801cf38:	3308      	adds	r3, #8
 801cf3a:	4a08      	ldr	r2, [pc, #32]	; (801cf5c <etharp_output_to_arp_index+0x124>)
 801cf3c:	4413      	add	r3, r2
 801cf3e:	3304      	adds	r3, #4
 801cf40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801cf44:	9200      	str	r2, [sp, #0]
 801cf46:	460a      	mov	r2, r1
 801cf48:	68b9      	ldr	r1, [r7, #8]
 801cf4a:	68f8      	ldr	r0, [r7, #12]
 801cf4c:	f001 fe3a 	bl	801ebc4 <ethernet_output>
 801cf50:	4603      	mov	r3, r0
}
 801cf52:	4618      	mov	r0, r3
 801cf54:	3710      	adds	r7, #16
 801cf56:	46bd      	mov	sp, r7
 801cf58:	bd80      	pop	{r7, pc}
 801cf5a:	bf00      	nop
 801cf5c:	2000c83c 	.word	0x2000c83c
 801cf60:	0802377c 	.word	0x0802377c
 801cf64:	080238ec 	.word	0x080238ec
 801cf68:	080237f4 	.word	0x080237f4

0801cf6c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801cf6c:	b580      	push	{r7, lr}
 801cf6e:	b08a      	sub	sp, #40	; 0x28
 801cf70:	af02      	add	r7, sp, #8
 801cf72:	60f8      	str	r0, [r7, #12]
 801cf74:	60b9      	str	r1, [r7, #8]
 801cf76:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d106      	bne.n	801cf90 <etharp_output+0x24>
 801cf82:	4b73      	ldr	r3, [pc, #460]	; (801d150 <etharp_output+0x1e4>)
 801cf84:	f240 321e 	movw	r2, #798	; 0x31e
 801cf88:	4972      	ldr	r1, [pc, #456]	; (801d154 <etharp_output+0x1e8>)
 801cf8a:	4873      	ldr	r0, [pc, #460]	; (801d158 <etharp_output+0x1ec>)
 801cf8c:	f001 ffde 	bl	801ef4c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801cf90:	68bb      	ldr	r3, [r7, #8]
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d106      	bne.n	801cfa4 <etharp_output+0x38>
 801cf96:	4b6e      	ldr	r3, [pc, #440]	; (801d150 <etharp_output+0x1e4>)
 801cf98:	f240 321f 	movw	r2, #799	; 0x31f
 801cf9c:	496f      	ldr	r1, [pc, #444]	; (801d15c <etharp_output+0x1f0>)
 801cf9e:	486e      	ldr	r0, [pc, #440]	; (801d158 <etharp_output+0x1ec>)
 801cfa0:	f001 ffd4 	bl	801ef4c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d106      	bne.n	801cfb8 <etharp_output+0x4c>
 801cfaa:	4b69      	ldr	r3, [pc, #420]	; (801d150 <etharp_output+0x1e4>)
 801cfac:	f44f 7248 	mov.w	r2, #800	; 0x320
 801cfb0:	496b      	ldr	r1, [pc, #428]	; (801d160 <etharp_output+0x1f4>)
 801cfb2:	4869      	ldr	r0, [pc, #420]	; (801d158 <etharp_output+0x1ec>)
 801cfb4:	f001 ffca 	bl	801ef4c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	68f9      	ldr	r1, [r7, #12]
 801cfbe:	4618      	mov	r0, r3
 801cfc0:	f000 fef8 	bl	801ddb4 <ip4_addr_isbroadcast_u32>
 801cfc4:	4603      	mov	r3, r0
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d002      	beq.n	801cfd0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801cfca:	4b66      	ldr	r3, [pc, #408]	; (801d164 <etharp_output+0x1f8>)
 801cfcc:	61fb      	str	r3, [r7, #28]
 801cfce:	e0af      	b.n	801d130 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	681b      	ldr	r3, [r3, #0]
 801cfd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cfd8:	2be0      	cmp	r3, #224	; 0xe0
 801cfda:	d118      	bne.n	801d00e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801cfdc:	2301      	movs	r3, #1
 801cfde:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801cfe0:	2300      	movs	r3, #0
 801cfe2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801cfe4:	235e      	movs	r3, #94	; 0x5e
 801cfe6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	3301      	adds	r3, #1
 801cfec:	781b      	ldrb	r3, [r3, #0]
 801cfee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cff2:	b2db      	uxtb	r3, r3
 801cff4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	3302      	adds	r3, #2
 801cffa:	781b      	ldrb	r3, [r3, #0]
 801cffc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	3303      	adds	r3, #3
 801d002:	781b      	ldrb	r3, [r3, #0]
 801d004:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801d006:	f107 0310 	add.w	r3, r7, #16
 801d00a:	61fb      	str	r3, [r7, #28]
 801d00c:	e090      	b.n	801d130 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	681a      	ldr	r2, [r3, #0]
 801d012:	68fb      	ldr	r3, [r7, #12]
 801d014:	3304      	adds	r3, #4
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	405a      	eors	r2, r3
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	3308      	adds	r3, #8
 801d01e:	681b      	ldr	r3, [r3, #0]
 801d020:	4013      	ands	r3, r2
 801d022:	2b00      	cmp	r3, #0
 801d024:	d012      	beq.n	801d04c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801d026:	687b      	ldr	r3, [r7, #4]
 801d028:	681b      	ldr	r3, [r3, #0]
 801d02a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d02c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801d030:	4293      	cmp	r3, r2
 801d032:	d00b      	beq.n	801d04c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801d034:	68fb      	ldr	r3, [r7, #12]
 801d036:	330c      	adds	r3, #12
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	d003      	beq.n	801d046 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801d03e:	68fb      	ldr	r3, [r7, #12]
 801d040:	330c      	adds	r3, #12
 801d042:	61bb      	str	r3, [r7, #24]
 801d044:	e002      	b.n	801d04c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801d046:	f06f 0303 	mvn.w	r3, #3
 801d04a:	e07d      	b.n	801d148 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d04c:	4b46      	ldr	r3, [pc, #280]	; (801d168 <etharp_output+0x1fc>)
 801d04e:	781b      	ldrb	r3, [r3, #0]
 801d050:	4619      	mov	r1, r3
 801d052:	4a46      	ldr	r2, [pc, #280]	; (801d16c <etharp_output+0x200>)
 801d054:	460b      	mov	r3, r1
 801d056:	005b      	lsls	r3, r3, #1
 801d058:	440b      	add	r3, r1
 801d05a:	00db      	lsls	r3, r3, #3
 801d05c:	4413      	add	r3, r2
 801d05e:	3314      	adds	r3, #20
 801d060:	781b      	ldrb	r3, [r3, #0]
 801d062:	2b01      	cmp	r3, #1
 801d064:	d925      	bls.n	801d0b2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d066:	4b40      	ldr	r3, [pc, #256]	; (801d168 <etharp_output+0x1fc>)
 801d068:	781b      	ldrb	r3, [r3, #0]
 801d06a:	4619      	mov	r1, r3
 801d06c:	4a3f      	ldr	r2, [pc, #252]	; (801d16c <etharp_output+0x200>)
 801d06e:	460b      	mov	r3, r1
 801d070:	005b      	lsls	r3, r3, #1
 801d072:	440b      	add	r3, r1
 801d074:	00db      	lsls	r3, r3, #3
 801d076:	4413      	add	r3, r2
 801d078:	3308      	adds	r3, #8
 801d07a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d07c:	68fa      	ldr	r2, [r7, #12]
 801d07e:	429a      	cmp	r2, r3
 801d080:	d117      	bne.n	801d0b2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801d082:	69bb      	ldr	r3, [r7, #24]
 801d084:	681a      	ldr	r2, [r3, #0]
 801d086:	4b38      	ldr	r3, [pc, #224]	; (801d168 <etharp_output+0x1fc>)
 801d088:	781b      	ldrb	r3, [r3, #0]
 801d08a:	4618      	mov	r0, r3
 801d08c:	4937      	ldr	r1, [pc, #220]	; (801d16c <etharp_output+0x200>)
 801d08e:	4603      	mov	r3, r0
 801d090:	005b      	lsls	r3, r3, #1
 801d092:	4403      	add	r3, r0
 801d094:	00db      	lsls	r3, r3, #3
 801d096:	440b      	add	r3, r1
 801d098:	3304      	adds	r3, #4
 801d09a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d09c:	429a      	cmp	r2, r3
 801d09e:	d108      	bne.n	801d0b2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801d0a0:	4b31      	ldr	r3, [pc, #196]	; (801d168 <etharp_output+0x1fc>)
 801d0a2:	781b      	ldrb	r3, [r3, #0]
 801d0a4:	461a      	mov	r2, r3
 801d0a6:	68b9      	ldr	r1, [r7, #8]
 801d0a8:	68f8      	ldr	r0, [r7, #12]
 801d0aa:	f7ff fec5 	bl	801ce38 <etharp_output_to_arp_index>
 801d0ae:	4603      	mov	r3, r0
 801d0b0:	e04a      	b.n	801d148 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d0b2:	2300      	movs	r3, #0
 801d0b4:	75fb      	strb	r3, [r7, #23]
 801d0b6:	e031      	b.n	801d11c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d0b8:	7dfa      	ldrb	r2, [r7, #23]
 801d0ba:	492c      	ldr	r1, [pc, #176]	; (801d16c <etharp_output+0x200>)
 801d0bc:	4613      	mov	r3, r2
 801d0be:	005b      	lsls	r3, r3, #1
 801d0c0:	4413      	add	r3, r2
 801d0c2:	00db      	lsls	r3, r3, #3
 801d0c4:	440b      	add	r3, r1
 801d0c6:	3314      	adds	r3, #20
 801d0c8:	781b      	ldrb	r3, [r3, #0]
 801d0ca:	2b01      	cmp	r3, #1
 801d0cc:	d923      	bls.n	801d116 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801d0ce:	7dfa      	ldrb	r2, [r7, #23]
 801d0d0:	4926      	ldr	r1, [pc, #152]	; (801d16c <etharp_output+0x200>)
 801d0d2:	4613      	mov	r3, r2
 801d0d4:	005b      	lsls	r3, r3, #1
 801d0d6:	4413      	add	r3, r2
 801d0d8:	00db      	lsls	r3, r3, #3
 801d0da:	440b      	add	r3, r1
 801d0dc:	3308      	adds	r3, #8
 801d0de:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d0e0:	68fa      	ldr	r2, [r7, #12]
 801d0e2:	429a      	cmp	r2, r3
 801d0e4:	d117      	bne.n	801d116 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801d0e6:	69bb      	ldr	r3, [r7, #24]
 801d0e8:	6819      	ldr	r1, [r3, #0]
 801d0ea:	7dfa      	ldrb	r2, [r7, #23]
 801d0ec:	481f      	ldr	r0, [pc, #124]	; (801d16c <etharp_output+0x200>)
 801d0ee:	4613      	mov	r3, r2
 801d0f0:	005b      	lsls	r3, r3, #1
 801d0f2:	4413      	add	r3, r2
 801d0f4:	00db      	lsls	r3, r3, #3
 801d0f6:	4403      	add	r3, r0
 801d0f8:	3304      	adds	r3, #4
 801d0fa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801d0fc:	4299      	cmp	r1, r3
 801d0fe:	d10a      	bne.n	801d116 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801d100:	4a19      	ldr	r2, [pc, #100]	; (801d168 <etharp_output+0x1fc>)
 801d102:	7dfb      	ldrb	r3, [r7, #23]
 801d104:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801d106:	7dfb      	ldrb	r3, [r7, #23]
 801d108:	461a      	mov	r2, r3
 801d10a:	68b9      	ldr	r1, [r7, #8]
 801d10c:	68f8      	ldr	r0, [r7, #12]
 801d10e:	f7ff fe93 	bl	801ce38 <etharp_output_to_arp_index>
 801d112:	4603      	mov	r3, r0
 801d114:	e018      	b.n	801d148 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d116:	7dfb      	ldrb	r3, [r7, #23]
 801d118:	3301      	adds	r3, #1
 801d11a:	75fb      	strb	r3, [r7, #23]
 801d11c:	7dfb      	ldrb	r3, [r7, #23]
 801d11e:	2b09      	cmp	r3, #9
 801d120:	d9ca      	bls.n	801d0b8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801d122:	68ba      	ldr	r2, [r7, #8]
 801d124:	69b9      	ldr	r1, [r7, #24]
 801d126:	68f8      	ldr	r0, [r7, #12]
 801d128:	f000 f822 	bl	801d170 <etharp_query>
 801d12c:	4603      	mov	r3, r0
 801d12e:	e00b      	b.n	801d148 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801d130:	68fb      	ldr	r3, [r7, #12]
 801d132:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801d136:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d13a:	9300      	str	r3, [sp, #0]
 801d13c:	69fb      	ldr	r3, [r7, #28]
 801d13e:	68b9      	ldr	r1, [r7, #8]
 801d140:	68f8      	ldr	r0, [r7, #12]
 801d142:	f001 fd3f 	bl	801ebc4 <ethernet_output>
 801d146:	4603      	mov	r3, r0
}
 801d148:	4618      	mov	r0, r3
 801d14a:	3720      	adds	r7, #32
 801d14c:	46bd      	mov	sp, r7
 801d14e:	bd80      	pop	{r7, pc}
 801d150:	0802377c 	.word	0x0802377c
 801d154:	080238cc 	.word	0x080238cc
 801d158:	080237f4 	.word	0x080237f4
 801d15c:	0802391c 	.word	0x0802391c
 801d160:	080238bc 	.word	0x080238bc
 801d164:	0807ac84 	.word	0x0807ac84
 801d168:	2000c92c 	.word	0x2000c92c
 801d16c:	2000c83c 	.word	0x2000c83c

0801d170 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801d170:	b580      	push	{r7, lr}
 801d172:	b08c      	sub	sp, #48	; 0x30
 801d174:	af02      	add	r7, sp, #8
 801d176:	60f8      	str	r0, [r7, #12]
 801d178:	60b9      	str	r1, [r7, #8]
 801d17a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801d17c:	68fb      	ldr	r3, [r7, #12]
 801d17e:	3326      	adds	r3, #38	; 0x26
 801d180:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801d182:	23ff      	movs	r3, #255	; 0xff
 801d184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801d188:	2300      	movs	r3, #0
 801d18a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d18c:	68bb      	ldr	r3, [r7, #8]
 801d18e:	681b      	ldr	r3, [r3, #0]
 801d190:	68f9      	ldr	r1, [r7, #12]
 801d192:	4618      	mov	r0, r3
 801d194:	f000 fe0e 	bl	801ddb4 <ip4_addr_isbroadcast_u32>
 801d198:	4603      	mov	r3, r0
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d10c      	bne.n	801d1b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d19e:	68bb      	ldr	r3, [r7, #8]
 801d1a0:	681b      	ldr	r3, [r3, #0]
 801d1a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d1a6:	2be0      	cmp	r3, #224	; 0xe0
 801d1a8:	d006      	beq.n	801d1b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d1aa:	68bb      	ldr	r3, [r7, #8]
 801d1ac:	2b00      	cmp	r3, #0
 801d1ae:	d003      	beq.n	801d1b8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801d1b0:	68bb      	ldr	r3, [r7, #8]
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	d102      	bne.n	801d1be <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d1b8:	f06f 030f 	mvn.w	r3, #15
 801d1bc:	e101      	b.n	801d3c2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801d1be:	68fa      	ldr	r2, [r7, #12]
 801d1c0:	2101      	movs	r1, #1
 801d1c2:	68b8      	ldr	r0, [r7, #8]
 801d1c4:	f7ff fb60 	bl	801c888 <etharp_find_entry>
 801d1c8:	4603      	mov	r3, r0
 801d1ca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801d1cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	da02      	bge.n	801d1da <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801d1d4:	8a7b      	ldrh	r3, [r7, #18]
 801d1d6:	b25b      	sxtb	r3, r3
 801d1d8:	e0f3      	b.n	801d3c2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801d1da:	8a7b      	ldrh	r3, [r7, #18]
 801d1dc:	2b7e      	cmp	r3, #126	; 0x7e
 801d1de:	d906      	bls.n	801d1ee <etharp_query+0x7e>
 801d1e0:	4b7a      	ldr	r3, [pc, #488]	; (801d3cc <etharp_query+0x25c>)
 801d1e2:	f240 32c1 	movw	r2, #961	; 0x3c1
 801d1e6:	497a      	ldr	r1, [pc, #488]	; (801d3d0 <etharp_query+0x260>)
 801d1e8:	487a      	ldr	r0, [pc, #488]	; (801d3d4 <etharp_query+0x264>)
 801d1ea:	f001 feaf 	bl	801ef4c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801d1ee:	8a7b      	ldrh	r3, [r7, #18]
 801d1f0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801d1f2:	7c7a      	ldrb	r2, [r7, #17]
 801d1f4:	4978      	ldr	r1, [pc, #480]	; (801d3d8 <etharp_query+0x268>)
 801d1f6:	4613      	mov	r3, r2
 801d1f8:	005b      	lsls	r3, r3, #1
 801d1fa:	4413      	add	r3, r2
 801d1fc:	00db      	lsls	r3, r3, #3
 801d1fe:	440b      	add	r3, r1
 801d200:	3314      	adds	r3, #20
 801d202:	781b      	ldrb	r3, [r3, #0]
 801d204:	2b00      	cmp	r3, #0
 801d206:	d115      	bne.n	801d234 <etharp_query+0xc4>
    is_new_entry = 1;
 801d208:	2301      	movs	r3, #1
 801d20a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801d20c:	7c7a      	ldrb	r2, [r7, #17]
 801d20e:	4972      	ldr	r1, [pc, #456]	; (801d3d8 <etharp_query+0x268>)
 801d210:	4613      	mov	r3, r2
 801d212:	005b      	lsls	r3, r3, #1
 801d214:	4413      	add	r3, r2
 801d216:	00db      	lsls	r3, r3, #3
 801d218:	440b      	add	r3, r1
 801d21a:	3314      	adds	r3, #20
 801d21c:	2201      	movs	r2, #1
 801d21e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801d220:	7c7a      	ldrb	r2, [r7, #17]
 801d222:	496d      	ldr	r1, [pc, #436]	; (801d3d8 <etharp_query+0x268>)
 801d224:	4613      	mov	r3, r2
 801d226:	005b      	lsls	r3, r3, #1
 801d228:	4413      	add	r3, r2
 801d22a:	00db      	lsls	r3, r3, #3
 801d22c:	440b      	add	r3, r1
 801d22e:	3308      	adds	r3, #8
 801d230:	68fa      	ldr	r2, [r7, #12]
 801d232:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801d234:	7c7a      	ldrb	r2, [r7, #17]
 801d236:	4968      	ldr	r1, [pc, #416]	; (801d3d8 <etharp_query+0x268>)
 801d238:	4613      	mov	r3, r2
 801d23a:	005b      	lsls	r3, r3, #1
 801d23c:	4413      	add	r3, r2
 801d23e:	00db      	lsls	r3, r3, #3
 801d240:	440b      	add	r3, r1
 801d242:	3314      	adds	r3, #20
 801d244:	781b      	ldrb	r3, [r3, #0]
 801d246:	2b01      	cmp	r3, #1
 801d248:	d011      	beq.n	801d26e <etharp_query+0xfe>
 801d24a:	7c7a      	ldrb	r2, [r7, #17]
 801d24c:	4962      	ldr	r1, [pc, #392]	; (801d3d8 <etharp_query+0x268>)
 801d24e:	4613      	mov	r3, r2
 801d250:	005b      	lsls	r3, r3, #1
 801d252:	4413      	add	r3, r2
 801d254:	00db      	lsls	r3, r3, #3
 801d256:	440b      	add	r3, r1
 801d258:	3314      	adds	r3, #20
 801d25a:	781b      	ldrb	r3, [r3, #0]
 801d25c:	2b01      	cmp	r3, #1
 801d25e:	d806      	bhi.n	801d26e <etharp_query+0xfe>
 801d260:	4b5a      	ldr	r3, [pc, #360]	; (801d3cc <etharp_query+0x25c>)
 801d262:	f240 32cd 	movw	r2, #973	; 0x3cd
 801d266:	495d      	ldr	r1, [pc, #372]	; (801d3dc <etharp_query+0x26c>)
 801d268:	485a      	ldr	r0, [pc, #360]	; (801d3d4 <etharp_query+0x264>)
 801d26a:	f001 fe6f 	bl	801ef4c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801d26e:	6a3b      	ldr	r3, [r7, #32]
 801d270:	2b00      	cmp	r3, #0
 801d272:	d102      	bne.n	801d27a <etharp_query+0x10a>
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	2b00      	cmp	r3, #0
 801d278:	d10c      	bne.n	801d294 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801d27a:	68b9      	ldr	r1, [r7, #8]
 801d27c:	68f8      	ldr	r0, [r7, #12]
 801d27e:	f000 f963 	bl	801d548 <etharp_request>
 801d282:	4603      	mov	r3, r0
 801d284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	d102      	bne.n	801d294 <etharp_query+0x124>
      return result;
 801d28e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801d292:	e096      	b.n	801d3c2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	2b00      	cmp	r3, #0
 801d298:	d106      	bne.n	801d2a8 <etharp_query+0x138>
 801d29a:	4b4c      	ldr	r3, [pc, #304]	; (801d3cc <etharp_query+0x25c>)
 801d29c:	f240 32e1 	movw	r2, #993	; 0x3e1
 801d2a0:	494f      	ldr	r1, [pc, #316]	; (801d3e0 <etharp_query+0x270>)
 801d2a2:	484c      	ldr	r0, [pc, #304]	; (801d3d4 <etharp_query+0x264>)
 801d2a4:	f001 fe52 	bl	801ef4c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801d2a8:	7c7a      	ldrb	r2, [r7, #17]
 801d2aa:	494b      	ldr	r1, [pc, #300]	; (801d3d8 <etharp_query+0x268>)
 801d2ac:	4613      	mov	r3, r2
 801d2ae:	005b      	lsls	r3, r3, #1
 801d2b0:	4413      	add	r3, r2
 801d2b2:	00db      	lsls	r3, r3, #3
 801d2b4:	440b      	add	r3, r1
 801d2b6:	3314      	adds	r3, #20
 801d2b8:	781b      	ldrb	r3, [r3, #0]
 801d2ba:	2b01      	cmp	r3, #1
 801d2bc:	d917      	bls.n	801d2ee <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801d2be:	4a49      	ldr	r2, [pc, #292]	; (801d3e4 <etharp_query+0x274>)
 801d2c0:	7c7b      	ldrb	r3, [r7, #17]
 801d2c2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d2c4:	7c7a      	ldrb	r2, [r7, #17]
 801d2c6:	4613      	mov	r3, r2
 801d2c8:	005b      	lsls	r3, r3, #1
 801d2ca:	4413      	add	r3, r2
 801d2cc:	00db      	lsls	r3, r3, #3
 801d2ce:	3308      	adds	r3, #8
 801d2d0:	4a41      	ldr	r2, [pc, #260]	; (801d3d8 <etharp_query+0x268>)
 801d2d2:	4413      	add	r3, r2
 801d2d4:	3304      	adds	r3, #4
 801d2d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d2da:	9200      	str	r2, [sp, #0]
 801d2dc:	697a      	ldr	r2, [r7, #20]
 801d2de:	6879      	ldr	r1, [r7, #4]
 801d2e0:	68f8      	ldr	r0, [r7, #12]
 801d2e2:	f001 fc6f 	bl	801ebc4 <ethernet_output>
 801d2e6:	4603      	mov	r3, r0
 801d2e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d2ec:	e067      	b.n	801d3be <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d2ee:	7c7a      	ldrb	r2, [r7, #17]
 801d2f0:	4939      	ldr	r1, [pc, #228]	; (801d3d8 <etharp_query+0x268>)
 801d2f2:	4613      	mov	r3, r2
 801d2f4:	005b      	lsls	r3, r3, #1
 801d2f6:	4413      	add	r3, r2
 801d2f8:	00db      	lsls	r3, r3, #3
 801d2fa:	440b      	add	r3, r1
 801d2fc:	3314      	adds	r3, #20
 801d2fe:	781b      	ldrb	r3, [r3, #0]
 801d300:	2b01      	cmp	r3, #1
 801d302:	d15c      	bne.n	801d3be <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801d304:	2300      	movs	r3, #0
 801d306:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d30c:	e01c      	b.n	801d348 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801d30e:	69fb      	ldr	r3, [r7, #28]
 801d310:	895a      	ldrh	r2, [r3, #10]
 801d312:	69fb      	ldr	r3, [r7, #28]
 801d314:	891b      	ldrh	r3, [r3, #8]
 801d316:	429a      	cmp	r2, r3
 801d318:	d10a      	bne.n	801d330 <etharp_query+0x1c0>
 801d31a:	69fb      	ldr	r3, [r7, #28]
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	2b00      	cmp	r3, #0
 801d320:	d006      	beq.n	801d330 <etharp_query+0x1c0>
 801d322:	4b2a      	ldr	r3, [pc, #168]	; (801d3cc <etharp_query+0x25c>)
 801d324:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801d328:	492f      	ldr	r1, [pc, #188]	; (801d3e8 <etharp_query+0x278>)
 801d32a:	482a      	ldr	r0, [pc, #168]	; (801d3d4 <etharp_query+0x264>)
 801d32c:	f001 fe0e 	bl	801ef4c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801d330:	69fb      	ldr	r3, [r7, #28]
 801d332:	7b1b      	ldrb	r3, [r3, #12]
 801d334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d002      	beq.n	801d342 <etharp_query+0x1d2>
        copy_needed = 1;
 801d33c:	2301      	movs	r3, #1
 801d33e:	61bb      	str	r3, [r7, #24]
        break;
 801d340:	e005      	b.n	801d34e <etharp_query+0x1de>
      }
      p = p->next;
 801d342:	69fb      	ldr	r3, [r7, #28]
 801d344:	681b      	ldr	r3, [r3, #0]
 801d346:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d348:	69fb      	ldr	r3, [r7, #28]
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d1df      	bne.n	801d30e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801d34e:	69bb      	ldr	r3, [r7, #24]
 801d350:	2b00      	cmp	r3, #0
 801d352:	d007      	beq.n	801d364 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801d354:	687a      	ldr	r2, [r7, #4]
 801d356:	f44f 7120 	mov.w	r1, #640	; 0x280
 801d35a:	200e      	movs	r0, #14
 801d35c:	f7f8 fdfe 	bl	8015f5c <pbuf_clone>
 801d360:	61f8      	str	r0, [r7, #28]
 801d362:	e004      	b.n	801d36e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801d364:	687b      	ldr	r3, [r7, #4]
 801d366:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801d368:	69f8      	ldr	r0, [r7, #28]
 801d36a:	f7f8 fc35 	bl	8015bd8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801d36e:	69fb      	ldr	r3, [r7, #28]
 801d370:	2b00      	cmp	r3, #0
 801d372:	d021      	beq.n	801d3b8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801d374:	7c7a      	ldrb	r2, [r7, #17]
 801d376:	4918      	ldr	r1, [pc, #96]	; (801d3d8 <etharp_query+0x268>)
 801d378:	4613      	mov	r3, r2
 801d37a:	005b      	lsls	r3, r3, #1
 801d37c:	4413      	add	r3, r2
 801d37e:	00db      	lsls	r3, r3, #3
 801d380:	440b      	add	r3, r1
 801d382:	681b      	ldr	r3, [r3, #0]
 801d384:	2b00      	cmp	r3, #0
 801d386:	d00a      	beq.n	801d39e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801d388:	7c7a      	ldrb	r2, [r7, #17]
 801d38a:	4913      	ldr	r1, [pc, #76]	; (801d3d8 <etharp_query+0x268>)
 801d38c:	4613      	mov	r3, r2
 801d38e:	005b      	lsls	r3, r3, #1
 801d390:	4413      	add	r3, r2
 801d392:	00db      	lsls	r3, r3, #3
 801d394:	440b      	add	r3, r1
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	4618      	mov	r0, r3
 801d39a:	f7f8 fb77 	bl	8015a8c <pbuf_free>
      }
      arp_table[i].q = p;
 801d39e:	7c7a      	ldrb	r2, [r7, #17]
 801d3a0:	490d      	ldr	r1, [pc, #52]	; (801d3d8 <etharp_query+0x268>)
 801d3a2:	4613      	mov	r3, r2
 801d3a4:	005b      	lsls	r3, r3, #1
 801d3a6:	4413      	add	r3, r2
 801d3a8:	00db      	lsls	r3, r3, #3
 801d3aa:	440b      	add	r3, r1
 801d3ac:	69fa      	ldr	r2, [r7, #28]
 801d3ae:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801d3b0:	2300      	movs	r3, #0
 801d3b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d3b6:	e002      	b.n	801d3be <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801d3b8:	23ff      	movs	r3, #255	; 0xff
 801d3ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801d3be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801d3c2:	4618      	mov	r0, r3
 801d3c4:	3728      	adds	r7, #40	; 0x28
 801d3c6:	46bd      	mov	sp, r7
 801d3c8:	bd80      	pop	{r7, pc}
 801d3ca:	bf00      	nop
 801d3cc:	0802377c 	.word	0x0802377c
 801d3d0:	08023928 	.word	0x08023928
 801d3d4:	080237f4 	.word	0x080237f4
 801d3d8:	2000c83c 	.word	0x2000c83c
 801d3dc:	08023938 	.word	0x08023938
 801d3e0:	0802391c 	.word	0x0802391c
 801d3e4:	2000c92c 	.word	0x2000c92c
 801d3e8:	08023960 	.word	0x08023960

0801d3ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d3ec:	b580      	push	{r7, lr}
 801d3ee:	b08a      	sub	sp, #40	; 0x28
 801d3f0:	af02      	add	r7, sp, #8
 801d3f2:	60f8      	str	r0, [r7, #12]
 801d3f4:	60b9      	str	r1, [r7, #8]
 801d3f6:	607a      	str	r2, [r7, #4]
 801d3f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d3fe:	68fb      	ldr	r3, [r7, #12]
 801d400:	2b00      	cmp	r3, #0
 801d402:	d106      	bne.n	801d412 <etharp_raw+0x26>
 801d404:	4b3a      	ldr	r3, [pc, #232]	; (801d4f0 <etharp_raw+0x104>)
 801d406:	f240 4257 	movw	r2, #1111	; 0x457
 801d40a:	493a      	ldr	r1, [pc, #232]	; (801d4f4 <etharp_raw+0x108>)
 801d40c:	483a      	ldr	r0, [pc, #232]	; (801d4f8 <etharp_raw+0x10c>)
 801d40e:	f001 fd9d 	bl	801ef4c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d412:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d416:	211c      	movs	r1, #28
 801d418:	200e      	movs	r0, #14
 801d41a:	f7f8 f841 	bl	80154a0 <pbuf_alloc>
 801d41e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d420:	69bb      	ldr	r3, [r7, #24]
 801d422:	2b00      	cmp	r3, #0
 801d424:	d102      	bne.n	801d42c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801d426:	f04f 33ff 	mov.w	r3, #4294967295
 801d42a:	e05d      	b.n	801d4e8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d42c:	69bb      	ldr	r3, [r7, #24]
 801d42e:	895b      	ldrh	r3, [r3, #10]
 801d430:	2b1b      	cmp	r3, #27
 801d432:	d806      	bhi.n	801d442 <etharp_raw+0x56>
 801d434:	4b2e      	ldr	r3, [pc, #184]	; (801d4f0 <etharp_raw+0x104>)
 801d436:	f240 4262 	movw	r2, #1122	; 0x462
 801d43a:	4930      	ldr	r1, [pc, #192]	; (801d4fc <etharp_raw+0x110>)
 801d43c:	482e      	ldr	r0, [pc, #184]	; (801d4f8 <etharp_raw+0x10c>)
 801d43e:	f001 fd85 	bl	801ef4c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d442:	69bb      	ldr	r3, [r7, #24]
 801d444:	685b      	ldr	r3, [r3, #4]
 801d446:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d448:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801d44a:	4618      	mov	r0, r3
 801d44c:	f7f6 ff2a 	bl	80142a4 <lwip_htons>
 801d450:	4603      	mov	r3, r0
 801d452:	461a      	mov	r2, r3
 801d454:	697b      	ldr	r3, [r7, #20]
 801d456:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d45e:	2b06      	cmp	r3, #6
 801d460:	d006      	beq.n	801d470 <etharp_raw+0x84>
 801d462:	4b23      	ldr	r3, [pc, #140]	; (801d4f0 <etharp_raw+0x104>)
 801d464:	f240 4269 	movw	r2, #1129	; 0x469
 801d468:	4925      	ldr	r1, [pc, #148]	; (801d500 <etharp_raw+0x114>)
 801d46a:	4823      	ldr	r0, [pc, #140]	; (801d4f8 <etharp_raw+0x10c>)
 801d46c:	f001 fd6e 	bl	801ef4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d470:	697b      	ldr	r3, [r7, #20]
 801d472:	3308      	adds	r3, #8
 801d474:	2206      	movs	r2, #6
 801d476:	6839      	ldr	r1, [r7, #0]
 801d478:	4618      	mov	r0, r3
 801d47a:	f001 fd37 	bl	801eeec <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d47e:	697b      	ldr	r3, [r7, #20]
 801d480:	3312      	adds	r3, #18
 801d482:	2206      	movs	r2, #6
 801d484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d486:	4618      	mov	r0, r3
 801d488:	f001 fd30 	bl	801eeec <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801d48c:	697b      	ldr	r3, [r7, #20]
 801d48e:	330e      	adds	r3, #14
 801d490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d492:	6812      	ldr	r2, [r2, #0]
 801d494:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d496:	697b      	ldr	r3, [r7, #20]
 801d498:	3318      	adds	r3, #24
 801d49a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d49c:	6812      	ldr	r2, [r2, #0]
 801d49e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d4a0:	697b      	ldr	r3, [r7, #20]
 801d4a2:	2200      	movs	r2, #0
 801d4a4:	701a      	strb	r2, [r3, #0]
 801d4a6:	2200      	movs	r2, #0
 801d4a8:	f042 0201 	orr.w	r2, r2, #1
 801d4ac:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d4ae:	697b      	ldr	r3, [r7, #20]
 801d4b0:	2200      	movs	r2, #0
 801d4b2:	f042 0208 	orr.w	r2, r2, #8
 801d4b6:	709a      	strb	r2, [r3, #2]
 801d4b8:	2200      	movs	r2, #0
 801d4ba:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801d4bc:	697b      	ldr	r3, [r7, #20]
 801d4be:	2206      	movs	r2, #6
 801d4c0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801d4c2:	697b      	ldr	r3, [r7, #20]
 801d4c4:	2204      	movs	r2, #4
 801d4c6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d4c8:	f640 0306 	movw	r3, #2054	; 0x806
 801d4cc:	9300      	str	r3, [sp, #0]
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	68ba      	ldr	r2, [r7, #8]
 801d4d2:	69b9      	ldr	r1, [r7, #24]
 801d4d4:	68f8      	ldr	r0, [r7, #12]
 801d4d6:	f001 fb75 	bl	801ebc4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801d4da:	69b8      	ldr	r0, [r7, #24]
 801d4dc:	f7f8 fad6 	bl	8015a8c <pbuf_free>
  p = NULL;
 801d4e0:	2300      	movs	r3, #0
 801d4e2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801d4e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d4e8:	4618      	mov	r0, r3
 801d4ea:	3720      	adds	r7, #32
 801d4ec:	46bd      	mov	sp, r7
 801d4ee:	bd80      	pop	{r7, pc}
 801d4f0:	0802377c 	.word	0x0802377c
 801d4f4:	080238cc 	.word	0x080238cc
 801d4f8:	080237f4 	.word	0x080237f4
 801d4fc:	0802397c 	.word	0x0802397c
 801d500:	080239b0 	.word	0x080239b0

0801d504 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801d504:	b580      	push	{r7, lr}
 801d506:	b088      	sub	sp, #32
 801d508:	af04      	add	r7, sp, #16
 801d50a:	60f8      	str	r0, [r7, #12]
 801d50c:	60b9      	str	r1, [r7, #8]
 801d50e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d510:	68fb      	ldr	r3, [r7, #12]
 801d512:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d516:	68fb      	ldr	r3, [r7, #12]
 801d518:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d520:	2201      	movs	r2, #1
 801d522:	9203      	str	r2, [sp, #12]
 801d524:	68ba      	ldr	r2, [r7, #8]
 801d526:	9202      	str	r2, [sp, #8]
 801d528:	4a06      	ldr	r2, [pc, #24]	; (801d544 <etharp_request_dst+0x40>)
 801d52a:	9201      	str	r2, [sp, #4]
 801d52c:	9300      	str	r3, [sp, #0]
 801d52e:	4603      	mov	r3, r0
 801d530:	687a      	ldr	r2, [r7, #4]
 801d532:	68f8      	ldr	r0, [r7, #12]
 801d534:	f7ff ff5a 	bl	801d3ec <etharp_raw>
 801d538:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801d53a:	4618      	mov	r0, r3
 801d53c:	3710      	adds	r7, #16
 801d53e:	46bd      	mov	sp, r7
 801d540:	bd80      	pop	{r7, pc}
 801d542:	bf00      	nop
 801d544:	0807ac8c 	.word	0x0807ac8c

0801d548 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801d548:	b580      	push	{r7, lr}
 801d54a:	b082      	sub	sp, #8
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
 801d550:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801d552:	4a05      	ldr	r2, [pc, #20]	; (801d568 <etharp_request+0x20>)
 801d554:	6839      	ldr	r1, [r7, #0]
 801d556:	6878      	ldr	r0, [r7, #4]
 801d558:	f7ff ffd4 	bl	801d504 <etharp_request_dst>
 801d55c:	4603      	mov	r3, r0
}
 801d55e:	4618      	mov	r0, r3
 801d560:	3708      	adds	r7, #8
 801d562:	46bd      	mov	sp, r7
 801d564:	bd80      	pop	{r7, pc}
 801d566:	bf00      	nop
 801d568:	0807ac84 	.word	0x0807ac84

0801d56c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801d56c:	b580      	push	{r7, lr}
 801d56e:	b08e      	sub	sp, #56	; 0x38
 801d570:	af04      	add	r7, sp, #16
 801d572:	6078      	str	r0, [r7, #4]
 801d574:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801d576:	4b79      	ldr	r3, [pc, #484]	; (801d75c <icmp_input+0x1f0>)
 801d578:	689b      	ldr	r3, [r3, #8]
 801d57a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801d57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d57e:	781b      	ldrb	r3, [r3, #0]
 801d580:	f003 030f 	and.w	r3, r3, #15
 801d584:	b2db      	uxtb	r3, r3
 801d586:	009b      	lsls	r3, r3, #2
 801d588:	b2db      	uxtb	r3, r3
 801d58a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801d58c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d58e:	2b13      	cmp	r3, #19
 801d590:	f240 80cd 	bls.w	801d72e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	895b      	ldrh	r3, [r3, #10]
 801d598:	2b03      	cmp	r3, #3
 801d59a:	f240 80ca 	bls.w	801d732 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	685b      	ldr	r3, [r3, #4]
 801d5a2:	781b      	ldrb	r3, [r3, #0]
 801d5a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801d5a8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	f000 80b7 	beq.w	801d720 <icmp_input+0x1b4>
 801d5b2:	2b08      	cmp	r3, #8
 801d5b4:	f040 80b7 	bne.w	801d726 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801d5b8:	4b69      	ldr	r3, [pc, #420]	; (801d760 <icmp_input+0x1f4>)
 801d5ba:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d5bc:	4b67      	ldr	r3, [pc, #412]	; (801d75c <icmp_input+0x1f0>)
 801d5be:	695b      	ldr	r3, [r3, #20]
 801d5c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d5c4:	2be0      	cmp	r3, #224	; 0xe0
 801d5c6:	f000 80bb 	beq.w	801d740 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801d5ca:	4b64      	ldr	r3, [pc, #400]	; (801d75c <icmp_input+0x1f0>)
 801d5cc:	695b      	ldr	r3, [r3, #20]
 801d5ce:	4a63      	ldr	r2, [pc, #396]	; (801d75c <icmp_input+0x1f0>)
 801d5d0:	6812      	ldr	r2, [r2, #0]
 801d5d2:	4611      	mov	r1, r2
 801d5d4:	4618      	mov	r0, r3
 801d5d6:	f000 fbed 	bl	801ddb4 <ip4_addr_isbroadcast_u32>
 801d5da:	4603      	mov	r3, r0
 801d5dc:	2b00      	cmp	r3, #0
 801d5de:	f040 80b1 	bne.w	801d744 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	891b      	ldrh	r3, [r3, #8]
 801d5e6:	2b07      	cmp	r3, #7
 801d5e8:	f240 80a5 	bls.w	801d736 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d5ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d5ee:	330e      	adds	r3, #14
 801d5f0:	4619      	mov	r1, r3
 801d5f2:	6878      	ldr	r0, [r7, #4]
 801d5f4:	f7f8 f9a2 	bl	801593c <pbuf_add_header>
 801d5f8:	4603      	mov	r3, r0
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	d04b      	beq.n	801d696 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801d5fe:	687b      	ldr	r3, [r7, #4]
 801d600:	891a      	ldrh	r2, [r3, #8]
 801d602:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d604:	4413      	add	r3, r2
 801d606:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	891b      	ldrh	r3, [r3, #8]
 801d60c:	8b7a      	ldrh	r2, [r7, #26]
 801d60e:	429a      	cmp	r2, r3
 801d610:	f0c0 809a 	bcc.w	801d748 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801d614:	8b7b      	ldrh	r3, [r7, #26]
 801d616:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d61a:	4619      	mov	r1, r3
 801d61c:	200e      	movs	r0, #14
 801d61e:	f7f7 ff3f 	bl	80154a0 <pbuf_alloc>
 801d622:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801d624:	697b      	ldr	r3, [r7, #20]
 801d626:	2b00      	cmp	r3, #0
 801d628:	f000 8090 	beq.w	801d74c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801d62c:	697b      	ldr	r3, [r7, #20]
 801d62e:	895b      	ldrh	r3, [r3, #10]
 801d630:	461a      	mov	r2, r3
 801d632:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d634:	3308      	adds	r3, #8
 801d636:	429a      	cmp	r2, r3
 801d638:	d203      	bcs.n	801d642 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801d63a:	6978      	ldr	r0, [r7, #20]
 801d63c:	f7f8 fa26 	bl	8015a8c <pbuf_free>
          goto icmperr;
 801d640:	e085      	b.n	801d74e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801d642:	697b      	ldr	r3, [r7, #20]
 801d644:	685b      	ldr	r3, [r3, #4]
 801d646:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801d648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d64a:	4618      	mov	r0, r3
 801d64c:	f001 fc4e 	bl	801eeec <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801d650:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d652:	4619      	mov	r1, r3
 801d654:	6978      	ldr	r0, [r7, #20]
 801d656:	f7f8 f981 	bl	801595c <pbuf_remove_header>
 801d65a:	4603      	mov	r3, r0
 801d65c:	2b00      	cmp	r3, #0
 801d65e:	d009      	beq.n	801d674 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801d660:	4b40      	ldr	r3, [pc, #256]	; (801d764 <icmp_input+0x1f8>)
 801d662:	22b6      	movs	r2, #182	; 0xb6
 801d664:	4940      	ldr	r1, [pc, #256]	; (801d768 <icmp_input+0x1fc>)
 801d666:	4841      	ldr	r0, [pc, #260]	; (801d76c <icmp_input+0x200>)
 801d668:	f001 fc70 	bl	801ef4c <iprintf>
          pbuf_free(r);
 801d66c:	6978      	ldr	r0, [r7, #20]
 801d66e:	f7f8 fa0d 	bl	8015a8c <pbuf_free>
          goto icmperr;
 801d672:	e06c      	b.n	801d74e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801d674:	6879      	ldr	r1, [r7, #4]
 801d676:	6978      	ldr	r0, [r7, #20]
 801d678:	f7f8 fb2c 	bl	8015cd4 <pbuf_copy>
 801d67c:	4603      	mov	r3, r0
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d003      	beq.n	801d68a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801d682:	6978      	ldr	r0, [r7, #20]
 801d684:	f7f8 fa02 	bl	8015a8c <pbuf_free>
          goto icmperr;
 801d688:	e061      	b.n	801d74e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801d68a:	6878      	ldr	r0, [r7, #4]
 801d68c:	f7f8 f9fe 	bl	8015a8c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801d690:	697b      	ldr	r3, [r7, #20]
 801d692:	607b      	str	r3, [r7, #4]
 801d694:	e00f      	b.n	801d6b6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d696:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d698:	330e      	adds	r3, #14
 801d69a:	4619      	mov	r1, r3
 801d69c:	6878      	ldr	r0, [r7, #4]
 801d69e:	f7f8 f95d 	bl	801595c <pbuf_remove_header>
 801d6a2:	4603      	mov	r3, r0
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	d006      	beq.n	801d6b6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801d6a8:	4b2e      	ldr	r3, [pc, #184]	; (801d764 <icmp_input+0x1f8>)
 801d6aa:	22c7      	movs	r2, #199	; 0xc7
 801d6ac:	4930      	ldr	r1, [pc, #192]	; (801d770 <icmp_input+0x204>)
 801d6ae:	482f      	ldr	r0, [pc, #188]	; (801d76c <icmp_input+0x200>)
 801d6b0:	f001 fc4c 	bl	801ef4c <iprintf>
          goto icmperr;
 801d6b4:	e04b      	b.n	801d74e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	685b      	ldr	r3, [r3, #4]
 801d6ba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801d6bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d6be:	4619      	mov	r1, r3
 801d6c0:	6878      	ldr	r0, [r7, #4]
 801d6c2:	f7f8 f93b 	bl	801593c <pbuf_add_header>
 801d6c6:	4603      	mov	r3, r0
 801d6c8:	2b00      	cmp	r3, #0
 801d6ca:	d12b      	bne.n	801d724 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	685b      	ldr	r3, [r3, #4]
 801d6d0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801d6d2:	69fb      	ldr	r3, [r7, #28]
 801d6d4:	681a      	ldr	r2, [r3, #0]
 801d6d6:	68fb      	ldr	r3, [r7, #12]
 801d6d8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801d6da:	4b20      	ldr	r3, [pc, #128]	; (801d75c <icmp_input+0x1f0>)
 801d6dc:	691a      	ldr	r2, [r3, #16]
 801d6de:	68fb      	ldr	r3, [r7, #12]
 801d6e0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801d6e2:	693b      	ldr	r3, [r7, #16]
 801d6e4:	2200      	movs	r2, #0
 801d6e6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801d6e8:	693b      	ldr	r3, [r7, #16]
 801d6ea:	2200      	movs	r2, #0
 801d6ec:	709a      	strb	r2, [r3, #2]
 801d6ee:	2200      	movs	r2, #0
 801d6f0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801d6f2:	68fb      	ldr	r3, [r7, #12]
 801d6f4:	22ff      	movs	r2, #255	; 0xff
 801d6f6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801d6f8:	68fb      	ldr	r3, [r7, #12]
 801d6fa:	2200      	movs	r2, #0
 801d6fc:	729a      	strb	r2, [r3, #10]
 801d6fe:	2200      	movs	r2, #0
 801d700:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801d702:	683b      	ldr	r3, [r7, #0]
 801d704:	9302      	str	r3, [sp, #8]
 801d706:	2301      	movs	r3, #1
 801d708:	9301      	str	r3, [sp, #4]
 801d70a:	2300      	movs	r3, #0
 801d70c:	9300      	str	r3, [sp, #0]
 801d70e:	23ff      	movs	r3, #255	; 0xff
 801d710:	2200      	movs	r2, #0
 801d712:	69f9      	ldr	r1, [r7, #28]
 801d714:	6878      	ldr	r0, [r7, #4]
 801d716:	f000 fa75 	bl	801dc04 <ip4_output_if>
 801d71a:	4603      	mov	r3, r0
 801d71c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801d71e:	e001      	b.n	801d724 <icmp_input+0x1b8>
      break;
 801d720:	bf00      	nop
 801d722:	e000      	b.n	801d726 <icmp_input+0x1ba>
      break;
 801d724:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801d726:	6878      	ldr	r0, [r7, #4]
 801d728:	f7f8 f9b0 	bl	8015a8c <pbuf_free>
  return;
 801d72c:	e013      	b.n	801d756 <icmp_input+0x1ea>
    goto lenerr;
 801d72e:	bf00      	nop
 801d730:	e002      	b.n	801d738 <icmp_input+0x1cc>
    goto lenerr;
 801d732:	bf00      	nop
 801d734:	e000      	b.n	801d738 <icmp_input+0x1cc>
        goto lenerr;
 801d736:	bf00      	nop
lenerr:
  pbuf_free(p);
 801d738:	6878      	ldr	r0, [r7, #4]
 801d73a:	f7f8 f9a7 	bl	8015a8c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d73e:	e00a      	b.n	801d756 <icmp_input+0x1ea>
        goto icmperr;
 801d740:	bf00      	nop
 801d742:	e004      	b.n	801d74e <icmp_input+0x1e2>
        goto icmperr;
 801d744:	bf00      	nop
 801d746:	e002      	b.n	801d74e <icmp_input+0x1e2>
          goto icmperr;
 801d748:	bf00      	nop
 801d74a:	e000      	b.n	801d74e <icmp_input+0x1e2>
          goto icmperr;
 801d74c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801d74e:	6878      	ldr	r0, [r7, #4]
 801d750:	f7f8 f99c 	bl	8015a8c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d754:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801d756:	3728      	adds	r7, #40	; 0x28
 801d758:	46bd      	mov	sp, r7
 801d75a:	bd80      	pop	{r7, pc}
 801d75c:	20011048 	.word	0x20011048
 801d760:	2001105c 	.word	0x2001105c
 801d764:	080239f4 	.word	0x080239f4
 801d768:	08023a2c 	.word	0x08023a2c
 801d76c:	08023a64 	.word	0x08023a64
 801d770:	08023a8c 	.word	0x08023a8c

0801d774 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801d774:	b580      	push	{r7, lr}
 801d776:	b082      	sub	sp, #8
 801d778:	af00      	add	r7, sp, #0
 801d77a:	6078      	str	r0, [r7, #4]
 801d77c:	460b      	mov	r3, r1
 801d77e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801d780:	78fb      	ldrb	r3, [r7, #3]
 801d782:	461a      	mov	r2, r3
 801d784:	2103      	movs	r1, #3
 801d786:	6878      	ldr	r0, [r7, #4]
 801d788:	f000 f814 	bl	801d7b4 <icmp_send_response>
}
 801d78c:	bf00      	nop
 801d78e:	3708      	adds	r7, #8
 801d790:	46bd      	mov	sp, r7
 801d792:	bd80      	pop	{r7, pc}

0801d794 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801d794:	b580      	push	{r7, lr}
 801d796:	b082      	sub	sp, #8
 801d798:	af00      	add	r7, sp, #0
 801d79a:	6078      	str	r0, [r7, #4]
 801d79c:	460b      	mov	r3, r1
 801d79e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801d7a0:	78fb      	ldrb	r3, [r7, #3]
 801d7a2:	461a      	mov	r2, r3
 801d7a4:	210b      	movs	r1, #11
 801d7a6:	6878      	ldr	r0, [r7, #4]
 801d7a8:	f000 f804 	bl	801d7b4 <icmp_send_response>
}
 801d7ac:	bf00      	nop
 801d7ae:	3708      	adds	r7, #8
 801d7b0:	46bd      	mov	sp, r7
 801d7b2:	bd80      	pop	{r7, pc}

0801d7b4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801d7b4:	b580      	push	{r7, lr}
 801d7b6:	b08c      	sub	sp, #48	; 0x30
 801d7b8:	af04      	add	r7, sp, #16
 801d7ba:	6078      	str	r0, [r7, #4]
 801d7bc:	460b      	mov	r3, r1
 801d7be:	70fb      	strb	r3, [r7, #3]
 801d7c0:	4613      	mov	r3, r2
 801d7c2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801d7c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d7c8:	2124      	movs	r1, #36	; 0x24
 801d7ca:	2022      	movs	r0, #34	; 0x22
 801d7cc:	f7f7 fe68 	bl	80154a0 <pbuf_alloc>
 801d7d0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801d7d2:	69fb      	ldr	r3, [r7, #28]
 801d7d4:	2b00      	cmp	r3, #0
 801d7d6:	d04c      	beq.n	801d872 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801d7d8:	69fb      	ldr	r3, [r7, #28]
 801d7da:	895b      	ldrh	r3, [r3, #10]
 801d7dc:	2b23      	cmp	r3, #35	; 0x23
 801d7de:	d806      	bhi.n	801d7ee <icmp_send_response+0x3a>
 801d7e0:	4b26      	ldr	r3, [pc, #152]	; (801d87c <icmp_send_response+0xc8>)
 801d7e2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801d7e6:	4926      	ldr	r1, [pc, #152]	; (801d880 <icmp_send_response+0xcc>)
 801d7e8:	4826      	ldr	r0, [pc, #152]	; (801d884 <icmp_send_response+0xd0>)
 801d7ea:	f001 fbaf 	bl	801ef4c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	685b      	ldr	r3, [r3, #4]
 801d7f2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801d7f4:	69fb      	ldr	r3, [r7, #28]
 801d7f6:	685b      	ldr	r3, [r3, #4]
 801d7f8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801d7fa:	697b      	ldr	r3, [r7, #20]
 801d7fc:	78fa      	ldrb	r2, [r7, #3]
 801d7fe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801d800:	697b      	ldr	r3, [r7, #20]
 801d802:	78ba      	ldrb	r2, [r7, #2]
 801d804:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801d806:	697b      	ldr	r3, [r7, #20]
 801d808:	2200      	movs	r2, #0
 801d80a:	711a      	strb	r2, [r3, #4]
 801d80c:	2200      	movs	r2, #0
 801d80e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801d810:	697b      	ldr	r3, [r7, #20]
 801d812:	2200      	movs	r2, #0
 801d814:	719a      	strb	r2, [r3, #6]
 801d816:	2200      	movs	r2, #0
 801d818:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801d81a:	69fb      	ldr	r3, [r7, #28]
 801d81c:	685b      	ldr	r3, [r3, #4]
 801d81e:	f103 0008 	add.w	r0, r3, #8
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	685b      	ldr	r3, [r3, #4]
 801d826:	221c      	movs	r2, #28
 801d828:	4619      	mov	r1, r3
 801d82a:	f001 fb5f 	bl	801eeec <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801d82e:	69bb      	ldr	r3, [r7, #24]
 801d830:	68db      	ldr	r3, [r3, #12]
 801d832:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801d834:	f107 030c 	add.w	r3, r7, #12
 801d838:	4618      	mov	r0, r3
 801d83a:	f000 f825 	bl	801d888 <ip4_route>
 801d83e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801d840:	693b      	ldr	r3, [r7, #16]
 801d842:	2b00      	cmp	r3, #0
 801d844:	d011      	beq.n	801d86a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801d846:	697b      	ldr	r3, [r7, #20]
 801d848:	2200      	movs	r2, #0
 801d84a:	709a      	strb	r2, [r3, #2]
 801d84c:	2200      	movs	r2, #0
 801d84e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801d850:	f107 020c 	add.w	r2, r7, #12
 801d854:	693b      	ldr	r3, [r7, #16]
 801d856:	9302      	str	r3, [sp, #8]
 801d858:	2301      	movs	r3, #1
 801d85a:	9301      	str	r3, [sp, #4]
 801d85c:	2300      	movs	r3, #0
 801d85e:	9300      	str	r3, [sp, #0]
 801d860:	23ff      	movs	r3, #255	; 0xff
 801d862:	2100      	movs	r1, #0
 801d864:	69f8      	ldr	r0, [r7, #28]
 801d866:	f000 f9cd 	bl	801dc04 <ip4_output_if>
  }
  pbuf_free(q);
 801d86a:	69f8      	ldr	r0, [r7, #28]
 801d86c:	f7f8 f90e 	bl	8015a8c <pbuf_free>
 801d870:	e000      	b.n	801d874 <icmp_send_response+0xc0>
    return;
 801d872:	bf00      	nop
}
 801d874:	3720      	adds	r7, #32
 801d876:	46bd      	mov	sp, r7
 801d878:	bd80      	pop	{r7, pc}
 801d87a:	bf00      	nop
 801d87c:	080239f4 	.word	0x080239f4
 801d880:	08023ac0 	.word	0x08023ac0
 801d884:	08023a64 	.word	0x08023a64

0801d888 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801d888:	b480      	push	{r7}
 801d88a:	b085      	sub	sp, #20
 801d88c:	af00      	add	r7, sp, #0
 801d88e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801d890:	4b33      	ldr	r3, [pc, #204]	; (801d960 <ip4_route+0xd8>)
 801d892:	681b      	ldr	r3, [r3, #0]
 801d894:	60fb      	str	r3, [r7, #12]
 801d896:	e036      	b.n	801d906 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d898:	68fb      	ldr	r3, [r7, #12]
 801d89a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d89e:	f003 0301 	and.w	r3, r3, #1
 801d8a2:	b2db      	uxtb	r3, r3
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	d02b      	beq.n	801d900 <ip4_route+0x78>
 801d8a8:	68fb      	ldr	r3, [r7, #12]
 801d8aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d8ae:	089b      	lsrs	r3, r3, #2
 801d8b0:	f003 0301 	and.w	r3, r3, #1
 801d8b4:	b2db      	uxtb	r3, r3
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d022      	beq.n	801d900 <ip4_route+0x78>
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	3304      	adds	r3, #4
 801d8be:	681b      	ldr	r3, [r3, #0]
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	d01d      	beq.n	801d900 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	681a      	ldr	r2, [r3, #0]
 801d8c8:	68fb      	ldr	r3, [r7, #12]
 801d8ca:	3304      	adds	r3, #4
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	405a      	eors	r2, r3
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	3308      	adds	r3, #8
 801d8d4:	681b      	ldr	r3, [r3, #0]
 801d8d6:	4013      	ands	r3, r2
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d101      	bne.n	801d8e0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801d8dc:	68fb      	ldr	r3, [r7, #12]
 801d8de:	e038      	b.n	801d952 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801d8e0:	68fb      	ldr	r3, [r7, #12]
 801d8e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d8e6:	f003 0302 	and.w	r3, r3, #2
 801d8ea:	2b00      	cmp	r3, #0
 801d8ec:	d108      	bne.n	801d900 <ip4_route+0x78>
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	681a      	ldr	r2, [r3, #0]
 801d8f2:	68fb      	ldr	r3, [r7, #12]
 801d8f4:	330c      	adds	r3, #12
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	429a      	cmp	r2, r3
 801d8fa:	d101      	bne.n	801d900 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801d8fc:	68fb      	ldr	r3, [r7, #12]
 801d8fe:	e028      	b.n	801d952 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801d900:	68fb      	ldr	r3, [r7, #12]
 801d902:	681b      	ldr	r3, [r3, #0]
 801d904:	60fb      	str	r3, [r7, #12]
 801d906:	68fb      	ldr	r3, [r7, #12]
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d1c5      	bne.n	801d898 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d90c:	4b15      	ldr	r3, [pc, #84]	; (801d964 <ip4_route+0xdc>)
 801d90e:	681b      	ldr	r3, [r3, #0]
 801d910:	2b00      	cmp	r3, #0
 801d912:	d01a      	beq.n	801d94a <ip4_route+0xc2>
 801d914:	4b13      	ldr	r3, [pc, #76]	; (801d964 <ip4_route+0xdc>)
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d91c:	f003 0301 	and.w	r3, r3, #1
 801d920:	2b00      	cmp	r3, #0
 801d922:	d012      	beq.n	801d94a <ip4_route+0xc2>
 801d924:	4b0f      	ldr	r3, [pc, #60]	; (801d964 <ip4_route+0xdc>)
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d92c:	f003 0304 	and.w	r3, r3, #4
 801d930:	2b00      	cmp	r3, #0
 801d932:	d00a      	beq.n	801d94a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d934:	4b0b      	ldr	r3, [pc, #44]	; (801d964 <ip4_route+0xdc>)
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	3304      	adds	r3, #4
 801d93a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d004      	beq.n	801d94a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	681b      	ldr	r3, [r3, #0]
 801d944:	b2db      	uxtb	r3, r3
 801d946:	2b7f      	cmp	r3, #127	; 0x7f
 801d948:	d101      	bne.n	801d94e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d94a:	2300      	movs	r3, #0
 801d94c:	e001      	b.n	801d952 <ip4_route+0xca>
  }

  return netif_default;
 801d94e:	4b05      	ldr	r3, [pc, #20]	; (801d964 <ip4_route+0xdc>)
 801d950:	681b      	ldr	r3, [r3, #0]
}
 801d952:	4618      	mov	r0, r3
 801d954:	3714      	adds	r7, #20
 801d956:	46bd      	mov	sp, r7
 801d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d95c:	4770      	bx	lr
 801d95e:	bf00      	nop
 801d960:	2001474c 	.word	0x2001474c
 801d964:	20014750 	.word	0x20014750

0801d968 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801d968:	b580      	push	{r7, lr}
 801d96a:	b082      	sub	sp, #8
 801d96c:	af00      	add	r7, sp, #0
 801d96e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d976:	f003 0301 	and.w	r3, r3, #1
 801d97a:	b2db      	uxtb	r3, r3
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	d016      	beq.n	801d9ae <ip4_input_accept+0x46>
 801d980:	687b      	ldr	r3, [r7, #4]
 801d982:	3304      	adds	r3, #4
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	2b00      	cmp	r3, #0
 801d988:	d011      	beq.n	801d9ae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d98a:	4b0b      	ldr	r3, [pc, #44]	; (801d9b8 <ip4_input_accept+0x50>)
 801d98c:	695a      	ldr	r2, [r3, #20]
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	3304      	adds	r3, #4
 801d992:	681b      	ldr	r3, [r3, #0]
 801d994:	429a      	cmp	r2, r3
 801d996:	d008      	beq.n	801d9aa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801d998:	4b07      	ldr	r3, [pc, #28]	; (801d9b8 <ip4_input_accept+0x50>)
 801d99a:	695b      	ldr	r3, [r3, #20]
 801d99c:	6879      	ldr	r1, [r7, #4]
 801d99e:	4618      	mov	r0, r3
 801d9a0:	f000 fa08 	bl	801ddb4 <ip4_addr_isbroadcast_u32>
 801d9a4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d001      	beq.n	801d9ae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801d9aa:	2301      	movs	r3, #1
 801d9ac:	e000      	b.n	801d9b0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801d9ae:	2300      	movs	r3, #0
}
 801d9b0:	4618      	mov	r0, r3
 801d9b2:	3708      	adds	r7, #8
 801d9b4:	46bd      	mov	sp, r7
 801d9b6:	bd80      	pop	{r7, pc}
 801d9b8:	20011048 	.word	0x20011048

0801d9bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801d9bc:	b580      	push	{r7, lr}
 801d9be:	b086      	sub	sp, #24
 801d9c0:	af00      	add	r7, sp, #0
 801d9c2:	6078      	str	r0, [r7, #4]
 801d9c4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	685b      	ldr	r3, [r3, #4]
 801d9ca:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801d9cc:	697b      	ldr	r3, [r7, #20]
 801d9ce:	781b      	ldrb	r3, [r3, #0]
 801d9d0:	091b      	lsrs	r3, r3, #4
 801d9d2:	b2db      	uxtb	r3, r3
 801d9d4:	2b04      	cmp	r3, #4
 801d9d6:	d004      	beq.n	801d9e2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801d9d8:	6878      	ldr	r0, [r7, #4]
 801d9da:	f7f8 f857 	bl	8015a8c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801d9de:	2300      	movs	r3, #0
 801d9e0:	e107      	b.n	801dbf2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801d9e2:	697b      	ldr	r3, [r7, #20]
 801d9e4:	781b      	ldrb	r3, [r3, #0]
 801d9e6:	f003 030f 	and.w	r3, r3, #15
 801d9ea:	b2db      	uxtb	r3, r3
 801d9ec:	009b      	lsls	r3, r3, #2
 801d9ee:	b2db      	uxtb	r3, r3
 801d9f0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801d9f2:	697b      	ldr	r3, [r7, #20]
 801d9f4:	885b      	ldrh	r3, [r3, #2]
 801d9f6:	b29b      	uxth	r3, r3
 801d9f8:	4618      	mov	r0, r3
 801d9fa:	f7f6 fc53 	bl	80142a4 <lwip_htons>
 801d9fe:	4603      	mov	r3, r0
 801da00:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	891b      	ldrh	r3, [r3, #8]
 801da06:	89ba      	ldrh	r2, [r7, #12]
 801da08:	429a      	cmp	r2, r3
 801da0a:	d204      	bcs.n	801da16 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801da0c:	89bb      	ldrh	r3, [r7, #12]
 801da0e:	4619      	mov	r1, r3
 801da10:	6878      	ldr	r0, [r7, #4]
 801da12:	f7f7 fea3 	bl	801575c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801da16:	687b      	ldr	r3, [r7, #4]
 801da18:	895b      	ldrh	r3, [r3, #10]
 801da1a:	89fa      	ldrh	r2, [r7, #14]
 801da1c:	429a      	cmp	r2, r3
 801da1e:	d807      	bhi.n	801da30 <ip4_input+0x74>
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	891b      	ldrh	r3, [r3, #8]
 801da24:	89ba      	ldrh	r2, [r7, #12]
 801da26:	429a      	cmp	r2, r3
 801da28:	d802      	bhi.n	801da30 <ip4_input+0x74>
 801da2a:	89fb      	ldrh	r3, [r7, #14]
 801da2c:	2b13      	cmp	r3, #19
 801da2e:	d804      	bhi.n	801da3a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801da30:	6878      	ldr	r0, [r7, #4]
 801da32:	f7f8 f82b 	bl	8015a8c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801da36:	2300      	movs	r3, #0
 801da38:	e0db      	b.n	801dbf2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801da3a:	697b      	ldr	r3, [r7, #20]
 801da3c:	691b      	ldr	r3, [r3, #16]
 801da3e:	4a6f      	ldr	r2, [pc, #444]	; (801dbfc <ip4_input+0x240>)
 801da40:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801da42:	697b      	ldr	r3, [r7, #20]
 801da44:	68db      	ldr	r3, [r3, #12]
 801da46:	4a6d      	ldr	r2, [pc, #436]	; (801dbfc <ip4_input+0x240>)
 801da48:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801da4a:	4b6c      	ldr	r3, [pc, #432]	; (801dbfc <ip4_input+0x240>)
 801da4c:	695b      	ldr	r3, [r3, #20]
 801da4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801da52:	2be0      	cmp	r3, #224	; 0xe0
 801da54:	d112      	bne.n	801da7c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801da56:	683b      	ldr	r3, [r7, #0]
 801da58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801da5c:	f003 0301 	and.w	r3, r3, #1
 801da60:	b2db      	uxtb	r3, r3
 801da62:	2b00      	cmp	r3, #0
 801da64:	d007      	beq.n	801da76 <ip4_input+0xba>
 801da66:	683b      	ldr	r3, [r7, #0]
 801da68:	3304      	adds	r3, #4
 801da6a:	681b      	ldr	r3, [r3, #0]
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	d002      	beq.n	801da76 <ip4_input+0xba>
      netif = inp;
 801da70:	683b      	ldr	r3, [r7, #0]
 801da72:	613b      	str	r3, [r7, #16]
 801da74:	e02a      	b.n	801dacc <ip4_input+0x110>
    } else {
      netif = NULL;
 801da76:	2300      	movs	r3, #0
 801da78:	613b      	str	r3, [r7, #16]
 801da7a:	e027      	b.n	801dacc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801da7c:	6838      	ldr	r0, [r7, #0]
 801da7e:	f7ff ff73 	bl	801d968 <ip4_input_accept>
 801da82:	4603      	mov	r3, r0
 801da84:	2b00      	cmp	r3, #0
 801da86:	d002      	beq.n	801da8e <ip4_input+0xd2>
      netif = inp;
 801da88:	683b      	ldr	r3, [r7, #0]
 801da8a:	613b      	str	r3, [r7, #16]
 801da8c:	e01e      	b.n	801dacc <ip4_input+0x110>
    } else {
      netif = NULL;
 801da8e:	2300      	movs	r3, #0
 801da90:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801da92:	4b5a      	ldr	r3, [pc, #360]	; (801dbfc <ip4_input+0x240>)
 801da94:	695b      	ldr	r3, [r3, #20]
 801da96:	b2db      	uxtb	r3, r3
 801da98:	2b7f      	cmp	r3, #127	; 0x7f
 801da9a:	d017      	beq.n	801dacc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801da9c:	4b58      	ldr	r3, [pc, #352]	; (801dc00 <ip4_input+0x244>)
 801da9e:	681b      	ldr	r3, [r3, #0]
 801daa0:	613b      	str	r3, [r7, #16]
 801daa2:	e00e      	b.n	801dac2 <ip4_input+0x106>
          if (netif == inp) {
 801daa4:	693a      	ldr	r2, [r7, #16]
 801daa6:	683b      	ldr	r3, [r7, #0]
 801daa8:	429a      	cmp	r2, r3
 801daaa:	d006      	beq.n	801daba <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801daac:	6938      	ldr	r0, [r7, #16]
 801daae:	f7ff ff5b 	bl	801d968 <ip4_input_accept>
 801dab2:	4603      	mov	r3, r0
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	d108      	bne.n	801daca <ip4_input+0x10e>
 801dab8:	e000      	b.n	801dabc <ip4_input+0x100>
            continue;
 801daba:	bf00      	nop
        NETIF_FOREACH(netif) {
 801dabc:	693b      	ldr	r3, [r7, #16]
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	613b      	str	r3, [r7, #16]
 801dac2:	693b      	ldr	r3, [r7, #16]
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	d1ed      	bne.n	801daa4 <ip4_input+0xe8>
 801dac8:	e000      	b.n	801dacc <ip4_input+0x110>
            break;
 801daca:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801dacc:	4b4b      	ldr	r3, [pc, #300]	; (801dbfc <ip4_input+0x240>)
 801dace:	691b      	ldr	r3, [r3, #16]
 801dad0:	6839      	ldr	r1, [r7, #0]
 801dad2:	4618      	mov	r0, r3
 801dad4:	f000 f96e 	bl	801ddb4 <ip4_addr_isbroadcast_u32>
 801dad8:	4603      	mov	r3, r0
 801dada:	2b00      	cmp	r3, #0
 801dadc:	d105      	bne.n	801daea <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801dade:	4b47      	ldr	r3, [pc, #284]	; (801dbfc <ip4_input+0x240>)
 801dae0:	691b      	ldr	r3, [r3, #16]
 801dae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801dae6:	2be0      	cmp	r3, #224	; 0xe0
 801dae8:	d104      	bne.n	801daf4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801daea:	6878      	ldr	r0, [r7, #4]
 801daec:	f7f7 ffce 	bl	8015a8c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801daf0:	2300      	movs	r3, #0
 801daf2:	e07e      	b.n	801dbf2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801daf4:	693b      	ldr	r3, [r7, #16]
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d104      	bne.n	801db04 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801dafa:	6878      	ldr	r0, [r7, #4]
 801dafc:	f7f7 ffc6 	bl	8015a8c <pbuf_free>
    return ERR_OK;
 801db00:	2300      	movs	r3, #0
 801db02:	e076      	b.n	801dbf2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801db04:	697b      	ldr	r3, [r7, #20]
 801db06:	88db      	ldrh	r3, [r3, #6]
 801db08:	b29b      	uxth	r3, r3
 801db0a:	461a      	mov	r2, r3
 801db0c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801db10:	4013      	ands	r3, r2
 801db12:	2b00      	cmp	r3, #0
 801db14:	d00b      	beq.n	801db2e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801db16:	6878      	ldr	r0, [r7, #4]
 801db18:	f000 fc92 	bl	801e440 <ip4_reass>
 801db1c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801db1e:	687b      	ldr	r3, [r7, #4]
 801db20:	2b00      	cmp	r3, #0
 801db22:	d101      	bne.n	801db28 <ip4_input+0x16c>
      return ERR_OK;
 801db24:	2300      	movs	r3, #0
 801db26:	e064      	b.n	801dbf2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	685b      	ldr	r3, [r3, #4]
 801db2c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801db2e:	4a33      	ldr	r2, [pc, #204]	; (801dbfc <ip4_input+0x240>)
 801db30:	693b      	ldr	r3, [r7, #16]
 801db32:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801db34:	4a31      	ldr	r2, [pc, #196]	; (801dbfc <ip4_input+0x240>)
 801db36:	683b      	ldr	r3, [r7, #0]
 801db38:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801db3a:	4a30      	ldr	r2, [pc, #192]	; (801dbfc <ip4_input+0x240>)
 801db3c:	697b      	ldr	r3, [r7, #20]
 801db3e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801db40:	697b      	ldr	r3, [r7, #20]
 801db42:	781b      	ldrb	r3, [r3, #0]
 801db44:	f003 030f 	and.w	r3, r3, #15
 801db48:	b2db      	uxtb	r3, r3
 801db4a:	009b      	lsls	r3, r3, #2
 801db4c:	b2db      	uxtb	r3, r3
 801db4e:	b29a      	uxth	r2, r3
 801db50:	4b2a      	ldr	r3, [pc, #168]	; (801dbfc <ip4_input+0x240>)
 801db52:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801db54:	89fb      	ldrh	r3, [r7, #14]
 801db56:	4619      	mov	r1, r3
 801db58:	6878      	ldr	r0, [r7, #4]
 801db5a:	f7f7 feff 	bl	801595c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801db5e:	697b      	ldr	r3, [r7, #20]
 801db60:	7a5b      	ldrb	r3, [r3, #9]
 801db62:	2b11      	cmp	r3, #17
 801db64:	d006      	beq.n	801db74 <ip4_input+0x1b8>
 801db66:	2b11      	cmp	r3, #17
 801db68:	dc13      	bgt.n	801db92 <ip4_input+0x1d6>
 801db6a:	2b01      	cmp	r3, #1
 801db6c:	d00c      	beq.n	801db88 <ip4_input+0x1cc>
 801db6e:	2b06      	cmp	r3, #6
 801db70:	d005      	beq.n	801db7e <ip4_input+0x1c2>
 801db72:	e00e      	b.n	801db92 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801db74:	6839      	ldr	r1, [r7, #0]
 801db76:	6878      	ldr	r0, [r7, #4]
 801db78:	f7fe fc68 	bl	801c44c <udp_input>
        break;
 801db7c:	e026      	b.n	801dbcc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801db7e:	6839      	ldr	r1, [r7, #0]
 801db80:	6878      	ldr	r0, [r7, #4]
 801db82:	f7fa f85d 	bl	8017c40 <tcp_input>
        break;
 801db86:	e021      	b.n	801dbcc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801db88:	6839      	ldr	r1, [r7, #0]
 801db8a:	6878      	ldr	r0, [r7, #4]
 801db8c:	f7ff fcee 	bl	801d56c <icmp_input>
        break;
 801db90:	e01c      	b.n	801dbcc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801db92:	4b1a      	ldr	r3, [pc, #104]	; (801dbfc <ip4_input+0x240>)
 801db94:	695b      	ldr	r3, [r3, #20]
 801db96:	6939      	ldr	r1, [r7, #16]
 801db98:	4618      	mov	r0, r3
 801db9a:	f000 f90b 	bl	801ddb4 <ip4_addr_isbroadcast_u32>
 801db9e:	4603      	mov	r3, r0
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d10f      	bne.n	801dbc4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801dba4:	4b15      	ldr	r3, [pc, #84]	; (801dbfc <ip4_input+0x240>)
 801dba6:	695b      	ldr	r3, [r3, #20]
 801dba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801dbac:	2be0      	cmp	r3, #224	; 0xe0
 801dbae:	d009      	beq.n	801dbc4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801dbb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801dbb4:	4619      	mov	r1, r3
 801dbb6:	6878      	ldr	r0, [r7, #4]
 801dbb8:	f7f7 ff55 	bl	8015a66 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801dbbc:	2102      	movs	r1, #2
 801dbbe:	6878      	ldr	r0, [r7, #4]
 801dbc0:	f7ff fdd8 	bl	801d774 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801dbc4:	6878      	ldr	r0, [r7, #4]
 801dbc6:	f7f7 ff61 	bl	8015a8c <pbuf_free>
        break;
 801dbca:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801dbcc:	4b0b      	ldr	r3, [pc, #44]	; (801dbfc <ip4_input+0x240>)
 801dbce:	2200      	movs	r2, #0
 801dbd0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801dbd2:	4b0a      	ldr	r3, [pc, #40]	; (801dbfc <ip4_input+0x240>)
 801dbd4:	2200      	movs	r2, #0
 801dbd6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801dbd8:	4b08      	ldr	r3, [pc, #32]	; (801dbfc <ip4_input+0x240>)
 801dbda:	2200      	movs	r2, #0
 801dbdc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801dbde:	4b07      	ldr	r3, [pc, #28]	; (801dbfc <ip4_input+0x240>)
 801dbe0:	2200      	movs	r2, #0
 801dbe2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801dbe4:	4b05      	ldr	r3, [pc, #20]	; (801dbfc <ip4_input+0x240>)
 801dbe6:	2200      	movs	r2, #0
 801dbe8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801dbea:	4b04      	ldr	r3, [pc, #16]	; (801dbfc <ip4_input+0x240>)
 801dbec:	2200      	movs	r2, #0
 801dbee:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801dbf0:	2300      	movs	r3, #0
}
 801dbf2:	4618      	mov	r0, r3
 801dbf4:	3718      	adds	r7, #24
 801dbf6:	46bd      	mov	sp, r7
 801dbf8:	bd80      	pop	{r7, pc}
 801dbfa:	bf00      	nop
 801dbfc:	20011048 	.word	0x20011048
 801dc00:	2001474c 	.word	0x2001474c

0801dc04 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801dc04:	b580      	push	{r7, lr}
 801dc06:	b08a      	sub	sp, #40	; 0x28
 801dc08:	af04      	add	r7, sp, #16
 801dc0a:	60f8      	str	r0, [r7, #12]
 801dc0c:	60b9      	str	r1, [r7, #8]
 801dc0e:	607a      	str	r2, [r7, #4]
 801dc10:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801dc12:	68bb      	ldr	r3, [r7, #8]
 801dc14:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801dc16:	687b      	ldr	r3, [r7, #4]
 801dc18:	2b00      	cmp	r3, #0
 801dc1a:	d009      	beq.n	801dc30 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801dc1c:	68bb      	ldr	r3, [r7, #8]
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	d003      	beq.n	801dc2a <ip4_output_if+0x26>
 801dc22:	68bb      	ldr	r3, [r7, #8]
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	2b00      	cmp	r3, #0
 801dc28:	d102      	bne.n	801dc30 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801dc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc2c:	3304      	adds	r3, #4
 801dc2e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801dc30:	78fa      	ldrb	r2, [r7, #3]
 801dc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc34:	9302      	str	r3, [sp, #8]
 801dc36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dc3a:	9301      	str	r3, [sp, #4]
 801dc3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dc40:	9300      	str	r3, [sp, #0]
 801dc42:	4613      	mov	r3, r2
 801dc44:	687a      	ldr	r2, [r7, #4]
 801dc46:	6979      	ldr	r1, [r7, #20]
 801dc48:	68f8      	ldr	r0, [r7, #12]
 801dc4a:	f000 f805 	bl	801dc58 <ip4_output_if_src>
 801dc4e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801dc50:	4618      	mov	r0, r3
 801dc52:	3718      	adds	r7, #24
 801dc54:	46bd      	mov	sp, r7
 801dc56:	bd80      	pop	{r7, pc}

0801dc58 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801dc58:	b580      	push	{r7, lr}
 801dc5a:	b088      	sub	sp, #32
 801dc5c:	af00      	add	r7, sp, #0
 801dc5e:	60f8      	str	r0, [r7, #12]
 801dc60:	60b9      	str	r1, [r7, #8]
 801dc62:	607a      	str	r2, [r7, #4]
 801dc64:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801dc66:	68fb      	ldr	r3, [r7, #12]
 801dc68:	7b9b      	ldrb	r3, [r3, #14]
 801dc6a:	2b01      	cmp	r3, #1
 801dc6c:	d006      	beq.n	801dc7c <ip4_output_if_src+0x24>
 801dc6e:	4b4b      	ldr	r3, [pc, #300]	; (801dd9c <ip4_output_if_src+0x144>)
 801dc70:	f44f 7255 	mov.w	r2, #852	; 0x354
 801dc74:	494a      	ldr	r1, [pc, #296]	; (801dda0 <ip4_output_if_src+0x148>)
 801dc76:	484b      	ldr	r0, [pc, #300]	; (801dda4 <ip4_output_if_src+0x14c>)
 801dc78:	f001 f968 	bl	801ef4c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d060      	beq.n	801dd44 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801dc82:	2314      	movs	r3, #20
 801dc84:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801dc86:	2114      	movs	r1, #20
 801dc88:	68f8      	ldr	r0, [r7, #12]
 801dc8a:	f7f7 fe57 	bl	801593c <pbuf_add_header>
 801dc8e:	4603      	mov	r3, r0
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	d002      	beq.n	801dc9a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801dc94:	f06f 0301 	mvn.w	r3, #1
 801dc98:	e07c      	b.n	801dd94 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801dc9a:	68fb      	ldr	r3, [r7, #12]
 801dc9c:	685b      	ldr	r3, [r3, #4]
 801dc9e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801dca0:	68fb      	ldr	r3, [r7, #12]
 801dca2:	895b      	ldrh	r3, [r3, #10]
 801dca4:	2b13      	cmp	r3, #19
 801dca6:	d806      	bhi.n	801dcb6 <ip4_output_if_src+0x5e>
 801dca8:	4b3c      	ldr	r3, [pc, #240]	; (801dd9c <ip4_output_if_src+0x144>)
 801dcaa:	f44f 7262 	mov.w	r2, #904	; 0x388
 801dcae:	493e      	ldr	r1, [pc, #248]	; (801dda8 <ip4_output_if_src+0x150>)
 801dcb0:	483c      	ldr	r0, [pc, #240]	; (801dda4 <ip4_output_if_src+0x14c>)
 801dcb2:	f001 f94b 	bl	801ef4c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801dcb6:	69fb      	ldr	r3, [r7, #28]
 801dcb8:	78fa      	ldrb	r2, [r7, #3]
 801dcba:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801dcbc:	69fb      	ldr	r3, [r7, #28]
 801dcbe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801dcc2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	681a      	ldr	r2, [r3, #0]
 801dcc8:	69fb      	ldr	r3, [r7, #28]
 801dcca:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801dccc:	8b7b      	ldrh	r3, [r7, #26]
 801dcce:	089b      	lsrs	r3, r3, #2
 801dcd0:	b29b      	uxth	r3, r3
 801dcd2:	b2db      	uxtb	r3, r3
 801dcd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dcd8:	b2da      	uxtb	r2, r3
 801dcda:	69fb      	ldr	r3, [r7, #28]
 801dcdc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801dcde:	69fb      	ldr	r3, [r7, #28]
 801dce0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801dce4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801dce6:	68fb      	ldr	r3, [r7, #12]
 801dce8:	891b      	ldrh	r3, [r3, #8]
 801dcea:	4618      	mov	r0, r3
 801dcec:	f7f6 fada 	bl	80142a4 <lwip_htons>
 801dcf0:	4603      	mov	r3, r0
 801dcf2:	461a      	mov	r2, r3
 801dcf4:	69fb      	ldr	r3, [r7, #28]
 801dcf6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801dcf8:	69fb      	ldr	r3, [r7, #28]
 801dcfa:	2200      	movs	r2, #0
 801dcfc:	719a      	strb	r2, [r3, #6]
 801dcfe:	2200      	movs	r2, #0
 801dd00:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801dd02:	4b2a      	ldr	r3, [pc, #168]	; (801ddac <ip4_output_if_src+0x154>)
 801dd04:	881b      	ldrh	r3, [r3, #0]
 801dd06:	4618      	mov	r0, r3
 801dd08:	f7f6 facc 	bl	80142a4 <lwip_htons>
 801dd0c:	4603      	mov	r3, r0
 801dd0e:	461a      	mov	r2, r3
 801dd10:	69fb      	ldr	r3, [r7, #28]
 801dd12:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801dd14:	4b25      	ldr	r3, [pc, #148]	; (801ddac <ip4_output_if_src+0x154>)
 801dd16:	881b      	ldrh	r3, [r3, #0]
 801dd18:	3301      	adds	r3, #1
 801dd1a:	b29a      	uxth	r2, r3
 801dd1c:	4b23      	ldr	r3, [pc, #140]	; (801ddac <ip4_output_if_src+0x154>)
 801dd1e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801dd20:	68bb      	ldr	r3, [r7, #8]
 801dd22:	2b00      	cmp	r3, #0
 801dd24:	d104      	bne.n	801dd30 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801dd26:	4b22      	ldr	r3, [pc, #136]	; (801ddb0 <ip4_output_if_src+0x158>)
 801dd28:	681a      	ldr	r2, [r3, #0]
 801dd2a:	69fb      	ldr	r3, [r7, #28]
 801dd2c:	60da      	str	r2, [r3, #12]
 801dd2e:	e003      	b.n	801dd38 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801dd30:	68bb      	ldr	r3, [r7, #8]
 801dd32:	681a      	ldr	r2, [r3, #0]
 801dd34:	69fb      	ldr	r3, [r7, #28]
 801dd36:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801dd38:	69fb      	ldr	r3, [r7, #28]
 801dd3a:	2200      	movs	r2, #0
 801dd3c:	729a      	strb	r2, [r3, #10]
 801dd3e:	2200      	movs	r2, #0
 801dd40:	72da      	strb	r2, [r3, #11]
 801dd42:	e00f      	b.n	801dd64 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801dd44:	68fb      	ldr	r3, [r7, #12]
 801dd46:	895b      	ldrh	r3, [r3, #10]
 801dd48:	2b13      	cmp	r3, #19
 801dd4a:	d802      	bhi.n	801dd52 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801dd4c:	f06f 0301 	mvn.w	r3, #1
 801dd50:	e020      	b.n	801dd94 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	685b      	ldr	r3, [r3, #4]
 801dd56:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801dd58:	69fb      	ldr	r3, [r7, #28]
 801dd5a:	691b      	ldr	r3, [r3, #16]
 801dd5c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801dd5e:	f107 0314 	add.w	r3, r7, #20
 801dd62:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801dd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d00c      	beq.n	801dd86 <ip4_output_if_src+0x12e>
 801dd6c:	68fb      	ldr	r3, [r7, #12]
 801dd6e:	891a      	ldrh	r2, [r3, #8]
 801dd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801dd74:	429a      	cmp	r2, r3
 801dd76:	d906      	bls.n	801dd86 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801dd78:	687a      	ldr	r2, [r7, #4]
 801dd7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dd7c:	68f8      	ldr	r0, [r7, #12]
 801dd7e:	f000 fd4d 	bl	801e81c <ip4_frag>
 801dd82:	4603      	mov	r3, r0
 801dd84:	e006      	b.n	801dd94 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801dd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd88:	695b      	ldr	r3, [r3, #20]
 801dd8a:	687a      	ldr	r2, [r7, #4]
 801dd8c:	68f9      	ldr	r1, [r7, #12]
 801dd8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dd90:	4798      	blx	r3
 801dd92:	4603      	mov	r3, r0
}
 801dd94:	4618      	mov	r0, r3
 801dd96:	3720      	adds	r7, #32
 801dd98:	46bd      	mov	sp, r7
 801dd9a:	bd80      	pop	{r7, pc}
 801dd9c:	08023aec 	.word	0x08023aec
 801dda0:	08023b20 	.word	0x08023b20
 801dda4:	08023b2c 	.word	0x08023b2c
 801dda8:	08023b54 	.word	0x08023b54
 801ddac:	2000c92e 	.word	0x2000c92e
 801ddb0:	0807ac80 	.word	0x0807ac80

0801ddb4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801ddb4:	b480      	push	{r7}
 801ddb6:	b085      	sub	sp, #20
 801ddb8:	af00      	add	r7, sp, #0
 801ddba:	6078      	str	r0, [r7, #4]
 801ddbc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ddc8:	d002      	beq.n	801ddd0 <ip4_addr_isbroadcast_u32+0x1c>
 801ddca:	687b      	ldr	r3, [r7, #4]
 801ddcc:	2b00      	cmp	r3, #0
 801ddce:	d101      	bne.n	801ddd4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801ddd0:	2301      	movs	r3, #1
 801ddd2:	e02a      	b.n	801de2a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801ddd4:	683b      	ldr	r3, [r7, #0]
 801ddd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ddda:	f003 0302 	and.w	r3, r3, #2
 801ddde:	2b00      	cmp	r3, #0
 801dde0:	d101      	bne.n	801dde6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801dde2:	2300      	movs	r3, #0
 801dde4:	e021      	b.n	801de2a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801dde6:	683b      	ldr	r3, [r7, #0]
 801dde8:	3304      	adds	r3, #4
 801ddea:	681b      	ldr	r3, [r3, #0]
 801ddec:	687a      	ldr	r2, [r7, #4]
 801ddee:	429a      	cmp	r2, r3
 801ddf0:	d101      	bne.n	801ddf6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801ddf2:	2300      	movs	r3, #0
 801ddf4:	e019      	b.n	801de2a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801ddf6:	68fa      	ldr	r2, [r7, #12]
 801ddf8:	683b      	ldr	r3, [r7, #0]
 801ddfa:	3304      	adds	r3, #4
 801ddfc:	681b      	ldr	r3, [r3, #0]
 801ddfe:	405a      	eors	r2, r3
 801de00:	683b      	ldr	r3, [r7, #0]
 801de02:	3308      	adds	r3, #8
 801de04:	681b      	ldr	r3, [r3, #0]
 801de06:	4013      	ands	r3, r2
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d10d      	bne.n	801de28 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801de0c:	683b      	ldr	r3, [r7, #0]
 801de0e:	3308      	adds	r3, #8
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	43da      	mvns	r2, r3
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801de18:	683b      	ldr	r3, [r7, #0]
 801de1a:	3308      	adds	r3, #8
 801de1c:	681b      	ldr	r3, [r3, #0]
 801de1e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801de20:	429a      	cmp	r2, r3
 801de22:	d101      	bne.n	801de28 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801de24:	2301      	movs	r3, #1
 801de26:	e000      	b.n	801de2a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801de28:	2300      	movs	r3, #0
  }
}
 801de2a:	4618      	mov	r0, r3
 801de2c:	3714      	adds	r7, #20
 801de2e:	46bd      	mov	sp, r7
 801de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de34:	4770      	bx	lr
	...

0801de38 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801de38:	b580      	push	{r7, lr}
 801de3a:	b084      	sub	sp, #16
 801de3c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801de3e:	2300      	movs	r3, #0
 801de40:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801de42:	4b12      	ldr	r3, [pc, #72]	; (801de8c <ip_reass_tmr+0x54>)
 801de44:	681b      	ldr	r3, [r3, #0]
 801de46:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801de48:	e018      	b.n	801de7c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801de4a:	68fb      	ldr	r3, [r7, #12]
 801de4c:	7fdb      	ldrb	r3, [r3, #31]
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d00b      	beq.n	801de6a <ip_reass_tmr+0x32>
      r->timer--;
 801de52:	68fb      	ldr	r3, [r7, #12]
 801de54:	7fdb      	ldrb	r3, [r3, #31]
 801de56:	3b01      	subs	r3, #1
 801de58:	b2da      	uxtb	r2, r3
 801de5a:	68fb      	ldr	r3, [r7, #12]
 801de5c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801de5e:	68fb      	ldr	r3, [r7, #12]
 801de60:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801de62:	68fb      	ldr	r3, [r7, #12]
 801de64:	681b      	ldr	r3, [r3, #0]
 801de66:	60fb      	str	r3, [r7, #12]
 801de68:	e008      	b.n	801de7c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801de6a:	68fb      	ldr	r3, [r7, #12]
 801de6c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801de74:	68b9      	ldr	r1, [r7, #8]
 801de76:	6878      	ldr	r0, [r7, #4]
 801de78:	f000 f80a 	bl	801de90 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801de7c:	68fb      	ldr	r3, [r7, #12]
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d1e3      	bne.n	801de4a <ip_reass_tmr+0x12>
    }
  }
}
 801de82:	bf00      	nop
 801de84:	bf00      	nop
 801de86:	3710      	adds	r7, #16
 801de88:	46bd      	mov	sp, r7
 801de8a:	bd80      	pop	{r7, pc}
 801de8c:	2000c930 	.word	0x2000c930

0801de90 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801de90:	b580      	push	{r7, lr}
 801de92:	b088      	sub	sp, #32
 801de94:	af00      	add	r7, sp, #0
 801de96:	6078      	str	r0, [r7, #4]
 801de98:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801de9a:	2300      	movs	r3, #0
 801de9c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801de9e:	683a      	ldr	r2, [r7, #0]
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	429a      	cmp	r2, r3
 801dea4:	d105      	bne.n	801deb2 <ip_reass_free_complete_datagram+0x22>
 801dea6:	4b45      	ldr	r3, [pc, #276]	; (801dfbc <ip_reass_free_complete_datagram+0x12c>)
 801dea8:	22ab      	movs	r2, #171	; 0xab
 801deaa:	4945      	ldr	r1, [pc, #276]	; (801dfc0 <ip_reass_free_complete_datagram+0x130>)
 801deac:	4845      	ldr	r0, [pc, #276]	; (801dfc4 <ip_reass_free_complete_datagram+0x134>)
 801deae:	f001 f84d 	bl	801ef4c <iprintf>
  if (prev != NULL) {
 801deb2:	683b      	ldr	r3, [r7, #0]
 801deb4:	2b00      	cmp	r3, #0
 801deb6:	d00a      	beq.n	801dece <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801deb8:	683b      	ldr	r3, [r7, #0]
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	687a      	ldr	r2, [r7, #4]
 801debe:	429a      	cmp	r2, r3
 801dec0:	d005      	beq.n	801dece <ip_reass_free_complete_datagram+0x3e>
 801dec2:	4b3e      	ldr	r3, [pc, #248]	; (801dfbc <ip_reass_free_complete_datagram+0x12c>)
 801dec4:	22ad      	movs	r2, #173	; 0xad
 801dec6:	4940      	ldr	r1, [pc, #256]	; (801dfc8 <ip_reass_free_complete_datagram+0x138>)
 801dec8:	483e      	ldr	r0, [pc, #248]	; (801dfc4 <ip_reass_free_complete_datagram+0x134>)
 801deca:	f001 f83f 	bl	801ef4c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801dece:	687b      	ldr	r3, [r7, #4]
 801ded0:	685b      	ldr	r3, [r3, #4]
 801ded2:	685b      	ldr	r3, [r3, #4]
 801ded4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ded6:	697b      	ldr	r3, [r7, #20]
 801ded8:	889b      	ldrh	r3, [r3, #4]
 801deda:	b29b      	uxth	r3, r3
 801dedc:	2b00      	cmp	r3, #0
 801dede:	d12a      	bne.n	801df36 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801dee0:	687b      	ldr	r3, [r7, #4]
 801dee2:	685b      	ldr	r3, [r3, #4]
 801dee4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801dee6:	697b      	ldr	r3, [r7, #20]
 801dee8:	681a      	ldr	r2, [r3, #0]
 801deea:	687b      	ldr	r3, [r7, #4]
 801deec:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801deee:	69bb      	ldr	r3, [r7, #24]
 801def0:	6858      	ldr	r0, [r3, #4]
 801def2:	687b      	ldr	r3, [r7, #4]
 801def4:	3308      	adds	r3, #8
 801def6:	2214      	movs	r2, #20
 801def8:	4619      	mov	r1, r3
 801defa:	f000 fff7 	bl	801eeec <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801defe:	2101      	movs	r1, #1
 801df00:	69b8      	ldr	r0, [r7, #24]
 801df02:	f7ff fc47 	bl	801d794 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801df06:	69b8      	ldr	r0, [r7, #24]
 801df08:	f7f7 fe4e 	bl	8015ba8 <pbuf_clen>
 801df0c:	4603      	mov	r3, r0
 801df0e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801df10:	8bfa      	ldrh	r2, [r7, #30]
 801df12:	8a7b      	ldrh	r3, [r7, #18]
 801df14:	4413      	add	r3, r2
 801df16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801df1a:	db05      	blt.n	801df28 <ip_reass_free_complete_datagram+0x98>
 801df1c:	4b27      	ldr	r3, [pc, #156]	; (801dfbc <ip_reass_free_complete_datagram+0x12c>)
 801df1e:	22bc      	movs	r2, #188	; 0xbc
 801df20:	492a      	ldr	r1, [pc, #168]	; (801dfcc <ip_reass_free_complete_datagram+0x13c>)
 801df22:	4828      	ldr	r0, [pc, #160]	; (801dfc4 <ip_reass_free_complete_datagram+0x134>)
 801df24:	f001 f812 	bl	801ef4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801df28:	8bfa      	ldrh	r2, [r7, #30]
 801df2a:	8a7b      	ldrh	r3, [r7, #18]
 801df2c:	4413      	add	r3, r2
 801df2e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801df30:	69b8      	ldr	r0, [r7, #24]
 801df32:	f7f7 fdab 	bl	8015a8c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	685b      	ldr	r3, [r3, #4]
 801df3a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801df3c:	e01f      	b.n	801df7e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801df3e:	69bb      	ldr	r3, [r7, #24]
 801df40:	685b      	ldr	r3, [r3, #4]
 801df42:	617b      	str	r3, [r7, #20]
    pcur = p;
 801df44:	69bb      	ldr	r3, [r7, #24]
 801df46:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801df48:	697b      	ldr	r3, [r7, #20]
 801df4a:	681b      	ldr	r3, [r3, #0]
 801df4c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801df4e:	68f8      	ldr	r0, [r7, #12]
 801df50:	f7f7 fe2a 	bl	8015ba8 <pbuf_clen>
 801df54:	4603      	mov	r3, r0
 801df56:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801df58:	8bfa      	ldrh	r2, [r7, #30]
 801df5a:	8a7b      	ldrh	r3, [r7, #18]
 801df5c:	4413      	add	r3, r2
 801df5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801df62:	db05      	blt.n	801df70 <ip_reass_free_complete_datagram+0xe0>
 801df64:	4b15      	ldr	r3, [pc, #84]	; (801dfbc <ip_reass_free_complete_datagram+0x12c>)
 801df66:	22cc      	movs	r2, #204	; 0xcc
 801df68:	4918      	ldr	r1, [pc, #96]	; (801dfcc <ip_reass_free_complete_datagram+0x13c>)
 801df6a:	4816      	ldr	r0, [pc, #88]	; (801dfc4 <ip_reass_free_complete_datagram+0x134>)
 801df6c:	f000 ffee 	bl	801ef4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801df70:	8bfa      	ldrh	r2, [r7, #30]
 801df72:	8a7b      	ldrh	r3, [r7, #18]
 801df74:	4413      	add	r3, r2
 801df76:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801df78:	68f8      	ldr	r0, [r7, #12]
 801df7a:	f7f7 fd87 	bl	8015a8c <pbuf_free>
  while (p != NULL) {
 801df7e:	69bb      	ldr	r3, [r7, #24]
 801df80:	2b00      	cmp	r3, #0
 801df82:	d1dc      	bne.n	801df3e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801df84:	6839      	ldr	r1, [r7, #0]
 801df86:	6878      	ldr	r0, [r7, #4]
 801df88:	f000 f8c2 	bl	801e110 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801df8c:	4b10      	ldr	r3, [pc, #64]	; (801dfd0 <ip_reass_free_complete_datagram+0x140>)
 801df8e:	881b      	ldrh	r3, [r3, #0]
 801df90:	8bfa      	ldrh	r2, [r7, #30]
 801df92:	429a      	cmp	r2, r3
 801df94:	d905      	bls.n	801dfa2 <ip_reass_free_complete_datagram+0x112>
 801df96:	4b09      	ldr	r3, [pc, #36]	; (801dfbc <ip_reass_free_complete_datagram+0x12c>)
 801df98:	22d2      	movs	r2, #210	; 0xd2
 801df9a:	490e      	ldr	r1, [pc, #56]	; (801dfd4 <ip_reass_free_complete_datagram+0x144>)
 801df9c:	4809      	ldr	r0, [pc, #36]	; (801dfc4 <ip_reass_free_complete_datagram+0x134>)
 801df9e:	f000 ffd5 	bl	801ef4c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801dfa2:	4b0b      	ldr	r3, [pc, #44]	; (801dfd0 <ip_reass_free_complete_datagram+0x140>)
 801dfa4:	881a      	ldrh	r2, [r3, #0]
 801dfa6:	8bfb      	ldrh	r3, [r7, #30]
 801dfa8:	1ad3      	subs	r3, r2, r3
 801dfaa:	b29a      	uxth	r2, r3
 801dfac:	4b08      	ldr	r3, [pc, #32]	; (801dfd0 <ip_reass_free_complete_datagram+0x140>)
 801dfae:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801dfb0:	8bfb      	ldrh	r3, [r7, #30]
}
 801dfb2:	4618      	mov	r0, r3
 801dfb4:	3720      	adds	r7, #32
 801dfb6:	46bd      	mov	sp, r7
 801dfb8:	bd80      	pop	{r7, pc}
 801dfba:	bf00      	nop
 801dfbc:	08023b84 	.word	0x08023b84
 801dfc0:	08023bc0 	.word	0x08023bc0
 801dfc4:	08023bcc 	.word	0x08023bcc
 801dfc8:	08023bf4 	.word	0x08023bf4
 801dfcc:	08023c08 	.word	0x08023c08
 801dfd0:	2000c934 	.word	0x2000c934
 801dfd4:	08023c28 	.word	0x08023c28

0801dfd8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801dfd8:	b580      	push	{r7, lr}
 801dfda:	b08a      	sub	sp, #40	; 0x28
 801dfdc:	af00      	add	r7, sp, #0
 801dfde:	6078      	str	r0, [r7, #4]
 801dfe0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801dfe2:	2300      	movs	r3, #0
 801dfe4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801dfe6:	2300      	movs	r3, #0
 801dfe8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801dfea:	2300      	movs	r3, #0
 801dfec:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801dfee:	2300      	movs	r3, #0
 801dff0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801dff2:	2300      	movs	r3, #0
 801dff4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801dff6:	4b28      	ldr	r3, [pc, #160]	; (801e098 <ip_reass_remove_oldest_datagram+0xc0>)
 801dff8:	681b      	ldr	r3, [r3, #0]
 801dffa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801dffc:	e030      	b.n	801e060 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801dffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e000:	695a      	ldr	r2, [r3, #20]
 801e002:	687b      	ldr	r3, [r7, #4]
 801e004:	68db      	ldr	r3, [r3, #12]
 801e006:	429a      	cmp	r2, r3
 801e008:	d10c      	bne.n	801e024 <ip_reass_remove_oldest_datagram+0x4c>
 801e00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e00c:	699a      	ldr	r2, [r3, #24]
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	691b      	ldr	r3, [r3, #16]
 801e012:	429a      	cmp	r2, r3
 801e014:	d106      	bne.n	801e024 <ip_reass_remove_oldest_datagram+0x4c>
 801e016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e018:	899a      	ldrh	r2, [r3, #12]
 801e01a:	687b      	ldr	r3, [r7, #4]
 801e01c:	889b      	ldrh	r3, [r3, #4]
 801e01e:	b29b      	uxth	r3, r3
 801e020:	429a      	cmp	r2, r3
 801e022:	d014      	beq.n	801e04e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801e024:	693b      	ldr	r3, [r7, #16]
 801e026:	3301      	adds	r3, #1
 801e028:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801e02a:	6a3b      	ldr	r3, [r7, #32]
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d104      	bne.n	801e03a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801e030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e032:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e034:	69fb      	ldr	r3, [r7, #28]
 801e036:	61bb      	str	r3, [r7, #24]
 801e038:	e009      	b.n	801e04e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801e03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e03c:	7fda      	ldrb	r2, [r3, #31]
 801e03e:	6a3b      	ldr	r3, [r7, #32]
 801e040:	7fdb      	ldrb	r3, [r3, #31]
 801e042:	429a      	cmp	r2, r3
 801e044:	d803      	bhi.n	801e04e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801e046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e048:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e04a:	69fb      	ldr	r3, [r7, #28]
 801e04c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801e04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e050:	681b      	ldr	r3, [r3, #0]
 801e052:	2b00      	cmp	r3, #0
 801e054:	d001      	beq.n	801e05a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801e056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e058:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801e05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e05c:	681b      	ldr	r3, [r3, #0]
 801e05e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801e060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e062:	2b00      	cmp	r3, #0
 801e064:	d1cb      	bne.n	801dffe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801e066:	6a3b      	ldr	r3, [r7, #32]
 801e068:	2b00      	cmp	r3, #0
 801e06a:	d008      	beq.n	801e07e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801e06c:	69b9      	ldr	r1, [r7, #24]
 801e06e:	6a38      	ldr	r0, [r7, #32]
 801e070:	f7ff ff0e 	bl	801de90 <ip_reass_free_complete_datagram>
 801e074:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801e076:	697a      	ldr	r2, [r7, #20]
 801e078:	68fb      	ldr	r3, [r7, #12]
 801e07a:	4413      	add	r3, r2
 801e07c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801e07e:	697a      	ldr	r2, [r7, #20]
 801e080:	683b      	ldr	r3, [r7, #0]
 801e082:	429a      	cmp	r2, r3
 801e084:	da02      	bge.n	801e08c <ip_reass_remove_oldest_datagram+0xb4>
 801e086:	693b      	ldr	r3, [r7, #16]
 801e088:	2b01      	cmp	r3, #1
 801e08a:	dcac      	bgt.n	801dfe6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801e08c:	697b      	ldr	r3, [r7, #20]
}
 801e08e:	4618      	mov	r0, r3
 801e090:	3728      	adds	r7, #40	; 0x28
 801e092:	46bd      	mov	sp, r7
 801e094:	bd80      	pop	{r7, pc}
 801e096:	bf00      	nop
 801e098:	2000c930 	.word	0x2000c930

0801e09c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801e09c:	b580      	push	{r7, lr}
 801e09e:	b084      	sub	sp, #16
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	6078      	str	r0, [r7, #4]
 801e0a4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e0a6:	2004      	movs	r0, #4
 801e0a8:	f7f6 fde8 	bl	8014c7c <memp_malloc>
 801e0ac:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801e0ae:	68fb      	ldr	r3, [r7, #12]
 801e0b0:	2b00      	cmp	r3, #0
 801e0b2:	d110      	bne.n	801e0d6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801e0b4:	6839      	ldr	r1, [r7, #0]
 801e0b6:	6878      	ldr	r0, [r7, #4]
 801e0b8:	f7ff ff8e 	bl	801dfd8 <ip_reass_remove_oldest_datagram>
 801e0bc:	4602      	mov	r2, r0
 801e0be:	683b      	ldr	r3, [r7, #0]
 801e0c0:	4293      	cmp	r3, r2
 801e0c2:	dc03      	bgt.n	801e0cc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e0c4:	2004      	movs	r0, #4
 801e0c6:	f7f6 fdd9 	bl	8014c7c <memp_malloc>
 801e0ca:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801e0cc:	68fb      	ldr	r3, [r7, #12]
 801e0ce:	2b00      	cmp	r3, #0
 801e0d0:	d101      	bne.n	801e0d6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801e0d2:	2300      	movs	r3, #0
 801e0d4:	e016      	b.n	801e104 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801e0d6:	2220      	movs	r2, #32
 801e0d8:	2100      	movs	r1, #0
 801e0da:	68f8      	ldr	r0, [r7, #12]
 801e0dc:	f000 ff2e 	bl	801ef3c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801e0e0:	68fb      	ldr	r3, [r7, #12]
 801e0e2:	220f      	movs	r2, #15
 801e0e4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801e0e6:	4b09      	ldr	r3, [pc, #36]	; (801e10c <ip_reass_enqueue_new_datagram+0x70>)
 801e0e8:	681a      	ldr	r2, [r3, #0]
 801e0ea:	68fb      	ldr	r3, [r7, #12]
 801e0ec:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801e0ee:	4a07      	ldr	r2, [pc, #28]	; (801e10c <ip_reass_enqueue_new_datagram+0x70>)
 801e0f0:	68fb      	ldr	r3, [r7, #12]
 801e0f2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801e0f4:	68fb      	ldr	r3, [r7, #12]
 801e0f6:	3308      	adds	r3, #8
 801e0f8:	2214      	movs	r2, #20
 801e0fa:	6879      	ldr	r1, [r7, #4]
 801e0fc:	4618      	mov	r0, r3
 801e0fe:	f000 fef5 	bl	801eeec <memcpy>
  return ipr;
 801e102:	68fb      	ldr	r3, [r7, #12]
}
 801e104:	4618      	mov	r0, r3
 801e106:	3710      	adds	r7, #16
 801e108:	46bd      	mov	sp, r7
 801e10a:	bd80      	pop	{r7, pc}
 801e10c:	2000c930 	.word	0x2000c930

0801e110 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e110:	b580      	push	{r7, lr}
 801e112:	b082      	sub	sp, #8
 801e114:	af00      	add	r7, sp, #0
 801e116:	6078      	str	r0, [r7, #4]
 801e118:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801e11a:	4b10      	ldr	r3, [pc, #64]	; (801e15c <ip_reass_dequeue_datagram+0x4c>)
 801e11c:	681b      	ldr	r3, [r3, #0]
 801e11e:	687a      	ldr	r2, [r7, #4]
 801e120:	429a      	cmp	r2, r3
 801e122:	d104      	bne.n	801e12e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	681b      	ldr	r3, [r3, #0]
 801e128:	4a0c      	ldr	r2, [pc, #48]	; (801e15c <ip_reass_dequeue_datagram+0x4c>)
 801e12a:	6013      	str	r3, [r2, #0]
 801e12c:	e00d      	b.n	801e14a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e12e:	683b      	ldr	r3, [r7, #0]
 801e130:	2b00      	cmp	r3, #0
 801e132:	d106      	bne.n	801e142 <ip_reass_dequeue_datagram+0x32>
 801e134:	4b0a      	ldr	r3, [pc, #40]	; (801e160 <ip_reass_dequeue_datagram+0x50>)
 801e136:	f240 1245 	movw	r2, #325	; 0x145
 801e13a:	490a      	ldr	r1, [pc, #40]	; (801e164 <ip_reass_dequeue_datagram+0x54>)
 801e13c:	480a      	ldr	r0, [pc, #40]	; (801e168 <ip_reass_dequeue_datagram+0x58>)
 801e13e:	f000 ff05 	bl	801ef4c <iprintf>
    prev->next = ipr->next;
 801e142:	687b      	ldr	r3, [r7, #4]
 801e144:	681a      	ldr	r2, [r3, #0]
 801e146:	683b      	ldr	r3, [r7, #0]
 801e148:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801e14a:	6879      	ldr	r1, [r7, #4]
 801e14c:	2004      	movs	r0, #4
 801e14e:	f7f6 fde7 	bl	8014d20 <memp_free>
}
 801e152:	bf00      	nop
 801e154:	3708      	adds	r7, #8
 801e156:	46bd      	mov	sp, r7
 801e158:	bd80      	pop	{r7, pc}
 801e15a:	bf00      	nop
 801e15c:	2000c930 	.word	0x2000c930
 801e160:	08023b84 	.word	0x08023b84
 801e164:	08023c4c 	.word	0x08023c4c
 801e168:	08023bcc 	.word	0x08023bcc

0801e16c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801e16c:	b580      	push	{r7, lr}
 801e16e:	b08c      	sub	sp, #48	; 0x30
 801e170:	af00      	add	r7, sp, #0
 801e172:	60f8      	str	r0, [r7, #12]
 801e174:	60b9      	str	r1, [r7, #8]
 801e176:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801e178:	2300      	movs	r3, #0
 801e17a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801e17c:	2301      	movs	r3, #1
 801e17e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801e180:	68bb      	ldr	r3, [r7, #8]
 801e182:	685b      	ldr	r3, [r3, #4]
 801e184:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e186:	69fb      	ldr	r3, [r7, #28]
 801e188:	885b      	ldrh	r3, [r3, #2]
 801e18a:	b29b      	uxth	r3, r3
 801e18c:	4618      	mov	r0, r3
 801e18e:	f7f6 f889 	bl	80142a4 <lwip_htons>
 801e192:	4603      	mov	r3, r0
 801e194:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801e196:	69fb      	ldr	r3, [r7, #28]
 801e198:	781b      	ldrb	r3, [r3, #0]
 801e19a:	f003 030f 	and.w	r3, r3, #15
 801e19e:	b2db      	uxtb	r3, r3
 801e1a0:	009b      	lsls	r3, r3, #2
 801e1a2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801e1a4:	7e7b      	ldrb	r3, [r7, #25]
 801e1a6:	b29b      	uxth	r3, r3
 801e1a8:	8b7a      	ldrh	r2, [r7, #26]
 801e1aa:	429a      	cmp	r2, r3
 801e1ac:	d202      	bcs.n	801e1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e1ae:	f04f 33ff 	mov.w	r3, #4294967295
 801e1b2:	e135      	b.n	801e420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801e1b4:	7e7b      	ldrb	r3, [r7, #25]
 801e1b6:	b29b      	uxth	r3, r3
 801e1b8:	8b7a      	ldrh	r2, [r7, #26]
 801e1ba:	1ad3      	subs	r3, r2, r3
 801e1bc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e1be:	69fb      	ldr	r3, [r7, #28]
 801e1c0:	88db      	ldrh	r3, [r3, #6]
 801e1c2:	b29b      	uxth	r3, r3
 801e1c4:	4618      	mov	r0, r3
 801e1c6:	f7f6 f86d 	bl	80142a4 <lwip_htons>
 801e1ca:	4603      	mov	r3, r0
 801e1cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e1d0:	b29b      	uxth	r3, r3
 801e1d2:	00db      	lsls	r3, r3, #3
 801e1d4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801e1d6:	68bb      	ldr	r3, [r7, #8]
 801e1d8:	685b      	ldr	r3, [r3, #4]
 801e1da:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801e1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e1de:	2200      	movs	r2, #0
 801e1e0:	701a      	strb	r2, [r3, #0]
 801e1e2:	2200      	movs	r2, #0
 801e1e4:	705a      	strb	r2, [r3, #1]
 801e1e6:	2200      	movs	r2, #0
 801e1e8:	709a      	strb	r2, [r3, #2]
 801e1ea:	2200      	movs	r2, #0
 801e1ec:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801e1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e1f0:	8afa      	ldrh	r2, [r7, #22]
 801e1f2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801e1f4:	8afa      	ldrh	r2, [r7, #22]
 801e1f6:	8b7b      	ldrh	r3, [r7, #26]
 801e1f8:	4413      	add	r3, r2
 801e1fa:	b29a      	uxth	r2, r3
 801e1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e1fe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801e200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e202:	88db      	ldrh	r3, [r3, #6]
 801e204:	b29b      	uxth	r3, r3
 801e206:	8afa      	ldrh	r2, [r7, #22]
 801e208:	429a      	cmp	r2, r3
 801e20a:	d902      	bls.n	801e212 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e20c:	f04f 33ff 	mov.w	r3, #4294967295
 801e210:	e106      	b.n	801e420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801e212:	68fb      	ldr	r3, [r7, #12]
 801e214:	685b      	ldr	r3, [r3, #4]
 801e216:	627b      	str	r3, [r7, #36]	; 0x24
 801e218:	e068      	b.n	801e2ec <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801e21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e21c:	685b      	ldr	r3, [r3, #4]
 801e21e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801e220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e222:	889b      	ldrh	r3, [r3, #4]
 801e224:	b29a      	uxth	r2, r3
 801e226:	693b      	ldr	r3, [r7, #16]
 801e228:	889b      	ldrh	r3, [r3, #4]
 801e22a:	b29b      	uxth	r3, r3
 801e22c:	429a      	cmp	r2, r3
 801e22e:	d235      	bcs.n	801e29c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801e230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e234:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801e236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e238:	2b00      	cmp	r3, #0
 801e23a:	d020      	beq.n	801e27e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801e23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e23e:	889b      	ldrh	r3, [r3, #4]
 801e240:	b29a      	uxth	r2, r3
 801e242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e244:	88db      	ldrh	r3, [r3, #6]
 801e246:	b29b      	uxth	r3, r3
 801e248:	429a      	cmp	r2, r3
 801e24a:	d307      	bcc.n	801e25c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801e24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e24e:	88db      	ldrh	r3, [r3, #6]
 801e250:	b29a      	uxth	r2, r3
 801e252:	693b      	ldr	r3, [r7, #16]
 801e254:	889b      	ldrh	r3, [r3, #4]
 801e256:	b29b      	uxth	r3, r3
 801e258:	429a      	cmp	r2, r3
 801e25a:	d902      	bls.n	801e262 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e25c:	f04f 33ff 	mov.w	r3, #4294967295
 801e260:	e0de      	b.n	801e420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801e262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e264:	68ba      	ldr	r2, [r7, #8]
 801e266:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801e268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e26a:	88db      	ldrh	r3, [r3, #6]
 801e26c:	b29a      	uxth	r2, r3
 801e26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e270:	889b      	ldrh	r3, [r3, #4]
 801e272:	b29b      	uxth	r3, r3
 801e274:	429a      	cmp	r2, r3
 801e276:	d03d      	beq.n	801e2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e278:	2300      	movs	r3, #0
 801e27a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801e27c:	e03a      	b.n	801e2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801e27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e280:	88db      	ldrh	r3, [r3, #6]
 801e282:	b29a      	uxth	r2, r3
 801e284:	693b      	ldr	r3, [r7, #16]
 801e286:	889b      	ldrh	r3, [r3, #4]
 801e288:	b29b      	uxth	r3, r3
 801e28a:	429a      	cmp	r2, r3
 801e28c:	d902      	bls.n	801e294 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e28e:	f04f 33ff 	mov.w	r3, #4294967295
 801e292:	e0c5      	b.n	801e420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801e294:	68fb      	ldr	r3, [r7, #12]
 801e296:	68ba      	ldr	r2, [r7, #8]
 801e298:	605a      	str	r2, [r3, #4]
      break;
 801e29a:	e02b      	b.n	801e2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801e29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e29e:	889b      	ldrh	r3, [r3, #4]
 801e2a0:	b29a      	uxth	r2, r3
 801e2a2:	693b      	ldr	r3, [r7, #16]
 801e2a4:	889b      	ldrh	r3, [r3, #4]
 801e2a6:	b29b      	uxth	r3, r3
 801e2a8:	429a      	cmp	r2, r3
 801e2aa:	d102      	bne.n	801e2b2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e2ac:	f04f 33ff 	mov.w	r3, #4294967295
 801e2b0:	e0b6      	b.n	801e420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801e2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2b4:	889b      	ldrh	r3, [r3, #4]
 801e2b6:	b29a      	uxth	r2, r3
 801e2b8:	693b      	ldr	r3, [r7, #16]
 801e2ba:	88db      	ldrh	r3, [r3, #6]
 801e2bc:	b29b      	uxth	r3, r3
 801e2be:	429a      	cmp	r2, r3
 801e2c0:	d202      	bcs.n	801e2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e2c2:	f04f 33ff 	mov.w	r3, #4294967295
 801e2c6:	e0ab      	b.n	801e420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801e2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	d009      	beq.n	801e2e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2d0:	88db      	ldrh	r3, [r3, #6]
 801e2d2:	b29a      	uxth	r2, r3
 801e2d4:	693b      	ldr	r3, [r7, #16]
 801e2d6:	889b      	ldrh	r3, [r3, #4]
 801e2d8:	b29b      	uxth	r3, r3
 801e2da:	429a      	cmp	r2, r3
 801e2dc:	d001      	beq.n	801e2e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e2de:	2300      	movs	r3, #0
 801e2e0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801e2e2:	693b      	ldr	r3, [r7, #16]
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801e2e8:	693b      	ldr	r3, [r7, #16]
 801e2ea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801e2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	d193      	bne.n	801e21a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801e2f2:	e000      	b.n	801e2f6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801e2f4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801e2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	d12d      	bne.n	801e358 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801e2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d01c      	beq.n	801e33c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801e302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e304:	88db      	ldrh	r3, [r3, #6]
 801e306:	b29a      	uxth	r2, r3
 801e308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e30a:	889b      	ldrh	r3, [r3, #4]
 801e30c:	b29b      	uxth	r3, r3
 801e30e:	429a      	cmp	r2, r3
 801e310:	d906      	bls.n	801e320 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801e312:	4b45      	ldr	r3, [pc, #276]	; (801e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e314:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801e318:	4944      	ldr	r1, [pc, #272]	; (801e42c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801e31a:	4845      	ldr	r0, [pc, #276]	; (801e430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e31c:	f000 fe16 	bl	801ef4c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801e320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e322:	68ba      	ldr	r2, [r7, #8]
 801e324:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801e326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e328:	88db      	ldrh	r3, [r3, #6]
 801e32a:	b29a      	uxth	r2, r3
 801e32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e32e:	889b      	ldrh	r3, [r3, #4]
 801e330:	b29b      	uxth	r3, r3
 801e332:	429a      	cmp	r2, r3
 801e334:	d010      	beq.n	801e358 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801e336:	2300      	movs	r3, #0
 801e338:	623b      	str	r3, [r7, #32]
 801e33a:	e00d      	b.n	801e358 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801e33c:	68fb      	ldr	r3, [r7, #12]
 801e33e:	685b      	ldr	r3, [r3, #4]
 801e340:	2b00      	cmp	r3, #0
 801e342:	d006      	beq.n	801e352 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801e344:	4b38      	ldr	r3, [pc, #224]	; (801e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e346:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801e34a:	493a      	ldr	r1, [pc, #232]	; (801e434 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801e34c:	4838      	ldr	r0, [pc, #224]	; (801e430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e34e:	f000 fdfd 	bl	801ef4c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801e352:	68fb      	ldr	r3, [r7, #12]
 801e354:	68ba      	ldr	r2, [r7, #8]
 801e356:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d105      	bne.n	801e36a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801e35e:	68fb      	ldr	r3, [r7, #12]
 801e360:	7f9b      	ldrb	r3, [r3, #30]
 801e362:	f003 0301 	and.w	r3, r3, #1
 801e366:	2b00      	cmp	r3, #0
 801e368:	d059      	beq.n	801e41e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801e36a:	6a3b      	ldr	r3, [r7, #32]
 801e36c:	2b00      	cmp	r3, #0
 801e36e:	d04f      	beq.n	801e410 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801e370:	68fb      	ldr	r3, [r7, #12]
 801e372:	685b      	ldr	r3, [r3, #4]
 801e374:	2b00      	cmp	r3, #0
 801e376:	d006      	beq.n	801e386 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801e378:	68fb      	ldr	r3, [r7, #12]
 801e37a:	685b      	ldr	r3, [r3, #4]
 801e37c:	685b      	ldr	r3, [r3, #4]
 801e37e:	889b      	ldrh	r3, [r3, #4]
 801e380:	b29b      	uxth	r3, r3
 801e382:	2b00      	cmp	r3, #0
 801e384:	d002      	beq.n	801e38c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801e386:	2300      	movs	r3, #0
 801e388:	623b      	str	r3, [r7, #32]
 801e38a:	e041      	b.n	801e410 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801e38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e38e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801e390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e392:	681b      	ldr	r3, [r3, #0]
 801e394:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e396:	e012      	b.n	801e3be <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e39a:	685b      	ldr	r3, [r3, #4]
 801e39c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801e39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3a0:	88db      	ldrh	r3, [r3, #6]
 801e3a2:	b29a      	uxth	r2, r3
 801e3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e3a6:	889b      	ldrh	r3, [r3, #4]
 801e3a8:	b29b      	uxth	r3, r3
 801e3aa:	429a      	cmp	r2, r3
 801e3ac:	d002      	beq.n	801e3b4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801e3ae:	2300      	movs	r3, #0
 801e3b0:	623b      	str	r3, [r7, #32]
            break;
 801e3b2:	e007      	b.n	801e3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801e3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e3b6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801e3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3c0:	2b00      	cmp	r3, #0
 801e3c2:	d1e9      	bne.n	801e398 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801e3c4:	6a3b      	ldr	r3, [r7, #32]
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	d022      	beq.n	801e410 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801e3ca:	68fb      	ldr	r3, [r7, #12]
 801e3cc:	685b      	ldr	r3, [r3, #4]
 801e3ce:	2b00      	cmp	r3, #0
 801e3d0:	d106      	bne.n	801e3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801e3d2:	4b15      	ldr	r3, [pc, #84]	; (801e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e3d4:	f240 12df 	movw	r2, #479	; 0x1df
 801e3d8:	4917      	ldr	r1, [pc, #92]	; (801e438 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e3da:	4815      	ldr	r0, [pc, #84]	; (801e430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e3dc:	f000 fdb6 	bl	801ef4c <iprintf>
          LWIP_ASSERT("sanity check",
 801e3e0:	68fb      	ldr	r3, [r7, #12]
 801e3e2:	685b      	ldr	r3, [r3, #4]
 801e3e4:	685b      	ldr	r3, [r3, #4]
 801e3e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e3e8:	429a      	cmp	r2, r3
 801e3ea:	d106      	bne.n	801e3fa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801e3ec:	4b0e      	ldr	r3, [pc, #56]	; (801e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e3ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801e3f2:	4911      	ldr	r1, [pc, #68]	; (801e438 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e3f4:	480e      	ldr	r0, [pc, #56]	; (801e430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e3f6:	f000 fda9 	bl	801ef4c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801e3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e3fc:	681b      	ldr	r3, [r3, #0]
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	d006      	beq.n	801e410 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801e402:	4b09      	ldr	r3, [pc, #36]	; (801e428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e404:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801e408:	490c      	ldr	r1, [pc, #48]	; (801e43c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801e40a:	4809      	ldr	r0, [pc, #36]	; (801e430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e40c:	f000 fd9e 	bl	801ef4c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801e410:	6a3b      	ldr	r3, [r7, #32]
 801e412:	2b00      	cmp	r3, #0
 801e414:	bf14      	ite	ne
 801e416:	2301      	movne	r3, #1
 801e418:	2300      	moveq	r3, #0
 801e41a:	b2db      	uxtb	r3, r3
 801e41c:	e000      	b.n	801e420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801e41e:	2300      	movs	r3, #0
}
 801e420:	4618      	mov	r0, r3
 801e422:	3730      	adds	r7, #48	; 0x30
 801e424:	46bd      	mov	sp, r7
 801e426:	bd80      	pop	{r7, pc}
 801e428:	08023b84 	.word	0x08023b84
 801e42c:	08023c68 	.word	0x08023c68
 801e430:	08023bcc 	.word	0x08023bcc
 801e434:	08023c88 	.word	0x08023c88
 801e438:	08023cc0 	.word	0x08023cc0
 801e43c:	08023cd0 	.word	0x08023cd0

0801e440 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801e440:	b580      	push	{r7, lr}
 801e442:	b08e      	sub	sp, #56	; 0x38
 801e444:	af00      	add	r7, sp, #0
 801e446:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	685b      	ldr	r3, [r3, #4]
 801e44c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e450:	781b      	ldrb	r3, [r3, #0]
 801e452:	f003 030f 	and.w	r3, r3, #15
 801e456:	b2db      	uxtb	r3, r3
 801e458:	009b      	lsls	r3, r3, #2
 801e45a:	b2db      	uxtb	r3, r3
 801e45c:	2b14      	cmp	r3, #20
 801e45e:	f040 8167 	bne.w	801e730 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801e462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e464:	88db      	ldrh	r3, [r3, #6]
 801e466:	b29b      	uxth	r3, r3
 801e468:	4618      	mov	r0, r3
 801e46a:	f7f5 ff1b 	bl	80142a4 <lwip_htons>
 801e46e:	4603      	mov	r3, r0
 801e470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e474:	b29b      	uxth	r3, r3
 801e476:	00db      	lsls	r3, r3, #3
 801e478:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e47c:	885b      	ldrh	r3, [r3, #2]
 801e47e:	b29b      	uxth	r3, r3
 801e480:	4618      	mov	r0, r3
 801e482:	f7f5 ff0f 	bl	80142a4 <lwip_htons>
 801e486:	4603      	mov	r3, r0
 801e488:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801e48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e48c:	781b      	ldrb	r3, [r3, #0]
 801e48e:	f003 030f 	and.w	r3, r3, #15
 801e492:	b2db      	uxtb	r3, r3
 801e494:	009b      	lsls	r3, r3, #2
 801e496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801e49a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e49e:	b29b      	uxth	r3, r3
 801e4a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e4a2:	429a      	cmp	r2, r3
 801e4a4:	f0c0 8146 	bcc.w	801e734 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801e4a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e4ac:	b29b      	uxth	r3, r3
 801e4ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e4b0:	1ad3      	subs	r3, r2, r3
 801e4b2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801e4b4:	6878      	ldr	r0, [r7, #4]
 801e4b6:	f7f7 fb77 	bl	8015ba8 <pbuf_clen>
 801e4ba:	4603      	mov	r3, r0
 801e4bc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e4be:	4b9f      	ldr	r3, [pc, #636]	; (801e73c <ip4_reass+0x2fc>)
 801e4c0:	881b      	ldrh	r3, [r3, #0]
 801e4c2:	461a      	mov	r2, r3
 801e4c4:	8c3b      	ldrh	r3, [r7, #32]
 801e4c6:	4413      	add	r3, r2
 801e4c8:	2b0a      	cmp	r3, #10
 801e4ca:	dd10      	ble.n	801e4ee <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e4cc:	8c3b      	ldrh	r3, [r7, #32]
 801e4ce:	4619      	mov	r1, r3
 801e4d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e4d2:	f7ff fd81 	bl	801dfd8 <ip_reass_remove_oldest_datagram>
 801e4d6:	4603      	mov	r3, r0
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	f000 812d 	beq.w	801e738 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801e4de:	4b97      	ldr	r3, [pc, #604]	; (801e73c <ip4_reass+0x2fc>)
 801e4e0:	881b      	ldrh	r3, [r3, #0]
 801e4e2:	461a      	mov	r2, r3
 801e4e4:	8c3b      	ldrh	r3, [r7, #32]
 801e4e6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e4e8:	2b0a      	cmp	r3, #10
 801e4ea:	f300 8125 	bgt.w	801e738 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e4ee:	4b94      	ldr	r3, [pc, #592]	; (801e740 <ip4_reass+0x300>)
 801e4f0:	681b      	ldr	r3, [r3, #0]
 801e4f2:	633b      	str	r3, [r7, #48]	; 0x30
 801e4f4:	e015      	b.n	801e522 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e4f8:	695a      	ldr	r2, [r3, #20]
 801e4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4fc:	68db      	ldr	r3, [r3, #12]
 801e4fe:	429a      	cmp	r2, r3
 801e500:	d10c      	bne.n	801e51c <ip4_reass+0xdc>
 801e502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e504:	699a      	ldr	r2, [r3, #24]
 801e506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e508:	691b      	ldr	r3, [r3, #16]
 801e50a:	429a      	cmp	r2, r3
 801e50c:	d106      	bne.n	801e51c <ip4_reass+0xdc>
 801e50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e510:	899a      	ldrh	r2, [r3, #12]
 801e512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e514:	889b      	ldrh	r3, [r3, #4]
 801e516:	b29b      	uxth	r3, r3
 801e518:	429a      	cmp	r2, r3
 801e51a:	d006      	beq.n	801e52a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e51e:	681b      	ldr	r3, [r3, #0]
 801e520:	633b      	str	r3, [r7, #48]	; 0x30
 801e522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e524:	2b00      	cmp	r3, #0
 801e526:	d1e6      	bne.n	801e4f6 <ip4_reass+0xb6>
 801e528:	e000      	b.n	801e52c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801e52a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801e52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e52e:	2b00      	cmp	r3, #0
 801e530:	d109      	bne.n	801e546 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801e532:	8c3b      	ldrh	r3, [r7, #32]
 801e534:	4619      	mov	r1, r3
 801e536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e538:	f7ff fdb0 	bl	801e09c <ip_reass_enqueue_new_datagram>
 801e53c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801e53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e540:	2b00      	cmp	r3, #0
 801e542:	d11c      	bne.n	801e57e <ip4_reass+0x13e>
      goto nullreturn;
 801e544:	e109      	b.n	801e75a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e548:	88db      	ldrh	r3, [r3, #6]
 801e54a:	b29b      	uxth	r3, r3
 801e54c:	4618      	mov	r0, r3
 801e54e:	f7f5 fea9 	bl	80142a4 <lwip_htons>
 801e552:	4603      	mov	r3, r0
 801e554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e558:	2b00      	cmp	r3, #0
 801e55a:	d110      	bne.n	801e57e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801e55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e55e:	89db      	ldrh	r3, [r3, #14]
 801e560:	4618      	mov	r0, r3
 801e562:	f7f5 fe9f 	bl	80142a4 <lwip_htons>
 801e566:	4603      	mov	r3, r0
 801e568:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e56c:	2b00      	cmp	r3, #0
 801e56e:	d006      	beq.n	801e57e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801e570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e572:	3308      	adds	r3, #8
 801e574:	2214      	movs	r2, #20
 801e576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e578:	4618      	mov	r0, r3
 801e57a:	f000 fcb7 	bl	801eeec <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801e57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e580:	88db      	ldrh	r3, [r3, #6]
 801e582:	b29b      	uxth	r3, r3
 801e584:	f003 0320 	and.w	r3, r3, #32
 801e588:	2b00      	cmp	r3, #0
 801e58a:	bf0c      	ite	eq
 801e58c:	2301      	moveq	r3, #1
 801e58e:	2300      	movne	r3, #0
 801e590:	b2db      	uxtb	r3, r3
 801e592:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801e594:	69fb      	ldr	r3, [r7, #28]
 801e596:	2b00      	cmp	r3, #0
 801e598:	d00e      	beq.n	801e5b8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801e59a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801e59c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e59e:	4413      	add	r3, r2
 801e5a0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801e5a2:	8b7a      	ldrh	r2, [r7, #26]
 801e5a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e5a6:	429a      	cmp	r2, r3
 801e5a8:	f0c0 80a0 	bcc.w	801e6ec <ip4_reass+0x2ac>
 801e5ac:	8b7b      	ldrh	r3, [r7, #26]
 801e5ae:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801e5b2:	4293      	cmp	r3, r2
 801e5b4:	f200 809a 	bhi.w	801e6ec <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801e5b8:	69fa      	ldr	r2, [r7, #28]
 801e5ba:	6879      	ldr	r1, [r7, #4]
 801e5bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e5be:	f7ff fdd5 	bl	801e16c <ip_reass_chain_frag_into_datagram_and_validate>
 801e5c2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801e5c4:	697b      	ldr	r3, [r7, #20]
 801e5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e5ca:	f000 8091 	beq.w	801e6f0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e5ce:	4b5b      	ldr	r3, [pc, #364]	; (801e73c <ip4_reass+0x2fc>)
 801e5d0:	881a      	ldrh	r2, [r3, #0]
 801e5d2:	8c3b      	ldrh	r3, [r7, #32]
 801e5d4:	4413      	add	r3, r2
 801e5d6:	b29a      	uxth	r2, r3
 801e5d8:	4b58      	ldr	r3, [pc, #352]	; (801e73c <ip4_reass+0x2fc>)
 801e5da:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801e5dc:	69fb      	ldr	r3, [r7, #28]
 801e5de:	2b00      	cmp	r3, #0
 801e5e0:	d00d      	beq.n	801e5fe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801e5e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801e5e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e5e6:	4413      	add	r3, r2
 801e5e8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801e5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e5ec:	8a7a      	ldrh	r2, [r7, #18]
 801e5ee:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e5f2:	7f9b      	ldrb	r3, [r3, #30]
 801e5f4:	f043 0301 	orr.w	r3, r3, #1
 801e5f8:	b2da      	uxtb	r2, r3
 801e5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e5fc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801e5fe:	697b      	ldr	r3, [r7, #20]
 801e600:	2b01      	cmp	r3, #1
 801e602:	d171      	bne.n	801e6e8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801e604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e606:	8b9b      	ldrh	r3, [r3, #28]
 801e608:	3314      	adds	r3, #20
 801e60a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e60e:	685b      	ldr	r3, [r3, #4]
 801e610:	685b      	ldr	r3, [r3, #4]
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801e616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e618:	685b      	ldr	r3, [r3, #4]
 801e61a:	685b      	ldr	r3, [r3, #4]
 801e61c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e620:	3308      	adds	r3, #8
 801e622:	2214      	movs	r2, #20
 801e624:	4619      	mov	r1, r3
 801e626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e628:	f000 fc60 	bl	801eeec <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e62c:	8a3b      	ldrh	r3, [r7, #16]
 801e62e:	4618      	mov	r0, r3
 801e630:	f7f5 fe38 	bl	80142a4 <lwip_htons>
 801e634:	4603      	mov	r3, r0
 801e636:	461a      	mov	r2, r3
 801e638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e63a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801e63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e63e:	2200      	movs	r2, #0
 801e640:	719a      	strb	r2, [r3, #6]
 801e642:	2200      	movs	r2, #0
 801e644:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801e646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e648:	2200      	movs	r2, #0
 801e64a:	729a      	strb	r2, [r3, #10]
 801e64c:	2200      	movs	r2, #0
 801e64e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801e650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e652:	685b      	ldr	r3, [r3, #4]
 801e654:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801e656:	e00d      	b.n	801e674 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801e658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e65a:	685b      	ldr	r3, [r3, #4]
 801e65c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801e65e:	2114      	movs	r1, #20
 801e660:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801e662:	f7f7 f97b 	bl	801595c <pbuf_remove_header>
      pbuf_cat(p, r);
 801e666:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e668:	6878      	ldr	r0, [r7, #4]
 801e66a:	f7f7 fadd 	bl	8015c28 <pbuf_cat>
      r = iprh->next_pbuf;
 801e66e:	68fb      	ldr	r3, [r7, #12]
 801e670:	681b      	ldr	r3, [r3, #0]
 801e672:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801e674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e676:	2b00      	cmp	r3, #0
 801e678:	d1ee      	bne.n	801e658 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801e67a:	4b31      	ldr	r3, [pc, #196]	; (801e740 <ip4_reass+0x300>)
 801e67c:	681b      	ldr	r3, [r3, #0]
 801e67e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e680:	429a      	cmp	r2, r3
 801e682:	d102      	bne.n	801e68a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801e684:	2300      	movs	r3, #0
 801e686:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e688:	e010      	b.n	801e6ac <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e68a:	4b2d      	ldr	r3, [pc, #180]	; (801e740 <ip4_reass+0x300>)
 801e68c:	681b      	ldr	r3, [r3, #0]
 801e68e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e690:	e007      	b.n	801e6a2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801e692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e698:	429a      	cmp	r2, r3
 801e69a:	d006      	beq.n	801e6aa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e69e:	681b      	ldr	r3, [r3, #0]
 801e6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6a4:	2b00      	cmp	r3, #0
 801e6a6:	d1f4      	bne.n	801e692 <ip4_reass+0x252>
 801e6a8:	e000      	b.n	801e6ac <ip4_reass+0x26c>
          break;
 801e6aa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801e6ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e6ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e6b0:	f7ff fd2e 	bl	801e110 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801e6b4:	6878      	ldr	r0, [r7, #4]
 801e6b6:	f7f7 fa77 	bl	8015ba8 <pbuf_clen>
 801e6ba:	4603      	mov	r3, r0
 801e6bc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801e6be:	4b1f      	ldr	r3, [pc, #124]	; (801e73c <ip4_reass+0x2fc>)
 801e6c0:	881b      	ldrh	r3, [r3, #0]
 801e6c2:	8c3a      	ldrh	r2, [r7, #32]
 801e6c4:	429a      	cmp	r2, r3
 801e6c6:	d906      	bls.n	801e6d6 <ip4_reass+0x296>
 801e6c8:	4b1e      	ldr	r3, [pc, #120]	; (801e744 <ip4_reass+0x304>)
 801e6ca:	f240 229b 	movw	r2, #667	; 0x29b
 801e6ce:	491e      	ldr	r1, [pc, #120]	; (801e748 <ip4_reass+0x308>)
 801e6d0:	481e      	ldr	r0, [pc, #120]	; (801e74c <ip4_reass+0x30c>)
 801e6d2:	f000 fc3b 	bl	801ef4c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801e6d6:	4b19      	ldr	r3, [pc, #100]	; (801e73c <ip4_reass+0x2fc>)
 801e6d8:	881a      	ldrh	r2, [r3, #0]
 801e6da:	8c3b      	ldrh	r3, [r7, #32]
 801e6dc:	1ad3      	subs	r3, r2, r3
 801e6de:	b29a      	uxth	r2, r3
 801e6e0:	4b16      	ldr	r3, [pc, #88]	; (801e73c <ip4_reass+0x2fc>)
 801e6e2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	e03c      	b.n	801e762 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801e6e8:	2300      	movs	r3, #0
 801e6ea:	e03a      	b.n	801e762 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801e6ec:	bf00      	nop
 801e6ee:	e000      	b.n	801e6f2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801e6f0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801e6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	d106      	bne.n	801e706 <ip4_reass+0x2c6>
 801e6f8:	4b12      	ldr	r3, [pc, #72]	; (801e744 <ip4_reass+0x304>)
 801e6fa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801e6fe:	4914      	ldr	r1, [pc, #80]	; (801e750 <ip4_reass+0x310>)
 801e700:	4812      	ldr	r0, [pc, #72]	; (801e74c <ip4_reass+0x30c>)
 801e702:	f000 fc23 	bl	801ef4c <iprintf>
  if (ipr->p == NULL) {
 801e706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e708:	685b      	ldr	r3, [r3, #4]
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	d124      	bne.n	801e758 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801e70e:	4b0c      	ldr	r3, [pc, #48]	; (801e740 <ip4_reass+0x300>)
 801e710:	681b      	ldr	r3, [r3, #0]
 801e712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e714:	429a      	cmp	r2, r3
 801e716:	d006      	beq.n	801e726 <ip4_reass+0x2e6>
 801e718:	4b0a      	ldr	r3, [pc, #40]	; (801e744 <ip4_reass+0x304>)
 801e71a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e71e:	490d      	ldr	r1, [pc, #52]	; (801e754 <ip4_reass+0x314>)
 801e720:	480a      	ldr	r0, [pc, #40]	; (801e74c <ip4_reass+0x30c>)
 801e722:	f000 fc13 	bl	801ef4c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801e726:	2100      	movs	r1, #0
 801e728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e72a:	f7ff fcf1 	bl	801e110 <ip_reass_dequeue_datagram>
 801e72e:	e014      	b.n	801e75a <ip4_reass+0x31a>
    goto nullreturn;
 801e730:	bf00      	nop
 801e732:	e012      	b.n	801e75a <ip4_reass+0x31a>
    goto nullreturn;
 801e734:	bf00      	nop
 801e736:	e010      	b.n	801e75a <ip4_reass+0x31a>
      goto nullreturn;
 801e738:	bf00      	nop
 801e73a:	e00e      	b.n	801e75a <ip4_reass+0x31a>
 801e73c:	2000c934 	.word	0x2000c934
 801e740:	2000c930 	.word	0x2000c930
 801e744:	08023b84 	.word	0x08023b84
 801e748:	08023cf4 	.word	0x08023cf4
 801e74c:	08023bcc 	.word	0x08023bcc
 801e750:	08023d10 	.word	0x08023d10
 801e754:	08023d1c 	.word	0x08023d1c
  }

nullreturn:
 801e758:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801e75a:	6878      	ldr	r0, [r7, #4]
 801e75c:	f7f7 f996 	bl	8015a8c <pbuf_free>
  return NULL;
 801e760:	2300      	movs	r3, #0
}
 801e762:	4618      	mov	r0, r3
 801e764:	3738      	adds	r7, #56	; 0x38
 801e766:	46bd      	mov	sp, r7
 801e768:	bd80      	pop	{r7, pc}
 801e76a:	bf00      	nop

0801e76c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801e76c:	b580      	push	{r7, lr}
 801e76e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801e770:	2005      	movs	r0, #5
 801e772:	f7f6 fa83 	bl	8014c7c <memp_malloc>
 801e776:	4603      	mov	r3, r0
}
 801e778:	4618      	mov	r0, r3
 801e77a:	bd80      	pop	{r7, pc}

0801e77c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e77c:	b580      	push	{r7, lr}
 801e77e:	b082      	sub	sp, #8
 801e780:	af00      	add	r7, sp, #0
 801e782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801e784:	687b      	ldr	r3, [r7, #4]
 801e786:	2b00      	cmp	r3, #0
 801e788:	d106      	bne.n	801e798 <ip_frag_free_pbuf_custom_ref+0x1c>
 801e78a:	4b07      	ldr	r3, [pc, #28]	; (801e7a8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e78c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801e790:	4906      	ldr	r1, [pc, #24]	; (801e7ac <ip_frag_free_pbuf_custom_ref+0x30>)
 801e792:	4807      	ldr	r0, [pc, #28]	; (801e7b0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801e794:	f000 fbda 	bl	801ef4c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e798:	6879      	ldr	r1, [r7, #4]
 801e79a:	2005      	movs	r0, #5
 801e79c:	f7f6 fac0 	bl	8014d20 <memp_free>
}
 801e7a0:	bf00      	nop
 801e7a2:	3708      	adds	r7, #8
 801e7a4:	46bd      	mov	sp, r7
 801e7a6:	bd80      	pop	{r7, pc}
 801e7a8:	08023b84 	.word	0x08023b84
 801e7ac:	08023d3c 	.word	0x08023d3c
 801e7b0:	08023bcc 	.word	0x08023bcc

0801e7b4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e7b4:	b580      	push	{r7, lr}
 801e7b6:	b084      	sub	sp, #16
 801e7b8:	af00      	add	r7, sp, #0
 801e7ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801e7bc:	687b      	ldr	r3, [r7, #4]
 801e7be:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e7c0:	68fb      	ldr	r3, [r7, #12]
 801e7c2:	2b00      	cmp	r3, #0
 801e7c4:	d106      	bne.n	801e7d4 <ipfrag_free_pbuf_custom+0x20>
 801e7c6:	4b11      	ldr	r3, [pc, #68]	; (801e80c <ipfrag_free_pbuf_custom+0x58>)
 801e7c8:	f240 22ce 	movw	r2, #718	; 0x2ce
 801e7cc:	4910      	ldr	r1, [pc, #64]	; (801e810 <ipfrag_free_pbuf_custom+0x5c>)
 801e7ce:	4811      	ldr	r0, [pc, #68]	; (801e814 <ipfrag_free_pbuf_custom+0x60>)
 801e7d0:	f000 fbbc 	bl	801ef4c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801e7d4:	68fa      	ldr	r2, [r7, #12]
 801e7d6:	687b      	ldr	r3, [r7, #4]
 801e7d8:	429a      	cmp	r2, r3
 801e7da:	d006      	beq.n	801e7ea <ipfrag_free_pbuf_custom+0x36>
 801e7dc:	4b0b      	ldr	r3, [pc, #44]	; (801e80c <ipfrag_free_pbuf_custom+0x58>)
 801e7de:	f240 22cf 	movw	r2, #719	; 0x2cf
 801e7e2:	490d      	ldr	r1, [pc, #52]	; (801e818 <ipfrag_free_pbuf_custom+0x64>)
 801e7e4:	480b      	ldr	r0, [pc, #44]	; (801e814 <ipfrag_free_pbuf_custom+0x60>)
 801e7e6:	f000 fbb1 	bl	801ef4c <iprintf>
  if (pcr->original != NULL) {
 801e7ea:	68fb      	ldr	r3, [r7, #12]
 801e7ec:	695b      	ldr	r3, [r3, #20]
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d004      	beq.n	801e7fc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801e7f2:	68fb      	ldr	r3, [r7, #12]
 801e7f4:	695b      	ldr	r3, [r3, #20]
 801e7f6:	4618      	mov	r0, r3
 801e7f8:	f7f7 f948 	bl	8015a8c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e7fc:	68f8      	ldr	r0, [r7, #12]
 801e7fe:	f7ff ffbd 	bl	801e77c <ip_frag_free_pbuf_custom_ref>
}
 801e802:	bf00      	nop
 801e804:	3710      	adds	r7, #16
 801e806:	46bd      	mov	sp, r7
 801e808:	bd80      	pop	{r7, pc}
 801e80a:	bf00      	nop
 801e80c:	08023b84 	.word	0x08023b84
 801e810:	08023d48 	.word	0x08023d48
 801e814:	08023bcc 	.word	0x08023bcc
 801e818:	08023d54 	.word	0x08023d54

0801e81c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801e81c:	b580      	push	{r7, lr}
 801e81e:	b094      	sub	sp, #80	; 0x50
 801e820:	af02      	add	r7, sp, #8
 801e822:	60f8      	str	r0, [r7, #12]
 801e824:	60b9      	str	r1, [r7, #8]
 801e826:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801e828:	2300      	movs	r3, #0
 801e82a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e82e:	68bb      	ldr	r3, [r7, #8]
 801e830:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e832:	3b14      	subs	r3, #20
 801e834:	2b00      	cmp	r3, #0
 801e836:	da00      	bge.n	801e83a <ip4_frag+0x1e>
 801e838:	3307      	adds	r3, #7
 801e83a:	10db      	asrs	r3, r3, #3
 801e83c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801e83e:	2314      	movs	r3, #20
 801e840:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801e842:	68fb      	ldr	r3, [r7, #12]
 801e844:	685b      	ldr	r3, [r3, #4]
 801e846:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801e848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e84a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e84e:	781b      	ldrb	r3, [r3, #0]
 801e850:	f003 030f 	and.w	r3, r3, #15
 801e854:	b2db      	uxtb	r3, r3
 801e856:	009b      	lsls	r3, r3, #2
 801e858:	b2db      	uxtb	r3, r3
 801e85a:	2b14      	cmp	r3, #20
 801e85c:	d002      	beq.n	801e864 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801e85e:	f06f 0305 	mvn.w	r3, #5
 801e862:	e110      	b.n	801ea86 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801e864:	68fb      	ldr	r3, [r7, #12]
 801e866:	895b      	ldrh	r3, [r3, #10]
 801e868:	2b13      	cmp	r3, #19
 801e86a:	d809      	bhi.n	801e880 <ip4_frag+0x64>
 801e86c:	4b88      	ldr	r3, [pc, #544]	; (801ea90 <ip4_frag+0x274>)
 801e86e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801e872:	4988      	ldr	r1, [pc, #544]	; (801ea94 <ip4_frag+0x278>)
 801e874:	4888      	ldr	r0, [pc, #544]	; (801ea98 <ip4_frag+0x27c>)
 801e876:	f000 fb69 	bl	801ef4c <iprintf>
 801e87a:	f06f 0305 	mvn.w	r3, #5
 801e87e:	e102      	b.n	801ea86 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801e880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e882:	88db      	ldrh	r3, [r3, #6]
 801e884:	b29b      	uxth	r3, r3
 801e886:	4618      	mov	r0, r3
 801e888:	f7f5 fd0c 	bl	80142a4 <lwip_htons>
 801e88c:	4603      	mov	r3, r0
 801e88e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801e890:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e892:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e896:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801e89a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e89c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801e8a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801e8a2:	68fb      	ldr	r3, [r7, #12]
 801e8a4:	891b      	ldrh	r3, [r3, #8]
 801e8a6:	3b14      	subs	r3, #20
 801e8a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801e8ac:	e0e1      	b.n	801ea72 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801e8ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e8b0:	00db      	lsls	r3, r3, #3
 801e8b2:	b29b      	uxth	r3, r3
 801e8b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e8b8:	4293      	cmp	r3, r2
 801e8ba:	bf28      	it	cs
 801e8bc:	4613      	movcs	r3, r2
 801e8be:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801e8c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e8c4:	2114      	movs	r1, #20
 801e8c6:	200e      	movs	r0, #14
 801e8c8:	f7f6 fdea 	bl	80154a0 <pbuf_alloc>
 801e8cc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801e8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8d0:	2b00      	cmp	r3, #0
 801e8d2:	f000 80d5 	beq.w	801ea80 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801e8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8d8:	895b      	ldrh	r3, [r3, #10]
 801e8da:	2b13      	cmp	r3, #19
 801e8dc:	d806      	bhi.n	801e8ec <ip4_frag+0xd0>
 801e8de:	4b6c      	ldr	r3, [pc, #432]	; (801ea90 <ip4_frag+0x274>)
 801e8e0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801e8e4:	496d      	ldr	r1, [pc, #436]	; (801ea9c <ip4_frag+0x280>)
 801e8e6:	486c      	ldr	r0, [pc, #432]	; (801ea98 <ip4_frag+0x27c>)
 801e8e8:	f000 fb30 	bl	801ef4c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801e8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8ee:	685b      	ldr	r3, [r3, #4]
 801e8f0:	2214      	movs	r2, #20
 801e8f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e8f4:	4618      	mov	r0, r3
 801e8f6:	f000 faf9 	bl	801eeec <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801e8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8fc:	685b      	ldr	r3, [r3, #4]
 801e8fe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801e900:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e902:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801e906:	e064      	b.n	801e9d2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801e908:	68fb      	ldr	r3, [r7, #12]
 801e90a:	895a      	ldrh	r2, [r3, #10]
 801e90c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e90e:	1ad3      	subs	r3, r2, r3
 801e910:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801e912:	68fb      	ldr	r3, [r7, #12]
 801e914:	895b      	ldrh	r3, [r3, #10]
 801e916:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e918:	429a      	cmp	r2, r3
 801e91a:	d906      	bls.n	801e92a <ip4_frag+0x10e>
 801e91c:	4b5c      	ldr	r3, [pc, #368]	; (801ea90 <ip4_frag+0x274>)
 801e91e:	f240 322d 	movw	r2, #813	; 0x32d
 801e922:	495f      	ldr	r1, [pc, #380]	; (801eaa0 <ip4_frag+0x284>)
 801e924:	485c      	ldr	r0, [pc, #368]	; (801ea98 <ip4_frag+0x27c>)
 801e926:	f000 fb11 	bl	801ef4c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801e92a:	8bfa      	ldrh	r2, [r7, #30]
 801e92c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e930:	4293      	cmp	r3, r2
 801e932:	bf28      	it	cs
 801e934:	4613      	movcs	r3, r2
 801e936:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801e93a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e93e:	2b00      	cmp	r3, #0
 801e940:	d105      	bne.n	801e94e <ip4_frag+0x132>
        poff = 0;
 801e942:	2300      	movs	r3, #0
 801e944:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801e946:	68fb      	ldr	r3, [r7, #12]
 801e948:	681b      	ldr	r3, [r3, #0]
 801e94a:	60fb      	str	r3, [r7, #12]
        continue;
 801e94c:	e041      	b.n	801e9d2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801e94e:	f7ff ff0d 	bl	801e76c <ip_frag_alloc_pbuf_custom_ref>
 801e952:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801e954:	69bb      	ldr	r3, [r7, #24]
 801e956:	2b00      	cmp	r3, #0
 801e958:	d103      	bne.n	801e962 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801e95a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e95c:	f7f7 f896 	bl	8015a8c <pbuf_free>
        goto memerr;
 801e960:	e08f      	b.n	801ea82 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e962:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801e964:	68fb      	ldr	r3, [r7, #12]
 801e966:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e968:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e96a:	4413      	add	r3, r2
 801e96c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801e970:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801e974:	9201      	str	r2, [sp, #4]
 801e976:	9300      	str	r3, [sp, #0]
 801e978:	4603      	mov	r3, r0
 801e97a:	2241      	movs	r2, #65	; 0x41
 801e97c:	2000      	movs	r0, #0
 801e97e:	f7f6 feb9 	bl	80156f4 <pbuf_alloced_custom>
 801e982:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801e984:	697b      	ldr	r3, [r7, #20]
 801e986:	2b00      	cmp	r3, #0
 801e988:	d106      	bne.n	801e998 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801e98a:	69b8      	ldr	r0, [r7, #24]
 801e98c:	f7ff fef6 	bl	801e77c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801e990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e992:	f7f7 f87b 	bl	8015a8c <pbuf_free>
        goto memerr;
 801e996:	e074      	b.n	801ea82 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801e998:	68f8      	ldr	r0, [r7, #12]
 801e99a:	f7f7 f91d 	bl	8015bd8 <pbuf_ref>
      pcr->original = p;
 801e99e:	69bb      	ldr	r3, [r7, #24]
 801e9a0:	68fa      	ldr	r2, [r7, #12]
 801e9a2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801e9a4:	69bb      	ldr	r3, [r7, #24]
 801e9a6:	4a3f      	ldr	r2, [pc, #252]	; (801eaa4 <ip4_frag+0x288>)
 801e9a8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801e9aa:	6979      	ldr	r1, [r7, #20]
 801e9ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e9ae:	f7f7 f93b 	bl	8015c28 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801e9b2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801e9b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e9ba:	1ad3      	subs	r3, r2, r3
 801e9bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801e9c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e9c4:	2b00      	cmp	r3, #0
 801e9c6:	d004      	beq.n	801e9d2 <ip4_frag+0x1b6>
        poff = 0;
 801e9c8:	2300      	movs	r3, #0
 801e9ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801e9cc:	68fb      	ldr	r3, [r7, #12]
 801e9ce:	681b      	ldr	r3, [r3, #0]
 801e9d0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801e9d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e9d6:	2b00      	cmp	r3, #0
 801e9d8:	d196      	bne.n	801e908 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801e9da:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e9dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e9e0:	4413      	add	r3, r2
 801e9e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801e9e4:	68bb      	ldr	r3, [r7, #8]
 801e9e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e9e8:	f1a3 0213 	sub.w	r2, r3, #19
 801e9ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e9f0:	429a      	cmp	r2, r3
 801e9f2:	bfcc      	ite	gt
 801e9f4:	2301      	movgt	r3, #1
 801e9f6:	2300      	movle	r3, #0
 801e9f8:	b2db      	uxtb	r3, r3
 801e9fa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801e9fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ea00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ea04:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801ea06:	6a3b      	ldr	r3, [r7, #32]
 801ea08:	2b00      	cmp	r3, #0
 801ea0a:	d002      	beq.n	801ea12 <ip4_frag+0x1f6>
 801ea0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ea0e:	2b00      	cmp	r3, #0
 801ea10:	d003      	beq.n	801ea1a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ea12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ea14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ea18:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ea1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ea1c:	4618      	mov	r0, r3
 801ea1e:	f7f5 fc41 	bl	80142a4 <lwip_htons>
 801ea22:	4603      	mov	r3, r0
 801ea24:	461a      	mov	r2, r3
 801ea26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea28:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ea2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ea2c:	3314      	adds	r3, #20
 801ea2e:	b29b      	uxth	r3, r3
 801ea30:	4618      	mov	r0, r3
 801ea32:	f7f5 fc37 	bl	80142a4 <lwip_htons>
 801ea36:	4603      	mov	r3, r0
 801ea38:	461a      	mov	r2, r3
 801ea3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea3c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ea3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea40:	2200      	movs	r2, #0
 801ea42:	729a      	strb	r2, [r3, #10]
 801ea44:	2200      	movs	r2, #0
 801ea46:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ea48:	68bb      	ldr	r3, [r7, #8]
 801ea4a:	695b      	ldr	r3, [r3, #20]
 801ea4c:	687a      	ldr	r2, [r7, #4]
 801ea4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ea50:	68b8      	ldr	r0, [r7, #8]
 801ea52:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ea54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ea56:	f7f7 f819 	bl	8015a8c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ea5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ea5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ea60:	1ad3      	subs	r3, r2, r3
 801ea62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801ea66:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801ea6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ea6c:	4413      	add	r3, r2
 801ea6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801ea72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ea76:	2b00      	cmp	r3, #0
 801ea78:	f47f af19 	bne.w	801e8ae <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ea7c:	2300      	movs	r3, #0
 801ea7e:	e002      	b.n	801ea86 <ip4_frag+0x26a>
      goto memerr;
 801ea80:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801ea82:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ea86:	4618      	mov	r0, r3
 801ea88:	3748      	adds	r7, #72	; 0x48
 801ea8a:	46bd      	mov	sp, r7
 801ea8c:	bd80      	pop	{r7, pc}
 801ea8e:	bf00      	nop
 801ea90:	08023b84 	.word	0x08023b84
 801ea94:	08023d60 	.word	0x08023d60
 801ea98:	08023bcc 	.word	0x08023bcc
 801ea9c:	08023d7c 	.word	0x08023d7c
 801eaa0:	08023d9c 	.word	0x08023d9c
 801eaa4:	0801e7b5 	.word	0x0801e7b5

0801eaa8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801eaa8:	b580      	push	{r7, lr}
 801eaaa:	b086      	sub	sp, #24
 801eaac:	af00      	add	r7, sp, #0
 801eaae:	6078      	str	r0, [r7, #4]
 801eab0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801eab2:	230e      	movs	r3, #14
 801eab4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801eab6:	687b      	ldr	r3, [r7, #4]
 801eab8:	895b      	ldrh	r3, [r3, #10]
 801eaba:	2b0e      	cmp	r3, #14
 801eabc:	d96e      	bls.n	801eb9c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801eabe:	687b      	ldr	r3, [r7, #4]
 801eac0:	7bdb      	ldrb	r3, [r3, #15]
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	d106      	bne.n	801ead4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801eac6:	683b      	ldr	r3, [r7, #0]
 801eac8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801eacc:	3301      	adds	r3, #1
 801eace:	b2da      	uxtb	r2, r3
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ead4:	687b      	ldr	r3, [r7, #4]
 801ead6:	685b      	ldr	r3, [r3, #4]
 801ead8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801eada:	693b      	ldr	r3, [r7, #16]
 801eadc:	7b1a      	ldrb	r2, [r3, #12]
 801eade:	7b5b      	ldrb	r3, [r3, #13]
 801eae0:	021b      	lsls	r3, r3, #8
 801eae2:	4313      	orrs	r3, r2
 801eae4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801eae6:	693b      	ldr	r3, [r7, #16]
 801eae8:	781b      	ldrb	r3, [r3, #0]
 801eaea:	f003 0301 	and.w	r3, r3, #1
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d023      	beq.n	801eb3a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801eaf2:	693b      	ldr	r3, [r7, #16]
 801eaf4:	781b      	ldrb	r3, [r3, #0]
 801eaf6:	2b01      	cmp	r3, #1
 801eaf8:	d10f      	bne.n	801eb1a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801eafa:	693b      	ldr	r3, [r7, #16]
 801eafc:	785b      	ldrb	r3, [r3, #1]
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	d11b      	bne.n	801eb3a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801eb02:	693b      	ldr	r3, [r7, #16]
 801eb04:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801eb06:	2b5e      	cmp	r3, #94	; 0x5e
 801eb08:	d117      	bne.n	801eb3a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801eb0a:	687b      	ldr	r3, [r7, #4]
 801eb0c:	7b5b      	ldrb	r3, [r3, #13]
 801eb0e:	f043 0310 	orr.w	r3, r3, #16
 801eb12:	b2da      	uxtb	r2, r3
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	735a      	strb	r2, [r3, #13]
 801eb18:	e00f      	b.n	801eb3a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801eb1a:	693b      	ldr	r3, [r7, #16]
 801eb1c:	2206      	movs	r2, #6
 801eb1e:	4928      	ldr	r1, [pc, #160]	; (801ebc0 <ethernet_input+0x118>)
 801eb20:	4618      	mov	r0, r3
 801eb22:	f000 f9d5 	bl	801eed0 <memcmp>
 801eb26:	4603      	mov	r3, r0
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	d106      	bne.n	801eb3a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801eb2c:	687b      	ldr	r3, [r7, #4]
 801eb2e:	7b5b      	ldrb	r3, [r3, #13]
 801eb30:	f043 0308 	orr.w	r3, r3, #8
 801eb34:	b2da      	uxtb	r2, r3
 801eb36:	687b      	ldr	r3, [r7, #4]
 801eb38:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801eb3a:	89fb      	ldrh	r3, [r7, #14]
 801eb3c:	2b08      	cmp	r3, #8
 801eb3e:	d003      	beq.n	801eb48 <ethernet_input+0xa0>
 801eb40:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801eb44:	d014      	beq.n	801eb70 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801eb46:	e032      	b.n	801ebae <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801eb48:	683b      	ldr	r3, [r7, #0]
 801eb4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801eb4e:	f003 0308 	and.w	r3, r3, #8
 801eb52:	2b00      	cmp	r3, #0
 801eb54:	d024      	beq.n	801eba0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801eb56:	8afb      	ldrh	r3, [r7, #22]
 801eb58:	4619      	mov	r1, r3
 801eb5a:	6878      	ldr	r0, [r7, #4]
 801eb5c:	f7f6 fefe 	bl	801595c <pbuf_remove_header>
 801eb60:	4603      	mov	r3, r0
 801eb62:	2b00      	cmp	r3, #0
 801eb64:	d11e      	bne.n	801eba4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801eb66:	6839      	ldr	r1, [r7, #0]
 801eb68:	6878      	ldr	r0, [r7, #4]
 801eb6a:	f7fe ff27 	bl	801d9bc <ip4_input>
      break;
 801eb6e:	e013      	b.n	801eb98 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801eb70:	683b      	ldr	r3, [r7, #0]
 801eb72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801eb76:	f003 0308 	and.w	r3, r3, #8
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	d014      	beq.n	801eba8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801eb7e:	8afb      	ldrh	r3, [r7, #22]
 801eb80:	4619      	mov	r1, r3
 801eb82:	6878      	ldr	r0, [r7, #4]
 801eb84:	f7f6 feea 	bl	801595c <pbuf_remove_header>
 801eb88:	4603      	mov	r3, r0
 801eb8a:	2b00      	cmp	r3, #0
 801eb8c:	d10e      	bne.n	801ebac <ethernet_input+0x104>
        etharp_input(p, netif);
 801eb8e:	6839      	ldr	r1, [r7, #0]
 801eb90:	6878      	ldr	r0, [r7, #4]
 801eb92:	f7fe f8c7 	bl	801cd24 <etharp_input>
      break;
 801eb96:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801eb98:	2300      	movs	r3, #0
 801eb9a:	e00c      	b.n	801ebb6 <ethernet_input+0x10e>
    goto free_and_return;
 801eb9c:	bf00      	nop
 801eb9e:	e006      	b.n	801ebae <ethernet_input+0x106>
        goto free_and_return;
 801eba0:	bf00      	nop
 801eba2:	e004      	b.n	801ebae <ethernet_input+0x106>
        goto free_and_return;
 801eba4:	bf00      	nop
 801eba6:	e002      	b.n	801ebae <ethernet_input+0x106>
        goto free_and_return;
 801eba8:	bf00      	nop
 801ebaa:	e000      	b.n	801ebae <ethernet_input+0x106>
        goto free_and_return;
 801ebac:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801ebae:	6878      	ldr	r0, [r7, #4]
 801ebb0:	f7f6 ff6c 	bl	8015a8c <pbuf_free>
  return ERR_OK;
 801ebb4:	2300      	movs	r3, #0
}
 801ebb6:	4618      	mov	r0, r3
 801ebb8:	3718      	adds	r7, #24
 801ebba:	46bd      	mov	sp, r7
 801ebbc:	bd80      	pop	{r7, pc}
 801ebbe:	bf00      	nop
 801ebc0:	0807ac84 	.word	0x0807ac84

0801ebc4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ebc4:	b580      	push	{r7, lr}
 801ebc6:	b086      	sub	sp, #24
 801ebc8:	af00      	add	r7, sp, #0
 801ebca:	60f8      	str	r0, [r7, #12]
 801ebcc:	60b9      	str	r1, [r7, #8]
 801ebce:	607a      	str	r2, [r7, #4]
 801ebd0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ebd2:	8c3b      	ldrh	r3, [r7, #32]
 801ebd4:	4618      	mov	r0, r3
 801ebd6:	f7f5 fb65 	bl	80142a4 <lwip_htons>
 801ebda:	4603      	mov	r3, r0
 801ebdc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ebde:	210e      	movs	r1, #14
 801ebe0:	68b8      	ldr	r0, [r7, #8]
 801ebe2:	f7f6 feab 	bl	801593c <pbuf_add_header>
 801ebe6:	4603      	mov	r3, r0
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	d125      	bne.n	801ec38 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ebec:	68bb      	ldr	r3, [r7, #8]
 801ebee:	685b      	ldr	r3, [r3, #4]
 801ebf0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ebf2:	693b      	ldr	r3, [r7, #16]
 801ebf4:	8afa      	ldrh	r2, [r7, #22]
 801ebf6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ebf8:	693b      	ldr	r3, [r7, #16]
 801ebfa:	2206      	movs	r2, #6
 801ebfc:	6839      	ldr	r1, [r7, #0]
 801ebfe:	4618      	mov	r0, r3
 801ec00:	f000 f974 	bl	801eeec <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ec04:	693b      	ldr	r3, [r7, #16]
 801ec06:	3306      	adds	r3, #6
 801ec08:	2206      	movs	r2, #6
 801ec0a:	6879      	ldr	r1, [r7, #4]
 801ec0c:	4618      	mov	r0, r3
 801ec0e:	f000 f96d 	bl	801eeec <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ec12:	68fb      	ldr	r3, [r7, #12]
 801ec14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ec18:	2b06      	cmp	r3, #6
 801ec1a:	d006      	beq.n	801ec2a <ethernet_output+0x66>
 801ec1c:	4b0a      	ldr	r3, [pc, #40]	; (801ec48 <ethernet_output+0x84>)
 801ec1e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801ec22:	490a      	ldr	r1, [pc, #40]	; (801ec4c <ethernet_output+0x88>)
 801ec24:	480a      	ldr	r0, [pc, #40]	; (801ec50 <ethernet_output+0x8c>)
 801ec26:	f000 f991 	bl	801ef4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ec2a:	68fb      	ldr	r3, [r7, #12]
 801ec2c:	699b      	ldr	r3, [r3, #24]
 801ec2e:	68b9      	ldr	r1, [r7, #8]
 801ec30:	68f8      	ldr	r0, [r7, #12]
 801ec32:	4798      	blx	r3
 801ec34:	4603      	mov	r3, r0
 801ec36:	e002      	b.n	801ec3e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ec38:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ec3a:	f06f 0301 	mvn.w	r3, #1
}
 801ec3e:	4618      	mov	r0, r3
 801ec40:	3718      	adds	r7, #24
 801ec42:	46bd      	mov	sp, r7
 801ec44:	bd80      	pop	{r7, pc}
 801ec46:	bf00      	nop
 801ec48:	08023dac 	.word	0x08023dac
 801ec4c:	08023de4 	.word	0x08023de4
 801ec50:	08023e18 	.word	0x08023e18

0801ec54 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ec54:	b580      	push	{r7, lr}
 801ec56:	b086      	sub	sp, #24
 801ec58:	af00      	add	r7, sp, #0
 801ec5a:	6078      	str	r0, [r7, #4]
 801ec5c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801ec5e:	683b      	ldr	r3, [r7, #0]
 801ec60:	60bb      	str	r3, [r7, #8]
 801ec62:	2304      	movs	r3, #4
 801ec64:	60fb      	str	r3, [r7, #12]
 801ec66:	2300      	movs	r3, #0
 801ec68:	613b      	str	r3, [r7, #16]
 801ec6a:	2300      	movs	r3, #0
 801ec6c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801ec6e:	f107 0308 	add.w	r3, r7, #8
 801ec72:	2100      	movs	r1, #0
 801ec74:	4618      	mov	r0, r3
 801ec76:	f7f0 ff70 	bl	800fb5a <osMessageCreate>
 801ec7a:	4602      	mov	r2, r0
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ec80:	687b      	ldr	r3, [r7, #4]
 801ec82:	681b      	ldr	r3, [r3, #0]
 801ec84:	2b00      	cmp	r3, #0
 801ec86:	d102      	bne.n	801ec8e <sys_mbox_new+0x3a>
    return ERR_MEM;
 801ec88:	f04f 33ff 	mov.w	r3, #4294967295
 801ec8c:	e000      	b.n	801ec90 <sys_mbox_new+0x3c>

  return ERR_OK;
 801ec8e:	2300      	movs	r3, #0
}
 801ec90:	4618      	mov	r0, r3
 801ec92:	3718      	adds	r7, #24
 801ec94:	46bd      	mov	sp, r7
 801ec96:	bd80      	pop	{r7, pc}

0801ec98 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ec98:	b580      	push	{r7, lr}
 801ec9a:	b084      	sub	sp, #16
 801ec9c:	af00      	add	r7, sp, #0
 801ec9e:	6078      	str	r0, [r7, #4]
 801eca0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	681b      	ldr	r3, [r3, #0]
 801eca6:	6839      	ldr	r1, [r7, #0]
 801eca8:	2200      	movs	r2, #0
 801ecaa:	4618      	mov	r0, r3
 801ecac:	f7f0 ff7e 	bl	800fbac <osMessagePut>
 801ecb0:	4603      	mov	r3, r0
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	d102      	bne.n	801ecbc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801ecb6:	2300      	movs	r3, #0
 801ecb8:	73fb      	strb	r3, [r7, #15]
 801ecba:	e001      	b.n	801ecc0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ecbc:	23ff      	movs	r3, #255	; 0xff
 801ecbe:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ecc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ecc4:	4618      	mov	r0, r3
 801ecc6:	3710      	adds	r7, #16
 801ecc8:	46bd      	mov	sp, r7
 801ecca:	bd80      	pop	{r7, pc}

0801eccc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801eccc:	b580      	push	{r7, lr}
 801ecce:	b08c      	sub	sp, #48	; 0x30
 801ecd0:	af00      	add	r7, sp, #0
 801ecd2:	61f8      	str	r0, [r7, #28]
 801ecd4:	61b9      	str	r1, [r7, #24]
 801ecd6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801ecd8:	f7f0 fd69 	bl	800f7ae <osKernelSysTick>
 801ecdc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801ecde:	697b      	ldr	r3, [r7, #20]
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	d017      	beq.n	801ed14 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801ece4:	69fb      	ldr	r3, [r7, #28]
 801ece6:	6819      	ldr	r1, [r3, #0]
 801ece8:	f107 0320 	add.w	r3, r7, #32
 801ecec:	697a      	ldr	r2, [r7, #20]
 801ecee:	4618      	mov	r0, r3
 801ecf0:	f7f0 ff9c 	bl	800fc2c <osMessageGet>

    if(event.status == osEventMessage)
 801ecf4:	6a3b      	ldr	r3, [r7, #32]
 801ecf6:	2b10      	cmp	r3, #16
 801ecf8:	d109      	bne.n	801ed0e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801ecfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecfc:	461a      	mov	r2, r3
 801ecfe:	69bb      	ldr	r3, [r7, #24]
 801ed00:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801ed02:	f7f0 fd54 	bl	800f7ae <osKernelSysTick>
 801ed06:	4602      	mov	r2, r0
 801ed08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed0a:	1ad3      	subs	r3, r2, r3
 801ed0c:	e019      	b.n	801ed42 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ed0e:	f04f 33ff 	mov.w	r3, #4294967295
 801ed12:	e016      	b.n	801ed42 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801ed14:	69fb      	ldr	r3, [r7, #28]
 801ed16:	6819      	ldr	r1, [r3, #0]
 801ed18:	463b      	mov	r3, r7
 801ed1a:	f04f 32ff 	mov.w	r2, #4294967295
 801ed1e:	4618      	mov	r0, r3
 801ed20:	f7f0 ff84 	bl	800fc2c <osMessageGet>
 801ed24:	f107 0320 	add.w	r3, r7, #32
 801ed28:	463a      	mov	r2, r7
 801ed2a:	ca07      	ldmia	r2, {r0, r1, r2}
 801ed2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801ed30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed32:	461a      	mov	r2, r3
 801ed34:	69bb      	ldr	r3, [r7, #24]
 801ed36:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801ed38:	f7f0 fd39 	bl	800f7ae <osKernelSysTick>
 801ed3c:	4602      	mov	r2, r0
 801ed3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed40:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801ed42:	4618      	mov	r0, r3
 801ed44:	3730      	adds	r7, #48	; 0x30
 801ed46:	46bd      	mov	sp, r7
 801ed48:	bd80      	pop	{r7, pc}

0801ed4a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801ed4a:	b480      	push	{r7}
 801ed4c:	b083      	sub	sp, #12
 801ed4e:	af00      	add	r7, sp, #0
 801ed50:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	681b      	ldr	r3, [r3, #0]
 801ed56:	2b00      	cmp	r3, #0
 801ed58:	d101      	bne.n	801ed5e <sys_mbox_valid+0x14>
    return 0;
 801ed5a:	2300      	movs	r3, #0
 801ed5c:	e000      	b.n	801ed60 <sys_mbox_valid+0x16>
  else
    return 1;
 801ed5e:	2301      	movs	r3, #1
}
 801ed60:	4618      	mov	r0, r3
 801ed62:	370c      	adds	r7, #12
 801ed64:	46bd      	mov	sp, r7
 801ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed6a:	4770      	bx	lr

0801ed6c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ed6c:	b580      	push	{r7, lr}
 801ed6e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801ed70:	4803      	ldr	r0, [pc, #12]	; (801ed80 <sys_init+0x14>)
 801ed72:	f7f0 fd8c 	bl	800f88e <osMutexCreate>
 801ed76:	4603      	mov	r3, r0
 801ed78:	4a02      	ldr	r2, [pc, #8]	; (801ed84 <sys_init+0x18>)
 801ed7a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801ed7c:	bf00      	nop
 801ed7e:	bd80      	pop	{r7, pc}
 801ed80:	0807ac94 	.word	0x0807ac94
 801ed84:	2001477c 	.word	0x2001477c

0801ed88 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ed88:	b580      	push	{r7, lr}
 801ed8a:	b084      	sub	sp, #16
 801ed8c:	af00      	add	r7, sp, #0
 801ed8e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801ed90:	2300      	movs	r3, #0
 801ed92:	60bb      	str	r3, [r7, #8]
 801ed94:	2300      	movs	r3, #0
 801ed96:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801ed98:	f107 0308 	add.w	r3, r7, #8
 801ed9c:	4618      	mov	r0, r3
 801ed9e:	f7f0 fd76 	bl	800f88e <osMutexCreate>
 801eda2:	4602      	mov	r2, r0
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801eda8:	687b      	ldr	r3, [r7, #4]
 801edaa:	681b      	ldr	r3, [r3, #0]
 801edac:	2b00      	cmp	r3, #0
 801edae:	d102      	bne.n	801edb6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801edb0:	f04f 33ff 	mov.w	r3, #4294967295
 801edb4:	e000      	b.n	801edb8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801edb6:	2300      	movs	r3, #0
}
 801edb8:	4618      	mov	r0, r3
 801edba:	3710      	adds	r7, #16
 801edbc:	46bd      	mov	sp, r7
 801edbe:	bd80      	pop	{r7, pc}

0801edc0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801edc0:	b580      	push	{r7, lr}
 801edc2:	b082      	sub	sp, #8
 801edc4:	af00      	add	r7, sp, #0
 801edc6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	681b      	ldr	r3, [r3, #0]
 801edcc:	f04f 31ff 	mov.w	r1, #4294967295
 801edd0:	4618      	mov	r0, r3
 801edd2:	f7f0 fd75 	bl	800f8c0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801edd6:	bf00      	nop
 801edd8:	3708      	adds	r7, #8
 801edda:	46bd      	mov	sp, r7
 801eddc:	bd80      	pop	{r7, pc}

0801edde <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801edde:	b580      	push	{r7, lr}
 801ede0:	b082      	sub	sp, #8
 801ede2:	af00      	add	r7, sp, #0
 801ede4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801ede6:	687b      	ldr	r3, [r7, #4]
 801ede8:	681b      	ldr	r3, [r3, #0]
 801edea:	4618      	mov	r0, r3
 801edec:	f7f0 fdb6 	bl	800f95c <osMutexRelease>
}
 801edf0:	bf00      	nop
 801edf2:	3708      	adds	r7, #8
 801edf4:	46bd      	mov	sp, r7
 801edf6:	bd80      	pop	{r7, pc}

0801edf8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801edf8:	b580      	push	{r7, lr}
 801edfa:	b08c      	sub	sp, #48	; 0x30
 801edfc:	af00      	add	r7, sp, #0
 801edfe:	60f8      	str	r0, [r7, #12]
 801ee00:	60b9      	str	r1, [r7, #8]
 801ee02:	607a      	str	r2, [r7, #4]
 801ee04:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801ee06:	f107 0314 	add.w	r3, r7, #20
 801ee0a:	2200      	movs	r2, #0
 801ee0c:	601a      	str	r2, [r3, #0]
 801ee0e:	605a      	str	r2, [r3, #4]
 801ee10:	609a      	str	r2, [r3, #8]
 801ee12:	60da      	str	r2, [r3, #12]
 801ee14:	611a      	str	r2, [r3, #16]
 801ee16:	615a      	str	r2, [r3, #20]
 801ee18:	619a      	str	r2, [r3, #24]
 801ee1a:	68fb      	ldr	r3, [r7, #12]
 801ee1c:	617b      	str	r3, [r7, #20]
 801ee1e:	68bb      	ldr	r3, [r7, #8]
 801ee20:	61bb      	str	r3, [r7, #24]
 801ee22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ee24:	b21b      	sxth	r3, r3
 801ee26:	83bb      	strh	r3, [r7, #28]
 801ee28:	683b      	ldr	r3, [r7, #0]
 801ee2a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801ee2c:	f107 0314 	add.w	r3, r7, #20
 801ee30:	6879      	ldr	r1, [r7, #4]
 801ee32:	4618      	mov	r0, r3
 801ee34:	f7f0 fccb 	bl	800f7ce <osThreadCreate>
 801ee38:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801ee3a:	4618      	mov	r0, r3
 801ee3c:	3730      	adds	r7, #48	; 0x30
 801ee3e:	46bd      	mov	sp, r7
 801ee40:	bd80      	pop	{r7, pc}
	...

0801ee44 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801ee44:	b580      	push	{r7, lr}
 801ee46:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801ee48:	4b04      	ldr	r3, [pc, #16]	; (801ee5c <sys_arch_protect+0x18>)
 801ee4a:	681b      	ldr	r3, [r3, #0]
 801ee4c:	f04f 31ff 	mov.w	r1, #4294967295
 801ee50:	4618      	mov	r0, r3
 801ee52:	f7f0 fd35 	bl	800f8c0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801ee56:	2301      	movs	r3, #1
}
 801ee58:	4618      	mov	r0, r3
 801ee5a:	bd80      	pop	{r7, pc}
 801ee5c:	2001477c 	.word	0x2001477c

0801ee60 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801ee60:	b580      	push	{r7, lr}
 801ee62:	b082      	sub	sp, #8
 801ee64:	af00      	add	r7, sp, #0
 801ee66:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801ee68:	4b04      	ldr	r3, [pc, #16]	; (801ee7c <sys_arch_unprotect+0x1c>)
 801ee6a:	681b      	ldr	r3, [r3, #0]
 801ee6c:	4618      	mov	r0, r3
 801ee6e:	f7f0 fd75 	bl	800f95c <osMutexRelease>
}
 801ee72:	bf00      	nop
 801ee74:	3708      	adds	r7, #8
 801ee76:	46bd      	mov	sp, r7
 801ee78:	bd80      	pop	{r7, pc}
 801ee7a:	bf00      	nop
 801ee7c:	2001477c 	.word	0x2001477c

0801ee80 <atoi>:
 801ee80:	220a      	movs	r2, #10
 801ee82:	2100      	movs	r1, #0
 801ee84:	f000 bad2 	b.w	801f42c <strtol>

0801ee88 <__libc_init_array>:
 801ee88:	b570      	push	{r4, r5, r6, lr}
 801ee8a:	4d0d      	ldr	r5, [pc, #52]	; (801eec0 <__libc_init_array+0x38>)
 801ee8c:	4c0d      	ldr	r4, [pc, #52]	; (801eec4 <__libc_init_array+0x3c>)
 801ee8e:	1b64      	subs	r4, r4, r5
 801ee90:	10a4      	asrs	r4, r4, #2
 801ee92:	2600      	movs	r6, #0
 801ee94:	42a6      	cmp	r6, r4
 801ee96:	d109      	bne.n	801eeac <__libc_init_array+0x24>
 801ee98:	4d0b      	ldr	r5, [pc, #44]	; (801eec8 <__libc_init_array+0x40>)
 801ee9a:	4c0c      	ldr	r4, [pc, #48]	; (801eecc <__libc_init_array+0x44>)
 801ee9c:	f002 f816 	bl	8020ecc <_init>
 801eea0:	1b64      	subs	r4, r4, r5
 801eea2:	10a4      	asrs	r4, r4, #2
 801eea4:	2600      	movs	r6, #0
 801eea6:	42a6      	cmp	r6, r4
 801eea8:	d105      	bne.n	801eeb6 <__libc_init_array+0x2e>
 801eeaa:	bd70      	pop	{r4, r5, r6, pc}
 801eeac:	f855 3b04 	ldr.w	r3, [r5], #4
 801eeb0:	4798      	blx	r3
 801eeb2:	3601      	adds	r6, #1
 801eeb4:	e7ee      	b.n	801ee94 <__libc_init_array+0xc>
 801eeb6:	f855 3b04 	ldr.w	r3, [r5], #4
 801eeba:	4798      	blx	r3
 801eebc:	3601      	adds	r6, #1
 801eebe:	e7f2      	b.n	801eea6 <__libc_init_array+0x1e>
 801eec0:	0807af10 	.word	0x0807af10
 801eec4:	0807af10 	.word	0x0807af10
 801eec8:	0807af10 	.word	0x0807af10
 801eecc:	0807af14 	.word	0x0807af14

0801eed0 <memcmp>:
 801eed0:	b530      	push	{r4, r5, lr}
 801eed2:	3901      	subs	r1, #1
 801eed4:	2400      	movs	r4, #0
 801eed6:	42a2      	cmp	r2, r4
 801eed8:	d101      	bne.n	801eede <memcmp+0xe>
 801eeda:	2000      	movs	r0, #0
 801eedc:	e005      	b.n	801eeea <memcmp+0x1a>
 801eede:	5d03      	ldrb	r3, [r0, r4]
 801eee0:	3401      	adds	r4, #1
 801eee2:	5d0d      	ldrb	r5, [r1, r4]
 801eee4:	42ab      	cmp	r3, r5
 801eee6:	d0f6      	beq.n	801eed6 <memcmp+0x6>
 801eee8:	1b58      	subs	r0, r3, r5
 801eeea:	bd30      	pop	{r4, r5, pc}

0801eeec <memcpy>:
 801eeec:	440a      	add	r2, r1
 801eeee:	4291      	cmp	r1, r2
 801eef0:	f100 33ff 	add.w	r3, r0, #4294967295
 801eef4:	d100      	bne.n	801eef8 <memcpy+0xc>
 801eef6:	4770      	bx	lr
 801eef8:	b510      	push	{r4, lr}
 801eefa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eefe:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ef02:	4291      	cmp	r1, r2
 801ef04:	d1f9      	bne.n	801eefa <memcpy+0xe>
 801ef06:	bd10      	pop	{r4, pc}

0801ef08 <memmove>:
 801ef08:	4288      	cmp	r0, r1
 801ef0a:	b510      	push	{r4, lr}
 801ef0c:	eb01 0402 	add.w	r4, r1, r2
 801ef10:	d902      	bls.n	801ef18 <memmove+0x10>
 801ef12:	4284      	cmp	r4, r0
 801ef14:	4623      	mov	r3, r4
 801ef16:	d807      	bhi.n	801ef28 <memmove+0x20>
 801ef18:	1e43      	subs	r3, r0, #1
 801ef1a:	42a1      	cmp	r1, r4
 801ef1c:	d008      	beq.n	801ef30 <memmove+0x28>
 801ef1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ef22:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ef26:	e7f8      	b.n	801ef1a <memmove+0x12>
 801ef28:	4402      	add	r2, r0
 801ef2a:	4601      	mov	r1, r0
 801ef2c:	428a      	cmp	r2, r1
 801ef2e:	d100      	bne.n	801ef32 <memmove+0x2a>
 801ef30:	bd10      	pop	{r4, pc}
 801ef32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ef36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ef3a:	e7f7      	b.n	801ef2c <memmove+0x24>

0801ef3c <memset>:
 801ef3c:	4402      	add	r2, r0
 801ef3e:	4603      	mov	r3, r0
 801ef40:	4293      	cmp	r3, r2
 801ef42:	d100      	bne.n	801ef46 <memset+0xa>
 801ef44:	4770      	bx	lr
 801ef46:	f803 1b01 	strb.w	r1, [r3], #1
 801ef4a:	e7f9      	b.n	801ef40 <memset+0x4>

0801ef4c <iprintf>:
 801ef4c:	b40f      	push	{r0, r1, r2, r3}
 801ef4e:	4b0a      	ldr	r3, [pc, #40]	; (801ef78 <iprintf+0x2c>)
 801ef50:	b513      	push	{r0, r1, r4, lr}
 801ef52:	681c      	ldr	r4, [r3, #0]
 801ef54:	b124      	cbz	r4, 801ef60 <iprintf+0x14>
 801ef56:	69a3      	ldr	r3, [r4, #24]
 801ef58:	b913      	cbnz	r3, 801ef60 <iprintf+0x14>
 801ef5a:	4620      	mov	r0, r4
 801ef5c:	f000 fc90 	bl	801f880 <__sinit>
 801ef60:	ab05      	add	r3, sp, #20
 801ef62:	9a04      	ldr	r2, [sp, #16]
 801ef64:	68a1      	ldr	r1, [r4, #8]
 801ef66:	9301      	str	r3, [sp, #4]
 801ef68:	4620      	mov	r0, r4
 801ef6a:	f001 f9d5 	bl	8020318 <_vfiprintf_r>
 801ef6e:	b002      	add	sp, #8
 801ef70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef74:	b004      	add	sp, #16
 801ef76:	4770      	bx	lr
 801ef78:	20000040 	.word	0x20000040

0801ef7c <_puts_r>:
 801ef7c:	b570      	push	{r4, r5, r6, lr}
 801ef7e:	460e      	mov	r6, r1
 801ef80:	4605      	mov	r5, r0
 801ef82:	b118      	cbz	r0, 801ef8c <_puts_r+0x10>
 801ef84:	6983      	ldr	r3, [r0, #24]
 801ef86:	b90b      	cbnz	r3, 801ef8c <_puts_r+0x10>
 801ef88:	f000 fc7a 	bl	801f880 <__sinit>
 801ef8c:	69ab      	ldr	r3, [r5, #24]
 801ef8e:	68ac      	ldr	r4, [r5, #8]
 801ef90:	b913      	cbnz	r3, 801ef98 <_puts_r+0x1c>
 801ef92:	4628      	mov	r0, r5
 801ef94:	f000 fc74 	bl	801f880 <__sinit>
 801ef98:	4b2c      	ldr	r3, [pc, #176]	; (801f04c <_puts_r+0xd0>)
 801ef9a:	429c      	cmp	r4, r3
 801ef9c:	d120      	bne.n	801efe0 <_puts_r+0x64>
 801ef9e:	686c      	ldr	r4, [r5, #4]
 801efa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801efa2:	07db      	lsls	r3, r3, #31
 801efa4:	d405      	bmi.n	801efb2 <_puts_r+0x36>
 801efa6:	89a3      	ldrh	r3, [r4, #12]
 801efa8:	0598      	lsls	r0, r3, #22
 801efaa:	d402      	bmi.n	801efb2 <_puts_r+0x36>
 801efac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801efae:	f000 fd17 	bl	801f9e0 <__retarget_lock_acquire_recursive>
 801efb2:	89a3      	ldrh	r3, [r4, #12]
 801efb4:	0719      	lsls	r1, r3, #28
 801efb6:	d51d      	bpl.n	801eff4 <_puts_r+0x78>
 801efb8:	6923      	ldr	r3, [r4, #16]
 801efba:	b1db      	cbz	r3, 801eff4 <_puts_r+0x78>
 801efbc:	3e01      	subs	r6, #1
 801efbe:	68a3      	ldr	r3, [r4, #8]
 801efc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801efc4:	3b01      	subs	r3, #1
 801efc6:	60a3      	str	r3, [r4, #8]
 801efc8:	bb39      	cbnz	r1, 801f01a <_puts_r+0x9e>
 801efca:	2b00      	cmp	r3, #0
 801efcc:	da38      	bge.n	801f040 <_puts_r+0xc4>
 801efce:	4622      	mov	r2, r4
 801efd0:	210a      	movs	r1, #10
 801efd2:	4628      	mov	r0, r5
 801efd4:	f000 fa34 	bl	801f440 <__swbuf_r>
 801efd8:	3001      	adds	r0, #1
 801efda:	d011      	beq.n	801f000 <_puts_r+0x84>
 801efdc:	250a      	movs	r5, #10
 801efde:	e011      	b.n	801f004 <_puts_r+0x88>
 801efe0:	4b1b      	ldr	r3, [pc, #108]	; (801f050 <_puts_r+0xd4>)
 801efe2:	429c      	cmp	r4, r3
 801efe4:	d101      	bne.n	801efea <_puts_r+0x6e>
 801efe6:	68ac      	ldr	r4, [r5, #8]
 801efe8:	e7da      	b.n	801efa0 <_puts_r+0x24>
 801efea:	4b1a      	ldr	r3, [pc, #104]	; (801f054 <_puts_r+0xd8>)
 801efec:	429c      	cmp	r4, r3
 801efee:	bf08      	it	eq
 801eff0:	68ec      	ldreq	r4, [r5, #12]
 801eff2:	e7d5      	b.n	801efa0 <_puts_r+0x24>
 801eff4:	4621      	mov	r1, r4
 801eff6:	4628      	mov	r0, r5
 801eff8:	f000 fa86 	bl	801f508 <__swsetup_r>
 801effc:	2800      	cmp	r0, #0
 801effe:	d0dd      	beq.n	801efbc <_puts_r+0x40>
 801f000:	f04f 35ff 	mov.w	r5, #4294967295
 801f004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f006:	07da      	lsls	r2, r3, #31
 801f008:	d405      	bmi.n	801f016 <_puts_r+0x9a>
 801f00a:	89a3      	ldrh	r3, [r4, #12]
 801f00c:	059b      	lsls	r3, r3, #22
 801f00e:	d402      	bmi.n	801f016 <_puts_r+0x9a>
 801f010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f012:	f000 fce6 	bl	801f9e2 <__retarget_lock_release_recursive>
 801f016:	4628      	mov	r0, r5
 801f018:	bd70      	pop	{r4, r5, r6, pc}
 801f01a:	2b00      	cmp	r3, #0
 801f01c:	da04      	bge.n	801f028 <_puts_r+0xac>
 801f01e:	69a2      	ldr	r2, [r4, #24]
 801f020:	429a      	cmp	r2, r3
 801f022:	dc06      	bgt.n	801f032 <_puts_r+0xb6>
 801f024:	290a      	cmp	r1, #10
 801f026:	d004      	beq.n	801f032 <_puts_r+0xb6>
 801f028:	6823      	ldr	r3, [r4, #0]
 801f02a:	1c5a      	adds	r2, r3, #1
 801f02c:	6022      	str	r2, [r4, #0]
 801f02e:	7019      	strb	r1, [r3, #0]
 801f030:	e7c5      	b.n	801efbe <_puts_r+0x42>
 801f032:	4622      	mov	r2, r4
 801f034:	4628      	mov	r0, r5
 801f036:	f000 fa03 	bl	801f440 <__swbuf_r>
 801f03a:	3001      	adds	r0, #1
 801f03c:	d1bf      	bne.n	801efbe <_puts_r+0x42>
 801f03e:	e7df      	b.n	801f000 <_puts_r+0x84>
 801f040:	6823      	ldr	r3, [r4, #0]
 801f042:	250a      	movs	r5, #10
 801f044:	1c5a      	adds	r2, r3, #1
 801f046:	6022      	str	r2, [r4, #0]
 801f048:	701d      	strb	r5, [r3, #0]
 801f04a:	e7db      	b.n	801f004 <_puts_r+0x88>
 801f04c:	0807ae78 	.word	0x0807ae78
 801f050:	0807ae98 	.word	0x0807ae98
 801f054:	0807ae58 	.word	0x0807ae58

0801f058 <puts>:
 801f058:	4b02      	ldr	r3, [pc, #8]	; (801f064 <puts+0xc>)
 801f05a:	4601      	mov	r1, r0
 801f05c:	6818      	ldr	r0, [r3, #0]
 801f05e:	f7ff bf8d 	b.w	801ef7c <_puts_r>
 801f062:	bf00      	nop
 801f064:	20000040 	.word	0x20000040

0801f068 <rand>:
 801f068:	4b17      	ldr	r3, [pc, #92]	; (801f0c8 <rand+0x60>)
 801f06a:	b510      	push	{r4, lr}
 801f06c:	681c      	ldr	r4, [r3, #0]
 801f06e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f070:	b9b3      	cbnz	r3, 801f0a0 <rand+0x38>
 801f072:	2018      	movs	r0, #24
 801f074:	f000 fd2c 	bl	801fad0 <malloc>
 801f078:	63a0      	str	r0, [r4, #56]	; 0x38
 801f07a:	b928      	cbnz	r0, 801f088 <rand+0x20>
 801f07c:	4602      	mov	r2, r0
 801f07e:	4b13      	ldr	r3, [pc, #76]	; (801f0cc <rand+0x64>)
 801f080:	4813      	ldr	r0, [pc, #76]	; (801f0d0 <rand+0x68>)
 801f082:	214e      	movs	r1, #78	; 0x4e
 801f084:	f000 faae 	bl	801f5e4 <__assert_func>
 801f088:	4a12      	ldr	r2, [pc, #72]	; (801f0d4 <rand+0x6c>)
 801f08a:	4b13      	ldr	r3, [pc, #76]	; (801f0d8 <rand+0x70>)
 801f08c:	e9c0 2300 	strd	r2, r3, [r0]
 801f090:	4b12      	ldr	r3, [pc, #72]	; (801f0dc <rand+0x74>)
 801f092:	6083      	str	r3, [r0, #8]
 801f094:	230b      	movs	r3, #11
 801f096:	8183      	strh	r3, [r0, #12]
 801f098:	2201      	movs	r2, #1
 801f09a:	2300      	movs	r3, #0
 801f09c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801f0a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f0a2:	480f      	ldr	r0, [pc, #60]	; (801f0e0 <rand+0x78>)
 801f0a4:	690a      	ldr	r2, [r1, #16]
 801f0a6:	694b      	ldr	r3, [r1, #20]
 801f0a8:	4c0e      	ldr	r4, [pc, #56]	; (801f0e4 <rand+0x7c>)
 801f0aa:	4350      	muls	r0, r2
 801f0ac:	fb04 0003 	mla	r0, r4, r3, r0
 801f0b0:	fba2 3404 	umull	r3, r4, r2, r4
 801f0b4:	1c5a      	adds	r2, r3, #1
 801f0b6:	4404      	add	r4, r0
 801f0b8:	f144 0000 	adc.w	r0, r4, #0
 801f0bc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801f0c0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f0c4:	bd10      	pop	{r4, pc}
 801f0c6:	bf00      	nop
 801f0c8:	20000040 	.word	0x20000040
 801f0cc:	0807ada4 	.word	0x0807ada4
 801f0d0:	0807adbb 	.word	0x0807adbb
 801f0d4:	abcd330e 	.word	0xabcd330e
 801f0d8:	e66d1234 	.word	0xe66d1234
 801f0dc:	0005deec 	.word	0x0005deec
 801f0e0:	5851f42d 	.word	0x5851f42d
 801f0e4:	4c957f2d 	.word	0x4c957f2d

0801f0e8 <sniprintf>:
 801f0e8:	b40c      	push	{r2, r3}
 801f0ea:	b530      	push	{r4, r5, lr}
 801f0ec:	4b17      	ldr	r3, [pc, #92]	; (801f14c <sniprintf+0x64>)
 801f0ee:	1e0c      	subs	r4, r1, #0
 801f0f0:	681d      	ldr	r5, [r3, #0]
 801f0f2:	b09d      	sub	sp, #116	; 0x74
 801f0f4:	da08      	bge.n	801f108 <sniprintf+0x20>
 801f0f6:	238b      	movs	r3, #139	; 0x8b
 801f0f8:	602b      	str	r3, [r5, #0]
 801f0fa:	f04f 30ff 	mov.w	r0, #4294967295
 801f0fe:	b01d      	add	sp, #116	; 0x74
 801f100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f104:	b002      	add	sp, #8
 801f106:	4770      	bx	lr
 801f108:	f44f 7302 	mov.w	r3, #520	; 0x208
 801f10c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f110:	bf14      	ite	ne
 801f112:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f116:	4623      	moveq	r3, r4
 801f118:	9304      	str	r3, [sp, #16]
 801f11a:	9307      	str	r3, [sp, #28]
 801f11c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f120:	9002      	str	r0, [sp, #8]
 801f122:	9006      	str	r0, [sp, #24]
 801f124:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f128:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f12a:	ab21      	add	r3, sp, #132	; 0x84
 801f12c:	a902      	add	r1, sp, #8
 801f12e:	4628      	mov	r0, r5
 801f130:	9301      	str	r3, [sp, #4]
 801f132:	f000 fdf5 	bl	801fd20 <_svfiprintf_r>
 801f136:	1c43      	adds	r3, r0, #1
 801f138:	bfbc      	itt	lt
 801f13a:	238b      	movlt	r3, #139	; 0x8b
 801f13c:	602b      	strlt	r3, [r5, #0]
 801f13e:	2c00      	cmp	r4, #0
 801f140:	d0dd      	beq.n	801f0fe <sniprintf+0x16>
 801f142:	9b02      	ldr	r3, [sp, #8]
 801f144:	2200      	movs	r2, #0
 801f146:	701a      	strb	r2, [r3, #0]
 801f148:	e7d9      	b.n	801f0fe <sniprintf+0x16>
 801f14a:	bf00      	nop
 801f14c:	20000040 	.word	0x20000040

0801f150 <siprintf>:
 801f150:	b40e      	push	{r1, r2, r3}
 801f152:	b500      	push	{lr}
 801f154:	b09c      	sub	sp, #112	; 0x70
 801f156:	ab1d      	add	r3, sp, #116	; 0x74
 801f158:	9002      	str	r0, [sp, #8]
 801f15a:	9006      	str	r0, [sp, #24]
 801f15c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f160:	4809      	ldr	r0, [pc, #36]	; (801f188 <siprintf+0x38>)
 801f162:	9107      	str	r1, [sp, #28]
 801f164:	9104      	str	r1, [sp, #16]
 801f166:	4909      	ldr	r1, [pc, #36]	; (801f18c <siprintf+0x3c>)
 801f168:	f853 2b04 	ldr.w	r2, [r3], #4
 801f16c:	9105      	str	r1, [sp, #20]
 801f16e:	6800      	ldr	r0, [r0, #0]
 801f170:	9301      	str	r3, [sp, #4]
 801f172:	a902      	add	r1, sp, #8
 801f174:	f000 fdd4 	bl	801fd20 <_svfiprintf_r>
 801f178:	9b02      	ldr	r3, [sp, #8]
 801f17a:	2200      	movs	r2, #0
 801f17c:	701a      	strb	r2, [r3, #0]
 801f17e:	b01c      	add	sp, #112	; 0x70
 801f180:	f85d eb04 	ldr.w	lr, [sp], #4
 801f184:	b003      	add	sp, #12
 801f186:	4770      	bx	lr
 801f188:	20000040 	.word	0x20000040
 801f18c:	ffff0208 	.word	0xffff0208

0801f190 <siscanf>:
 801f190:	b40e      	push	{r1, r2, r3}
 801f192:	b510      	push	{r4, lr}
 801f194:	b09f      	sub	sp, #124	; 0x7c
 801f196:	ac21      	add	r4, sp, #132	; 0x84
 801f198:	f44f 7101 	mov.w	r1, #516	; 0x204
 801f19c:	f854 2b04 	ldr.w	r2, [r4], #4
 801f1a0:	9201      	str	r2, [sp, #4]
 801f1a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f1a6:	9004      	str	r0, [sp, #16]
 801f1a8:	9008      	str	r0, [sp, #32]
 801f1aa:	f7e1 f81b 	bl	80001e4 <strlen>
 801f1ae:	4b0c      	ldr	r3, [pc, #48]	; (801f1e0 <siscanf+0x50>)
 801f1b0:	9005      	str	r0, [sp, #20]
 801f1b2:	9009      	str	r0, [sp, #36]	; 0x24
 801f1b4:	930d      	str	r3, [sp, #52]	; 0x34
 801f1b6:	480b      	ldr	r0, [pc, #44]	; (801f1e4 <siscanf+0x54>)
 801f1b8:	9a01      	ldr	r2, [sp, #4]
 801f1ba:	6800      	ldr	r0, [r0, #0]
 801f1bc:	9403      	str	r4, [sp, #12]
 801f1be:	2300      	movs	r3, #0
 801f1c0:	9311      	str	r3, [sp, #68]	; 0x44
 801f1c2:	9316      	str	r3, [sp, #88]	; 0x58
 801f1c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f1c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f1cc:	a904      	add	r1, sp, #16
 801f1ce:	4623      	mov	r3, r4
 801f1d0:	f000 ff00 	bl	801ffd4 <__ssvfiscanf_r>
 801f1d4:	b01f      	add	sp, #124	; 0x7c
 801f1d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1da:	b003      	add	sp, #12
 801f1dc:	4770      	bx	lr
 801f1de:	bf00      	nop
 801f1e0:	0801f20b 	.word	0x0801f20b
 801f1e4:	20000040 	.word	0x20000040

0801f1e8 <__sread>:
 801f1e8:	b510      	push	{r4, lr}
 801f1ea:	460c      	mov	r4, r1
 801f1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f1f0:	f001 fca2 	bl	8020b38 <_read_r>
 801f1f4:	2800      	cmp	r0, #0
 801f1f6:	bfab      	itete	ge
 801f1f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f1fa:	89a3      	ldrhlt	r3, [r4, #12]
 801f1fc:	181b      	addge	r3, r3, r0
 801f1fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f202:	bfac      	ite	ge
 801f204:	6563      	strge	r3, [r4, #84]	; 0x54
 801f206:	81a3      	strhlt	r3, [r4, #12]
 801f208:	bd10      	pop	{r4, pc}

0801f20a <__seofread>:
 801f20a:	2000      	movs	r0, #0
 801f20c:	4770      	bx	lr

0801f20e <__swrite>:
 801f20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f212:	461f      	mov	r7, r3
 801f214:	898b      	ldrh	r3, [r1, #12]
 801f216:	05db      	lsls	r3, r3, #23
 801f218:	4605      	mov	r5, r0
 801f21a:	460c      	mov	r4, r1
 801f21c:	4616      	mov	r6, r2
 801f21e:	d505      	bpl.n	801f22c <__swrite+0x1e>
 801f220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f224:	2302      	movs	r3, #2
 801f226:	2200      	movs	r2, #0
 801f228:	f000 fbdc 	bl	801f9e4 <_lseek_r>
 801f22c:	89a3      	ldrh	r3, [r4, #12]
 801f22e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f236:	81a3      	strh	r3, [r4, #12]
 801f238:	4632      	mov	r2, r6
 801f23a:	463b      	mov	r3, r7
 801f23c:	4628      	mov	r0, r5
 801f23e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f242:	f000 b94f 	b.w	801f4e4 <_write_r>

0801f246 <__sseek>:
 801f246:	b510      	push	{r4, lr}
 801f248:	460c      	mov	r4, r1
 801f24a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f24e:	f000 fbc9 	bl	801f9e4 <_lseek_r>
 801f252:	1c43      	adds	r3, r0, #1
 801f254:	89a3      	ldrh	r3, [r4, #12]
 801f256:	bf15      	itete	ne
 801f258:	6560      	strne	r0, [r4, #84]	; 0x54
 801f25a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f25e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f262:	81a3      	strheq	r3, [r4, #12]
 801f264:	bf18      	it	ne
 801f266:	81a3      	strhne	r3, [r4, #12]
 801f268:	bd10      	pop	{r4, pc}

0801f26a <__sclose>:
 801f26a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f26e:	f000 b9d7 	b.w	801f620 <_close_r>

0801f272 <strcat>:
 801f272:	b510      	push	{r4, lr}
 801f274:	4602      	mov	r2, r0
 801f276:	7814      	ldrb	r4, [r2, #0]
 801f278:	4613      	mov	r3, r2
 801f27a:	3201      	adds	r2, #1
 801f27c:	2c00      	cmp	r4, #0
 801f27e:	d1fa      	bne.n	801f276 <strcat+0x4>
 801f280:	3b01      	subs	r3, #1
 801f282:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f286:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f28a:	2a00      	cmp	r2, #0
 801f28c:	d1f9      	bne.n	801f282 <strcat+0x10>
 801f28e:	bd10      	pop	{r4, pc}

0801f290 <strchr>:
 801f290:	b2c9      	uxtb	r1, r1
 801f292:	4603      	mov	r3, r0
 801f294:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f298:	b11a      	cbz	r2, 801f2a2 <strchr+0x12>
 801f29a:	428a      	cmp	r2, r1
 801f29c:	d1f9      	bne.n	801f292 <strchr+0x2>
 801f29e:	4618      	mov	r0, r3
 801f2a0:	4770      	bx	lr
 801f2a2:	2900      	cmp	r1, #0
 801f2a4:	bf18      	it	ne
 801f2a6:	2300      	movne	r3, #0
 801f2a8:	e7f9      	b.n	801f29e <strchr+0xe>

0801f2aa <strcpy>:
 801f2aa:	4603      	mov	r3, r0
 801f2ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f2b0:	f803 2b01 	strb.w	r2, [r3], #1
 801f2b4:	2a00      	cmp	r2, #0
 801f2b6:	d1f9      	bne.n	801f2ac <strcpy+0x2>
 801f2b8:	4770      	bx	lr

0801f2ba <strncmp>:
 801f2ba:	b510      	push	{r4, lr}
 801f2bc:	b16a      	cbz	r2, 801f2da <strncmp+0x20>
 801f2be:	3901      	subs	r1, #1
 801f2c0:	1884      	adds	r4, r0, r2
 801f2c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f2c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f2ca:	4293      	cmp	r3, r2
 801f2cc:	d103      	bne.n	801f2d6 <strncmp+0x1c>
 801f2ce:	42a0      	cmp	r0, r4
 801f2d0:	d001      	beq.n	801f2d6 <strncmp+0x1c>
 801f2d2:	2b00      	cmp	r3, #0
 801f2d4:	d1f5      	bne.n	801f2c2 <strncmp+0x8>
 801f2d6:	1a98      	subs	r0, r3, r2
 801f2d8:	bd10      	pop	{r4, pc}
 801f2da:	4610      	mov	r0, r2
 801f2dc:	e7fc      	b.n	801f2d8 <strncmp+0x1e>

0801f2de <strnstr>:
 801f2de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f2e0:	460c      	mov	r4, r1
 801f2e2:	4605      	mov	r5, r0
 801f2e4:	4611      	mov	r1, r2
 801f2e6:	4620      	mov	r0, r4
 801f2e8:	9201      	str	r2, [sp, #4]
 801f2ea:	f001 fc81 	bl	8020bf0 <strnlen>
 801f2ee:	9901      	ldr	r1, [sp, #4]
 801f2f0:	4281      	cmp	r1, r0
 801f2f2:	d805      	bhi.n	801f300 <strnstr+0x22>
 801f2f4:	5c23      	ldrb	r3, [r4, r0]
 801f2f6:	b11b      	cbz	r3, 801f300 <strnstr+0x22>
 801f2f8:	2400      	movs	r4, #0
 801f2fa:	4620      	mov	r0, r4
 801f2fc:	b003      	add	sp, #12
 801f2fe:	bd30      	pop	{r4, r5, pc}
 801f300:	4603      	mov	r3, r0
 801f302:	4622      	mov	r2, r4
 801f304:	4628      	mov	r0, r5
 801f306:	f000 fbeb 	bl	801fae0 <memmem>
 801f30a:	4604      	mov	r4, r0
 801f30c:	2800      	cmp	r0, #0
 801f30e:	d0f3      	beq.n	801f2f8 <strnstr+0x1a>
 801f310:	1b42      	subs	r2, r0, r5
 801f312:	2100      	movs	r1, #0
 801f314:	4628      	mov	r0, r5
 801f316:	f7e0 ff73 	bl	8000200 <memchr>
 801f31a:	2800      	cmp	r0, #0
 801f31c:	d1ec      	bne.n	801f2f8 <strnstr+0x1a>
 801f31e:	e7ec      	b.n	801f2fa <strnstr+0x1c>

0801f320 <_strtol_l.isra.0>:
 801f320:	2b01      	cmp	r3, #1
 801f322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f326:	d001      	beq.n	801f32c <_strtol_l.isra.0+0xc>
 801f328:	2b24      	cmp	r3, #36	; 0x24
 801f32a:	d906      	bls.n	801f33a <_strtol_l.isra.0+0x1a>
 801f32c:	f000 f988 	bl	801f640 <__errno>
 801f330:	2316      	movs	r3, #22
 801f332:	6003      	str	r3, [r0, #0]
 801f334:	2000      	movs	r0, #0
 801f336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f33a:	4f3a      	ldr	r7, [pc, #232]	; (801f424 <_strtol_l.isra.0+0x104>)
 801f33c:	468e      	mov	lr, r1
 801f33e:	4676      	mov	r6, lr
 801f340:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f344:	5de5      	ldrb	r5, [r4, r7]
 801f346:	f015 0508 	ands.w	r5, r5, #8
 801f34a:	d1f8      	bne.n	801f33e <_strtol_l.isra.0+0x1e>
 801f34c:	2c2d      	cmp	r4, #45	; 0x2d
 801f34e:	d134      	bne.n	801f3ba <_strtol_l.isra.0+0x9a>
 801f350:	f89e 4000 	ldrb.w	r4, [lr]
 801f354:	f04f 0801 	mov.w	r8, #1
 801f358:	f106 0e02 	add.w	lr, r6, #2
 801f35c:	2b00      	cmp	r3, #0
 801f35e:	d05c      	beq.n	801f41a <_strtol_l.isra.0+0xfa>
 801f360:	2b10      	cmp	r3, #16
 801f362:	d10c      	bne.n	801f37e <_strtol_l.isra.0+0x5e>
 801f364:	2c30      	cmp	r4, #48	; 0x30
 801f366:	d10a      	bne.n	801f37e <_strtol_l.isra.0+0x5e>
 801f368:	f89e 4000 	ldrb.w	r4, [lr]
 801f36c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801f370:	2c58      	cmp	r4, #88	; 0x58
 801f372:	d14d      	bne.n	801f410 <_strtol_l.isra.0+0xf0>
 801f374:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801f378:	2310      	movs	r3, #16
 801f37a:	f10e 0e02 	add.w	lr, lr, #2
 801f37e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801f382:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f386:	2600      	movs	r6, #0
 801f388:	fbbc f9f3 	udiv	r9, ip, r3
 801f38c:	4635      	mov	r5, r6
 801f38e:	fb03 ca19 	mls	sl, r3, r9, ip
 801f392:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801f396:	2f09      	cmp	r7, #9
 801f398:	d818      	bhi.n	801f3cc <_strtol_l.isra.0+0xac>
 801f39a:	463c      	mov	r4, r7
 801f39c:	42a3      	cmp	r3, r4
 801f39e:	dd24      	ble.n	801f3ea <_strtol_l.isra.0+0xca>
 801f3a0:	2e00      	cmp	r6, #0
 801f3a2:	db1f      	blt.n	801f3e4 <_strtol_l.isra.0+0xc4>
 801f3a4:	45a9      	cmp	r9, r5
 801f3a6:	d31d      	bcc.n	801f3e4 <_strtol_l.isra.0+0xc4>
 801f3a8:	d101      	bne.n	801f3ae <_strtol_l.isra.0+0x8e>
 801f3aa:	45a2      	cmp	sl, r4
 801f3ac:	db1a      	blt.n	801f3e4 <_strtol_l.isra.0+0xc4>
 801f3ae:	fb05 4503 	mla	r5, r5, r3, r4
 801f3b2:	2601      	movs	r6, #1
 801f3b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f3b8:	e7eb      	b.n	801f392 <_strtol_l.isra.0+0x72>
 801f3ba:	2c2b      	cmp	r4, #43	; 0x2b
 801f3bc:	bf08      	it	eq
 801f3be:	f89e 4000 	ldrbeq.w	r4, [lr]
 801f3c2:	46a8      	mov	r8, r5
 801f3c4:	bf08      	it	eq
 801f3c6:	f106 0e02 	addeq.w	lr, r6, #2
 801f3ca:	e7c7      	b.n	801f35c <_strtol_l.isra.0+0x3c>
 801f3cc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801f3d0:	2f19      	cmp	r7, #25
 801f3d2:	d801      	bhi.n	801f3d8 <_strtol_l.isra.0+0xb8>
 801f3d4:	3c37      	subs	r4, #55	; 0x37
 801f3d6:	e7e1      	b.n	801f39c <_strtol_l.isra.0+0x7c>
 801f3d8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801f3dc:	2f19      	cmp	r7, #25
 801f3de:	d804      	bhi.n	801f3ea <_strtol_l.isra.0+0xca>
 801f3e0:	3c57      	subs	r4, #87	; 0x57
 801f3e2:	e7db      	b.n	801f39c <_strtol_l.isra.0+0x7c>
 801f3e4:	f04f 36ff 	mov.w	r6, #4294967295
 801f3e8:	e7e4      	b.n	801f3b4 <_strtol_l.isra.0+0x94>
 801f3ea:	2e00      	cmp	r6, #0
 801f3ec:	da05      	bge.n	801f3fa <_strtol_l.isra.0+0xda>
 801f3ee:	2322      	movs	r3, #34	; 0x22
 801f3f0:	6003      	str	r3, [r0, #0]
 801f3f2:	4665      	mov	r5, ip
 801f3f4:	b942      	cbnz	r2, 801f408 <_strtol_l.isra.0+0xe8>
 801f3f6:	4628      	mov	r0, r5
 801f3f8:	e79d      	b.n	801f336 <_strtol_l.isra.0+0x16>
 801f3fa:	f1b8 0f00 	cmp.w	r8, #0
 801f3fe:	d000      	beq.n	801f402 <_strtol_l.isra.0+0xe2>
 801f400:	426d      	negs	r5, r5
 801f402:	2a00      	cmp	r2, #0
 801f404:	d0f7      	beq.n	801f3f6 <_strtol_l.isra.0+0xd6>
 801f406:	b10e      	cbz	r6, 801f40c <_strtol_l.isra.0+0xec>
 801f408:	f10e 31ff 	add.w	r1, lr, #4294967295
 801f40c:	6011      	str	r1, [r2, #0]
 801f40e:	e7f2      	b.n	801f3f6 <_strtol_l.isra.0+0xd6>
 801f410:	2430      	movs	r4, #48	; 0x30
 801f412:	2b00      	cmp	r3, #0
 801f414:	d1b3      	bne.n	801f37e <_strtol_l.isra.0+0x5e>
 801f416:	2308      	movs	r3, #8
 801f418:	e7b1      	b.n	801f37e <_strtol_l.isra.0+0x5e>
 801f41a:	2c30      	cmp	r4, #48	; 0x30
 801f41c:	d0a4      	beq.n	801f368 <_strtol_l.isra.0+0x48>
 801f41e:	230a      	movs	r3, #10
 801f420:	e7ad      	b.n	801f37e <_strtol_l.isra.0+0x5e>
 801f422:	bf00      	nop
 801f424:	0807ac9d 	.word	0x0807ac9d

0801f428 <_strtol_r>:
 801f428:	f7ff bf7a 	b.w	801f320 <_strtol_l.isra.0>

0801f42c <strtol>:
 801f42c:	4613      	mov	r3, r2
 801f42e:	460a      	mov	r2, r1
 801f430:	4601      	mov	r1, r0
 801f432:	4802      	ldr	r0, [pc, #8]	; (801f43c <strtol+0x10>)
 801f434:	6800      	ldr	r0, [r0, #0]
 801f436:	f7ff bf73 	b.w	801f320 <_strtol_l.isra.0>
 801f43a:	bf00      	nop
 801f43c:	20000040 	.word	0x20000040

0801f440 <__swbuf_r>:
 801f440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f442:	460e      	mov	r6, r1
 801f444:	4614      	mov	r4, r2
 801f446:	4605      	mov	r5, r0
 801f448:	b118      	cbz	r0, 801f452 <__swbuf_r+0x12>
 801f44a:	6983      	ldr	r3, [r0, #24]
 801f44c:	b90b      	cbnz	r3, 801f452 <__swbuf_r+0x12>
 801f44e:	f000 fa17 	bl	801f880 <__sinit>
 801f452:	4b21      	ldr	r3, [pc, #132]	; (801f4d8 <__swbuf_r+0x98>)
 801f454:	429c      	cmp	r4, r3
 801f456:	d12b      	bne.n	801f4b0 <__swbuf_r+0x70>
 801f458:	686c      	ldr	r4, [r5, #4]
 801f45a:	69a3      	ldr	r3, [r4, #24]
 801f45c:	60a3      	str	r3, [r4, #8]
 801f45e:	89a3      	ldrh	r3, [r4, #12]
 801f460:	071a      	lsls	r2, r3, #28
 801f462:	d52f      	bpl.n	801f4c4 <__swbuf_r+0x84>
 801f464:	6923      	ldr	r3, [r4, #16]
 801f466:	b36b      	cbz	r3, 801f4c4 <__swbuf_r+0x84>
 801f468:	6923      	ldr	r3, [r4, #16]
 801f46a:	6820      	ldr	r0, [r4, #0]
 801f46c:	1ac0      	subs	r0, r0, r3
 801f46e:	6963      	ldr	r3, [r4, #20]
 801f470:	b2f6      	uxtb	r6, r6
 801f472:	4283      	cmp	r3, r0
 801f474:	4637      	mov	r7, r6
 801f476:	dc04      	bgt.n	801f482 <__swbuf_r+0x42>
 801f478:	4621      	mov	r1, r4
 801f47a:	4628      	mov	r0, r5
 801f47c:	f000 f96c 	bl	801f758 <_fflush_r>
 801f480:	bb30      	cbnz	r0, 801f4d0 <__swbuf_r+0x90>
 801f482:	68a3      	ldr	r3, [r4, #8]
 801f484:	3b01      	subs	r3, #1
 801f486:	60a3      	str	r3, [r4, #8]
 801f488:	6823      	ldr	r3, [r4, #0]
 801f48a:	1c5a      	adds	r2, r3, #1
 801f48c:	6022      	str	r2, [r4, #0]
 801f48e:	701e      	strb	r6, [r3, #0]
 801f490:	6963      	ldr	r3, [r4, #20]
 801f492:	3001      	adds	r0, #1
 801f494:	4283      	cmp	r3, r0
 801f496:	d004      	beq.n	801f4a2 <__swbuf_r+0x62>
 801f498:	89a3      	ldrh	r3, [r4, #12]
 801f49a:	07db      	lsls	r3, r3, #31
 801f49c:	d506      	bpl.n	801f4ac <__swbuf_r+0x6c>
 801f49e:	2e0a      	cmp	r6, #10
 801f4a0:	d104      	bne.n	801f4ac <__swbuf_r+0x6c>
 801f4a2:	4621      	mov	r1, r4
 801f4a4:	4628      	mov	r0, r5
 801f4a6:	f000 f957 	bl	801f758 <_fflush_r>
 801f4aa:	b988      	cbnz	r0, 801f4d0 <__swbuf_r+0x90>
 801f4ac:	4638      	mov	r0, r7
 801f4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f4b0:	4b0a      	ldr	r3, [pc, #40]	; (801f4dc <__swbuf_r+0x9c>)
 801f4b2:	429c      	cmp	r4, r3
 801f4b4:	d101      	bne.n	801f4ba <__swbuf_r+0x7a>
 801f4b6:	68ac      	ldr	r4, [r5, #8]
 801f4b8:	e7cf      	b.n	801f45a <__swbuf_r+0x1a>
 801f4ba:	4b09      	ldr	r3, [pc, #36]	; (801f4e0 <__swbuf_r+0xa0>)
 801f4bc:	429c      	cmp	r4, r3
 801f4be:	bf08      	it	eq
 801f4c0:	68ec      	ldreq	r4, [r5, #12]
 801f4c2:	e7ca      	b.n	801f45a <__swbuf_r+0x1a>
 801f4c4:	4621      	mov	r1, r4
 801f4c6:	4628      	mov	r0, r5
 801f4c8:	f000 f81e 	bl	801f508 <__swsetup_r>
 801f4cc:	2800      	cmp	r0, #0
 801f4ce:	d0cb      	beq.n	801f468 <__swbuf_r+0x28>
 801f4d0:	f04f 37ff 	mov.w	r7, #4294967295
 801f4d4:	e7ea      	b.n	801f4ac <__swbuf_r+0x6c>
 801f4d6:	bf00      	nop
 801f4d8:	0807ae78 	.word	0x0807ae78
 801f4dc:	0807ae98 	.word	0x0807ae98
 801f4e0:	0807ae58 	.word	0x0807ae58

0801f4e4 <_write_r>:
 801f4e4:	b538      	push	{r3, r4, r5, lr}
 801f4e6:	4d07      	ldr	r5, [pc, #28]	; (801f504 <_write_r+0x20>)
 801f4e8:	4604      	mov	r4, r0
 801f4ea:	4608      	mov	r0, r1
 801f4ec:	4611      	mov	r1, r2
 801f4ee:	2200      	movs	r2, #0
 801f4f0:	602a      	str	r2, [r5, #0]
 801f4f2:	461a      	mov	r2, r3
 801f4f4:	f7e2 fba5 	bl	8001c42 <_write>
 801f4f8:	1c43      	adds	r3, r0, #1
 801f4fa:	d102      	bne.n	801f502 <_write_r+0x1e>
 801f4fc:	682b      	ldr	r3, [r5, #0]
 801f4fe:	b103      	cbz	r3, 801f502 <_write_r+0x1e>
 801f500:	6023      	str	r3, [r4, #0]
 801f502:	bd38      	pop	{r3, r4, r5, pc}
 801f504:	20014778 	.word	0x20014778

0801f508 <__swsetup_r>:
 801f508:	4b32      	ldr	r3, [pc, #200]	; (801f5d4 <__swsetup_r+0xcc>)
 801f50a:	b570      	push	{r4, r5, r6, lr}
 801f50c:	681d      	ldr	r5, [r3, #0]
 801f50e:	4606      	mov	r6, r0
 801f510:	460c      	mov	r4, r1
 801f512:	b125      	cbz	r5, 801f51e <__swsetup_r+0x16>
 801f514:	69ab      	ldr	r3, [r5, #24]
 801f516:	b913      	cbnz	r3, 801f51e <__swsetup_r+0x16>
 801f518:	4628      	mov	r0, r5
 801f51a:	f000 f9b1 	bl	801f880 <__sinit>
 801f51e:	4b2e      	ldr	r3, [pc, #184]	; (801f5d8 <__swsetup_r+0xd0>)
 801f520:	429c      	cmp	r4, r3
 801f522:	d10f      	bne.n	801f544 <__swsetup_r+0x3c>
 801f524:	686c      	ldr	r4, [r5, #4]
 801f526:	89a3      	ldrh	r3, [r4, #12]
 801f528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f52c:	0719      	lsls	r1, r3, #28
 801f52e:	d42c      	bmi.n	801f58a <__swsetup_r+0x82>
 801f530:	06dd      	lsls	r5, r3, #27
 801f532:	d411      	bmi.n	801f558 <__swsetup_r+0x50>
 801f534:	2309      	movs	r3, #9
 801f536:	6033      	str	r3, [r6, #0]
 801f538:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f53c:	81a3      	strh	r3, [r4, #12]
 801f53e:	f04f 30ff 	mov.w	r0, #4294967295
 801f542:	e03e      	b.n	801f5c2 <__swsetup_r+0xba>
 801f544:	4b25      	ldr	r3, [pc, #148]	; (801f5dc <__swsetup_r+0xd4>)
 801f546:	429c      	cmp	r4, r3
 801f548:	d101      	bne.n	801f54e <__swsetup_r+0x46>
 801f54a:	68ac      	ldr	r4, [r5, #8]
 801f54c:	e7eb      	b.n	801f526 <__swsetup_r+0x1e>
 801f54e:	4b24      	ldr	r3, [pc, #144]	; (801f5e0 <__swsetup_r+0xd8>)
 801f550:	429c      	cmp	r4, r3
 801f552:	bf08      	it	eq
 801f554:	68ec      	ldreq	r4, [r5, #12]
 801f556:	e7e6      	b.n	801f526 <__swsetup_r+0x1e>
 801f558:	0758      	lsls	r0, r3, #29
 801f55a:	d512      	bpl.n	801f582 <__swsetup_r+0x7a>
 801f55c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f55e:	b141      	cbz	r1, 801f572 <__swsetup_r+0x6a>
 801f560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f564:	4299      	cmp	r1, r3
 801f566:	d002      	beq.n	801f56e <__swsetup_r+0x66>
 801f568:	4630      	mov	r0, r6
 801f56a:	f000 fad3 	bl	801fb14 <_free_r>
 801f56e:	2300      	movs	r3, #0
 801f570:	6363      	str	r3, [r4, #52]	; 0x34
 801f572:	89a3      	ldrh	r3, [r4, #12]
 801f574:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f578:	81a3      	strh	r3, [r4, #12]
 801f57a:	2300      	movs	r3, #0
 801f57c:	6063      	str	r3, [r4, #4]
 801f57e:	6923      	ldr	r3, [r4, #16]
 801f580:	6023      	str	r3, [r4, #0]
 801f582:	89a3      	ldrh	r3, [r4, #12]
 801f584:	f043 0308 	orr.w	r3, r3, #8
 801f588:	81a3      	strh	r3, [r4, #12]
 801f58a:	6923      	ldr	r3, [r4, #16]
 801f58c:	b94b      	cbnz	r3, 801f5a2 <__swsetup_r+0x9a>
 801f58e:	89a3      	ldrh	r3, [r4, #12]
 801f590:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f598:	d003      	beq.n	801f5a2 <__swsetup_r+0x9a>
 801f59a:	4621      	mov	r1, r4
 801f59c:	4630      	mov	r0, r6
 801f59e:	f000 fa57 	bl	801fa50 <__smakebuf_r>
 801f5a2:	89a0      	ldrh	r0, [r4, #12]
 801f5a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f5a8:	f010 0301 	ands.w	r3, r0, #1
 801f5ac:	d00a      	beq.n	801f5c4 <__swsetup_r+0xbc>
 801f5ae:	2300      	movs	r3, #0
 801f5b0:	60a3      	str	r3, [r4, #8]
 801f5b2:	6963      	ldr	r3, [r4, #20]
 801f5b4:	425b      	negs	r3, r3
 801f5b6:	61a3      	str	r3, [r4, #24]
 801f5b8:	6923      	ldr	r3, [r4, #16]
 801f5ba:	b943      	cbnz	r3, 801f5ce <__swsetup_r+0xc6>
 801f5bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f5c0:	d1ba      	bne.n	801f538 <__swsetup_r+0x30>
 801f5c2:	bd70      	pop	{r4, r5, r6, pc}
 801f5c4:	0781      	lsls	r1, r0, #30
 801f5c6:	bf58      	it	pl
 801f5c8:	6963      	ldrpl	r3, [r4, #20]
 801f5ca:	60a3      	str	r3, [r4, #8]
 801f5cc:	e7f4      	b.n	801f5b8 <__swsetup_r+0xb0>
 801f5ce:	2000      	movs	r0, #0
 801f5d0:	e7f7      	b.n	801f5c2 <__swsetup_r+0xba>
 801f5d2:	bf00      	nop
 801f5d4:	20000040 	.word	0x20000040
 801f5d8:	0807ae78 	.word	0x0807ae78
 801f5dc:	0807ae98 	.word	0x0807ae98
 801f5e0:	0807ae58 	.word	0x0807ae58

0801f5e4 <__assert_func>:
 801f5e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f5e6:	4614      	mov	r4, r2
 801f5e8:	461a      	mov	r2, r3
 801f5ea:	4b09      	ldr	r3, [pc, #36]	; (801f610 <__assert_func+0x2c>)
 801f5ec:	681b      	ldr	r3, [r3, #0]
 801f5ee:	4605      	mov	r5, r0
 801f5f0:	68d8      	ldr	r0, [r3, #12]
 801f5f2:	b14c      	cbz	r4, 801f608 <__assert_func+0x24>
 801f5f4:	4b07      	ldr	r3, [pc, #28]	; (801f614 <__assert_func+0x30>)
 801f5f6:	9100      	str	r1, [sp, #0]
 801f5f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f5fc:	4906      	ldr	r1, [pc, #24]	; (801f618 <__assert_func+0x34>)
 801f5fe:	462b      	mov	r3, r5
 801f600:	f000 f9bc 	bl	801f97c <fiprintf>
 801f604:	f001 fbba 	bl	8020d7c <abort>
 801f608:	4b04      	ldr	r3, [pc, #16]	; (801f61c <__assert_func+0x38>)
 801f60a:	461c      	mov	r4, r3
 801f60c:	e7f3      	b.n	801f5f6 <__assert_func+0x12>
 801f60e:	bf00      	nop
 801f610:	20000040 	.word	0x20000040
 801f614:	0807ae1a 	.word	0x0807ae1a
 801f618:	0807ae27 	.word	0x0807ae27
 801f61c:	0807ae55 	.word	0x0807ae55

0801f620 <_close_r>:
 801f620:	b538      	push	{r3, r4, r5, lr}
 801f622:	4d06      	ldr	r5, [pc, #24]	; (801f63c <_close_r+0x1c>)
 801f624:	2300      	movs	r3, #0
 801f626:	4604      	mov	r4, r0
 801f628:	4608      	mov	r0, r1
 801f62a:	602b      	str	r3, [r5, #0]
 801f62c:	f7e2 fb25 	bl	8001c7a <_close>
 801f630:	1c43      	adds	r3, r0, #1
 801f632:	d102      	bne.n	801f63a <_close_r+0x1a>
 801f634:	682b      	ldr	r3, [r5, #0]
 801f636:	b103      	cbz	r3, 801f63a <_close_r+0x1a>
 801f638:	6023      	str	r3, [r4, #0]
 801f63a:	bd38      	pop	{r3, r4, r5, pc}
 801f63c:	20014778 	.word	0x20014778

0801f640 <__errno>:
 801f640:	4b01      	ldr	r3, [pc, #4]	; (801f648 <__errno+0x8>)
 801f642:	6818      	ldr	r0, [r3, #0]
 801f644:	4770      	bx	lr
 801f646:	bf00      	nop
 801f648:	20000040 	.word	0x20000040

0801f64c <__sflush_r>:
 801f64c:	898a      	ldrh	r2, [r1, #12]
 801f64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f652:	4605      	mov	r5, r0
 801f654:	0710      	lsls	r0, r2, #28
 801f656:	460c      	mov	r4, r1
 801f658:	d458      	bmi.n	801f70c <__sflush_r+0xc0>
 801f65a:	684b      	ldr	r3, [r1, #4]
 801f65c:	2b00      	cmp	r3, #0
 801f65e:	dc05      	bgt.n	801f66c <__sflush_r+0x20>
 801f660:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f662:	2b00      	cmp	r3, #0
 801f664:	dc02      	bgt.n	801f66c <__sflush_r+0x20>
 801f666:	2000      	movs	r0, #0
 801f668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f66c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f66e:	2e00      	cmp	r6, #0
 801f670:	d0f9      	beq.n	801f666 <__sflush_r+0x1a>
 801f672:	2300      	movs	r3, #0
 801f674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f678:	682f      	ldr	r7, [r5, #0]
 801f67a:	602b      	str	r3, [r5, #0]
 801f67c:	d032      	beq.n	801f6e4 <__sflush_r+0x98>
 801f67e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f680:	89a3      	ldrh	r3, [r4, #12]
 801f682:	075a      	lsls	r2, r3, #29
 801f684:	d505      	bpl.n	801f692 <__sflush_r+0x46>
 801f686:	6863      	ldr	r3, [r4, #4]
 801f688:	1ac0      	subs	r0, r0, r3
 801f68a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f68c:	b10b      	cbz	r3, 801f692 <__sflush_r+0x46>
 801f68e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f690:	1ac0      	subs	r0, r0, r3
 801f692:	2300      	movs	r3, #0
 801f694:	4602      	mov	r2, r0
 801f696:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f698:	6a21      	ldr	r1, [r4, #32]
 801f69a:	4628      	mov	r0, r5
 801f69c:	47b0      	blx	r6
 801f69e:	1c43      	adds	r3, r0, #1
 801f6a0:	89a3      	ldrh	r3, [r4, #12]
 801f6a2:	d106      	bne.n	801f6b2 <__sflush_r+0x66>
 801f6a4:	6829      	ldr	r1, [r5, #0]
 801f6a6:	291d      	cmp	r1, #29
 801f6a8:	d82c      	bhi.n	801f704 <__sflush_r+0xb8>
 801f6aa:	4a2a      	ldr	r2, [pc, #168]	; (801f754 <__sflush_r+0x108>)
 801f6ac:	40ca      	lsrs	r2, r1
 801f6ae:	07d6      	lsls	r6, r2, #31
 801f6b0:	d528      	bpl.n	801f704 <__sflush_r+0xb8>
 801f6b2:	2200      	movs	r2, #0
 801f6b4:	6062      	str	r2, [r4, #4]
 801f6b6:	04d9      	lsls	r1, r3, #19
 801f6b8:	6922      	ldr	r2, [r4, #16]
 801f6ba:	6022      	str	r2, [r4, #0]
 801f6bc:	d504      	bpl.n	801f6c8 <__sflush_r+0x7c>
 801f6be:	1c42      	adds	r2, r0, #1
 801f6c0:	d101      	bne.n	801f6c6 <__sflush_r+0x7a>
 801f6c2:	682b      	ldr	r3, [r5, #0]
 801f6c4:	b903      	cbnz	r3, 801f6c8 <__sflush_r+0x7c>
 801f6c6:	6560      	str	r0, [r4, #84]	; 0x54
 801f6c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f6ca:	602f      	str	r7, [r5, #0]
 801f6cc:	2900      	cmp	r1, #0
 801f6ce:	d0ca      	beq.n	801f666 <__sflush_r+0x1a>
 801f6d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f6d4:	4299      	cmp	r1, r3
 801f6d6:	d002      	beq.n	801f6de <__sflush_r+0x92>
 801f6d8:	4628      	mov	r0, r5
 801f6da:	f000 fa1b 	bl	801fb14 <_free_r>
 801f6de:	2000      	movs	r0, #0
 801f6e0:	6360      	str	r0, [r4, #52]	; 0x34
 801f6e2:	e7c1      	b.n	801f668 <__sflush_r+0x1c>
 801f6e4:	6a21      	ldr	r1, [r4, #32]
 801f6e6:	2301      	movs	r3, #1
 801f6e8:	4628      	mov	r0, r5
 801f6ea:	47b0      	blx	r6
 801f6ec:	1c41      	adds	r1, r0, #1
 801f6ee:	d1c7      	bne.n	801f680 <__sflush_r+0x34>
 801f6f0:	682b      	ldr	r3, [r5, #0]
 801f6f2:	2b00      	cmp	r3, #0
 801f6f4:	d0c4      	beq.n	801f680 <__sflush_r+0x34>
 801f6f6:	2b1d      	cmp	r3, #29
 801f6f8:	d001      	beq.n	801f6fe <__sflush_r+0xb2>
 801f6fa:	2b16      	cmp	r3, #22
 801f6fc:	d101      	bne.n	801f702 <__sflush_r+0xb6>
 801f6fe:	602f      	str	r7, [r5, #0]
 801f700:	e7b1      	b.n	801f666 <__sflush_r+0x1a>
 801f702:	89a3      	ldrh	r3, [r4, #12]
 801f704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f708:	81a3      	strh	r3, [r4, #12]
 801f70a:	e7ad      	b.n	801f668 <__sflush_r+0x1c>
 801f70c:	690f      	ldr	r7, [r1, #16]
 801f70e:	2f00      	cmp	r7, #0
 801f710:	d0a9      	beq.n	801f666 <__sflush_r+0x1a>
 801f712:	0793      	lsls	r3, r2, #30
 801f714:	680e      	ldr	r6, [r1, #0]
 801f716:	bf08      	it	eq
 801f718:	694b      	ldreq	r3, [r1, #20]
 801f71a:	600f      	str	r7, [r1, #0]
 801f71c:	bf18      	it	ne
 801f71e:	2300      	movne	r3, #0
 801f720:	eba6 0807 	sub.w	r8, r6, r7
 801f724:	608b      	str	r3, [r1, #8]
 801f726:	f1b8 0f00 	cmp.w	r8, #0
 801f72a:	dd9c      	ble.n	801f666 <__sflush_r+0x1a>
 801f72c:	6a21      	ldr	r1, [r4, #32]
 801f72e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f730:	4643      	mov	r3, r8
 801f732:	463a      	mov	r2, r7
 801f734:	4628      	mov	r0, r5
 801f736:	47b0      	blx	r6
 801f738:	2800      	cmp	r0, #0
 801f73a:	dc06      	bgt.n	801f74a <__sflush_r+0xfe>
 801f73c:	89a3      	ldrh	r3, [r4, #12]
 801f73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f742:	81a3      	strh	r3, [r4, #12]
 801f744:	f04f 30ff 	mov.w	r0, #4294967295
 801f748:	e78e      	b.n	801f668 <__sflush_r+0x1c>
 801f74a:	4407      	add	r7, r0
 801f74c:	eba8 0800 	sub.w	r8, r8, r0
 801f750:	e7e9      	b.n	801f726 <__sflush_r+0xda>
 801f752:	bf00      	nop
 801f754:	20400001 	.word	0x20400001

0801f758 <_fflush_r>:
 801f758:	b538      	push	{r3, r4, r5, lr}
 801f75a:	690b      	ldr	r3, [r1, #16]
 801f75c:	4605      	mov	r5, r0
 801f75e:	460c      	mov	r4, r1
 801f760:	b913      	cbnz	r3, 801f768 <_fflush_r+0x10>
 801f762:	2500      	movs	r5, #0
 801f764:	4628      	mov	r0, r5
 801f766:	bd38      	pop	{r3, r4, r5, pc}
 801f768:	b118      	cbz	r0, 801f772 <_fflush_r+0x1a>
 801f76a:	6983      	ldr	r3, [r0, #24]
 801f76c:	b90b      	cbnz	r3, 801f772 <_fflush_r+0x1a>
 801f76e:	f000 f887 	bl	801f880 <__sinit>
 801f772:	4b14      	ldr	r3, [pc, #80]	; (801f7c4 <_fflush_r+0x6c>)
 801f774:	429c      	cmp	r4, r3
 801f776:	d11b      	bne.n	801f7b0 <_fflush_r+0x58>
 801f778:	686c      	ldr	r4, [r5, #4]
 801f77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f77e:	2b00      	cmp	r3, #0
 801f780:	d0ef      	beq.n	801f762 <_fflush_r+0xa>
 801f782:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f784:	07d0      	lsls	r0, r2, #31
 801f786:	d404      	bmi.n	801f792 <_fflush_r+0x3a>
 801f788:	0599      	lsls	r1, r3, #22
 801f78a:	d402      	bmi.n	801f792 <_fflush_r+0x3a>
 801f78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f78e:	f000 f927 	bl	801f9e0 <__retarget_lock_acquire_recursive>
 801f792:	4628      	mov	r0, r5
 801f794:	4621      	mov	r1, r4
 801f796:	f7ff ff59 	bl	801f64c <__sflush_r>
 801f79a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f79c:	07da      	lsls	r2, r3, #31
 801f79e:	4605      	mov	r5, r0
 801f7a0:	d4e0      	bmi.n	801f764 <_fflush_r+0xc>
 801f7a2:	89a3      	ldrh	r3, [r4, #12]
 801f7a4:	059b      	lsls	r3, r3, #22
 801f7a6:	d4dd      	bmi.n	801f764 <_fflush_r+0xc>
 801f7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f7aa:	f000 f91a 	bl	801f9e2 <__retarget_lock_release_recursive>
 801f7ae:	e7d9      	b.n	801f764 <_fflush_r+0xc>
 801f7b0:	4b05      	ldr	r3, [pc, #20]	; (801f7c8 <_fflush_r+0x70>)
 801f7b2:	429c      	cmp	r4, r3
 801f7b4:	d101      	bne.n	801f7ba <_fflush_r+0x62>
 801f7b6:	68ac      	ldr	r4, [r5, #8]
 801f7b8:	e7df      	b.n	801f77a <_fflush_r+0x22>
 801f7ba:	4b04      	ldr	r3, [pc, #16]	; (801f7cc <_fflush_r+0x74>)
 801f7bc:	429c      	cmp	r4, r3
 801f7be:	bf08      	it	eq
 801f7c0:	68ec      	ldreq	r4, [r5, #12]
 801f7c2:	e7da      	b.n	801f77a <_fflush_r+0x22>
 801f7c4:	0807ae78 	.word	0x0807ae78
 801f7c8:	0807ae98 	.word	0x0807ae98
 801f7cc:	0807ae58 	.word	0x0807ae58

0801f7d0 <std>:
 801f7d0:	2300      	movs	r3, #0
 801f7d2:	b510      	push	{r4, lr}
 801f7d4:	4604      	mov	r4, r0
 801f7d6:	e9c0 3300 	strd	r3, r3, [r0]
 801f7da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f7de:	6083      	str	r3, [r0, #8]
 801f7e0:	8181      	strh	r1, [r0, #12]
 801f7e2:	6643      	str	r3, [r0, #100]	; 0x64
 801f7e4:	81c2      	strh	r2, [r0, #14]
 801f7e6:	6183      	str	r3, [r0, #24]
 801f7e8:	4619      	mov	r1, r3
 801f7ea:	2208      	movs	r2, #8
 801f7ec:	305c      	adds	r0, #92	; 0x5c
 801f7ee:	f7ff fba5 	bl	801ef3c <memset>
 801f7f2:	4b05      	ldr	r3, [pc, #20]	; (801f808 <std+0x38>)
 801f7f4:	6263      	str	r3, [r4, #36]	; 0x24
 801f7f6:	4b05      	ldr	r3, [pc, #20]	; (801f80c <std+0x3c>)
 801f7f8:	62a3      	str	r3, [r4, #40]	; 0x28
 801f7fa:	4b05      	ldr	r3, [pc, #20]	; (801f810 <std+0x40>)
 801f7fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f7fe:	4b05      	ldr	r3, [pc, #20]	; (801f814 <std+0x44>)
 801f800:	6224      	str	r4, [r4, #32]
 801f802:	6323      	str	r3, [r4, #48]	; 0x30
 801f804:	bd10      	pop	{r4, pc}
 801f806:	bf00      	nop
 801f808:	0801f1e9 	.word	0x0801f1e9
 801f80c:	0801f20f 	.word	0x0801f20f
 801f810:	0801f247 	.word	0x0801f247
 801f814:	0801f26b 	.word	0x0801f26b

0801f818 <_cleanup_r>:
 801f818:	4901      	ldr	r1, [pc, #4]	; (801f820 <_cleanup_r+0x8>)
 801f81a:	f000 b8c1 	b.w	801f9a0 <_fwalk_reent>
 801f81e:	bf00      	nop
 801f820:	0801f759 	.word	0x0801f759

0801f824 <__sfmoreglue>:
 801f824:	b570      	push	{r4, r5, r6, lr}
 801f826:	1e4a      	subs	r2, r1, #1
 801f828:	2568      	movs	r5, #104	; 0x68
 801f82a:	4355      	muls	r5, r2
 801f82c:	460e      	mov	r6, r1
 801f82e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f832:	f000 f9bf 	bl	801fbb4 <_malloc_r>
 801f836:	4604      	mov	r4, r0
 801f838:	b140      	cbz	r0, 801f84c <__sfmoreglue+0x28>
 801f83a:	2100      	movs	r1, #0
 801f83c:	e9c0 1600 	strd	r1, r6, [r0]
 801f840:	300c      	adds	r0, #12
 801f842:	60a0      	str	r0, [r4, #8]
 801f844:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f848:	f7ff fb78 	bl	801ef3c <memset>
 801f84c:	4620      	mov	r0, r4
 801f84e:	bd70      	pop	{r4, r5, r6, pc}

0801f850 <__sfp_lock_acquire>:
 801f850:	4801      	ldr	r0, [pc, #4]	; (801f858 <__sfp_lock_acquire+0x8>)
 801f852:	f000 b8c5 	b.w	801f9e0 <__retarget_lock_acquire_recursive>
 801f856:	bf00      	nop
 801f858:	20014788 	.word	0x20014788

0801f85c <__sfp_lock_release>:
 801f85c:	4801      	ldr	r0, [pc, #4]	; (801f864 <__sfp_lock_release+0x8>)
 801f85e:	f000 b8c0 	b.w	801f9e2 <__retarget_lock_release_recursive>
 801f862:	bf00      	nop
 801f864:	20014788 	.word	0x20014788

0801f868 <__sinit_lock_acquire>:
 801f868:	4801      	ldr	r0, [pc, #4]	; (801f870 <__sinit_lock_acquire+0x8>)
 801f86a:	f000 b8b9 	b.w	801f9e0 <__retarget_lock_acquire_recursive>
 801f86e:	bf00      	nop
 801f870:	20014783 	.word	0x20014783

0801f874 <__sinit_lock_release>:
 801f874:	4801      	ldr	r0, [pc, #4]	; (801f87c <__sinit_lock_release+0x8>)
 801f876:	f000 b8b4 	b.w	801f9e2 <__retarget_lock_release_recursive>
 801f87a:	bf00      	nop
 801f87c:	20014783 	.word	0x20014783

0801f880 <__sinit>:
 801f880:	b510      	push	{r4, lr}
 801f882:	4604      	mov	r4, r0
 801f884:	f7ff fff0 	bl	801f868 <__sinit_lock_acquire>
 801f888:	69a3      	ldr	r3, [r4, #24]
 801f88a:	b11b      	cbz	r3, 801f894 <__sinit+0x14>
 801f88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f890:	f7ff bff0 	b.w	801f874 <__sinit_lock_release>
 801f894:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f898:	6523      	str	r3, [r4, #80]	; 0x50
 801f89a:	4b13      	ldr	r3, [pc, #76]	; (801f8e8 <__sinit+0x68>)
 801f89c:	4a13      	ldr	r2, [pc, #76]	; (801f8ec <__sinit+0x6c>)
 801f89e:	681b      	ldr	r3, [r3, #0]
 801f8a0:	62a2      	str	r2, [r4, #40]	; 0x28
 801f8a2:	42a3      	cmp	r3, r4
 801f8a4:	bf04      	itt	eq
 801f8a6:	2301      	moveq	r3, #1
 801f8a8:	61a3      	streq	r3, [r4, #24]
 801f8aa:	4620      	mov	r0, r4
 801f8ac:	f000 f820 	bl	801f8f0 <__sfp>
 801f8b0:	6060      	str	r0, [r4, #4]
 801f8b2:	4620      	mov	r0, r4
 801f8b4:	f000 f81c 	bl	801f8f0 <__sfp>
 801f8b8:	60a0      	str	r0, [r4, #8]
 801f8ba:	4620      	mov	r0, r4
 801f8bc:	f000 f818 	bl	801f8f0 <__sfp>
 801f8c0:	2200      	movs	r2, #0
 801f8c2:	60e0      	str	r0, [r4, #12]
 801f8c4:	2104      	movs	r1, #4
 801f8c6:	6860      	ldr	r0, [r4, #4]
 801f8c8:	f7ff ff82 	bl	801f7d0 <std>
 801f8cc:	68a0      	ldr	r0, [r4, #8]
 801f8ce:	2201      	movs	r2, #1
 801f8d0:	2109      	movs	r1, #9
 801f8d2:	f7ff ff7d 	bl	801f7d0 <std>
 801f8d6:	68e0      	ldr	r0, [r4, #12]
 801f8d8:	2202      	movs	r2, #2
 801f8da:	2112      	movs	r1, #18
 801f8dc:	f7ff ff78 	bl	801f7d0 <std>
 801f8e0:	2301      	movs	r3, #1
 801f8e2:	61a3      	str	r3, [r4, #24]
 801f8e4:	e7d2      	b.n	801f88c <__sinit+0xc>
 801f8e6:	bf00      	nop
 801f8e8:	0807ada0 	.word	0x0807ada0
 801f8ec:	0801f819 	.word	0x0801f819

0801f8f0 <__sfp>:
 801f8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8f2:	4607      	mov	r7, r0
 801f8f4:	f7ff ffac 	bl	801f850 <__sfp_lock_acquire>
 801f8f8:	4b1e      	ldr	r3, [pc, #120]	; (801f974 <__sfp+0x84>)
 801f8fa:	681e      	ldr	r6, [r3, #0]
 801f8fc:	69b3      	ldr	r3, [r6, #24]
 801f8fe:	b913      	cbnz	r3, 801f906 <__sfp+0x16>
 801f900:	4630      	mov	r0, r6
 801f902:	f7ff ffbd 	bl	801f880 <__sinit>
 801f906:	3648      	adds	r6, #72	; 0x48
 801f908:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f90c:	3b01      	subs	r3, #1
 801f90e:	d503      	bpl.n	801f918 <__sfp+0x28>
 801f910:	6833      	ldr	r3, [r6, #0]
 801f912:	b30b      	cbz	r3, 801f958 <__sfp+0x68>
 801f914:	6836      	ldr	r6, [r6, #0]
 801f916:	e7f7      	b.n	801f908 <__sfp+0x18>
 801f918:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f91c:	b9d5      	cbnz	r5, 801f954 <__sfp+0x64>
 801f91e:	4b16      	ldr	r3, [pc, #88]	; (801f978 <__sfp+0x88>)
 801f920:	60e3      	str	r3, [r4, #12]
 801f922:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f926:	6665      	str	r5, [r4, #100]	; 0x64
 801f928:	f000 f859 	bl	801f9de <__retarget_lock_init_recursive>
 801f92c:	f7ff ff96 	bl	801f85c <__sfp_lock_release>
 801f930:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f934:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f938:	6025      	str	r5, [r4, #0]
 801f93a:	61a5      	str	r5, [r4, #24]
 801f93c:	2208      	movs	r2, #8
 801f93e:	4629      	mov	r1, r5
 801f940:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f944:	f7ff fafa 	bl	801ef3c <memset>
 801f948:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f94c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f950:	4620      	mov	r0, r4
 801f952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f954:	3468      	adds	r4, #104	; 0x68
 801f956:	e7d9      	b.n	801f90c <__sfp+0x1c>
 801f958:	2104      	movs	r1, #4
 801f95a:	4638      	mov	r0, r7
 801f95c:	f7ff ff62 	bl	801f824 <__sfmoreglue>
 801f960:	4604      	mov	r4, r0
 801f962:	6030      	str	r0, [r6, #0]
 801f964:	2800      	cmp	r0, #0
 801f966:	d1d5      	bne.n	801f914 <__sfp+0x24>
 801f968:	f7ff ff78 	bl	801f85c <__sfp_lock_release>
 801f96c:	230c      	movs	r3, #12
 801f96e:	603b      	str	r3, [r7, #0]
 801f970:	e7ee      	b.n	801f950 <__sfp+0x60>
 801f972:	bf00      	nop
 801f974:	0807ada0 	.word	0x0807ada0
 801f978:	ffff0001 	.word	0xffff0001

0801f97c <fiprintf>:
 801f97c:	b40e      	push	{r1, r2, r3}
 801f97e:	b503      	push	{r0, r1, lr}
 801f980:	4601      	mov	r1, r0
 801f982:	ab03      	add	r3, sp, #12
 801f984:	4805      	ldr	r0, [pc, #20]	; (801f99c <fiprintf+0x20>)
 801f986:	f853 2b04 	ldr.w	r2, [r3], #4
 801f98a:	6800      	ldr	r0, [r0, #0]
 801f98c:	9301      	str	r3, [sp, #4]
 801f98e:	f000 fcc3 	bl	8020318 <_vfiprintf_r>
 801f992:	b002      	add	sp, #8
 801f994:	f85d eb04 	ldr.w	lr, [sp], #4
 801f998:	b003      	add	sp, #12
 801f99a:	4770      	bx	lr
 801f99c:	20000040 	.word	0x20000040

0801f9a0 <_fwalk_reent>:
 801f9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f9a4:	4606      	mov	r6, r0
 801f9a6:	4688      	mov	r8, r1
 801f9a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f9ac:	2700      	movs	r7, #0
 801f9ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f9b2:	f1b9 0901 	subs.w	r9, r9, #1
 801f9b6:	d505      	bpl.n	801f9c4 <_fwalk_reent+0x24>
 801f9b8:	6824      	ldr	r4, [r4, #0]
 801f9ba:	2c00      	cmp	r4, #0
 801f9bc:	d1f7      	bne.n	801f9ae <_fwalk_reent+0xe>
 801f9be:	4638      	mov	r0, r7
 801f9c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f9c4:	89ab      	ldrh	r3, [r5, #12]
 801f9c6:	2b01      	cmp	r3, #1
 801f9c8:	d907      	bls.n	801f9da <_fwalk_reent+0x3a>
 801f9ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f9ce:	3301      	adds	r3, #1
 801f9d0:	d003      	beq.n	801f9da <_fwalk_reent+0x3a>
 801f9d2:	4629      	mov	r1, r5
 801f9d4:	4630      	mov	r0, r6
 801f9d6:	47c0      	blx	r8
 801f9d8:	4307      	orrs	r7, r0
 801f9da:	3568      	adds	r5, #104	; 0x68
 801f9dc:	e7e9      	b.n	801f9b2 <_fwalk_reent+0x12>

0801f9de <__retarget_lock_init_recursive>:
 801f9de:	4770      	bx	lr

0801f9e0 <__retarget_lock_acquire_recursive>:
 801f9e0:	4770      	bx	lr

0801f9e2 <__retarget_lock_release_recursive>:
 801f9e2:	4770      	bx	lr

0801f9e4 <_lseek_r>:
 801f9e4:	b538      	push	{r3, r4, r5, lr}
 801f9e6:	4d07      	ldr	r5, [pc, #28]	; (801fa04 <_lseek_r+0x20>)
 801f9e8:	4604      	mov	r4, r0
 801f9ea:	4608      	mov	r0, r1
 801f9ec:	4611      	mov	r1, r2
 801f9ee:	2200      	movs	r2, #0
 801f9f0:	602a      	str	r2, [r5, #0]
 801f9f2:	461a      	mov	r2, r3
 801f9f4:	f7e2 f968 	bl	8001cc8 <_lseek>
 801f9f8:	1c43      	adds	r3, r0, #1
 801f9fa:	d102      	bne.n	801fa02 <_lseek_r+0x1e>
 801f9fc:	682b      	ldr	r3, [r5, #0]
 801f9fe:	b103      	cbz	r3, 801fa02 <_lseek_r+0x1e>
 801fa00:	6023      	str	r3, [r4, #0]
 801fa02:	bd38      	pop	{r3, r4, r5, pc}
 801fa04:	20014778 	.word	0x20014778

0801fa08 <__swhatbuf_r>:
 801fa08:	b570      	push	{r4, r5, r6, lr}
 801fa0a:	460e      	mov	r6, r1
 801fa0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa10:	2900      	cmp	r1, #0
 801fa12:	b096      	sub	sp, #88	; 0x58
 801fa14:	4614      	mov	r4, r2
 801fa16:	461d      	mov	r5, r3
 801fa18:	da07      	bge.n	801fa2a <__swhatbuf_r+0x22>
 801fa1a:	2300      	movs	r3, #0
 801fa1c:	602b      	str	r3, [r5, #0]
 801fa1e:	89b3      	ldrh	r3, [r6, #12]
 801fa20:	061a      	lsls	r2, r3, #24
 801fa22:	d410      	bmi.n	801fa46 <__swhatbuf_r+0x3e>
 801fa24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fa28:	e00e      	b.n	801fa48 <__swhatbuf_r+0x40>
 801fa2a:	466a      	mov	r2, sp
 801fa2c:	f001 f9ae 	bl	8020d8c <_fstat_r>
 801fa30:	2800      	cmp	r0, #0
 801fa32:	dbf2      	blt.n	801fa1a <__swhatbuf_r+0x12>
 801fa34:	9a01      	ldr	r2, [sp, #4]
 801fa36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fa3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fa3e:	425a      	negs	r2, r3
 801fa40:	415a      	adcs	r2, r3
 801fa42:	602a      	str	r2, [r5, #0]
 801fa44:	e7ee      	b.n	801fa24 <__swhatbuf_r+0x1c>
 801fa46:	2340      	movs	r3, #64	; 0x40
 801fa48:	2000      	movs	r0, #0
 801fa4a:	6023      	str	r3, [r4, #0]
 801fa4c:	b016      	add	sp, #88	; 0x58
 801fa4e:	bd70      	pop	{r4, r5, r6, pc}

0801fa50 <__smakebuf_r>:
 801fa50:	898b      	ldrh	r3, [r1, #12]
 801fa52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fa54:	079d      	lsls	r5, r3, #30
 801fa56:	4606      	mov	r6, r0
 801fa58:	460c      	mov	r4, r1
 801fa5a:	d507      	bpl.n	801fa6c <__smakebuf_r+0x1c>
 801fa5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fa60:	6023      	str	r3, [r4, #0]
 801fa62:	6123      	str	r3, [r4, #16]
 801fa64:	2301      	movs	r3, #1
 801fa66:	6163      	str	r3, [r4, #20]
 801fa68:	b002      	add	sp, #8
 801fa6a:	bd70      	pop	{r4, r5, r6, pc}
 801fa6c:	ab01      	add	r3, sp, #4
 801fa6e:	466a      	mov	r2, sp
 801fa70:	f7ff ffca 	bl	801fa08 <__swhatbuf_r>
 801fa74:	9900      	ldr	r1, [sp, #0]
 801fa76:	4605      	mov	r5, r0
 801fa78:	4630      	mov	r0, r6
 801fa7a:	f000 f89b 	bl	801fbb4 <_malloc_r>
 801fa7e:	b948      	cbnz	r0, 801fa94 <__smakebuf_r+0x44>
 801fa80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fa84:	059a      	lsls	r2, r3, #22
 801fa86:	d4ef      	bmi.n	801fa68 <__smakebuf_r+0x18>
 801fa88:	f023 0303 	bic.w	r3, r3, #3
 801fa8c:	f043 0302 	orr.w	r3, r3, #2
 801fa90:	81a3      	strh	r3, [r4, #12]
 801fa92:	e7e3      	b.n	801fa5c <__smakebuf_r+0xc>
 801fa94:	4b0d      	ldr	r3, [pc, #52]	; (801facc <__smakebuf_r+0x7c>)
 801fa96:	62b3      	str	r3, [r6, #40]	; 0x28
 801fa98:	89a3      	ldrh	r3, [r4, #12]
 801fa9a:	6020      	str	r0, [r4, #0]
 801fa9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801faa0:	81a3      	strh	r3, [r4, #12]
 801faa2:	9b00      	ldr	r3, [sp, #0]
 801faa4:	6163      	str	r3, [r4, #20]
 801faa6:	9b01      	ldr	r3, [sp, #4]
 801faa8:	6120      	str	r0, [r4, #16]
 801faaa:	b15b      	cbz	r3, 801fac4 <__smakebuf_r+0x74>
 801faac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fab0:	4630      	mov	r0, r6
 801fab2:	f001 f97d 	bl	8020db0 <_isatty_r>
 801fab6:	b128      	cbz	r0, 801fac4 <__smakebuf_r+0x74>
 801fab8:	89a3      	ldrh	r3, [r4, #12]
 801faba:	f023 0303 	bic.w	r3, r3, #3
 801fabe:	f043 0301 	orr.w	r3, r3, #1
 801fac2:	81a3      	strh	r3, [r4, #12]
 801fac4:	89a0      	ldrh	r0, [r4, #12]
 801fac6:	4305      	orrs	r5, r0
 801fac8:	81a5      	strh	r5, [r4, #12]
 801faca:	e7cd      	b.n	801fa68 <__smakebuf_r+0x18>
 801facc:	0801f819 	.word	0x0801f819

0801fad0 <malloc>:
 801fad0:	4b02      	ldr	r3, [pc, #8]	; (801fadc <malloc+0xc>)
 801fad2:	4601      	mov	r1, r0
 801fad4:	6818      	ldr	r0, [r3, #0]
 801fad6:	f000 b86d 	b.w	801fbb4 <_malloc_r>
 801fada:	bf00      	nop
 801fadc:	20000040 	.word	0x20000040

0801fae0 <memmem>:
 801fae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fae2:	b17b      	cbz	r3, 801fb04 <memmem+0x24>
 801fae4:	1ac9      	subs	r1, r1, r3
 801fae6:	7816      	ldrb	r6, [r2, #0]
 801fae8:	4401      	add	r1, r0
 801faea:	4605      	mov	r5, r0
 801faec:	428d      	cmp	r5, r1
 801faee:	4628      	mov	r0, r5
 801faf0:	d901      	bls.n	801faf6 <memmem+0x16>
 801faf2:	2000      	movs	r0, #0
 801faf4:	e006      	b.n	801fb04 <memmem+0x24>
 801faf6:	7804      	ldrb	r4, [r0, #0]
 801faf8:	42b4      	cmp	r4, r6
 801fafa:	f105 0501 	add.w	r5, r5, #1
 801fafe:	d1f5      	bne.n	801faec <memmem+0xc>
 801fb00:	1e5c      	subs	r4, r3, #1
 801fb02:	b904      	cbnz	r4, 801fb06 <memmem+0x26>
 801fb04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb06:	f810 c004 	ldrb.w	ip, [r0, r4]
 801fb0a:	5d17      	ldrb	r7, [r2, r4]
 801fb0c:	45bc      	cmp	ip, r7
 801fb0e:	d1ed      	bne.n	801faec <memmem+0xc>
 801fb10:	3c01      	subs	r4, #1
 801fb12:	e7f6      	b.n	801fb02 <memmem+0x22>

0801fb14 <_free_r>:
 801fb14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fb16:	2900      	cmp	r1, #0
 801fb18:	d048      	beq.n	801fbac <_free_r+0x98>
 801fb1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fb1e:	9001      	str	r0, [sp, #4]
 801fb20:	2b00      	cmp	r3, #0
 801fb22:	f1a1 0404 	sub.w	r4, r1, #4
 801fb26:	bfb8      	it	lt
 801fb28:	18e4      	addlt	r4, r4, r3
 801fb2a:	f001 f951 	bl	8020dd0 <__malloc_lock>
 801fb2e:	4a20      	ldr	r2, [pc, #128]	; (801fbb0 <_free_r+0x9c>)
 801fb30:	9801      	ldr	r0, [sp, #4]
 801fb32:	6813      	ldr	r3, [r2, #0]
 801fb34:	4615      	mov	r5, r2
 801fb36:	b933      	cbnz	r3, 801fb46 <_free_r+0x32>
 801fb38:	6063      	str	r3, [r4, #4]
 801fb3a:	6014      	str	r4, [r2, #0]
 801fb3c:	b003      	add	sp, #12
 801fb3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fb42:	f001 b94b 	b.w	8020ddc <__malloc_unlock>
 801fb46:	42a3      	cmp	r3, r4
 801fb48:	d90b      	bls.n	801fb62 <_free_r+0x4e>
 801fb4a:	6821      	ldr	r1, [r4, #0]
 801fb4c:	1862      	adds	r2, r4, r1
 801fb4e:	4293      	cmp	r3, r2
 801fb50:	bf04      	itt	eq
 801fb52:	681a      	ldreq	r2, [r3, #0]
 801fb54:	685b      	ldreq	r3, [r3, #4]
 801fb56:	6063      	str	r3, [r4, #4]
 801fb58:	bf04      	itt	eq
 801fb5a:	1852      	addeq	r2, r2, r1
 801fb5c:	6022      	streq	r2, [r4, #0]
 801fb5e:	602c      	str	r4, [r5, #0]
 801fb60:	e7ec      	b.n	801fb3c <_free_r+0x28>
 801fb62:	461a      	mov	r2, r3
 801fb64:	685b      	ldr	r3, [r3, #4]
 801fb66:	b10b      	cbz	r3, 801fb6c <_free_r+0x58>
 801fb68:	42a3      	cmp	r3, r4
 801fb6a:	d9fa      	bls.n	801fb62 <_free_r+0x4e>
 801fb6c:	6811      	ldr	r1, [r2, #0]
 801fb6e:	1855      	adds	r5, r2, r1
 801fb70:	42a5      	cmp	r5, r4
 801fb72:	d10b      	bne.n	801fb8c <_free_r+0x78>
 801fb74:	6824      	ldr	r4, [r4, #0]
 801fb76:	4421      	add	r1, r4
 801fb78:	1854      	adds	r4, r2, r1
 801fb7a:	42a3      	cmp	r3, r4
 801fb7c:	6011      	str	r1, [r2, #0]
 801fb7e:	d1dd      	bne.n	801fb3c <_free_r+0x28>
 801fb80:	681c      	ldr	r4, [r3, #0]
 801fb82:	685b      	ldr	r3, [r3, #4]
 801fb84:	6053      	str	r3, [r2, #4]
 801fb86:	4421      	add	r1, r4
 801fb88:	6011      	str	r1, [r2, #0]
 801fb8a:	e7d7      	b.n	801fb3c <_free_r+0x28>
 801fb8c:	d902      	bls.n	801fb94 <_free_r+0x80>
 801fb8e:	230c      	movs	r3, #12
 801fb90:	6003      	str	r3, [r0, #0]
 801fb92:	e7d3      	b.n	801fb3c <_free_r+0x28>
 801fb94:	6825      	ldr	r5, [r4, #0]
 801fb96:	1961      	adds	r1, r4, r5
 801fb98:	428b      	cmp	r3, r1
 801fb9a:	bf04      	itt	eq
 801fb9c:	6819      	ldreq	r1, [r3, #0]
 801fb9e:	685b      	ldreq	r3, [r3, #4]
 801fba0:	6063      	str	r3, [r4, #4]
 801fba2:	bf04      	itt	eq
 801fba4:	1949      	addeq	r1, r1, r5
 801fba6:	6021      	streq	r1, [r4, #0]
 801fba8:	6054      	str	r4, [r2, #4]
 801fbaa:	e7c7      	b.n	801fb3c <_free_r+0x28>
 801fbac:	b003      	add	sp, #12
 801fbae:	bd30      	pop	{r4, r5, pc}
 801fbb0:	2000c938 	.word	0x2000c938

0801fbb4 <_malloc_r>:
 801fbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbb6:	1ccd      	adds	r5, r1, #3
 801fbb8:	f025 0503 	bic.w	r5, r5, #3
 801fbbc:	3508      	adds	r5, #8
 801fbbe:	2d0c      	cmp	r5, #12
 801fbc0:	bf38      	it	cc
 801fbc2:	250c      	movcc	r5, #12
 801fbc4:	2d00      	cmp	r5, #0
 801fbc6:	4606      	mov	r6, r0
 801fbc8:	db01      	blt.n	801fbce <_malloc_r+0x1a>
 801fbca:	42a9      	cmp	r1, r5
 801fbcc:	d903      	bls.n	801fbd6 <_malloc_r+0x22>
 801fbce:	230c      	movs	r3, #12
 801fbd0:	6033      	str	r3, [r6, #0]
 801fbd2:	2000      	movs	r0, #0
 801fbd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fbd6:	f001 f8fb 	bl	8020dd0 <__malloc_lock>
 801fbda:	4921      	ldr	r1, [pc, #132]	; (801fc60 <_malloc_r+0xac>)
 801fbdc:	680a      	ldr	r2, [r1, #0]
 801fbde:	4614      	mov	r4, r2
 801fbe0:	b99c      	cbnz	r4, 801fc0a <_malloc_r+0x56>
 801fbe2:	4f20      	ldr	r7, [pc, #128]	; (801fc64 <_malloc_r+0xb0>)
 801fbe4:	683b      	ldr	r3, [r7, #0]
 801fbe6:	b923      	cbnz	r3, 801fbf2 <_malloc_r+0x3e>
 801fbe8:	4621      	mov	r1, r4
 801fbea:	4630      	mov	r0, r6
 801fbec:	f000 ffb6 	bl	8020b5c <_sbrk_r>
 801fbf0:	6038      	str	r0, [r7, #0]
 801fbf2:	4629      	mov	r1, r5
 801fbf4:	4630      	mov	r0, r6
 801fbf6:	f000 ffb1 	bl	8020b5c <_sbrk_r>
 801fbfa:	1c43      	adds	r3, r0, #1
 801fbfc:	d123      	bne.n	801fc46 <_malloc_r+0x92>
 801fbfe:	230c      	movs	r3, #12
 801fc00:	6033      	str	r3, [r6, #0]
 801fc02:	4630      	mov	r0, r6
 801fc04:	f001 f8ea 	bl	8020ddc <__malloc_unlock>
 801fc08:	e7e3      	b.n	801fbd2 <_malloc_r+0x1e>
 801fc0a:	6823      	ldr	r3, [r4, #0]
 801fc0c:	1b5b      	subs	r3, r3, r5
 801fc0e:	d417      	bmi.n	801fc40 <_malloc_r+0x8c>
 801fc10:	2b0b      	cmp	r3, #11
 801fc12:	d903      	bls.n	801fc1c <_malloc_r+0x68>
 801fc14:	6023      	str	r3, [r4, #0]
 801fc16:	441c      	add	r4, r3
 801fc18:	6025      	str	r5, [r4, #0]
 801fc1a:	e004      	b.n	801fc26 <_malloc_r+0x72>
 801fc1c:	6863      	ldr	r3, [r4, #4]
 801fc1e:	42a2      	cmp	r2, r4
 801fc20:	bf0c      	ite	eq
 801fc22:	600b      	streq	r3, [r1, #0]
 801fc24:	6053      	strne	r3, [r2, #4]
 801fc26:	4630      	mov	r0, r6
 801fc28:	f001 f8d8 	bl	8020ddc <__malloc_unlock>
 801fc2c:	f104 000b 	add.w	r0, r4, #11
 801fc30:	1d23      	adds	r3, r4, #4
 801fc32:	f020 0007 	bic.w	r0, r0, #7
 801fc36:	1ac2      	subs	r2, r0, r3
 801fc38:	d0cc      	beq.n	801fbd4 <_malloc_r+0x20>
 801fc3a:	1a1b      	subs	r3, r3, r0
 801fc3c:	50a3      	str	r3, [r4, r2]
 801fc3e:	e7c9      	b.n	801fbd4 <_malloc_r+0x20>
 801fc40:	4622      	mov	r2, r4
 801fc42:	6864      	ldr	r4, [r4, #4]
 801fc44:	e7cc      	b.n	801fbe0 <_malloc_r+0x2c>
 801fc46:	1cc4      	adds	r4, r0, #3
 801fc48:	f024 0403 	bic.w	r4, r4, #3
 801fc4c:	42a0      	cmp	r0, r4
 801fc4e:	d0e3      	beq.n	801fc18 <_malloc_r+0x64>
 801fc50:	1a21      	subs	r1, r4, r0
 801fc52:	4630      	mov	r0, r6
 801fc54:	f000 ff82 	bl	8020b5c <_sbrk_r>
 801fc58:	3001      	adds	r0, #1
 801fc5a:	d1dd      	bne.n	801fc18 <_malloc_r+0x64>
 801fc5c:	e7cf      	b.n	801fbfe <_malloc_r+0x4a>
 801fc5e:	bf00      	nop
 801fc60:	2000c938 	.word	0x2000c938
 801fc64:	2000c93c 	.word	0x2000c93c

0801fc68 <__ssputs_r>:
 801fc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fc6c:	688e      	ldr	r6, [r1, #8]
 801fc6e:	429e      	cmp	r6, r3
 801fc70:	4682      	mov	sl, r0
 801fc72:	460c      	mov	r4, r1
 801fc74:	4690      	mov	r8, r2
 801fc76:	461f      	mov	r7, r3
 801fc78:	d838      	bhi.n	801fcec <__ssputs_r+0x84>
 801fc7a:	898a      	ldrh	r2, [r1, #12]
 801fc7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801fc80:	d032      	beq.n	801fce8 <__ssputs_r+0x80>
 801fc82:	6825      	ldr	r5, [r4, #0]
 801fc84:	6909      	ldr	r1, [r1, #16]
 801fc86:	eba5 0901 	sub.w	r9, r5, r1
 801fc8a:	6965      	ldr	r5, [r4, #20]
 801fc8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fc90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801fc94:	3301      	adds	r3, #1
 801fc96:	444b      	add	r3, r9
 801fc98:	106d      	asrs	r5, r5, #1
 801fc9a:	429d      	cmp	r5, r3
 801fc9c:	bf38      	it	cc
 801fc9e:	461d      	movcc	r5, r3
 801fca0:	0553      	lsls	r3, r2, #21
 801fca2:	d531      	bpl.n	801fd08 <__ssputs_r+0xa0>
 801fca4:	4629      	mov	r1, r5
 801fca6:	f7ff ff85 	bl	801fbb4 <_malloc_r>
 801fcaa:	4606      	mov	r6, r0
 801fcac:	b950      	cbnz	r0, 801fcc4 <__ssputs_r+0x5c>
 801fcae:	230c      	movs	r3, #12
 801fcb0:	f8ca 3000 	str.w	r3, [sl]
 801fcb4:	89a3      	ldrh	r3, [r4, #12]
 801fcb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fcba:	81a3      	strh	r3, [r4, #12]
 801fcbc:	f04f 30ff 	mov.w	r0, #4294967295
 801fcc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fcc4:	6921      	ldr	r1, [r4, #16]
 801fcc6:	464a      	mov	r2, r9
 801fcc8:	f7ff f910 	bl	801eeec <memcpy>
 801fccc:	89a3      	ldrh	r3, [r4, #12]
 801fcce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fcd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fcd6:	81a3      	strh	r3, [r4, #12]
 801fcd8:	6126      	str	r6, [r4, #16]
 801fcda:	6165      	str	r5, [r4, #20]
 801fcdc:	444e      	add	r6, r9
 801fcde:	eba5 0509 	sub.w	r5, r5, r9
 801fce2:	6026      	str	r6, [r4, #0]
 801fce4:	60a5      	str	r5, [r4, #8]
 801fce6:	463e      	mov	r6, r7
 801fce8:	42be      	cmp	r6, r7
 801fcea:	d900      	bls.n	801fcee <__ssputs_r+0x86>
 801fcec:	463e      	mov	r6, r7
 801fcee:	4632      	mov	r2, r6
 801fcf0:	6820      	ldr	r0, [r4, #0]
 801fcf2:	4641      	mov	r1, r8
 801fcf4:	f7ff f908 	bl	801ef08 <memmove>
 801fcf8:	68a3      	ldr	r3, [r4, #8]
 801fcfa:	6822      	ldr	r2, [r4, #0]
 801fcfc:	1b9b      	subs	r3, r3, r6
 801fcfe:	4432      	add	r2, r6
 801fd00:	60a3      	str	r3, [r4, #8]
 801fd02:	6022      	str	r2, [r4, #0]
 801fd04:	2000      	movs	r0, #0
 801fd06:	e7db      	b.n	801fcc0 <__ssputs_r+0x58>
 801fd08:	462a      	mov	r2, r5
 801fd0a:	f001 f86d 	bl	8020de8 <_realloc_r>
 801fd0e:	4606      	mov	r6, r0
 801fd10:	2800      	cmp	r0, #0
 801fd12:	d1e1      	bne.n	801fcd8 <__ssputs_r+0x70>
 801fd14:	6921      	ldr	r1, [r4, #16]
 801fd16:	4650      	mov	r0, sl
 801fd18:	f7ff fefc 	bl	801fb14 <_free_r>
 801fd1c:	e7c7      	b.n	801fcae <__ssputs_r+0x46>
	...

0801fd20 <_svfiprintf_r>:
 801fd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd24:	4698      	mov	r8, r3
 801fd26:	898b      	ldrh	r3, [r1, #12]
 801fd28:	061b      	lsls	r3, r3, #24
 801fd2a:	b09d      	sub	sp, #116	; 0x74
 801fd2c:	4607      	mov	r7, r0
 801fd2e:	460d      	mov	r5, r1
 801fd30:	4614      	mov	r4, r2
 801fd32:	d50e      	bpl.n	801fd52 <_svfiprintf_r+0x32>
 801fd34:	690b      	ldr	r3, [r1, #16]
 801fd36:	b963      	cbnz	r3, 801fd52 <_svfiprintf_r+0x32>
 801fd38:	2140      	movs	r1, #64	; 0x40
 801fd3a:	f7ff ff3b 	bl	801fbb4 <_malloc_r>
 801fd3e:	6028      	str	r0, [r5, #0]
 801fd40:	6128      	str	r0, [r5, #16]
 801fd42:	b920      	cbnz	r0, 801fd4e <_svfiprintf_r+0x2e>
 801fd44:	230c      	movs	r3, #12
 801fd46:	603b      	str	r3, [r7, #0]
 801fd48:	f04f 30ff 	mov.w	r0, #4294967295
 801fd4c:	e0d1      	b.n	801fef2 <_svfiprintf_r+0x1d2>
 801fd4e:	2340      	movs	r3, #64	; 0x40
 801fd50:	616b      	str	r3, [r5, #20]
 801fd52:	2300      	movs	r3, #0
 801fd54:	9309      	str	r3, [sp, #36]	; 0x24
 801fd56:	2320      	movs	r3, #32
 801fd58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fd5c:	f8cd 800c 	str.w	r8, [sp, #12]
 801fd60:	2330      	movs	r3, #48	; 0x30
 801fd62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ff0c <_svfiprintf_r+0x1ec>
 801fd66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fd6a:	f04f 0901 	mov.w	r9, #1
 801fd6e:	4623      	mov	r3, r4
 801fd70:	469a      	mov	sl, r3
 801fd72:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fd76:	b10a      	cbz	r2, 801fd7c <_svfiprintf_r+0x5c>
 801fd78:	2a25      	cmp	r2, #37	; 0x25
 801fd7a:	d1f9      	bne.n	801fd70 <_svfiprintf_r+0x50>
 801fd7c:	ebba 0b04 	subs.w	fp, sl, r4
 801fd80:	d00b      	beq.n	801fd9a <_svfiprintf_r+0x7a>
 801fd82:	465b      	mov	r3, fp
 801fd84:	4622      	mov	r2, r4
 801fd86:	4629      	mov	r1, r5
 801fd88:	4638      	mov	r0, r7
 801fd8a:	f7ff ff6d 	bl	801fc68 <__ssputs_r>
 801fd8e:	3001      	adds	r0, #1
 801fd90:	f000 80aa 	beq.w	801fee8 <_svfiprintf_r+0x1c8>
 801fd94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fd96:	445a      	add	r2, fp
 801fd98:	9209      	str	r2, [sp, #36]	; 0x24
 801fd9a:	f89a 3000 	ldrb.w	r3, [sl]
 801fd9e:	2b00      	cmp	r3, #0
 801fda0:	f000 80a2 	beq.w	801fee8 <_svfiprintf_r+0x1c8>
 801fda4:	2300      	movs	r3, #0
 801fda6:	f04f 32ff 	mov.w	r2, #4294967295
 801fdaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fdae:	f10a 0a01 	add.w	sl, sl, #1
 801fdb2:	9304      	str	r3, [sp, #16]
 801fdb4:	9307      	str	r3, [sp, #28]
 801fdb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fdba:	931a      	str	r3, [sp, #104]	; 0x68
 801fdbc:	4654      	mov	r4, sl
 801fdbe:	2205      	movs	r2, #5
 801fdc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fdc4:	4851      	ldr	r0, [pc, #324]	; (801ff0c <_svfiprintf_r+0x1ec>)
 801fdc6:	f7e0 fa1b 	bl	8000200 <memchr>
 801fdca:	9a04      	ldr	r2, [sp, #16]
 801fdcc:	b9d8      	cbnz	r0, 801fe06 <_svfiprintf_r+0xe6>
 801fdce:	06d0      	lsls	r0, r2, #27
 801fdd0:	bf44      	itt	mi
 801fdd2:	2320      	movmi	r3, #32
 801fdd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fdd8:	0711      	lsls	r1, r2, #28
 801fdda:	bf44      	itt	mi
 801fddc:	232b      	movmi	r3, #43	; 0x2b
 801fdde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fde2:	f89a 3000 	ldrb.w	r3, [sl]
 801fde6:	2b2a      	cmp	r3, #42	; 0x2a
 801fde8:	d015      	beq.n	801fe16 <_svfiprintf_r+0xf6>
 801fdea:	9a07      	ldr	r2, [sp, #28]
 801fdec:	4654      	mov	r4, sl
 801fdee:	2000      	movs	r0, #0
 801fdf0:	f04f 0c0a 	mov.w	ip, #10
 801fdf4:	4621      	mov	r1, r4
 801fdf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fdfa:	3b30      	subs	r3, #48	; 0x30
 801fdfc:	2b09      	cmp	r3, #9
 801fdfe:	d94e      	bls.n	801fe9e <_svfiprintf_r+0x17e>
 801fe00:	b1b0      	cbz	r0, 801fe30 <_svfiprintf_r+0x110>
 801fe02:	9207      	str	r2, [sp, #28]
 801fe04:	e014      	b.n	801fe30 <_svfiprintf_r+0x110>
 801fe06:	eba0 0308 	sub.w	r3, r0, r8
 801fe0a:	fa09 f303 	lsl.w	r3, r9, r3
 801fe0e:	4313      	orrs	r3, r2
 801fe10:	9304      	str	r3, [sp, #16]
 801fe12:	46a2      	mov	sl, r4
 801fe14:	e7d2      	b.n	801fdbc <_svfiprintf_r+0x9c>
 801fe16:	9b03      	ldr	r3, [sp, #12]
 801fe18:	1d19      	adds	r1, r3, #4
 801fe1a:	681b      	ldr	r3, [r3, #0]
 801fe1c:	9103      	str	r1, [sp, #12]
 801fe1e:	2b00      	cmp	r3, #0
 801fe20:	bfbb      	ittet	lt
 801fe22:	425b      	neglt	r3, r3
 801fe24:	f042 0202 	orrlt.w	r2, r2, #2
 801fe28:	9307      	strge	r3, [sp, #28]
 801fe2a:	9307      	strlt	r3, [sp, #28]
 801fe2c:	bfb8      	it	lt
 801fe2e:	9204      	strlt	r2, [sp, #16]
 801fe30:	7823      	ldrb	r3, [r4, #0]
 801fe32:	2b2e      	cmp	r3, #46	; 0x2e
 801fe34:	d10c      	bne.n	801fe50 <_svfiprintf_r+0x130>
 801fe36:	7863      	ldrb	r3, [r4, #1]
 801fe38:	2b2a      	cmp	r3, #42	; 0x2a
 801fe3a:	d135      	bne.n	801fea8 <_svfiprintf_r+0x188>
 801fe3c:	9b03      	ldr	r3, [sp, #12]
 801fe3e:	1d1a      	adds	r2, r3, #4
 801fe40:	681b      	ldr	r3, [r3, #0]
 801fe42:	9203      	str	r2, [sp, #12]
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	bfb8      	it	lt
 801fe48:	f04f 33ff 	movlt.w	r3, #4294967295
 801fe4c:	3402      	adds	r4, #2
 801fe4e:	9305      	str	r3, [sp, #20]
 801fe50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ff1c <_svfiprintf_r+0x1fc>
 801fe54:	7821      	ldrb	r1, [r4, #0]
 801fe56:	2203      	movs	r2, #3
 801fe58:	4650      	mov	r0, sl
 801fe5a:	f7e0 f9d1 	bl	8000200 <memchr>
 801fe5e:	b140      	cbz	r0, 801fe72 <_svfiprintf_r+0x152>
 801fe60:	2340      	movs	r3, #64	; 0x40
 801fe62:	eba0 000a 	sub.w	r0, r0, sl
 801fe66:	fa03 f000 	lsl.w	r0, r3, r0
 801fe6a:	9b04      	ldr	r3, [sp, #16]
 801fe6c:	4303      	orrs	r3, r0
 801fe6e:	3401      	adds	r4, #1
 801fe70:	9304      	str	r3, [sp, #16]
 801fe72:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fe76:	4826      	ldr	r0, [pc, #152]	; (801ff10 <_svfiprintf_r+0x1f0>)
 801fe78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fe7c:	2206      	movs	r2, #6
 801fe7e:	f7e0 f9bf 	bl	8000200 <memchr>
 801fe82:	2800      	cmp	r0, #0
 801fe84:	d038      	beq.n	801fef8 <_svfiprintf_r+0x1d8>
 801fe86:	4b23      	ldr	r3, [pc, #140]	; (801ff14 <_svfiprintf_r+0x1f4>)
 801fe88:	bb1b      	cbnz	r3, 801fed2 <_svfiprintf_r+0x1b2>
 801fe8a:	9b03      	ldr	r3, [sp, #12]
 801fe8c:	3307      	adds	r3, #7
 801fe8e:	f023 0307 	bic.w	r3, r3, #7
 801fe92:	3308      	adds	r3, #8
 801fe94:	9303      	str	r3, [sp, #12]
 801fe96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe98:	4433      	add	r3, r6
 801fe9a:	9309      	str	r3, [sp, #36]	; 0x24
 801fe9c:	e767      	b.n	801fd6e <_svfiprintf_r+0x4e>
 801fe9e:	fb0c 3202 	mla	r2, ip, r2, r3
 801fea2:	460c      	mov	r4, r1
 801fea4:	2001      	movs	r0, #1
 801fea6:	e7a5      	b.n	801fdf4 <_svfiprintf_r+0xd4>
 801fea8:	2300      	movs	r3, #0
 801feaa:	3401      	adds	r4, #1
 801feac:	9305      	str	r3, [sp, #20]
 801feae:	4619      	mov	r1, r3
 801feb0:	f04f 0c0a 	mov.w	ip, #10
 801feb4:	4620      	mov	r0, r4
 801feb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801feba:	3a30      	subs	r2, #48	; 0x30
 801febc:	2a09      	cmp	r2, #9
 801febe:	d903      	bls.n	801fec8 <_svfiprintf_r+0x1a8>
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	d0c5      	beq.n	801fe50 <_svfiprintf_r+0x130>
 801fec4:	9105      	str	r1, [sp, #20]
 801fec6:	e7c3      	b.n	801fe50 <_svfiprintf_r+0x130>
 801fec8:	fb0c 2101 	mla	r1, ip, r1, r2
 801fecc:	4604      	mov	r4, r0
 801fece:	2301      	movs	r3, #1
 801fed0:	e7f0      	b.n	801feb4 <_svfiprintf_r+0x194>
 801fed2:	ab03      	add	r3, sp, #12
 801fed4:	9300      	str	r3, [sp, #0]
 801fed6:	462a      	mov	r2, r5
 801fed8:	4b0f      	ldr	r3, [pc, #60]	; (801ff18 <_svfiprintf_r+0x1f8>)
 801feda:	a904      	add	r1, sp, #16
 801fedc:	4638      	mov	r0, r7
 801fede:	f3af 8000 	nop.w
 801fee2:	1c42      	adds	r2, r0, #1
 801fee4:	4606      	mov	r6, r0
 801fee6:	d1d6      	bne.n	801fe96 <_svfiprintf_r+0x176>
 801fee8:	89ab      	ldrh	r3, [r5, #12]
 801feea:	065b      	lsls	r3, r3, #25
 801feec:	f53f af2c 	bmi.w	801fd48 <_svfiprintf_r+0x28>
 801fef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fef2:	b01d      	add	sp, #116	; 0x74
 801fef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fef8:	ab03      	add	r3, sp, #12
 801fefa:	9300      	str	r3, [sp, #0]
 801fefc:	462a      	mov	r2, r5
 801fefe:	4b06      	ldr	r3, [pc, #24]	; (801ff18 <_svfiprintf_r+0x1f8>)
 801ff00:	a904      	add	r1, sp, #16
 801ff02:	4638      	mov	r0, r7
 801ff04:	f000 fba6 	bl	8020654 <_printf_i>
 801ff08:	e7eb      	b.n	801fee2 <_svfiprintf_r+0x1c2>
 801ff0a:	bf00      	nop
 801ff0c:	0807aeb8 	.word	0x0807aeb8
 801ff10:	0807aec2 	.word	0x0807aec2
 801ff14:	00000000 	.word	0x00000000
 801ff18:	0801fc69 	.word	0x0801fc69
 801ff1c:	0807aebe 	.word	0x0807aebe

0801ff20 <_sungetc_r>:
 801ff20:	b538      	push	{r3, r4, r5, lr}
 801ff22:	1c4b      	adds	r3, r1, #1
 801ff24:	4614      	mov	r4, r2
 801ff26:	d103      	bne.n	801ff30 <_sungetc_r+0x10>
 801ff28:	f04f 35ff 	mov.w	r5, #4294967295
 801ff2c:	4628      	mov	r0, r5
 801ff2e:	bd38      	pop	{r3, r4, r5, pc}
 801ff30:	8993      	ldrh	r3, [r2, #12]
 801ff32:	f023 0320 	bic.w	r3, r3, #32
 801ff36:	8193      	strh	r3, [r2, #12]
 801ff38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ff3a:	6852      	ldr	r2, [r2, #4]
 801ff3c:	b2cd      	uxtb	r5, r1
 801ff3e:	b18b      	cbz	r3, 801ff64 <_sungetc_r+0x44>
 801ff40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ff42:	4293      	cmp	r3, r2
 801ff44:	dd08      	ble.n	801ff58 <_sungetc_r+0x38>
 801ff46:	6823      	ldr	r3, [r4, #0]
 801ff48:	1e5a      	subs	r2, r3, #1
 801ff4a:	6022      	str	r2, [r4, #0]
 801ff4c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801ff50:	6863      	ldr	r3, [r4, #4]
 801ff52:	3301      	adds	r3, #1
 801ff54:	6063      	str	r3, [r4, #4]
 801ff56:	e7e9      	b.n	801ff2c <_sungetc_r+0xc>
 801ff58:	4621      	mov	r1, r4
 801ff5a:	f000 fed5 	bl	8020d08 <__submore>
 801ff5e:	2800      	cmp	r0, #0
 801ff60:	d0f1      	beq.n	801ff46 <_sungetc_r+0x26>
 801ff62:	e7e1      	b.n	801ff28 <_sungetc_r+0x8>
 801ff64:	6921      	ldr	r1, [r4, #16]
 801ff66:	6823      	ldr	r3, [r4, #0]
 801ff68:	b151      	cbz	r1, 801ff80 <_sungetc_r+0x60>
 801ff6a:	4299      	cmp	r1, r3
 801ff6c:	d208      	bcs.n	801ff80 <_sungetc_r+0x60>
 801ff6e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801ff72:	42a9      	cmp	r1, r5
 801ff74:	d104      	bne.n	801ff80 <_sungetc_r+0x60>
 801ff76:	3b01      	subs	r3, #1
 801ff78:	3201      	adds	r2, #1
 801ff7a:	6023      	str	r3, [r4, #0]
 801ff7c:	6062      	str	r2, [r4, #4]
 801ff7e:	e7d5      	b.n	801ff2c <_sungetc_r+0xc>
 801ff80:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801ff84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ff88:	6363      	str	r3, [r4, #52]	; 0x34
 801ff8a:	2303      	movs	r3, #3
 801ff8c:	63a3      	str	r3, [r4, #56]	; 0x38
 801ff8e:	4623      	mov	r3, r4
 801ff90:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ff94:	6023      	str	r3, [r4, #0]
 801ff96:	2301      	movs	r3, #1
 801ff98:	e7dc      	b.n	801ff54 <_sungetc_r+0x34>

0801ff9a <__ssrefill_r>:
 801ff9a:	b510      	push	{r4, lr}
 801ff9c:	460c      	mov	r4, r1
 801ff9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ffa0:	b169      	cbz	r1, 801ffbe <__ssrefill_r+0x24>
 801ffa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ffa6:	4299      	cmp	r1, r3
 801ffa8:	d001      	beq.n	801ffae <__ssrefill_r+0x14>
 801ffaa:	f7ff fdb3 	bl	801fb14 <_free_r>
 801ffae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ffb0:	6063      	str	r3, [r4, #4]
 801ffb2:	2000      	movs	r0, #0
 801ffb4:	6360      	str	r0, [r4, #52]	; 0x34
 801ffb6:	b113      	cbz	r3, 801ffbe <__ssrefill_r+0x24>
 801ffb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ffba:	6023      	str	r3, [r4, #0]
 801ffbc:	bd10      	pop	{r4, pc}
 801ffbe:	6923      	ldr	r3, [r4, #16]
 801ffc0:	6023      	str	r3, [r4, #0]
 801ffc2:	2300      	movs	r3, #0
 801ffc4:	6063      	str	r3, [r4, #4]
 801ffc6:	89a3      	ldrh	r3, [r4, #12]
 801ffc8:	f043 0320 	orr.w	r3, r3, #32
 801ffcc:	81a3      	strh	r3, [r4, #12]
 801ffce:	f04f 30ff 	mov.w	r0, #4294967295
 801ffd2:	e7f3      	b.n	801ffbc <__ssrefill_r+0x22>

0801ffd4 <__ssvfiscanf_r>:
 801ffd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffd8:	460c      	mov	r4, r1
 801ffda:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801ffde:	2100      	movs	r1, #0
 801ffe0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801ffe4:	49b2      	ldr	r1, [pc, #712]	; (80202b0 <__ssvfiscanf_r+0x2dc>)
 801ffe6:	91a0      	str	r1, [sp, #640]	; 0x280
 801ffe8:	f10d 0804 	add.w	r8, sp, #4
 801ffec:	49b1      	ldr	r1, [pc, #708]	; (80202b4 <__ssvfiscanf_r+0x2e0>)
 801ffee:	4fb2      	ldr	r7, [pc, #712]	; (80202b8 <__ssvfiscanf_r+0x2e4>)
 801fff0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80202bc <__ssvfiscanf_r+0x2e8>
 801fff4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801fff8:	4606      	mov	r6, r0
 801fffa:	91a1      	str	r1, [sp, #644]	; 0x284
 801fffc:	9300      	str	r3, [sp, #0]
 801fffe:	f892 a000 	ldrb.w	sl, [r2]
 8020002:	f1ba 0f00 	cmp.w	sl, #0
 8020006:	f000 8151 	beq.w	80202ac <__ssvfiscanf_r+0x2d8>
 802000a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802000e:	f013 0308 	ands.w	r3, r3, #8
 8020012:	f102 0501 	add.w	r5, r2, #1
 8020016:	d019      	beq.n	802004c <__ssvfiscanf_r+0x78>
 8020018:	6863      	ldr	r3, [r4, #4]
 802001a:	2b00      	cmp	r3, #0
 802001c:	dd0f      	ble.n	802003e <__ssvfiscanf_r+0x6a>
 802001e:	6823      	ldr	r3, [r4, #0]
 8020020:	781a      	ldrb	r2, [r3, #0]
 8020022:	5cba      	ldrb	r2, [r7, r2]
 8020024:	0712      	lsls	r2, r2, #28
 8020026:	d401      	bmi.n	802002c <__ssvfiscanf_r+0x58>
 8020028:	462a      	mov	r2, r5
 802002a:	e7e8      	b.n	801fffe <__ssvfiscanf_r+0x2a>
 802002c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802002e:	3201      	adds	r2, #1
 8020030:	9245      	str	r2, [sp, #276]	; 0x114
 8020032:	6862      	ldr	r2, [r4, #4]
 8020034:	3301      	adds	r3, #1
 8020036:	3a01      	subs	r2, #1
 8020038:	6062      	str	r2, [r4, #4]
 802003a:	6023      	str	r3, [r4, #0]
 802003c:	e7ec      	b.n	8020018 <__ssvfiscanf_r+0x44>
 802003e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020040:	4621      	mov	r1, r4
 8020042:	4630      	mov	r0, r6
 8020044:	4798      	blx	r3
 8020046:	2800      	cmp	r0, #0
 8020048:	d0e9      	beq.n	802001e <__ssvfiscanf_r+0x4a>
 802004a:	e7ed      	b.n	8020028 <__ssvfiscanf_r+0x54>
 802004c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8020050:	f040 8083 	bne.w	802015a <__ssvfiscanf_r+0x186>
 8020054:	9341      	str	r3, [sp, #260]	; 0x104
 8020056:	9343      	str	r3, [sp, #268]	; 0x10c
 8020058:	7853      	ldrb	r3, [r2, #1]
 802005a:	2b2a      	cmp	r3, #42	; 0x2a
 802005c:	bf02      	ittt	eq
 802005e:	2310      	moveq	r3, #16
 8020060:	1c95      	addeq	r5, r2, #2
 8020062:	9341      	streq	r3, [sp, #260]	; 0x104
 8020064:	220a      	movs	r2, #10
 8020066:	46ab      	mov	fp, r5
 8020068:	f81b 1b01 	ldrb.w	r1, [fp], #1
 802006c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8020070:	2b09      	cmp	r3, #9
 8020072:	d91d      	bls.n	80200b0 <__ssvfiscanf_r+0xdc>
 8020074:	4891      	ldr	r0, [pc, #580]	; (80202bc <__ssvfiscanf_r+0x2e8>)
 8020076:	2203      	movs	r2, #3
 8020078:	f7e0 f8c2 	bl	8000200 <memchr>
 802007c:	b140      	cbz	r0, 8020090 <__ssvfiscanf_r+0xbc>
 802007e:	2301      	movs	r3, #1
 8020080:	eba0 0009 	sub.w	r0, r0, r9
 8020084:	fa03 f000 	lsl.w	r0, r3, r0
 8020088:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802008a:	4318      	orrs	r0, r3
 802008c:	9041      	str	r0, [sp, #260]	; 0x104
 802008e:	465d      	mov	r5, fp
 8020090:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020094:	2b78      	cmp	r3, #120	; 0x78
 8020096:	d806      	bhi.n	80200a6 <__ssvfiscanf_r+0xd2>
 8020098:	2b57      	cmp	r3, #87	; 0x57
 802009a:	d810      	bhi.n	80200be <__ssvfiscanf_r+0xea>
 802009c:	2b25      	cmp	r3, #37	; 0x25
 802009e:	d05c      	beq.n	802015a <__ssvfiscanf_r+0x186>
 80200a0:	d856      	bhi.n	8020150 <__ssvfiscanf_r+0x17c>
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	d074      	beq.n	8020190 <__ssvfiscanf_r+0x1bc>
 80200a6:	2303      	movs	r3, #3
 80200a8:	9347      	str	r3, [sp, #284]	; 0x11c
 80200aa:	230a      	movs	r3, #10
 80200ac:	9342      	str	r3, [sp, #264]	; 0x108
 80200ae:	e081      	b.n	80201b4 <__ssvfiscanf_r+0x1e0>
 80200b0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80200b2:	fb02 1303 	mla	r3, r2, r3, r1
 80200b6:	3b30      	subs	r3, #48	; 0x30
 80200b8:	9343      	str	r3, [sp, #268]	; 0x10c
 80200ba:	465d      	mov	r5, fp
 80200bc:	e7d3      	b.n	8020066 <__ssvfiscanf_r+0x92>
 80200be:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80200c2:	2a20      	cmp	r2, #32
 80200c4:	d8ef      	bhi.n	80200a6 <__ssvfiscanf_r+0xd2>
 80200c6:	a101      	add	r1, pc, #4	; (adr r1, 80200cc <__ssvfiscanf_r+0xf8>)
 80200c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80200cc:	0802019f 	.word	0x0802019f
 80200d0:	080200a7 	.word	0x080200a7
 80200d4:	080200a7 	.word	0x080200a7
 80200d8:	080201fd 	.word	0x080201fd
 80200dc:	080200a7 	.word	0x080200a7
 80200e0:	080200a7 	.word	0x080200a7
 80200e4:	080200a7 	.word	0x080200a7
 80200e8:	080200a7 	.word	0x080200a7
 80200ec:	080200a7 	.word	0x080200a7
 80200f0:	080200a7 	.word	0x080200a7
 80200f4:	080200a7 	.word	0x080200a7
 80200f8:	08020213 	.word	0x08020213
 80200fc:	080201e9 	.word	0x080201e9
 8020100:	08020157 	.word	0x08020157
 8020104:	08020157 	.word	0x08020157
 8020108:	08020157 	.word	0x08020157
 802010c:	080200a7 	.word	0x080200a7
 8020110:	080201ed 	.word	0x080201ed
 8020114:	080200a7 	.word	0x080200a7
 8020118:	080200a7 	.word	0x080200a7
 802011c:	080200a7 	.word	0x080200a7
 8020120:	080200a7 	.word	0x080200a7
 8020124:	08020223 	.word	0x08020223
 8020128:	080201f5 	.word	0x080201f5
 802012c:	08020197 	.word	0x08020197
 8020130:	080200a7 	.word	0x080200a7
 8020134:	080200a7 	.word	0x080200a7
 8020138:	0802021f 	.word	0x0802021f
 802013c:	080200a7 	.word	0x080200a7
 8020140:	080201e9 	.word	0x080201e9
 8020144:	080200a7 	.word	0x080200a7
 8020148:	080200a7 	.word	0x080200a7
 802014c:	0802019f 	.word	0x0802019f
 8020150:	3b45      	subs	r3, #69	; 0x45
 8020152:	2b02      	cmp	r3, #2
 8020154:	d8a7      	bhi.n	80200a6 <__ssvfiscanf_r+0xd2>
 8020156:	2305      	movs	r3, #5
 8020158:	e02b      	b.n	80201b2 <__ssvfiscanf_r+0x1de>
 802015a:	6863      	ldr	r3, [r4, #4]
 802015c:	2b00      	cmp	r3, #0
 802015e:	dd0d      	ble.n	802017c <__ssvfiscanf_r+0x1a8>
 8020160:	6823      	ldr	r3, [r4, #0]
 8020162:	781a      	ldrb	r2, [r3, #0]
 8020164:	4552      	cmp	r2, sl
 8020166:	f040 80a1 	bne.w	80202ac <__ssvfiscanf_r+0x2d8>
 802016a:	3301      	adds	r3, #1
 802016c:	6862      	ldr	r2, [r4, #4]
 802016e:	6023      	str	r3, [r4, #0]
 8020170:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020172:	3a01      	subs	r2, #1
 8020174:	3301      	adds	r3, #1
 8020176:	6062      	str	r2, [r4, #4]
 8020178:	9345      	str	r3, [sp, #276]	; 0x114
 802017a:	e755      	b.n	8020028 <__ssvfiscanf_r+0x54>
 802017c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802017e:	4621      	mov	r1, r4
 8020180:	4630      	mov	r0, r6
 8020182:	4798      	blx	r3
 8020184:	2800      	cmp	r0, #0
 8020186:	d0eb      	beq.n	8020160 <__ssvfiscanf_r+0x18c>
 8020188:	9844      	ldr	r0, [sp, #272]	; 0x110
 802018a:	2800      	cmp	r0, #0
 802018c:	f040 8084 	bne.w	8020298 <__ssvfiscanf_r+0x2c4>
 8020190:	f04f 30ff 	mov.w	r0, #4294967295
 8020194:	e086      	b.n	80202a4 <__ssvfiscanf_r+0x2d0>
 8020196:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020198:	f042 0220 	orr.w	r2, r2, #32
 802019c:	9241      	str	r2, [sp, #260]	; 0x104
 802019e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80201a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80201a4:	9241      	str	r2, [sp, #260]	; 0x104
 80201a6:	2210      	movs	r2, #16
 80201a8:	2b6f      	cmp	r3, #111	; 0x6f
 80201aa:	9242      	str	r2, [sp, #264]	; 0x108
 80201ac:	bf34      	ite	cc
 80201ae:	2303      	movcc	r3, #3
 80201b0:	2304      	movcs	r3, #4
 80201b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80201b4:	6863      	ldr	r3, [r4, #4]
 80201b6:	2b00      	cmp	r3, #0
 80201b8:	dd41      	ble.n	802023e <__ssvfiscanf_r+0x26a>
 80201ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80201bc:	0659      	lsls	r1, r3, #25
 80201be:	d404      	bmi.n	80201ca <__ssvfiscanf_r+0x1f6>
 80201c0:	6823      	ldr	r3, [r4, #0]
 80201c2:	781a      	ldrb	r2, [r3, #0]
 80201c4:	5cba      	ldrb	r2, [r7, r2]
 80201c6:	0712      	lsls	r2, r2, #28
 80201c8:	d440      	bmi.n	802024c <__ssvfiscanf_r+0x278>
 80201ca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80201cc:	2b02      	cmp	r3, #2
 80201ce:	dc4f      	bgt.n	8020270 <__ssvfiscanf_r+0x29c>
 80201d0:	466b      	mov	r3, sp
 80201d2:	4622      	mov	r2, r4
 80201d4:	a941      	add	r1, sp, #260	; 0x104
 80201d6:	4630      	mov	r0, r6
 80201d8:	f000 fb62 	bl	80208a0 <_scanf_chars>
 80201dc:	2801      	cmp	r0, #1
 80201de:	d065      	beq.n	80202ac <__ssvfiscanf_r+0x2d8>
 80201e0:	2802      	cmp	r0, #2
 80201e2:	f47f af21 	bne.w	8020028 <__ssvfiscanf_r+0x54>
 80201e6:	e7cf      	b.n	8020188 <__ssvfiscanf_r+0x1b4>
 80201e8:	220a      	movs	r2, #10
 80201ea:	e7dd      	b.n	80201a8 <__ssvfiscanf_r+0x1d4>
 80201ec:	2300      	movs	r3, #0
 80201ee:	9342      	str	r3, [sp, #264]	; 0x108
 80201f0:	2303      	movs	r3, #3
 80201f2:	e7de      	b.n	80201b2 <__ssvfiscanf_r+0x1de>
 80201f4:	2308      	movs	r3, #8
 80201f6:	9342      	str	r3, [sp, #264]	; 0x108
 80201f8:	2304      	movs	r3, #4
 80201fa:	e7da      	b.n	80201b2 <__ssvfiscanf_r+0x1de>
 80201fc:	4629      	mov	r1, r5
 80201fe:	4640      	mov	r0, r8
 8020200:	f000 fcbc 	bl	8020b7c <__sccl>
 8020204:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802020a:	9341      	str	r3, [sp, #260]	; 0x104
 802020c:	4605      	mov	r5, r0
 802020e:	2301      	movs	r3, #1
 8020210:	e7cf      	b.n	80201b2 <__ssvfiscanf_r+0x1de>
 8020212:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020218:	9341      	str	r3, [sp, #260]	; 0x104
 802021a:	2300      	movs	r3, #0
 802021c:	e7c9      	b.n	80201b2 <__ssvfiscanf_r+0x1de>
 802021e:	2302      	movs	r3, #2
 8020220:	e7c7      	b.n	80201b2 <__ssvfiscanf_r+0x1de>
 8020222:	9841      	ldr	r0, [sp, #260]	; 0x104
 8020224:	06c3      	lsls	r3, r0, #27
 8020226:	f53f aeff 	bmi.w	8020028 <__ssvfiscanf_r+0x54>
 802022a:	9b00      	ldr	r3, [sp, #0]
 802022c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802022e:	1d19      	adds	r1, r3, #4
 8020230:	9100      	str	r1, [sp, #0]
 8020232:	681b      	ldr	r3, [r3, #0]
 8020234:	07c0      	lsls	r0, r0, #31
 8020236:	bf4c      	ite	mi
 8020238:	801a      	strhmi	r2, [r3, #0]
 802023a:	601a      	strpl	r2, [r3, #0]
 802023c:	e6f4      	b.n	8020028 <__ssvfiscanf_r+0x54>
 802023e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020240:	4621      	mov	r1, r4
 8020242:	4630      	mov	r0, r6
 8020244:	4798      	blx	r3
 8020246:	2800      	cmp	r0, #0
 8020248:	d0b7      	beq.n	80201ba <__ssvfiscanf_r+0x1e6>
 802024a:	e79d      	b.n	8020188 <__ssvfiscanf_r+0x1b4>
 802024c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802024e:	3201      	adds	r2, #1
 8020250:	9245      	str	r2, [sp, #276]	; 0x114
 8020252:	6862      	ldr	r2, [r4, #4]
 8020254:	3a01      	subs	r2, #1
 8020256:	2a00      	cmp	r2, #0
 8020258:	6062      	str	r2, [r4, #4]
 802025a:	dd02      	ble.n	8020262 <__ssvfiscanf_r+0x28e>
 802025c:	3301      	adds	r3, #1
 802025e:	6023      	str	r3, [r4, #0]
 8020260:	e7ae      	b.n	80201c0 <__ssvfiscanf_r+0x1ec>
 8020262:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020264:	4621      	mov	r1, r4
 8020266:	4630      	mov	r0, r6
 8020268:	4798      	blx	r3
 802026a:	2800      	cmp	r0, #0
 802026c:	d0a8      	beq.n	80201c0 <__ssvfiscanf_r+0x1ec>
 802026e:	e78b      	b.n	8020188 <__ssvfiscanf_r+0x1b4>
 8020270:	2b04      	cmp	r3, #4
 8020272:	dc06      	bgt.n	8020282 <__ssvfiscanf_r+0x2ae>
 8020274:	466b      	mov	r3, sp
 8020276:	4622      	mov	r2, r4
 8020278:	a941      	add	r1, sp, #260	; 0x104
 802027a:	4630      	mov	r0, r6
 802027c:	f000 fb68 	bl	8020950 <_scanf_i>
 8020280:	e7ac      	b.n	80201dc <__ssvfiscanf_r+0x208>
 8020282:	4b0f      	ldr	r3, [pc, #60]	; (80202c0 <__ssvfiscanf_r+0x2ec>)
 8020284:	2b00      	cmp	r3, #0
 8020286:	f43f aecf 	beq.w	8020028 <__ssvfiscanf_r+0x54>
 802028a:	466b      	mov	r3, sp
 802028c:	4622      	mov	r2, r4
 802028e:	a941      	add	r1, sp, #260	; 0x104
 8020290:	4630      	mov	r0, r6
 8020292:	f3af 8000 	nop.w
 8020296:	e7a1      	b.n	80201dc <__ssvfiscanf_r+0x208>
 8020298:	89a3      	ldrh	r3, [r4, #12]
 802029a:	f013 0f40 	tst.w	r3, #64	; 0x40
 802029e:	bf18      	it	ne
 80202a0:	f04f 30ff 	movne.w	r0, #4294967295
 80202a4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80202a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 80202ae:	e7f9      	b.n	80202a4 <__ssvfiscanf_r+0x2d0>
 80202b0:	0801ff21 	.word	0x0801ff21
 80202b4:	0801ff9b 	.word	0x0801ff9b
 80202b8:	0807ac9d 	.word	0x0807ac9d
 80202bc:	0807aebe 	.word	0x0807aebe
 80202c0:	00000000 	.word	0x00000000

080202c4 <__sfputc_r>:
 80202c4:	6893      	ldr	r3, [r2, #8]
 80202c6:	3b01      	subs	r3, #1
 80202c8:	2b00      	cmp	r3, #0
 80202ca:	b410      	push	{r4}
 80202cc:	6093      	str	r3, [r2, #8]
 80202ce:	da08      	bge.n	80202e2 <__sfputc_r+0x1e>
 80202d0:	6994      	ldr	r4, [r2, #24]
 80202d2:	42a3      	cmp	r3, r4
 80202d4:	db01      	blt.n	80202da <__sfputc_r+0x16>
 80202d6:	290a      	cmp	r1, #10
 80202d8:	d103      	bne.n	80202e2 <__sfputc_r+0x1e>
 80202da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80202de:	f7ff b8af 	b.w	801f440 <__swbuf_r>
 80202e2:	6813      	ldr	r3, [r2, #0]
 80202e4:	1c58      	adds	r0, r3, #1
 80202e6:	6010      	str	r0, [r2, #0]
 80202e8:	7019      	strb	r1, [r3, #0]
 80202ea:	4608      	mov	r0, r1
 80202ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80202f0:	4770      	bx	lr

080202f2 <__sfputs_r>:
 80202f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80202f4:	4606      	mov	r6, r0
 80202f6:	460f      	mov	r7, r1
 80202f8:	4614      	mov	r4, r2
 80202fa:	18d5      	adds	r5, r2, r3
 80202fc:	42ac      	cmp	r4, r5
 80202fe:	d101      	bne.n	8020304 <__sfputs_r+0x12>
 8020300:	2000      	movs	r0, #0
 8020302:	e007      	b.n	8020314 <__sfputs_r+0x22>
 8020304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020308:	463a      	mov	r2, r7
 802030a:	4630      	mov	r0, r6
 802030c:	f7ff ffda 	bl	80202c4 <__sfputc_r>
 8020310:	1c43      	adds	r3, r0, #1
 8020312:	d1f3      	bne.n	80202fc <__sfputs_r+0xa>
 8020314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020318 <_vfiprintf_r>:
 8020318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802031c:	460d      	mov	r5, r1
 802031e:	b09d      	sub	sp, #116	; 0x74
 8020320:	4614      	mov	r4, r2
 8020322:	4698      	mov	r8, r3
 8020324:	4606      	mov	r6, r0
 8020326:	b118      	cbz	r0, 8020330 <_vfiprintf_r+0x18>
 8020328:	6983      	ldr	r3, [r0, #24]
 802032a:	b90b      	cbnz	r3, 8020330 <_vfiprintf_r+0x18>
 802032c:	f7ff faa8 	bl	801f880 <__sinit>
 8020330:	4b89      	ldr	r3, [pc, #548]	; (8020558 <_vfiprintf_r+0x240>)
 8020332:	429d      	cmp	r5, r3
 8020334:	d11b      	bne.n	802036e <_vfiprintf_r+0x56>
 8020336:	6875      	ldr	r5, [r6, #4]
 8020338:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802033a:	07d9      	lsls	r1, r3, #31
 802033c:	d405      	bmi.n	802034a <_vfiprintf_r+0x32>
 802033e:	89ab      	ldrh	r3, [r5, #12]
 8020340:	059a      	lsls	r2, r3, #22
 8020342:	d402      	bmi.n	802034a <_vfiprintf_r+0x32>
 8020344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020346:	f7ff fb4b 	bl	801f9e0 <__retarget_lock_acquire_recursive>
 802034a:	89ab      	ldrh	r3, [r5, #12]
 802034c:	071b      	lsls	r3, r3, #28
 802034e:	d501      	bpl.n	8020354 <_vfiprintf_r+0x3c>
 8020350:	692b      	ldr	r3, [r5, #16]
 8020352:	b9eb      	cbnz	r3, 8020390 <_vfiprintf_r+0x78>
 8020354:	4629      	mov	r1, r5
 8020356:	4630      	mov	r0, r6
 8020358:	f7ff f8d6 	bl	801f508 <__swsetup_r>
 802035c:	b1c0      	cbz	r0, 8020390 <_vfiprintf_r+0x78>
 802035e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020360:	07dc      	lsls	r4, r3, #31
 8020362:	d50e      	bpl.n	8020382 <_vfiprintf_r+0x6a>
 8020364:	f04f 30ff 	mov.w	r0, #4294967295
 8020368:	b01d      	add	sp, #116	; 0x74
 802036a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802036e:	4b7b      	ldr	r3, [pc, #492]	; (802055c <_vfiprintf_r+0x244>)
 8020370:	429d      	cmp	r5, r3
 8020372:	d101      	bne.n	8020378 <_vfiprintf_r+0x60>
 8020374:	68b5      	ldr	r5, [r6, #8]
 8020376:	e7df      	b.n	8020338 <_vfiprintf_r+0x20>
 8020378:	4b79      	ldr	r3, [pc, #484]	; (8020560 <_vfiprintf_r+0x248>)
 802037a:	429d      	cmp	r5, r3
 802037c:	bf08      	it	eq
 802037e:	68f5      	ldreq	r5, [r6, #12]
 8020380:	e7da      	b.n	8020338 <_vfiprintf_r+0x20>
 8020382:	89ab      	ldrh	r3, [r5, #12]
 8020384:	0598      	lsls	r0, r3, #22
 8020386:	d4ed      	bmi.n	8020364 <_vfiprintf_r+0x4c>
 8020388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802038a:	f7ff fb2a 	bl	801f9e2 <__retarget_lock_release_recursive>
 802038e:	e7e9      	b.n	8020364 <_vfiprintf_r+0x4c>
 8020390:	2300      	movs	r3, #0
 8020392:	9309      	str	r3, [sp, #36]	; 0x24
 8020394:	2320      	movs	r3, #32
 8020396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802039a:	f8cd 800c 	str.w	r8, [sp, #12]
 802039e:	2330      	movs	r3, #48	; 0x30
 80203a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020564 <_vfiprintf_r+0x24c>
 80203a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80203a8:	f04f 0901 	mov.w	r9, #1
 80203ac:	4623      	mov	r3, r4
 80203ae:	469a      	mov	sl, r3
 80203b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80203b4:	b10a      	cbz	r2, 80203ba <_vfiprintf_r+0xa2>
 80203b6:	2a25      	cmp	r2, #37	; 0x25
 80203b8:	d1f9      	bne.n	80203ae <_vfiprintf_r+0x96>
 80203ba:	ebba 0b04 	subs.w	fp, sl, r4
 80203be:	d00b      	beq.n	80203d8 <_vfiprintf_r+0xc0>
 80203c0:	465b      	mov	r3, fp
 80203c2:	4622      	mov	r2, r4
 80203c4:	4629      	mov	r1, r5
 80203c6:	4630      	mov	r0, r6
 80203c8:	f7ff ff93 	bl	80202f2 <__sfputs_r>
 80203cc:	3001      	adds	r0, #1
 80203ce:	f000 80aa 	beq.w	8020526 <_vfiprintf_r+0x20e>
 80203d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80203d4:	445a      	add	r2, fp
 80203d6:	9209      	str	r2, [sp, #36]	; 0x24
 80203d8:	f89a 3000 	ldrb.w	r3, [sl]
 80203dc:	2b00      	cmp	r3, #0
 80203de:	f000 80a2 	beq.w	8020526 <_vfiprintf_r+0x20e>
 80203e2:	2300      	movs	r3, #0
 80203e4:	f04f 32ff 	mov.w	r2, #4294967295
 80203e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80203ec:	f10a 0a01 	add.w	sl, sl, #1
 80203f0:	9304      	str	r3, [sp, #16]
 80203f2:	9307      	str	r3, [sp, #28]
 80203f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80203f8:	931a      	str	r3, [sp, #104]	; 0x68
 80203fa:	4654      	mov	r4, sl
 80203fc:	2205      	movs	r2, #5
 80203fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020402:	4858      	ldr	r0, [pc, #352]	; (8020564 <_vfiprintf_r+0x24c>)
 8020404:	f7df fefc 	bl	8000200 <memchr>
 8020408:	9a04      	ldr	r2, [sp, #16]
 802040a:	b9d8      	cbnz	r0, 8020444 <_vfiprintf_r+0x12c>
 802040c:	06d1      	lsls	r1, r2, #27
 802040e:	bf44      	itt	mi
 8020410:	2320      	movmi	r3, #32
 8020412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020416:	0713      	lsls	r3, r2, #28
 8020418:	bf44      	itt	mi
 802041a:	232b      	movmi	r3, #43	; 0x2b
 802041c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020420:	f89a 3000 	ldrb.w	r3, [sl]
 8020424:	2b2a      	cmp	r3, #42	; 0x2a
 8020426:	d015      	beq.n	8020454 <_vfiprintf_r+0x13c>
 8020428:	9a07      	ldr	r2, [sp, #28]
 802042a:	4654      	mov	r4, sl
 802042c:	2000      	movs	r0, #0
 802042e:	f04f 0c0a 	mov.w	ip, #10
 8020432:	4621      	mov	r1, r4
 8020434:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020438:	3b30      	subs	r3, #48	; 0x30
 802043a:	2b09      	cmp	r3, #9
 802043c:	d94e      	bls.n	80204dc <_vfiprintf_r+0x1c4>
 802043e:	b1b0      	cbz	r0, 802046e <_vfiprintf_r+0x156>
 8020440:	9207      	str	r2, [sp, #28]
 8020442:	e014      	b.n	802046e <_vfiprintf_r+0x156>
 8020444:	eba0 0308 	sub.w	r3, r0, r8
 8020448:	fa09 f303 	lsl.w	r3, r9, r3
 802044c:	4313      	orrs	r3, r2
 802044e:	9304      	str	r3, [sp, #16]
 8020450:	46a2      	mov	sl, r4
 8020452:	e7d2      	b.n	80203fa <_vfiprintf_r+0xe2>
 8020454:	9b03      	ldr	r3, [sp, #12]
 8020456:	1d19      	adds	r1, r3, #4
 8020458:	681b      	ldr	r3, [r3, #0]
 802045a:	9103      	str	r1, [sp, #12]
 802045c:	2b00      	cmp	r3, #0
 802045e:	bfbb      	ittet	lt
 8020460:	425b      	neglt	r3, r3
 8020462:	f042 0202 	orrlt.w	r2, r2, #2
 8020466:	9307      	strge	r3, [sp, #28]
 8020468:	9307      	strlt	r3, [sp, #28]
 802046a:	bfb8      	it	lt
 802046c:	9204      	strlt	r2, [sp, #16]
 802046e:	7823      	ldrb	r3, [r4, #0]
 8020470:	2b2e      	cmp	r3, #46	; 0x2e
 8020472:	d10c      	bne.n	802048e <_vfiprintf_r+0x176>
 8020474:	7863      	ldrb	r3, [r4, #1]
 8020476:	2b2a      	cmp	r3, #42	; 0x2a
 8020478:	d135      	bne.n	80204e6 <_vfiprintf_r+0x1ce>
 802047a:	9b03      	ldr	r3, [sp, #12]
 802047c:	1d1a      	adds	r2, r3, #4
 802047e:	681b      	ldr	r3, [r3, #0]
 8020480:	9203      	str	r2, [sp, #12]
 8020482:	2b00      	cmp	r3, #0
 8020484:	bfb8      	it	lt
 8020486:	f04f 33ff 	movlt.w	r3, #4294967295
 802048a:	3402      	adds	r4, #2
 802048c:	9305      	str	r3, [sp, #20]
 802048e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020574 <_vfiprintf_r+0x25c>
 8020492:	7821      	ldrb	r1, [r4, #0]
 8020494:	2203      	movs	r2, #3
 8020496:	4650      	mov	r0, sl
 8020498:	f7df feb2 	bl	8000200 <memchr>
 802049c:	b140      	cbz	r0, 80204b0 <_vfiprintf_r+0x198>
 802049e:	2340      	movs	r3, #64	; 0x40
 80204a0:	eba0 000a 	sub.w	r0, r0, sl
 80204a4:	fa03 f000 	lsl.w	r0, r3, r0
 80204a8:	9b04      	ldr	r3, [sp, #16]
 80204aa:	4303      	orrs	r3, r0
 80204ac:	3401      	adds	r4, #1
 80204ae:	9304      	str	r3, [sp, #16]
 80204b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80204b4:	482c      	ldr	r0, [pc, #176]	; (8020568 <_vfiprintf_r+0x250>)
 80204b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80204ba:	2206      	movs	r2, #6
 80204bc:	f7df fea0 	bl	8000200 <memchr>
 80204c0:	2800      	cmp	r0, #0
 80204c2:	d03f      	beq.n	8020544 <_vfiprintf_r+0x22c>
 80204c4:	4b29      	ldr	r3, [pc, #164]	; (802056c <_vfiprintf_r+0x254>)
 80204c6:	bb1b      	cbnz	r3, 8020510 <_vfiprintf_r+0x1f8>
 80204c8:	9b03      	ldr	r3, [sp, #12]
 80204ca:	3307      	adds	r3, #7
 80204cc:	f023 0307 	bic.w	r3, r3, #7
 80204d0:	3308      	adds	r3, #8
 80204d2:	9303      	str	r3, [sp, #12]
 80204d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204d6:	443b      	add	r3, r7
 80204d8:	9309      	str	r3, [sp, #36]	; 0x24
 80204da:	e767      	b.n	80203ac <_vfiprintf_r+0x94>
 80204dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80204e0:	460c      	mov	r4, r1
 80204e2:	2001      	movs	r0, #1
 80204e4:	e7a5      	b.n	8020432 <_vfiprintf_r+0x11a>
 80204e6:	2300      	movs	r3, #0
 80204e8:	3401      	adds	r4, #1
 80204ea:	9305      	str	r3, [sp, #20]
 80204ec:	4619      	mov	r1, r3
 80204ee:	f04f 0c0a 	mov.w	ip, #10
 80204f2:	4620      	mov	r0, r4
 80204f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80204f8:	3a30      	subs	r2, #48	; 0x30
 80204fa:	2a09      	cmp	r2, #9
 80204fc:	d903      	bls.n	8020506 <_vfiprintf_r+0x1ee>
 80204fe:	2b00      	cmp	r3, #0
 8020500:	d0c5      	beq.n	802048e <_vfiprintf_r+0x176>
 8020502:	9105      	str	r1, [sp, #20]
 8020504:	e7c3      	b.n	802048e <_vfiprintf_r+0x176>
 8020506:	fb0c 2101 	mla	r1, ip, r1, r2
 802050a:	4604      	mov	r4, r0
 802050c:	2301      	movs	r3, #1
 802050e:	e7f0      	b.n	80204f2 <_vfiprintf_r+0x1da>
 8020510:	ab03      	add	r3, sp, #12
 8020512:	9300      	str	r3, [sp, #0]
 8020514:	462a      	mov	r2, r5
 8020516:	4b16      	ldr	r3, [pc, #88]	; (8020570 <_vfiprintf_r+0x258>)
 8020518:	a904      	add	r1, sp, #16
 802051a:	4630      	mov	r0, r6
 802051c:	f3af 8000 	nop.w
 8020520:	4607      	mov	r7, r0
 8020522:	1c78      	adds	r0, r7, #1
 8020524:	d1d6      	bne.n	80204d4 <_vfiprintf_r+0x1bc>
 8020526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020528:	07d9      	lsls	r1, r3, #31
 802052a:	d405      	bmi.n	8020538 <_vfiprintf_r+0x220>
 802052c:	89ab      	ldrh	r3, [r5, #12]
 802052e:	059a      	lsls	r2, r3, #22
 8020530:	d402      	bmi.n	8020538 <_vfiprintf_r+0x220>
 8020532:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020534:	f7ff fa55 	bl	801f9e2 <__retarget_lock_release_recursive>
 8020538:	89ab      	ldrh	r3, [r5, #12]
 802053a:	065b      	lsls	r3, r3, #25
 802053c:	f53f af12 	bmi.w	8020364 <_vfiprintf_r+0x4c>
 8020540:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020542:	e711      	b.n	8020368 <_vfiprintf_r+0x50>
 8020544:	ab03      	add	r3, sp, #12
 8020546:	9300      	str	r3, [sp, #0]
 8020548:	462a      	mov	r2, r5
 802054a:	4b09      	ldr	r3, [pc, #36]	; (8020570 <_vfiprintf_r+0x258>)
 802054c:	a904      	add	r1, sp, #16
 802054e:	4630      	mov	r0, r6
 8020550:	f000 f880 	bl	8020654 <_printf_i>
 8020554:	e7e4      	b.n	8020520 <_vfiprintf_r+0x208>
 8020556:	bf00      	nop
 8020558:	0807ae78 	.word	0x0807ae78
 802055c:	0807ae98 	.word	0x0807ae98
 8020560:	0807ae58 	.word	0x0807ae58
 8020564:	0807aeb8 	.word	0x0807aeb8
 8020568:	0807aec2 	.word	0x0807aec2
 802056c:	00000000 	.word	0x00000000
 8020570:	080202f3 	.word	0x080202f3
 8020574:	0807aebe 	.word	0x0807aebe

08020578 <_printf_common>:
 8020578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802057c:	4616      	mov	r6, r2
 802057e:	4699      	mov	r9, r3
 8020580:	688a      	ldr	r2, [r1, #8]
 8020582:	690b      	ldr	r3, [r1, #16]
 8020584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020588:	4293      	cmp	r3, r2
 802058a:	bfb8      	it	lt
 802058c:	4613      	movlt	r3, r2
 802058e:	6033      	str	r3, [r6, #0]
 8020590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020594:	4607      	mov	r7, r0
 8020596:	460c      	mov	r4, r1
 8020598:	b10a      	cbz	r2, 802059e <_printf_common+0x26>
 802059a:	3301      	adds	r3, #1
 802059c:	6033      	str	r3, [r6, #0]
 802059e:	6823      	ldr	r3, [r4, #0]
 80205a0:	0699      	lsls	r1, r3, #26
 80205a2:	bf42      	ittt	mi
 80205a4:	6833      	ldrmi	r3, [r6, #0]
 80205a6:	3302      	addmi	r3, #2
 80205a8:	6033      	strmi	r3, [r6, #0]
 80205aa:	6825      	ldr	r5, [r4, #0]
 80205ac:	f015 0506 	ands.w	r5, r5, #6
 80205b0:	d106      	bne.n	80205c0 <_printf_common+0x48>
 80205b2:	f104 0a19 	add.w	sl, r4, #25
 80205b6:	68e3      	ldr	r3, [r4, #12]
 80205b8:	6832      	ldr	r2, [r6, #0]
 80205ba:	1a9b      	subs	r3, r3, r2
 80205bc:	42ab      	cmp	r3, r5
 80205be:	dc26      	bgt.n	802060e <_printf_common+0x96>
 80205c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80205c4:	1e13      	subs	r3, r2, #0
 80205c6:	6822      	ldr	r2, [r4, #0]
 80205c8:	bf18      	it	ne
 80205ca:	2301      	movne	r3, #1
 80205cc:	0692      	lsls	r2, r2, #26
 80205ce:	d42b      	bmi.n	8020628 <_printf_common+0xb0>
 80205d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80205d4:	4649      	mov	r1, r9
 80205d6:	4638      	mov	r0, r7
 80205d8:	47c0      	blx	r8
 80205da:	3001      	adds	r0, #1
 80205dc:	d01e      	beq.n	802061c <_printf_common+0xa4>
 80205de:	6823      	ldr	r3, [r4, #0]
 80205e0:	68e5      	ldr	r5, [r4, #12]
 80205e2:	6832      	ldr	r2, [r6, #0]
 80205e4:	f003 0306 	and.w	r3, r3, #6
 80205e8:	2b04      	cmp	r3, #4
 80205ea:	bf08      	it	eq
 80205ec:	1aad      	subeq	r5, r5, r2
 80205ee:	68a3      	ldr	r3, [r4, #8]
 80205f0:	6922      	ldr	r2, [r4, #16]
 80205f2:	bf0c      	ite	eq
 80205f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80205f8:	2500      	movne	r5, #0
 80205fa:	4293      	cmp	r3, r2
 80205fc:	bfc4      	itt	gt
 80205fe:	1a9b      	subgt	r3, r3, r2
 8020600:	18ed      	addgt	r5, r5, r3
 8020602:	2600      	movs	r6, #0
 8020604:	341a      	adds	r4, #26
 8020606:	42b5      	cmp	r5, r6
 8020608:	d11a      	bne.n	8020640 <_printf_common+0xc8>
 802060a:	2000      	movs	r0, #0
 802060c:	e008      	b.n	8020620 <_printf_common+0xa8>
 802060e:	2301      	movs	r3, #1
 8020610:	4652      	mov	r2, sl
 8020612:	4649      	mov	r1, r9
 8020614:	4638      	mov	r0, r7
 8020616:	47c0      	blx	r8
 8020618:	3001      	adds	r0, #1
 802061a:	d103      	bne.n	8020624 <_printf_common+0xac>
 802061c:	f04f 30ff 	mov.w	r0, #4294967295
 8020620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020624:	3501      	adds	r5, #1
 8020626:	e7c6      	b.n	80205b6 <_printf_common+0x3e>
 8020628:	18e1      	adds	r1, r4, r3
 802062a:	1c5a      	adds	r2, r3, #1
 802062c:	2030      	movs	r0, #48	; 0x30
 802062e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020632:	4422      	add	r2, r4
 8020634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802063c:	3302      	adds	r3, #2
 802063e:	e7c7      	b.n	80205d0 <_printf_common+0x58>
 8020640:	2301      	movs	r3, #1
 8020642:	4622      	mov	r2, r4
 8020644:	4649      	mov	r1, r9
 8020646:	4638      	mov	r0, r7
 8020648:	47c0      	blx	r8
 802064a:	3001      	adds	r0, #1
 802064c:	d0e6      	beq.n	802061c <_printf_common+0xa4>
 802064e:	3601      	adds	r6, #1
 8020650:	e7d9      	b.n	8020606 <_printf_common+0x8e>
	...

08020654 <_printf_i>:
 8020654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020658:	460c      	mov	r4, r1
 802065a:	4691      	mov	r9, r2
 802065c:	7e27      	ldrb	r7, [r4, #24]
 802065e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020660:	2f78      	cmp	r7, #120	; 0x78
 8020662:	4680      	mov	r8, r0
 8020664:	469a      	mov	sl, r3
 8020666:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802066a:	d807      	bhi.n	802067c <_printf_i+0x28>
 802066c:	2f62      	cmp	r7, #98	; 0x62
 802066e:	d80a      	bhi.n	8020686 <_printf_i+0x32>
 8020670:	2f00      	cmp	r7, #0
 8020672:	f000 80d8 	beq.w	8020826 <_printf_i+0x1d2>
 8020676:	2f58      	cmp	r7, #88	; 0x58
 8020678:	f000 80a3 	beq.w	80207c2 <_printf_i+0x16e>
 802067c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020684:	e03a      	b.n	80206fc <_printf_i+0xa8>
 8020686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802068a:	2b15      	cmp	r3, #21
 802068c:	d8f6      	bhi.n	802067c <_printf_i+0x28>
 802068e:	a001      	add	r0, pc, #4	; (adr r0, 8020694 <_printf_i+0x40>)
 8020690:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8020694:	080206ed 	.word	0x080206ed
 8020698:	08020701 	.word	0x08020701
 802069c:	0802067d 	.word	0x0802067d
 80206a0:	0802067d 	.word	0x0802067d
 80206a4:	0802067d 	.word	0x0802067d
 80206a8:	0802067d 	.word	0x0802067d
 80206ac:	08020701 	.word	0x08020701
 80206b0:	0802067d 	.word	0x0802067d
 80206b4:	0802067d 	.word	0x0802067d
 80206b8:	0802067d 	.word	0x0802067d
 80206bc:	0802067d 	.word	0x0802067d
 80206c0:	0802080d 	.word	0x0802080d
 80206c4:	08020731 	.word	0x08020731
 80206c8:	080207ef 	.word	0x080207ef
 80206cc:	0802067d 	.word	0x0802067d
 80206d0:	0802067d 	.word	0x0802067d
 80206d4:	0802082f 	.word	0x0802082f
 80206d8:	0802067d 	.word	0x0802067d
 80206dc:	08020731 	.word	0x08020731
 80206e0:	0802067d 	.word	0x0802067d
 80206e4:	0802067d 	.word	0x0802067d
 80206e8:	080207f7 	.word	0x080207f7
 80206ec:	680b      	ldr	r3, [r1, #0]
 80206ee:	1d1a      	adds	r2, r3, #4
 80206f0:	681b      	ldr	r3, [r3, #0]
 80206f2:	600a      	str	r2, [r1, #0]
 80206f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80206f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80206fc:	2301      	movs	r3, #1
 80206fe:	e0a3      	b.n	8020848 <_printf_i+0x1f4>
 8020700:	6825      	ldr	r5, [r4, #0]
 8020702:	6808      	ldr	r0, [r1, #0]
 8020704:	062e      	lsls	r6, r5, #24
 8020706:	f100 0304 	add.w	r3, r0, #4
 802070a:	d50a      	bpl.n	8020722 <_printf_i+0xce>
 802070c:	6805      	ldr	r5, [r0, #0]
 802070e:	600b      	str	r3, [r1, #0]
 8020710:	2d00      	cmp	r5, #0
 8020712:	da03      	bge.n	802071c <_printf_i+0xc8>
 8020714:	232d      	movs	r3, #45	; 0x2d
 8020716:	426d      	negs	r5, r5
 8020718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802071c:	485e      	ldr	r0, [pc, #376]	; (8020898 <_printf_i+0x244>)
 802071e:	230a      	movs	r3, #10
 8020720:	e019      	b.n	8020756 <_printf_i+0x102>
 8020722:	f015 0f40 	tst.w	r5, #64	; 0x40
 8020726:	6805      	ldr	r5, [r0, #0]
 8020728:	600b      	str	r3, [r1, #0]
 802072a:	bf18      	it	ne
 802072c:	b22d      	sxthne	r5, r5
 802072e:	e7ef      	b.n	8020710 <_printf_i+0xbc>
 8020730:	680b      	ldr	r3, [r1, #0]
 8020732:	6825      	ldr	r5, [r4, #0]
 8020734:	1d18      	adds	r0, r3, #4
 8020736:	6008      	str	r0, [r1, #0]
 8020738:	0628      	lsls	r0, r5, #24
 802073a:	d501      	bpl.n	8020740 <_printf_i+0xec>
 802073c:	681d      	ldr	r5, [r3, #0]
 802073e:	e002      	b.n	8020746 <_printf_i+0xf2>
 8020740:	0669      	lsls	r1, r5, #25
 8020742:	d5fb      	bpl.n	802073c <_printf_i+0xe8>
 8020744:	881d      	ldrh	r5, [r3, #0]
 8020746:	4854      	ldr	r0, [pc, #336]	; (8020898 <_printf_i+0x244>)
 8020748:	2f6f      	cmp	r7, #111	; 0x6f
 802074a:	bf0c      	ite	eq
 802074c:	2308      	moveq	r3, #8
 802074e:	230a      	movne	r3, #10
 8020750:	2100      	movs	r1, #0
 8020752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020756:	6866      	ldr	r6, [r4, #4]
 8020758:	60a6      	str	r6, [r4, #8]
 802075a:	2e00      	cmp	r6, #0
 802075c:	bfa2      	ittt	ge
 802075e:	6821      	ldrge	r1, [r4, #0]
 8020760:	f021 0104 	bicge.w	r1, r1, #4
 8020764:	6021      	strge	r1, [r4, #0]
 8020766:	b90d      	cbnz	r5, 802076c <_printf_i+0x118>
 8020768:	2e00      	cmp	r6, #0
 802076a:	d04d      	beq.n	8020808 <_printf_i+0x1b4>
 802076c:	4616      	mov	r6, r2
 802076e:	fbb5 f1f3 	udiv	r1, r5, r3
 8020772:	fb03 5711 	mls	r7, r3, r1, r5
 8020776:	5dc7      	ldrb	r7, [r0, r7]
 8020778:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802077c:	462f      	mov	r7, r5
 802077e:	42bb      	cmp	r3, r7
 8020780:	460d      	mov	r5, r1
 8020782:	d9f4      	bls.n	802076e <_printf_i+0x11a>
 8020784:	2b08      	cmp	r3, #8
 8020786:	d10b      	bne.n	80207a0 <_printf_i+0x14c>
 8020788:	6823      	ldr	r3, [r4, #0]
 802078a:	07df      	lsls	r7, r3, #31
 802078c:	d508      	bpl.n	80207a0 <_printf_i+0x14c>
 802078e:	6923      	ldr	r3, [r4, #16]
 8020790:	6861      	ldr	r1, [r4, #4]
 8020792:	4299      	cmp	r1, r3
 8020794:	bfde      	ittt	le
 8020796:	2330      	movle	r3, #48	; 0x30
 8020798:	f806 3c01 	strble.w	r3, [r6, #-1]
 802079c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80207a0:	1b92      	subs	r2, r2, r6
 80207a2:	6122      	str	r2, [r4, #16]
 80207a4:	f8cd a000 	str.w	sl, [sp]
 80207a8:	464b      	mov	r3, r9
 80207aa:	aa03      	add	r2, sp, #12
 80207ac:	4621      	mov	r1, r4
 80207ae:	4640      	mov	r0, r8
 80207b0:	f7ff fee2 	bl	8020578 <_printf_common>
 80207b4:	3001      	adds	r0, #1
 80207b6:	d14c      	bne.n	8020852 <_printf_i+0x1fe>
 80207b8:	f04f 30ff 	mov.w	r0, #4294967295
 80207bc:	b004      	add	sp, #16
 80207be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80207c2:	4835      	ldr	r0, [pc, #212]	; (8020898 <_printf_i+0x244>)
 80207c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80207c8:	6823      	ldr	r3, [r4, #0]
 80207ca:	680e      	ldr	r6, [r1, #0]
 80207cc:	061f      	lsls	r7, r3, #24
 80207ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80207d2:	600e      	str	r6, [r1, #0]
 80207d4:	d514      	bpl.n	8020800 <_printf_i+0x1ac>
 80207d6:	07d9      	lsls	r1, r3, #31
 80207d8:	bf44      	itt	mi
 80207da:	f043 0320 	orrmi.w	r3, r3, #32
 80207de:	6023      	strmi	r3, [r4, #0]
 80207e0:	b91d      	cbnz	r5, 80207ea <_printf_i+0x196>
 80207e2:	6823      	ldr	r3, [r4, #0]
 80207e4:	f023 0320 	bic.w	r3, r3, #32
 80207e8:	6023      	str	r3, [r4, #0]
 80207ea:	2310      	movs	r3, #16
 80207ec:	e7b0      	b.n	8020750 <_printf_i+0xfc>
 80207ee:	6823      	ldr	r3, [r4, #0]
 80207f0:	f043 0320 	orr.w	r3, r3, #32
 80207f4:	6023      	str	r3, [r4, #0]
 80207f6:	2378      	movs	r3, #120	; 0x78
 80207f8:	4828      	ldr	r0, [pc, #160]	; (802089c <_printf_i+0x248>)
 80207fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80207fe:	e7e3      	b.n	80207c8 <_printf_i+0x174>
 8020800:	065e      	lsls	r6, r3, #25
 8020802:	bf48      	it	mi
 8020804:	b2ad      	uxthmi	r5, r5
 8020806:	e7e6      	b.n	80207d6 <_printf_i+0x182>
 8020808:	4616      	mov	r6, r2
 802080a:	e7bb      	b.n	8020784 <_printf_i+0x130>
 802080c:	680b      	ldr	r3, [r1, #0]
 802080e:	6826      	ldr	r6, [r4, #0]
 8020810:	6960      	ldr	r0, [r4, #20]
 8020812:	1d1d      	adds	r5, r3, #4
 8020814:	600d      	str	r5, [r1, #0]
 8020816:	0635      	lsls	r5, r6, #24
 8020818:	681b      	ldr	r3, [r3, #0]
 802081a:	d501      	bpl.n	8020820 <_printf_i+0x1cc>
 802081c:	6018      	str	r0, [r3, #0]
 802081e:	e002      	b.n	8020826 <_printf_i+0x1d2>
 8020820:	0671      	lsls	r1, r6, #25
 8020822:	d5fb      	bpl.n	802081c <_printf_i+0x1c8>
 8020824:	8018      	strh	r0, [r3, #0]
 8020826:	2300      	movs	r3, #0
 8020828:	6123      	str	r3, [r4, #16]
 802082a:	4616      	mov	r6, r2
 802082c:	e7ba      	b.n	80207a4 <_printf_i+0x150>
 802082e:	680b      	ldr	r3, [r1, #0]
 8020830:	1d1a      	adds	r2, r3, #4
 8020832:	600a      	str	r2, [r1, #0]
 8020834:	681e      	ldr	r6, [r3, #0]
 8020836:	6862      	ldr	r2, [r4, #4]
 8020838:	2100      	movs	r1, #0
 802083a:	4630      	mov	r0, r6
 802083c:	f7df fce0 	bl	8000200 <memchr>
 8020840:	b108      	cbz	r0, 8020846 <_printf_i+0x1f2>
 8020842:	1b80      	subs	r0, r0, r6
 8020844:	6060      	str	r0, [r4, #4]
 8020846:	6863      	ldr	r3, [r4, #4]
 8020848:	6123      	str	r3, [r4, #16]
 802084a:	2300      	movs	r3, #0
 802084c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020850:	e7a8      	b.n	80207a4 <_printf_i+0x150>
 8020852:	6923      	ldr	r3, [r4, #16]
 8020854:	4632      	mov	r2, r6
 8020856:	4649      	mov	r1, r9
 8020858:	4640      	mov	r0, r8
 802085a:	47d0      	blx	sl
 802085c:	3001      	adds	r0, #1
 802085e:	d0ab      	beq.n	80207b8 <_printf_i+0x164>
 8020860:	6823      	ldr	r3, [r4, #0]
 8020862:	079b      	lsls	r3, r3, #30
 8020864:	d413      	bmi.n	802088e <_printf_i+0x23a>
 8020866:	68e0      	ldr	r0, [r4, #12]
 8020868:	9b03      	ldr	r3, [sp, #12]
 802086a:	4298      	cmp	r0, r3
 802086c:	bfb8      	it	lt
 802086e:	4618      	movlt	r0, r3
 8020870:	e7a4      	b.n	80207bc <_printf_i+0x168>
 8020872:	2301      	movs	r3, #1
 8020874:	4632      	mov	r2, r6
 8020876:	4649      	mov	r1, r9
 8020878:	4640      	mov	r0, r8
 802087a:	47d0      	blx	sl
 802087c:	3001      	adds	r0, #1
 802087e:	d09b      	beq.n	80207b8 <_printf_i+0x164>
 8020880:	3501      	adds	r5, #1
 8020882:	68e3      	ldr	r3, [r4, #12]
 8020884:	9903      	ldr	r1, [sp, #12]
 8020886:	1a5b      	subs	r3, r3, r1
 8020888:	42ab      	cmp	r3, r5
 802088a:	dcf2      	bgt.n	8020872 <_printf_i+0x21e>
 802088c:	e7eb      	b.n	8020866 <_printf_i+0x212>
 802088e:	2500      	movs	r5, #0
 8020890:	f104 0619 	add.w	r6, r4, #25
 8020894:	e7f5      	b.n	8020882 <_printf_i+0x22e>
 8020896:	bf00      	nop
 8020898:	0807aec9 	.word	0x0807aec9
 802089c:	0807aeda 	.word	0x0807aeda

080208a0 <_scanf_chars>:
 80208a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80208a4:	4615      	mov	r5, r2
 80208a6:	688a      	ldr	r2, [r1, #8]
 80208a8:	4680      	mov	r8, r0
 80208aa:	460c      	mov	r4, r1
 80208ac:	b932      	cbnz	r2, 80208bc <_scanf_chars+0x1c>
 80208ae:	698a      	ldr	r2, [r1, #24]
 80208b0:	2a00      	cmp	r2, #0
 80208b2:	bf0c      	ite	eq
 80208b4:	2201      	moveq	r2, #1
 80208b6:	f04f 32ff 	movne.w	r2, #4294967295
 80208ba:	608a      	str	r2, [r1, #8]
 80208bc:	6822      	ldr	r2, [r4, #0]
 80208be:	f8df 908c 	ldr.w	r9, [pc, #140]	; 802094c <_scanf_chars+0xac>
 80208c2:	06d1      	lsls	r1, r2, #27
 80208c4:	bf5f      	itttt	pl
 80208c6:	681a      	ldrpl	r2, [r3, #0]
 80208c8:	1d11      	addpl	r1, r2, #4
 80208ca:	6019      	strpl	r1, [r3, #0]
 80208cc:	6816      	ldrpl	r6, [r2, #0]
 80208ce:	2700      	movs	r7, #0
 80208d0:	69a0      	ldr	r0, [r4, #24]
 80208d2:	b188      	cbz	r0, 80208f8 <_scanf_chars+0x58>
 80208d4:	2801      	cmp	r0, #1
 80208d6:	d107      	bne.n	80208e8 <_scanf_chars+0x48>
 80208d8:	682b      	ldr	r3, [r5, #0]
 80208da:	781a      	ldrb	r2, [r3, #0]
 80208dc:	6963      	ldr	r3, [r4, #20]
 80208de:	5c9b      	ldrb	r3, [r3, r2]
 80208e0:	b953      	cbnz	r3, 80208f8 <_scanf_chars+0x58>
 80208e2:	bb27      	cbnz	r7, 802092e <_scanf_chars+0x8e>
 80208e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80208e8:	2802      	cmp	r0, #2
 80208ea:	d120      	bne.n	802092e <_scanf_chars+0x8e>
 80208ec:	682b      	ldr	r3, [r5, #0]
 80208ee:	781b      	ldrb	r3, [r3, #0]
 80208f0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80208f4:	071b      	lsls	r3, r3, #28
 80208f6:	d41a      	bmi.n	802092e <_scanf_chars+0x8e>
 80208f8:	6823      	ldr	r3, [r4, #0]
 80208fa:	06da      	lsls	r2, r3, #27
 80208fc:	bf5e      	ittt	pl
 80208fe:	682b      	ldrpl	r3, [r5, #0]
 8020900:	781b      	ldrbpl	r3, [r3, #0]
 8020902:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020906:	682a      	ldr	r2, [r5, #0]
 8020908:	686b      	ldr	r3, [r5, #4]
 802090a:	3201      	adds	r2, #1
 802090c:	602a      	str	r2, [r5, #0]
 802090e:	68a2      	ldr	r2, [r4, #8]
 8020910:	3b01      	subs	r3, #1
 8020912:	3a01      	subs	r2, #1
 8020914:	606b      	str	r3, [r5, #4]
 8020916:	3701      	adds	r7, #1
 8020918:	60a2      	str	r2, [r4, #8]
 802091a:	b142      	cbz	r2, 802092e <_scanf_chars+0x8e>
 802091c:	2b00      	cmp	r3, #0
 802091e:	dcd7      	bgt.n	80208d0 <_scanf_chars+0x30>
 8020920:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020924:	4629      	mov	r1, r5
 8020926:	4640      	mov	r0, r8
 8020928:	4798      	blx	r3
 802092a:	2800      	cmp	r0, #0
 802092c:	d0d0      	beq.n	80208d0 <_scanf_chars+0x30>
 802092e:	6823      	ldr	r3, [r4, #0]
 8020930:	f013 0310 	ands.w	r3, r3, #16
 8020934:	d105      	bne.n	8020942 <_scanf_chars+0xa2>
 8020936:	68e2      	ldr	r2, [r4, #12]
 8020938:	3201      	adds	r2, #1
 802093a:	60e2      	str	r2, [r4, #12]
 802093c:	69a2      	ldr	r2, [r4, #24]
 802093e:	b102      	cbz	r2, 8020942 <_scanf_chars+0xa2>
 8020940:	7033      	strb	r3, [r6, #0]
 8020942:	6923      	ldr	r3, [r4, #16]
 8020944:	441f      	add	r7, r3
 8020946:	6127      	str	r7, [r4, #16]
 8020948:	2000      	movs	r0, #0
 802094a:	e7cb      	b.n	80208e4 <_scanf_chars+0x44>
 802094c:	0807ac9d 	.word	0x0807ac9d

08020950 <_scanf_i>:
 8020950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020954:	4698      	mov	r8, r3
 8020956:	4b74      	ldr	r3, [pc, #464]	; (8020b28 <_scanf_i+0x1d8>)
 8020958:	460c      	mov	r4, r1
 802095a:	4682      	mov	sl, r0
 802095c:	4616      	mov	r6, r2
 802095e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020962:	b087      	sub	sp, #28
 8020964:	ab03      	add	r3, sp, #12
 8020966:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802096a:	4b70      	ldr	r3, [pc, #448]	; (8020b2c <_scanf_i+0x1dc>)
 802096c:	69a1      	ldr	r1, [r4, #24]
 802096e:	4a70      	ldr	r2, [pc, #448]	; (8020b30 <_scanf_i+0x1e0>)
 8020970:	2903      	cmp	r1, #3
 8020972:	bf18      	it	ne
 8020974:	461a      	movne	r2, r3
 8020976:	68a3      	ldr	r3, [r4, #8]
 8020978:	9201      	str	r2, [sp, #4]
 802097a:	1e5a      	subs	r2, r3, #1
 802097c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020980:	bf88      	it	hi
 8020982:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020986:	4627      	mov	r7, r4
 8020988:	bf82      	ittt	hi
 802098a:	eb03 0905 	addhi.w	r9, r3, r5
 802098e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020992:	60a3      	strhi	r3, [r4, #8]
 8020994:	f857 3b1c 	ldr.w	r3, [r7], #28
 8020998:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802099c:	bf98      	it	ls
 802099e:	f04f 0900 	movls.w	r9, #0
 80209a2:	6023      	str	r3, [r4, #0]
 80209a4:	463d      	mov	r5, r7
 80209a6:	f04f 0b00 	mov.w	fp, #0
 80209aa:	6831      	ldr	r1, [r6, #0]
 80209ac:	ab03      	add	r3, sp, #12
 80209ae:	7809      	ldrb	r1, [r1, #0]
 80209b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80209b4:	2202      	movs	r2, #2
 80209b6:	f7df fc23 	bl	8000200 <memchr>
 80209ba:	b328      	cbz	r0, 8020a08 <_scanf_i+0xb8>
 80209bc:	f1bb 0f01 	cmp.w	fp, #1
 80209c0:	d159      	bne.n	8020a76 <_scanf_i+0x126>
 80209c2:	6862      	ldr	r2, [r4, #4]
 80209c4:	b92a      	cbnz	r2, 80209d2 <_scanf_i+0x82>
 80209c6:	6822      	ldr	r2, [r4, #0]
 80209c8:	2308      	movs	r3, #8
 80209ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80209ce:	6063      	str	r3, [r4, #4]
 80209d0:	6022      	str	r2, [r4, #0]
 80209d2:	6822      	ldr	r2, [r4, #0]
 80209d4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80209d8:	6022      	str	r2, [r4, #0]
 80209da:	68a2      	ldr	r2, [r4, #8]
 80209dc:	1e51      	subs	r1, r2, #1
 80209de:	60a1      	str	r1, [r4, #8]
 80209e0:	b192      	cbz	r2, 8020a08 <_scanf_i+0xb8>
 80209e2:	6832      	ldr	r2, [r6, #0]
 80209e4:	1c51      	adds	r1, r2, #1
 80209e6:	6031      	str	r1, [r6, #0]
 80209e8:	7812      	ldrb	r2, [r2, #0]
 80209ea:	f805 2b01 	strb.w	r2, [r5], #1
 80209ee:	6872      	ldr	r2, [r6, #4]
 80209f0:	3a01      	subs	r2, #1
 80209f2:	2a00      	cmp	r2, #0
 80209f4:	6072      	str	r2, [r6, #4]
 80209f6:	dc07      	bgt.n	8020a08 <_scanf_i+0xb8>
 80209f8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80209fc:	4631      	mov	r1, r6
 80209fe:	4650      	mov	r0, sl
 8020a00:	4790      	blx	r2
 8020a02:	2800      	cmp	r0, #0
 8020a04:	f040 8085 	bne.w	8020b12 <_scanf_i+0x1c2>
 8020a08:	f10b 0b01 	add.w	fp, fp, #1
 8020a0c:	f1bb 0f03 	cmp.w	fp, #3
 8020a10:	d1cb      	bne.n	80209aa <_scanf_i+0x5a>
 8020a12:	6863      	ldr	r3, [r4, #4]
 8020a14:	b90b      	cbnz	r3, 8020a1a <_scanf_i+0xca>
 8020a16:	230a      	movs	r3, #10
 8020a18:	6063      	str	r3, [r4, #4]
 8020a1a:	6863      	ldr	r3, [r4, #4]
 8020a1c:	4945      	ldr	r1, [pc, #276]	; (8020b34 <_scanf_i+0x1e4>)
 8020a1e:	6960      	ldr	r0, [r4, #20]
 8020a20:	1ac9      	subs	r1, r1, r3
 8020a22:	f000 f8ab 	bl	8020b7c <__sccl>
 8020a26:	f04f 0b00 	mov.w	fp, #0
 8020a2a:	68a3      	ldr	r3, [r4, #8]
 8020a2c:	6822      	ldr	r2, [r4, #0]
 8020a2e:	2b00      	cmp	r3, #0
 8020a30:	d03d      	beq.n	8020aae <_scanf_i+0x15e>
 8020a32:	6831      	ldr	r1, [r6, #0]
 8020a34:	6960      	ldr	r0, [r4, #20]
 8020a36:	f891 c000 	ldrb.w	ip, [r1]
 8020a3a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8020a3e:	2800      	cmp	r0, #0
 8020a40:	d035      	beq.n	8020aae <_scanf_i+0x15e>
 8020a42:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8020a46:	d124      	bne.n	8020a92 <_scanf_i+0x142>
 8020a48:	0510      	lsls	r0, r2, #20
 8020a4a:	d522      	bpl.n	8020a92 <_scanf_i+0x142>
 8020a4c:	f10b 0b01 	add.w	fp, fp, #1
 8020a50:	f1b9 0f00 	cmp.w	r9, #0
 8020a54:	d003      	beq.n	8020a5e <_scanf_i+0x10e>
 8020a56:	3301      	adds	r3, #1
 8020a58:	f109 39ff 	add.w	r9, r9, #4294967295
 8020a5c:	60a3      	str	r3, [r4, #8]
 8020a5e:	6873      	ldr	r3, [r6, #4]
 8020a60:	3b01      	subs	r3, #1
 8020a62:	2b00      	cmp	r3, #0
 8020a64:	6073      	str	r3, [r6, #4]
 8020a66:	dd1b      	ble.n	8020aa0 <_scanf_i+0x150>
 8020a68:	6833      	ldr	r3, [r6, #0]
 8020a6a:	3301      	adds	r3, #1
 8020a6c:	6033      	str	r3, [r6, #0]
 8020a6e:	68a3      	ldr	r3, [r4, #8]
 8020a70:	3b01      	subs	r3, #1
 8020a72:	60a3      	str	r3, [r4, #8]
 8020a74:	e7d9      	b.n	8020a2a <_scanf_i+0xda>
 8020a76:	f1bb 0f02 	cmp.w	fp, #2
 8020a7a:	d1ae      	bne.n	80209da <_scanf_i+0x8a>
 8020a7c:	6822      	ldr	r2, [r4, #0]
 8020a7e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8020a82:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8020a86:	d1bf      	bne.n	8020a08 <_scanf_i+0xb8>
 8020a88:	2310      	movs	r3, #16
 8020a8a:	6063      	str	r3, [r4, #4]
 8020a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020a90:	e7a2      	b.n	80209d8 <_scanf_i+0x88>
 8020a92:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8020a96:	6022      	str	r2, [r4, #0]
 8020a98:	780b      	ldrb	r3, [r1, #0]
 8020a9a:	f805 3b01 	strb.w	r3, [r5], #1
 8020a9e:	e7de      	b.n	8020a5e <_scanf_i+0x10e>
 8020aa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020aa4:	4631      	mov	r1, r6
 8020aa6:	4650      	mov	r0, sl
 8020aa8:	4798      	blx	r3
 8020aaa:	2800      	cmp	r0, #0
 8020aac:	d0df      	beq.n	8020a6e <_scanf_i+0x11e>
 8020aae:	6823      	ldr	r3, [r4, #0]
 8020ab0:	05d9      	lsls	r1, r3, #23
 8020ab2:	d50d      	bpl.n	8020ad0 <_scanf_i+0x180>
 8020ab4:	42bd      	cmp	r5, r7
 8020ab6:	d909      	bls.n	8020acc <_scanf_i+0x17c>
 8020ab8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020abc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020ac0:	4632      	mov	r2, r6
 8020ac2:	4650      	mov	r0, sl
 8020ac4:	4798      	blx	r3
 8020ac6:	f105 39ff 	add.w	r9, r5, #4294967295
 8020aca:	464d      	mov	r5, r9
 8020acc:	42bd      	cmp	r5, r7
 8020ace:	d028      	beq.n	8020b22 <_scanf_i+0x1d2>
 8020ad0:	6822      	ldr	r2, [r4, #0]
 8020ad2:	f012 0210 	ands.w	r2, r2, #16
 8020ad6:	d113      	bne.n	8020b00 <_scanf_i+0x1b0>
 8020ad8:	702a      	strb	r2, [r5, #0]
 8020ada:	6863      	ldr	r3, [r4, #4]
 8020adc:	9e01      	ldr	r6, [sp, #4]
 8020ade:	4639      	mov	r1, r7
 8020ae0:	4650      	mov	r0, sl
 8020ae2:	47b0      	blx	r6
 8020ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8020ae8:	6821      	ldr	r1, [r4, #0]
 8020aea:	1d1a      	adds	r2, r3, #4
 8020aec:	f8c8 2000 	str.w	r2, [r8]
 8020af0:	f011 0f20 	tst.w	r1, #32
 8020af4:	681b      	ldr	r3, [r3, #0]
 8020af6:	d00f      	beq.n	8020b18 <_scanf_i+0x1c8>
 8020af8:	6018      	str	r0, [r3, #0]
 8020afa:	68e3      	ldr	r3, [r4, #12]
 8020afc:	3301      	adds	r3, #1
 8020afe:	60e3      	str	r3, [r4, #12]
 8020b00:	1bed      	subs	r5, r5, r7
 8020b02:	44ab      	add	fp, r5
 8020b04:	6925      	ldr	r5, [r4, #16]
 8020b06:	445d      	add	r5, fp
 8020b08:	6125      	str	r5, [r4, #16]
 8020b0a:	2000      	movs	r0, #0
 8020b0c:	b007      	add	sp, #28
 8020b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b12:	f04f 0b00 	mov.w	fp, #0
 8020b16:	e7ca      	b.n	8020aae <_scanf_i+0x15e>
 8020b18:	07ca      	lsls	r2, r1, #31
 8020b1a:	bf4c      	ite	mi
 8020b1c:	8018      	strhmi	r0, [r3, #0]
 8020b1e:	6018      	strpl	r0, [r3, #0]
 8020b20:	e7eb      	b.n	8020afa <_scanf_i+0x1aa>
 8020b22:	2001      	movs	r0, #1
 8020b24:	e7f2      	b.n	8020b0c <_scanf_i+0x1bc>
 8020b26:	bf00      	nop
 8020b28:	08023e40 	.word	0x08023e40
 8020b2c:	08020d05 	.word	0x08020d05
 8020b30:	0801f429 	.word	0x0801f429
 8020b34:	0807af04 	.word	0x0807af04

08020b38 <_read_r>:
 8020b38:	b538      	push	{r3, r4, r5, lr}
 8020b3a:	4d07      	ldr	r5, [pc, #28]	; (8020b58 <_read_r+0x20>)
 8020b3c:	4604      	mov	r4, r0
 8020b3e:	4608      	mov	r0, r1
 8020b40:	4611      	mov	r1, r2
 8020b42:	2200      	movs	r2, #0
 8020b44:	602a      	str	r2, [r5, #0]
 8020b46:	461a      	mov	r2, r3
 8020b48:	f7e1 f85e 	bl	8001c08 <_read>
 8020b4c:	1c43      	adds	r3, r0, #1
 8020b4e:	d102      	bne.n	8020b56 <_read_r+0x1e>
 8020b50:	682b      	ldr	r3, [r5, #0]
 8020b52:	b103      	cbz	r3, 8020b56 <_read_r+0x1e>
 8020b54:	6023      	str	r3, [r4, #0]
 8020b56:	bd38      	pop	{r3, r4, r5, pc}
 8020b58:	20014778 	.word	0x20014778

08020b5c <_sbrk_r>:
 8020b5c:	b538      	push	{r3, r4, r5, lr}
 8020b5e:	4d06      	ldr	r5, [pc, #24]	; (8020b78 <_sbrk_r+0x1c>)
 8020b60:	2300      	movs	r3, #0
 8020b62:	4604      	mov	r4, r0
 8020b64:	4608      	mov	r0, r1
 8020b66:	602b      	str	r3, [r5, #0]
 8020b68:	f7e1 f8bc 	bl	8001ce4 <_sbrk>
 8020b6c:	1c43      	adds	r3, r0, #1
 8020b6e:	d102      	bne.n	8020b76 <_sbrk_r+0x1a>
 8020b70:	682b      	ldr	r3, [r5, #0]
 8020b72:	b103      	cbz	r3, 8020b76 <_sbrk_r+0x1a>
 8020b74:	6023      	str	r3, [r4, #0]
 8020b76:	bd38      	pop	{r3, r4, r5, pc}
 8020b78:	20014778 	.word	0x20014778

08020b7c <__sccl>:
 8020b7c:	b570      	push	{r4, r5, r6, lr}
 8020b7e:	780b      	ldrb	r3, [r1, #0]
 8020b80:	4604      	mov	r4, r0
 8020b82:	2b5e      	cmp	r3, #94	; 0x5e
 8020b84:	bf0b      	itete	eq
 8020b86:	784b      	ldrbeq	r3, [r1, #1]
 8020b88:	1c48      	addne	r0, r1, #1
 8020b8a:	1c88      	addeq	r0, r1, #2
 8020b8c:	2200      	movne	r2, #0
 8020b8e:	bf08      	it	eq
 8020b90:	2201      	moveq	r2, #1
 8020b92:	1e61      	subs	r1, r4, #1
 8020b94:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8020b98:	f801 2f01 	strb.w	r2, [r1, #1]!
 8020b9c:	42a9      	cmp	r1, r5
 8020b9e:	d1fb      	bne.n	8020b98 <__sccl+0x1c>
 8020ba0:	b90b      	cbnz	r3, 8020ba6 <__sccl+0x2a>
 8020ba2:	3801      	subs	r0, #1
 8020ba4:	bd70      	pop	{r4, r5, r6, pc}
 8020ba6:	f082 0101 	eor.w	r1, r2, #1
 8020baa:	54e1      	strb	r1, [r4, r3]
 8020bac:	1c42      	adds	r2, r0, #1
 8020bae:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8020bb2:	2d2d      	cmp	r5, #45	; 0x2d
 8020bb4:	f102 36ff 	add.w	r6, r2, #4294967295
 8020bb8:	4610      	mov	r0, r2
 8020bba:	d006      	beq.n	8020bca <__sccl+0x4e>
 8020bbc:	2d5d      	cmp	r5, #93	; 0x5d
 8020bbe:	d0f1      	beq.n	8020ba4 <__sccl+0x28>
 8020bc0:	b90d      	cbnz	r5, 8020bc6 <__sccl+0x4a>
 8020bc2:	4630      	mov	r0, r6
 8020bc4:	e7ee      	b.n	8020ba4 <__sccl+0x28>
 8020bc6:	462b      	mov	r3, r5
 8020bc8:	e7ef      	b.n	8020baa <__sccl+0x2e>
 8020bca:	7816      	ldrb	r6, [r2, #0]
 8020bcc:	2e5d      	cmp	r6, #93	; 0x5d
 8020bce:	d0fa      	beq.n	8020bc6 <__sccl+0x4a>
 8020bd0:	42b3      	cmp	r3, r6
 8020bd2:	dcf8      	bgt.n	8020bc6 <__sccl+0x4a>
 8020bd4:	4618      	mov	r0, r3
 8020bd6:	3001      	adds	r0, #1
 8020bd8:	4286      	cmp	r6, r0
 8020bda:	5421      	strb	r1, [r4, r0]
 8020bdc:	dcfb      	bgt.n	8020bd6 <__sccl+0x5a>
 8020bde:	43d8      	mvns	r0, r3
 8020be0:	4430      	add	r0, r6
 8020be2:	1c5d      	adds	r5, r3, #1
 8020be4:	42b3      	cmp	r3, r6
 8020be6:	bfa8      	it	ge
 8020be8:	2000      	movge	r0, #0
 8020bea:	182b      	adds	r3, r5, r0
 8020bec:	3202      	adds	r2, #2
 8020bee:	e7de      	b.n	8020bae <__sccl+0x32>

08020bf0 <strnlen>:
 8020bf0:	b510      	push	{r4, lr}
 8020bf2:	4602      	mov	r2, r0
 8020bf4:	4401      	add	r1, r0
 8020bf6:	428a      	cmp	r2, r1
 8020bf8:	4613      	mov	r3, r2
 8020bfa:	d101      	bne.n	8020c00 <strnlen+0x10>
 8020bfc:	1a18      	subs	r0, r3, r0
 8020bfe:	bd10      	pop	{r4, pc}
 8020c00:	781c      	ldrb	r4, [r3, #0]
 8020c02:	3201      	adds	r2, #1
 8020c04:	2c00      	cmp	r4, #0
 8020c06:	d1f6      	bne.n	8020bf6 <strnlen+0x6>
 8020c08:	e7f8      	b.n	8020bfc <strnlen+0xc>
	...

08020c0c <_strtoul_l.isra.0>:
 8020c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020c10:	4e3b      	ldr	r6, [pc, #236]	; (8020d00 <_strtoul_l.isra.0+0xf4>)
 8020c12:	4686      	mov	lr, r0
 8020c14:	468c      	mov	ip, r1
 8020c16:	4660      	mov	r0, ip
 8020c18:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020c1c:	5da5      	ldrb	r5, [r4, r6]
 8020c1e:	f015 0508 	ands.w	r5, r5, #8
 8020c22:	d1f8      	bne.n	8020c16 <_strtoul_l.isra.0+0xa>
 8020c24:	2c2d      	cmp	r4, #45	; 0x2d
 8020c26:	d134      	bne.n	8020c92 <_strtoul_l.isra.0+0x86>
 8020c28:	f89c 4000 	ldrb.w	r4, [ip]
 8020c2c:	f04f 0801 	mov.w	r8, #1
 8020c30:	f100 0c02 	add.w	ip, r0, #2
 8020c34:	2b00      	cmp	r3, #0
 8020c36:	d05e      	beq.n	8020cf6 <_strtoul_l.isra.0+0xea>
 8020c38:	2b10      	cmp	r3, #16
 8020c3a:	d10c      	bne.n	8020c56 <_strtoul_l.isra.0+0x4a>
 8020c3c:	2c30      	cmp	r4, #48	; 0x30
 8020c3e:	d10a      	bne.n	8020c56 <_strtoul_l.isra.0+0x4a>
 8020c40:	f89c 0000 	ldrb.w	r0, [ip]
 8020c44:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8020c48:	2858      	cmp	r0, #88	; 0x58
 8020c4a:	d14f      	bne.n	8020cec <_strtoul_l.isra.0+0xe0>
 8020c4c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8020c50:	2310      	movs	r3, #16
 8020c52:	f10c 0c02 	add.w	ip, ip, #2
 8020c56:	f04f 37ff 	mov.w	r7, #4294967295
 8020c5a:	2500      	movs	r5, #0
 8020c5c:	fbb7 f7f3 	udiv	r7, r7, r3
 8020c60:	fb03 f907 	mul.w	r9, r3, r7
 8020c64:	ea6f 0909 	mvn.w	r9, r9
 8020c68:	4628      	mov	r0, r5
 8020c6a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8020c6e:	2e09      	cmp	r6, #9
 8020c70:	d818      	bhi.n	8020ca4 <_strtoul_l.isra.0+0x98>
 8020c72:	4634      	mov	r4, r6
 8020c74:	42a3      	cmp	r3, r4
 8020c76:	dd24      	ble.n	8020cc2 <_strtoul_l.isra.0+0xb6>
 8020c78:	2d00      	cmp	r5, #0
 8020c7a:	db1f      	blt.n	8020cbc <_strtoul_l.isra.0+0xb0>
 8020c7c:	4287      	cmp	r7, r0
 8020c7e:	d31d      	bcc.n	8020cbc <_strtoul_l.isra.0+0xb0>
 8020c80:	d101      	bne.n	8020c86 <_strtoul_l.isra.0+0x7a>
 8020c82:	45a1      	cmp	r9, r4
 8020c84:	db1a      	blt.n	8020cbc <_strtoul_l.isra.0+0xb0>
 8020c86:	fb00 4003 	mla	r0, r0, r3, r4
 8020c8a:	2501      	movs	r5, #1
 8020c8c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020c90:	e7eb      	b.n	8020c6a <_strtoul_l.isra.0+0x5e>
 8020c92:	2c2b      	cmp	r4, #43	; 0x2b
 8020c94:	bf08      	it	eq
 8020c96:	f89c 4000 	ldrbeq.w	r4, [ip]
 8020c9a:	46a8      	mov	r8, r5
 8020c9c:	bf08      	it	eq
 8020c9e:	f100 0c02 	addeq.w	ip, r0, #2
 8020ca2:	e7c7      	b.n	8020c34 <_strtoul_l.isra.0+0x28>
 8020ca4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8020ca8:	2e19      	cmp	r6, #25
 8020caa:	d801      	bhi.n	8020cb0 <_strtoul_l.isra.0+0xa4>
 8020cac:	3c37      	subs	r4, #55	; 0x37
 8020cae:	e7e1      	b.n	8020c74 <_strtoul_l.isra.0+0x68>
 8020cb0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8020cb4:	2e19      	cmp	r6, #25
 8020cb6:	d804      	bhi.n	8020cc2 <_strtoul_l.isra.0+0xb6>
 8020cb8:	3c57      	subs	r4, #87	; 0x57
 8020cba:	e7db      	b.n	8020c74 <_strtoul_l.isra.0+0x68>
 8020cbc:	f04f 35ff 	mov.w	r5, #4294967295
 8020cc0:	e7e4      	b.n	8020c8c <_strtoul_l.isra.0+0x80>
 8020cc2:	2d00      	cmp	r5, #0
 8020cc4:	da07      	bge.n	8020cd6 <_strtoul_l.isra.0+0xca>
 8020cc6:	2322      	movs	r3, #34	; 0x22
 8020cc8:	f8ce 3000 	str.w	r3, [lr]
 8020ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8020cd0:	b942      	cbnz	r2, 8020ce4 <_strtoul_l.isra.0+0xd8>
 8020cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020cd6:	f1b8 0f00 	cmp.w	r8, #0
 8020cda:	d000      	beq.n	8020cde <_strtoul_l.isra.0+0xd2>
 8020cdc:	4240      	negs	r0, r0
 8020cde:	2a00      	cmp	r2, #0
 8020ce0:	d0f7      	beq.n	8020cd2 <_strtoul_l.isra.0+0xc6>
 8020ce2:	b10d      	cbz	r5, 8020ce8 <_strtoul_l.isra.0+0xdc>
 8020ce4:	f10c 31ff 	add.w	r1, ip, #4294967295
 8020ce8:	6011      	str	r1, [r2, #0]
 8020cea:	e7f2      	b.n	8020cd2 <_strtoul_l.isra.0+0xc6>
 8020cec:	2430      	movs	r4, #48	; 0x30
 8020cee:	2b00      	cmp	r3, #0
 8020cf0:	d1b1      	bne.n	8020c56 <_strtoul_l.isra.0+0x4a>
 8020cf2:	2308      	movs	r3, #8
 8020cf4:	e7af      	b.n	8020c56 <_strtoul_l.isra.0+0x4a>
 8020cf6:	2c30      	cmp	r4, #48	; 0x30
 8020cf8:	d0a2      	beq.n	8020c40 <_strtoul_l.isra.0+0x34>
 8020cfa:	230a      	movs	r3, #10
 8020cfc:	e7ab      	b.n	8020c56 <_strtoul_l.isra.0+0x4a>
 8020cfe:	bf00      	nop
 8020d00:	0807ac9d 	.word	0x0807ac9d

08020d04 <_strtoul_r>:
 8020d04:	f7ff bf82 	b.w	8020c0c <_strtoul_l.isra.0>

08020d08 <__submore>:
 8020d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d0c:	460c      	mov	r4, r1
 8020d0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020d14:	4299      	cmp	r1, r3
 8020d16:	d11d      	bne.n	8020d54 <__submore+0x4c>
 8020d18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020d1c:	f7fe ff4a 	bl	801fbb4 <_malloc_r>
 8020d20:	b918      	cbnz	r0, 8020d2a <__submore+0x22>
 8020d22:	f04f 30ff 	mov.w	r0, #4294967295
 8020d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020d2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8020d30:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8020d34:	6360      	str	r0, [r4, #52]	; 0x34
 8020d36:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8020d3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8020d3e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8020d42:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8020d46:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8020d4a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8020d4e:	6020      	str	r0, [r4, #0]
 8020d50:	2000      	movs	r0, #0
 8020d52:	e7e8      	b.n	8020d26 <__submore+0x1e>
 8020d54:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8020d56:	0077      	lsls	r7, r6, #1
 8020d58:	463a      	mov	r2, r7
 8020d5a:	f000 f845 	bl	8020de8 <_realloc_r>
 8020d5e:	4605      	mov	r5, r0
 8020d60:	2800      	cmp	r0, #0
 8020d62:	d0de      	beq.n	8020d22 <__submore+0x1a>
 8020d64:	eb00 0806 	add.w	r8, r0, r6
 8020d68:	4601      	mov	r1, r0
 8020d6a:	4632      	mov	r2, r6
 8020d6c:	4640      	mov	r0, r8
 8020d6e:	f7fe f8bd 	bl	801eeec <memcpy>
 8020d72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8020d76:	f8c4 8000 	str.w	r8, [r4]
 8020d7a:	e7e9      	b.n	8020d50 <__submore+0x48>

08020d7c <abort>:
 8020d7c:	b508      	push	{r3, lr}
 8020d7e:	2006      	movs	r0, #6
 8020d80:	f000 f880 	bl	8020e84 <raise>
 8020d84:	2001      	movs	r0, #1
 8020d86:	f7e0 ff35 	bl	8001bf4 <_exit>
	...

08020d8c <_fstat_r>:
 8020d8c:	b538      	push	{r3, r4, r5, lr}
 8020d8e:	4d07      	ldr	r5, [pc, #28]	; (8020dac <_fstat_r+0x20>)
 8020d90:	2300      	movs	r3, #0
 8020d92:	4604      	mov	r4, r0
 8020d94:	4608      	mov	r0, r1
 8020d96:	4611      	mov	r1, r2
 8020d98:	602b      	str	r3, [r5, #0]
 8020d9a:	f7e0 ff7a 	bl	8001c92 <_fstat>
 8020d9e:	1c43      	adds	r3, r0, #1
 8020da0:	d102      	bne.n	8020da8 <_fstat_r+0x1c>
 8020da2:	682b      	ldr	r3, [r5, #0]
 8020da4:	b103      	cbz	r3, 8020da8 <_fstat_r+0x1c>
 8020da6:	6023      	str	r3, [r4, #0]
 8020da8:	bd38      	pop	{r3, r4, r5, pc}
 8020daa:	bf00      	nop
 8020dac:	20014778 	.word	0x20014778

08020db0 <_isatty_r>:
 8020db0:	b538      	push	{r3, r4, r5, lr}
 8020db2:	4d06      	ldr	r5, [pc, #24]	; (8020dcc <_isatty_r+0x1c>)
 8020db4:	2300      	movs	r3, #0
 8020db6:	4604      	mov	r4, r0
 8020db8:	4608      	mov	r0, r1
 8020dba:	602b      	str	r3, [r5, #0]
 8020dbc:	f7e0 ff79 	bl	8001cb2 <_isatty>
 8020dc0:	1c43      	adds	r3, r0, #1
 8020dc2:	d102      	bne.n	8020dca <_isatty_r+0x1a>
 8020dc4:	682b      	ldr	r3, [r5, #0]
 8020dc6:	b103      	cbz	r3, 8020dca <_isatty_r+0x1a>
 8020dc8:	6023      	str	r3, [r4, #0]
 8020dca:	bd38      	pop	{r3, r4, r5, pc}
 8020dcc:	20014778 	.word	0x20014778

08020dd0 <__malloc_lock>:
 8020dd0:	4801      	ldr	r0, [pc, #4]	; (8020dd8 <__malloc_lock+0x8>)
 8020dd2:	f7fe be05 	b.w	801f9e0 <__retarget_lock_acquire_recursive>
 8020dd6:	bf00      	nop
 8020dd8:	20014784 	.word	0x20014784

08020ddc <__malloc_unlock>:
 8020ddc:	4801      	ldr	r0, [pc, #4]	; (8020de4 <__malloc_unlock+0x8>)
 8020dde:	f7fe be00 	b.w	801f9e2 <__retarget_lock_release_recursive>
 8020de2:	bf00      	nop
 8020de4:	20014784 	.word	0x20014784

08020de8 <_realloc_r>:
 8020de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020dea:	4607      	mov	r7, r0
 8020dec:	4614      	mov	r4, r2
 8020dee:	460e      	mov	r6, r1
 8020df0:	b921      	cbnz	r1, 8020dfc <_realloc_r+0x14>
 8020df2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020df6:	4611      	mov	r1, r2
 8020df8:	f7fe bedc 	b.w	801fbb4 <_malloc_r>
 8020dfc:	b922      	cbnz	r2, 8020e08 <_realloc_r+0x20>
 8020dfe:	f7fe fe89 	bl	801fb14 <_free_r>
 8020e02:	4625      	mov	r5, r4
 8020e04:	4628      	mov	r0, r5
 8020e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020e08:	f000 f858 	bl	8020ebc <_malloc_usable_size_r>
 8020e0c:	42a0      	cmp	r0, r4
 8020e0e:	d20f      	bcs.n	8020e30 <_realloc_r+0x48>
 8020e10:	4621      	mov	r1, r4
 8020e12:	4638      	mov	r0, r7
 8020e14:	f7fe fece 	bl	801fbb4 <_malloc_r>
 8020e18:	4605      	mov	r5, r0
 8020e1a:	2800      	cmp	r0, #0
 8020e1c:	d0f2      	beq.n	8020e04 <_realloc_r+0x1c>
 8020e1e:	4631      	mov	r1, r6
 8020e20:	4622      	mov	r2, r4
 8020e22:	f7fe f863 	bl	801eeec <memcpy>
 8020e26:	4631      	mov	r1, r6
 8020e28:	4638      	mov	r0, r7
 8020e2a:	f7fe fe73 	bl	801fb14 <_free_r>
 8020e2e:	e7e9      	b.n	8020e04 <_realloc_r+0x1c>
 8020e30:	4635      	mov	r5, r6
 8020e32:	e7e7      	b.n	8020e04 <_realloc_r+0x1c>

08020e34 <_raise_r>:
 8020e34:	291f      	cmp	r1, #31
 8020e36:	b538      	push	{r3, r4, r5, lr}
 8020e38:	4604      	mov	r4, r0
 8020e3a:	460d      	mov	r5, r1
 8020e3c:	d904      	bls.n	8020e48 <_raise_r+0x14>
 8020e3e:	2316      	movs	r3, #22
 8020e40:	6003      	str	r3, [r0, #0]
 8020e42:	f04f 30ff 	mov.w	r0, #4294967295
 8020e46:	bd38      	pop	{r3, r4, r5, pc}
 8020e48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020e4a:	b112      	cbz	r2, 8020e52 <_raise_r+0x1e>
 8020e4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020e50:	b94b      	cbnz	r3, 8020e66 <_raise_r+0x32>
 8020e52:	4620      	mov	r0, r4
 8020e54:	f000 f830 	bl	8020eb8 <_getpid_r>
 8020e58:	462a      	mov	r2, r5
 8020e5a:	4601      	mov	r1, r0
 8020e5c:	4620      	mov	r0, r4
 8020e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020e62:	f000 b817 	b.w	8020e94 <_kill_r>
 8020e66:	2b01      	cmp	r3, #1
 8020e68:	d00a      	beq.n	8020e80 <_raise_r+0x4c>
 8020e6a:	1c59      	adds	r1, r3, #1
 8020e6c:	d103      	bne.n	8020e76 <_raise_r+0x42>
 8020e6e:	2316      	movs	r3, #22
 8020e70:	6003      	str	r3, [r0, #0]
 8020e72:	2001      	movs	r0, #1
 8020e74:	e7e7      	b.n	8020e46 <_raise_r+0x12>
 8020e76:	2400      	movs	r4, #0
 8020e78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020e7c:	4628      	mov	r0, r5
 8020e7e:	4798      	blx	r3
 8020e80:	2000      	movs	r0, #0
 8020e82:	e7e0      	b.n	8020e46 <_raise_r+0x12>

08020e84 <raise>:
 8020e84:	4b02      	ldr	r3, [pc, #8]	; (8020e90 <raise+0xc>)
 8020e86:	4601      	mov	r1, r0
 8020e88:	6818      	ldr	r0, [r3, #0]
 8020e8a:	f7ff bfd3 	b.w	8020e34 <_raise_r>
 8020e8e:	bf00      	nop
 8020e90:	20000040 	.word	0x20000040

08020e94 <_kill_r>:
 8020e94:	b538      	push	{r3, r4, r5, lr}
 8020e96:	4d07      	ldr	r5, [pc, #28]	; (8020eb4 <_kill_r+0x20>)
 8020e98:	2300      	movs	r3, #0
 8020e9a:	4604      	mov	r4, r0
 8020e9c:	4608      	mov	r0, r1
 8020e9e:	4611      	mov	r1, r2
 8020ea0:	602b      	str	r3, [r5, #0]
 8020ea2:	f7e0 fe95 	bl	8001bd0 <_kill>
 8020ea6:	1c43      	adds	r3, r0, #1
 8020ea8:	d102      	bne.n	8020eb0 <_kill_r+0x1c>
 8020eaa:	682b      	ldr	r3, [r5, #0]
 8020eac:	b103      	cbz	r3, 8020eb0 <_kill_r+0x1c>
 8020eae:	6023      	str	r3, [r4, #0]
 8020eb0:	bd38      	pop	{r3, r4, r5, pc}
 8020eb2:	bf00      	nop
 8020eb4:	20014778 	.word	0x20014778

08020eb8 <_getpid_r>:
 8020eb8:	f7e0 be82 	b.w	8001bc0 <_getpid>

08020ebc <_malloc_usable_size_r>:
 8020ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020ec0:	1f18      	subs	r0, r3, #4
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	bfbc      	itt	lt
 8020ec6:	580b      	ldrlt	r3, [r1, r0]
 8020ec8:	18c0      	addlt	r0, r0, r3
 8020eca:	4770      	bx	lr

08020ecc <_init>:
 8020ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ece:	bf00      	nop
 8020ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020ed2:	bc08      	pop	{r3}
 8020ed4:	469e      	mov	lr, r3
 8020ed6:	4770      	bx	lr

08020ed8 <_fini>:
 8020ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020eda:	bf00      	nop
 8020edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020ede:	bc08      	pop	{r3}
 8020ee0:	469e      	mov	lr, r3
 8020ee2:	4770      	bx	lr
