
test_function.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021174  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005a07c  08021304  08021304  00031304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807b380  0807b380  000900a4  2**0
                  CONTENTS
  4 .ARM          00000008  0807b380  0807b380  0008b380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807b388  0807b388  000900a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807b388  0807b388  0008b388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807b38c  0807b38c  0008b38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0807b390  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000900a4  2**0
                  CONTENTS
 10 .bss          00014b40  200000a4  200000a4  000900a4  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  20014be4  20014be4  000900a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000900a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00057ff0  00000000  00000000  000900d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a7a4  00000000  00000000  000e80c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e48  00000000  00000000  000f2868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002c38  00000000  00000000  000f56b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000378e1  00000000  00000000  000f82e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004c014  00000000  00000000  0012fbc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd67a  00000000  00000000  0017bbdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00279257  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cdb0  00000000  00000000  002792ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080212ec 	.word	0x080212ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	080212ec 	.word	0x080212ec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <WM8978_Register_Wirter>:
static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma);
static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s, uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size);

HAL_StatusTypeDef WM8978_Register_Wirter(uint8_t reg_addr, uint16_t data)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af02      	add	r7, sp, #8
 800059e:	4603      	mov	r3, r0
 80005a0:	460a      	mov	r2, r1
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	80bb      	strh	r3, [r7, #4]
	uint8_t pData[10] =	{ 0 };
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	809a      	strh	r2, [r3, #4]

	pData[0] = (reg_addr << 1) | ((data >> 8) & 0x01);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	b25a      	sxtb	r2, r3
 80005bc:	88bb      	ldrh	r3, [r7, #4]
 80005be:	0a1b      	lsrs	r3, r3, #8
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b25b      	sxtb	r3, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	733b      	strb	r3, [r7, #12]
	pData[1] = data & 0xFF;
 80005d2:	88bb      	ldrh	r3, [r7, #4]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&hi2c1, WM8978_WIRTE_ADDRESS, pData, 2, 1000);
 80005d8:	f107 020c 	add.w	r2, r7, #12
 80005dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2302      	movs	r3, #2
 80005e4:	2134      	movs	r1, #52	; 0x34
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <WM8978_Register_Wirter+0x60>)
 80005e8:	f005 f838 	bl	800565c <HAL_I2C_Master_Transmit>
 80005ec:	4603      	mov	r3, r0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000ccc4 	.word	0x2000ccc4

080005fc <WAV_FileInit>:



void WAV_FileInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	DataLength = sizeof(data) - 0x2c;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <WAV_FileInit+0x1c>)
 8000602:	4a06      	ldr	r2, [pc, #24]	; (800061c <WAV_FileInit+0x20>)
 8000604:	601a      	str	r2, [r3, #0]
	DataAddress = (uint8_t*) (data + 0x2c);
 8000606:	4a06      	ldr	r2, [pc, #24]	; (8000620 <WAV_FileInit+0x24>)
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <WAV_FileInit+0x28>)
 800060a:	601a      	str	r2, [r3, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200000c0 	.word	0x200000c0
 800061c:	00029e7c 	.word	0x00029e7c
 8000620:	080242f0 	.word	0x080242f0
 8000624:	200000c4 	.word	0x200000c4

08000628 <WAV_FileRead2>:
	return Playing_End;
}


uint32_t WAV_FileRead2(uint8_t *buf, uint32_t size)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
	UINT bw;
    int i;
	 f_read(&abc,buf,size,&bw);//16bit音频,直接读取数据
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	4815      	ldr	r0, [pc, #84]	; (8000690 <WAV_FileRead2+0x68>)
 800063c:	f00e f8d0 	bl	800e7e0 <f_read>
	 if(bw==0){
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d11f      	bne.n	8000686 <WAV_FileRead2+0x5e>
			 if(bw<BUFFER_SIZE)//不够数据了,补充0
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800064c:	d210      	bcs.n	8000670 <WAV_FileRead2+0x48>
			 		{
			 			for(i=bw;i<BUFFER_SIZE-bw;i++)buf[i]=0;
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	e007      	b.n	8000664 <WAV_FileRead2+0x3c>
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	429a      	cmp	r2, r3
 800066e:	d8f1      	bhi.n	8000654 <WAV_FileRead2+0x2c>
			 		}
			 f_close(&abc);
 8000670:	4807      	ldr	r0, [pc, #28]	; (8000690 <WAV_FileRead2+0x68>)
 8000672:	f00e fc50 	bl	800ef16 <f_close>
			  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_9,GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <WAV_FileRead2+0x6c>)
 800067e:	f004 fe75 	bl	800536c <HAL_GPIO_WritePin>

			 return 0;
 8000682:	2300      	movs	r3, #0
 8000684:	e000      	b.n	8000688 <WAV_FileRead2+0x60>
//	{
//		memcpy(buf, DataAddress, DataLength);
//		Playing_End = 0;
//	}

	return 1;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000cd24 	.word	0x2000cd24
 8000694:	40021800 	.word	0x40021800

08000698 <HAL_I2S_Transmit_DMAEx>:

HAL_StatusTypeDef HAL_I2S_Transmit_DMAEx(I2S_HandleTypeDef *hi2s, uint16_t *FirstBuffer, uint16_t *SecondBuffer, uint16_t Size)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b089      	sub	sp, #36	; 0x24
 800069c:	af02      	add	r7, sp, #8
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	807b      	strh	r3, [r7, #2]
	uint32_t tmpreg_cfgr;

	if ((FirstBuffer == NULL) || (SecondBuffer == NULL) || (Size == 0U))
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d005      	beq.n	80006b8 <HAL_I2S_Transmit_DMAEx+0x20>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <HAL_I2S_Transmit_DMAEx+0x20>
 80006b2:	887b      	ldrh	r3, [r7, #2]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d101      	bne.n	80006bc <HAL_I2S_Transmit_DMAEx+0x24>
	{
		return HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e09c      	b.n	80007f6 <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Process Locked */
	__HAL_LOCK(hi2s);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d101      	bne.n	80006cc <HAL_I2S_Transmit_DMAEx+0x34>
 80006c8:	2302      	movs	r3, #2
 80006ca:	e094      	b.n	80007f6 <HAL_I2S_Transmit_DMAEx+0x15e>
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	2201      	movs	r2, #1
 80006d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (hi2s->State != HAL_I2S_STATE_READY)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d005      	beq.n	80006ec <HAL_I2S_Transmit_DMAEx+0x54>
	{
		__HAL_UNLOCK(hi2s);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_BUSY;
 80006e8:	2302      	movs	r3, #2
 80006ea:	e084      	b.n	80007f6 <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Set state and reset error code */
	hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2203      	movs	r2, #3
 80006f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	2200      	movs	r2, #0
 80006f8:	645a      	str	r2, [r3, #68]	; 0x44
	hi2s->pTxBuffPtr = FirstBuffer;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	68ba      	ldr	r2, [r7, #8]
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24

	tmpreg_cfgr = hi2s->Instance->I2SCFGR
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	617b      	str	r3, [r7, #20]
			& (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);

	if ((tmpreg_cfgr == I2S_DATAFORMAT_24B)
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d002      	beq.n	8000718 <HAL_I2S_Transmit_DMAEx+0x80>
			|| (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	2b05      	cmp	r3, #5
 8000716:	d10a      	bne.n	800072e <HAL_I2S_Transmit_DMAEx+0x96>
	{
		hi2s->TxXferSize = (Size << 1U);
 8000718:	887b      	ldrh	r3, [r7, #2]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	b29a      	uxth	r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = (Size << 1U);
 8000722:	887b      	ldrh	r3, [r7, #2]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b29a      	uxth	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800072c:	e005      	b.n	800073a <HAL_I2S_Transmit_DMAEx+0xa2>
	}
	else
	{
		hi2s->TxXferSize = Size;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	887a      	ldrh	r2, [r7, #2]
 8000732:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = Size;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	887a      	ldrh	r2, [r7, #2]
 8000738:	855a      	strh	r2, [r3, #42]	; 0x2a
	}

	/* Set the I2S Tx DMA Half transfer complete callback */
	hi2s->hdmatx->XferHalfCpltCallback = NULL;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800073e:	2200      	movs	r2, #0
 8000740:	641a      	str	r2, [r3, #64]	; 0x40
	hi2s->hdmatx->XferM1HalfCpltCallback = NULL;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000746:	2200      	movs	r2, #0
 8000748:	649a      	str	r2, [r3, #72]	; 0x48

	/* Set the I2S Tx DMA transfer complete callback */
	hi2s->hdmatx->XferCpltCallback = DMAEx_XferCpltCallback;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800074e:	4a2c      	ldr	r2, [pc, #176]	; (8000800 <HAL_I2S_Transmit_DMAEx+0x168>)
 8000750:	63da      	str	r2, [r3, #60]	; 0x3c
	hi2s->hdmatx->XferM1CpltCallback = DMAEx_XferM1CpltCallback;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000756:	4a2b      	ldr	r2, [pc, #172]	; (8000804 <HAL_I2S_Transmit_DMAEx+0x16c>)
 8000758:	645a      	str	r2, [r3, #68]	; 0x44

	/* Set the DMA error callback */
	hi2s->hdmatx->XferErrorCallback = DMAEx_XferErrorCallback;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800075e:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <HAL_I2S_Transmit_DMAEx+0x170>)
 8000760:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set the DMA abort callback */
	hi2s->hdmatx->XferAbortCallback = NULL;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000766:	2200      	movs	r2, #0
 8000768:	651a      	str	r2, [r3, #80]	; 0x50

	/* Enable the Tx DMA Stream/Channel */
	if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(hi2s->hdmatx, (uint32_t) FirstBuffer, (uint32_t) &hi2s->Instance->DR, (uint32_t) SecondBuffer,	hi2s->TxXferSize))
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800076e:	68b9      	ldr	r1, [r7, #8]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	330c      	adds	r3, #12
 8000776:	461c      	mov	r4, r3
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800077e:	b29b      	uxth	r3, r3
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	4613      	mov	r3, r2
 8000784:	4622      	mov	r2, r4
 8000786:	f002 f941 	bl	8002a0c <HAL_DMAEx_MultiBufferStart_IT>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00f      	beq.n	80007b0 <HAL_I2S_Transmit_DMAEx+0x118>
	{
		/* Update SPI error code */
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000794:	f043 0208 	orr.w	r2, r3, #8
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	645a      	str	r2, [r3, #68]	; 0x44
		hi2s->State = HAL_I2S_STATE_READY;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2201      	movs	r2, #1
 80007a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		__HAL_UNLOCK(hi2s);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e022      	b.n	80007f6 <HAL_I2S_Transmit_DMAEx+0x15e>
	}

	/* Check if the I2S is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d107      	bne.n	80007ce <HAL_I2S_Transmit_DMAEx+0x136>
	{
		/* Enable I2S peripheral */
		__HAL_I2S_ENABLE(hi2s);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	69da      	ldr	r2, [r3, #28]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007cc:	61da      	str	r2, [r3, #28]
	}

	/* Check if the I2S Tx request is already enabled */
	if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	f003 0302 	and.w	r3, r3, #2
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d107      	bne.n	80007ec <HAL_I2S_Transmit_DMAEx+0x154>
	{
		/* Enable Tx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f042 0202 	orr.w	r2, r2, #2
 80007ea:	605a      	str	r2, [r3, #4]
	}

	__HAL_UNLOCK(hi2s);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return HAL_OK;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	371c      	adds	r7, #28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd90      	pop	{r4, r7, pc}
 80007fe:	bf00      	nop
 8000800:	0800080d 	.word	0x0800080d
 8000804:	08000845 	.word	0x08000845
 8000808:	0800086d 	.word	0x0800086d

0800080c <DMAEx_XferCpltCallback>:




static void DMAEx_XferCpltCallback(struct __DMA_HandleTypeDef *hdma)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

	if(DMA1_Stream4->CR&(1<<19)){
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <DMAEx_XferCpltCallback+0x30>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800081c:	2b00      	cmp	r3, #0
 800081e:	d009      	beq.n	8000834 <DMAEx_XferCpltCallback+0x28>
		if (WAV_FileRead2((uint8_t*)I2S_Buf0,sizeof(I2S_Buf0)) == 0)
 8000820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <DMAEx_XferCpltCallback+0x34>)
 8000826:	f7ff feff 	bl	8000628 <WAV_FileRead2>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d101      	bne.n	8000834 <DMAEx_XferCpltCallback+0x28>
			{
				Audio_Player_Stop();
 8000830:	f000 f8fa 	bl	8000a28 <Audio_Player_Stop>
			}

	}

}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40026070 	.word	0x40026070
 8000840:	200000c8 	.word	0x200000c8

08000844 <DMAEx_XferM1CpltCallback>:

static void DMAEx_XferM1CpltCallback(struct __DMA_HandleTypeDef *hdma)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

		if (WAV_FileRead2((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1)) == 0)
 800084c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <DMAEx_XferM1CpltCallback+0x24>)
 8000852:	f7ff fee9 	bl	8000628 <WAV_FileRead2>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d101      	bne.n	8000860 <DMAEx_XferM1CpltCallback+0x1c>
			{
				Audio_Player_Stop();
 800085c:	f000 f8e4 	bl	8000a28 <Audio_Player_Stop>





}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200004c8 	.word	0x200004c8

0800086c <DMAEx_XferErrorCallback>:

static void DMAEx_XferErrorCallback(struct __DMA_HandleTypeDef *hdma)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <Audio_Player_Init>:

void Audio_Player_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	WM8978_Register_Wirter(0, 0);
 8000884:	2100      	movs	r1, #0
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff fe86 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(1, 0x0F);
 800088c:	210f      	movs	r1, #15
 800088e:	2001      	movs	r0, #1
 8000890:	f7ff fe82 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(2, 0x180);	// ģ��Ŵ���ʹ�ܣ�?? ʹ��������뻺����??
 8000894:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000898:	2002      	movs	r0, #2
 800089a:	f7ff fe7d 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(3, 0x7F);
 800089e:	217f      	movs	r1, #127	; 0x7f
 80008a0:	2003      	movs	r0, #3
 80008a2:	f7ff fe79 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(4, 0x10);
 80008a6:	2110      	movs	r1, #16
 80008a8:	2004      	movs	r0, #4
 80008aa:	f7ff fe75 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(6, 0);
 80008ae:	2100      	movs	r1, #0
 80008b0:	2006      	movs	r0, #6
 80008b2:	f7ff fe71 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(10, 0x08);
 80008b6:	2108      	movs	r1, #8
 80008b8:	200a      	movs	r0, #10
 80008ba:	f7ff fe6d 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(43, 0x10);
 80008be:	2110      	movs	r1, #16
 80008c0:	202b      	movs	r0, #43	; 0x2b
 80008c2:	f7ff fe69 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(52,40);		// 设置LOUT2左声道音�????
 80008c6:	2128      	movs	r1, #40	; 0x28
 80008c8:	2034      	movs	r0, #52	; 0x34
 80008ca:	f7ff fe65 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(53,40|(1<<8));
 80008ce:	f44f 7194 	mov.w	r1, #296	; 0x128
 80008d2:	2035      	movs	r0, #53	; 0x35
 80008d4:	f7ff fe60 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(54, 50);
 80008d8:	2132      	movs	r1, #50	; 0x32
 80008da:	2036      	movs	r0, #54	; 0x36
 80008dc:	f7ff fe5c 	bl	8000598 <WM8978_Register_Wirter>
	WM8978_Register_Wirter(55, 50 | (1 << 8));
 80008e0:	f44f 7199 	mov.w	r1, #306	; 0x132
 80008e4:	2037      	movs	r0, #55	; 0x37
 80008e6:	f7ff fe57 	bl	8000598 <WM8978_Register_Wirter>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}

080008ee <Audio_Set_Volume>:

void Audio_Set_Volume(int num)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
	WM8978_Register_Wirter(0, 0);
 80008f6:	2100      	movs	r1, #0
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff fe4d 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(1, 0x0F);
 80008fe:	210f      	movs	r1, #15
 8000900:	2001      	movs	r0, #1
 8000902:	f7ff fe49 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(2, 0x180);	// ģ��Ŵ���ʹ�ܣ�?? ʹ��������뻺����??
 8000906:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800090a:	2002      	movs	r0, #2
 800090c:	f7ff fe44 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(3, 0x7F);
 8000910:	217f      	movs	r1, #127	; 0x7f
 8000912:	2003      	movs	r0, #3
 8000914:	f7ff fe40 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(4, 0x10);
 8000918:	2110      	movs	r1, #16
 800091a:	2004      	movs	r0, #4
 800091c:	f7ff fe3c 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(6, 0);
 8000920:	2100      	movs	r1, #0
 8000922:	2006      	movs	r0, #6
 8000924:	f7ff fe38 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(10, 0x08);
 8000928:	2108      	movs	r1, #8
 800092a:	200a      	movs	r0, #10
 800092c:	f7ff fe34 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(43, 0x10);
 8000930:	2110      	movs	r1, #16
 8000932:	202b      	movs	r0, #43	; 0x2b
 8000934:	f7ff fe30 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(52,num);		// 设置LOUT2左声道音�????
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	b29b      	uxth	r3, r3
 800093c:	4619      	mov	r1, r3
 800093e:	2034      	movs	r0, #52	; 0x34
 8000940:	f7ff fe2a 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(53,num|(1<<8));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	b21b      	sxth	r3, r3
 8000948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094c:	b21b      	sxth	r3, r3
 800094e:	b29b      	uxth	r3, r3
 8000950:	4619      	mov	r1, r3
 8000952:	2035      	movs	r0, #53	; 0x35
 8000954:	f7ff fe20 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(54, num);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	b29b      	uxth	r3, r3
 800095c:	4619      	mov	r1, r3
 800095e:	2036      	movs	r0, #54	; 0x36
 8000960:	f7ff fe1a 	bl	8000598 <WM8978_Register_Wirter>
		WM8978_Register_Wirter(55, num | (1 << 8));
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	b21b      	sxth	r3, r3
 8000968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800096c:	b21b      	sxth	r3, r3
 800096e:	b29b      	uxth	r3, r3
 8000970:	4619      	mov	r1, r3
 8000972:	2037      	movs	r0, #55	; 0x37
 8000974:	f7ff fe10 	bl	8000598 <WM8978_Register_Wirter>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <Audio_Player_Start>:

void Audio_Player_Start(const char* filename[])
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
		memset(audioname, '\0', 30);
 8000988:	221e      	movs	r2, #30
 800098a:	2100      	movs	r1, #0
 800098c:	481d      	ldr	r0, [pc, #116]	; (8000a04 <Audio_Player_Start+0x84>)
 800098e:	f01e fce5 	bl	801f35c <memset>
		strcat(audioname,file_prefix);
 8000992:	491d      	ldr	r1, [pc, #116]	; (8000a08 <Audio_Player_Start+0x88>)
 8000994:	481b      	ldr	r0, [pc, #108]	; (8000a04 <Audio_Player_Start+0x84>)
 8000996:	f01e fe7c 	bl	801f692 <strcat>
		strcat(audioname,filename);
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	4819      	ldr	r0, [pc, #100]	; (8000a04 <Audio_Player_Start+0x84>)
 800099e:	f01e fe78 	bl	801f692 <strcat>
		strcat(audioname,end);
 80009a2:	491a      	ldr	r1, [pc, #104]	; (8000a0c <Audio_Player_Start+0x8c>)
 80009a4:	4817      	ldr	r0, [pc, #92]	; (8000a04 <Audio_Player_Start+0x84>)
 80009a6:	f01e fe74 	bl	801f692 <strcat>
		HAL_UART_Transmit(&huart1,"zzz",30,100);
 80009aa:	2364      	movs	r3, #100	; 0x64
 80009ac:	221e      	movs	r2, #30
 80009ae:	4918      	ldr	r1, [pc, #96]	; (8000a10 <Audio_Player_Start+0x90>)
 80009b0:	4818      	ldr	r0, [pc, #96]	; (8000a14 <Audio_Player_Start+0x94>)
 80009b2:	f008 fcd6 	bl	8009362 <HAL_UART_Transmit>
	    f_open(&abc,audioname, FA_READ);
 80009b6:	2201      	movs	r2, #1
 80009b8:	4912      	ldr	r1, [pc, #72]	; (8000a04 <Audio_Player_Start+0x84>)
 80009ba:	4817      	ldr	r0, [pc, #92]	; (8000a18 <Audio_Player_Start+0x98>)
 80009bc:	f00d fcbe 	bl	800e33c <f_open>
		f_lseek(&abc,600);
 80009c0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80009c4:	4814      	ldr	r0, [pc, #80]	; (8000a18 <Audio_Player_Start+0x98>)
 80009c6:	f00e fad5 	bl	800ef74 <f_lseek>
		WAV_FileRead2((uint8_t*) I2S_Buf0, sizeof(I2S_Buf0));
 80009ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ce:	4813      	ldr	r0, [pc, #76]	; (8000a1c <Audio_Player_Start+0x9c>)
 80009d0:	f7ff fe2a 	bl	8000628 <WAV_FileRead2>
		WAV_FileRead2((uint8_t*) I2S_Buf1, sizeof(I2S_Buf1));
 80009d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d8:	4811      	ldr	r0, [pc, #68]	; (8000a20 <Audio_Player_Start+0xa0>)
 80009da:	f7ff fe25 	bl	8000628 <WAV_FileRead2>
		HAL_I2S_Transmit_DMAEx(&hi2s2, I2S_Buf0, I2S_Buf1, BUFFER_SIZE);
 80009de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e2:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <Audio_Player_Start+0xa0>)
 80009e4:	490d      	ldr	r1, [pc, #52]	; (8000a1c <Audio_Player_Start+0x9c>)
 80009e6:	480f      	ldr	r0, [pc, #60]	; (8000a24 <Audio_Player_Start+0xa4>)
 80009e8:	f7ff fe56 	bl	8000698 <HAL_I2S_Transmit_DMAEx>
	HAL_I2S_Transmit_DMAEx(&hi2s2, I2S_Buf0, I2S_Buf1, BUFFER_SIZE);
 80009ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f0:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <Audio_Player_Start+0xa0>)
 80009f2:	490a      	ldr	r1, [pc, #40]	; (8000a1c <Audio_Player_Start+0x9c>)
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <Audio_Player_Start+0xa4>)
 80009f6:	f7ff fe4f 	bl	8000698 <HAL_I2S_Transmit_DMAEx>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000c940 	.word	0x2000c940
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	2000000c 	.word	0x2000000c
 8000a10:	08021320 	.word	0x08021320
 8000a14:	2000cf58 	.word	0x2000cf58
 8000a18:	2000cd24 	.word	0x2000cd24
 8000a1c:	200000c8 	.word	0x200000c8
 8000a20:	200004c8 	.word	0x200004c8
 8000a24:	2000d544 	.word	0x2000d544

08000a28 <Audio_Player_Stop>:
{
	HAL_I2S_DMAResume(&hi2s2);
}

void Audio_Player_Stop(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	WAV_FileInit();
 8000a2c:	f7ff fde6 	bl	80005fc <WAV_FileInit>
	HAL_I2S_DMAStop(&hi2s2);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <Audio_Player_Stop+0x14>)
 8000a32:	f005 fa5b 	bl	8005eec <HAL_I2S_DMAStop>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000d544 	.word	0x2000d544

08000a40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <vApplicationGetIdleTaskMemory+0x2c>)
 8000a50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <vApplicationGetIdleTaskMemory+0x30>)
 8000a56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200008c8 	.word	0x200008c8
 8000a70:	2000091c 	.word	0x2000091c

08000a74 <write_data>:

	return 0;
}

void write_data(unsigned char *data)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	6018      	str	r0, [r3, #0]
	FIL File;
	UINT bw;
	int ret;
	char i;
	f_unlink("0:\\Shiyan\\tianqi.dat");
 8000a80:	482c      	ldr	r0, [pc, #176]	; (8000b34 <write_data+0xc0>)
 8000a82:	f00e fcca 	bl	800f41a <f_unlink>
	ret = f_open(&File, "0:\\Shiyan\\tianqi.dat", FA_CREATE_NEW | FA_WRITE);
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	2206      	movs	r2, #6
 8000a8c:	4929      	ldr	r1, [pc, #164]	; (8000b34 <write_data+0xc0>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f00d fc54 	bl	800e33c <f_open>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	ret |= f_lseek(&File, 0);
 8000a9a:	f107 0310 	add.w	r3, r7, #16
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f00e fa67 	bl	800ef74 <f_lseek>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

	for(i=0;i<12;i++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
 8000aba:	e026      	b.n	8000b0a <write_data+0x96>
	{
		ret |= f_lseek(&File, 0+i);
 8000abc:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f00e fa54 	bl	800ef74 <f_lseek>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
		ret |= f_write(&File,data+i,1 , &bw);
 8000ada:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8000ade:	1d3a      	adds	r2, r7, #4
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	18d1      	adds	r1, r2, r3
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	f107 0010 	add.w	r0, r7, #16
 8000aec:	2201      	movs	r2, #1
 8000aee:	f00d ffe5 	bl	800eabc <f_write>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000afa:	4313      	orrs	r3, r2
 8000afc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	for(i=0;i<12;i++)
 8000b00:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8000b04:	3301      	adds	r3, #1
 8000b06:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
 8000b0a:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8000b0e:	2b0b      	cmp	r3, #11
 8000b10:	d9d4      	bls.n	8000abc <write_data+0x48>
	}
	ret |= f_close(&File);
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	4618      	mov	r0, r3
 8000b18:	f00e f9fd 	bl	800ef16 <f_close>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000b24:	4313      	orrs	r3, r2
 8000b26:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
}
 8000b2a:	bf00      	nop
 8000b2c:	f507 7712 	add.w	r7, r7, #584	; 0x248
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	08021334 	.word	0x08021334

08000b38 <CGIForm_Handler>:
char circule[10];
tCGI CGI_TAB[3];


const char *CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]

	//Audio_Set_Volume(20);

	//  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_9,GPIO_PIN_RESET);

	if (iIndex == 0)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d156      	bne.n	8000bfa <CGIForm_Handler+0xc2>
	{
		for (int i=0; i<iNumParams; i++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e048      	b.n	8000be4 <CGIForm_Handler+0xac>
		{
			if (strcmp(pcParam[i], "cmd") == 0)  // if the fname string is found
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4929      	ldr	r1, [pc, #164]	; (8000c04 <CGIForm_Handler+0xcc>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fb36 	bl	80001d0 <strcmp>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10e      	bne.n	8000b88 <CGIForm_Handler+0x50>
			{
				memset(name, '\0', 30);
 8000b6a:	221e      	movs	r2, #30
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4826      	ldr	r0, [pc, #152]	; (8000c08 <CGIForm_Handler+0xd0>)
 8000b70:	f01e fbf4 	bl	801f35c <memset>
				strcpy(name, pcValue[i]);
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4821      	ldr	r0, [pc, #132]	; (8000c08 <CGIForm_Handler+0xd0>)
 8000b82:	f01e fda2 	bl	801f6ca <strcpy>
 8000b86:	e02a      	b.n	8000bde <CGIForm_Handler+0xa6>


			}

			else if (strcmp(pcParam[i], "interrupt") == 0)  // if the fname string is found
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	491e      	ldr	r1, [pc, #120]	; (8000c0c <CGIForm_Handler+0xd4>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fb1b 	bl	80001d0 <strcmp>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d109      	bne.n	8000bb4 <CGIForm_Handler+0x7c>
					{
						strcpy(interrupt, pcValue[i]);
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	4818      	ldr	r0, [pc, #96]	; (8000c10 <CGIForm_Handler+0xd8>)
 8000bae:	f01e fd8c 	bl	801f6ca <strcpy>
 8000bb2:	e014      	b.n	8000bde <CGIForm_Handler+0xa6>
					}



			else if (strcmp(pcParam[i], "circule") == 0)  // if the fname string is found
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4915      	ldr	r1, [pc, #84]	; (8000c14 <CGIForm_Handler+0xdc>)
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fb05 	bl	80001d0 <strcmp>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d108      	bne.n	8000bde <CGIForm_Handler+0xa6>
					{
						strcpy(circule, pcValue[i]);
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480f      	ldr	r0, [pc, #60]	; (8000c18 <CGIForm_Handler+0xe0>)
 8000bda:	f01e fd76 	bl	801f6ca <strcpy>
		for (int i=0; i<iNumParams; i++)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dbb2      	blt.n	8000b52 <CGIForm_Handler+0x1a>
					}

		}
		if(circule[0]=='1'){
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <CGIForm_Handler+0xe0>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b31      	cmp	r3, #49	; 0x31
 8000bf2:	d102      	bne.n	8000bfa <CGIForm_Handler+0xc2>


				Audio_Player_Start(name);
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <CGIForm_Handler+0xd0>)
 8000bf6:	f7ff fec3 	bl	8000980 <Audio_Player_Start>
//	  /* 网口可以重启,也可以不重启 */
//	  netif_set_down(&gnetif);
//	  netif_set_up(&gnetif);


	return "/play.html";
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <CGIForm_Handler+0xe4>)
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	0802137c 	.word	0x0802137c
 8000c08:	2000c99c 	.word	0x2000c99c
 8000c0c:	08021380 	.word	0x08021380
 8000c10:	2000c990 	.word	0x2000c990
 8000c14:	0802138c 	.word	0x0802138c
 8000c18:	2000c980 	.word	0x2000c980
 8000c1c:	08021394 	.word	0x08021394

08000c20 <CGIVolume_Handler>:



const char *CGIVolume_Handler(int iIndex, int iNumParams, char *pcP[], char *pcV[])
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	603b      	str	r3, [r7, #0]

		for (int i=0; i<iNumParams; i++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	e027      	b.n	8000c84 <CGIVolume_Handler+0x64>
		{
			if (strcmp(pcP[i], "volume2") == 0)  // if the fname string is found
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4916      	ldr	r1, [pc, #88]	; (8000c98 <CGIVolume_Handler+0x78>)
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fac5 	bl	80001d0 <strcmp>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d118      	bne.n	8000c7e <CGIVolume_Handler+0x5e>
			{
				memset(volume, '\0', 30);
 8000c4c:	221e      	movs	r2, #30
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4812      	ldr	r0, [pc, #72]	; (8000c9c <CGIVolume_Handler+0x7c>)
 8000c52:	f01e fb83 	bl	801f35c <memset>
				strcpy(volume, pcV[i]);
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	480e      	ldr	r0, [pc, #56]	; (8000c9c <CGIVolume_Handler+0x7c>)
 8000c64:	f01e fd31 	bl	801f6ca <strcpy>
				num=atoi(volume);
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <CGIVolume_Handler+0x7c>)
 8000c6a:	f01e fb19 	bl	801f2a0 <atoi>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <CGIVolume_Handler+0x80>)
 8000c72:	6013      	str	r3, [r2, #0]
				Audio_Set_Volume(num);
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <CGIVolume_Handler+0x80>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fe38 	bl	80008ee <Audio_Set_Volume>
		for (int i=0; i<iNumParams; i++)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dbd3      	blt.n	8000c34 <CGIVolume_Handler+0x14>

		}



	return "/play.html";
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <CGIVolume_Handler+0x84>)
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	080213a0 	.word	0x080213a0
 8000c9c:	2000c960 	.word	0x2000c960
 8000ca0:	2000c98c 	.word	0x2000c98c
 8000ca4:	08021394 	.word	0x08021394

08000ca8 <CGISetIP_Handler>:




const char *CGISetIP_Handler(int iIndex, int iNumParams, char *pcP[], char *pcV[])
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b098      	sub	sp, #96	; 0x60
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	603b      	str	r3, [r7, #0]
    unsigned char *cf ;
    unsigned char *cg;
    unsigned char *ch ;


	for (int i=0; i<iNumParams; i++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	657b      	str	r3, [r7, #84]	; 0x54
 8000cba:	e0af      	b.n	8000e1c <CGISetIP_Handler+0x174>
		{
			if (strcmp(pcP[i], "ip") == 0)  // if the fname string is found
 8000cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4935      	ldr	r1, [pc, #212]	; (8000d9c <CGISetIP_Handler+0xf4>)
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fa81 	bl	80001d0 <strcmp>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d12b      	bne.n	8000d2c <CGISetIP_Handler+0x84>
			{
				sscanf(pcV[i],"%d.%d.%d.%d",&a,&b,&c,&d);
 8000cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000ce2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	492a      	ldr	r1, [pc, #168]	; (8000da0 <CGISetIP_Handler+0xf8>)
 8000cf6:	f01e fc5b 	bl	801f5b0 <siscanf>

				   ce = (unsigned char *)a;
 8000cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cfc:	653b      	str	r3, [r7, #80]	; 0x50
				 cf = (unsigned char *)b;
 8000cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d00:	64fb      	str	r3, [r7, #76]	; 0x4c
			cg = (unsigned char *)c;
 8000d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d04:	64bb      	str	r3, [r7, #72]	; 0x48
				  ch = (unsigned char *)d;
 8000d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d08:	647b      	str	r3, [r7, #68]	; 0x44
				ip[0]=ce;
 8000d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				ip[1]=cf;
 8000d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				ip[2]=cg;
 8000d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				ip[3]=ch;
 8000d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000d2a:	e074      	b.n	8000e16 <CGISetIP_Handler+0x16e>

			}

			else if (strcmp(pcP[i], "mask") == 0)  // if the fname string is found
 8000d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	491b      	ldr	r1, [pc, #108]	; (8000da4 <CGISetIP_Handler+0xfc>)
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fa49 	bl	80001d0 <strcmp>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d131      	bne.n	8000da8 <CGISetIP_Handler+0x100>
			{
				sscanf(pcV[i],"%d.%d.%d.%d",&a,&b,&c,&d);
 8000d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	6818      	ldr	r0, [r3, #0]
 8000d4e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d52:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	460b      	mov	r3, r1
 8000d64:	490e      	ldr	r1, [pc, #56]	; (8000da0 <CGISetIP_Handler+0xf8>)
 8000d66:	f01e fc23 	bl	801f5b0 <siscanf>
				   ce = (unsigned char *)a;
 8000d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d6c:	653b      	str	r3, [r7, #80]	; 0x50
							 cf = (unsigned char *)b;
 8000d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d70:	64fb      	str	r3, [r7, #76]	; 0x4c
						cg = (unsigned char *)c;
 8000d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d74:	64bb      	str	r3, [r7, #72]	; 0x48
							  ch = (unsigned char *)d;
 8000d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d78:	647b      	str	r3, [r7, #68]	; 0x44
							ip[4]=ce;
 8000d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							ip[5]=cf;
 8000d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
							ip[6]=cg;
 8000d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
							ip[7]=ch;
 8000d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000d9a:	e03c      	b.n	8000e16 <CGISetIP_Handler+0x16e>
 8000d9c:	080213a8 	.word	0x080213a8
 8000da0:	080213ac 	.word	0x080213ac
 8000da4:	080213b8 	.word	0x080213b8

			}else if(strcmp(pcP[i],"gateway")==0){
 8000da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	4413      	add	r3, r2
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	498c      	ldr	r1, [pc, #560]	; (8000fe4 <CGISetIP_Handler+0x33c>)
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fa0b 	bl	80001d0 <strcmp>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d12a      	bne.n	8000e16 <CGISetIP_Handler+0x16e>

				sscanf(pcV[i],"%d.%d.%d.%d",&a,&b,&c,&d);
 8000dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	6818      	ldr	r0, [r3, #0]
 8000dca:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000dce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	460b      	mov	r3, r1
 8000de0:	4981      	ldr	r1, [pc, #516]	; (8000fe8 <CGISetIP_Handler+0x340>)
 8000de2:	f01e fbe5 	bl	801f5b0 <siscanf>
				   ce = (unsigned char *)a;
 8000de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de8:	653b      	str	r3, [r7, #80]	; 0x50
							 cf = (unsigned char *)b;
 8000dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dec:	64fb      	str	r3, [r7, #76]	; 0x4c
						cg = (unsigned char *)c;
 8000dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df0:	64bb      	str	r3, [r7, #72]	; 0x48
							  ch = (unsigned char *)d;
 8000df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df4:	647b      	str	r3, [r7, #68]	; 0x44
							ip[8]=ce;
 8000df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
							ip[9]=cf;
 8000dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
							ip[10]=cg;
 8000e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
							ip[11]=ch;
 8000e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for (int i=0; i<iNumParams; i++)
 8000e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e18:	3301      	adds	r3, #1
 8000e1a:	657b      	str	r3, [r7, #84]	; 0x54
 8000e1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f6ff af4b 	blt.w	8000cbc <CGISetIP_Handler+0x14>
		  	ip4_addr_t netmask;
		  	ip4_addr_t gw;
		  	uint8_t IP_ADDRESS[4];
		  	uint8_t NETMASK_ADDRESS[4];
		  	uint8_t GATEWAY_ADDRESS[4];
		  	  IP_ADDRESS[0] = ip[0];
 8000e26:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e2a:	763b      	strb	r3, [r7, #24]
		  	  IP_ADDRESS[1] = ip[1];
 8000e2c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000e30:	767b      	strb	r3, [r7, #25]
		  	  IP_ADDRESS[2] = ip[2];
 8000e32:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000e36:	76bb      	strb	r3, [r7, #26]
		  	  IP_ADDRESS[3] = ip[3];
 8000e38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e3c:	76fb      	strb	r3, [r7, #27]
		  	  NETMASK_ADDRESS[0] = ip[4];
 8000e3e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000e42:	753b      	strb	r3, [r7, #20]
		  	  NETMASK_ADDRESS[1] = ip[5];
 8000e44:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000e48:	757b      	strb	r3, [r7, #21]
		  	  NETMASK_ADDRESS[2] =ip[6];
 8000e4a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e4e:	75bb      	strb	r3, [r7, #22]
		  	  NETMASK_ADDRESS[3] = ip[7];
 8000e50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e54:	75fb      	strb	r3, [r7, #23]
		  	  GATEWAY_ADDRESS[0] = ip[8];
 8000e56:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e5a:	743b      	strb	r3, [r7, #16]
		  	  GATEWAY_ADDRESS[1] = ip[9];
 8000e5c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000e60:	747b      	strb	r3, [r7, #17]
		  	  GATEWAY_ADDRESS[2] = ip[10];
 8000e62:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000e66:	74bb      	strb	r3, [r7, #18]
		  	  GATEWAY_ADDRESS[3] = ip[11];
 8000e68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000e6c:	74fb      	strb	r3, [r7, #19]
		  	  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8000e6e:	7e3b      	ldrb	r3, [r7, #24]
 8000e70:	061a      	lsls	r2, r3, #24
 8000e72:	7e7b      	ldrb	r3, [r7, #25]
 8000e74:	041b      	lsls	r3, r3, #16
 8000e76:	431a      	orrs	r2, r3
 8000e78:	7ebb      	ldrb	r3, [r7, #26]
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	7efa      	ldrb	r2, [r7, #27]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	061a      	lsls	r2, r3, #24
 8000e84:	7e3b      	ldrb	r3, [r7, #24]
 8000e86:	0619      	lsls	r1, r3, #24
 8000e88:	7e7b      	ldrb	r3, [r7, #25]
 8000e8a:	041b      	lsls	r3, r3, #16
 8000e8c:	4319      	orrs	r1, r3
 8000e8e:	7ebb      	ldrb	r3, [r7, #26]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	430b      	orrs	r3, r1
 8000e94:	7ef9      	ldrb	r1, [r7, #27]
 8000e96:	430b      	orrs	r3, r1
 8000e98:	021b      	lsls	r3, r3, #8
 8000e9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	7e3b      	ldrb	r3, [r7, #24]
 8000ea2:	0619      	lsls	r1, r3, #24
 8000ea4:	7e7b      	ldrb	r3, [r7, #25]
 8000ea6:	041b      	lsls	r3, r3, #16
 8000ea8:	4319      	orrs	r1, r3
 8000eaa:	7ebb      	ldrb	r3, [r7, #26]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	430b      	orrs	r3, r1
 8000eb0:	7ef9      	ldrb	r1, [r7, #27]
 8000eb2:	430b      	orrs	r3, r1
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	7e3b      	ldrb	r3, [r7, #24]
 8000ebe:	0619      	lsls	r1, r3, #24
 8000ec0:	7e7b      	ldrb	r3, [r7, #25]
 8000ec2:	041b      	lsls	r3, r3, #16
 8000ec4:	4319      	orrs	r1, r3
 8000ec6:	7ebb      	ldrb	r3, [r7, #26]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	7ef9      	ldrb	r1, [r7, #27]
 8000ece:	430b      	orrs	r3, r1
 8000ed0:	0e1b      	lsrs	r3, r3, #24
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
		  	  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8000ed6:	7d3b      	ldrb	r3, [r7, #20]
 8000ed8:	061a      	lsls	r2, r3, #24
 8000eda:	7d7b      	ldrb	r3, [r7, #21]
 8000edc:	041b      	lsls	r3, r3, #16
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	7dbb      	ldrb	r3, [r7, #22]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	7dfa      	ldrb	r2, [r7, #23]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	061a      	lsls	r2, r3, #24
 8000eec:	7d3b      	ldrb	r3, [r7, #20]
 8000eee:	0619      	lsls	r1, r3, #24
 8000ef0:	7d7b      	ldrb	r3, [r7, #21]
 8000ef2:	041b      	lsls	r3, r3, #16
 8000ef4:	4319      	orrs	r1, r3
 8000ef6:	7dbb      	ldrb	r3, [r7, #22]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	430b      	orrs	r3, r1
 8000efc:	7df9      	ldrb	r1, [r7, #23]
 8000efe:	430b      	orrs	r3, r1
 8000f00:	021b      	lsls	r3, r3, #8
 8000f02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000f06:	431a      	orrs	r2, r3
 8000f08:	7d3b      	ldrb	r3, [r7, #20]
 8000f0a:	0619      	lsls	r1, r3, #24
 8000f0c:	7d7b      	ldrb	r3, [r7, #21]
 8000f0e:	041b      	lsls	r3, r3, #16
 8000f10:	4319      	orrs	r1, r3
 8000f12:	7dbb      	ldrb	r3, [r7, #22]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	430b      	orrs	r3, r1
 8000f18:	7df9      	ldrb	r1, [r7, #23]
 8000f1a:	430b      	orrs	r3, r1
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f22:	431a      	orrs	r2, r3
 8000f24:	7d3b      	ldrb	r3, [r7, #20]
 8000f26:	0619      	lsls	r1, r3, #24
 8000f28:	7d7b      	ldrb	r3, [r7, #21]
 8000f2a:	041b      	lsls	r3, r3, #16
 8000f2c:	4319      	orrs	r1, r3
 8000f2e:	7dbb      	ldrb	r3, [r7, #22]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	430b      	orrs	r3, r1
 8000f34:	7df9      	ldrb	r1, [r7, #23]
 8000f36:	430b      	orrs	r3, r1
 8000f38:	0e1b      	lsrs	r3, r3, #24
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	623b      	str	r3, [r7, #32]
		  	  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8000f3e:	7c3b      	ldrb	r3, [r7, #16]
 8000f40:	061a      	lsls	r2, r3, #24
 8000f42:	7c7b      	ldrb	r3, [r7, #17]
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	431a      	orrs	r2, r3
 8000f48:	7cbb      	ldrb	r3, [r7, #18]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	7cfa      	ldrb	r2, [r7, #19]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	061a      	lsls	r2, r3, #24
 8000f54:	7c3b      	ldrb	r3, [r7, #16]
 8000f56:	0619      	lsls	r1, r3, #24
 8000f58:	7c7b      	ldrb	r3, [r7, #17]
 8000f5a:	041b      	lsls	r3, r3, #16
 8000f5c:	4319      	orrs	r1, r3
 8000f5e:	7cbb      	ldrb	r3, [r7, #18]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	430b      	orrs	r3, r1
 8000f64:	7cf9      	ldrb	r1, [r7, #19]
 8000f66:	430b      	orrs	r3, r1
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	7c3b      	ldrb	r3, [r7, #16]
 8000f72:	0619      	lsls	r1, r3, #24
 8000f74:	7c7b      	ldrb	r3, [r7, #17]
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	4319      	orrs	r1, r3
 8000f7a:	7cbb      	ldrb	r3, [r7, #18]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	430b      	orrs	r3, r1
 8000f80:	7cf9      	ldrb	r1, [r7, #19]
 8000f82:	430b      	orrs	r3, r1
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	7c3b      	ldrb	r3, [r7, #16]
 8000f8e:	0619      	lsls	r1, r3, #24
 8000f90:	7c7b      	ldrb	r3, [r7, #17]
 8000f92:	041b      	lsls	r3, r3, #16
 8000f94:	4319      	orrs	r1, r3
 8000f96:	7cbb      	ldrb	r3, [r7, #18]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	430b      	orrs	r3, r1
 8000f9c:	7cf9      	ldrb	r1, [r7, #19]
 8000f9e:	430b      	orrs	r3, r1
 8000fa0:	0e1b      	lsrs	r3, r3, #24
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61fb      	str	r3, [r7, #28]
		  	  netif_set_addr(&gnetif, &ipaddr, &netmask, &gw);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	f107 0220 	add.w	r2, r7, #32
 8000fae:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000fb2:	480e      	ldr	r0, [pc, #56]	; (8000fec <CGISetIP_Handler+0x344>)
 8000fb4:	f014 fa5e 	bl	8015474 <netif_set_addr>
		  	  /* 网口可以重启,也可以不重启 */
		  	  netif_set_down(&gnetif);
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <CGISetIP_Handler+0x344>)
 8000fba:	f014 fb21 	bl	8015600 <netif_set_down>
		  	  netif_set_up(&gnetif);
 8000fbe:	480b      	ldr	r0, [pc, #44]	; (8000fec <CGISetIP_Handler+0x344>)
 8000fc0:	f014 fab2 	bl	8015528 <netif_set_up>
	 	  f_mount(&fs,"0:",1);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	490a      	ldr	r1, [pc, #40]	; (8000ff0 <CGISetIP_Handler+0x348>)
 8000fc8:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <CGISetIP_Handler+0x34c>)
 8000fca:	f00d f953 	bl	800e274 <f_mount>


	 	  write_data(ip);
 8000fce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fd4e 	bl	8000a74 <write_data>


	return "/play.html";
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <CGISetIP_Handler+0x350>)
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3758      	adds	r7, #88	; 0x58
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	080213c0 	.word	0x080213c0
 8000fe8:	080213ac 	.word	0x080213ac
 8000fec:	2000dc84 	.word	0x2000dc84
 8000ff0:	080213c8 	.word	0x080213c8
 8000ff4:	2000ca88 	.word	0x2000ca88
 8000ff8:	08021394 	.word	0x08021394

08000ffc <http_server_init>:




void http_server_init (void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	httpd_init();
 8001000:	f013 fb10 	bl	8014624 <httpd_init>
	CGI_TAB[0] = FORM_CGI;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <http_server_init+0x3c>)
 8001006:	4a0d      	ldr	r2, [pc, #52]	; (800103c <http_server_init+0x40>)
 8001008:	e892 0003 	ldmia.w	r2, {r0, r1}
 800100c:	e883 0003 	stmia.w	r3, {r0, r1}
	CGI_TAB[1] = VOLUME_CGI;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <http_server_init+0x3c>)
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <http_server_init+0x44>)
 8001014:	3308      	adds	r3, #8
 8001016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800101a:	e883 0003 	stmia.w	r3, {r0, r1}
	CGI_TAB[2] = SETIP_CGI;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <http_server_init+0x3c>)
 8001020:	4a08      	ldr	r2, [pc, #32]	; (8001044 <http_server_init+0x48>)
 8001022:	3310      	adds	r3, #16
 8001024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001028:	e883 0003 	stmia.w	r3, {r0, r1}
	http_set_cgi_handlers (CGI_TAB, 3);
 800102c:	2103      	movs	r1, #3
 800102e:	4802      	ldr	r0, [pc, #8]	; (8001038 <http_server_init+0x3c>)
 8001030:	f013 fb18 	bl	8014664 <http_set_cgi_handlers>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000ca00 	.word	0x2000ca00
 800103c:	0804e16c 	.word	0x0804e16c
 8001040:	0804e174 	.word	0x0804e174
 8001044:	0804e17c 	.word	0x0804e17c

08001048 <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    //注意下面第一个参数是&husart1，因为cubemx配置了串�???1自动生成�???
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001050:	1d39      	adds	r1, r7, #4
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	2201      	movs	r2, #1
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <__io_putchar+0x20>)
 800105a:	f008 f982 	bl	8009362 <HAL_UART_Transmit>
    return ch;
 800105e:	687b      	ldr	r3, [r7, #4]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000cf58 	.word	0x2000cf58

0800106c <read_data>:
#endif

unsigned char data_re[12];

void read_data(uint8_t *data) {
 800106c:	b580      	push	{r7, lr}
 800106e:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8001072:	af00      	add	r7, sp, #0
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	6018      	str	r0, [r3, #0]
	FIL File;
	UINT bw;
	int i;
	int ret;
	ret = f_open(&File, "0:\\Shiyan\\tianqi.dat", FA_OPEN_ALWAYS | FA_READ);
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	2211      	movs	r2, #17
 800107e:	4923      	ldr	r1, [pc, #140]	; (800110c <read_data+0xa0>)
 8001080:	4618      	mov	r0, r3
 8001082:	f00d f95b 	bl	800e33c <f_open>
 8001086:	4603      	mov	r3, r0
 8001088:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	for (i = 0; i < 12; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8001092:	e026      	b.n	80010e2 <read_data+0x76>
		ret |= f_lseek(&File, 0 + i);
 8001094:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f00d ff68 	bl	800ef74 <f_lseek>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80010ac:	4313      	orrs	r3, r2
 80010ae:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
		ret |= f_read(&File, data + i, 1, &bw);
 80010b2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80010b6:	1d3a      	adds	r2, r7, #4
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	18d1      	adds	r1, r2, r3
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	f107 0010 	add.w	r0, r7, #16
 80010c4:	2201      	movs	r2, #1
 80010c6:	f00d fb8b 	bl	800e7e0 <f_read>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80010d2:	4313      	orrs	r3, r2
 80010d4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	for (i = 0; i < 12; i++) {
 80010d8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80010dc:	3301      	adds	r3, #1
 80010de:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80010e2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80010e6:	2b0b      	cmp	r3, #11
 80010e8:	ddd4      	ble.n	8001094 <read_data+0x28>
	}
	ret |= f_close(&File);
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00d ff11 	bl	800ef16 <f_close>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80010fc:	4313      	orrs	r3, r2
 80010fe:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
}
 8001102:	bf00      	nop
 8001104:	f507 7712 	add.w	r7, r7, #584	; 0x248
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	080213e4 	.word	0x080213e4

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b08e      	sub	sp, #56	; 0x38
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001116:	f000 ff23 	bl	8001f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111a:	f000 f851 	bl	80011c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111e:	f000 f9c1 	bl	80014a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001122:	f000 f957 	bl	80013d4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001126:	f000 f97f 	bl	8001428 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800112a:	f000 f933 	bl	8001394 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800112e:	f009 fda7 	bl	800ac80 <MX_FATFS_Init>
  MX_I2S2_Init();
 8001132:	f000 f8e7 	bl	8001304 <MX_I2S2_Init>
  MX_IWDG_Init();
 8001136:	f000 f913 	bl	8001360 <MX_IWDG_Init>
  MX_I2C1_Init();
 800113a:	f000 f8b5 	bl	80012a8 <MX_I2C1_Init>
	//  read_data(data_re);
	// Audio_Player_Init();
	// MX_LWIP_Init();
	// http_server_init();

	printf("111111\r\n");
 800113e:	4819      	ldr	r0, [pc, #100]	; (80011a4 <main+0x94>)
 8001140:	f01e f99a 	bl	801f478 <puts>
	printf("222222\r\n");
 8001144:	4818      	ldr	r0, [pc, #96]	; (80011a8 <main+0x98>)
 8001146:	f01e f997 	bl	801f478 <puts>
	  Event_Handle=xEventGroupCreate();
 800114a:	f00e feaf 	bl	800feac <xEventGroupCreate>
 800114e:	4603      	mov	r3, r0
 8001150:	4a16      	ldr	r2, [pc, #88]	; (80011ac <main+0x9c>)
 8001152:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 3000);
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <main+0xa0>)
 8001156:	f107 041c 	add.w	r4, r7, #28
 800115a:	461d      	mov	r5, r3
 800115c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001160:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001164:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f00e fbf9 	bl	800f966 <osThreadCreate>
 8001174:	4603      	mov	r3, r0
 8001176:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <main+0xa4>)
 8001178:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 512);
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <main+0xa8>)
 800117c:	463c      	mov	r4, r7
 800117e:	461d      	mov	r5, r3
 8001180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001184:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001188:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800118c:	463b      	mov	r3, r7
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f00e fbe8 	bl	800f966 <osThreadCreate>
 8001196:	4603      	mov	r3, r0
 8001198:	4a08      	ldr	r2, [pc, #32]	; (80011bc <main+0xac>)
 800119a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800119c:	f00e fbc0 	bl	800f920 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80011a0:	e7fe      	b.n	80011a0 <main+0x90>
 80011a2:	bf00      	nop
 80011a4:	080213fc 	.word	0x080213fc
 80011a8:	08021404 	.word	0x08021404
 80011ac:	20000b1c 	.word	0x20000b1c
 80011b0:	0802140c 	.word	0x0802140c
 80011b4:	2000ca78 	.word	0x2000ca78
 80011b8:	08021428 	.word	0x08021428
 80011bc:	2000cf9c 	.word	0x2000cf9c

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b094      	sub	sp, #80	; 0x50
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	2230      	movs	r2, #48	; 0x30
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f01e f8c4 	bl	801f35c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <SystemClock_Config+0xe0>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	4a2c      	ldr	r2, [pc, #176]	; (80012a0 <SystemClock_Config+0xe0>)
 80011ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f2:	6413      	str	r3, [r2, #64]	; 0x40
 80011f4:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <SystemClock_Config+0xe0>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <SystemClock_Config+0xe4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a26      	ldr	r2, [pc, #152]	; (80012a4 <SystemClock_Config+0xe4>)
 800120a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <SystemClock_Config+0xe4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800121c:	230b      	movs	r3, #11
 800121e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001226:	2301      	movs	r3, #1
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122a:	2310      	movs	r3, #16
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800122e:	2301      	movs	r3, #1
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001232:	2302      	movs	r3, #2
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001236:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800123c:	2304      	movs	r3, #4
 800123e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001240:	23a8      	movs	r3, #168	; 0xa8
 8001242:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001244:	2302      	movs	r3, #2
 8001246:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001248:	2307      	movs	r3, #7
 800124a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124c:	f107 0320 	add.w	r3, r7, #32
 8001250:	4618      	mov	r0, r3
 8001252:	f005 fc0f 	bl	8006a74 <HAL_RCC_OscConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800125c:	f000 fa48 	bl	80016f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001260:	230f      	movs	r3, #15
 8001262:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001264:	2302      	movs	r3, #2
 8001266:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800126c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001276:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2105      	movs	r1, #5
 800127e:	4618      	mov	r0, r3
 8001280:	f005 fe70 	bl	8006f64 <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800128a:	f000 fa31 	bl	80016f0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2000      	movs	r0, #0
 8001294:	f005 ff4c 	bl	8007130 <HAL_RCC_MCOConfig>
}
 8001298:	bf00      	nop
 800129a:	3750      	adds	r7, #80	; 0x50
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40007000 	.word	0x40007000

080012a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012ae:	4a13      	ldr	r2, [pc, #76]	; (80012fc <MX_I2C1_Init+0x54>)
 80012b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <MX_I2C1_Init+0x58>)
 80012b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012e6:	f004 f875 	bl	80053d4 <HAL_I2C_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f0:	f000 f9fe 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000ccc4 	.word	0x2000ccc4
 80012fc:	40005400 	.word	0x40005400
 8001300:	000186a0 	.word	0x000186a0

08001304 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_I2S2_Init+0x54>)
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <MX_I2S2_Init+0x58>)
 800130c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_I2S2_Init+0x54>)
 8001310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001314:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_I2S2_Init+0x54>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_I2S2_Init+0x54>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <MX_I2S2_Init+0x54>)
 8001324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001328:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_I2S2_Init+0x54>)
 800132c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001330:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_I2S2_Init+0x54>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_I2S2_Init+0x54>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_I2S2_Init+0x54>)
 8001340:	2201      	movs	r2, #1
 8001342:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_I2S2_Init+0x54>)
 8001346:	f004 fc91 	bl	8005c6c <HAL_I2S_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8001350:	f000 f9ce 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000d544 	.word	0x2000d544
 800135c:	40003800 	.word	0x40003800

08001360 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_IWDG_Init+0x2c>)
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <MX_IWDG_Init+0x30>)
 8001368:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_IWDG_Init+0x2c>)
 800136c:	2203      	movs	r2, #3
 800136e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_IWDG_Init+0x2c>)
 8001372:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001376:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <MX_IWDG_Init+0x2c>)
 800137a:	f005 fb29 	bl	80069d0 <HAL_IWDG_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001384:	f000 f9b4 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2000cd18 	.word	0x2000cd18
 8001390:	40003000 	.word	0x40003000

08001394 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_SDIO_SD_Init+0x38>)
 800139a:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <MX_SDIO_SD_Init+0x3c>)
 800139c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_SDIO_SD_Init+0x38>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_SDIO_SD_Init+0x38>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_SDIO_SD_Init+0x38>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_SDIO_SD_Init+0x38>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <MX_SDIO_SD_Init+0x38>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <MX_SDIO_SD_Init+0x38>)
 80013be:	2202      	movs	r2, #2
 80013c0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	2000d230 	.word	0x2000d230
 80013d0:	40012c00 	.word	0x40012c00

080013d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <MX_USART1_UART_Init+0x50>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 800140c:	f007 ff5c 	bl	80092c8 <HAL_UART_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001416:	f000 f96b 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000cf58 	.word	0x2000cf58
 8001424:	40011000 	.word	0x40011000

08001428 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_DMA_Init+0x78>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a1a      	ldr	r2, [pc, #104]	; (80014a0 <MX_DMA_Init+0x78>)
 8001438:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <MX_DMA_Init+0x78>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_DMA_Init+0x78>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <MX_DMA_Init+0x78>)
 8001454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_DMA_Init+0x78>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 9, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2109      	movs	r1, #9
 800146a:	200f      	movs	r0, #15
 800146c:	f000 fe96 	bl	800219c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001470:	200f      	movs	r0, #15
 8001472:	f000 feaf 	bl	80021d4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 7, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2107      	movs	r1, #7
 800147a:	203b      	movs	r0, #59	; 0x3b
 800147c:	f000 fe8e 	bl	800219c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001480:	203b      	movs	r0, #59	; 0x3b
 8001482:	f000 fea7 	bl	80021d4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 7, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2107      	movs	r1, #7
 800148a:	2045      	movs	r0, #69	; 0x45
 800148c:	f000 fe86 	bl	800219c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001490:	2045      	movs	r0, #69	; 0x45
 8001492:	f000 fe9f 	bl	80021d4 <HAL_NVIC_EnableIRQ>

}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	; 0x30
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	4b4e      	ldr	r3, [pc, #312]	; (80015f8 <MX_GPIO_Init+0x154>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a4d      	ldr	r2, [pc, #308]	; (80015f8 <MX_GPIO_Init+0x154>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <MX_GPIO_Init+0x154>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <MX_GPIO_Init+0x154>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a46      	ldr	r2, [pc, #280]	; (80015f8 <MX_GPIO_Init+0x154>)
 80014e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <MX_GPIO_Init+0x154>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <MX_GPIO_Init+0x154>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a3f      	ldr	r2, [pc, #252]	; (80015f8 <MX_GPIO_Init+0x154>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <MX_GPIO_Init+0x154>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <MX_GPIO_Init+0x154>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a38      	ldr	r2, [pc, #224]	; (80015f8 <MX_GPIO_Init+0x154>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <MX_GPIO_Init+0x154>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b32      	ldr	r3, [pc, #200]	; (80015f8 <MX_GPIO_Init+0x154>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a31      	ldr	r2, [pc, #196]	; (80015f8 <MX_GPIO_Init+0x154>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <MX_GPIO_Init+0x154>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <MX_GPIO_Init+0x154>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a2a      	ldr	r2, [pc, #168]	; (80015f8 <MX_GPIO_Init+0x154>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <MX_GPIO_Init+0x154>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <MX_GPIO_Init+0x154>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <MX_GPIO_Init+0x154>)
 800156c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <MX_GPIO_Init+0x154>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	2110      	movs	r1, #16
 8001582:	481e      	ldr	r0, [pc, #120]	; (80015fc <MX_GPIO_Init+0x158>)
 8001584:	f003 fef2 	bl	800536c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800158e:	481c      	ldr	r0, [pc, #112]	; (8001600 <MX_GPIO_Init+0x15c>)
 8001590:	f003 feec 	bl	800536c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001594:	2310      	movs	r3, #16
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <MX_GPIO_Init+0x158>)
 80015ac:	f003 fd42 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_GPIO_Init+0x160>)
 80015ce:	f003 fd31 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_GPIO_Init+0x15c>)
 80015ec:	f003 fd22 	bl	8005034 <HAL_GPIO_Init>

}
 80015f0:	bf00      	nop
 80015f2:	3730      	adds	r7, #48	; 0x30
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40021000 	.word	0x40021000
 8001600:	40021800 	.word	0x40021800
 8001604:	40020000 	.word	0x40020000

08001608 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  /* USER CODE BEGIN 5 */
	unsigned char data_wr[12] = { 192, 168, 3, 246, 255, 255, 255, 0, 192, 168,
 8001610:	4a10      	ldr	r2, [pc, #64]	; (8001654 <StartDefaultTask+0x4c>)
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	ca07      	ldmia	r2, {r0, r1, r2}
 8001618:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			3, 1 };
	f_mount(&fs,"0:",1);
 800161c:	2201      	movs	r2, #1
 800161e:	490e      	ldr	r1, [pc, #56]	; (8001658 <StartDefaultTask+0x50>)
 8001620:	480e      	ldr	r0, [pc, #56]	; (800165c <StartDefaultTask+0x54>)
 8001622:	f00c fe27 	bl	800e274 <f_mount>
	write_data(data_wr);
 8001626:	f107 030c 	add.w	r3, r7, #12
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fa22 	bl	8000a74 <write_data>
	read_data(data_re);
 8001630:	480b      	ldr	r0, [pc, #44]	; (8001660 <StartDefaultTask+0x58>)
 8001632:	f7ff fd1b 	bl	800106c <read_data>
	Audio_Player_Init();
 8001636:	f7ff f923 	bl	8000880 <Audio_Player_Init>
	MX_LWIP_Init();
 800163a:	f009 fd87 	bl	800b14c <MX_LWIP_Init>
	http_server_init();
 800163e:	f7ff fcdd 	bl	8000ffc <http_server_init>
	/* Infinite loop */
	for (;;) {
		//不用dma会有噪音
		//WM8978_Palyer3("52.wav");
		//Audio_Player_Start("52");
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_4);
 8001642:	2110      	movs	r1, #16
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <StartDefaultTask+0x5c>)
 8001646:	f003 feaa 	bl	800539e <HAL_GPIO_TogglePin>
    //	xEventGroupSetBits(Event_Handle,KEY1_EVENT);
		osDelay(2000);
 800164a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800164e:	f00e f9d6 	bl	800f9fe <osDelay>
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_4);
 8001652:	e7f6      	b.n	8001642 <StartDefaultTask+0x3a>
 8001654:	08021448 	.word	0x08021448
 8001658:	08021444 	.word	0x08021444
 800165c:	2000ca88 	.word	0x2000ca88
 8001660:	2000ca7c 	.word	0x2000ca7c
 8001664:	40021000 	.word	0x40021000

08001668 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af02      	add	r7, sp, #8
 800166e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	EventBits_t r_event;

	/* Infinite loop */
	for (;;) {
		osDelay(3000);//拉长
 8001670:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001674:	f00e f9c3 	bl	800f9fe <osDelay>
		//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
		HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_9);
 8001678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800167c:	480e      	ldr	r0, [pc, #56]	; (80016b8 <StartTask02+0x50>)
 800167e:	f003 fe8e 	bl	800539e <HAL_GPIO_TogglePin>
		HAL_IWDG_Refresh(&hiwdg);
 8001682:	480e      	ldr	r0, [pc, #56]	; (80016bc <StartTask02+0x54>)
 8001684:	f005 f9e6 	bl	8006a54 <HAL_IWDG_Refresh>
		   r_event=xEventGroupWaitBits(Event_Handle,KEY1_EVENT,pdTRUE,pdTRUE,osWaitForever);
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <StartTask02+0x58>)
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2301      	movs	r3, #1
 8001694:	2201      	movs	r2, #1
 8001696:	2101      	movs	r1, #1
 8001698:	f00e fc22 	bl	800fee0 <xEventGroupWaitBits>
 800169c:	60f8      	str	r0, [r7, #12]
			    if((r_event&(KEY1_EVENT))==(KEY1_EVENT)){
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <StartTask02+0x48>
			    	printf("run normally !!\r\n");
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <StartTask02+0x5c>)
 80016aa:	f01d fee5 	bl	801f478 <puts>
 80016ae:	e7df      	b.n	8001670 <StartTask02+0x8>
			    }else{

			    	printf("EVENT error!\r\n");
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <StartTask02+0x60>)
 80016b2:	f01d fee1 	bl	801f478 <puts>
		osDelay(3000);//拉长
 80016b6:	e7db      	b.n	8001670 <StartTask02+0x8>
 80016b8:	40021800 	.word	0x40021800
 80016bc:	2000cd18 	.word	0x2000cd18
 80016c0:	20000b1c 	.word	0x20000b1c
 80016c4:	08021454 	.word	0x08021454
 80016c8:	08021468 	.word	0x08021468

080016cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016de:	f000 fc61 	bl	8001fa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40010000 	.word	0x40010000

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016f8:	e7fe      	b.n	80016f8 <Error_Handler+0x8>
	...

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_MspInit+0x54>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a11      	ldr	r2, [pc, #68]	; (8001750 <HAL_MspInit+0x54>)
 800170c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HAL_MspInit+0x54>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_MspInit+0x54>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_MspInit+0x54>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_MspInit+0x54>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	210f      	movs	r1, #15
 800173e:	f06f 0001 	mvn.w	r0, #1
 8001742:	f000 fd2b 	bl	800219c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_I2C_MspInit+0x84>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d12b      	bne.n	80017ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_I2C_MspInit+0x88>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_I2C_MspInit+0x88>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_I2C_MspInit+0x88>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001792:	23c0      	movs	r3, #192	; 0xc0
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001796:	2312      	movs	r3, #18
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179a:	2301      	movs	r3, #1
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a2:	2304      	movs	r3, #4
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <HAL_I2C_MspInit+0x8c>)
 80017ae:	f003 fc41 	bl	8005034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_I2C_MspInit+0x88>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_I2C_MspInit+0x88>)
 80017bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_I2C_MspInit+0x88>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ce:	bf00      	nop
 80017d0:	3728      	adds	r7, #40	; 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40005400 	.word	0x40005400
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020400 	.word	0x40020400

080017e4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08e      	sub	sp, #56	; 0x38
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a51      	ldr	r2, [pc, #324]	; (8001954 <HAL_I2S_MspInit+0x170>)
 8001810:	4293      	cmp	r3, r2
 8001812:	f040 809a 	bne.w	800194a <HAL_I2S_MspInit+0x166>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001816:	2301      	movs	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800181a:	23c0      	movs	r3, #192	; 0xc0
 800181c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800181e:	2302      	movs	r3, #2
 8001820:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4618      	mov	r0, r3
 8001828:	f005 fe32 	bl	8007490 <HAL_RCCEx_PeriphCLKConfig>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001832:	f7ff ff5d 	bl	80016f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_I2S_MspInit+0x174>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a46      	ldr	r2, [pc, #280]	; (8001958 <HAL_I2S_MspInit+0x174>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b44      	ldr	r3, [pc, #272]	; (8001958 <HAL_I2S_MspInit+0x174>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b40      	ldr	r3, [pc, #256]	; (8001958 <HAL_I2S_MspInit+0x174>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a3f      	ldr	r2, [pc, #252]	; (8001958 <HAL_I2S_MspInit+0x174>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <HAL_I2S_MspInit+0x174>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b39      	ldr	r3, [pc, #228]	; (8001958 <HAL_I2S_MspInit+0x174>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a38      	ldr	r2, [pc, #224]	; (8001958 <HAL_I2S_MspInit+0x174>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b36      	ldr	r3, [pc, #216]	; (8001958 <HAL_I2S_MspInit+0x174>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800188a:	2304      	movs	r3, #4
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800189a:	2306      	movs	r3, #6
 800189c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a2:	4619      	mov	r1, r3
 80018a4:	482d      	ldr	r0, [pc, #180]	; (800195c <HAL_I2S_MspInit+0x178>)
 80018a6:	f003 fbc5 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80018aa:	2348      	movs	r3, #72	; 0x48
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018ba:	2305      	movs	r3, #5
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c2:	4619      	mov	r1, r3
 80018c4:	4825      	ldr	r0, [pc, #148]	; (800195c <HAL_I2S_MspInit+0x178>)
 80018c6:	f003 fbb5 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018dc:	2305      	movs	r3, #5
 80018de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	4619      	mov	r1, r3
 80018e6:	481e      	ldr	r0, [pc, #120]	; (8001960 <HAL_I2S_MspInit+0x17c>)
 80018e8:	f003 fba4 	bl	8005034 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_I2S_MspInit+0x180>)
 80018ee:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <HAL_I2S_MspInit+0x184>)
 80018f0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_I2S_MspInit+0x180>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_I2S_MspInit+0x180>)
 80018fa:	2240      	movs	r2, #64	; 0x40
 80018fc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_I2S_MspInit+0x180>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_I2S_MspInit+0x180>)
 8001906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_I2S_MspInit+0x180>)
 800190e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001912:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_I2S_MspInit+0x180>)
 8001916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_I2S_MspInit+0x180>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_I2S_MspInit+0x180>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_I2S_MspInit+0x180>)
 800192a:	2200      	movs	r2, #0
 800192c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800192e:	480d      	ldr	r0, [pc, #52]	; (8001964 <HAL_I2S_MspInit+0x180>)
 8001930:	f000 fc5e 	bl	80021f0 <HAL_DMA_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_I2S_MspInit+0x15a>
    {
      Error_Handler();
 800193a:	f7ff fed9 	bl	80016f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_I2S_MspInit+0x180>)
 8001942:	639a      	str	r2, [r3, #56]	; 0x38
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_I2S_MspInit+0x180>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3738      	adds	r7, #56	; 0x38
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40003800 	.word	0x40003800
 8001958:	40023800 	.word	0x40023800
 800195c:	40020800 	.word	0x40020800
 8001960:	40020400 	.word	0x40020400
 8001964:	2000d2b4 	.word	0x2000d2b4
 8001968:	40026070 	.word	0x40026070

0800196c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a67      	ldr	r2, [pc, #412]	; (8001b28 <HAL_SD_MspInit+0x1bc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	f040 80c7 	bne.w	8001b1e <HAL_SD_MspInit+0x1b2>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	4b65      	ldr	r3, [pc, #404]	; (8001b2c <HAL_SD_MspInit+0x1c0>)
 8001996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001998:	4a64      	ldr	r2, [pc, #400]	; (8001b2c <HAL_SD_MspInit+0x1c0>)
 800199a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800199e:	6453      	str	r3, [r2, #68]	; 0x44
 80019a0:	4b62      	ldr	r3, [pc, #392]	; (8001b2c <HAL_SD_MspInit+0x1c0>)
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	4b5e      	ldr	r3, [pc, #376]	; (8001b2c <HAL_SD_MspInit+0x1c0>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	4a5d      	ldr	r2, [pc, #372]	; (8001b2c <HAL_SD_MspInit+0x1c0>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6313      	str	r3, [r2, #48]	; 0x30
 80019bc:	4b5b      	ldr	r3, [pc, #364]	; (8001b2c <HAL_SD_MspInit+0x1c0>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <HAL_SD_MspInit+0x1c0>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	4a56      	ldr	r2, [pc, #344]	; (8001b2c <HAL_SD_MspInit+0x1c0>)
 80019d2:	f043 0308 	orr.w	r3, r3, #8
 80019d6:	6313      	str	r3, [r2, #48]	; 0x30
 80019d8:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <HAL_SD_MspInit+0x1c0>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80019e4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80019e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019f6:	230c      	movs	r3, #12
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	484b      	ldr	r0, [pc, #300]	; (8001b30 <HAL_SD_MspInit+0x1c4>)
 8001a02:	f003 fb17 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a06:	2304      	movs	r3, #4
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a16:	230c      	movs	r3, #12
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4844      	ldr	r0, [pc, #272]	; (8001b34 <HAL_SD_MspInit+0x1c8>)
 8001a22:	f003 fb07 	bl	8005034 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001a26:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a28:	4a44      	ldr	r2, [pc, #272]	; (8001b3c <HAL_SD_MspInit+0x1d0>)
 8001a2a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001a2c:	4b42      	ldr	r3, [pc, #264]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a32:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a34:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a40:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a46:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a48:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a4e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a50:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001a56:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a58:	2220      	movs	r2, #32
 8001a5a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a5c:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a62:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a64:	2204      	movs	r2, #4
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a68:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC8;
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a74:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001a76:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001a7e:	482e      	ldr	r0, [pc, #184]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a80:	f000 fbb6 	bl	80021f0 <HAL_DMA_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_SD_MspInit+0x122>
    {
      Error_Handler();
 8001a8a:	f7ff fe31 	bl	80016f0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a29      	ldr	r2, [pc, #164]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
 8001a94:	4a28      	ldr	r2, [pc, #160]	; (8001b38 <HAL_SD_MspInit+0x1cc>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001a9c:	4a29      	ldr	r2, [pc, #164]	; (8001b44 <HAL_SD_MspInit+0x1d8>)
 8001a9e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001aa0:	4b27      	ldr	r3, [pc, #156]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aa6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aa8:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001aaa:	2240      	movs	r2, #64	; 0x40
 8001aac:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aae:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001ab6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aba:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001abc:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001abe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ac2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001acc:	2220      	movs	r2, #32
 8001ace:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001ad8:	2204      	movs	r2, #4
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001ade:	2203      	movs	r2, #3
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC8;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001ae4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ae8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001aec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001af2:	4813      	ldr	r0, [pc, #76]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001af4:	f000 fb7c 	bl	80021f0 <HAL_DMA_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_SD_MspInit+0x196>
    {
      Error_Handler();
 8001afe:	f7ff fdf7 	bl	80016f0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001b06:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <HAL_SD_MspInit+0x1d4>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2105      	movs	r1, #5
 8001b12:	2031      	movs	r0, #49	; 0x31
 8001b14:	f000 fb42 	bl	800219c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001b18:	2031      	movs	r0, #49	; 0x31
 8001b1a:	f000 fb5b 	bl	80021d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	; 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40012c00 	.word	0x40012c00
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020800 	.word	0x40020800
 8001b34:	40020c00 	.word	0x40020c00
 8001b38:	2000ca18 	.word	0x2000ca18
 8001b3c:	40026458 	.word	0x40026458
 8001b40:	2000cfa0 	.word	0x2000cfa0
 8001b44:	400264a0 	.word	0x400264a0

08001b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <HAL_UART_MspInit+0x94>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d134      	bne.n	8001bd4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b74:	f043 0310 	orr.w	r3, r3, #16
 8001b78:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ba2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4809      	ldr	r0, [pc, #36]	; (8001be4 <HAL_UART_MspInit+0x9c>)
 8001bc0:	f003 fa38 	bl	8005034 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2106      	movs	r1, #6
 8001bc8:	2025      	movs	r0, #37	; 0x25
 8001bca:	f000 fae7 	bl	800219c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bce:	2025      	movs	r0, #37	; 0x25
 8001bd0:	f000 fb00 	bl	80021d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3728      	adds	r7, #40	; 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40011000 	.word	0x40011000
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020000 	.word	0x40020000

08001be8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	; 0x30
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	2019      	movs	r0, #25
 8001bfe:	f000 facd 	bl	800219c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c02:	2019      	movs	r0, #25
 8001c04:	f000 fae6 	bl	80021d4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <HAL_InitTick+0xa4>)
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_InitTick+0xa4>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6453      	str	r3, [r2, #68]	; 0x44
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <HAL_InitTick+0xa4>)
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c24:	f107 0210 	add.w	r2, r7, #16
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f005 fbfc 	bl	800742c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001c34:	f005 fbe6 	bl	8007404 <HAL_RCC_GetPCLK2Freq>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <HAL_InitTick+0xa8>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	0c9b      	lsrs	r3, r3, #18
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_InitTick+0xac>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <HAL_InitTick+0xb0>)
 8001c50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_InitTick+0xac>)
 8001c54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c58:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c5a:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <HAL_InitTick+0xac>)
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_InitTick+0xac>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_InitTick+0xac>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001c6c:	4809      	ldr	r0, [pc, #36]	; (8001c94 <HAL_InitTick+0xac>)
 8001c6e:	f007 f87e 	bl	8008d6e <HAL_TIM_Base_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d104      	bne.n	8001c82 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c78:	4806      	ldr	r0, [pc, #24]	; (8001c94 <HAL_InitTick+0xac>)
 8001c7a:	f007 f8d1 	bl	8008e20 <HAL_TIM_Base_Start_IT>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3730      	adds	r7, #48	; 0x30
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	431bde83 	.word	0x431bde83
 8001c94:	2000d7bc 	.word	0x2000d7bc
 8001c98:	40010000 	.word	0x40010000

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <NMI_Handler+0x4>

08001ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <HardFault_Handler+0x4>

08001ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <MemManage_Handler+0x4>

08001cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <BusFault_Handler+0x4>

08001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <UsageFault_Handler+0x4>

08001cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <DMA1_Stream4_IRQHandler+0x10>)
 8001cce:	f000 fc27 	bl	8002520 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000d2b4 	.word	0x2000d2b4

08001cdc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ce2:	f007 f90d 	bl	8008f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000d7bc 	.word	0x2000d7bc

08001cf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <USART1_IRQHandler+0x10>)
 8001cf6:	f007 fbc7 	bl	8009488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000cf58 	.word	0x2000cf58

08001d04 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <SDIO_IRQHandler+0x10>)
 8001d0a:	f005 ff77 	bl	8007bfc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000d230 	.word	0x2000d230

08001d18 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <DMA2_Stream3_IRQHandler+0x10>)
 8001d1e:	f000 fbff 	bl	8002520 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000ca18 	.word	0x2000ca18

08001d2c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <ETH_IRQHandler+0x10>)
 8001d32:	f002 fbbd 	bl	80044b0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000f59c 	.word	0x2000f59c

08001d40 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <DMA2_Stream6_IRQHandler+0x10>)
 8001d46:	f000 fbeb 	bl	8002520 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000cfa0 	.word	0x2000cfa0

08001d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
	return 1;
 8001d58:	2301      	movs	r3, #1
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <_kill>:

int _kill(int pid, int sig)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <_kill+0x20>)
 8001d70:	2216      	movs	r2, #22
 8001d72:	601a      	str	r2, [r3, #0]
	return -1;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	20014bd0 	.word	0x20014bd0

08001d88 <_exit>:

void _exit (int status)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ffe5 	bl	8001d64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d9a:	e7fe      	b.n	8001d9a <_exit+0x12>

08001d9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e00a      	b.n	8001dc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dae:	f3af 8000 	nop.w
 8001db2:	4601      	mov	r1, r0
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60ba      	str	r2, [r7, #8]
 8001dba:	b2ca      	uxtb	r2, r1
 8001dbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbf0      	blt.n	8001dae <_read+0x12>
	}

return len;
 8001dcc:	687b      	ldr	r3, [r7, #4]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e009      	b.n	8001dfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	60ba      	str	r2, [r7, #8]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f929 	bl	8001048 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbf1      	blt.n	8001de8 <_write+0x12>
	}
	return len;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_close>:

int _close(int file)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
	return -1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e36:	605a      	str	r2, [r3, #4]
	return 0;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <_isatty>:

int _isatty(int file)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
	return 0;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <_sbrk+0x5c>)
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <_sbrk+0x60>)
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <_sbrk+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <_sbrk+0x64>)
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <_sbrk+0x68>)
 8001e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d205      	bcs.n	8001eb4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <_sbrk+0x6c>)
 8001eaa:	220c      	movs	r2, #12
 8001eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb2:	e009      	b.n	8001ec8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <_sbrk+0x64>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4a06      	ldr	r2, [pc, #24]	; (8001edc <_sbrk+0x64>)
 8001ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	20020000 	.word	0x20020000
 8001ed8:	00001000 	.word	0x00001000
 8001edc:	20000b20 	.word	0x20000b20
 8001ee0:	20014be8 	.word	0x20014be8
 8001ee4:	20014bd0 	.word	0x20014bd0

08001ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <SystemInit+0x20>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <SystemInit+0x20>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <Reset_Handler>:
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f44 <LoopFillZerobss+0x12>
 8001f10:	480d      	ldr	r0, [pc, #52]	; (8001f48 <LoopFillZerobss+0x16>)
 8001f12:	490e      	ldr	r1, [pc, #56]	; (8001f4c <LoopFillZerobss+0x1a>)
 8001f14:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <LoopFillZerobss+0x1e>)
 8001f16:	2300      	movs	r3, #0
 8001f18:	e002      	b.n	8001f20 <LoopCopyDataInit>

08001f1a <CopyDataInit>:
 8001f1a:	58d4      	ldr	r4, [r2, r3]
 8001f1c:	50c4      	str	r4, [r0, r3]
 8001f1e:	3304      	adds	r3, #4

08001f20 <LoopCopyDataInit>:
 8001f20:	18c4      	adds	r4, r0, r3
 8001f22:	428c      	cmp	r4, r1
 8001f24:	d3f9      	bcc.n	8001f1a <CopyDataInit>
 8001f26:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <LoopFillZerobss+0x22>)
 8001f28:	4c0b      	ldr	r4, [pc, #44]	; (8001f58 <LoopFillZerobss+0x26>)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e001      	b.n	8001f32 <LoopFillZerobss>

08001f2e <FillZerobss>:
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	3204      	adds	r2, #4

08001f32 <LoopFillZerobss>:
 8001f32:	42a2      	cmp	r2, r4
 8001f34:	d3fb      	bcc.n	8001f2e <FillZerobss>
 8001f36:	f7ff ffd7 	bl	8001ee8 <SystemInit>
 8001f3a:	f01d f9b5 	bl	801f2a8 <__libc_init_array>
 8001f3e:	f7ff f8e7 	bl	8001110 <main>
 8001f42:	4770      	bx	lr
 8001f44:	20020000 	.word	0x20020000
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	200000a4 	.word	0x200000a4
 8001f50:	0807b390 	.word	0x0807b390
 8001f54:	200000a4 	.word	0x200000a4
 8001f58:	20014be4 	.word	0x20014be4

08001f5c <ADC_IRQHandler>:
 8001f5c:	e7fe      	b.n	8001f5c <ADC_IRQHandler>
	...

08001f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_Init+0x40>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0d      	ldr	r2, [pc, #52]	; (8001fa0 <HAL_Init+0x40>)
 8001f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_Init+0x40>)
 8001f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a07      	ldr	r2, [pc, #28]	; (8001fa0 <HAL_Init+0x40>)
 8001f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f000 f8fc 	bl	8002186 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8e:	200f      	movs	r0, #15
 8001f90:	f7ff fe2a 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f94:	f7ff fbb2 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023c00 	.word	0x40023c00

08001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000018 	.word	0x20000018
 8001fc8:	2000d804 	.word	0x2000d804

08001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	2000d804 	.word	0x2000d804

08001fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff ffee 	bl	8001fcc <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d005      	beq.n	800200a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_Delay+0x44>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800200a:	bf00      	nop
 800200c:	f7ff ffde 	bl	8001fcc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f7      	bhi.n	800200c <HAL_Delay+0x28>
  {
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000018 	.word	0x20000018

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4907      	ldr	r1, [pc, #28]	; (80020c8 <__NVIC_EnableIRQ+0x38>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	; (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	; (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff4c 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ae:	f7ff ff61 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	6978      	ldr	r0, [r7, #20]
 80021ba:	f7ff ffb1 	bl	8002120 <NVIC_EncodePriority>
 80021be:	4602      	mov	r2, r0
 80021c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff80 	bl	80020cc <__NVIC_SetPriority>
}
 80021cc:	bf00      	nop
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff54 	bl	8002090 <__NVIC_EnableIRQ>
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff fee6 	bl	8001fcc <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e099      	b.n	8002340 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800222c:	e00f      	b.n	800224e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800222e:	f7ff fecd 	bl	8001fcc <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b05      	cmp	r3, #5
 800223a:	d908      	bls.n	800224e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2203      	movs	r2, #3
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e078      	b.n	8002340 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1e8      	bne.n	800222e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4b38      	ldr	r3, [pc, #224]	; (8002348 <HAL_DMA_Init+0x158>)
 8002268:	4013      	ands	r3, r2
 800226a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800227a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d107      	bne.n	80022b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	4313      	orrs	r3, r2
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f023 0307 	bic.w	r3, r3, #7
 80022ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d117      	bne.n	8002312 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00e      	beq.n	8002312 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 fb0d 	bl	8002914 <DMA_CheckFifoParam>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2240      	movs	r2, #64	; 0x40
 8002304:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800230e:	2301      	movs	r3, #1
 8002310:	e016      	b.n	8002340 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fac4 	bl	80028a8 <DMA_CalcBaseAndBitshift>
 8002320:	4603      	mov	r3, r0
 8002322:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	223f      	movs	r2, #63	; 0x3f
 800232a:	409a      	lsls	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	f010803f 	.word	0xf010803f

0800234c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_DMA_Start_IT+0x26>
 800236e:	2302      	movs	r3, #2
 8002370:	e040      	b.n	80023f4 <HAL_DMA_Start_IT+0xa8>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b01      	cmp	r3, #1
 8002384:	d12f      	bne.n	80023e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2202      	movs	r2, #2
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 fa56 	bl	800284c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	223f      	movs	r2, #63	; 0x3f
 80023a6:	409a      	lsls	r2, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0216 	orr.w	r2, r2, #22
 80023ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0208 	orr.w	r2, r2, #8
 80023d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e005      	b.n	80023f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023ee:	2302      	movs	r3, #2
 80023f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002408:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800240a:	f7ff fddf 	bl	8001fcc <HAL_GetTick>
 800240e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d008      	beq.n	800242e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e052      	b.n	80024d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0216 	bic.w	r2, r2, #22
 800243c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800244c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d103      	bne.n	800245e <HAL_DMA_Abort+0x62>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0208 	bic.w	r2, r2, #8
 800246c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247e:	e013      	b.n	80024a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002480:	f7ff fda4 	bl	8001fcc <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b05      	cmp	r3, #5
 800248c:	d90c      	bls.n	80024a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2220      	movs	r2, #32
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2203      	movs	r2, #3
 8002498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e015      	b.n	80024d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1e4      	bne.n	8002480 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	223f      	movs	r2, #63	; 0x3f
 80024bc:	409a      	lsls	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d004      	beq.n	80024fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2280      	movs	r2, #128	; 0x80
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00c      	b.n	8002514 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2205      	movs	r2, #5
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0201 	bic.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800252c:	4b92      	ldr	r3, [pc, #584]	; (8002778 <HAL_DMA_IRQHandler+0x258>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a92      	ldr	r2, [pc, #584]	; (800277c <HAL_DMA_IRQHandler+0x25c>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	0a9b      	lsrs	r3, r3, #10
 8002538:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254a:	2208      	movs	r2, #8
 800254c:	409a      	lsls	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01a      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0204 	bic.w	r2, r2, #4
 8002572:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	2208      	movs	r2, #8
 800257a:	409a      	lsls	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002590:	2201      	movs	r2, #1
 8002592:	409a      	lsls	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d012      	beq.n	80025c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	2201      	movs	r2, #1
 80025b0:	409a      	lsls	r2, r3
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ba:	f043 0202 	orr.w	r2, r3, #2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c6:	2204      	movs	r2, #4
 80025c8:	409a      	lsls	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d012      	beq.n	80025f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00b      	beq.n	80025f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	2204      	movs	r2, #4
 80025e6:	409a      	lsls	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	f043 0204 	orr.w	r2, r3, #4
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	2210      	movs	r2, #16
 80025fe:	409a      	lsls	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d043      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d03c      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	2210      	movs	r2, #16
 800261c:	409a      	lsls	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d018      	beq.n	8002662 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d108      	bne.n	8002650 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d024      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	4798      	blx	r3
 800264e:	e01f      	b.n	8002690 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01b      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
 8002660:	e016      	b.n	8002690 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d107      	bne.n	8002680 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0208 	bic.w	r2, r2, #8
 800267e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	2220      	movs	r2, #32
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 808e 	beq.w	80027be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 8086 	beq.w	80027be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b6:	2220      	movs	r2, #32
 80026b8:	409a      	lsls	r2, r3
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d136      	bne.n	8002738 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0216 	bic.w	r2, r2, #22
 80026d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <HAL_DMA_IRQHandler+0x1da>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0208 	bic.w	r2, r2, #8
 8002708:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270e:	223f      	movs	r2, #63	; 0x3f
 8002710:	409a      	lsls	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272a:	2b00      	cmp	r3, #0
 800272c:	d07d      	beq.n	800282a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
        }
        return;
 8002736:	e078      	b.n	800282a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d01c      	beq.n	8002780 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d108      	bne.n	8002766 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	2b00      	cmp	r3, #0
 800275a:	d030      	beq.n	80027be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
 8002764:	e02b      	b.n	80027be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	2b00      	cmp	r3, #0
 800276c:	d027      	beq.n	80027be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
 8002776:	e022      	b.n	80027be <HAL_DMA_IRQHandler+0x29e>
 8002778:	20000010 	.word	0x20000010
 800277c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10f      	bne.n	80027ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0210 	bic.w	r2, r2, #16
 800279c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d032      	beq.n	800282c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d022      	beq.n	8002818 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2205      	movs	r2, #5
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3301      	adds	r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d307      	bcc.n	8002806 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f2      	bne.n	80027ea <HAL_DMA_IRQHandler+0x2ca>
 8002804:	e000      	b.n	8002808 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002806:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
 8002828:	e000      	b.n	800282c <HAL_DMA_IRQHandler+0x30c>
        return;
 800282a:	bf00      	nop
    }
  }
}
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop

08002834 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002868:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b40      	cmp	r3, #64	; 0x40
 8002878:	d108      	bne.n	800288c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800288a:	e007      	b.n	800289c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	60da      	str	r2, [r3, #12]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	3b10      	subs	r3, #16
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <DMA_CalcBaseAndBitshift+0x64>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028c2:	4a13      	ldr	r2, [pc, #76]	; (8002910 <DMA_CalcBaseAndBitshift+0x68>)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4413      	add	r3, r2
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d909      	bls.n	80028ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028de:	f023 0303 	bic.w	r3, r3, #3
 80028e2:	1d1a      	adds	r2, r3, #4
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	659a      	str	r2, [r3, #88]	; 0x58
 80028e8:	e007      	b.n	80028fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	aaaaaaab 	.word	0xaaaaaaab
 8002910:	0804e19c 	.word	0x0804e19c

08002914 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d11f      	bne.n	800296e <DMA_CheckFifoParam+0x5a>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b03      	cmp	r3, #3
 8002932:	d856      	bhi.n	80029e2 <DMA_CheckFifoParam+0xce>
 8002934:	a201      	add	r2, pc, #4	; (adr r2, 800293c <DMA_CheckFifoParam+0x28>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	0800294d 	.word	0x0800294d
 8002940:	0800295f 	.word	0x0800295f
 8002944:	0800294d 	.word	0x0800294d
 8002948:	080029e3 	.word	0x080029e3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d046      	beq.n	80029e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800295c:	e043      	b.n	80029e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002966:	d140      	bne.n	80029ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800296c:	e03d      	b.n	80029ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002976:	d121      	bne.n	80029bc <DMA_CheckFifoParam+0xa8>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b03      	cmp	r3, #3
 800297c:	d837      	bhi.n	80029ee <DMA_CheckFifoParam+0xda>
 800297e:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <DMA_CheckFifoParam+0x70>)
 8002980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002984:	08002995 	.word	0x08002995
 8002988:	0800299b 	.word	0x0800299b
 800298c:	08002995 	.word	0x08002995
 8002990:	080029ad 	.word	0x080029ad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
      break;
 8002998:	e030      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d025      	beq.n	80029f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029aa:	e022      	b.n	80029f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029b4:	d11f      	bne.n	80029f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029ba:	e01c      	b.n	80029f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d903      	bls.n	80029ca <DMA_CheckFifoParam+0xb6>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d003      	beq.n	80029d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029c8:	e018      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
      break;
 80029ce:	e015      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00e      	beq.n	80029fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
      break;
 80029e0:	e00b      	b.n	80029fa <DMA_CheckFifoParam+0xe6>
      break;
 80029e2:	bf00      	nop
 80029e4:	e00a      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      break;
 80029e6:	bf00      	nop
 80029e8:	e008      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      break;
 80029ea:	bf00      	nop
 80029ec:	e006      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      break;
 80029ee:	bf00      	nop
 80029f0:	e004      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      break;
 80029f2:	bf00      	nop
 80029f4:	e002      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      break;   
 80029f6:	bf00      	nop
 80029f8:	e000      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      break;
 80029fa:	bf00      	nop
    }
  } 
  
  return status; 
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop

08002a0c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b80      	cmp	r3, #128	; 0x80
 8002a24:	d106      	bne.n	8002a34 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f001 b913 	b.w	8003c5a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2240      	movs	r2, #64	; 0x40
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f001 b901 	b.w	8003c5a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d102      	bne.n	8002a68 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002a62:	2302      	movs	r3, #2
 8002a64:	f001 b8f9 	b.w	8003c5a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	f041 80e7 	bne.w	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2202      	movs	r2, #2
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a9a:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f001 f8f6 	bl	8003c9c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b99      	ldr	r3, [pc, #612]	; (8002d1c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d960      	bls.n	8002b7e <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a97      	ldr	r2, [pc, #604]	; (8002d20 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d057      	beq.n	8002b76 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a96      	ldr	r2, [pc, #600]	; (8002d24 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d050      	beq.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a94      	ldr	r2, [pc, #592]	; (8002d28 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d049      	beq.n	8002b6e <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a93      	ldr	r2, [pc, #588]	; (8002d2c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d042      	beq.n	8002b6a <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a91      	ldr	r2, [pc, #580]	; (8002d30 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d03a      	beq.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a90      	ldr	r2, [pc, #576]	; (8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d032      	beq.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a8e      	ldr	r2, [pc, #568]	; (8002d38 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d02a      	beq.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a8d      	ldr	r2, [pc, #564]	; (8002d3c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a8b      	ldr	r2, [pc, #556]	; (8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01a      	beq.n	8002b4c <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a8a      	ldr	r2, [pc, #552]	; (8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d012      	beq.n	8002b46 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a88      	ldr	r2, [pc, #544]	; (8002d48 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00a      	beq.n	8002b40 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a87      	ldr	r2, [pc, #540]	; (8002d4c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d102      	bne.n	8002b3a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002b34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b38:	e01e      	b.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b3e:	e01b      	b.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b44:	e018      	b.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b4a:	e015      	b.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b50:	e012      	b.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b56:	e00f      	b.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b5c:	e00c      	b.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b62:	e009      	b.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b68:	e006      	b.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	e004      	b.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b6e:	2320      	movs	r3, #32
 8002b70:	e002      	b.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b72:	2320      	movs	r3, #32
 8002b74:	e000      	b.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002b76:	2320      	movs	r3, #32
 8002b78:	4a75      	ldr	r2, [pc, #468]	; (8002d50 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002b7a:	60d3      	str	r3, [r2, #12]
 8002b7c:	e150      	b.n	8002e20 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b73      	ldr	r3, [pc, #460]	; (8002d54 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d960      	bls.n	8002c4c <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a64      	ldr	r2, [pc, #400]	; (8002d20 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d057      	beq.n	8002c44 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a62      	ldr	r2, [pc, #392]	; (8002d24 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d050      	beq.n	8002c40 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a61      	ldr	r2, [pc, #388]	; (8002d28 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d049      	beq.n	8002c3c <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a5f      	ldr	r2, [pc, #380]	; (8002d2c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d042      	beq.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a5e      	ldr	r2, [pc, #376]	; (8002d30 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d03a      	beq.n	8002c32 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a5c      	ldr	r2, [pc, #368]	; (8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d032      	beq.n	8002c2c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a5b      	ldr	r2, [pc, #364]	; (8002d38 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d02a      	beq.n	8002c26 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a59      	ldr	r2, [pc, #356]	; (8002d3c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d022      	beq.n	8002c20 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a58      	ldr	r2, [pc, #352]	; (8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d01a      	beq.n	8002c1a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a56      	ldr	r2, [pc, #344]	; (8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d012      	beq.n	8002c14 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a55      	ldr	r2, [pc, #340]	; (8002d48 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00a      	beq.n	8002c0e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a53      	ldr	r2, [pc, #332]	; (8002d4c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d102      	bne.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002c02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c06:	e01e      	b.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c0c:	e01b      	b.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c12:	e018      	b.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c18:	e015      	b.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c1e:	e012      	b.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c24:	e00f      	b.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c2a:	e00c      	b.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c30:	e009      	b.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c36:	e006      	b.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c38:	2320      	movs	r3, #32
 8002c3a:	e004      	b.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	e002      	b.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c40:	2320      	movs	r3, #32
 8002c42:	e000      	b.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c44:	2320      	movs	r3, #32
 8002c46:	4a42      	ldr	r2, [pc, #264]	; (8002d50 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002c48:	6093      	str	r3, [r2, #8]
 8002c4a:	e0e9      	b.n	8002e20 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8002c54:	429a      	cmp	r2, r3
 8002c56:	f240 8083 	bls.w	8002d60 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a30      	ldr	r2, [pc, #192]	; (8002d20 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d057      	beq.n	8002d14 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2e      	ldr	r2, [pc, #184]	; (8002d24 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d050      	beq.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a2d      	ldr	r2, [pc, #180]	; (8002d28 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d049      	beq.n	8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a2b      	ldr	r2, [pc, #172]	; (8002d2c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d042      	beq.n	8002d08 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a2a      	ldr	r2, [pc, #168]	; (8002d30 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d03a      	beq.n	8002d02 <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a28      	ldr	r2, [pc, #160]	; (8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d032      	beq.n	8002cfc <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d02a      	beq.n	8002cf6 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d022      	beq.n	8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a24      	ldr	r2, [pc, #144]	; (8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d01a      	beq.n	8002cea <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d012      	beq.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00a      	beq.n	8002cde <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d102      	bne.n	8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002cd2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cd6:	e01e      	b.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002cdc:	e01b      	b.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002cde:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ce2:	e018      	b.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002ce4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ce8:	e015      	b.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002cea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cee:	e012      	b.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002cf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cf4:	e00f      	b.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002cf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cfa:	e00c      	b.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002cfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d00:	e009      	b.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d06:	e006      	b.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d08:	2320      	movs	r3, #32
 8002d0a:	e004      	b.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	e002      	b.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d10:	2320      	movs	r3, #32
 8002d12:	e000      	b.n	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d14:	2320      	movs	r3, #32
 8002d16:	4a11      	ldr	r2, [pc, #68]	; (8002d5c <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8002d18:	60d3      	str	r3, [r2, #12]
 8002d1a:	e081      	b.n	8002e20 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002d1c:	40026458 	.word	0x40026458
 8002d20:	40026010 	.word	0x40026010
 8002d24:	40026410 	.word	0x40026410
 8002d28:	40026070 	.word	0x40026070
 8002d2c:	40026470 	.word	0x40026470
 8002d30:	40026028 	.word	0x40026028
 8002d34:	40026428 	.word	0x40026428
 8002d38:	40026088 	.word	0x40026088
 8002d3c:	40026488 	.word	0x40026488
 8002d40:	40026040 	.word	0x40026040
 8002d44:	40026440 	.word	0x40026440
 8002d48:	400260a0 	.word	0x400260a0
 8002d4c:	400264a0 	.word	0x400264a0
 8002d50:	40026400 	.word	0x40026400
 8002d54:	400260b8 	.word	0x400260b8
 8002d58:	40026058 	.word	0x40026058
 8002d5c:	40026000 	.word	0x40026000
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a96      	ldr	r2, [pc, #600]	; (8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d057      	beq.n	8002e1a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a95      	ldr	r2, [pc, #596]	; (8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d050      	beq.n	8002e16 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a93      	ldr	r2, [pc, #588]	; (8002fc8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d049      	beq.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a92      	ldr	r2, [pc, #584]	; (8002fcc <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d042      	beq.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a90      	ldr	r2, [pc, #576]	; (8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d03a      	beq.n	8002e08 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a8f      	ldr	r2, [pc, #572]	; (8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d032      	beq.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a8d      	ldr	r2, [pc, #564]	; (8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d02a      	beq.n	8002dfc <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a8c      	ldr	r2, [pc, #560]	; (8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d022      	beq.n	8002df6 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a8a      	ldr	r2, [pc, #552]	; (8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d01a      	beq.n	8002df0 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a89      	ldr	r2, [pc, #548]	; (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d012      	beq.n	8002dea <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a87      	ldr	r2, [pc, #540]	; (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00a      	beq.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a86      	ldr	r2, [pc, #536]	; (8002fec <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d102      	bne.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8002dd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ddc:	e01e      	b.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002dde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002de2:	e01b      	b.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002de4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002de8:	e018      	b.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002dea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dee:	e015      	b.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002df0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002df4:	e012      	b.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dfa:	e00f      	b.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002dfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e00:	e00c      	b.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e06:	e009      	b.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e0c:	e006      	b.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e0e:	2320      	movs	r3, #32
 8002e10:	e004      	b.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e12:	2320      	movs	r3, #32
 8002e14:	e002      	b.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e16:	2320      	movs	r3, #32
 8002e18:	e000      	b.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	4a74      	ldr	r2, [pc, #464]	; (8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8002e1e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	4b73      	ldr	r3, [pc, #460]	; (8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d960      	bls.n	8002eee <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a63      	ldr	r2, [pc, #396]	; (8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d057      	beq.n	8002ee6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a62      	ldr	r2, [pc, #392]	; (8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d050      	beq.n	8002ee2 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a60      	ldr	r2, [pc, #384]	; (8002fc8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d049      	beq.n	8002ede <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a5f      	ldr	r2, [pc, #380]	; (8002fcc <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d042      	beq.n	8002eda <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5d      	ldr	r2, [pc, #372]	; (8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d03a      	beq.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a5c      	ldr	r2, [pc, #368]	; (8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d032      	beq.n	8002ece <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a5a      	ldr	r2, [pc, #360]	; (8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d02a      	beq.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a59      	ldr	r2, [pc, #356]	; (8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d022      	beq.n	8002ec2 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a57      	ldr	r2, [pc, #348]	; (8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d01a      	beq.n	8002ebc <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a56      	ldr	r2, [pc, #344]	; (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d012      	beq.n	8002eb6 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a54      	ldr	r2, [pc, #336]	; (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00a      	beq.n	8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a53      	ldr	r2, [pc, #332]	; (8002fec <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d102      	bne.n	8002eaa <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8002ea4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ea8:	e01e      	b.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002eaa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002eae:	e01b      	b.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002eb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002eb4:	e018      	b.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002eb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002eba:	e015      	b.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002ebc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ec0:	e012      	b.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec6:	e00f      	b.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ecc:	e00c      	b.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ed2:	e009      	b.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ed8:	e006      	b.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002eda:	2310      	movs	r3, #16
 8002edc:	e004      	b.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002ede:	2310      	movs	r3, #16
 8002ee0:	e002      	b.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002ee2:	2310      	movs	r3, #16
 8002ee4:	e000      	b.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002ee6:	2310      	movs	r3, #16
 8002ee8:	4a43      	ldr	r2, [pc, #268]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002eea:	60d3      	str	r3, [r2, #12]
 8002eec:	e14f      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b41      	ldr	r3, [pc, #260]	; (8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	f240 8082 	bls.w	8003000 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2f      	ldr	r2, [pc, #188]	; (8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d057      	beq.n	8002fb6 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2e      	ldr	r2, [pc, #184]	; (8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d050      	beq.n	8002fb2 <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2c      	ldr	r2, [pc, #176]	; (8002fc8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d049      	beq.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d042      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a29      	ldr	r2, [pc, #164]	; (8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d03a      	beq.n	8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d032      	beq.n	8002f9e <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d02a      	beq.n	8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a25      	ldr	r2, [pc, #148]	; (8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d022      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01a      	beq.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x580>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d012      	beq.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00a      	beq.n	8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d102      	bne.n	8002f7a <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8002f74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f78:	e01e      	b.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002f7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f7e:	e01b      	b.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002f80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f84:	e018      	b.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002f86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f8a:	e015      	b.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002f8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f90:	e012      	b.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f96:	e00f      	b.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f9c:	e00c      	b.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa2:	e009      	b.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa8:	e006      	b.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002faa:	2310      	movs	r3, #16
 8002fac:	e004      	b.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fae:	2310      	movs	r3, #16
 8002fb0:	e002      	b.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	e000      	b.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	4a0f      	ldr	r2, [pc, #60]	; (8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002fba:	6093      	str	r3, [r2, #8]
 8002fbc:	e0e7      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002fbe:	bf00      	nop
 8002fc0:	40026010 	.word	0x40026010
 8002fc4:	40026410 	.word	0x40026410
 8002fc8:	40026070 	.word	0x40026070
 8002fcc:	40026470 	.word	0x40026470
 8002fd0:	40026028 	.word	0x40026028
 8002fd4:	40026428 	.word	0x40026428
 8002fd8:	40026088 	.word	0x40026088
 8002fdc:	40026488 	.word	0x40026488
 8002fe0:	40026040 	.word	0x40026040
 8002fe4:	40026440 	.word	0x40026440
 8002fe8:	400260a0 	.word	0x400260a0
 8002fec:	400264a0 	.word	0x400264a0
 8002ff0:	40026000 	.word	0x40026000
 8002ff4:	40026458 	.word	0x40026458
 8002ff8:	40026400 	.word	0x40026400
 8002ffc:	400260b8 	.word	0x400260b8
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	4b96      	ldr	r3, [pc, #600]	; (8003260 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003008:	429a      	cmp	r2, r3
 800300a:	d960      	bls.n	80030ce <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a94      	ldr	r2, [pc, #592]	; (8003264 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d057      	beq.n	80030c6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a93      	ldr	r2, [pc, #588]	; (8003268 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d050      	beq.n	80030c2 <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a91      	ldr	r2, [pc, #580]	; (800326c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d049      	beq.n	80030be <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a90      	ldr	r2, [pc, #576]	; (8003270 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d042      	beq.n	80030ba <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a8e      	ldr	r2, [pc, #568]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d03a      	beq.n	80030b4 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a8d      	ldr	r2, [pc, #564]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d032      	beq.n	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a8b      	ldr	r2, [pc, #556]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d02a      	beq.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a8a      	ldr	r2, [pc, #552]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d022      	beq.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a88      	ldr	r2, [pc, #544]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01a      	beq.n	800309c <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a87      	ldr	r2, [pc, #540]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d012      	beq.n	8003096 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a85      	ldr	r2, [pc, #532]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00a      	beq.n	8003090 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a84      	ldr	r2, [pc, #528]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d102      	bne.n	800308a <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8003084:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003088:	e01e      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800308a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800308e:	e01b      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003090:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003094:	e018      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003096:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800309a:	e015      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800309c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030a0:	e012      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030a6:	e00f      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ac:	e00c      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030b2:	e009      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030b8:	e006      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030ba:	2310      	movs	r3, #16
 80030bc:	e004      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030be:	2310      	movs	r3, #16
 80030c0:	e002      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030c2:	2310      	movs	r3, #16
 80030c4:	e000      	b.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80030c6:	2310      	movs	r3, #16
 80030c8:	4a72      	ldr	r2, [pc, #456]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80030ca:	60d3      	str	r3, [r2, #12]
 80030cc:	e05f      	b.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a64      	ldr	r2, [pc, #400]	; (8003264 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d057      	beq.n	8003188 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a62      	ldr	r2, [pc, #392]	; (8003268 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d050      	beq.n	8003184 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a61      	ldr	r2, [pc, #388]	; (800326c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d049      	beq.n	8003180 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a5f      	ldr	r2, [pc, #380]	; (8003270 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d042      	beq.n	800317c <HAL_DMAEx_MultiBufferStart_IT+0x770>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a5e      	ldr	r2, [pc, #376]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d03a      	beq.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a5c      	ldr	r2, [pc, #368]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d032      	beq.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a5b      	ldr	r2, [pc, #364]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d02a      	beq.n	800316a <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a59      	ldr	r2, [pc, #356]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d022      	beq.n	8003164 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a58      	ldr	r2, [pc, #352]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d01a      	beq.n	800315e <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a56      	ldr	r2, [pc, #344]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d012      	beq.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a55      	ldr	r2, [pc, #340]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00a      	beq.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a53      	ldr	r2, [pc, #332]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d102      	bne.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8003146:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800314a:	e01e      	b.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800314c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003150:	e01b      	b.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003152:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003156:	e018      	b.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003158:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800315c:	e015      	b.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800315e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003162:	e012      	b.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003168:	e00f      	b.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800316a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800316e:	e00c      	b.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003174:	e009      	b.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800317a:	e006      	b.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800317c:	2310      	movs	r3, #16
 800317e:	e004      	b.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003180:	2310      	movs	r3, #16
 8003182:	e002      	b.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003184:	2310      	movs	r3, #16
 8003186:	e000      	b.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003188:	2310      	movs	r3, #16
 800318a:	4a42      	ldr	r2, [pc, #264]	; (8003294 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 800318c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	4b40      	ldr	r3, [pc, #256]	; (8003298 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8003196:	429a      	cmp	r2, r3
 8003198:	f240 8082 	bls.w	80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a30      	ldr	r2, [pc, #192]	; (8003264 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d057      	beq.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2f      	ldr	r2, [pc, #188]	; (8003268 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d050      	beq.n	8003252 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a2d      	ldr	r2, [pc, #180]	; (800326c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d049      	beq.n	800324e <HAL_DMAEx_MultiBufferStart_IT+0x842>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2c      	ldr	r2, [pc, #176]	; (8003270 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d042      	beq.n	800324a <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a2a      	ldr	r2, [pc, #168]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d03a      	beq.n	8003244 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a29      	ldr	r2, [pc, #164]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d032      	beq.n	800323e <HAL_DMAEx_MultiBufferStart_IT+0x832>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a27      	ldr	r2, [pc, #156]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d02a      	beq.n	8003238 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a26      	ldr	r2, [pc, #152]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d022      	beq.n	8003232 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a24      	ldr	r2, [pc, #144]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d01a      	beq.n	800322c <HAL_DMAEx_MultiBufferStart_IT+0x820>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a23      	ldr	r2, [pc, #140]	; (8003288 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d012      	beq.n	8003226 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a21      	ldr	r2, [pc, #132]	; (800328c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00a      	beq.n	8003220 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a20      	ldr	r2, [pc, #128]	; (8003290 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d102      	bne.n	800321a <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8003214:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003218:	e01e      	b.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800321a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800321e:	e01b      	b.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003220:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003224:	e018      	b.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003226:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800322a:	e015      	b.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800322c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003230:	e012      	b.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003236:	e00f      	b.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800323c:	e00c      	b.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800323e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003242:	e009      	b.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003248:	e006      	b.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800324a:	2308      	movs	r3, #8
 800324c:	e004      	b.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800324e:	2308      	movs	r3, #8
 8003250:	e002      	b.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003252:	2308      	movs	r3, #8
 8003254:	e000      	b.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003256:	2308      	movs	r3, #8
 8003258:	4a10      	ldr	r2, [pc, #64]	; (800329c <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 800325a:	60d3      	str	r3, [r2, #12]
 800325c:	e16f      	b.n	800353e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800325e:	bf00      	nop
 8003260:	40026058 	.word	0x40026058
 8003264:	40026010 	.word	0x40026010
 8003268:	40026410 	.word	0x40026410
 800326c:	40026070 	.word	0x40026070
 8003270:	40026470 	.word	0x40026470
 8003274:	40026028 	.word	0x40026028
 8003278:	40026428 	.word	0x40026428
 800327c:	40026088 	.word	0x40026088
 8003280:	40026488 	.word	0x40026488
 8003284:	40026040 	.word	0x40026040
 8003288:	40026440 	.word	0x40026440
 800328c:	400260a0 	.word	0x400260a0
 8003290:	400264a0 	.word	0x400264a0
 8003294:	40026000 	.word	0x40026000
 8003298:	40026458 	.word	0x40026458
 800329c:	40026400 	.word	0x40026400
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b94      	ldr	r3, [pc, #592]	; (80034f8 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d960      	bls.n	800336e <HAL_DMAEx_MultiBufferStart_IT+0x962>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a92      	ldr	r2, [pc, #584]	; (80034fc <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d057      	beq.n	8003366 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a91      	ldr	r2, [pc, #580]	; (8003500 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d050      	beq.n	8003362 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a8f      	ldr	r2, [pc, #572]	; (8003504 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d049      	beq.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x952>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a8e      	ldr	r2, [pc, #568]	; (8003508 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d042      	beq.n	800335a <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a8c      	ldr	r2, [pc, #560]	; (800350c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d03a      	beq.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a8b      	ldr	r2, [pc, #556]	; (8003510 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d032      	beq.n	800334e <HAL_DMAEx_MultiBufferStart_IT+0x942>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a89      	ldr	r2, [pc, #548]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d02a      	beq.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a88      	ldr	r2, [pc, #544]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d022      	beq.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a86      	ldr	r2, [pc, #536]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d01a      	beq.n	800333c <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a85      	ldr	r2, [pc, #532]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d012      	beq.n	8003336 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a83      	ldr	r2, [pc, #524]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00a      	beq.n	8003330 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a82      	ldr	r2, [pc, #520]	; (8003528 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d102      	bne.n	800332a <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8003324:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003328:	e01e      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800332a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800332e:	e01b      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003330:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003334:	e018      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003336:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800333a:	e015      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800333c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003340:	e012      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003346:	e00f      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800334c:	e00c      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800334e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003352:	e009      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003358:	e006      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800335a:	2308      	movs	r3, #8
 800335c:	e004      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800335e:	2308      	movs	r3, #8
 8003360:	e002      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003362:	2308      	movs	r3, #8
 8003364:	e000      	b.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003366:	2308      	movs	r3, #8
 8003368:	4a70      	ldr	r2, [pc, #448]	; (800352c <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 800336a:	6093      	str	r3, [r2, #8]
 800336c:	e0e7      	b.n	800353e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	4b6e      	ldr	r3, [pc, #440]	; (8003530 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 8003376:	429a      	cmp	r2, r3
 8003378:	d960      	bls.n	800343c <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a5f      	ldr	r2, [pc, #380]	; (80034fc <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d057      	beq.n	8003434 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a5d      	ldr	r2, [pc, #372]	; (8003500 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d050      	beq.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a5c      	ldr	r2, [pc, #368]	; (8003504 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d049      	beq.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a5a      	ldr	r2, [pc, #360]	; (8003508 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d042      	beq.n	8003428 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a59      	ldr	r2, [pc, #356]	; (800350c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d03a      	beq.n	8003422 <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a57      	ldr	r2, [pc, #348]	; (8003510 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d032      	beq.n	800341c <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a56      	ldr	r2, [pc, #344]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d02a      	beq.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a54      	ldr	r2, [pc, #336]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d022      	beq.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a53      	ldr	r2, [pc, #332]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d01a      	beq.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a51      	ldr	r2, [pc, #324]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d012      	beq.n	8003404 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a50      	ldr	r2, [pc, #320]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00a      	beq.n	80033fe <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a4e      	ldr	r2, [pc, #312]	; (8003528 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d102      	bne.n	80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 80033f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033f6:	e01e      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80033f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033fc:	e01b      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80033fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003402:	e018      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003404:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003408:	e015      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800340a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800340e:	e012      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003414:	e00f      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800341a:	e00c      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800341c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003420:	e009      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003426:	e006      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003428:	2308      	movs	r3, #8
 800342a:	e004      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800342c:	2308      	movs	r3, #8
 800342e:	e002      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003430:	2308      	movs	r3, #8
 8003432:	e000      	b.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003434:	2308      	movs	r3, #8
 8003436:	4a3f      	ldr	r2, [pc, #252]	; (8003534 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8003438:	60d3      	str	r3, [r2, #12]
 800343a:	e080      	b.n	800353e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a2e      	ldr	r2, [pc, #184]	; (80034fc <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d078      	beq.n	8003538 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a2d      	ldr	r2, [pc, #180]	; (8003500 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d050      	beq.n	80034f2 <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a2b      	ldr	r2, [pc, #172]	; (8003504 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d049      	beq.n	80034ee <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a2a      	ldr	r2, [pc, #168]	; (8003508 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d042      	beq.n	80034ea <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a28      	ldr	r2, [pc, #160]	; (800350c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d03a      	beq.n	80034e4 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a27      	ldr	r2, [pc, #156]	; (8003510 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d032      	beq.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a25      	ldr	r2, [pc, #148]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d02a      	beq.n	80034d8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a24      	ldr	r2, [pc, #144]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d022      	beq.n	80034d2 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a22      	ldr	r2, [pc, #136]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d01a      	beq.n	80034cc <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a21      	ldr	r2, [pc, #132]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d012      	beq.n	80034c6 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1f      	ldr	r2, [pc, #124]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00a      	beq.n	80034c0 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d102      	bne.n	80034ba <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 80034b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034b8:	e03f      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034be:	e03c      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034c4:	e039      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034ca:	e036      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034d0:	e033      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034d6:	e030      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034dc:	e02d      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e2:	e02a      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e8:	e027      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034ea:	2308      	movs	r3, #8
 80034ec:	e025      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034ee:	2308      	movs	r3, #8
 80034f0:	e023      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034f2:	2308      	movs	r3, #8
 80034f4:	e021      	b.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80034f6:	bf00      	nop
 80034f8:	400260b8 	.word	0x400260b8
 80034fc:	40026010 	.word	0x40026010
 8003500:	40026410 	.word	0x40026410
 8003504:	40026070 	.word	0x40026070
 8003508:	40026470 	.word	0x40026470
 800350c:	40026028 	.word	0x40026028
 8003510:	40026428 	.word	0x40026428
 8003514:	40026088 	.word	0x40026088
 8003518:	40026488 	.word	0x40026488
 800351c:	40026040 	.word	0x40026040
 8003520:	40026440 	.word	0x40026440
 8003524:	400260a0 	.word	0x400260a0
 8003528:	400264a0 	.word	0x400264a0
 800352c:	40026400 	.word	0x40026400
 8003530:	40026058 	.word	0x40026058
 8003534:	40026000 	.word	0x40026000
 8003538:	2308      	movs	r3, #8
 800353a:	4a9a      	ldr	r2, [pc, #616]	; (80037a4 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800353c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	4b98      	ldr	r3, [pc, #608]	; (80037a8 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8003546:	429a      	cmp	r2, r3
 8003548:	d960      	bls.n	800360c <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a97      	ldr	r2, [pc, #604]	; (80037ac <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d057      	beq.n	8003604 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a95      	ldr	r2, [pc, #596]	; (80037b0 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d050      	beq.n	8003600 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a94      	ldr	r2, [pc, #592]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d049      	beq.n	80035fc <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a92      	ldr	r2, [pc, #584]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d042      	beq.n	80035f8 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a91      	ldr	r2, [pc, #580]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d03a      	beq.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a8f      	ldr	r2, [pc, #572]	; (80037c0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d032      	beq.n	80035ec <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a8e      	ldr	r2, [pc, #568]	; (80037c4 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d02a      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a8c      	ldr	r2, [pc, #560]	; (80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d022      	beq.n	80035e0 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a8b      	ldr	r2, [pc, #556]	; (80037cc <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d01a      	beq.n	80035da <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a89      	ldr	r2, [pc, #548]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d012      	beq.n	80035d4 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a88      	ldr	r2, [pc, #544]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00a      	beq.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a86      	ldr	r2, [pc, #536]	; (80037d8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d102      	bne.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 80035c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035c6:	e01e      	b.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80035c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035cc:	e01b      	b.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80035ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035d2:	e018      	b.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80035d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035d8:	e015      	b.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80035da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035de:	e012      	b.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80035e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035e4:	e00f      	b.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80035e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ea:	e00c      	b.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80035ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035f0:	e009      	b.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80035f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035f6:	e006      	b.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80035f8:	2304      	movs	r3, #4
 80035fa:	e004      	b.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80035fc:	2304      	movs	r3, #4
 80035fe:	e002      	b.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003600:	2304      	movs	r3, #4
 8003602:	e000      	b.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003604:	2304      	movs	r3, #4
 8003606:	4a75      	ldr	r2, [pc, #468]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003608:	60d3      	str	r3, [r2, #12]
 800360a:	e151      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	4b73      	ldr	r3, [pc, #460]	; (80037e0 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8003614:	429a      	cmp	r2, r3
 8003616:	d960      	bls.n	80036da <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a63      	ldr	r2, [pc, #396]	; (80037ac <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d057      	beq.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a62      	ldr	r2, [pc, #392]	; (80037b0 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d050      	beq.n	80036ce <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a60      	ldr	r2, [pc, #384]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d049      	beq.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a5f      	ldr	r2, [pc, #380]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d042      	beq.n	80036c6 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a5d      	ldr	r2, [pc, #372]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d03a      	beq.n	80036c0 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a5c      	ldr	r2, [pc, #368]	; (80037c0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d032      	beq.n	80036ba <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a5a      	ldr	r2, [pc, #360]	; (80037c4 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d02a      	beq.n	80036b4 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a59      	ldr	r2, [pc, #356]	; (80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d022      	beq.n	80036ae <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a57      	ldr	r2, [pc, #348]	; (80037cc <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d01a      	beq.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a56      	ldr	r2, [pc, #344]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d012      	beq.n	80036a2 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a54      	ldr	r2, [pc, #336]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00a      	beq.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a53      	ldr	r2, [pc, #332]	; (80037d8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d102      	bne.n	8003696 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8003690:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003694:	e01e      	b.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003696:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800369a:	e01b      	b.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800369c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036a0:	e018      	b.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036a6:	e015      	b.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036ac:	e012      	b.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036b2:	e00f      	b.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036b8:	e00c      	b.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036be:	e009      	b.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036c4:	e006      	b.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036c6:	2304      	movs	r3, #4
 80036c8:	e004      	b.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036ca:	2304      	movs	r3, #4
 80036cc:	e002      	b.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036ce:	2304      	movs	r3, #4
 80036d0:	e000      	b.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80036d2:	2304      	movs	r3, #4
 80036d4:	4a41      	ldr	r2, [pc, #260]	; (80037dc <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 80036d6:	6093      	str	r3, [r2, #8]
 80036d8:	e0ea      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	4b40      	ldr	r3, [pc, #256]	; (80037e4 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 80036e2:	429a      	cmp	r2, r3
 80036e4:	f240 8084 	bls.w	80037f0 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a2f      	ldr	r2, [pc, #188]	; (80037ac <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d07a      	beq.n	80037e8 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a2e      	ldr	r2, [pc, #184]	; (80037b0 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d050      	beq.n	800379e <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a2c      	ldr	r2, [pc, #176]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d049      	beq.n	800379a <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2b      	ldr	r2, [pc, #172]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d042      	beq.n	8003796 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a29      	ldr	r2, [pc, #164]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d03a      	beq.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d032      	beq.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a26      	ldr	r2, [pc, #152]	; (80037c4 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02a      	beq.n	8003784 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a23      	ldr	r2, [pc, #140]	; (80037cc <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01a      	beq.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d012      	beq.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a20      	ldr	r2, [pc, #128]	; (80037d4 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00a      	beq.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1f      	ldr	r2, [pc, #124]	; (80037d8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d102      	bne.n	8003766 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8003760:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003764:	e041      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003766:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800376a:	e03e      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800376c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003770:	e03b      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003772:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003776:	e038      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003778:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800377c:	e035      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800377e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003782:	e032      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003788:	e02f      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800378a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800378e:	e02c      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003794:	e029      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003796:	2304      	movs	r3, #4
 8003798:	e027      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800379a:	2304      	movs	r3, #4
 800379c:	e025      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800379e:	2304      	movs	r3, #4
 80037a0:	e023      	b.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037a2:	bf00      	nop
 80037a4:	40026000 	.word	0x40026000
 80037a8:	40026458 	.word	0x40026458
 80037ac:	40026010 	.word	0x40026010
 80037b0:	40026410 	.word	0x40026410
 80037b4:	40026070 	.word	0x40026070
 80037b8:	40026470 	.word	0x40026470
 80037bc:	40026028 	.word	0x40026028
 80037c0:	40026428 	.word	0x40026428
 80037c4:	40026088 	.word	0x40026088
 80037c8:	40026488 	.word	0x40026488
 80037cc:	40026040 	.word	0x40026040
 80037d0:	40026440 	.word	0x40026440
 80037d4:	400260a0 	.word	0x400260a0
 80037d8:	400264a0 	.word	0x400264a0
 80037dc:	40026400 	.word	0x40026400
 80037e0:	400260b8 	.word	0x400260b8
 80037e4:	40026058 	.word	0x40026058
 80037e8:	2304      	movs	r3, #4
 80037ea:	4a94      	ldr	r2, [pc, #592]	; (8003a3c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80037ec:	60d3      	str	r3, [r2, #12]
 80037ee:	e05f      	b.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a92      	ldr	r2, [pc, #584]	; (8003a40 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d057      	beq.n	80038aa <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a91      	ldr	r2, [pc, #580]	; (8003a44 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d050      	beq.n	80038a6 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a8f      	ldr	r2, [pc, #572]	; (8003a48 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d049      	beq.n	80038a2 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a8e      	ldr	r2, [pc, #568]	; (8003a4c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d042      	beq.n	800389e <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a8c      	ldr	r2, [pc, #560]	; (8003a50 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d03a      	beq.n	8003898 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a8b      	ldr	r2, [pc, #556]	; (8003a54 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d032      	beq.n	8003892 <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a89      	ldr	r2, [pc, #548]	; (8003a58 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d02a      	beq.n	800388c <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a88      	ldr	r2, [pc, #544]	; (8003a5c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d022      	beq.n	8003886 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a86      	ldr	r2, [pc, #536]	; (8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01a      	beq.n	8003880 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a85      	ldr	r2, [pc, #532]	; (8003a64 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d012      	beq.n	800387a <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a83      	ldr	r2, [pc, #524]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00a      	beq.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a82      	ldr	r2, [pc, #520]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d102      	bne.n	800386e <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8003868:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800386c:	e01e      	b.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800386e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003872:	e01b      	b.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003874:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003878:	e018      	b.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800387a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800387e:	e015      	b.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003884:	e012      	b.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800388a:	e00f      	b.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800388c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003890:	e00c      	b.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003896:	e009      	b.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800389c:	e006      	b.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800389e:	2304      	movs	r3, #4
 80038a0:	e004      	b.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038a2:	2304      	movs	r3, #4
 80038a4:	e002      	b.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038a6:	2304      	movs	r3, #4
 80038a8:	e000      	b.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038aa:	2304      	movs	r3, #4
 80038ac:	4a63      	ldr	r2, [pc, #396]	; (8003a3c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80038ae:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	4b6e      	ldr	r3, [pc, #440]	; (8003a70 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d95c      	bls.n	8003976 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a5f      	ldr	r2, [pc, #380]	; (8003a40 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d053      	beq.n	800396e <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a5e      	ldr	r2, [pc, #376]	; (8003a44 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d04c      	beq.n	800396a <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a5c      	ldr	r2, [pc, #368]	; (8003a48 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d045      	beq.n	8003966 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a5b      	ldr	r2, [pc, #364]	; (8003a4c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d03e      	beq.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a59      	ldr	r2, [pc, #356]	; (8003a50 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d037      	beq.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a58      	ldr	r2, [pc, #352]	; (8003a54 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d030      	beq.n	800395a <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a56      	ldr	r2, [pc, #344]	; (8003a58 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d029      	beq.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a55      	ldr	r2, [pc, #340]	; (8003a5c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d022      	beq.n	8003952 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a53      	ldr	r2, [pc, #332]	; (8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01a      	beq.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a52      	ldr	r2, [pc, #328]	; (8003a64 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d012      	beq.n	8003946 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a50      	ldr	r2, [pc, #320]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00a      	beq.n	8003940 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a4f      	ldr	r2, [pc, #316]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d102      	bne.n	800393a <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8003934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003938:	e01a      	b.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800393a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800393e:	e017      	b.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003940:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003944:	e014      	b.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003946:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800394a:	e011      	b.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800394c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003950:	e00e      	b.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003952:	2340      	movs	r3, #64	; 0x40
 8003954:	e00c      	b.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003956:	2340      	movs	r3, #64	; 0x40
 8003958:	e00a      	b.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800395a:	2340      	movs	r3, #64	; 0x40
 800395c:	e008      	b.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800395e:	2340      	movs	r3, #64	; 0x40
 8003960:	e006      	b.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003962:	2301      	movs	r3, #1
 8003964:	e004      	b.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003966:	2301      	movs	r3, #1
 8003968:	e002      	b.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800396e:	2301      	movs	r3, #1
 8003970:	4a40      	ldr	r2, [pc, #256]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003972:	60d3      	str	r3, [r2, #12]
 8003974:	e141      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	4b3e      	ldr	r3, [pc, #248]	; (8003a78 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 800397e:	429a      	cmp	r2, r3
 8003980:	d97c      	bls.n	8003a7c <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2e      	ldr	r2, [pc, #184]	; (8003a40 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d053      	beq.n	8003a34 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2c      	ldr	r2, [pc, #176]	; (8003a44 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d04c      	beq.n	8003a30 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2b      	ldr	r2, [pc, #172]	; (8003a48 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d045      	beq.n	8003a2c <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a29      	ldr	r2, [pc, #164]	; (8003a4c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d03e      	beq.n	8003a28 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a28      	ldr	r2, [pc, #160]	; (8003a50 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d037      	beq.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d030      	beq.n	8003a20 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d029      	beq.n	8003a1c <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a23      	ldr	r2, [pc, #140]	; (8003a5c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d022      	beq.n	8003a18 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a22      	ldr	r2, [pc, #136]	; (8003a60 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d01a      	beq.n	8003a12 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a20      	ldr	r2, [pc, #128]	; (8003a64 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d012      	beq.n	8003a0c <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00a      	beq.n	8003a06 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d102      	bne.n	8003a00 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 80039fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039fe:	e01a      	b.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a04:	e017      	b.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a0a:	e014      	b.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a10:	e011      	b.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a16:	e00e      	b.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a18:	2340      	movs	r3, #64	; 0x40
 8003a1a:	e00c      	b.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a1c:	2340      	movs	r3, #64	; 0x40
 8003a1e:	e00a      	b.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a20:	2340      	movs	r3, #64	; 0x40
 8003a22:	e008      	b.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a24:	2340      	movs	r3, #64	; 0x40
 8003a26:	e006      	b.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e004      	b.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e002      	b.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a34:	2301      	movs	r3, #1
 8003a36:	4a0f      	ldr	r2, [pc, #60]	; (8003a74 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003a38:	6093      	str	r3, [r2, #8]
 8003a3a:	e0de      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003a3c:	40026000 	.word	0x40026000
 8003a40:	40026010 	.word	0x40026010
 8003a44:	40026410 	.word	0x40026410
 8003a48:	40026070 	.word	0x40026070
 8003a4c:	40026470 	.word	0x40026470
 8003a50:	40026028 	.word	0x40026028
 8003a54:	40026428 	.word	0x40026428
 8003a58:	40026088 	.word	0x40026088
 8003a5c:	40026488 	.word	0x40026488
 8003a60:	40026040 	.word	0x40026040
 8003a64:	40026440 	.word	0x40026440
 8003a68:	400260a0 	.word	0x400260a0
 8003a6c:	400264a0 	.word	0x400264a0
 8003a70:	40026458 	.word	0x40026458
 8003a74:	40026400 	.word	0x40026400
 8003a78:	400260b8 	.word	0x400260b8
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	4b78      	ldr	r3, [pc, #480]	; (8003c64 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d95c      	bls.n	8003b42 <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a76      	ldr	r2, [pc, #472]	; (8003c68 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d053      	beq.n	8003b3a <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a75      	ldr	r2, [pc, #468]	; (8003c6c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d04c      	beq.n	8003b36 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a73      	ldr	r2, [pc, #460]	; (8003c70 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d045      	beq.n	8003b32 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a72      	ldr	r2, [pc, #456]	; (8003c74 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d03e      	beq.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a70      	ldr	r2, [pc, #448]	; (8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d037      	beq.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a6f      	ldr	r2, [pc, #444]	; (8003c7c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d030      	beq.n	8003b26 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a6d      	ldr	r2, [pc, #436]	; (8003c80 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d029      	beq.n	8003b22 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6c      	ldr	r2, [pc, #432]	; (8003c84 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a6a      	ldr	r2, [pc, #424]	; (8003c88 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01a      	beq.n	8003b18 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a69      	ldr	r2, [pc, #420]	; (8003c8c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d012      	beq.n	8003b12 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a67      	ldr	r2, [pc, #412]	; (8003c90 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00a      	beq.n	8003b0c <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a66      	ldr	r2, [pc, #408]	; (8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d102      	bne.n	8003b06 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b04:	e01a      	b.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b0a:	e017      	b.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b10:	e014      	b.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b16:	e011      	b.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b1c:	e00e      	b.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b1e:	2340      	movs	r3, #64	; 0x40
 8003b20:	e00c      	b.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b22:	2340      	movs	r3, #64	; 0x40
 8003b24:	e00a      	b.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b26:	2340      	movs	r3, #64	; 0x40
 8003b28:	e008      	b.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b2a:	2340      	movs	r3, #64	; 0x40
 8003b2c:	e006      	b.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e004      	b.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e002      	b.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	4a56      	ldr	r2, [pc, #344]	; (8003c98 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003b3e:	60d3      	str	r3, [r2, #12]
 8003b40:	e05b      	b.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a48      	ldr	r2, [pc, #288]	; (8003c68 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d053      	beq.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a46      	ldr	r2, [pc, #280]	; (8003c6c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d04c      	beq.n	8003bf0 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a45      	ldr	r2, [pc, #276]	; (8003c70 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d045      	beq.n	8003bec <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a43      	ldr	r2, [pc, #268]	; (8003c74 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d03e      	beq.n	8003be8 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a42      	ldr	r2, [pc, #264]	; (8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d037      	beq.n	8003be4 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a40      	ldr	r2, [pc, #256]	; (8003c7c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d030      	beq.n	8003be0 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a3f      	ldr	r2, [pc, #252]	; (8003c80 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d029      	beq.n	8003bdc <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a3d      	ldr	r2, [pc, #244]	; (8003c84 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d022      	beq.n	8003bd8 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a3c      	ldr	r2, [pc, #240]	; (8003c88 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d01a      	beq.n	8003bd2 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a3a      	ldr	r2, [pc, #232]	; (8003c8c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d012      	beq.n	8003bcc <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a39      	ldr	r2, [pc, #228]	; (8003c90 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00a      	beq.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a37      	ldr	r2, [pc, #220]	; (8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d102      	bne.n	8003bc0 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8003bba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bbe:	e01a      	b.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003bc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bc4:	e017      	b.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003bc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bca:	e014      	b.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bd0:	e011      	b.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bd6:	e00e      	b.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003bd8:	2340      	movs	r3, #64	; 0x40
 8003bda:	e00c      	b.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003bdc:	2340      	movs	r3, #64	; 0x40
 8003bde:	e00a      	b.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003be0:	2340      	movs	r3, #64	; 0x40
 8003be2:	e008      	b.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003be4:	2340      	movs	r3, #64	; 0x40
 8003be6:	e006      	b.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e004      	b.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e002      	b.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	4a28      	ldr	r2, [pc, #160]	; (8003c98 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003bf8:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0216 	orr.w	r2, r2, #22
 8003c08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0208 	orr.w	r2, r2, #8
 8003c38:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e005      	b.n	8003c58 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
 8003c56:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40026058 	.word	0x40026058
 8003c68:	40026010 	.word	0x40026010
 8003c6c:	40026410 	.word	0x40026410
 8003c70:	40026070 	.word	0x40026070
 8003c74:	40026470 	.word	0x40026470
 8003c78:	40026028 	.word	0x40026028
 8003c7c:	40026428 	.word	0x40026428
 8003c80:	40026088 	.word	0x40026088
 8003c84:	40026488 	.word	0x40026488
 8003c88:	40026040 	.word	0x40026040
 8003c8c:	40026440 	.word	0x40026440
 8003c90:	400260a0 	.word	0x400260a0
 8003c94:	400264a0 	.word	0x400264a0
 8003c98:	40026000 	.word	0x40026000

08003c9c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d108      	bne.n	8003ccc <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cca:	e007      	b.n	8003cdc <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	60da      	str	r2, [r3, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003cf8:	4baa      	ldr	r3, [pc, #680]	; (8003fa4 <HAL_ETH_Init+0x2bc>)
 8003cfa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e183      	b.n	8004016 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f007 fb70 	bl	800b408 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	4b9e      	ldr	r3, [pc, #632]	; (8003fa8 <HAL_ETH_Init+0x2c0>)
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d30:	4a9d      	ldr	r2, [pc, #628]	; (8003fa8 <HAL_ETH_Init+0x2c0>)
 8003d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d36:	6453      	str	r3, [r2, #68]	; 0x44
 8003d38:	4b9b      	ldr	r3, [pc, #620]	; (8003fa8 <HAL_ETH_Init+0x2c0>)
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003d44:	4b99      	ldr	r3, [pc, #612]	; (8003fac <HAL_ETH_Init+0x2c4>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a98      	ldr	r2, [pc, #608]	; (8003fac <HAL_ETH_Init+0x2c4>)
 8003d4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d4e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003d50:	4b96      	ldr	r3, [pc, #600]	; (8003fac <HAL_ETH_Init+0x2c4>)
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4994      	ldr	r1, [pc, #592]	; (8003fac <HAL_ETH_Init+0x2c4>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0201 	orr.w	r2, r2, #1
 8003d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d74:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003d76:	f7fe f929 	bl	8001fcc <HAL_GetTick>
 8003d7a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003d7c:	e011      	b.n	8003da2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003d7e:	f7fe f925 	bl	8001fcc <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d8c:	d909      	bls.n	8003da2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2203      	movs	r2, #3
 8003d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e139      	b.n	8004016 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e4      	bne.n	8003d7e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f023 031c 	bic.w	r3, r3, #28
 8003dc2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003dc4:	f003 fafe 	bl	80073c4 <HAL_RCC_GetHCLKFreq>
 8003dc8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	4a78      	ldr	r2, [pc, #480]	; (8003fb0 <HAL_ETH_Init+0x2c8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d908      	bls.n	8003de4 <HAL_ETH_Init+0xfc>
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	4a77      	ldr	r2, [pc, #476]	; (8003fb4 <HAL_ETH_Init+0x2cc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d804      	bhi.n	8003de4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f043 0308 	orr.w	r3, r3, #8
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	e027      	b.n	8003e34 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	4a73      	ldr	r2, [pc, #460]	; (8003fb4 <HAL_ETH_Init+0x2cc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d908      	bls.n	8003dfe <HAL_ETH_Init+0x116>
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	4a6d      	ldr	r2, [pc, #436]	; (8003fa4 <HAL_ETH_Init+0x2bc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d204      	bcs.n	8003dfe <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f043 030c 	orr.w	r3, r3, #12
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	e01a      	b.n	8003e34 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	4a68      	ldr	r2, [pc, #416]	; (8003fa4 <HAL_ETH_Init+0x2bc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d303      	bcc.n	8003e0e <HAL_ETH_Init+0x126>
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4a6b      	ldr	r2, [pc, #428]	; (8003fb8 <HAL_ETH_Init+0x2d0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d911      	bls.n	8003e32 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	4a69      	ldr	r2, [pc, #420]	; (8003fb8 <HAL_ETH_Init+0x2d0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d908      	bls.n	8003e28 <HAL_ETH_Init+0x140>
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	4a68      	ldr	r2, [pc, #416]	; (8003fbc <HAL_ETH_Init+0x2d4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d804      	bhi.n	8003e28 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	e005      	b.n	8003e34 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f043 0310 	orr.w	r3, r3, #16
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	e000      	b.n	8003e34 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003e32:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003e3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e40:	2100      	movs	r1, #0
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fc17 	bl	8004676 <HAL_ETH_WritePHYRegister>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003e52:	6939      	ldr	r1, [r7, #16]
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fdcd 	bl	80049f4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e0d7      	b.n	8004016 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003e66:	20ff      	movs	r0, #255	; 0xff
 8003e68:	f7fe f8bc 	bl	8001fe4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 80a5 	beq.w	8003fc0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e76:	f7fe f8a9 	bl	8001fcc <HAL_GetTick>
 8003e7a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003e7c:	f107 030c 	add.w	r3, r7, #12
 8003e80:	461a      	mov	r2, r3
 8003e82:	2101      	movs	r1, #1
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fb8e 	bl	80045a6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003e8a:	f7fe f89f 	bl	8001fcc <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d90f      	bls.n	8003ebc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003ea0:	6939      	ldr	r1, [r7, #16]
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fda6 	bl	80049f4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e0ac      	b.n	8004016 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0da      	beq.n	8003e7c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003ec6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003eca:	2100      	movs	r1, #0
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fbd2 	bl	8004676 <HAL_ETH_WritePHYRegister>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003edc:	6939      	ldr	r1, [r7, #16]
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fd88 	bl	80049f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003eec:	2301      	movs	r3, #1
 8003eee:	e092      	b.n	8004016 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ef0:	f7fe f86c 	bl	8001fcc <HAL_GetTick>
 8003ef4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003ef6:	f107 030c 	add.w	r3, r7, #12
 8003efa:	461a      	mov	r2, r3
 8003efc:	2101      	movs	r1, #1
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fb51 	bl	80045a6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003f04:	f7fe f862 	bl	8001fcc <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d90f      	bls.n	8003f36 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003f1a:	6939      	ldr	r1, [r7, #16]
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fd69 	bl	80049f4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e06f      	b.n	8004016 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0da      	beq.n	8003ef6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003f40:	f107 030c 	add.w	r3, r7, #12
 8003f44:	461a      	mov	r2, r3
 8003f46:	2131      	movs	r1, #49	; 0x31
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fb2c 	bl	80045a6 <HAL_ETH_ReadPHYRegister>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00b      	beq.n	8003f6c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003f58:	6939      	ldr	r1, [r7, #16]
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fd4a 	bl	80049f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e054      	b.n	8004016 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d004      	beq.n	8003f80 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f7c:	60da      	str	r2, [r3, #12]
 8003f7e:	e002      	b.n	8003f86 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	609a      	str	r2, [r3, #8]
 8003f96:	e035      	b.n	8004004 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	e030      	b.n	8004004 <HAL_ETH_Init+0x31c>
 8003fa2:	bf00      	nop
 8003fa4:	03938700 	.word	0x03938700
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40013800 	.word	0x40013800
 8003fb0:	01312cff 	.word	0x01312cff
 8003fb4:	02160ebf 	.word	0x02160ebf
 8003fb8:	05f5e0ff 	.word	0x05f5e0ff
 8003fbc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	08db      	lsrs	r3, r3, #3
 8003fc6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fb4c 	bl	8004676 <HAL_ETH_WritePHYRegister>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003fe8:	6939      	ldr	r1, [r7, #16]
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fd02 	bl	80049f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e00c      	b.n	8004016 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003ffc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004000:	f7fd fff0 	bl	8001fe4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004004:	6939      	ldr	r1, [r7, #16]
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fcf4 	bl	80049f4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop

08004020 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_ETH_DMATxDescListInit+0x20>
 800403c:	2302      	movs	r3, #2
 800403e:	e052      	b.n	80040e6 <HAL_ETH_DMATxDescListInit+0xc6>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	e030      	b.n	80040be <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	015b      	lsls	r3, r3, #5
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	4413      	add	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800406c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004074:	fb02 f303 	mul.w	r3, r2, r3
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	4413      	add	r3, r2
 800407c:	461a      	mov	r2, r3
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d105      	bne.n	8004096 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	3b01      	subs	r3, #1
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	429a      	cmp	r2, r3
 800409e:	d208      	bcs.n	80040b2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	3301      	adds	r3, #1
 80040a4:	015b      	lsls	r3, r3, #5
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	4413      	add	r3, r2
 80040aa:	461a      	mov	r2, r3
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	60da      	str	r2, [r3, #12]
 80040b0:	e002      	b.n	80040b8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	3301      	adds	r3, #1
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d3ca      	bcc.n	800405c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d0:	3310      	adds	r3, #16
 80040d2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b087      	sub	sp, #28
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_ETH_DMARxDescListInit+0x20>
 800410e:	2302      	movs	r3, #2
 8004110:	e056      	b.n	80041c0 <HAL_ETH_DMARxDescListInit+0xce>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2202      	movs	r2, #2
 800411e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e034      	b.n	8004198 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	015b      	lsls	r3, r3, #5
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4413      	add	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800413e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004146:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800414e:	fb02 f303 	mul.w	r3, r2, r3
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	461a      	mov	r2, r3
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d105      	bne.n	8004170 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	3b01      	subs	r3, #1
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	429a      	cmp	r2, r3
 8004178:	d208      	bcs.n	800418c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	3301      	adds	r3, #1
 800417e:	015b      	lsls	r3, r3, #5
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	4413      	add	r3, r2
 8004184:	461a      	mov	r2, r3
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	e002      	b.n	8004192 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	3301      	adds	r3, #1
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d3c6      	bcc.n	800412e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041aa:	330c      	adds	r3, #12
 80041ac:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_ETH_TransmitFrame+0x24>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e0cd      	b.n	800438c <HAL_ETH_TransmitFrame+0x1c0>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004216:	2301      	movs	r3, #1
 8004218:	e0b8      	b.n	800438c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	da09      	bge.n	8004238 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2212      	movs	r2, #18
 8004228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0a9      	b.n	800438c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800423e:	4293      	cmp	r3, r2
 8004240:	d915      	bls.n	800426e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	4a54      	ldr	r2, [pc, #336]	; (8004398 <HAL_ETH_TransmitFrame+0x1cc>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	0a9b      	lsrs	r3, r3, #10
 800424c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	4b51      	ldr	r3, [pc, #324]	; (8004398 <HAL_ETH_TransmitFrame+0x1cc>)
 8004252:	fba3 1302 	umull	r1, r3, r3, r2
 8004256:	0a9b      	lsrs	r3, r3, #10
 8004258:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	3301      	adds	r3, #1
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	e001      	b.n	8004272 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800426e:	2301      	movs	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d11c      	bne.n	80042b2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8004286:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004292:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042a2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	461a      	mov	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80042b0:	e04b      	b.n	800434a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80042b2:	2300      	movs	r3, #0
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	e044      	b.n	8004342 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042c6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d107      	bne.n	80042de <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80042dc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80042e6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d116      	bne.n	8004320 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004300:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	4a25      	ldr	r2, [pc, #148]	; (800439c <HAL_ETH_TransmitFrame+0x1d0>)
 8004306:	fb02 f203 	mul.w	r2, r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	4413      	add	r3, r2
 800430e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004312:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800431e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800432e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	461a      	mov	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	3301      	adds	r3, #1
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	429a      	cmp	r2, r3
 8004348:	d3b6      	bcc.n	80042b8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004352:	3314      	adds	r3, #20
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00d      	beq.n	800437a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004366:	3314      	adds	r3, #20
 8004368:	2204      	movs	r2, #4
 800436a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004374:	3304      	adds	r3, #4
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	ac02b00b 	.word	0xac02b00b
 800439c:	fffffa0c 	.word	0xfffffa0c

080043a0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e074      	b.n	80044a4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2202      	movs	r2, #2
 80043c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80043ca:	e05a      	b.n	8004482 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3301      	adds	r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e0:	d10d      	bne.n	80043fe <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	461a      	mov	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28
 80043fc:	e041      	b.n	8004482 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10b      	bne.n	8004424 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	461a      	mov	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	629a      	str	r2, [r3, #40]	; 0x28
 8004422:	e02e      	b.n	8004482 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	2b01      	cmp	r3, #1
 800443c:	d103      	bne.n	8004446 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004452:	1f1a      	subs	r2, r3, #4
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	461a      	mov	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	e010      	b.n	80044a4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	db02      	blt.n	8004492 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b03      	cmp	r3, #3
 8004490:	d99c      	bls.n	80043cc <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c0:	3314      	adds	r3, #20
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b40      	cmp	r3, #64	; 0x40
 80044ca:	d112      	bne.n	80044f2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f007 f849 	bl	800b564 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044da:	3314      	adds	r3, #20
 80044dc:	2240      	movs	r2, #64	; 0x40
 80044de:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044f0:	e01b      	b.n	800452a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044fa:	3314      	adds	r3, #20
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b01      	cmp	r3, #1
 8004504:	d111      	bne.n	800452a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f839 	bl	800457e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004514:	3314      	adds	r3, #20
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004532:	3314      	adds	r3, #20
 8004534:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004538:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004542:	3314      	adds	r3, #20
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800454a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454e:	d112      	bne.n	8004576 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f81e 	bl	8004592 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455e:	3314      	adds	r3, #20
 8004560:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004564:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004576:	bf00      	nop
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b086      	sub	sp, #24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	460b      	mov	r3, r1
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b82      	cmp	r3, #130	; 0x82
 80045c6:	d101      	bne.n	80045cc <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
 80045ca:	e050      	b.n	800466e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2282      	movs	r2, #130	; 0x82
 80045d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f003 031c 	and.w	r3, r3, #28
 80045e2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8a1b      	ldrh	r3, [r3, #16]
 80045e8:	02db      	lsls	r3, r3, #11
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80045f2:	897b      	ldrh	r3, [r7, #10]
 80045f4:	019b      	lsls	r3, r3, #6
 80045f6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f023 0302 	bic.w	r3, r3, #2
 8004606:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004618:	f7fd fcd8 	bl	8001fcc <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800461e:	e015      	b.n	800464c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004620:	f7fd fcd4 	bl	8001fcc <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462e:	d309      	bcc.n	8004644 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e014      	b.n	800466e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e4      	bne.n	8004620 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	b29b      	uxth	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	460b      	mov	r3, r1
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b42      	cmp	r3, #66	; 0x42
 8004696:	d101      	bne.n	800469c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004698:	2302      	movs	r3, #2
 800469a:	e04e      	b.n	800473a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2242      	movs	r2, #66	; 0x42
 80046a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f003 031c 	and.w	r3, r3, #28
 80046b2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8a1b      	ldrh	r3, [r3, #16]
 80046b8:	02db      	lsls	r3, r3, #11
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80046c2:	897b      	ldrh	r3, [r7, #10]
 80046c4:	019b      	lsls	r3, r3, #6
 80046c6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f043 0302 	orr.w	r3, r3, #2
 80046d6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80046f2:	f7fd fc6b 	bl	8001fcc <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80046f8:	e015      	b.n	8004726 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80046fa:	f7fd fc67 	bl	8001fcc <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004708:	d309      	bcc.n	800471e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e00d      	b.n	800473a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e4      	bne.n	80046fa <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_ETH_Start+0x16>
 8004754:	2302      	movs	r3, #2
 8004756:	e01f      	b.n	8004798 <HAL_ETH_Start+0x56>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fb45 	bl	8004df8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fb7c 	bl	8004e6c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fc13 	bl	8004fa0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fbb0 	bl	8004ee0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fbdd 	bl	8004f40 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_ETH_Stop+0x16>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e01f      	b.n	80047f6 <HAL_ETH_Stop+0x56>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fba2 	bl	8004f10 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fbcf 	bl	8004f70 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fb67 	bl	8004ea6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fbe1 	bl	8004fa0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fb27 	bl	8004e32 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_ETH_ConfigMAC+0x1c>
 8004818:	2302      	movs	r3, #2
 800481a:	e0e4      	b.n	80049e6 <HAL_ETH_ConfigMAC+0x1e6>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80b1 	beq.w	8004996 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4b6c      	ldr	r3, [pc, #432]	; (80049f0 <HAL_ETH_ConfigMAC+0x1f0>)
 8004840:	4013      	ands	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800484c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8004852:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8004858:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800485e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8004864:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800486a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8004870:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8004876:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800487c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8004882:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8004888:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800488e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80048a6:	2001      	movs	r0, #1
 80048a8:	f7fd fb9c 	bl	8001fe4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80048bc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80048c2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80048c8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80048ce:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80048d4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80048da:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80048e6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80048e8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80048f2:	2001      	movs	r0, #1
 80048f4:	f7fd fb76 	bl	8001fe4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004908:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004912:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004922:	4013      	ands	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004930:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8004936:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800493c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8004942:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004948:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004960:	2001      	movs	r0, #1
 8004962:	f7fd fb3f 	bl	8001fe4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8004986:	2001      	movs	r0, #1
 8004988:	f7fd fb2c 	bl	8001fe4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	61da      	str	r2, [r3, #28]
 8004994:	e01e      	b.n	80049d4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80049a4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80049c6:	2001      	movs	r0, #1
 80049c8:	f7fd fb0c 	bl	8001fe4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	ff20810f 	.word	0xff20810f

080049f4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b0b0      	sub	sp, #192	; 0xc0
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a10:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a18:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004a22:	2300      	movs	r3, #0
 8004a24:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004a26:	2300      	movs	r3, #0
 8004a28:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a3e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a40:	e001      	b.n	8004a46 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a4a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004a50:	2300      	movs	r3, #0
 8004a52:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004a54:	2300      	movs	r3, #0
 8004a56:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004a60:	2340      	movs	r3, #64	; 0x40
 8004a62:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004a76:	2300      	movs	r3, #0
 8004a78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004ac8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004acc:	4bac      	ldr	r3, [pc, #688]	; (8004d80 <ETH_MACDMAConfig+0x38c>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004ad8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004adc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004ae0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004ae6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004ae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004aea:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004aee:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004af4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004af8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004afc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004afe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004b00:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004b04:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004b08:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004b0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b1c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b28:	2001      	movs	r0, #1
 8004b2a:	f7fd fa5b 	bl	8001fe4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b36:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004b38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004b3c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004b3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004b40:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004b42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004b46:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004b4c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004b4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004b52:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004b58:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004b5c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004b64:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004b66:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b72:	2001      	movs	r0, #1
 8004b74:	f7fd fa36 	bl	8001fe4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b80:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b8a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004b94:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004ba0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ba4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004ba8:	4013      	ands	r3, r2
 8004baa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004bae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bb2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004bb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004bb8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004bba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004bbe:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004bc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004bc4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004bca:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004bcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004bd0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004bd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004be4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	f7fd f9f7 	bl	8001fe4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bfe:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004c00:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004c04:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	f7fd f9e2 	bl	8001fe4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c28:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c32:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004c38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c3c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004c4e:	2304      	movs	r3, #4
 8004c50:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c5c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c62:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c68:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004c6a:	2380      	movs	r3, #128	; 0x80
 8004c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004c72:	2300      	movs	r3, #0
 8004c74:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7e:	3318      	adds	r3, #24
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004c86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c8a:	4b3e      	ldr	r3, [pc, #248]	; (8004d84 <ETH_MACDMAConfig+0x390>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004c92:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004c94:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004c96:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004c98:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004c9a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004c9c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004c9e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004ca0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004ca2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004ca4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004ca6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004caa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004cae:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004cb2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004cb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc6:	3318      	adds	r3, #24
 8004cc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ccc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd6:	3318      	adds	r3, #24
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004cde:	2001      	movs	r0, #1
 8004ce0:	f7fd f980 	bl	8001fe4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cec:	3318      	adds	r3, #24
 8004cee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004cf2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004cf8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004cfc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004d00:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004d04:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d08:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004d0a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004d0e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	f7fd f959 	bl	8001fe4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d3e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d10f      	bne.n	8004d68 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d50:	331c      	adds	r3, #28
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d64:	331c      	adds	r3, #28
 8004d66:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2100      	movs	r1, #0
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f809 	bl	8004d88 <ETH_MACAddressConfig>
}
 8004d76:	bf00      	nop
 8004d78:	37c0      	adds	r7, #192	; 0xc0
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	ff20810f 	.word	0xff20810f
 8004d84:	f8de3f23 	.word	0xf8de3f23

08004d88 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3305      	adds	r3, #5
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	021b      	lsls	r3, r3, #8
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	3204      	adds	r2, #4
 8004da0:	7812      	ldrb	r2, [r2, #0]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <ETH_MACAddressConfig+0x68>)
 8004daa:	4413      	add	r3, r2
 8004dac:	461a      	mov	r2, r3
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3303      	adds	r3, #3
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	061a      	lsls	r2, r3, #24
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3302      	adds	r3, #2
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	041b      	lsls	r3, r3, #16
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	7812      	ldrb	r2, [r2, #0]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <ETH_MACAddressConfig+0x6c>)
 8004dda:	4413      	add	r3, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	6013      	str	r3, [r2, #0]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40028040 	.word	0x40028040
 8004df4:	40028044 	.word	0x40028044

08004df8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0208 	orr.w	r2, r2, #8
 8004e12:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	f000 f8e9 	bl	8004ff4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	601a      	str	r2, [r3, #0]
}
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0208 	bic.w	r2, r2, #8
 8004e4c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004e56:	2001      	movs	r0, #1
 8004e58:	f000 f8cc 	bl	8004ff4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	601a      	str	r2, [r3, #0]
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0204 	orr.w	r2, r2, #4
 8004e86:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004e90:	2001      	movs	r0, #1
 8004e92:	f000 f8af 	bl	8004ff4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	601a      	str	r2, [r3, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0204 	bic.w	r2, r2, #4
 8004ec0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004eca:	2001      	movs	r0, #1
 8004ecc:	f000 f892 	bl	8004ff4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	601a      	str	r2, [r3, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef0:	3318      	adds	r3, #24
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f00:	3318      	adds	r3, #24
 8004f02:	601a      	str	r2, [r3, #0]
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f20:	3318      	adds	r3, #24
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f30:	3318      	adds	r3, #24
 8004f32:	601a      	str	r2, [r3, #0]
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f50:	3318      	adds	r3, #24
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0202 	orr.w	r2, r2, #2
 8004f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f60:	3318      	adds	r3, #24
 8004f62:	601a      	str	r2, [r3, #0]
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f80:	3318      	adds	r3, #24
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0202 	bic.w	r2, r2, #2
 8004f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f90:	3318      	adds	r3, #24
 8004f92:	601a      	str	r2, [r3, #0]
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb4:	3318      	adds	r3, #24
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fc4:	3318      	adds	r3, #24
 8004fc6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd0:	3318      	adds	r3, #24
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	f000 f80c 	bl	8004ff4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe6:	3318      	adds	r3, #24
 8004fe8:	601a      	str	r2, [r3, #0]
}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	; (800502c <ETH_Delay+0x38>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a0b      	ldr	r2, [pc, #44]	; (8005030 <ETH_Delay+0x3c>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	0a5b      	lsrs	r3, r3, #9
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005010:	bf00      	nop
  } 
  while (Delay --);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1e5a      	subs	r2, r3, #1
 8005016:	60fa      	str	r2, [r7, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f9      	bne.n	8005010 <ETH_Delay+0x1c>
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	20000010 	.word	0x20000010
 8005030:	10624dd3 	.word	0x10624dd3

08005034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005034:	b480      	push	{r7}
 8005036:	b089      	sub	sp, #36	; 0x24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005042:	2300      	movs	r3, #0
 8005044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800504a:	2300      	movs	r3, #0
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	e16b      	b.n	8005328 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005050:	2201      	movs	r2, #1
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4013      	ands	r3, r2
 8005062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	429a      	cmp	r2, r3
 800506a:	f040 815a 	bne.w	8005322 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	2b01      	cmp	r3, #1
 8005078:	d005      	beq.n	8005086 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005082:	2b02      	cmp	r3, #2
 8005084:	d130      	bne.n	80050e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	2203      	movs	r2, #3
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43db      	mvns	r3, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4013      	ands	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050bc:	2201      	movs	r2, #1
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	43db      	mvns	r3, r3
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	4013      	ands	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	f003 0201 	and.w	r2, r3, #1
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d017      	beq.n	8005124 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	2203      	movs	r2, #3
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	43db      	mvns	r3, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4013      	ands	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d123      	bne.n	8005178 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	08da      	lsrs	r2, r3, #3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3208      	adds	r2, #8
 8005138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	220f      	movs	r2, #15
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	43db      	mvns	r3, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	4013      	ands	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4313      	orrs	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	08da      	lsrs	r2, r3, #3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3208      	adds	r2, #8
 8005172:	69b9      	ldr	r1, [r7, #24]
 8005174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	2203      	movs	r2, #3
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	43db      	mvns	r3, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4013      	ands	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f003 0203 	and.w	r2, r3, #3
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 80b4 	beq.w	8005322 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	4b60      	ldr	r3, [pc, #384]	; (8005340 <HAL_GPIO_Init+0x30c>)
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	4a5f      	ldr	r2, [pc, #380]	; (8005340 <HAL_GPIO_Init+0x30c>)
 80051c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051c8:	6453      	str	r3, [r2, #68]	; 0x44
 80051ca:	4b5d      	ldr	r3, [pc, #372]	; (8005340 <HAL_GPIO_Init+0x30c>)
 80051cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051d6:	4a5b      	ldr	r2, [pc, #364]	; (8005344 <HAL_GPIO_Init+0x310>)
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	089b      	lsrs	r3, r3, #2
 80051dc:	3302      	adds	r3, #2
 80051de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	220f      	movs	r2, #15
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	43db      	mvns	r3, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4013      	ands	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a52      	ldr	r2, [pc, #328]	; (8005348 <HAL_GPIO_Init+0x314>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d02b      	beq.n	800525a <HAL_GPIO_Init+0x226>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a51      	ldr	r2, [pc, #324]	; (800534c <HAL_GPIO_Init+0x318>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d025      	beq.n	8005256 <HAL_GPIO_Init+0x222>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a50      	ldr	r2, [pc, #320]	; (8005350 <HAL_GPIO_Init+0x31c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d01f      	beq.n	8005252 <HAL_GPIO_Init+0x21e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a4f      	ldr	r2, [pc, #316]	; (8005354 <HAL_GPIO_Init+0x320>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d019      	beq.n	800524e <HAL_GPIO_Init+0x21a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a4e      	ldr	r2, [pc, #312]	; (8005358 <HAL_GPIO_Init+0x324>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d013      	beq.n	800524a <HAL_GPIO_Init+0x216>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a4d      	ldr	r2, [pc, #308]	; (800535c <HAL_GPIO_Init+0x328>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00d      	beq.n	8005246 <HAL_GPIO_Init+0x212>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a4c      	ldr	r2, [pc, #304]	; (8005360 <HAL_GPIO_Init+0x32c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d007      	beq.n	8005242 <HAL_GPIO_Init+0x20e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a4b      	ldr	r2, [pc, #300]	; (8005364 <HAL_GPIO_Init+0x330>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d101      	bne.n	800523e <HAL_GPIO_Init+0x20a>
 800523a:	2307      	movs	r3, #7
 800523c:	e00e      	b.n	800525c <HAL_GPIO_Init+0x228>
 800523e:	2308      	movs	r3, #8
 8005240:	e00c      	b.n	800525c <HAL_GPIO_Init+0x228>
 8005242:	2306      	movs	r3, #6
 8005244:	e00a      	b.n	800525c <HAL_GPIO_Init+0x228>
 8005246:	2305      	movs	r3, #5
 8005248:	e008      	b.n	800525c <HAL_GPIO_Init+0x228>
 800524a:	2304      	movs	r3, #4
 800524c:	e006      	b.n	800525c <HAL_GPIO_Init+0x228>
 800524e:	2303      	movs	r3, #3
 8005250:	e004      	b.n	800525c <HAL_GPIO_Init+0x228>
 8005252:	2302      	movs	r3, #2
 8005254:	e002      	b.n	800525c <HAL_GPIO_Init+0x228>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <HAL_GPIO_Init+0x228>
 800525a:	2300      	movs	r3, #0
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	f002 0203 	and.w	r2, r2, #3
 8005262:	0092      	lsls	r2, r2, #2
 8005264:	4093      	lsls	r3, r2
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4313      	orrs	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800526c:	4935      	ldr	r1, [pc, #212]	; (8005344 <HAL_GPIO_Init+0x310>)
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	089b      	lsrs	r3, r3, #2
 8005272:	3302      	adds	r3, #2
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800527a:	4b3b      	ldr	r3, [pc, #236]	; (8005368 <HAL_GPIO_Init+0x334>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	43db      	mvns	r3, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4013      	ands	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800529e:	4a32      	ldr	r2, [pc, #200]	; (8005368 <HAL_GPIO_Init+0x334>)
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80052a4:	4b30      	ldr	r3, [pc, #192]	; (8005368 <HAL_GPIO_Init+0x334>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	43db      	mvns	r3, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4013      	ands	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052c8:	4a27      	ldr	r2, [pc, #156]	; (8005368 <HAL_GPIO_Init+0x334>)
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052ce:	4b26      	ldr	r3, [pc, #152]	; (8005368 <HAL_GPIO_Init+0x334>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	43db      	mvns	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052f2:	4a1d      	ldr	r2, [pc, #116]	; (8005368 <HAL_GPIO_Init+0x334>)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052f8:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <HAL_GPIO_Init+0x334>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	43db      	mvns	r3, r3
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4013      	ands	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800531c:	4a12      	ldr	r2, [pc, #72]	; (8005368 <HAL_GPIO_Init+0x334>)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	3301      	adds	r3, #1
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	2b0f      	cmp	r3, #15
 800532c:	f67f ae90 	bls.w	8005050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005330:	bf00      	nop
 8005332:	bf00      	nop
 8005334:	3724      	adds	r7, #36	; 0x24
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800
 8005344:	40013800 	.word	0x40013800
 8005348:	40020000 	.word	0x40020000
 800534c:	40020400 	.word	0x40020400
 8005350:	40020800 	.word	0x40020800
 8005354:	40020c00 	.word	0x40020c00
 8005358:	40021000 	.word	0x40021000
 800535c:	40021400 	.word	0x40021400
 8005360:	40021800 	.word	0x40021800
 8005364:	40021c00 	.word	0x40021c00
 8005368:	40013c00 	.word	0x40013c00

0800536c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	807b      	strh	r3, [r7, #2]
 8005378:	4613      	mov	r3, r2
 800537a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800537c:	787b      	ldrb	r3, [r7, #1]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005382:	887a      	ldrh	r2, [r7, #2]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005388:	e003      	b.n	8005392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800538a:	887b      	ldrh	r3, [r7, #2]
 800538c:	041a      	lsls	r2, r3, #16
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	619a      	str	r2, [r3, #24]
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800539e:	b480      	push	{r7}
 80053a0:	b085      	sub	sp, #20
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053b0:	887a      	ldrh	r2, [r7, #2]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4013      	ands	r3, r2
 80053b6:	041a      	lsls	r2, r3, #16
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	43d9      	mvns	r1, r3
 80053bc:	887b      	ldrh	r3, [r7, #2]
 80053be:	400b      	ands	r3, r1
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	619a      	str	r2, [r3, #24]
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e12b      	b.n	800563e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fc f9aa 	bl	8001754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2224      	movs	r2, #36	; 0x24
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0201 	bic.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005426:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005436:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005438:	f001 ffd0 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800543c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4a81      	ldr	r2, [pc, #516]	; (8005648 <HAL_I2C_Init+0x274>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d807      	bhi.n	8005458 <HAL_I2C_Init+0x84>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4a80      	ldr	r2, [pc, #512]	; (800564c <HAL_I2C_Init+0x278>)
 800544c:	4293      	cmp	r3, r2
 800544e:	bf94      	ite	ls
 8005450:	2301      	movls	r3, #1
 8005452:	2300      	movhi	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	e006      	b.n	8005466 <HAL_I2C_Init+0x92>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4a7d      	ldr	r2, [pc, #500]	; (8005650 <HAL_I2C_Init+0x27c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	bf94      	ite	ls
 8005460:	2301      	movls	r3, #1
 8005462:	2300      	movhi	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e0e7      	b.n	800563e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4a78      	ldr	r2, [pc, #480]	; (8005654 <HAL_I2C_Init+0x280>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	0c9b      	lsrs	r3, r3, #18
 8005478:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	4a6a      	ldr	r2, [pc, #424]	; (8005648 <HAL_I2C_Init+0x274>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d802      	bhi.n	80054a8 <HAL_I2C_Init+0xd4>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	3301      	adds	r3, #1
 80054a6:	e009      	b.n	80054bc <HAL_I2C_Init+0xe8>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	4a69      	ldr	r2, [pc, #420]	; (8005658 <HAL_I2C_Init+0x284>)
 80054b4:	fba2 2303 	umull	r2, r3, r2, r3
 80054b8:	099b      	lsrs	r3, r3, #6
 80054ba:	3301      	adds	r3, #1
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	430b      	orrs	r3, r1
 80054c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	495c      	ldr	r1, [pc, #368]	; (8005648 <HAL_I2C_Init+0x274>)
 80054d8:	428b      	cmp	r3, r1
 80054da:	d819      	bhi.n	8005510 <HAL_I2C_Init+0x13c>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	1e59      	subs	r1, r3, #1
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80054ea:	1c59      	adds	r1, r3, #1
 80054ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054f0:	400b      	ands	r3, r1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <HAL_I2C_Init+0x138>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	1e59      	subs	r1, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	fbb1 f3f3 	udiv	r3, r1, r3
 8005504:	3301      	adds	r3, #1
 8005506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800550a:	e051      	b.n	80055b0 <HAL_I2C_Init+0x1dc>
 800550c:	2304      	movs	r3, #4
 800550e:	e04f      	b.n	80055b0 <HAL_I2C_Init+0x1dc>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d111      	bne.n	800553c <HAL_I2C_Init+0x168>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1e58      	subs	r0, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6859      	ldr	r1, [r3, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	440b      	add	r3, r1
 8005526:	fbb0 f3f3 	udiv	r3, r0, r3
 800552a:	3301      	adds	r3, #1
 800552c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005530:	2b00      	cmp	r3, #0
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	e012      	b.n	8005562 <HAL_I2C_Init+0x18e>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	1e58      	subs	r0, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	0099      	lsls	r1, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005552:	3301      	adds	r3, #1
 8005554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf0c      	ite	eq
 800555c:	2301      	moveq	r3, #1
 800555e:	2300      	movne	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_I2C_Init+0x196>
 8005566:	2301      	movs	r3, #1
 8005568:	e022      	b.n	80055b0 <HAL_I2C_Init+0x1dc>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10e      	bne.n	8005590 <HAL_I2C_Init+0x1bc>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1e58      	subs	r0, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6859      	ldr	r1, [r3, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	440b      	add	r3, r1
 8005580:	fbb0 f3f3 	udiv	r3, r0, r3
 8005584:	3301      	adds	r3, #1
 8005586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800558a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558e:	e00f      	b.n	80055b0 <HAL_I2C_Init+0x1dc>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	1e58      	subs	r0, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6859      	ldr	r1, [r3, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	440b      	add	r3, r1
 800559e:	0099      	lsls	r1, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055a6:	3301      	adds	r3, #1
 80055a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	6809      	ldr	r1, [r1, #0]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69da      	ldr	r2, [r3, #28]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6911      	ldr	r1, [r2, #16]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	68d2      	ldr	r2, [r2, #12]
 80055ea:	4311      	orrs	r1, r2
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	430b      	orrs	r3, r1
 80055f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695a      	ldr	r2, [r3, #20]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	000186a0 	.word	0x000186a0
 800564c:	001e847f 	.word	0x001e847f
 8005650:	003d08ff 	.word	0x003d08ff
 8005654:	431bde83 	.word	0x431bde83
 8005658:	10624dd3 	.word	0x10624dd3

0800565c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af02      	add	r7, sp, #8
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	461a      	mov	r2, r3
 8005668:	460b      	mov	r3, r1
 800566a:	817b      	strh	r3, [r7, #10]
 800566c:	4613      	mov	r3, r2
 800566e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005670:	f7fc fcac 	bl	8001fcc <HAL_GetTick>
 8005674:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b20      	cmp	r3, #32
 8005680:	f040 80e0 	bne.w	8005844 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	2319      	movs	r3, #25
 800568a:	2201      	movs	r2, #1
 800568c:	4970      	ldr	r1, [pc, #448]	; (8005850 <HAL_I2C_Master_Transmit+0x1f4>)
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f964 	bl	800595c <I2C_WaitOnFlagUntilTimeout>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800569a:	2302      	movs	r3, #2
 800569c:	e0d3      	b.n	8005846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_I2C_Master_Transmit+0x50>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e0cc      	b.n	8005846 <HAL_I2C_Master_Transmit+0x1ea>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d007      	beq.n	80056d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0201 	orr.w	r2, r2, #1
 80056d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2221      	movs	r2, #33	; 0x21
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2210      	movs	r2, #16
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	893a      	ldrh	r2, [r7, #8]
 8005702:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4a50      	ldr	r2, [pc, #320]	; (8005854 <HAL_I2C_Master_Transmit+0x1f8>)
 8005712:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005714:	8979      	ldrh	r1, [r7, #10]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	6a3a      	ldr	r2, [r7, #32]
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f89c 	bl	8005858 <I2C_MasterRequestWrite>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e08d      	b.n	8005846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572a:	2300      	movs	r3, #0
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005740:	e066      	b.n	8005810 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	6a39      	ldr	r1, [r7, #32]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f9de 	bl	8005b08 <I2C_WaitOnTXEFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	2b04      	cmp	r3, #4
 8005758:	d107      	bne.n	800576a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005768:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e06b      	b.n	8005846 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d11b      	bne.n	80057e4 <HAL_I2C_Master_Transmit+0x188>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d017      	beq.n	80057e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	6a39      	ldr	r1, [r7, #32]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f9ce 	bl	8005b8a <I2C_WaitOnBTFFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00d      	beq.n	8005810 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d107      	bne.n	800580c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800580a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e01a      	b.n	8005846 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005814:	2b00      	cmp	r3, #0
 8005816:	d194      	bne.n	8005742 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	e000      	b.n	8005846 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005844:	2302      	movs	r3, #2
  }
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	00100002 	.word	0x00100002
 8005854:	ffff0000 	.word	0xffff0000

08005858 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af02      	add	r7, sp, #8
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	607a      	str	r2, [r7, #4]
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	460b      	mov	r3, r1
 8005866:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b08      	cmp	r3, #8
 8005872:	d006      	beq.n	8005882 <I2C_MasterRequestWrite+0x2a>
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d003      	beq.n	8005882 <I2C_MasterRequestWrite+0x2a>
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005880:	d108      	bne.n	8005894 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	e00b      	b.n	80058ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	2b12      	cmp	r3, #18
 800589a:	d107      	bne.n	80058ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 f84f 	bl	800595c <I2C_WaitOnFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00d      	beq.n	80058e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d2:	d103      	bne.n	80058dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e035      	b.n	800594c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e8:	d108      	bne.n	80058fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058ea:	897b      	ldrh	r3, [r7, #10]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058f8:	611a      	str	r2, [r3, #16]
 80058fa:	e01b      	b.n	8005934 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058fc:	897b      	ldrh	r3, [r7, #10]
 80058fe:	11db      	asrs	r3, r3, #7
 8005900:	b2db      	uxtb	r3, r3
 8005902:	f003 0306 	and.w	r3, r3, #6
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f063 030f 	orn	r3, r3, #15
 800590c:	b2da      	uxtb	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	490e      	ldr	r1, [pc, #56]	; (8005954 <I2C_MasterRequestWrite+0xfc>)
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 f875 	bl	8005a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e010      	b.n	800594c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800592a:	897b      	ldrh	r3, [r7, #10]
 800592c:	b2da      	uxtb	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	4907      	ldr	r1, [pc, #28]	; (8005958 <I2C_MasterRequestWrite+0x100>)
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f865 	bl	8005a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	00010008 	.word	0x00010008
 8005958:	00010002 	.word	0x00010002

0800595c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800596c:	e025      	b.n	80059ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005974:	d021      	beq.n	80059ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005976:	f7fc fb29 	bl	8001fcc <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d302      	bcc.n	800598c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d116      	bne.n	80059ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e023      	b.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	0c1b      	lsrs	r3, r3, #16
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d10d      	bne.n	80059e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	43da      	mvns	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4013      	ands	r3, r2
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	bf0c      	ite	eq
 80059d6:	2301      	moveq	r3, #1
 80059d8:	2300      	movne	r3, #0
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	e00c      	b.n	80059fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	43da      	mvns	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4013      	ands	r3, r2
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bf0c      	ite	eq
 80059f2:	2301      	moveq	r3, #1
 80059f4:	2300      	movne	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d0b6      	beq.n	800596e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	607a      	str	r2, [r7, #4]
 8005a16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a18:	e051      	b.n	8005abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a28:	d123      	bne.n	8005a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f043 0204 	orr.w	r2, r3, #4
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e046      	b.n	8005b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a78:	d021      	beq.n	8005abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7a:	f7fc faa7 	bl	8001fcc <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d302      	bcc.n	8005a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d116      	bne.n	8005abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	f043 0220 	orr.w	r2, r3, #32
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e020      	b.n	8005b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	0c1b      	lsrs	r3, r3, #16
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d10c      	bne.n	8005ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	43da      	mvns	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bf14      	ite	ne
 8005ada:	2301      	movne	r3, #1
 8005adc:	2300      	moveq	r3, #0
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	e00b      	b.n	8005afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	43da      	mvns	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	4013      	ands	r3, r2
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bf14      	ite	ne
 8005af4:	2301      	movne	r3, #1
 8005af6:	2300      	moveq	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d18d      	bne.n	8005a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b14:	e02d      	b.n	8005b72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 f878 	bl	8005c0c <I2C_IsAcknowledgeFailed>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e02d      	b.n	8005b82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d021      	beq.n	8005b72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2e:	f7fc fa4d 	bl	8001fcc <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d302      	bcc.n	8005b44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d116      	bne.n	8005b72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	f043 0220 	orr.w	r2, r3, #32
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e007      	b.n	8005b82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7c:	2b80      	cmp	r3, #128	; 0x80
 8005b7e:	d1ca      	bne.n	8005b16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b96:	e02d      	b.n	8005bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f837 	bl	8005c0c <I2C_IsAcknowledgeFailed>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e02d      	b.n	8005c04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bae:	d021      	beq.n	8005bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb0:	f7fc fa0c 	bl	8001fcc <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d302      	bcc.n	8005bc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d116      	bne.n	8005bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	f043 0220 	orr.w	r2, r3, #32
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e007      	b.n	8005c04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d1ca      	bne.n	8005b98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c22:	d11b      	bne.n	8005c5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	f043 0204 	orr.w	r2, r3, #4
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e000      	b.n	8005c5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e128      	b.n	8005ed0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d109      	bne.n	8005c9e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a90      	ldr	r2, [pc, #576]	; (8005ed8 <HAL_I2S_Init+0x26c>)
 8005c96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7fb fda3 	bl	80017e4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6812      	ldr	r2, [r2, #0]
 8005cb0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005cb4:	f023 030f 	bic.w	r3, r3, #15
 8005cb8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d060      	beq.n	8005d8c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d102      	bne.n	8005cd8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005cd2:	2310      	movs	r3, #16
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	e001      	b.n	8005cdc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005cd8:	2320      	movs	r3, #32
 8005cda:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d802      	bhi.n	8005cea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005cea:	2001      	movs	r0, #1
 8005cec:	f001 fcb2 	bl	8007654 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cf0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cfa:	d125      	bne.n	8005d48 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d010      	beq.n	8005d26 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	461a      	mov	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d20:	3305      	adds	r3, #5
 8005d22:	613b      	str	r3, [r7, #16]
 8005d24:	e01f      	b.n	8005d66 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	461a      	mov	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d42:	3305      	adds	r3, #5
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	e00e      	b.n	8005d66 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	461a      	mov	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d62:	3305      	adds	r3, #5
 8005d64:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	4a5c      	ldr	r2, [pc, #368]	; (8005edc <HAL_I2S_Init+0x270>)
 8005d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6e:	08db      	lsrs	r3, r3, #3
 8005d70:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	085b      	lsrs	r3, r3, #1
 8005d82:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	e003      	b.n	8005d94 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d902      	bls.n	8005da0 <HAL_I2S_Init+0x134>
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	2bff      	cmp	r3, #255	; 0xff
 8005d9e:	d907      	bls.n	8005db0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da4:	f043 0210 	orr.w	r2, r3, #16
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e08f      	b.n	8005ed0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	ea42 0103 	orr.w	r1, r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005dce:	f023 030f 	bic.w	r3, r3, #15
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6851      	ldr	r1, [r2, #4]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6892      	ldr	r2, [r2, #8]
 8005dda:	4311      	orrs	r1, r2
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	68d2      	ldr	r2, [r2, #12]
 8005de0:	4311      	orrs	r1, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6992      	ldr	r2, [r2, #24]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005df2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d161      	bne.n	8005ec0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a38      	ldr	r2, [pc, #224]	; (8005ee0 <HAL_I2S_Init+0x274>)
 8005e00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a37      	ldr	r2, [pc, #220]	; (8005ee4 <HAL_I2S_Init+0x278>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d101      	bne.n	8005e10 <HAL_I2S_Init+0x1a4>
 8005e0c:	4b36      	ldr	r3, [pc, #216]	; (8005ee8 <HAL_I2S_Init+0x27c>)
 8005e0e:	e001      	b.n	8005e14 <HAL_I2S_Init+0x1a8>
 8005e10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6812      	ldr	r2, [r2, #0]
 8005e1a:	4932      	ldr	r1, [pc, #200]	; (8005ee4 <HAL_I2S_Init+0x278>)
 8005e1c:	428a      	cmp	r2, r1
 8005e1e:	d101      	bne.n	8005e24 <HAL_I2S_Init+0x1b8>
 8005e20:	4a31      	ldr	r2, [pc, #196]	; (8005ee8 <HAL_I2S_Init+0x27c>)
 8005e22:	e001      	b.n	8005e28 <HAL_I2S_Init+0x1bc>
 8005e24:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005e28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005e2c:	f023 030f 	bic.w	r3, r3, #15
 8005e30:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a2b      	ldr	r2, [pc, #172]	; (8005ee4 <HAL_I2S_Init+0x278>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d101      	bne.n	8005e40 <HAL_I2S_Init+0x1d4>
 8005e3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ee8 <HAL_I2S_Init+0x27c>)
 8005e3e:	e001      	b.n	8005e44 <HAL_I2S_Init+0x1d8>
 8005e40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e44:	2202      	movs	r2, #2
 8005e46:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a25      	ldr	r2, [pc, #148]	; (8005ee4 <HAL_I2S_Init+0x278>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d101      	bne.n	8005e56 <HAL_I2S_Init+0x1ea>
 8005e52:	4b25      	ldr	r3, [pc, #148]	; (8005ee8 <HAL_I2S_Init+0x27c>)
 8005e54:	e001      	b.n	8005e5a <HAL_I2S_Init+0x1ee>
 8005e56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e66:	d003      	beq.n	8005e70 <HAL_I2S_Init+0x204>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d103      	bne.n	8005e78 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	e001      	b.n	8005e7c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e86:	4313      	orrs	r3, r2
 8005e88:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e90:	4313      	orrs	r3, r2
 8005e92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	897b      	ldrh	r3, [r7, #10]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ea8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a0d      	ldr	r2, [pc, #52]	; (8005ee4 <HAL_I2S_Init+0x278>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d101      	bne.n	8005eb8 <HAL_I2S_Init+0x24c>
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <HAL_I2S_Init+0x27c>)
 8005eb6:	e001      	b.n	8005ebc <HAL_I2S_Init+0x250>
 8005eb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ebc:	897a      	ldrh	r2, [r7, #10]
 8005ebe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3720      	adds	r7, #32
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	08006397 	.word	0x08006397
 8005edc:	cccccccd 	.word	0xcccccccd
 8005ee0:	0800651d 	.word	0x0800651d
 8005ee4:	40003800 	.word	0x40003800
 8005ee8:	40003400 	.word	0x40003400

08005eec <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f00:	d004      	beq.n	8005f0c <HAL_I2S_DMAStop+0x20>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 80d1 	bne.w	80060ae <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00f      	beq.n	8005f34 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fc fa6f 	bl	80023fc <HAL_DMA_Abort>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d007      	beq.n	8005f34 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f28:	f043 0208 	orr.w	r2, r3, #8
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005f34:	2364      	movs	r3, #100	; 0x64
 8005f36:	2201      	movs	r2, #1
 8005f38:	2102      	movs	r1, #2
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fab5 	bl	80064aa <I2S_WaitFlagStateUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005f5e:	2364      	movs	r3, #100	; 0x64
 8005f60:	2200      	movs	r2, #0
 8005f62:	2180      	movs	r1, #128	; 0x80
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 faa0 	bl	80064aa <I2S_WaitFlagStateUntilTimeout>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00b      	beq.n	8005f88 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f74:	f043 0201 	orr.w	r2, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69da      	ldr	r2, [r3, #28]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f96:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0202 	bic.w	r2, r2, #2
 8005fb4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b05      	cmp	r3, #5
 8005fc0:	f040 8165 	bne.w	800628e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00f      	beq.n	8005fec <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fc fa13 	bl	80023fc <HAL_DMA_Abort>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d007      	beq.n	8005fec <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe0:	f043 0208 	orr.w	r2, r3, #8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a8a      	ldr	r2, [pc, #552]	; (800621c <HAL_I2S_DMAStop+0x330>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d101      	bne.n	8005ffa <HAL_I2S_DMAStop+0x10e>
 8005ff6:	4b8a      	ldr	r3, [pc, #552]	; (8006220 <HAL_I2S_DMAStop+0x334>)
 8005ff8:	e001      	b.n	8005ffe <HAL_I2S_DMAStop+0x112>
 8005ffa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4985      	ldr	r1, [pc, #532]	; (800621c <HAL_I2S_DMAStop+0x330>)
 8006006:	428b      	cmp	r3, r1
 8006008:	d101      	bne.n	800600e <HAL_I2S_DMAStop+0x122>
 800600a:	4b85      	ldr	r3, [pc, #532]	; (8006220 <HAL_I2S_DMAStop+0x334>)
 800600c:	e001      	b.n	8006012 <HAL_I2S_DMAStop+0x126>
 800600e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006016:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006018:	2300      	movs	r3, #0
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a7e      	ldr	r2, [pc, #504]	; (800621c <HAL_I2S_DMAStop+0x330>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d101      	bne.n	800602a <HAL_I2S_DMAStop+0x13e>
 8006026:	4b7e      	ldr	r3, [pc, #504]	; (8006220 <HAL_I2S_DMAStop+0x334>)
 8006028:	e001      	b.n	800602e <HAL_I2S_DMAStop+0x142>
 800602a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	613b      	str	r3, [r7, #16]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a79      	ldr	r2, [pc, #484]	; (800621c <HAL_I2S_DMAStop+0x330>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d101      	bne.n	8006040 <HAL_I2S_DMAStop+0x154>
 800603c:	4b78      	ldr	r3, [pc, #480]	; (8006220 <HAL_I2S_DMAStop+0x334>)
 800603e:	e001      	b.n	8006044 <HAL_I2S_DMAStop+0x158>
 8006040:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a73      	ldr	r2, [pc, #460]	; (800621c <HAL_I2S_DMAStop+0x330>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d101      	bne.n	8006058 <HAL_I2S_DMAStop+0x16c>
 8006054:	4b72      	ldr	r3, [pc, #456]	; (8006220 <HAL_I2S_DMAStop+0x334>)
 8006056:	e001      	b.n	800605c <HAL_I2S_DMAStop+0x170>
 8006058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	496e      	ldr	r1, [pc, #440]	; (800621c <HAL_I2S_DMAStop+0x330>)
 8006064:	428b      	cmp	r3, r1
 8006066:	d101      	bne.n	800606c <HAL_I2S_DMAStop+0x180>
 8006068:	4b6d      	ldr	r3, [pc, #436]	; (8006220 <HAL_I2S_DMAStop+0x334>)
 800606a:	e001      	b.n	8006070 <HAL_I2S_DMAStop+0x184>
 800606c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006070:	f022 0201 	bic.w	r2, r2, #1
 8006074:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10c      	bne.n	8006098 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006082:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006096:	e0fa      	b.n	800628e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a5f      	ldr	r2, [pc, #380]	; (800621c <HAL_I2S_DMAStop+0x330>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d101      	bne.n	80060a6 <HAL_I2S_DMAStop+0x1ba>
 80060a2:	4b5f      	ldr	r3, [pc, #380]	; (8006220 <HAL_I2S_DMAStop+0x334>)
 80060a4:	e001      	b.n	80060aa <HAL_I2S_DMAStop+0x1be>
 80060a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060aa:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80060ac:	e0ef      	b.n	800628e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b6:	d005      	beq.n	80060c4 <HAL_I2S_DMAStop+0x1d8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c0:	f040 80e5 	bne.w	800628e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00f      	beq.n	80060ec <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fc f993 	bl	80023fc <HAL_DMA_Abort>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d007      	beq.n	80060ec <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e0:	f043 0208 	orr.w	r2, r3, #8
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b05      	cmp	r3, #5
 80060f6:	f040 809a 	bne.w	800622e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00f      	beq.n	8006122 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	4618      	mov	r0, r3
 8006108:	f7fc f978 	bl	80023fc <HAL_DMA_Abort>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d007      	beq.n	8006122 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006116:	f043 0208 	orr.w	r2, r3, #8
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8006122:	f7fb ff53 	bl	8001fcc <HAL_GetTick>
 8006126:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006128:	e012      	b.n	8006150 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800612a:	f7fb ff4f 	bl	8001fcc <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b64      	cmp	r3, #100	; 0x64
 8006136:	d90b      	bls.n	8006150 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	f043 0201 	orr.w	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a31      	ldr	r2, [pc, #196]	; (800621c <HAL_I2S_DMAStop+0x330>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d101      	bne.n	800615e <HAL_I2S_DMAStop+0x272>
 800615a:	4b31      	ldr	r3, [pc, #196]	; (8006220 <HAL_I2S_DMAStop+0x334>)
 800615c:	e001      	b.n	8006162 <HAL_I2S_DMAStop+0x276>
 800615e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b02      	cmp	r3, #2
 800616a:	d1de      	bne.n	800612a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800616c:	e012      	b.n	8006194 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800616e:	f7fb ff2d 	bl	8001fcc <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b64      	cmp	r3, #100	; 0x64
 800617a:	d90b      	bls.n	8006194 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006180:	f043 0201 	orr.w	r2, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a20      	ldr	r2, [pc, #128]	; (800621c <HAL_I2S_DMAStop+0x330>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d101      	bne.n	80061a2 <HAL_I2S_DMAStop+0x2b6>
 800619e:	4b20      	ldr	r3, [pc, #128]	; (8006220 <HAL_I2S_DMAStop+0x334>)
 80061a0:	e001      	b.n	80061a6 <HAL_I2S_DMAStop+0x2ba>
 80061a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ac:	2b80      	cmp	r3, #128	; 0x80
 80061ae:	d0de      	beq.n	800616e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a19      	ldr	r2, [pc, #100]	; (800621c <HAL_I2S_DMAStop+0x330>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d101      	bne.n	80061be <HAL_I2S_DMAStop+0x2d2>
 80061ba:	4b19      	ldr	r3, [pc, #100]	; (8006220 <HAL_I2S_DMAStop+0x334>)
 80061bc:	e001      	b.n	80061c2 <HAL_I2S_DMAStop+0x2d6>
 80061be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4914      	ldr	r1, [pc, #80]	; (800621c <HAL_I2S_DMAStop+0x330>)
 80061ca:	428b      	cmp	r3, r1
 80061cc:	d101      	bne.n	80061d2 <HAL_I2S_DMAStop+0x2e6>
 80061ce:	4b14      	ldr	r3, [pc, #80]	; (8006220 <HAL_I2S_DMAStop+0x334>)
 80061d0:	e001      	b.n	80061d6 <HAL_I2S_DMAStop+0x2ea>
 80061d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061da:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a0d      	ldr	r2, [pc, #52]	; (800621c <HAL_I2S_DMAStop+0x330>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d101      	bne.n	80061ee <HAL_I2S_DMAStop+0x302>
 80061ea:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <HAL_I2S_DMAStop+0x334>)
 80061ec:	e001      	b.n	80061f2 <HAL_I2S_DMAStop+0x306>
 80061ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a07      	ldr	r2, [pc, #28]	; (800621c <HAL_I2S_DMAStop+0x330>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d101      	bne.n	8006206 <HAL_I2S_DMAStop+0x31a>
 8006202:	4b07      	ldr	r3, [pc, #28]	; (8006220 <HAL_I2S_DMAStop+0x334>)
 8006204:	e001      	b.n	800620a <HAL_I2S_DMAStop+0x31e>
 8006206:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4902      	ldr	r1, [pc, #8]	; (800621c <HAL_I2S_DMAStop+0x330>)
 8006212:	428b      	cmp	r3, r1
 8006214:	d106      	bne.n	8006224 <HAL_I2S_DMAStop+0x338>
 8006216:	4b02      	ldr	r3, [pc, #8]	; (8006220 <HAL_I2S_DMAStop+0x334>)
 8006218:	e006      	b.n	8006228 <HAL_I2S_DMAStop+0x33c>
 800621a:	bf00      	nop
 800621c:	40003800 	.word	0x40003800
 8006220:	40003400 	.word	0x40003400
 8006224:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006228:	f022 0202 	bic.w	r2, r2, #2
 800622c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800623c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800623e:	2300      	movs	r3, #0
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	60bb      	str	r3, [r7, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	60bb      	str	r3, [r7, #8]
 8006252:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0201 	bic.w	r2, r2, #1
 8006262:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800626c:	d10c      	bne.n	8006288 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006272:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	77fb      	strb	r3, [r7, #31]
 8006286:	e002      	b.n	800628e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8006296:	7ffb      	ldrb	r3, [r7, #31]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3720      	adds	r7, #32
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	881a      	ldrh	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	1c9a      	adds	r2, r3, #2
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10e      	bne.n	8006330 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006320:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff ffb8 	bl	80062a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006330:	bf00      	nop
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634a:	b292      	uxth	r2, r2
 800634c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	1c9a      	adds	r2, r3, #2
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800636a:	b29b      	uxth	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10e      	bne.n	800638e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800637e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff ff93 	bl	80062b4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800638e:	bf00      	nop
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b086      	sub	sp, #24
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d13a      	bne.n	8006428 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d109      	bne.n	80063d0 <I2S_IRQHandler+0x3a>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c6:	2b40      	cmp	r3, #64	; 0x40
 80063c8:	d102      	bne.n	80063d0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff ffb4 	bl	8006338 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d6:	2b40      	cmp	r3, #64	; 0x40
 80063d8:	d126      	bne.n	8006428 <I2S_IRQHandler+0x92>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d11f      	bne.n	8006428 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80063f8:	2300      	movs	r3, #0
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641a:	f043 0202 	orr.w	r2, r3, #2
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff ff50 	bl	80062c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b03      	cmp	r3, #3
 8006432:	d136      	bne.n	80064a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b02      	cmp	r3, #2
 800643c:	d109      	bne.n	8006452 <I2S_IRQHandler+0xbc>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006448:	2b80      	cmp	r3, #128	; 0x80
 800644a:	d102      	bne.n	8006452 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff ff45 	bl	80062dc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f003 0308 	and.w	r3, r3, #8
 8006458:	2b08      	cmp	r3, #8
 800645a:	d122      	bne.n	80064a2 <I2S_IRQHandler+0x10c>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b20      	cmp	r3, #32
 8006468:	d11b      	bne.n	80064a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006478:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006494:	f043 0204 	orr.w	r2, r3, #4
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff ff13 	bl	80062c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064a2:	bf00      	nop
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b086      	sub	sp, #24
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	603b      	str	r3, [r7, #0]
 80064b6:	4613      	mov	r3, r2
 80064b8:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80064ba:	f7fb fd87 	bl	8001fcc <HAL_GetTick>
 80064be:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80064c0:	e018      	b.n	80064f4 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c8:	d014      	beq.n	80064f4 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80064ca:	f7fb fd7f 	bl	8001fcc <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d902      	bls.n	80064e0 <I2S_WaitFlagStateUntilTimeout+0x36>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d109      	bne.n	80064f4 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e00f      	b.n	8006514 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	4013      	ands	r3, r2
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	429a      	cmp	r2, r3
 8006502:	bf0c      	ite	eq
 8006504:	2301      	moveq	r3, #1
 8006506:	2300      	movne	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	461a      	mov	r2, r3
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	429a      	cmp	r2, r3
 8006510:	d1d7      	bne.n	80064c2 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4aa2      	ldr	r2, [pc, #648]	; (80067bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d101      	bne.n	800653a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006536:	4ba2      	ldr	r3, [pc, #648]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006538:	e001      	b.n	800653e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800653a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a9b      	ldr	r2, [pc, #620]	; (80067bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d101      	bne.n	8006558 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006554:	4b9a      	ldr	r3, [pc, #616]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006556:	e001      	b.n	800655c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006558:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006568:	d004      	beq.n	8006574 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f040 8099 	bne.w	80066a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b02      	cmp	r3, #2
 800657c:	d107      	bne.n	800658e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f925 	bl	80067d8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b01      	cmp	r3, #1
 8006596:	d107      	bne.n	80065a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f9c8 	bl	8006938 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ae:	2b40      	cmp	r3, #64	; 0x40
 80065b0:	d13a      	bne.n	8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f003 0320 	and.w	r3, r3, #32
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d035      	beq.n	8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a7e      	ldr	r2, [pc, #504]	; (80067bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d101      	bne.n	80065ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80065c6:	4b7e      	ldr	r3, [pc, #504]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065c8:	e001      	b.n	80065ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80065ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4979      	ldr	r1, [pc, #484]	; (80067bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065d6:	428b      	cmp	r3, r1
 80065d8:	d101      	bne.n	80065de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80065da:	4b79      	ldr	r3, [pc, #484]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065dc:	e001      	b.n	80065e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80065de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661a:	f043 0202 	orr.w	r2, r3, #2
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff fe50 	bl	80062c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	f003 0308 	and.w	r3, r3, #8
 800662e:	2b08      	cmp	r3, #8
 8006630:	f040 80be 	bne.w	80067b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 80b8 	beq.w	80067b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800664e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a59      	ldr	r2, [pc, #356]	; (80067bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d101      	bne.n	800665e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800665a:	4b59      	ldr	r3, [pc, #356]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800665c:	e001      	b.n	8006662 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800665e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4954      	ldr	r1, [pc, #336]	; (80067bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800666a:	428b      	cmp	r3, r1
 800666c:	d101      	bne.n	8006672 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800666e:	4b54      	ldr	r3, [pc, #336]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006670:	e001      	b.n	8006676 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006676:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800667a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800667c:	2300      	movs	r3, #0
 800667e:	60bb      	str	r3, [r7, #8]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	60bb      	str	r3, [r7, #8]
 8006688:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006696:	f043 0204 	orr.w	r2, r3, #4
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff fe12 	bl	80062c8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066a4:	e084      	b.n	80067b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d107      	bne.n	80066c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f8be 	bl	800683c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d107      	bne.n	80066da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f8fd 	bl	80068d4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b40      	cmp	r3, #64	; 0x40
 80066e2:	d12f      	bne.n	8006744 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d02a      	beq.n	8006744 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a2e      	ldr	r2, [pc, #184]	; (80067bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d101      	bne.n	800670c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006708:	4b2d      	ldr	r3, [pc, #180]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800670a:	e001      	b.n	8006710 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800670c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4929      	ldr	r1, [pc, #164]	; (80067bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006718:	428b      	cmp	r3, r1
 800671a:	d101      	bne.n	8006720 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800671c:	4b28      	ldr	r3, [pc, #160]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800671e:	e001      	b.n	8006724 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006724:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006728:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	f043 0202 	orr.w	r2, r3, #2
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7ff fdc2 	bl	80062c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b08      	cmp	r3, #8
 800674c:	d131      	bne.n	80067b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b00      	cmp	r3, #0
 8006756:	d02c      	beq.n	80067b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a17      	ldr	r2, [pc, #92]	; (80067bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d101      	bne.n	8006766 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006762:	4b17      	ldr	r3, [pc, #92]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006764:	e001      	b.n	800676a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006766:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4912      	ldr	r1, [pc, #72]	; (80067bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006772:	428b      	cmp	r3, r1
 8006774:	d101      	bne.n	800677a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006776:	4b12      	ldr	r3, [pc, #72]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006778:	e001      	b.n	800677e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800677a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800677e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006782:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006792:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a0:	f043 0204 	orr.w	r2, r3, #4
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff fd8d 	bl	80062c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067ae:	e000      	b.n	80067b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80067b0:	bf00      	nop
}
 80067b2:	bf00      	nop
 80067b4:	3720      	adds	r7, #32
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40003800 	.word	0x40003800
 80067c0:	40003400 	.word	0x40003400

080067c4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	1c99      	adds	r1, r3, #2
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6251      	str	r1, [r2, #36]	; 0x24
 80067ea:	881a      	ldrh	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d113      	bne.n	8006832 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006818:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d106      	bne.n	8006832 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff ffc9 	bl	80067c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006832:	bf00      	nop
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	1c99      	adds	r1, r3, #2
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6251      	str	r1, [r2, #36]	; 0x24
 800684e:	8819      	ldrh	r1, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1d      	ldr	r2, [pc, #116]	; (80068cc <I2SEx_TxISR_I2SExt+0x90>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d101      	bne.n	800685e <I2SEx_TxISR_I2SExt+0x22>
 800685a:	4b1d      	ldr	r3, [pc, #116]	; (80068d0 <I2SEx_TxISR_I2SExt+0x94>)
 800685c:	e001      	b.n	8006862 <I2SEx_TxISR_I2SExt+0x26>
 800685e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006862:	460a      	mov	r2, r1
 8006864:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d121      	bne.n	80068c2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a12      	ldr	r2, [pc, #72]	; (80068cc <I2SEx_TxISR_I2SExt+0x90>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d101      	bne.n	800688c <I2SEx_TxISR_I2SExt+0x50>
 8006888:	4b11      	ldr	r3, [pc, #68]	; (80068d0 <I2SEx_TxISR_I2SExt+0x94>)
 800688a:	e001      	b.n	8006890 <I2SEx_TxISR_I2SExt+0x54>
 800688c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	490d      	ldr	r1, [pc, #52]	; (80068cc <I2SEx_TxISR_I2SExt+0x90>)
 8006898:	428b      	cmp	r3, r1
 800689a:	d101      	bne.n	80068a0 <I2SEx_TxISR_I2SExt+0x64>
 800689c:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <I2SEx_TxISR_I2SExt+0x94>)
 800689e:	e001      	b.n	80068a4 <I2SEx_TxISR_I2SExt+0x68>
 80068a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d106      	bne.n	80068c2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7ff ff81 	bl	80067c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068c2:	bf00      	nop
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	40003800 	.word	0x40003800
 80068d0:	40003400 	.word	0x40003400

080068d4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68d8      	ldr	r0, [r3, #12]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e6:	1c99      	adds	r1, r3, #2
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	62d1      	str	r1, [r2, #44]	; 0x2c
 80068ec:	b282      	uxth	r2, r0
 80068ee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006902:	b29b      	uxth	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d113      	bne.n	8006930 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006916:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff ff4a 	bl	80067c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006930:	bf00      	nop
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a20      	ldr	r2, [pc, #128]	; (80069c8 <I2SEx_RxISR_I2SExt+0x90>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d101      	bne.n	800694e <I2SEx_RxISR_I2SExt+0x16>
 800694a:	4b20      	ldr	r3, [pc, #128]	; (80069cc <I2SEx_RxISR_I2SExt+0x94>)
 800694c:	e001      	b.n	8006952 <I2SEx_RxISR_I2SExt+0x1a>
 800694e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006952:	68d8      	ldr	r0, [r3, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006958:	1c99      	adds	r1, r3, #2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800695e:	b282      	uxth	r2, r0
 8006960:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006974:	b29b      	uxth	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d121      	bne.n	80069be <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a12      	ldr	r2, [pc, #72]	; (80069c8 <I2SEx_RxISR_I2SExt+0x90>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d101      	bne.n	8006988 <I2SEx_RxISR_I2SExt+0x50>
 8006984:	4b11      	ldr	r3, [pc, #68]	; (80069cc <I2SEx_RxISR_I2SExt+0x94>)
 8006986:	e001      	b.n	800698c <I2SEx_RxISR_I2SExt+0x54>
 8006988:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	490d      	ldr	r1, [pc, #52]	; (80069c8 <I2SEx_RxISR_I2SExt+0x90>)
 8006994:	428b      	cmp	r3, r1
 8006996:	d101      	bne.n	800699c <I2SEx_RxISR_I2SExt+0x64>
 8006998:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <I2SEx_RxISR_I2SExt+0x94>)
 800699a:	e001      	b.n	80069a0 <I2SEx_RxISR_I2SExt+0x68>
 800699c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069a4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d106      	bne.n	80069be <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff ff03 	bl	80067c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	40003800 	.word	0x40003800
 80069cc:	40003400 	.word	0x40003400

080069d0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e034      	b.n	8006a4c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80069ea:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f245 5255 	movw	r2, #21845	; 0x5555
 80069f4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6852      	ldr	r2, [r2, #4]
 80069fe:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6892      	ldr	r2, [r2, #8]
 8006a08:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006a0a:	f7fb fadf 	bl	8001fcc <HAL_GetTick>
 8006a0e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a10:	e00f      	b.n	8006a32 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006a12:	f7fb fadb 	bl	8001fcc <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b31      	cmp	r3, #49	; 0x31
 8006a1e:	d908      	bls.n	8006a32 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e00c      	b.n	8006a4c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e8      	bne.n	8006a12 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006a48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006a64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e264      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d075      	beq.n	8006b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a92:	4ba3      	ldr	r3, [pc, #652]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 030c 	and.w	r3, r3, #12
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d00c      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a9e:	4ba0      	ldr	r3, [pc, #640]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aa6:	2b08      	cmp	r3, #8
 8006aa8:	d112      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aaa:	4b9d      	ldr	r3, [pc, #628]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ab6:	d10b      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ab8:	4b99      	ldr	r3, [pc, #612]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d05b      	beq.n	8006b7c <HAL_RCC_OscConfig+0x108>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d157      	bne.n	8006b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e23f      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad8:	d106      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x74>
 8006ada:	4b91      	ldr	r3, [pc, #580]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a90      	ldr	r2, [pc, #576]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	e01d      	b.n	8006b24 <HAL_RCC_OscConfig+0xb0>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006af0:	d10c      	bne.n	8006b0c <HAL_RCC_OscConfig+0x98>
 8006af2:	4b8b      	ldr	r3, [pc, #556]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a8a      	ldr	r2, [pc, #552]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	4b88      	ldr	r3, [pc, #544]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a87      	ldr	r2, [pc, #540]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e00b      	b.n	8006b24 <HAL_RCC_OscConfig+0xb0>
 8006b0c:	4b84      	ldr	r3, [pc, #528]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a83      	ldr	r2, [pc, #524]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	4b81      	ldr	r3, [pc, #516]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a80      	ldr	r2, [pc, #512]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d013      	beq.n	8006b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b2c:	f7fb fa4e 	bl	8001fcc <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b34:	f7fb fa4a 	bl	8001fcc <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b64      	cmp	r3, #100	; 0x64
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e204      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b46:	4b76      	ldr	r3, [pc, #472]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0f0      	beq.n	8006b34 <HAL_RCC_OscConfig+0xc0>
 8006b52:	e014      	b.n	8006b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b54:	f7fb fa3a 	bl	8001fcc <HAL_GetTick>
 8006b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b5c:	f7fb fa36 	bl	8001fcc <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b64      	cmp	r3, #100	; 0x64
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e1f0      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b6e:	4b6c      	ldr	r3, [pc, #432]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1f0      	bne.n	8006b5c <HAL_RCC_OscConfig+0xe8>
 8006b7a:	e000      	b.n	8006b7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d063      	beq.n	8006c52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b8a:	4b65      	ldr	r3, [pc, #404]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 030c 	and.w	r3, r3, #12
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00b      	beq.n	8006bae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b96:	4b62      	ldr	r3, [pc, #392]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d11c      	bne.n	8006bdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ba2:	4b5f      	ldr	r3, [pc, #380]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d116      	bne.n	8006bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bae:	4b5c      	ldr	r3, [pc, #368]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x152>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d001      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e1c4      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc6:	4b56      	ldr	r3, [pc, #344]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	4952      	ldr	r1, [pc, #328]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bda:	e03a      	b.n	8006c52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d020      	beq.n	8006c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006be4:	4b4f      	ldr	r3, [pc, #316]	; (8006d24 <HAL_RCC_OscConfig+0x2b0>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bea:	f7fb f9ef 	bl	8001fcc <HAL_GetTick>
 8006bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bf0:	e008      	b.n	8006c04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bf2:	f7fb f9eb 	bl	8001fcc <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e1a5      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c04:	4b46      	ldr	r3, [pc, #280]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0f0      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c10:	4b43      	ldr	r3, [pc, #268]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	4940      	ldr	r1, [pc, #256]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	600b      	str	r3, [r1, #0]
 8006c24:	e015      	b.n	8006c52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c26:	4b3f      	ldr	r3, [pc, #252]	; (8006d24 <HAL_RCC_OscConfig+0x2b0>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2c:	f7fb f9ce 	bl	8001fcc <HAL_GetTick>
 8006c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c34:	f7fb f9ca 	bl	8001fcc <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e184      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c46:	4b36      	ldr	r3, [pc, #216]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f0      	bne.n	8006c34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d030      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d016      	beq.n	8006c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c66:	4b30      	ldr	r3, [pc, #192]	; (8006d28 <HAL_RCC_OscConfig+0x2b4>)
 8006c68:	2201      	movs	r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c6c:	f7fb f9ae 	bl	8001fcc <HAL_GetTick>
 8006c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c74:	f7fb f9aa 	bl	8001fcc <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e164      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c86:	4b26      	ldr	r3, [pc, #152]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0f0      	beq.n	8006c74 <HAL_RCC_OscConfig+0x200>
 8006c92:	e015      	b.n	8006cc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c94:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <HAL_RCC_OscConfig+0x2b4>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c9a:	f7fb f997 	bl	8001fcc <HAL_GetTick>
 8006c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca0:	e008      	b.n	8006cb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ca2:	f7fb f993 	bl	8001fcc <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e14d      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cb4:	4b1a      	ldr	r3, [pc, #104]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1f0      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 80a0 	beq.w	8006e0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cd2:	4b13      	ldr	r3, [pc, #76]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10f      	bne.n	8006cfe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	4b0f      	ldr	r3, [pc, #60]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	4a0e      	ldr	r2, [pc, #56]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cec:	6413      	str	r3, [r2, #64]	; 0x40
 8006cee:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <HAL_RCC_OscConfig+0x2ac>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	60bb      	str	r3, [r7, #8]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cfe:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <HAL_RCC_OscConfig+0x2b8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d121      	bne.n	8006d4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d0a:	4b08      	ldr	r3, [pc, #32]	; (8006d2c <HAL_RCC_OscConfig+0x2b8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a07      	ldr	r2, [pc, #28]	; (8006d2c <HAL_RCC_OscConfig+0x2b8>)
 8006d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d16:	f7fb f959 	bl	8001fcc <HAL_GetTick>
 8006d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1c:	e011      	b.n	8006d42 <HAL_RCC_OscConfig+0x2ce>
 8006d1e:	bf00      	nop
 8006d20:	40023800 	.word	0x40023800
 8006d24:	42470000 	.word	0x42470000
 8006d28:	42470e80 	.word	0x42470e80
 8006d2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d30:	f7fb f94c 	bl	8001fcc <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e106      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d42:	4b85      	ldr	r3, [pc, #532]	; (8006f58 <HAL_RCC_OscConfig+0x4e4>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0f0      	beq.n	8006d30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d106      	bne.n	8006d64 <HAL_RCC_OscConfig+0x2f0>
 8006d56:	4b81      	ldr	r3, [pc, #516]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5a:	4a80      	ldr	r2, [pc, #512]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006d5c:	f043 0301 	orr.w	r3, r3, #1
 8006d60:	6713      	str	r3, [r2, #112]	; 0x70
 8006d62:	e01c      	b.n	8006d9e <HAL_RCC_OscConfig+0x32a>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	2b05      	cmp	r3, #5
 8006d6a:	d10c      	bne.n	8006d86 <HAL_RCC_OscConfig+0x312>
 8006d6c:	4b7b      	ldr	r3, [pc, #492]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d70:	4a7a      	ldr	r2, [pc, #488]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006d72:	f043 0304 	orr.w	r3, r3, #4
 8006d76:	6713      	str	r3, [r2, #112]	; 0x70
 8006d78:	4b78      	ldr	r3, [pc, #480]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7c:	4a77      	ldr	r2, [pc, #476]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	6713      	str	r3, [r2, #112]	; 0x70
 8006d84:	e00b      	b.n	8006d9e <HAL_RCC_OscConfig+0x32a>
 8006d86:	4b75      	ldr	r3, [pc, #468]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8a:	4a74      	ldr	r2, [pc, #464]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006d8c:	f023 0301 	bic.w	r3, r3, #1
 8006d90:	6713      	str	r3, [r2, #112]	; 0x70
 8006d92:	4b72      	ldr	r3, [pc, #456]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d96:	4a71      	ldr	r2, [pc, #452]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006d98:	f023 0304 	bic.w	r3, r3, #4
 8006d9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d015      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da6:	f7fb f911 	bl	8001fcc <HAL_GetTick>
 8006daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dac:	e00a      	b.n	8006dc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dae:	f7fb f90d 	bl	8001fcc <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d901      	bls.n	8006dc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e0c5      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dc4:	4b65      	ldr	r3, [pc, #404]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0ee      	beq.n	8006dae <HAL_RCC_OscConfig+0x33a>
 8006dd0:	e014      	b.n	8006dfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dd2:	f7fb f8fb 	bl	8001fcc <HAL_GetTick>
 8006dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dd8:	e00a      	b.n	8006df0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dda:	f7fb f8f7 	bl	8001fcc <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e0af      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006df0:	4b5a      	ldr	r3, [pc, #360]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1ee      	bne.n	8006dda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d105      	bne.n	8006e0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e02:	4b56      	ldr	r3, [pc, #344]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	4a55      	ldr	r2, [pc, #340]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 809b 	beq.w	8006f4e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e18:	4b50      	ldr	r3, [pc, #320]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f003 030c 	and.w	r3, r3, #12
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d05c      	beq.n	8006ede <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d141      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e2c:	4b4c      	ldr	r3, [pc, #304]	; (8006f60 <HAL_RCC_OscConfig+0x4ec>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e32:	f7fb f8cb 	bl	8001fcc <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e38:	e008      	b.n	8006e4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e3a:	f7fb f8c7 	bl	8001fcc <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e081      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e4c:	4b43      	ldr	r3, [pc, #268]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1f0      	bne.n	8006e3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	019b      	lsls	r3, r3, #6
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	085b      	lsrs	r3, r3, #1
 8006e70:	3b01      	subs	r3, #1
 8006e72:	041b      	lsls	r3, r3, #16
 8006e74:	431a      	orrs	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	061b      	lsls	r3, r3, #24
 8006e7c:	4937      	ldr	r1, [pc, #220]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e82:	4b37      	ldr	r3, [pc, #220]	; (8006f60 <HAL_RCC_OscConfig+0x4ec>)
 8006e84:	2201      	movs	r2, #1
 8006e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e88:	f7fb f8a0 	bl	8001fcc <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8e:	e008      	b.n	8006ea2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e90:	f7fb f89c 	bl	8001fcc <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e056      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ea2:	4b2e      	ldr	r3, [pc, #184]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0f0      	beq.n	8006e90 <HAL_RCC_OscConfig+0x41c>
 8006eae:	e04e      	b.n	8006f4e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb0:	4b2b      	ldr	r3, [pc, #172]	; (8006f60 <HAL_RCC_OscConfig+0x4ec>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb6:	f7fb f889 	bl	8001fcc <HAL_GetTick>
 8006eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ebc:	e008      	b.n	8006ed0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ebe:	f7fb f885 	bl	8001fcc <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d901      	bls.n	8006ed0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e03f      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed0:	4b22      	ldr	r3, [pc, #136]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1f0      	bne.n	8006ebe <HAL_RCC_OscConfig+0x44a>
 8006edc:	e037      	b.n	8006f4e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d101      	bne.n	8006eea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e032      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006eea:	4b1c      	ldr	r3, [pc, #112]	; (8006f5c <HAL_RCC_OscConfig+0x4e8>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d028      	beq.n	8006f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d121      	bne.n	8006f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d11a      	bne.n	8006f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f20:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d111      	bne.n	8006f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	3b01      	subs	r3, #1
 8006f34:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d107      	bne.n	8006f4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d001      	beq.n	8006f4e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	40007000 	.word	0x40007000
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	42470060 	.word	0x42470060

08006f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e0cc      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f78:	4b68      	ldr	r3, [pc, #416]	; (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d90c      	bls.n	8006fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f86:	4b65      	ldr	r3, [pc, #404]	; (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f8e:	4b63      	ldr	r3, [pc, #396]	; (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d001      	beq.n	8006fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e0b8      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d020      	beq.n	8006fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fb8:	4b59      	ldr	r3, [pc, #356]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	4a58      	ldr	r2, [pc, #352]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0308 	and.w	r3, r3, #8
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fd0:	4b53      	ldr	r3, [pc, #332]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	4a52      	ldr	r2, [pc, #328]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fdc:	4b50      	ldr	r3, [pc, #320]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	494d      	ldr	r1, [pc, #308]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d044      	beq.n	8007084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d107      	bne.n	8007012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007002:	4b47      	ldr	r3, [pc, #284]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d119      	bne.n	8007042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e07f      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d003      	beq.n	8007022 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800701e:	2b03      	cmp	r3, #3
 8007020:	d107      	bne.n	8007032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007022:	4b3f      	ldr	r3, [pc, #252]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e06f      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007032:	4b3b      	ldr	r3, [pc, #236]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e067      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007042:	4b37      	ldr	r3, [pc, #220]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f023 0203 	bic.w	r2, r3, #3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	4934      	ldr	r1, [pc, #208]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	4313      	orrs	r3, r2
 8007052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007054:	f7fa ffba 	bl	8001fcc <HAL_GetTick>
 8007058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800705a:	e00a      	b.n	8007072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800705c:	f7fa ffb6 	bl	8001fcc <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	f241 3288 	movw	r2, #5000	; 0x1388
 800706a:	4293      	cmp	r3, r2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e04f      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007072:	4b2b      	ldr	r3, [pc, #172]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f003 020c 	and.w	r2, r3, #12
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	429a      	cmp	r2, r3
 8007082:	d1eb      	bne.n	800705c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007084:	4b25      	ldr	r3, [pc, #148]	; (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0307 	and.w	r3, r3, #7
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	429a      	cmp	r2, r3
 8007090:	d20c      	bcs.n	80070ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007092:	4b22      	ldr	r3, [pc, #136]	; (800711c <HAL_RCC_ClockConfig+0x1b8>)
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	b2d2      	uxtb	r2, r2
 8007098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800709a:	4b20      	ldr	r3, [pc, #128]	; (800711c <HAL_RCC_ClockConfig+0x1b8>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d001      	beq.n	80070ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e032      	b.n	8007112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d008      	beq.n	80070ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070b8:	4b19      	ldr	r3, [pc, #100]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	4916      	ldr	r1, [pc, #88]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0308 	and.w	r3, r3, #8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070d6:	4b12      	ldr	r3, [pc, #72]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	490e      	ldr	r1, [pc, #56]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070ea:	f000 f889 	bl	8007200 <HAL_RCC_GetSysClockFreq>
 80070ee:	4602      	mov	r2, r0
 80070f0:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	091b      	lsrs	r3, r3, #4
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	490a      	ldr	r1, [pc, #40]	; (8007124 <HAL_RCC_ClockConfig+0x1c0>)
 80070fc:	5ccb      	ldrb	r3, [r1, r3]
 80070fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007102:	4a09      	ldr	r2, [pc, #36]	; (8007128 <HAL_RCC_ClockConfig+0x1c4>)
 8007104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007106:	4b09      	ldr	r3, [pc, #36]	; (800712c <HAL_RCC_ClockConfig+0x1c8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4618      	mov	r0, r3
 800710c:	f7fa fd6c 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	40023c00 	.word	0x40023c00
 8007120:	40023800 	.word	0x40023800
 8007124:	0804e184 	.word	0x0804e184
 8007128:	20000010 	.word	0x20000010
 800712c:	20000014 	.word	0x20000014

08007130 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08c      	sub	sp, #48	; 0x30
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d129      	bne.n	8007196 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8007142:	2300      	movs	r3, #0
 8007144:	61bb      	str	r3, [r7, #24]
 8007146:	4b2b      	ldr	r3, [pc, #172]	; (80071f4 <HAL_RCC_MCOConfig+0xc4>)
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	4a2a      	ldr	r2, [pc, #168]	; (80071f4 <HAL_RCC_MCOConfig+0xc4>)
 800714c:	f043 0301 	orr.w	r3, r3, #1
 8007150:	6313      	str	r3, [r2, #48]	; 0x30
 8007152:	4b28      	ldr	r3, [pc, #160]	; (80071f4 <HAL_RCC_MCOConfig+0xc4>)
 8007154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	61bb      	str	r3, [r7, #24]
 800715c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800715e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007164:	2302      	movs	r3, #2
 8007166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007168:	2303      	movs	r3, #3
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800716c:	2300      	movs	r3, #0
 800716e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007170:	2300      	movs	r3, #0
 8007172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007174:	f107 031c 	add.w	r3, r7, #28
 8007178:	4619      	mov	r1, r3
 800717a:	481f      	ldr	r0, [pc, #124]	; (80071f8 <HAL_RCC_MCOConfig+0xc8>)
 800717c:	f7fd ff5a 	bl	8005034 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007180:	4b1c      	ldr	r3, [pc, #112]	; (80071f4 <HAL_RCC_MCOConfig+0xc4>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8007188:	68b9      	ldr	r1, [r7, #8]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	430b      	orrs	r3, r1
 800718e:	4919      	ldr	r1, [pc, #100]	; (80071f4 <HAL_RCC_MCOConfig+0xc4>)
 8007190:	4313      	orrs	r3, r2
 8007192:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8007194:	e029      	b.n	80071ea <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8007196:	2300      	movs	r3, #0
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	4b16      	ldr	r3, [pc, #88]	; (80071f4 <HAL_RCC_MCOConfig+0xc4>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	4a15      	ldr	r2, [pc, #84]	; (80071f4 <HAL_RCC_MCOConfig+0xc4>)
 80071a0:	f043 0304 	orr.w	r3, r3, #4
 80071a4:	6313      	str	r3, [r2, #48]	; 0x30
 80071a6:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <HAL_RCC_MCOConfig+0xc4>)
 80071a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071aa:	f003 0304 	and.w	r3, r3, #4
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80071b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b8:	2302      	movs	r3, #2
 80071ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071bc:	2303      	movs	r3, #3
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80071c4:	2300      	movs	r3, #0
 80071c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80071c8:	f107 031c 	add.w	r3, r7, #28
 80071cc:	4619      	mov	r1, r3
 80071ce:	480b      	ldr	r0, [pc, #44]	; (80071fc <HAL_RCC_MCOConfig+0xcc>)
 80071d0:	f7fd ff30 	bl	8005034 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80071d4:	4b07      	ldr	r3, [pc, #28]	; (80071f4 <HAL_RCC_MCOConfig+0xc4>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	00d9      	lsls	r1, r3, #3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	430b      	orrs	r3, r1
 80071e4:	4903      	ldr	r1, [pc, #12]	; (80071f4 <HAL_RCC_MCOConfig+0xc4>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	608b      	str	r3, [r1, #8]
}
 80071ea:	bf00      	nop
 80071ec:	3730      	adds	r7, #48	; 0x30
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	40023800 	.word	0x40023800
 80071f8:	40020000 	.word	0x40020000
 80071fc:	40020800 	.word	0x40020800

08007200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007200:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	607b      	str	r3, [r7, #4]
 800720c:	2300      	movs	r3, #0
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	2300      	movs	r3, #0
 8007212:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007218:	4b67      	ldr	r3, [pc, #412]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 030c 	and.w	r3, r3, #12
 8007220:	2b08      	cmp	r3, #8
 8007222:	d00d      	beq.n	8007240 <HAL_RCC_GetSysClockFreq+0x40>
 8007224:	2b08      	cmp	r3, #8
 8007226:	f200 80bd 	bhi.w	80073a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <HAL_RCC_GetSysClockFreq+0x34>
 800722e:	2b04      	cmp	r3, #4
 8007230:	d003      	beq.n	800723a <HAL_RCC_GetSysClockFreq+0x3a>
 8007232:	e0b7      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007234:	4b61      	ldr	r3, [pc, #388]	; (80073bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007236:	60bb      	str	r3, [r7, #8]
       break;
 8007238:	e0b7      	b.n	80073aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800723a:	4b61      	ldr	r3, [pc, #388]	; (80073c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800723c:	60bb      	str	r3, [r7, #8]
      break;
 800723e:	e0b4      	b.n	80073aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007240:	4b5d      	ldr	r3, [pc, #372]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007248:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800724a:	4b5b      	ldr	r3, [pc, #364]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d04d      	beq.n	80072f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007256:	4b58      	ldr	r3, [pc, #352]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	099b      	lsrs	r3, r3, #6
 800725c:	461a      	mov	r2, r3
 800725e:	f04f 0300 	mov.w	r3, #0
 8007262:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007266:	f04f 0100 	mov.w	r1, #0
 800726a:	ea02 0800 	and.w	r8, r2, r0
 800726e:	ea03 0901 	and.w	r9, r3, r1
 8007272:	4640      	mov	r0, r8
 8007274:	4649      	mov	r1, r9
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	014b      	lsls	r3, r1, #5
 8007280:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007284:	0142      	lsls	r2, r0, #5
 8007286:	4610      	mov	r0, r2
 8007288:	4619      	mov	r1, r3
 800728a:	ebb0 0008 	subs.w	r0, r0, r8
 800728e:	eb61 0109 	sbc.w	r1, r1, r9
 8007292:	f04f 0200 	mov.w	r2, #0
 8007296:	f04f 0300 	mov.w	r3, #0
 800729a:	018b      	lsls	r3, r1, #6
 800729c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80072a0:	0182      	lsls	r2, r0, #6
 80072a2:	1a12      	subs	r2, r2, r0
 80072a4:	eb63 0301 	sbc.w	r3, r3, r1
 80072a8:	f04f 0000 	mov.w	r0, #0
 80072ac:	f04f 0100 	mov.w	r1, #0
 80072b0:	00d9      	lsls	r1, r3, #3
 80072b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072b6:	00d0      	lsls	r0, r2, #3
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	eb12 0208 	adds.w	r2, r2, r8
 80072c0:	eb43 0309 	adc.w	r3, r3, r9
 80072c4:	f04f 0000 	mov.w	r0, #0
 80072c8:	f04f 0100 	mov.w	r1, #0
 80072cc:	0259      	lsls	r1, r3, #9
 80072ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80072d2:	0250      	lsls	r0, r2, #9
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4610      	mov	r0, r2
 80072da:	4619      	mov	r1, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	461a      	mov	r2, r3
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	f7f8 ffdc 	bl	80002a0 <__aeabi_uldivmod>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4613      	mov	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e04a      	b.n	8007388 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072f2:	4b31      	ldr	r3, [pc, #196]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	099b      	lsrs	r3, r3, #6
 80072f8:	461a      	mov	r2, r3
 80072fa:	f04f 0300 	mov.w	r3, #0
 80072fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007302:	f04f 0100 	mov.w	r1, #0
 8007306:	ea02 0400 	and.w	r4, r2, r0
 800730a:	ea03 0501 	and.w	r5, r3, r1
 800730e:	4620      	mov	r0, r4
 8007310:	4629      	mov	r1, r5
 8007312:	f04f 0200 	mov.w	r2, #0
 8007316:	f04f 0300 	mov.w	r3, #0
 800731a:	014b      	lsls	r3, r1, #5
 800731c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007320:	0142      	lsls	r2, r0, #5
 8007322:	4610      	mov	r0, r2
 8007324:	4619      	mov	r1, r3
 8007326:	1b00      	subs	r0, r0, r4
 8007328:	eb61 0105 	sbc.w	r1, r1, r5
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	018b      	lsls	r3, r1, #6
 8007336:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800733a:	0182      	lsls	r2, r0, #6
 800733c:	1a12      	subs	r2, r2, r0
 800733e:	eb63 0301 	sbc.w	r3, r3, r1
 8007342:	f04f 0000 	mov.w	r0, #0
 8007346:	f04f 0100 	mov.w	r1, #0
 800734a:	00d9      	lsls	r1, r3, #3
 800734c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007350:	00d0      	lsls	r0, r2, #3
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	1912      	adds	r2, r2, r4
 8007358:	eb45 0303 	adc.w	r3, r5, r3
 800735c:	f04f 0000 	mov.w	r0, #0
 8007360:	f04f 0100 	mov.w	r1, #0
 8007364:	0299      	lsls	r1, r3, #10
 8007366:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800736a:	0290      	lsls	r0, r2, #10
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4610      	mov	r0, r2
 8007372:	4619      	mov	r1, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	461a      	mov	r2, r3
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	f7f8 ff90 	bl	80002a0 <__aeabi_uldivmod>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4613      	mov	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007388:	4b0b      	ldr	r3, [pc, #44]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	0c1b      	lsrs	r3, r3, #16
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	3301      	adds	r3, #1
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a0:	60bb      	str	r3, [r7, #8]
      break;
 80073a2:	e002      	b.n	80073aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073a4:	4b05      	ldr	r3, [pc, #20]	; (80073bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073a6:	60bb      	str	r3, [r7, #8]
      break;
 80073a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073aa:	68bb      	ldr	r3, [r7, #8]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80073b6:	bf00      	nop
 80073b8:	40023800 	.word	0x40023800
 80073bc:	00f42400 	.word	0x00f42400
 80073c0:	007a1200 	.word	0x007a1200

080073c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073c8:	4b03      	ldr	r3, [pc, #12]	; (80073d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80073ca:	681b      	ldr	r3, [r3, #0]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	20000010 	.word	0x20000010

080073dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073e0:	f7ff fff0 	bl	80073c4 <HAL_RCC_GetHCLKFreq>
 80073e4:	4602      	mov	r2, r0
 80073e6:	4b05      	ldr	r3, [pc, #20]	; (80073fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	0a9b      	lsrs	r3, r3, #10
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	4903      	ldr	r1, [pc, #12]	; (8007400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073f2:	5ccb      	ldrb	r3, [r1, r3]
 80073f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40023800 	.word	0x40023800
 8007400:	0804e194 	.word	0x0804e194

08007404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007408:	f7ff ffdc 	bl	80073c4 <HAL_RCC_GetHCLKFreq>
 800740c:	4602      	mov	r2, r0
 800740e:	4b05      	ldr	r3, [pc, #20]	; (8007424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	0b5b      	lsrs	r3, r3, #13
 8007414:	f003 0307 	and.w	r3, r3, #7
 8007418:	4903      	ldr	r1, [pc, #12]	; (8007428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800741a:	5ccb      	ldrb	r3, [r1, r3]
 800741c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007420:	4618      	mov	r0, r3
 8007422:	bd80      	pop	{r7, pc}
 8007424:	40023800 	.word	0x40023800
 8007428:	0804e194 	.word	0x0804e194

0800742c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	220f      	movs	r2, #15
 800743a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800743c:	4b12      	ldr	r3, [pc, #72]	; (8007488 <HAL_RCC_GetClockConfig+0x5c>)
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f003 0203 	and.w	r2, r3, #3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007448:	4b0f      	ldr	r3, [pc, #60]	; (8007488 <HAL_RCC_GetClockConfig+0x5c>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007454:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <HAL_RCC_GetClockConfig+0x5c>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007460:	4b09      	ldr	r3, [pc, #36]	; (8007488 <HAL_RCC_GetClockConfig+0x5c>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	08db      	lsrs	r3, r3, #3
 8007466:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800746e:	4b07      	ldr	r3, [pc, #28]	; (800748c <HAL_RCC_GetClockConfig+0x60>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0207 	and.w	r2, r3, #7
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	601a      	str	r2, [r3, #0]
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40023800 	.word	0x40023800
 800748c:	40023c00 	.word	0x40023c00

08007490 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d105      	bne.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d035      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80074b8:	4b62      	ldr	r3, [pc, #392]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074be:	f7fa fd85 	bl	8001fcc <HAL_GetTick>
 80074c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074c4:	e008      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80074c6:	f7fa fd81 	bl	8001fcc <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d901      	bls.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e0b0      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074d8:	4b5b      	ldr	r3, [pc, #364]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1f0      	bne.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	019a      	lsls	r2, r3, #6
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	071b      	lsls	r3, r3, #28
 80074f0:	4955      	ldr	r1, [pc, #340]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074f8:	4b52      	ldr	r3, [pc, #328]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80074fa:	2201      	movs	r2, #1
 80074fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074fe:	f7fa fd65 	bl	8001fcc <HAL_GetTick>
 8007502:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007504:	e008      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007506:	f7fa fd61 	bl	8001fcc <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	2b02      	cmp	r3, #2
 8007512:	d901      	bls.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e090      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007518:	4b4b      	ldr	r3, [pc, #300]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0f0      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0302 	and.w	r3, r3, #2
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 8083 	beq.w	8007638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	4b44      	ldr	r3, [pc, #272]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	4a43      	ldr	r2, [pc, #268]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800753c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007540:	6413      	str	r3, [r2, #64]	; 0x40
 8007542:	4b41      	ldr	r3, [pc, #260]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800754e:	4b3f      	ldr	r3, [pc, #252]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a3e      	ldr	r2, [pc, #248]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007558:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800755a:	f7fa fd37 	bl	8001fcc <HAL_GetTick>
 800755e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007560:	e008      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007562:	f7fa fd33 	bl	8001fcc <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d901      	bls.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e062      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007574:	4b35      	ldr	r3, [pc, #212]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0f0      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007580:	4b31      	ldr	r3, [pc, #196]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007588:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d02f      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	429a      	cmp	r2, r3
 800759c:	d028      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800759e:	4b2a      	ldr	r3, [pc, #168]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075a8:	4b29      	ldr	r3, [pc, #164]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075ae:	4b28      	ldr	r3, [pc, #160]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80075b4:	4a24      	ldr	r2, [pc, #144]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80075ba:	4b23      	ldr	r3, [pc, #140]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d114      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80075c6:	f7fa fd01 	bl	8001fcc <HAL_GetTick>
 80075ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075cc:	e00a      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075ce:	f7fa fcfd 	bl	8001fcc <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075dc:	4293      	cmp	r3, r2
 80075de:	d901      	bls.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e02a      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075e4:	4b18      	ldr	r3, [pc, #96]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0ee      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075fc:	d10d      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80075fe:	4b12      	ldr	r3, [pc, #72]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800760e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007612:	490d      	ldr	r1, [pc, #52]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007614:	4313      	orrs	r3, r2
 8007616:	608b      	str	r3, [r1, #8]
 8007618:	e005      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800761a:	4b0b      	ldr	r3, [pc, #44]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	4a0a      	ldr	r2, [pc, #40]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007620:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007624:	6093      	str	r3, [r2, #8]
 8007626:	4b08      	ldr	r3, [pc, #32]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007628:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007632:	4905      	ldr	r1, [pc, #20]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007634:	4313      	orrs	r3, r2
 8007636:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	42470068 	.word	0x42470068
 8007648:	40023800 	.word	0x40023800
 800764c:	40007000 	.word	0x40007000
 8007650:	42470e40 	.word	0x42470e40

08007654 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d13e      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007672:	4b23      	ldr	r3, [pc, #140]	; (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d12f      	bne.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007688:	4b1e      	ldr	r3, [pc, #120]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800768a:	617b      	str	r3, [r7, #20]
          break;
 800768c:	e02f      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800768e:	4b1c      	ldr	r3, [pc, #112]	; (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800769a:	d108      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800769c:	4b18      	ldr	r3, [pc, #96]	; (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076a4:	4a18      	ldr	r2, [pc, #96]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80076a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	e007      	b.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80076ae:	4b14      	ldr	r3, [pc, #80]	; (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076b6:	4a15      	ldr	r2, [pc, #84]	; (800770c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80076b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076bc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80076be:	4b10      	ldr	r3, [pc, #64]	; (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80076c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076c4:	099b      	lsrs	r3, r3, #6
 80076c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	fb02 f303 	mul.w	r3, r2, r3
 80076d0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80076d2:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80076d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076d8:	0f1b      	lsrs	r3, r3, #28
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e4:	617b      	str	r3, [r7, #20]
          break;
 80076e6:	e002      	b.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80076e8:	2300      	movs	r3, #0
 80076ea:	617b      	str	r3, [r7, #20]
          break;
 80076ec:	bf00      	nop
        }
      }
      break;
 80076ee:	bf00      	nop
    }
  }
  return frequency;
 80076f0:	697b      	ldr	r3, [r7, #20]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	371c      	adds	r7, #28
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	40023800 	.word	0x40023800
 8007704:	00bb8000 	.word	0x00bb8000
 8007708:	007a1200 	.word	0x007a1200
 800770c:	00f42400 	.word	0x00f42400

08007710 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e022      	b.n	8007768 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d105      	bne.n	800773a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7fa f919 	bl	800196c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2203      	movs	r2, #3
 800773e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f814 	bl	8007770 <HAL_SD_InitCard>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e00a      	b.n	8007768 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007770:	b5b0      	push	{r4, r5, r7, lr}
 8007772:	b08e      	sub	sp, #56	; 0x38
 8007774:	af04      	add	r7, sp, #16
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007778:	2300      	movs	r3, #0
 800777a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800777c:	2300      	movs	r3, #0
 800777e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007780:	2300      	movs	r3, #0
 8007782:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007784:	2300      	movs	r3, #0
 8007786:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007788:	2300      	movs	r3, #0
 800778a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800778c:	2376      	movs	r3, #118	; 0x76
 800778e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681d      	ldr	r5, [r3, #0]
 8007794:	466c      	mov	r4, sp
 8007796:	f107 0314 	add.w	r3, r7, #20
 800779a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800779e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80077a2:	f107 0308 	add.w	r3, r7, #8
 80077a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077a8:	4628      	mov	r0, r5
 80077aa:	f002 fcf5 	bl	800a198 <SDIO_Init>
 80077ae:	4603      	mov	r3, r0
 80077b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80077b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e04c      	b.n	800785a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80077c0:	4b28      	ldr	r3, [pc, #160]	; (8007864 <HAL_SD_InitCard+0xf4>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f002 fd2d 	bl	800a22a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80077d0:	4b24      	ldr	r3, [pc, #144]	; (8007864 <HAL_SD_InitCard+0xf4>)
 80077d2:	2201      	movs	r2, #1
 80077d4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 f804 	bl	80087e4 <SD_PowerON>
 80077dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e02e      	b.n	800785a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 ff25 	bl	800864c <SD_InitCard>
 8007802:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00b      	beq.n	8007822 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e01b      	b.n	800785a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800782a:	4618      	mov	r0, r3
 800782c:	f002 fd90 	bl	800a350 <SDMMC_CmdBlockLength>
 8007830:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00f      	beq.n	8007858 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a0a      	ldr	r2, [pc, #40]	; (8007868 <HAL_SD_InitCard+0xf8>)
 800783e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	431a      	orrs	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3728      	adds	r7, #40	; 0x28
 800785e:	46bd      	mov	sp, r7
 8007860:	bdb0      	pop	{r4, r5, r7, pc}
 8007862:	bf00      	nop
 8007864:	422580a0 	.word	0x422580a0
 8007868:	004005ff 	.word	0x004005ff

0800786c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08c      	sub	sp, #48	; 0x30
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d107      	bne.n	8007894 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007888:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e0c0      	b.n	8007a16 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b01      	cmp	r3, #1
 800789e:	f040 80b9 	bne.w	8007a14 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80078a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	441a      	add	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d907      	bls.n	80078c6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e0a7      	b.n	8007a16 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2203      	movs	r2, #3
 80078ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	6812      	ldr	r2, [r2, #0]
 80078e0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80078e4:	f043 0302 	orr.w	r3, r3, #2
 80078e8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	4a4c      	ldr	r2, [pc, #304]	; (8007a20 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80078f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	4a4b      	ldr	r2, [pc, #300]	; (8007a24 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80078f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fe:	2200      	movs	r2, #0
 8007900:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007906:	2200      	movs	r2, #0
 8007908:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	689a      	ldr	r2, [r3, #8]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3380      	adds	r3, #128	; 0x80
 8007930:	4619      	mov	r1, r3
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	025b      	lsls	r3, r3, #9
 8007938:	089b      	lsrs	r3, r3, #2
 800793a:	f7fa fd07 	bl	800234c <HAL_DMA_Start_IT>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d017      	beq.n	8007974 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007952:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a33      	ldr	r2, [pc, #204]	; (8007a28 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800795a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007960:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e050      	b.n	8007a16 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007974:	4b2d      	ldr	r3, [pc, #180]	; (8007a2c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007976:	2201      	movs	r2, #1
 8007978:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797e:	2b01      	cmp	r3, #1
 8007980:	d002      	beq.n	8007988 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	025b      	lsls	r3, r3, #9
 8007986:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007988:	f04f 33ff 	mov.w	r3, #4294967295
 800798c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	025b      	lsls	r3, r3, #9
 8007992:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007994:	2390      	movs	r3, #144	; 0x90
 8007996:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007998:	2302      	movs	r3, #2
 800799a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800799c:	2300      	movs	r3, #0
 800799e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80079a0:	2301      	movs	r3, #1
 80079a2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f107 0210 	add.w	r2, r7, #16
 80079ac:	4611      	mov	r1, r2
 80079ae:	4618      	mov	r0, r3
 80079b0:	f002 fca2 	bl	800a2f8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d90a      	bls.n	80079d0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2282      	movs	r2, #130	; 0x82
 80079be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079c6:	4618      	mov	r0, r3
 80079c8:	f002 fd06 	bl	800a3d8 <SDMMC_CmdReadMultiBlock>
 80079cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80079ce:	e009      	b.n	80079e4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2281      	movs	r2, #129	; 0x81
 80079d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079dc:	4618      	mov	r0, r3
 80079de:	f002 fcd9 	bl	800a394 <SDMMC_CmdReadSingleBlock>
 80079e2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80079e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d012      	beq.n	8007a10 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a0e      	ldr	r2, [pc, #56]	; (8007a28 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80079f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	431a      	orrs	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e002      	b.n	8007a16 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	e000      	b.n	8007a16 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8007a14:	2302      	movs	r3, #2
  }
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3730      	adds	r7, #48	; 0x30
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	0800845b 	.word	0x0800845b
 8007a24:	080084cd 	.word	0x080084cd
 8007a28:	004005ff 	.word	0x004005ff
 8007a2c:	4225858c 	.word	0x4225858c

08007a30 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08c      	sub	sp, #48	; 0x30
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d107      	bne.n	8007a58 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e0c5      	b.n	8007be4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	f040 80be 	bne.w	8007be2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	441a      	add	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d907      	bls.n	8007a8a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e0ac      	b.n	8007be4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2203      	movs	r2, #3
 8007a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2200      	movs	r2, #0
 8007a98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	6812      	ldr	r2, [r2, #0]
 8007aa4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8007aa8:	f043 0302 	orr.w	r3, r3, #2
 8007aac:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab2:	4a4e      	ldr	r2, [pc, #312]	; (8007bec <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aba:	4a4d      	ldr	r2, [pc, #308]	; (8007bf0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007abc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d002      	beq.n	8007ad4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8007ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad0:	025b      	lsls	r3, r3, #9
 8007ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d90a      	bls.n	8007af0 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	22a0      	movs	r2, #160	; 0xa0
 8007ade:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f002 fcba 	bl	800a460 <SDMMC_CmdWriteMultiBlock>
 8007aec:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007aee:	e009      	b.n	8007b04 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2290      	movs	r2, #144	; 0x90
 8007af4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007afc:	4618      	mov	r0, r3
 8007afe:	f002 fc8d 	bl	800a41c <SDMMC_CmdWriteSingleBlock>
 8007b02:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d012      	beq.n	8007b30 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a39      	ldr	r2, [pc, #228]	; (8007bf4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007b10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e059      	b.n	8007be4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007b30:	4b31      	ldr	r3, [pc, #196]	; (8007bf8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8007b32:	2201      	movs	r2, #1
 8007b34:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3a:	2240      	movs	r2, #64	; 0x40
 8007b3c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007b5e:	68b9      	ldr	r1, [r7, #8]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3380      	adds	r3, #128	; 0x80
 8007b66:	461a      	mov	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	025b      	lsls	r3, r3, #9
 8007b6c:	089b      	lsrs	r3, r3, #2
 8007b6e:	f7fa fbed 	bl	800234c <HAL_DMA_Start_IT>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01c      	beq.n	8007bb2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	6812      	ldr	r2, [r2, #0]
 8007b82:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8007b86:	f023 0302 	bic.w	r3, r3, #2
 8007b8a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a18      	ldr	r2, [pc, #96]	; (8007bf4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007b92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e018      	b.n	8007be4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	025b      	lsls	r3, r3, #9
 8007bbc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007bbe:	2390      	movs	r3, #144	; 0x90
 8007bc0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f107 0210 	add.w	r2, r7, #16
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f002 fb8d 	bl	800a2f8 <SDIO_ConfigData>

      return HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	e000      	b.n	8007be4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8007be2:	2302      	movs	r3, #2
  }
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3730      	adds	r7, #48	; 0x30
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	08008431 	.word	0x08008431
 8007bf0:	080084cd 	.word	0x080084cd
 8007bf4:	004005ff 	.word	0x004005ff
 8007bf8:	4225858c 	.word	0x4225858c

08007bfc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c08:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d008      	beq.n	8007c2a <HAL_SD_IRQHandler+0x2e>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f003 0308 	and.w	r3, r3, #8
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fffd 	bl	8008c22 <SD_Read_IT>
 8007c28:	e165      	b.n	8007ef6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 808f 	beq.w	8007d58 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c42:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	6812      	ldr	r2, [r2, #0]
 8007c4e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8007c52:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007c56:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0201 	bic.w	r2, r2, #1
 8007c66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f003 0308 	and.w	r3, r3, #8
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d039      	beq.n	8007ce6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d104      	bne.n	8007c86 <HAL_SD_IRQHandler+0x8a>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f003 0320 	and.w	r3, r3, #32
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d011      	beq.n	8007caa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f002 fc0a 	bl	800a4a4 <SDMMC_CmdStopTransfer>
 8007c90:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d008      	beq.n	8007caa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f92f 	bl	8007f08 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f240 523a 	movw	r2, #1338	; 0x53a
 8007cb2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d104      	bne.n	8007cd6 <HAL_SD_IRQHandler+0xda>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f003 f878 	bl	800adcc <HAL_SD_RxCpltCallback>
 8007cdc:	e10b      	b.n	8007ef6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f003 f86a 	bl	800adb8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007ce4:	e107      	b.n	8007ef6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 8102 	beq.w	8007ef6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d011      	beq.n	8007d20 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f002 fbcf 	bl	800a4a4 <SDMMC_CmdStopTransfer>
 8007d06:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d008      	beq.n	8007d20 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f8f4 	bl	8007f08 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f040 80e5 	bne.w	8007ef6 <HAL_SD_IRQHandler+0x2fa>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f040 80df 	bne.w	8007ef6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0208 	bic.w	r2, r2, #8
 8007d46:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f003 f831 	bl	800adb8 <HAL_SD_TxCpltCallback>
}
 8007d56:	e0ce      	b.n	8007ef6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d008      	beq.n	8007d78 <HAL_SD_IRQHandler+0x17c>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 ffa7 	bl	8008cc4 <SD_Write_IT>
 8007d76:	e0be      	b.n	8007ef6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d7e:	f240 233a 	movw	r3, #570	; 0x23a
 8007d82:	4013      	ands	r3, r2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 80b6 	beq.w	8007ef6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d005      	beq.n	8007da4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9c:	f043 0202 	orr.w	r2, r3, #2
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db6:	f043 0208 	orr.w	r2, r3, #8
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc4:	f003 0320 	and.w	r3, r3, #32
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d005      	beq.n	8007dd8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd0:	f043 0220 	orr.w	r2, r3, #32
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dde:	f003 0310 	and.w	r3, r3, #16
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d005      	beq.n	8007df2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dea:	f043 0210 	orr.w	r2, r3, #16
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	f043 0208 	orr.w	r2, r3, #8
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f240 723a 	movw	r2, #1850	; 0x73a
 8007e14:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	6812      	ldr	r2, [r2, #0]
 8007e20:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8007e24:	f023 0302 	bic.w	r3, r3, #2
 8007e28:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f002 fb38 	bl	800a4a4 <SDMMC_CmdStopTransfer>
 8007e34:	4602      	mov	r2, r0
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f003 0308 	and.w	r3, r3, #8
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f855 	bl	8007f08 <HAL_SD_ErrorCallback>
}
 8007e5e:	e04a      	b.n	8007ef6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d045      	beq.n	8007ef6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f003 0310 	and.w	r3, r3, #16
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <HAL_SD_IRQHandler+0x282>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f003 0320 	and.w	r3, r3, #32
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d011      	beq.n	8007ea2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e82:	4a1f      	ldr	r2, [pc, #124]	; (8007f00 <HAL_SD_IRQHandler+0x304>)
 8007e84:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fa fb26 	bl	80024dc <HAL_DMA_Abort_IT>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d02f      	beq.n	8007ef6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 fb68 	bl	8008570 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007ea0:	e029      	b.n	8007ef6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d104      	bne.n	8007eb6 <HAL_SD_IRQHandler+0x2ba>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f003 0302 	and.w	r3, r3, #2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d011      	beq.n	8007eda <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eba:	4a12      	ldr	r2, [pc, #72]	; (8007f04 <HAL_SD_IRQHandler+0x308>)
 8007ebc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fa fb0a 	bl	80024dc <HAL_DMA_Abort_IT>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d013      	beq.n	8007ef6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 fb83 	bl	80085de <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007ed8:	e00d      	b.n	8007ef6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f002 ff58 	bl	800ada4 <HAL_SD_AbortCallback>
}
 8007ef4:	e7ff      	b.n	8007ef6 <HAL_SD_IRQHandler+0x2fa>
 8007ef6:	bf00      	nop
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	08008571 	.word	0x08008571
 8007f04:	080085df 	.word	0x080085df

08007f08 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f2a:	0f9b      	lsrs	r3, r3, #30
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f36:	0e9b      	lsrs	r3, r3, #26
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	f003 030f 	and.w	r3, r3, #15
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f48:	0e1b      	lsrs	r3, r3, #24
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	f003 0303 	and.w	r3, r3, #3
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f5a:	0c1b      	lsrs	r3, r3, #16
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f66:	0a1b      	lsrs	r3, r3, #8
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f7c:	0d1b      	lsrs	r3, r3, #20
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f88:	0c1b      	lsrs	r3, r3, #16
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	f003 030f 	and.w	r3, r3, #15
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f9a:	0bdb      	lsrs	r3, r3, #15
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fac:	0b9b      	lsrs	r3, r3, #14
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fbe:	0b5b      	lsrs	r3, r3, #13
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fd0:	0b1b      	lsrs	r3, r3, #12
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d163      	bne.n	80080b4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ff0:	009a      	lsls	r2, r3, #2
 8007ff2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007ffc:	0f92      	lsrs	r2, r2, #30
 8007ffe:	431a      	orrs	r2, r3
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008008:	0edb      	lsrs	r3, r3, #27
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	b2da      	uxtb	r2, r3
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800801a:	0e1b      	lsrs	r3, r3, #24
 800801c:	b2db      	uxtb	r3, r3
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	b2da      	uxtb	r2, r3
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800802c:	0d5b      	lsrs	r3, r3, #21
 800802e:	b2db      	uxtb	r3, r3
 8008030:	f003 0307 	and.w	r3, r3, #7
 8008034:	b2da      	uxtb	r2, r3
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800803e:	0c9b      	lsrs	r3, r3, #18
 8008040:	b2db      	uxtb	r3, r3
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	b2da      	uxtb	r2, r3
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008050:	0bdb      	lsrs	r3, r3, #15
 8008052:	b2db      	uxtb	r3, r3
 8008054:	f003 0307 	and.w	r3, r3, #7
 8008058:	b2da      	uxtb	r2, r3
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	1c5a      	adds	r2, r3, #1
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	7e1b      	ldrb	r3, [r3, #24]
 800806c:	b2db      	uxtb	r3, r3
 800806e:	f003 0307 	and.w	r3, r3, #7
 8008072:	3302      	adds	r3, #2
 8008074:	2201      	movs	r2, #1
 8008076:	fa02 f303 	lsl.w	r3, r2, r3
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800807e:	fb02 f203 	mul.w	r2, r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	7a1b      	ldrb	r3, [r3, #8]
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 030f 	and.w	r3, r3, #15
 8008090:	2201      	movs	r2, #1
 8008092:	409a      	lsls	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80080a0:	0a52      	lsrs	r2, r2, #9
 80080a2:	fb02 f203 	mul.w	r2, r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080b0:	661a      	str	r2, [r3, #96]	; 0x60
 80080b2:	e031      	b.n	8008118 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d11d      	bne.n	80080f8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080c0:	041b      	lsls	r3, r3, #16
 80080c2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ca:	0c1b      	lsrs	r3, r3, #16
 80080cc:	431a      	orrs	r2, r3
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	3301      	adds	r3, #1
 80080d8:	029a      	lsls	r2, r3, #10
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080ec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	661a      	str	r2, [r3, #96]	; 0x60
 80080f6:	e00f      	b.n	8008118 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a58      	ldr	r2, [pc, #352]	; (8008260 <HAL_SD_GetCardCSD+0x344>)
 80080fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008104:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e09d      	b.n	8008254 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800811c:	0b9b      	lsrs	r3, r3, #14
 800811e:	b2db      	uxtb	r3, r3
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	b2da      	uxtb	r2, r3
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800812e:	09db      	lsrs	r3, r3, #7
 8008130:	b2db      	uxtb	r3, r3
 8008132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008136:	b2da      	uxtb	r2, r3
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008140:	b2db      	uxtb	r3, r3
 8008142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008146:	b2da      	uxtb	r2, r3
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008150:	0fdb      	lsrs	r3, r3, #31
 8008152:	b2da      	uxtb	r2, r3
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815c:	0f5b      	lsrs	r3, r3, #29
 800815e:	b2db      	uxtb	r3, r3
 8008160:	f003 0303 	and.w	r3, r3, #3
 8008164:	b2da      	uxtb	r2, r3
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816e:	0e9b      	lsrs	r3, r3, #26
 8008170:	b2db      	uxtb	r3, r3
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	b2da      	uxtb	r2, r3
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008180:	0d9b      	lsrs	r3, r3, #22
 8008182:	b2db      	uxtb	r3, r3
 8008184:	f003 030f 	and.w	r3, r3, #15
 8008188:	b2da      	uxtb	r2, r3
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008192:	0d5b      	lsrs	r3, r3, #21
 8008194:	b2db      	uxtb	r3, r3
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	b2da      	uxtb	r2, r3
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ae:	0c1b      	lsrs	r3, r3, #16
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c2:	0bdb      	lsrs	r3, r3, #15
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d6:	0b9b      	lsrs	r3, r3, #14
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ea:	0b5b      	lsrs	r3, r3, #13
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fe:	0b1b      	lsrs	r3, r3, #12
 8008200:	b2db      	uxtb	r3, r3
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	b2da      	uxtb	r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008212:	0a9b      	lsrs	r3, r3, #10
 8008214:	b2db      	uxtb	r3, r3
 8008216:	f003 0303 	and.w	r3, r3, #3
 800821a:	b2da      	uxtb	r2, r3
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008226:	0a1b      	lsrs	r3, r3, #8
 8008228:	b2db      	uxtb	r3, r3
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	b2da      	uxtb	r2, r3
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823a:	085b      	lsrs	r3, r3, #1
 800823c:	b2db      	uxtb	r3, r3
 800823e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008242:	b2da      	uxtb	r2, r3
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	004005ff 	.word	0x004005ff

08008264 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80082bc:	b5b0      	push	{r4, r5, r7, lr}
 80082be:	b08e      	sub	sp, #56	; 0x38
 80082c0:	af04      	add	r7, sp, #16
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2203      	movs	r2, #3
 80082d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d02e      	beq.n	800833a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082e2:	d106      	bne.n	80082f2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	639a      	str	r2, [r3, #56]	; 0x38
 80082f0:	e029      	b.n	8008346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082f8:	d10a      	bne.n	8008310 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fb28 	bl	8008950 <SD_WideBus_Enable>
 8008300:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	431a      	orrs	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	639a      	str	r2, [r3, #56]	; 0x38
 800830e:	e01a      	b.n	8008346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10a      	bne.n	800832c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fb65 	bl	80089e6 <SD_WideBus_Disable>
 800831c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	431a      	orrs	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	639a      	str	r2, [r3, #56]	; 0x38
 800832a:	e00c      	b.n	8008346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008330:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	639a      	str	r2, [r3, #56]	; 0x38
 8008338:	e005      	b.n	8008346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00b      	beq.n	8008366 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a26      	ldr	r2, [pc, #152]	; (80083ec <HAL_SD_ConfigWideBusOperation+0x130>)
 8008354:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008364:	e01f      	b.n	80083a6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681d      	ldr	r5, [r3, #0]
 800838c:	466c      	mov	r4, sp
 800838e:	f107 0314 	add.w	r3, r7, #20
 8008392:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008396:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800839a:	f107 0308 	add.w	r3, r7, #8
 800839e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083a0:	4628      	mov	r0, r5
 80083a2:	f001 fef9 	bl	800a198 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 ffce 	bl	800a350 <SDMMC_CmdBlockLength>
 80083b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00c      	beq.n	80083d6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a0a      	ldr	r2, [pc, #40]	; (80083ec <HAL_SD_ConfigWideBusOperation+0x130>)
 80083c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80083de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3728      	adds	r7, #40	; 0x28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bdb0      	pop	{r4, r5, r7, pc}
 80083ea:	bf00      	nop
 80083ec:	004005ff 	.word	0x004005ff

080083f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80083fc:	f107 030c 	add.w	r3, r7, #12
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa7c 	bl	8008900 <SD_SendStatus>
 8008408:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	431a      	orrs	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	0a5b      	lsrs	r3, r3, #9
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008426:	693b      	ldr	r3, [r7, #16]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3718      	adds	r7, #24
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800844c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800844e:	bf00      	nop
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008466:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846c:	2b82      	cmp	r3, #130	; 0x82
 800846e:	d111      	bne.n	8008494 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4618      	mov	r0, r3
 8008476:	f002 f815 	bl	800a4a4 <SDMMC_CmdStopTransfer>
 800847a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d008      	beq.n	8008494 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	431a      	orrs	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f7ff fd3a 	bl	8007f08 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f022 0208 	bic.w	r2, r2, #8
 80084a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f240 523a 	movw	r2, #1338	; 0x53a
 80084ac:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f002 fc85 	bl	800adcc <HAL_SD_RxCpltCallback>
#endif
}
 80084c2:	bf00      	nop
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7fa f9aa 	bl	8002834 <HAL_DMA_GetError>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d03e      	beq.n	8008564 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ec:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d002      	beq.n	8008502 <SD_DMAError+0x36>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d12d      	bne.n	800855e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a19      	ldr	r2, [pc, #100]	; (800856c <SD_DMAError+0xa0>)
 8008508:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008518:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008526:	6978      	ldr	r0, [r7, #20]
 8008528:	f7ff ff62 	bl	80083f0 <HAL_SD_GetCardState>
 800852c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2b06      	cmp	r3, #6
 8008532:	d002      	beq.n	800853a <SD_DMAError+0x6e>
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2b05      	cmp	r3, #5
 8008538:	d10a      	bne.n	8008550 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4618      	mov	r0, r3
 8008540:	f001 ffb0 	bl	800a4a4 <SDMMC_CmdStopTransfer>
 8008544:	4602      	mov	r2, r0
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854a:	431a      	orrs	r2, r3
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2200      	movs	r2, #0
 800855c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800855e:	6978      	ldr	r0, [r7, #20]
 8008560:	f7ff fcd2 	bl	8007f08 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008564:	bf00      	nop
 8008566:	3718      	adds	r7, #24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	004005ff 	.word	0x004005ff

08008570 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f240 523a 	movw	r2, #1338	; 0x53a
 8008586:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f7ff ff31 	bl	80083f0 <HAL_SD_GetCardState>
 800858e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2b06      	cmp	r3, #6
 80085a2:	d002      	beq.n	80085aa <SD_DMATxAbort+0x3a>
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2b05      	cmp	r3, #5
 80085a8:	d10a      	bne.n	80085c0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 ff78 	bl	800a4a4 <SDMMC_CmdStopTransfer>
 80085b4:	4602      	mov	r2, r0
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ba:	431a      	orrs	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d103      	bne.n	80085d0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f002 fbeb 	bl	800ada4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80085ce:	e002      	b.n	80085d6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7ff fc99 	bl	8007f08 <HAL_SD_ErrorCallback>
}
 80085d6:	bf00      	nop
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ea:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80085f4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f7ff fefa 	bl	80083f0 <HAL_SD_GetCardState>
 80085fc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b06      	cmp	r3, #6
 8008610:	d002      	beq.n	8008618 <SD_DMARxAbort+0x3a>
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2b05      	cmp	r3, #5
 8008616:	d10a      	bne.n	800862e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4618      	mov	r0, r3
 800861e:	f001 ff41 	bl	800a4a4 <SDMMC_CmdStopTransfer>
 8008622:	4602      	mov	r2, r0
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008628:	431a      	orrs	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008632:	2b00      	cmp	r3, #0
 8008634:	d103      	bne.n	800863e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f002 fbb4 	bl	800ada4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800863c:	e002      	b.n	8008644 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff fc62 	bl	8007f08 <HAL_SD_ErrorCallback>
}
 8008644:	bf00      	nop
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800864c:	b5b0      	push	{r4, r5, r7, lr}
 800864e:	b094      	sub	sp, #80	; 0x50
 8008650:	af04      	add	r7, sp, #16
 8008652:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008654:	2301      	movs	r3, #1
 8008656:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4618      	mov	r0, r3
 800865e:	f001 fdf3 	bl	800a248 <SDIO_GetPowerState>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d102      	bne.n	800866e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008668:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800866c:	e0b6      	b.n	80087dc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008672:	2b03      	cmp	r3, #3
 8008674:	d02f      	beq.n	80086d6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f002 f81c 	bl	800a6b8 <SDMMC_CmdSendCID>
 8008680:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <SD_InitCard+0x40>
    {
      return errorstate;
 8008688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868a:	e0a7      	b.n	80087dc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2100      	movs	r1, #0
 8008692:	4618      	mov	r0, r3
 8008694:	f001 fe1d 	bl	800a2d2 <SDIO_GetResponse>
 8008698:	4602      	mov	r2, r0
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2104      	movs	r1, #4
 80086a4:	4618      	mov	r0, r3
 80086a6:	f001 fe14 	bl	800a2d2 <SDIO_GetResponse>
 80086aa:	4602      	mov	r2, r0
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2108      	movs	r1, #8
 80086b6:	4618      	mov	r0, r3
 80086b8:	f001 fe0b 	bl	800a2d2 <SDIO_GetResponse>
 80086bc:	4602      	mov	r2, r0
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	210c      	movs	r1, #12
 80086c8:	4618      	mov	r0, r3
 80086ca:	f001 fe02 	bl	800a2d2 <SDIO_GetResponse>
 80086ce:	4602      	mov	r2, r0
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d00d      	beq.n	80086fa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f107 020e 	add.w	r2, r7, #14
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f002 f822 	bl	800a732 <SDMMC_CmdSetRelAdd>
 80086ee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80086f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d001      	beq.n	80086fa <SD_InitCard+0xae>
    {
      return errorstate;
 80086f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f8:	e070      	b.n	80087dc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d036      	beq.n	8008770 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008702:	89fb      	ldrh	r3, [r7, #14]
 8008704:	461a      	mov	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008712:	041b      	lsls	r3, r3, #16
 8008714:	4619      	mov	r1, r3
 8008716:	4610      	mov	r0, r2
 8008718:	f001 ffec 	bl	800a6f4 <SDMMC_CmdSendCSD>
 800871c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800871e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008726:	e059      	b.n	80087dc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2100      	movs	r1, #0
 800872e:	4618      	mov	r0, r3
 8008730:	f001 fdcf 	bl	800a2d2 <SDIO_GetResponse>
 8008734:	4602      	mov	r2, r0
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2104      	movs	r1, #4
 8008740:	4618      	mov	r0, r3
 8008742:	f001 fdc6 	bl	800a2d2 <SDIO_GetResponse>
 8008746:	4602      	mov	r2, r0
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2108      	movs	r1, #8
 8008752:	4618      	mov	r0, r3
 8008754:	f001 fdbd 	bl	800a2d2 <SDIO_GetResponse>
 8008758:	4602      	mov	r2, r0
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	210c      	movs	r1, #12
 8008764:	4618      	mov	r0, r3
 8008766:	f001 fdb4 	bl	800a2d2 <SDIO_GetResponse>
 800876a:	4602      	mov	r2, r0
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2104      	movs	r1, #4
 8008776:	4618      	mov	r0, r3
 8008778:	f001 fdab 	bl	800a2d2 <SDIO_GetResponse>
 800877c:	4603      	mov	r3, r0
 800877e:	0d1a      	lsrs	r2, r3, #20
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008784:	f107 0310 	add.w	r3, r7, #16
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7ff fbc6 	bl	8007f1c <HAL_SD_GetCardCSD>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008796:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800879a:	e01f      	b.n	80087dc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6819      	ldr	r1, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a4:	041b      	lsls	r3, r3, #16
 80087a6:	461a      	mov	r2, r3
 80087a8:	f04f 0300 	mov.w	r3, #0
 80087ac:	4608      	mov	r0, r1
 80087ae:	f001 fe9b 	bl	800a4e8 <SDMMC_CmdSelDesel>
 80087b2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80087b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <SD_InitCard+0x172>
  {
    return errorstate;
 80087ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087bc:	e00e      	b.n	80087dc <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681d      	ldr	r5, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	466c      	mov	r4, sp
 80087c6:	f103 0210 	add.w	r2, r3, #16
 80087ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80087cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80087d0:	3304      	adds	r3, #4
 80087d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087d4:	4628      	mov	r0, r5
 80087d6:	f001 fcdf 	bl	800a198 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3740      	adds	r7, #64	; 0x40
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bdb0      	pop	{r4, r5, r7, pc}

080087e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	2300      	movs	r3, #0
 80087f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 fe96 	bl	800a52e <SDMMC_CmdGoIdleState>
 8008802:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <SD_PowerON+0x2a>
  {
    return errorstate;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	e072      	b.n	80088f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4618      	mov	r0, r3
 8008814:	f001 fea9 	bl	800a56a <SDMMC_CmdOperCond>
 8008818:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00d      	beq.n	800883c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4618      	mov	r0, r3
 800882c:	f001 fe7f 	bl	800a52e <SDMMC_CmdGoIdleState>
 8008830:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d004      	beq.n	8008842 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	e05b      	b.n	80088f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008846:	2b01      	cmp	r3, #1
 8008848:	d137      	bne.n	80088ba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2100      	movs	r1, #0
 8008850:	4618      	mov	r0, r3
 8008852:	f001 fea9 	bl	800a5a8 <SDMMC_CmdAppCommand>
 8008856:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d02d      	beq.n	80088ba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800885e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008862:	e047      	b.n	80088f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f001 fe9c 	bl	800a5a8 <SDMMC_CmdAppCommand>
 8008870:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <SD_PowerON+0x98>
    {
      return errorstate;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	e03b      	b.n	80088f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	491e      	ldr	r1, [pc, #120]	; (80088fc <SD_PowerON+0x118>)
 8008882:	4618      	mov	r0, r3
 8008884:	f001 feb2 	bl	800a5ec <SDMMC_CmdAppOperCommand>
 8008888:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008890:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008894:	e02e      	b.n	80088f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2100      	movs	r1, #0
 800889c:	4618      	mov	r0, r3
 800889e:	f001 fd18 	bl	800a2d2 <SDIO_GetResponse>
 80088a2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	0fdb      	lsrs	r3, r3, #31
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d101      	bne.n	80088b0 <SD_PowerON+0xcc>
 80088ac:	2301      	movs	r3, #1
 80088ae:	e000      	b.n	80088b2 <SD_PowerON+0xce>
 80088b0:	2300      	movs	r3, #0
 80088b2:	613b      	str	r3, [r7, #16]

    count++;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	3301      	adds	r3, #1
 80088b8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d802      	bhi.n	80088ca <SD_PowerON+0xe6>
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0cc      	beq.n	8008864 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d902      	bls.n	80088da <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80088d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088d8:	e00c      	b.n	80088f4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	645a      	str	r2, [r3, #68]	; 0x44
 80088ea:	e002      	b.n	80088f2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	c1100000 	.word	0xc1100000

08008900 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008910:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008914:	e018      	b.n	8008948 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800891e:	041b      	lsls	r3, r3, #16
 8008920:	4619      	mov	r1, r3
 8008922:	4610      	mov	r0, r2
 8008924:	f001 ff26 	bl	800a774 <SDMMC_CmdSendStatus>
 8008928:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	e009      	b.n	8008948 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2100      	movs	r1, #0
 800893a:	4618      	mov	r0, r3
 800893c:	f001 fcc9 	bl	800a2d2 <SDIO_GetResponse>
 8008940:	4602      	mov	r2, r0
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008958:	2300      	movs	r3, #0
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	2300      	movs	r3, #0
 800895e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2100      	movs	r1, #0
 8008966:	4618      	mov	r0, r3
 8008968:	f001 fcb3 	bl	800a2d2 <SDIO_GetResponse>
 800896c:	4603      	mov	r3, r0
 800896e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008976:	d102      	bne.n	800897e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800897c:	e02f      	b.n	80089de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800897e:	f107 030c 	add.w	r3, r7, #12
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f879 	bl	8008a7c <SD_FindSCR>
 800898a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	e023      	b.n	80089de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01c      	beq.n	80089da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a8:	041b      	lsls	r3, r3, #16
 80089aa:	4619      	mov	r1, r3
 80089ac:	4610      	mov	r0, r2
 80089ae:	f001 fdfb 	bl	800a5a8 <SDMMC_CmdAppCommand>
 80089b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	e00f      	b.n	80089de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2102      	movs	r1, #2
 80089c4:	4618      	mov	r0, r3
 80089c6:	f001 fe34 	bl	800a632 <SDMMC_CmdBusWidth>
 80089ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	e003      	b.n	80089de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80089d6:	2300      	movs	r3, #0
 80089d8:	e001      	b.n	80089de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80089da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b086      	sub	sp, #24
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80089ee:	2300      	movs	r3, #0
 80089f0:	60fb      	str	r3, [r7, #12]
 80089f2:	2300      	movs	r3, #0
 80089f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2100      	movs	r1, #0
 80089fc:	4618      	mov	r0, r3
 80089fe:	f001 fc68 	bl	800a2d2 <SDIO_GetResponse>
 8008a02:	4603      	mov	r3, r0
 8008a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a0c:	d102      	bne.n	8008a14 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008a0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a12:	e02f      	b.n	8008a74 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008a14:	f107 030c 	add.w	r3, r7, #12
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f82e 	bl	8008a7c <SD_FindSCR>
 8008a20:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	e023      	b.n	8008a74 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d01c      	beq.n	8008a70 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a3e:	041b      	lsls	r3, r3, #16
 8008a40:	4619      	mov	r1, r3
 8008a42:	4610      	mov	r0, r2
 8008a44:	f001 fdb0 	bl	800a5a8 <SDMMC_CmdAppCommand>
 8008a48:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	e00f      	b.n	8008a74 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2100      	movs	r1, #0
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f001 fde9 	bl	800a632 <SDMMC_CmdBusWidth>
 8008a60:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	e003      	b.n	8008a74 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	e001      	b.n	8008a74 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008a70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008a7c:	b590      	push	{r4, r7, lr}
 8008a7e:	b08f      	sub	sp, #60	; 0x3c
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008a86:	f7f9 faa1 	bl	8001fcc <HAL_GetTick>
 8008a8a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008a90:	2300      	movs	r3, #0
 8008a92:	60bb      	str	r3, [r7, #8]
 8008a94:	2300      	movs	r3, #0
 8008a96:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2108      	movs	r1, #8
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f001 fc54 	bl	800a350 <SDMMC_CmdBlockLength>
 8008aa8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	e0b2      	b.n	8008c1a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008abc:	041b      	lsls	r3, r3, #16
 8008abe:	4619      	mov	r1, r3
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	f001 fd71 	bl	800a5a8 <SDMMC_CmdAppCommand>
 8008ac6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad0:	e0a3      	b.n	8008c1a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008ad8:	2308      	movs	r3, #8
 8008ada:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008adc:	2330      	movs	r3, #48	; 0x30
 8008ade:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f107 0210 	add.w	r2, r7, #16
 8008af4:	4611      	mov	r1, r2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f001 fbfe 	bl	800a2f8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f001 fdb8 	bl	800a676 <SDMMC_CmdSendSCR>
 8008b06:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d02a      	beq.n	8008b64 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	e083      	b.n	8008c1a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00f      	beq.n	8008b40 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6819      	ldr	r1, [r3, #0]
 8008b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	f107 0208 	add.w	r2, r7, #8
 8008b2c:	18d4      	adds	r4, r2, r3
 8008b2e:	4608      	mov	r0, r1
 8008b30:	f001 fb5d 	bl	800a1ee <SDIO_ReadFIFO>
 8008b34:	4603      	mov	r3, r0
 8008b36:	6023      	str	r3, [r4, #0]
      index++;
 8008b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b3e:	e006      	b.n	8008b4e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d012      	beq.n	8008b74 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008b4e:	f7f9 fa3d 	bl	8001fcc <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5c:	d102      	bne.n	8008b64 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008b5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b62:	e05a      	b.n	8008c1a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b6a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0cf      	beq.n	8008b12 <SD_FindSCR+0x96>
 8008b72:	e000      	b.n	8008b76 <SD_FindSCR+0xfa>
      break;
 8008b74:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2208      	movs	r2, #8
 8008b8a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008b8c:	2308      	movs	r3, #8
 8008b8e:	e044      	b.n	8008c1a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e037      	b.n	8008c1a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb0:	f003 0320 	and.w	r3, r3, #32
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d005      	beq.n	8008bc4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008bc0:	2320      	movs	r3, #32
 8008bc2:	e02a      	b.n	8008c1a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f240 523a 	movw	r2, #1338	; 0x53a
 8008bcc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	061a      	lsls	r2, r3, #24
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	021b      	lsls	r3, r3, #8
 8008bd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bda:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	0a1b      	lsrs	r3, r3, #8
 8008be0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008be4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	0e1b      	lsrs	r3, r3, #24
 8008bea:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	601a      	str	r2, [r3, #0]
    scr++;
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	061a      	lsls	r2, r3, #24
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	021b      	lsls	r3, r3, #8
 8008bfe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c02:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	0a1b      	lsrs	r3, r3, #8
 8008c08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008c0c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	0e1b      	lsrs	r3, r3, #24
 8008c12:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c16:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	373c      	adds	r7, #60	; 0x3c
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd90      	pop	{r4, r7, pc}

08008c22 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b086      	sub	sp, #24
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c34:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d03f      	beq.n	8008cbc <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	617b      	str	r3, [r7, #20]
 8008c40:	e033      	b.n	8008caa <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f001 fad1 	bl	800a1ee <SDIO_ReadFIFO>
 8008c4c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	0a1b      	lsrs	r3, r3, #8
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	3b01      	subs	r3, #1
 8008c76:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	0c1b      	lsrs	r3, r3, #16
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3301      	adds	r3, #1
 8008c86:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	0e1b      	lsrs	r3, r3, #24
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	617b      	str	r3, [r7, #20]
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	2b07      	cmp	r3, #7
 8008cae:	d9c8      	bls.n	8008c42 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d043      	beq.n	8008d66 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]
 8008ce2:	e037      	b.n	8008d54 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3301      	adds	r3, #1
 8008cee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	021a      	lsls	r2, r3, #8
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	3301      	adds	r3, #1
 8008d06:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	041a      	lsls	r2, r3, #16
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	3b01      	subs	r3, #1
 8008d24:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	061a      	lsls	r2, r3, #24
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3301      	adds	r3, #1
 8008d36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f107 0208 	add.w	r2, r7, #8
 8008d46:	4611      	mov	r1, r2
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f001 fa5d 	bl	800a208 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	3301      	adds	r3, #1
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2b07      	cmp	r3, #7
 8008d58:	d9c4      	bls.n	8008ce4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008d66:	bf00      	nop
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e041      	b.n	8008e04 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d106      	bne.n	8008d9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f839 	bl	8008e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2202      	movs	r2, #2
 8008d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3304      	adds	r3, #4
 8008daa:	4619      	mov	r1, r3
 8008dac:	4610      	mov	r0, r2
 8008dae:	f000 f9d7 	bl	8009160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d001      	beq.n	8008e38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e04e      	b.n	8008ed6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f042 0201 	orr.w	r2, r2, #1
 8008e4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a23      	ldr	r2, [pc, #140]	; (8008ee4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d022      	beq.n	8008ea0 <HAL_TIM_Base_Start_IT+0x80>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e62:	d01d      	beq.n	8008ea0 <HAL_TIM_Base_Start_IT+0x80>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a1f      	ldr	r2, [pc, #124]	; (8008ee8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d018      	beq.n	8008ea0 <HAL_TIM_Base_Start_IT+0x80>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a1e      	ldr	r2, [pc, #120]	; (8008eec <HAL_TIM_Base_Start_IT+0xcc>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d013      	beq.n	8008ea0 <HAL_TIM_Base_Start_IT+0x80>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a1c      	ldr	r2, [pc, #112]	; (8008ef0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d00e      	beq.n	8008ea0 <HAL_TIM_Base_Start_IT+0x80>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a1b      	ldr	r2, [pc, #108]	; (8008ef4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d009      	beq.n	8008ea0 <HAL_TIM_Base_Start_IT+0x80>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a19      	ldr	r2, [pc, #100]	; (8008ef8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d004      	beq.n	8008ea0 <HAL_TIM_Base_Start_IT+0x80>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a18      	ldr	r2, [pc, #96]	; (8008efc <HAL_TIM_Base_Start_IT+0xdc>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d111      	bne.n	8008ec4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f003 0307 	and.w	r3, r3, #7
 8008eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2b06      	cmp	r3, #6
 8008eb0:	d010      	beq.n	8008ed4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f042 0201 	orr.w	r2, r2, #1
 8008ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec2:	e007      	b.n	8008ed4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f042 0201 	orr.w	r2, r2, #1
 8008ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	40010000 	.word	0x40010000
 8008ee8:	40000400 	.word	0x40000400
 8008eec:	40000800 	.word	0x40000800
 8008ef0:	40000c00 	.word	0x40000c00
 8008ef4:	40010400 	.word	0x40010400
 8008ef8:	40014000 	.word	0x40014000
 8008efc:	40001800 	.word	0x40001800

08008f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	f003 0302 	and.w	r3, r3, #2
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d122      	bne.n	8008f5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f003 0302 	and.w	r3, r3, #2
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d11b      	bne.n	8008f5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f06f 0202 	mvn.w	r2, #2
 8008f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d003      	beq.n	8008f4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f8ee 	bl	8009124 <HAL_TIM_IC_CaptureCallback>
 8008f48:	e005      	b.n	8008f56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f8e0 	bl	8009110 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f8f1 	bl	8009138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	f003 0304 	and.w	r3, r3, #4
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	d122      	bne.n	8008fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	f003 0304 	and.w	r3, r3, #4
 8008f74:	2b04      	cmp	r3, #4
 8008f76:	d11b      	bne.n	8008fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f06f 0204 	mvn.w	r2, #4
 8008f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2202      	movs	r2, #2
 8008f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f8c4 	bl	8009124 <HAL_TIM_IC_CaptureCallback>
 8008f9c:	e005      	b.n	8008faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f8b6 	bl	8009110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f8c7 	bl	8009138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	f003 0308 	and.w	r3, r3, #8
 8008fba:	2b08      	cmp	r3, #8
 8008fbc:	d122      	bne.n	8009004 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	f003 0308 	and.w	r3, r3, #8
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d11b      	bne.n	8009004 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f06f 0208 	mvn.w	r2, #8
 8008fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2204      	movs	r2, #4
 8008fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	f003 0303 	and.w	r3, r3, #3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d003      	beq.n	8008ff2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f89a 	bl	8009124 <HAL_TIM_IC_CaptureCallback>
 8008ff0:	e005      	b.n	8008ffe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f88c 	bl	8009110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f89d 	bl	8009138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	f003 0310 	and.w	r3, r3, #16
 800900e:	2b10      	cmp	r3, #16
 8009010:	d122      	bne.n	8009058 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	f003 0310 	and.w	r3, r3, #16
 800901c:	2b10      	cmp	r3, #16
 800901e:	d11b      	bne.n	8009058 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f06f 0210 	mvn.w	r2, #16
 8009028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2208      	movs	r2, #8
 800902e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800903a:	2b00      	cmp	r3, #0
 800903c:	d003      	beq.n	8009046 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f870 	bl	8009124 <HAL_TIM_IC_CaptureCallback>
 8009044:	e005      	b.n	8009052 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f862 	bl	8009110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f873 	bl	8009138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	2b01      	cmp	r3, #1
 8009064:	d10e      	bne.n	8009084 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	2b01      	cmp	r3, #1
 8009072:	d107      	bne.n	8009084 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f06f 0201 	mvn.w	r2, #1
 800907c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7f8 fb24 	bl	80016cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800908e:	2b80      	cmp	r3, #128	; 0x80
 8009090:	d10e      	bne.n	80090b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800909c:	2b80      	cmp	r3, #128	; 0x80
 800909e:	d107      	bne.n	80090b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f902 	bl	80092b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ba:	2b40      	cmp	r3, #64	; 0x40
 80090bc:	d10e      	bne.n	80090dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c8:	2b40      	cmp	r3, #64	; 0x40
 80090ca:	d107      	bne.n	80090dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f838 	bl	800914c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	f003 0320 	and.w	r3, r3, #32
 80090e6:	2b20      	cmp	r3, #32
 80090e8:	d10e      	bne.n	8009108 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f003 0320 	and.w	r3, r3, #32
 80090f4:	2b20      	cmp	r3, #32
 80090f6:	d107      	bne.n	8009108 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f06f 0220 	mvn.w	r2, #32
 8009100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f8cc 	bl	80092a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009108:	bf00      	nop
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a40      	ldr	r2, [pc, #256]	; (8009274 <TIM_Base_SetConfig+0x114>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d013      	beq.n	80091a0 <TIM_Base_SetConfig+0x40>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800917e:	d00f      	beq.n	80091a0 <TIM_Base_SetConfig+0x40>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a3d      	ldr	r2, [pc, #244]	; (8009278 <TIM_Base_SetConfig+0x118>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d00b      	beq.n	80091a0 <TIM_Base_SetConfig+0x40>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a3c      	ldr	r2, [pc, #240]	; (800927c <TIM_Base_SetConfig+0x11c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d007      	beq.n	80091a0 <TIM_Base_SetConfig+0x40>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a3b      	ldr	r2, [pc, #236]	; (8009280 <TIM_Base_SetConfig+0x120>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d003      	beq.n	80091a0 <TIM_Base_SetConfig+0x40>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a3a      	ldr	r2, [pc, #232]	; (8009284 <TIM_Base_SetConfig+0x124>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d108      	bne.n	80091b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a2f      	ldr	r2, [pc, #188]	; (8009274 <TIM_Base_SetConfig+0x114>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d02b      	beq.n	8009212 <TIM_Base_SetConfig+0xb2>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091c0:	d027      	beq.n	8009212 <TIM_Base_SetConfig+0xb2>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a2c      	ldr	r2, [pc, #176]	; (8009278 <TIM_Base_SetConfig+0x118>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d023      	beq.n	8009212 <TIM_Base_SetConfig+0xb2>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a2b      	ldr	r2, [pc, #172]	; (800927c <TIM_Base_SetConfig+0x11c>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d01f      	beq.n	8009212 <TIM_Base_SetConfig+0xb2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a2a      	ldr	r2, [pc, #168]	; (8009280 <TIM_Base_SetConfig+0x120>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d01b      	beq.n	8009212 <TIM_Base_SetConfig+0xb2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a29      	ldr	r2, [pc, #164]	; (8009284 <TIM_Base_SetConfig+0x124>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d017      	beq.n	8009212 <TIM_Base_SetConfig+0xb2>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a28      	ldr	r2, [pc, #160]	; (8009288 <TIM_Base_SetConfig+0x128>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d013      	beq.n	8009212 <TIM_Base_SetConfig+0xb2>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a27      	ldr	r2, [pc, #156]	; (800928c <TIM_Base_SetConfig+0x12c>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d00f      	beq.n	8009212 <TIM_Base_SetConfig+0xb2>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a26      	ldr	r2, [pc, #152]	; (8009290 <TIM_Base_SetConfig+0x130>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d00b      	beq.n	8009212 <TIM_Base_SetConfig+0xb2>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a25      	ldr	r2, [pc, #148]	; (8009294 <TIM_Base_SetConfig+0x134>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d007      	beq.n	8009212 <TIM_Base_SetConfig+0xb2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a24      	ldr	r2, [pc, #144]	; (8009298 <TIM_Base_SetConfig+0x138>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d003      	beq.n	8009212 <TIM_Base_SetConfig+0xb2>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a23      	ldr	r2, [pc, #140]	; (800929c <TIM_Base_SetConfig+0x13c>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d108      	bne.n	8009224 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	4313      	orrs	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	4313      	orrs	r3, r2
 8009230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	689a      	ldr	r2, [r3, #8]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a0a      	ldr	r2, [pc, #40]	; (8009274 <TIM_Base_SetConfig+0x114>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d003      	beq.n	8009258 <TIM_Base_SetConfig+0xf8>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a0c      	ldr	r2, [pc, #48]	; (8009284 <TIM_Base_SetConfig+0x124>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d103      	bne.n	8009260 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	691a      	ldr	r2, [r3, #16]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	615a      	str	r2, [r3, #20]
}
 8009266:	bf00      	nop
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	40010000 	.word	0x40010000
 8009278:	40000400 	.word	0x40000400
 800927c:	40000800 	.word	0x40000800
 8009280:	40000c00 	.word	0x40000c00
 8009284:	40010400 	.word	0x40010400
 8009288:	40014000 	.word	0x40014000
 800928c:	40014400 	.word	0x40014400
 8009290:	40014800 	.word	0x40014800
 8009294:	40001800 	.word	0x40001800
 8009298:	40001c00 	.word	0x40001c00
 800929c:	40002000 	.word	0x40002000

080092a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e03f      	b.n	800935a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d106      	bne.n	80092f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7f8 fc2a 	bl	8001b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2224      	movs	r2, #36	; 0x24
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800930a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fd7b 	bl	8009e08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	691a      	ldr	r2, [r3, #16]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	695a      	ldr	r2, [r3, #20]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68da      	ldr	r2, [r3, #12]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2220      	movs	r2, #32
 800934c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2220      	movs	r2, #32
 8009354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b08a      	sub	sp, #40	; 0x28
 8009366:	af02      	add	r7, sp, #8
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	603b      	str	r3, [r7, #0]
 800936e:	4613      	mov	r3, r2
 8009370:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009372:	2300      	movs	r3, #0
 8009374:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b20      	cmp	r3, #32
 8009380:	d17c      	bne.n	800947c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <HAL_UART_Transmit+0x2c>
 8009388:	88fb      	ldrh	r3, [r7, #6]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e075      	b.n	800947e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009398:	2b01      	cmp	r3, #1
 800939a:	d101      	bne.n	80093a0 <HAL_UART_Transmit+0x3e>
 800939c:	2302      	movs	r3, #2
 800939e:	e06e      	b.n	800947e <HAL_UART_Transmit+0x11c>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2221      	movs	r2, #33	; 0x21
 80093b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80093b6:	f7f8 fe09 	bl	8001fcc <HAL_GetTick>
 80093ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	88fa      	ldrh	r2, [r7, #6]
 80093c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	88fa      	ldrh	r2, [r7, #6]
 80093c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d0:	d108      	bne.n	80093e4 <HAL_UART_Transmit+0x82>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d104      	bne.n	80093e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80093da:	2300      	movs	r3, #0
 80093dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	61bb      	str	r3, [r7, #24]
 80093e2:	e003      	b.n	80093ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093e8:	2300      	movs	r3, #0
 80093ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80093f4:	e02a      	b.n	800944c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2200      	movs	r2, #0
 80093fe:	2180      	movs	r1, #128	; 0x80
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 faf9 	bl	80099f8 <UART_WaitOnFlagUntilTimeout>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800940c:	2303      	movs	r3, #3
 800940e:	e036      	b.n	800947e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10b      	bne.n	800942e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	461a      	mov	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009424:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	3302      	adds	r3, #2
 800942a:	61bb      	str	r3, [r7, #24]
 800942c:	e007      	b.n	800943e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	781a      	ldrb	r2, [r3, #0]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	3301      	adds	r3, #1
 800943c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009442:	b29b      	uxth	r3, r3
 8009444:	3b01      	subs	r3, #1
 8009446:	b29a      	uxth	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009450:	b29b      	uxth	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1cf      	bne.n	80093f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	2200      	movs	r2, #0
 800945e:	2140      	movs	r1, #64	; 0x40
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 fac9 	bl	80099f8 <UART_WaitOnFlagUntilTimeout>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e006      	b.n	800947e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2220      	movs	r2, #32
 8009474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	e000      	b.n	800947e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800947c:	2302      	movs	r3, #2
  }
}
 800947e:	4618      	mov	r0, r3
 8009480:	3720      	adds	r7, #32
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b0ba      	sub	sp, #232	; 0xe8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80094ae:	2300      	movs	r3, #0
 80094b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80094b4:	2300      	movs	r3, #0
 80094b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80094ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094be:	f003 030f 	and.w	r3, r3, #15
 80094c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80094c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10f      	bne.n	80094ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094d2:	f003 0320 	and.w	r3, r3, #32
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d009      	beq.n	80094ee <HAL_UART_IRQHandler+0x66>
 80094da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d003      	beq.n	80094ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fbd3 	bl	8009c92 <UART_Receive_IT>
      return;
 80094ec:	e256      	b.n	800999c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80094ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 80de 	beq.w	80096b4 <HAL_UART_IRQHandler+0x22c>
 80094f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094fc:	f003 0301 	and.w	r3, r3, #1
 8009500:	2b00      	cmp	r3, #0
 8009502:	d106      	bne.n	8009512 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009508:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 80d1 	beq.w	80096b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00b      	beq.n	8009536 <HAL_UART_IRQHandler+0xae>
 800951e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009526:	2b00      	cmp	r3, #0
 8009528:	d005      	beq.n	8009536 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952e:	f043 0201 	orr.w	r2, r3, #1
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800953a:	f003 0304 	and.w	r3, r3, #4
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00b      	beq.n	800955a <HAL_UART_IRQHandler+0xd2>
 8009542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d005      	beq.n	800955a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	f043 0202 	orr.w	r2, r3, #2
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800955a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800955e:	f003 0302 	and.w	r3, r3, #2
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00b      	beq.n	800957e <HAL_UART_IRQHandler+0xf6>
 8009566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d005      	beq.n	800957e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	f043 0204 	orr.w	r2, r3, #4
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800957e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009582:	f003 0308 	and.w	r3, r3, #8
 8009586:	2b00      	cmp	r3, #0
 8009588:	d011      	beq.n	80095ae <HAL_UART_IRQHandler+0x126>
 800958a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800958e:	f003 0320 	and.w	r3, r3, #32
 8009592:	2b00      	cmp	r3, #0
 8009594:	d105      	bne.n	80095a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d005      	beq.n	80095ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	f043 0208 	orr.w	r2, r3, #8
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 81ed 	beq.w	8009992 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095bc:	f003 0320 	and.w	r3, r3, #32
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d008      	beq.n	80095d6 <HAL_UART_IRQHandler+0x14e>
 80095c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095c8:	f003 0320 	and.w	r3, r3, #32
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d002      	beq.n	80095d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fb5e 	bl	8009c92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	695b      	ldr	r3, [r3, #20]
 80095dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e0:	2b40      	cmp	r3, #64	; 0x40
 80095e2:	bf0c      	ite	eq
 80095e4:	2301      	moveq	r3, #1
 80095e6:	2300      	movne	r3, #0
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	f003 0308 	and.w	r3, r3, #8
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d103      	bne.n	8009602 <HAL_UART_IRQHandler+0x17a>
 80095fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d04f      	beq.n	80096a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fa66 	bl	8009ad4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009612:	2b40      	cmp	r3, #64	; 0x40
 8009614:	d141      	bne.n	800969a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3314      	adds	r3, #20
 800961c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009620:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009624:	e853 3f00 	ldrex	r3, [r3]
 8009628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800962c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	3314      	adds	r3, #20
 800963e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009642:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800964e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009652:	e841 2300 	strex	r3, r2, [r1]
 8009656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800965a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1d9      	bne.n	8009616 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009666:	2b00      	cmp	r3, #0
 8009668:	d013      	beq.n	8009692 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966e:	4a7d      	ldr	r2, [pc, #500]	; (8009864 <HAL_UART_IRQHandler+0x3dc>)
 8009670:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009676:	4618      	mov	r0, r3
 8009678:	f7f8 ff30 	bl	80024dc <HAL_DMA_Abort_IT>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d016      	beq.n	80096b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800968c:	4610      	mov	r0, r2
 800968e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009690:	e00e      	b.n	80096b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f99a 	bl	80099cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009698:	e00a      	b.n	80096b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f996 	bl	80099cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096a0:	e006      	b.n	80096b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f992 	bl	80099cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80096ae:	e170      	b.n	8009992 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096b0:	bf00      	nop
    return;
 80096b2:	e16e      	b.n	8009992 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	f040 814a 	bne.w	8009952 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80096be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096c2:	f003 0310 	and.w	r3, r3, #16
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 8143 	beq.w	8009952 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80096cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096d0:	f003 0310 	and.w	r3, r3, #16
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 813c 	beq.w	8009952 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096da:	2300      	movs	r3, #0
 80096dc:	60bb      	str	r3, [r7, #8]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	60bb      	str	r3, [r7, #8]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	60bb      	str	r3, [r7, #8]
 80096ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096fa:	2b40      	cmp	r3, #64	; 0x40
 80096fc:	f040 80b4 	bne.w	8009868 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800970c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009710:	2b00      	cmp	r3, #0
 8009712:	f000 8140 	beq.w	8009996 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800971a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800971e:	429a      	cmp	r2, r3
 8009720:	f080 8139 	bcs.w	8009996 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800972a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009736:	f000 8088 	beq.w	800984a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	330c      	adds	r3, #12
 8009740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009748:	e853 3f00 	ldrex	r3, [r3]
 800974c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009750:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009758:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	330c      	adds	r3, #12
 8009762:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009766:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800976a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009772:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009776:	e841 2300 	strex	r3, r2, [r1]
 800977a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800977e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1d9      	bne.n	800973a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3314      	adds	r3, #20
 800978c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009790:	e853 3f00 	ldrex	r3, [r3]
 8009794:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009798:	f023 0301 	bic.w	r3, r3, #1
 800979c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3314      	adds	r3, #20
 80097a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80097aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80097ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80097b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80097b6:	e841 2300 	strex	r3, r2, [r1]
 80097ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80097bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1e1      	bne.n	8009786 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3314      	adds	r3, #20
 80097c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097cc:	e853 3f00 	ldrex	r3, [r3]
 80097d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80097d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3314      	adds	r3, #20
 80097e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80097e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80097e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80097ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097ee:	e841 2300 	strex	r3, r2, [r1]
 80097f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80097f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1e3      	bne.n	80097c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2220      	movs	r2, #32
 80097fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	330c      	adds	r3, #12
 800980e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009812:	e853 3f00 	ldrex	r3, [r3]
 8009816:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800981a:	f023 0310 	bic.w	r3, r3, #16
 800981e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	330c      	adds	r3, #12
 8009828:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800982c:	65ba      	str	r2, [r7, #88]	; 0x58
 800982e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009830:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009834:	e841 2300 	strex	r3, r2, [r1]
 8009838:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800983a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1e3      	bne.n	8009808 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009844:	4618      	mov	r0, r3
 8009846:	f7f8 fdd9 	bl	80023fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009852:	b29b      	uxth	r3, r3
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	b29b      	uxth	r3, r3
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f8c0 	bl	80099e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009860:	e099      	b.n	8009996 <HAL_UART_IRQHandler+0x50e>
 8009862:	bf00      	nop
 8009864:	08009b9b 	.word	0x08009b9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009870:	b29b      	uxth	r3, r3
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800987c:	b29b      	uxth	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 808b 	beq.w	800999a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009884:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 8086 	beq.w	800999a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	330c      	adds	r3, #12
 8009894:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009898:	e853 3f00 	ldrex	r3, [r3]
 800989c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800989e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	330c      	adds	r3, #12
 80098ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80098b2:	647a      	str	r2, [r7, #68]	; 0x44
 80098b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098ba:	e841 2300 	strex	r3, r2, [r1]
 80098be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1e3      	bne.n	800988e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3314      	adds	r3, #20
 80098cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d0:	e853 3f00 	ldrex	r3, [r3]
 80098d4:	623b      	str	r3, [r7, #32]
   return(result);
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	f023 0301 	bic.w	r3, r3, #1
 80098dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	3314      	adds	r3, #20
 80098e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80098ea:	633a      	str	r2, [r7, #48]	; 0x30
 80098ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098f2:	e841 2300 	strex	r3, r2, [r1]
 80098f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1e3      	bne.n	80098c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2220      	movs	r2, #32
 8009902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	330c      	adds	r3, #12
 8009912:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	e853 3f00 	ldrex	r3, [r3]
 800991a:	60fb      	str	r3, [r7, #12]
   return(result);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f023 0310 	bic.w	r3, r3, #16
 8009922:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	330c      	adds	r3, #12
 800992c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009930:	61fa      	str	r2, [r7, #28]
 8009932:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009934:	69b9      	ldr	r1, [r7, #24]
 8009936:	69fa      	ldr	r2, [r7, #28]
 8009938:	e841 2300 	strex	r3, r2, [r1]
 800993c:	617b      	str	r3, [r7, #20]
   return(result);
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1e3      	bne.n	800990c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009944:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009948:	4619      	mov	r1, r3
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f848 	bl	80099e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009950:	e023      	b.n	800999a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995a:	2b00      	cmp	r3, #0
 800995c:	d009      	beq.n	8009972 <HAL_UART_IRQHandler+0x4ea>
 800995e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f929 	bl	8009bc2 <UART_Transmit_IT>
    return;
 8009970:	e014      	b.n	800999c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00e      	beq.n	800999c <HAL_UART_IRQHandler+0x514>
 800997e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009986:	2b00      	cmp	r3, #0
 8009988:	d008      	beq.n	800999c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f969 	bl	8009c62 <UART_EndTransmit_IT>
    return;
 8009990:	e004      	b.n	800999c <HAL_UART_IRQHandler+0x514>
    return;
 8009992:	bf00      	nop
 8009994:	e002      	b.n	800999c <HAL_UART_IRQHandler+0x514>
      return;
 8009996:	bf00      	nop
 8009998:	e000      	b.n	800999c <HAL_UART_IRQHandler+0x514>
      return;
 800999a:	bf00      	nop
  }
}
 800999c:	37e8      	adds	r7, #232	; 0xe8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop

080099a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	460b      	mov	r3, r1
 80099ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099ec:	bf00      	nop
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b090      	sub	sp, #64	; 0x40
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	603b      	str	r3, [r7, #0]
 8009a04:	4613      	mov	r3, r2
 8009a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a08:	e050      	b.n	8009aac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a10:	d04c      	beq.n	8009aac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d007      	beq.n	8009a28 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a18:	f7f8 fad8 	bl	8001fcc <HAL_GetTick>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d241      	bcs.n	8009aac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	330c      	adds	r3, #12
 8009a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a32:	e853 3f00 	ldrex	r3, [r3]
 8009a36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	330c      	adds	r3, #12
 8009a46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a48:	637a      	str	r2, [r7, #52]	; 0x34
 8009a4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a50:	e841 2300 	strex	r3, r2, [r1]
 8009a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1e5      	bne.n	8009a28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3314      	adds	r3, #20
 8009a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	f023 0301 	bic.w	r3, r3, #1
 8009a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3314      	adds	r3, #20
 8009a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a7c:	623a      	str	r2, [r7, #32]
 8009a7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	69f9      	ldr	r1, [r7, #28]
 8009a82:	6a3a      	ldr	r2, [r7, #32]
 8009a84:	e841 2300 	strex	r3, r2, [r1]
 8009a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1e5      	bne.n	8009a5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2220      	movs	r2, #32
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2220      	movs	r2, #32
 8009a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e00f      	b.n	8009acc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	bf0c      	ite	eq
 8009abc:	2301      	moveq	r3, #1
 8009abe:	2300      	movne	r3, #0
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d09f      	beq.n	8009a0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3740      	adds	r7, #64	; 0x40
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b095      	sub	sp, #84	; 0x54
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	330c      	adds	r3, #12
 8009ae2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae6:	e853 3f00 	ldrex	r3, [r3]
 8009aea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	330c      	adds	r3, #12
 8009afa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009afc:	643a      	str	r2, [r7, #64]	; 0x40
 8009afe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b04:	e841 2300 	strex	r3, r2, [r1]
 8009b08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1e5      	bne.n	8009adc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	3314      	adds	r3, #20
 8009b16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b18:	6a3b      	ldr	r3, [r7, #32]
 8009b1a:	e853 3f00 	ldrex	r3, [r3]
 8009b1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	f023 0301 	bic.w	r3, r3, #1
 8009b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	3314      	adds	r3, #20
 8009b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b38:	e841 2300 	strex	r3, r2, [r1]
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1e5      	bne.n	8009b10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d119      	bne.n	8009b80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	330c      	adds	r3, #12
 8009b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	e853 3f00 	ldrex	r3, [r3]
 8009b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	f023 0310 	bic.w	r3, r3, #16
 8009b62:	647b      	str	r3, [r7, #68]	; 0x44
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	330c      	adds	r3, #12
 8009b6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b6c:	61ba      	str	r2, [r7, #24]
 8009b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b70:	6979      	ldr	r1, [r7, #20]
 8009b72:	69ba      	ldr	r2, [r7, #24]
 8009b74:	e841 2300 	strex	r3, r2, [r1]
 8009b78:	613b      	str	r3, [r7, #16]
   return(result);
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1e5      	bne.n	8009b4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2220      	movs	r2, #32
 8009b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009b8e:	bf00      	nop
 8009b90:	3754      	adds	r7, #84	; 0x54
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b084      	sub	sp, #16
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f7ff ff09 	bl	80099cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bba:	bf00      	nop
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b085      	sub	sp, #20
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b21      	cmp	r3, #33	; 0x21
 8009bd4:	d13e      	bne.n	8009c54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bde:	d114      	bne.n	8009c0a <UART_Transmit_IT+0x48>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d110      	bne.n	8009c0a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a1b      	ldr	r3, [r3, #32]
 8009bec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	881b      	ldrh	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bfc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	1c9a      	adds	r2, r3, #2
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	621a      	str	r2, [r3, #32]
 8009c08:	e008      	b.n	8009c1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	1c59      	adds	r1, r3, #1
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	6211      	str	r1, [r2, #32]
 8009c14:	781a      	ldrb	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	3b01      	subs	r3, #1
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10f      	bne.n	8009c50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68da      	ldr	r2, [r3, #12]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68da      	ldr	r2, [r3, #12]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	e000      	b.n	8009c56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009c54:	2302      	movs	r3, #2
  }
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b082      	sub	sp, #8
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68da      	ldr	r2, [r3, #12]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2220      	movs	r2, #32
 8009c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7ff fe8e 	bl	80099a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b08c      	sub	sp, #48	; 0x30
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b22      	cmp	r3, #34	; 0x22
 8009ca4:	f040 80ab 	bne.w	8009dfe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb0:	d117      	bne.n	8009ce2 <UART_Receive_IT+0x50>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d113      	bne.n	8009ce2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cda:	1c9a      	adds	r2, r3, #2
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	629a      	str	r2, [r3, #40]	; 0x28
 8009ce0:	e026      	b.n	8009d30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf4:	d007      	beq.n	8009d06 <UART_Receive_IT+0x74>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <UART_Receive_IT+0x82>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d106      	bne.n	8009d14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d10:	701a      	strb	r2, [r3, #0]
 8009d12:	e008      	b.n	8009d26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2a:	1c5a      	adds	r2, r3, #1
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	3b01      	subs	r3, #1
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d15a      	bne.n	8009dfa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68da      	ldr	r2, [r3, #12]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f022 0220 	bic.w	r2, r2, #32
 8009d52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68da      	ldr	r2, [r3, #12]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	695a      	ldr	r2, [r3, #20]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f022 0201 	bic.w	r2, r2, #1
 8009d72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2220      	movs	r2, #32
 8009d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d135      	bne.n	8009df0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	330c      	adds	r3, #12
 8009d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	e853 3f00 	ldrex	r3, [r3]
 8009d98:	613b      	str	r3, [r7, #16]
   return(result);
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f023 0310 	bic.w	r3, r3, #16
 8009da0:	627b      	str	r3, [r7, #36]	; 0x24
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	330c      	adds	r3, #12
 8009da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009daa:	623a      	str	r2, [r7, #32]
 8009dac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dae:	69f9      	ldr	r1, [r7, #28]
 8009db0:	6a3a      	ldr	r2, [r7, #32]
 8009db2:	e841 2300 	strex	r3, r2, [r1]
 8009db6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1e5      	bne.n	8009d8a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 0310 	and.w	r3, r3, #16
 8009dc8:	2b10      	cmp	r3, #16
 8009dca:	d10a      	bne.n	8009de2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009dcc:	2300      	movs	r3, #0
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f7ff fdf9 	bl	80099e0 <HAL_UARTEx_RxEventCallback>
 8009dee:	e002      	b.n	8009df6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7ff fde1 	bl	80099b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	e002      	b.n	8009e00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e000      	b.n	8009e00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009dfe:	2302      	movs	r3, #2
  }
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3730      	adds	r7, #48	; 0x30
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	b09f      	sub	sp, #124	; 0x7c
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e1e:	68d9      	ldr	r1, [r3, #12]
 8009e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	ea40 0301 	orr.w	r3, r0, r1
 8009e28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e2c:	689a      	ldr	r2, [r3, #8]
 8009e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	431a      	orrs	r2, r3
 8009e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	431a      	orrs	r2, r3
 8009e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e3c:	69db      	ldr	r3, [r3, #28]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009e4c:	f021 010c 	bic.w	r1, r1, #12
 8009e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e56:	430b      	orrs	r3, r1
 8009e58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e66:	6999      	ldr	r1, [r3, #24]
 8009e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	ea40 0301 	orr.w	r3, r0, r1
 8009e70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	4bc5      	ldr	r3, [pc, #788]	; (800a18c <UART_SetConfig+0x384>)
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d004      	beq.n	8009e86 <UART_SetConfig+0x7e>
 8009e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	4bc3      	ldr	r3, [pc, #780]	; (800a190 <UART_SetConfig+0x388>)
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d103      	bne.n	8009e8e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e86:	f7fd fabd 	bl	8007404 <HAL_RCC_GetPCLK2Freq>
 8009e8a:	6778      	str	r0, [r7, #116]	; 0x74
 8009e8c:	e002      	b.n	8009e94 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e8e:	f7fd faa5 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 8009e92:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e9c:	f040 80b6 	bne.w	800a00c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ea2:	461c      	mov	r4, r3
 8009ea4:	f04f 0500 	mov.w	r5, #0
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	462b      	mov	r3, r5
 8009eac:	1891      	adds	r1, r2, r2
 8009eae:	6439      	str	r1, [r7, #64]	; 0x40
 8009eb0:	415b      	adcs	r3, r3
 8009eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8009eb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009eb8:	1912      	adds	r2, r2, r4
 8009eba:	eb45 0303 	adc.w	r3, r5, r3
 8009ebe:	f04f 0000 	mov.w	r0, #0
 8009ec2:	f04f 0100 	mov.w	r1, #0
 8009ec6:	00d9      	lsls	r1, r3, #3
 8009ec8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ecc:	00d0      	lsls	r0, r2, #3
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	1911      	adds	r1, r2, r4
 8009ed4:	6639      	str	r1, [r7, #96]	; 0x60
 8009ed6:	416b      	adcs	r3, r5
 8009ed8:	667b      	str	r3, [r7, #100]	; 0x64
 8009eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	f04f 0300 	mov.w	r3, #0
 8009ee4:	1891      	adds	r1, r2, r2
 8009ee6:	63b9      	str	r1, [r7, #56]	; 0x38
 8009ee8:	415b      	adcs	r3, r3
 8009eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ef0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009ef4:	f7f6 f9d4 	bl	80002a0 <__aeabi_uldivmod>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	460b      	mov	r3, r1
 8009efc:	4ba5      	ldr	r3, [pc, #660]	; (800a194 <UART_SetConfig+0x38c>)
 8009efe:	fba3 2302 	umull	r2, r3, r3, r2
 8009f02:	095b      	lsrs	r3, r3, #5
 8009f04:	011e      	lsls	r6, r3, #4
 8009f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f08:	461c      	mov	r4, r3
 8009f0a:	f04f 0500 	mov.w	r5, #0
 8009f0e:	4622      	mov	r2, r4
 8009f10:	462b      	mov	r3, r5
 8009f12:	1891      	adds	r1, r2, r2
 8009f14:	6339      	str	r1, [r7, #48]	; 0x30
 8009f16:	415b      	adcs	r3, r3
 8009f18:	637b      	str	r3, [r7, #52]	; 0x34
 8009f1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009f1e:	1912      	adds	r2, r2, r4
 8009f20:	eb45 0303 	adc.w	r3, r5, r3
 8009f24:	f04f 0000 	mov.w	r0, #0
 8009f28:	f04f 0100 	mov.w	r1, #0
 8009f2c:	00d9      	lsls	r1, r3, #3
 8009f2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009f32:	00d0      	lsls	r0, r2, #3
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	1911      	adds	r1, r2, r4
 8009f3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8009f3c:	416b      	adcs	r3, r5
 8009f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	461a      	mov	r2, r3
 8009f46:	f04f 0300 	mov.w	r3, #0
 8009f4a:	1891      	adds	r1, r2, r2
 8009f4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009f4e:	415b      	adcs	r3, r3
 8009f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009f5a:	f7f6 f9a1 	bl	80002a0 <__aeabi_uldivmod>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4b8c      	ldr	r3, [pc, #560]	; (800a194 <UART_SetConfig+0x38c>)
 8009f64:	fba3 1302 	umull	r1, r3, r3, r2
 8009f68:	095b      	lsrs	r3, r3, #5
 8009f6a:	2164      	movs	r1, #100	; 0x64
 8009f6c:	fb01 f303 	mul.w	r3, r1, r3
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	00db      	lsls	r3, r3, #3
 8009f74:	3332      	adds	r3, #50	; 0x32
 8009f76:	4a87      	ldr	r2, [pc, #540]	; (800a194 <UART_SetConfig+0x38c>)
 8009f78:	fba2 2303 	umull	r2, r3, r2, r3
 8009f7c:	095b      	lsrs	r3, r3, #5
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f84:	441e      	add	r6, r3
 8009f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f04f 0100 	mov.w	r1, #0
 8009f8e:	4602      	mov	r2, r0
 8009f90:	460b      	mov	r3, r1
 8009f92:	1894      	adds	r4, r2, r2
 8009f94:	623c      	str	r4, [r7, #32]
 8009f96:	415b      	adcs	r3, r3
 8009f98:	627b      	str	r3, [r7, #36]	; 0x24
 8009f9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f9e:	1812      	adds	r2, r2, r0
 8009fa0:	eb41 0303 	adc.w	r3, r1, r3
 8009fa4:	f04f 0400 	mov.w	r4, #0
 8009fa8:	f04f 0500 	mov.w	r5, #0
 8009fac:	00dd      	lsls	r5, r3, #3
 8009fae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009fb2:	00d4      	lsls	r4, r2, #3
 8009fb4:	4622      	mov	r2, r4
 8009fb6:	462b      	mov	r3, r5
 8009fb8:	1814      	adds	r4, r2, r0
 8009fba:	653c      	str	r4, [r7, #80]	; 0x50
 8009fbc:	414b      	adcs	r3, r1
 8009fbe:	657b      	str	r3, [r7, #84]	; 0x54
 8009fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	f04f 0300 	mov.w	r3, #0
 8009fca:	1891      	adds	r1, r2, r2
 8009fcc:	61b9      	str	r1, [r7, #24]
 8009fce:	415b      	adcs	r3, r3
 8009fd0:	61fb      	str	r3, [r7, #28]
 8009fd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fd6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009fda:	f7f6 f961 	bl	80002a0 <__aeabi_uldivmod>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	4b6c      	ldr	r3, [pc, #432]	; (800a194 <UART_SetConfig+0x38c>)
 8009fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8009fe8:	095b      	lsrs	r3, r3, #5
 8009fea:	2164      	movs	r1, #100	; 0x64
 8009fec:	fb01 f303 	mul.w	r3, r1, r3
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	3332      	adds	r3, #50	; 0x32
 8009ff6:	4a67      	ldr	r2, [pc, #412]	; (800a194 <UART_SetConfig+0x38c>)
 8009ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ffc:	095b      	lsrs	r3, r3, #5
 8009ffe:	f003 0207 	and.w	r2, r3, #7
 800a002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4432      	add	r2, r6
 800a008:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a00a:	e0b9      	b.n	800a180 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a00c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a00e:	461c      	mov	r4, r3
 800a010:	f04f 0500 	mov.w	r5, #0
 800a014:	4622      	mov	r2, r4
 800a016:	462b      	mov	r3, r5
 800a018:	1891      	adds	r1, r2, r2
 800a01a:	6139      	str	r1, [r7, #16]
 800a01c:	415b      	adcs	r3, r3
 800a01e:	617b      	str	r3, [r7, #20]
 800a020:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a024:	1912      	adds	r2, r2, r4
 800a026:	eb45 0303 	adc.w	r3, r5, r3
 800a02a:	f04f 0000 	mov.w	r0, #0
 800a02e:	f04f 0100 	mov.w	r1, #0
 800a032:	00d9      	lsls	r1, r3, #3
 800a034:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a038:	00d0      	lsls	r0, r2, #3
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	eb12 0804 	adds.w	r8, r2, r4
 800a042:	eb43 0905 	adc.w	r9, r3, r5
 800a046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f04f 0100 	mov.w	r1, #0
 800a050:	f04f 0200 	mov.w	r2, #0
 800a054:	f04f 0300 	mov.w	r3, #0
 800a058:	008b      	lsls	r3, r1, #2
 800a05a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a05e:	0082      	lsls	r2, r0, #2
 800a060:	4640      	mov	r0, r8
 800a062:	4649      	mov	r1, r9
 800a064:	f7f6 f91c 	bl	80002a0 <__aeabi_uldivmod>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	4b49      	ldr	r3, [pc, #292]	; (800a194 <UART_SetConfig+0x38c>)
 800a06e:	fba3 2302 	umull	r2, r3, r3, r2
 800a072:	095b      	lsrs	r3, r3, #5
 800a074:	011e      	lsls	r6, r3, #4
 800a076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a078:	4618      	mov	r0, r3
 800a07a:	f04f 0100 	mov.w	r1, #0
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	1894      	adds	r4, r2, r2
 800a084:	60bc      	str	r4, [r7, #8]
 800a086:	415b      	adcs	r3, r3
 800a088:	60fb      	str	r3, [r7, #12]
 800a08a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a08e:	1812      	adds	r2, r2, r0
 800a090:	eb41 0303 	adc.w	r3, r1, r3
 800a094:	f04f 0400 	mov.w	r4, #0
 800a098:	f04f 0500 	mov.w	r5, #0
 800a09c:	00dd      	lsls	r5, r3, #3
 800a09e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a0a2:	00d4      	lsls	r4, r2, #3
 800a0a4:	4622      	mov	r2, r4
 800a0a6:	462b      	mov	r3, r5
 800a0a8:	1814      	adds	r4, r2, r0
 800a0aa:	64bc      	str	r4, [r7, #72]	; 0x48
 800a0ac:	414b      	adcs	r3, r1
 800a0ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f04f 0100 	mov.w	r1, #0
 800a0ba:	f04f 0200 	mov.w	r2, #0
 800a0be:	f04f 0300 	mov.w	r3, #0
 800a0c2:	008b      	lsls	r3, r1, #2
 800a0c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a0c8:	0082      	lsls	r2, r0, #2
 800a0ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a0ce:	f7f6 f8e7 	bl	80002a0 <__aeabi_uldivmod>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4b2f      	ldr	r3, [pc, #188]	; (800a194 <UART_SetConfig+0x38c>)
 800a0d8:	fba3 1302 	umull	r1, r3, r3, r2
 800a0dc:	095b      	lsrs	r3, r3, #5
 800a0de:	2164      	movs	r1, #100	; 0x64
 800a0e0:	fb01 f303 	mul.w	r3, r1, r3
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	3332      	adds	r3, #50	; 0x32
 800a0ea:	4a2a      	ldr	r2, [pc, #168]	; (800a194 <UART_SetConfig+0x38c>)
 800a0ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f0:	095b      	lsrs	r3, r3, #5
 800a0f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0f6:	441e      	add	r6, r3
 800a0f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f04f 0100 	mov.w	r1, #0
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	1894      	adds	r4, r2, r2
 800a106:	603c      	str	r4, [r7, #0]
 800a108:	415b      	adcs	r3, r3
 800a10a:	607b      	str	r3, [r7, #4]
 800a10c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a110:	1812      	adds	r2, r2, r0
 800a112:	eb41 0303 	adc.w	r3, r1, r3
 800a116:	f04f 0400 	mov.w	r4, #0
 800a11a:	f04f 0500 	mov.w	r5, #0
 800a11e:	00dd      	lsls	r5, r3, #3
 800a120:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a124:	00d4      	lsls	r4, r2, #3
 800a126:	4622      	mov	r2, r4
 800a128:	462b      	mov	r3, r5
 800a12a:	eb12 0a00 	adds.w	sl, r2, r0
 800a12e:	eb43 0b01 	adc.w	fp, r3, r1
 800a132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	4618      	mov	r0, r3
 800a138:	f04f 0100 	mov.w	r1, #0
 800a13c:	f04f 0200 	mov.w	r2, #0
 800a140:	f04f 0300 	mov.w	r3, #0
 800a144:	008b      	lsls	r3, r1, #2
 800a146:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a14a:	0082      	lsls	r2, r0, #2
 800a14c:	4650      	mov	r0, sl
 800a14e:	4659      	mov	r1, fp
 800a150:	f7f6 f8a6 	bl	80002a0 <__aeabi_uldivmod>
 800a154:	4602      	mov	r2, r0
 800a156:	460b      	mov	r3, r1
 800a158:	4b0e      	ldr	r3, [pc, #56]	; (800a194 <UART_SetConfig+0x38c>)
 800a15a:	fba3 1302 	umull	r1, r3, r3, r2
 800a15e:	095b      	lsrs	r3, r3, #5
 800a160:	2164      	movs	r1, #100	; 0x64
 800a162:	fb01 f303 	mul.w	r3, r1, r3
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	011b      	lsls	r3, r3, #4
 800a16a:	3332      	adds	r3, #50	; 0x32
 800a16c:	4a09      	ldr	r2, [pc, #36]	; (800a194 <UART_SetConfig+0x38c>)
 800a16e:	fba2 2303 	umull	r2, r3, r2, r3
 800a172:	095b      	lsrs	r3, r3, #5
 800a174:	f003 020f 	and.w	r2, r3, #15
 800a178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4432      	add	r2, r6
 800a17e:	609a      	str	r2, [r3, #8]
}
 800a180:	bf00      	nop
 800a182:	377c      	adds	r7, #124	; 0x7c
 800a184:	46bd      	mov	sp, r7
 800a186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18a:	bf00      	nop
 800a18c:	40011000 	.word	0x40011000
 800a190:	40011400 	.word	0x40011400
 800a194:	51eb851f 	.word	0x51eb851f

0800a198 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a198:	b084      	sub	sp, #16
 800a19a:	b480      	push	{r7}
 800a19c:	b085      	sub	sp, #20
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	f107 001c 	add.w	r0, r7, #28
 800a1a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a1ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a1b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a1b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a1b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a1ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a1be:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a1c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a1d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	431a      	orrs	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	b004      	add	sp, #16
 800a1ec:	4770      	bx	lr

0800a1ee <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b083      	sub	sp, #12
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b082      	sub	sp, #8
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2203      	movs	r2, #3
 800a236:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a238:	2002      	movs	r0, #2
 800a23a:	f7f7 fed3 	bl	8001fe4 <HAL_Delay>
  
  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 0303 	and.w	r3, r3, #3
}
 800a258:	4618      	mov	r0, r3
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a26e:	2300      	movs	r3, #0
 800a270:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a282:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a288:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a28e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	4313      	orrs	r3, r2
 800a294:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a29e:	f023 030f 	bic.w	r3, r3, #15
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	431a      	orrs	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	b2db      	uxtb	r3, r3
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b085      	sub	sp, #20
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	3314      	adds	r3, #20
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
}  
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a302:	2300      	movs	r3, #0
 800a304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	685a      	ldr	r2, [r3, #4]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a31e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a324:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a32a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	4313      	orrs	r3, r2
 800a330:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a336:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	431a      	orrs	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a342:	2300      	movs	r3, #0

}
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a35e:	2310      	movs	r3, #16
 800a360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a362:	2340      	movs	r3, #64	; 0x40
 800a364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a366:	2300      	movs	r3, #0
 800a368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a36a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a36e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a370:	f107 0308 	add.w	r3, r7, #8
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7ff ff74 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a37c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a380:	2110      	movs	r1, #16
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fa44 	bl	800a810 <SDMMC_GetCmdResp1>
 800a388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a38a:	69fb      	ldr	r3, [r7, #28]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3720      	adds	r7, #32
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b088      	sub	sp, #32
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a3a2:	2311      	movs	r3, #17
 800a3a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3a6:	2340      	movs	r3, #64	; 0x40
 800a3a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3b4:	f107 0308 	add.w	r3, r7, #8
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff ff52 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a3c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3c4:	2111      	movs	r1, #17
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fa22 	bl	800a810 <SDMMC_GetCmdResp1>
 800a3cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3ce:	69fb      	ldr	r3, [r7, #28]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3720      	adds	r7, #32
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b088      	sub	sp, #32
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a3e6:	2312      	movs	r3, #18
 800a3e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3ea:	2340      	movs	r3, #64	; 0x40
 800a3ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3f8:	f107 0308 	add.w	r3, r7, #8
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7ff ff30 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a404:	f241 3288 	movw	r2, #5000	; 0x1388
 800a408:	2112      	movs	r1, #18
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fa00 	bl	800a810 <SDMMC_GetCmdResp1>
 800a410:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a412:	69fb      	ldr	r3, [r7, #28]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3720      	adds	r7, #32
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b088      	sub	sp, #32
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a42a:	2318      	movs	r3, #24
 800a42c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a42e:	2340      	movs	r3, #64	; 0x40
 800a430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a432:	2300      	movs	r3, #0
 800a434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a43a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a43c:	f107 0308 	add.w	r3, r7, #8
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7ff ff0e 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a448:	f241 3288 	movw	r2, #5000	; 0x1388
 800a44c:	2118      	movs	r1, #24
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f9de 	bl	800a810 <SDMMC_GetCmdResp1>
 800a454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a456:	69fb      	ldr	r3, [r7, #28]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3720      	adds	r7, #32
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a46e:	2319      	movs	r3, #25
 800a470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a472:	2340      	movs	r3, #64	; 0x40
 800a474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a476:	2300      	movs	r3, #0
 800a478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a47a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a47e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a480:	f107 0308 	add.w	r3, r7, #8
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff feec 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a48c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a490:	2119      	movs	r1, #25
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 f9bc 	bl	800a810 <SDMMC_GetCmdResp1>
 800a498:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a49a:	69fb      	ldr	r3, [r7, #28]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3720      	adds	r7, #32
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b088      	sub	sp, #32
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a4b0:	230c      	movs	r3, #12
 800a4b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4b4:	2340      	movs	r3, #64	; 0x40
 800a4b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4c2:	f107 0308 	add.w	r3, r7, #8
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff fecb 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a4ce:	4a05      	ldr	r2, [pc, #20]	; (800a4e4 <SDMMC_CmdStopTransfer+0x40>)
 800a4d0:	210c      	movs	r1, #12
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f99c 	bl	800a810 <SDMMC_GetCmdResp1>
 800a4d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4da:	69fb      	ldr	r3, [r7, #28]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3720      	adds	r7, #32
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	05f5e100 	.word	0x05f5e100

0800a4e8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b08a      	sub	sp, #40	; 0x28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a4f8:	2307      	movs	r3, #7
 800a4fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4fc:	2340      	movs	r3, #64	; 0x40
 800a4fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a500:	2300      	movs	r3, #0
 800a502:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a508:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a50a:	f107 0310 	add.w	r3, r7, #16
 800a50e:	4619      	mov	r1, r3
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f7ff fea7 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a516:	f241 3288 	movw	r2, #5000	; 0x1388
 800a51a:	2107      	movs	r1, #7
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f000 f977 	bl	800a810 <SDMMC_GetCmdResp1>
 800a522:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a526:	4618      	mov	r0, r3
 800a528:	3728      	adds	r7, #40	; 0x28
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b088      	sub	sp, #32
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a536:	2300      	movs	r3, #0
 800a538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a53a:	2300      	movs	r3, #0
 800a53c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a53e:	2300      	movs	r3, #0
 800a540:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a542:	2300      	movs	r3, #0
 800a544:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a54a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a54c:	f107 0308 	add.w	r3, r7, #8
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7ff fe86 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 f92d 	bl	800a7b8 <SDMMC_GetCmdError>
 800a55e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a560:	69fb      	ldr	r3, [r7, #28]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3720      	adds	r7, #32
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b088      	sub	sp, #32
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a572:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a578:	2308      	movs	r3, #8
 800a57a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a57c:	2340      	movs	r3, #64	; 0x40
 800a57e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a580:	2300      	movs	r3, #0
 800a582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a588:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a58a:	f107 0308 	add.w	r3, r7, #8
 800a58e:	4619      	mov	r1, r3
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7ff fe67 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fb24 	bl	800abe4 <SDMMC_GetCmdResp7>
 800a59c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a59e:	69fb      	ldr	r3, [r7, #28]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3720      	adds	r7, #32
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b088      	sub	sp, #32
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a5b6:	2337      	movs	r3, #55	; 0x37
 800a5b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5ba:	2340      	movs	r3, #64	; 0x40
 800a5bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5c8:	f107 0308 	add.w	r3, r7, #8
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7ff fe48 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a5d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d8:	2137      	movs	r1, #55	; 0x37
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 f918 	bl	800a810 <SDMMC_GetCmdResp1>
 800a5e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5e2:	69fb      	ldr	r3, [r7, #28]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3720      	adds	r7, #32
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b088      	sub	sp, #32
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a602:	2329      	movs	r3, #41	; 0x29
 800a604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a606:	2340      	movs	r3, #64	; 0x40
 800a608:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a60a:	2300      	movs	r3, #0
 800a60c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a60e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a612:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a614:	f107 0308 	add.w	r3, r7, #8
 800a618:	4619      	mov	r1, r3
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f7ff fe22 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fa2b 	bl	800aa7c <SDMMC_GetCmdResp3>
 800a626:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a628:	69fb      	ldr	r3, [r7, #28]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3720      	adds	r7, #32
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b088      	sub	sp, #32
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a640:	2306      	movs	r3, #6
 800a642:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a644:	2340      	movs	r3, #64	; 0x40
 800a646:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a648:	2300      	movs	r3, #0
 800a64a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a64c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a650:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a652:	f107 0308 	add.w	r3, r7, #8
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff fe03 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a65e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a662:	2106      	movs	r1, #6
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f8d3 	bl	800a810 <SDMMC_GetCmdResp1>
 800a66a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a66c:	69fb      	ldr	r3, [r7, #28]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3720      	adds	r7, #32
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b088      	sub	sp, #32
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a67e:	2300      	movs	r3, #0
 800a680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a682:	2333      	movs	r3, #51	; 0x33
 800a684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a686:	2340      	movs	r3, #64	; 0x40
 800a688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a68a:	2300      	movs	r3, #0
 800a68c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a68e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a692:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a694:	f107 0308 	add.w	r3, r7, #8
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f7ff fde2 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a6a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6a4:	2133      	movs	r1, #51	; 0x33
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f8b2 	bl	800a810 <SDMMC_GetCmdResp1>
 800a6ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6ae:	69fb      	ldr	r3, [r7, #28]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3720      	adds	r7, #32
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a6c8:	23c0      	movs	r3, #192	; 0xc0
 800a6ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6d6:	f107 0308 	add.w	r3, r7, #8
 800a6da:	4619      	mov	r1, r3
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7ff fdc1 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f982 	bl	800a9ec <SDMMC_GetCmdResp2>
 800a6e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6ea:	69fb      	ldr	r3, [r7, #28]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3720      	adds	r7, #32
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a702:	2309      	movs	r3, #9
 800a704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a706:	23c0      	movs	r3, #192	; 0xc0
 800a708:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a70a:	2300      	movs	r3, #0
 800a70c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a70e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a712:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a714:	f107 0308 	add.w	r3, r7, #8
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f7ff fda2 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 f963 	bl	800a9ec <SDMMC_GetCmdResp2>
 800a726:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a728:	69fb      	ldr	r3, [r7, #28]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3720      	adds	r7, #32
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b088      	sub	sp, #32
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a73c:	2300      	movs	r3, #0
 800a73e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a740:	2303      	movs	r3, #3
 800a742:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a744:	2340      	movs	r3, #64	; 0x40
 800a746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a748:	2300      	movs	r3, #0
 800a74a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a74c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a750:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a752:	f107 0308 	add.w	r3, r7, #8
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff fd83 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	2103      	movs	r1, #3
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f9c8 	bl	800aaf8 <SDMMC_GetCmdResp6>
 800a768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a76a:	69fb      	ldr	r3, [r7, #28]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3720      	adds	r7, #32
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b088      	sub	sp, #32
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a782:	230d      	movs	r3, #13
 800a784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a786:	2340      	movs	r3, #64	; 0x40
 800a788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a78a:	2300      	movs	r3, #0
 800a78c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a78e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a792:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a794:	f107 0308 	add.w	r3, r7, #8
 800a798:	4619      	mov	r1, r3
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff fd62 	bl	800a264 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a7a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7a4:	210d      	movs	r1, #13
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f832 	bl	800a810 <SDMMC_GetCmdResp1>
 800a7ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7ae:	69fb      	ldr	r3, [r7, #28]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3720      	adds	r7, #32
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7c0:	4b11      	ldr	r3, [pc, #68]	; (800a808 <SDMMC_GetCmdError+0x50>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a11      	ldr	r2, [pc, #68]	; (800a80c <SDMMC_GetCmdError+0x54>)
 800a7c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ca:	0a5b      	lsrs	r3, r3, #9
 800a7cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7d0:	fb02 f303 	mul.w	r3, r2, r3
 800a7d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	1e5a      	subs	r2, r3, #1
 800a7da:	60fa      	str	r2, [r7, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d102      	bne.n	800a7e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7e4:	e009      	b.n	800a7fa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d0f1      	beq.n	800a7d6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	22c5      	movs	r2, #197	; 0xc5
 800a7f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3714      	adds	r7, #20
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	20000010 	.word	0x20000010
 800a80c:	10624dd3 	.word	0x10624dd3

0800a810 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b088      	sub	sp, #32
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	460b      	mov	r3, r1
 800a81a:	607a      	str	r2, [r7, #4]
 800a81c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a81e:	4b70      	ldr	r3, [pc, #448]	; (800a9e0 <SDMMC_GetCmdResp1+0x1d0>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a70      	ldr	r2, [pc, #448]	; (800a9e4 <SDMMC_GetCmdResp1+0x1d4>)
 800a824:	fba2 2303 	umull	r2, r3, r2, r3
 800a828:	0a5a      	lsrs	r2, r3, #9
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	fb02 f303 	mul.w	r3, r2, r3
 800a830:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	1e5a      	subs	r2, r3, #1
 800a836:	61fa      	str	r2, [r7, #28]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d102      	bne.n	800a842 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a83c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a840:	e0c9      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a846:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d0ef      	beq.n	800a832 <SDMMC_GetCmdResp1+0x22>
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1ea      	bne.n	800a832 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a860:	f003 0304 	and.w	r3, r3, #4
 800a864:	2b00      	cmp	r3, #0
 800a866:	d004      	beq.n	800a872 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2204      	movs	r2, #4
 800a86c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a86e:	2304      	movs	r3, #4
 800a870:	e0b1      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d004      	beq.n	800a888 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2201      	movs	r2, #1
 800a882:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a884:	2301      	movs	r3, #1
 800a886:	e0a6      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	22c5      	movs	r2, #197	; 0xc5
 800a88c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f7ff fd12 	bl	800a2b8 <SDIO_GetCommandResponse>
 800a894:	4603      	mov	r3, r0
 800a896:	461a      	mov	r2, r3
 800a898:	7afb      	ldrb	r3, [r7, #11]
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d001      	beq.n	800a8a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e099      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f7ff fd14 	bl	800a2d2 <SDIO_GetResponse>
 800a8aa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a8ac:	697a      	ldr	r2, [r7, #20]
 800a8ae:	4b4e      	ldr	r3, [pc, #312]	; (800a9e8 <SDMMC_GetCmdResp1+0x1d8>)
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d101      	bne.n	800a8ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e08d      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	da02      	bge.n	800a8c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a8c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a8c4:	e087      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a8d0:	2340      	movs	r3, #64	; 0x40
 800a8d2:	e080      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a8de:	2380      	movs	r3, #128	; 0x80
 800a8e0:	e079      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a8ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8f0:	e071      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d002      	beq.n	800a902 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a8fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a900:	e069      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d002      	beq.n	800a912 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a90c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a910:	e061      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d002      	beq.n	800a922 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a91c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a920:	e059      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d002      	beq.n	800a932 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a92c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a930:	e051      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a93c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a940:	e049      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a94c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a950:	e041      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d002      	beq.n	800a962 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a95c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a960:	e039      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a96c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a970:	e031      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a97c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a980:	e029      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a98c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a990:	e021      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a99c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a9a0:	e019      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a9ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a9b0:	e011      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a9bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a9c0:	e009      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	f003 0308 	and.w	r3, r3, #8
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a9cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a9d0:	e001      	b.n	800a9d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a9d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3720      	adds	r7, #32
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	20000010 	.word	0x20000010
 800a9e4:	10624dd3 	.word	0x10624dd3
 800a9e8:	fdffe008 	.word	0xfdffe008

0800a9ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9f4:	4b1f      	ldr	r3, [pc, #124]	; (800aa74 <SDMMC_GetCmdResp2+0x88>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a1f      	ldr	r2, [pc, #124]	; (800aa78 <SDMMC_GetCmdResp2+0x8c>)
 800a9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a9fe:	0a5b      	lsrs	r3, r3, #9
 800aa00:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa04:	fb02 f303 	mul.w	r3, r2, r3
 800aa08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	1e5a      	subs	r2, r3, #1
 800aa0e:	60fa      	str	r2, [r7, #12]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d102      	bne.n	800aa1a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa18:	e026      	b.n	800aa68 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d0ef      	beq.n	800aa0a <SDMMC_GetCmdResp2+0x1e>
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1ea      	bne.n	800aa0a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa38:	f003 0304 	and.w	r3, r3, #4
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d004      	beq.n	800aa4a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2204      	movs	r2, #4
 800aa44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa46:	2304      	movs	r3, #4
 800aa48:	e00e      	b.n	800aa68 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4e:	f003 0301 	and.w	r3, r3, #1
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d004      	beq.n	800aa60 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e003      	b.n	800aa68 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	22c5      	movs	r2, #197	; 0xc5
 800aa64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3714      	adds	r7, #20
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	20000010 	.word	0x20000010
 800aa78:	10624dd3 	.word	0x10624dd3

0800aa7c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa84:	4b1a      	ldr	r3, [pc, #104]	; (800aaf0 <SDMMC_GetCmdResp3+0x74>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a1a      	ldr	r2, [pc, #104]	; (800aaf4 <SDMMC_GetCmdResp3+0x78>)
 800aa8a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa8e:	0a5b      	lsrs	r3, r3, #9
 800aa90:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa94:	fb02 f303 	mul.w	r3, r2, r3
 800aa98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	1e5a      	subs	r2, r3, #1
 800aa9e:	60fa      	str	r2, [r7, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d102      	bne.n	800aaaa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aaa4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aaa8:	e01b      	b.n	800aae2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d0ef      	beq.n	800aa9a <SDMMC_GetCmdResp3+0x1e>
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1ea      	bne.n	800aa9a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac8:	f003 0304 	and.w	r3, r3, #4
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d004      	beq.n	800aada <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2204      	movs	r2, #4
 800aad4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aad6:	2304      	movs	r3, #4
 800aad8:	e003      	b.n	800aae2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	22c5      	movs	r2, #197	; 0xc5
 800aade:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3714      	adds	r7, #20
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	20000010 	.word	0x20000010
 800aaf4:	10624dd3 	.word	0x10624dd3

0800aaf8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b088      	sub	sp, #32
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	460b      	mov	r3, r1
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab06:	4b35      	ldr	r3, [pc, #212]	; (800abdc <SDMMC_GetCmdResp6+0xe4>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a35      	ldr	r2, [pc, #212]	; (800abe0 <SDMMC_GetCmdResp6+0xe8>)
 800ab0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab10:	0a5b      	lsrs	r3, r3, #9
 800ab12:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab16:	fb02 f303 	mul.w	r3, r2, r3
 800ab1a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	1e5a      	subs	r2, r3, #1
 800ab20:	61fa      	str	r2, [r7, #28]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d102      	bne.n	800ab2c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab2a:	e052      	b.n	800abd2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab30:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d0ef      	beq.n	800ab1c <SDMMC_GetCmdResp6+0x24>
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1ea      	bne.n	800ab1c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab4a:	f003 0304 	and.w	r3, r3, #4
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d004      	beq.n	800ab5c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2204      	movs	r2, #4
 800ab56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab58:	2304      	movs	r3, #4
 800ab5a:	e03a      	b.n	800abd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d004      	beq.n	800ab72 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e02f      	b.n	800abd2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f7ff fba0 	bl	800a2b8 <SDIO_GetCommandResponse>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	7afb      	ldrb	r3, [r7, #11]
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d001      	beq.n	800ab86 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e025      	b.n	800abd2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	22c5      	movs	r2, #197	; 0xc5
 800ab8a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f7ff fb9f 	bl	800a2d2 <SDIO_GetResponse>
 800ab94:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d106      	bne.n	800abae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	0c1b      	lsrs	r3, r3, #16
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800abaa:	2300      	movs	r3, #0
 800abac:	e011      	b.n	800abd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800abb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abbc:	e009      	b.n	800abd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d002      	beq.n	800abce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800abc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abcc:	e001      	b.n	800abd2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800abce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3720      	adds	r7, #32
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	20000010 	.word	0x20000010
 800abe0:	10624dd3 	.word	0x10624dd3

0800abe4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abec:	4b22      	ldr	r3, [pc, #136]	; (800ac78 <SDMMC_GetCmdResp7+0x94>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a22      	ldr	r2, [pc, #136]	; (800ac7c <SDMMC_GetCmdResp7+0x98>)
 800abf2:	fba2 2303 	umull	r2, r3, r2, r3
 800abf6:	0a5b      	lsrs	r3, r3, #9
 800abf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abfc:	fb02 f303 	mul.w	r3, r2, r3
 800ac00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	1e5a      	subs	r2, r3, #1
 800ac06:	60fa      	str	r2, [r7, #12]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d102      	bne.n	800ac12 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac10:	e02c      	b.n	800ac6c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d0ef      	beq.n	800ac02 <SDMMC_GetCmdResp7+0x1e>
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1ea      	bne.n	800ac02 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac30:	f003 0304 	and.w	r3, r3, #4
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d004      	beq.n	800ac42 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2204      	movs	r2, #4
 800ac3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac3e:	2304      	movs	r3, #4
 800ac40:	e014      	b.n	800ac6c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac46:	f003 0301 	and.w	r3, r3, #1
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d004      	beq.n	800ac58 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e009      	b.n	800ac6c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d002      	beq.n	800ac6a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2240      	movs	r2, #64	; 0x40
 800ac68:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ac6a:	2300      	movs	r3, #0
  
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	20000010 	.word	0x20000010
 800ac7c:	10624dd3 	.word	0x10624dd3

0800ac80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ac84:	4904      	ldr	r1, [pc, #16]	; (800ac98 <MX_FATFS_Init+0x18>)
 800ac86:	4805      	ldr	r0, [pc, #20]	; (800ac9c <MX_FATFS_Init+0x1c>)
 800ac88:	f004 fcdc 	bl	800f644 <FATFS_LinkDriver>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	461a      	mov	r2, r3
 800ac90:	4b03      	ldr	r3, [pc, #12]	; (800aca0 <MX_FATFS_Init+0x20>)
 800ac92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ac94:	bf00      	nop
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	2000d80c 	.word	0x2000d80c
 800ac9c:	0804e1a4 	.word	0x0804e1a4
 800aca0:	2000d808 	.word	0x2000d808

0800aca4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aca4:	b480      	push	{r7}
 800aca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aca8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800acaa:	4618      	mov	r0, r3
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800acbe:	f000 f896 	bl	800adee <BSP_SD_IsDetected>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d001      	beq.n	800accc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	e012      	b.n	800acf2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800accc:	480b      	ldr	r0, [pc, #44]	; (800acfc <BSP_SD_Init+0x48>)
 800acce:	f7fc fd1f 	bl	8007710 <HAL_SD_Init>
 800acd2:	4603      	mov	r3, r0
 800acd4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d109      	bne.n	800acf0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800acdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ace0:	4806      	ldr	r0, [pc, #24]	; (800acfc <BSP_SD_Init+0x48>)
 800ace2:	f7fd faeb 	bl	80082bc <HAL_SD_ConfigWideBusOperation>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d001      	beq.n	800acf0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800acf0:	79fb      	ldrb	r3, [r7, #7]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	2000d230 	.word	0x2000d230

0800ad00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	68f9      	ldr	r1, [r7, #12]
 800ad16:	4806      	ldr	r0, [pc, #24]	; (800ad30 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ad18:	f7fc fda8 	bl	800786c <HAL_SD_ReadBlocks_DMA>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ad26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3718      	adds	r7, #24
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	2000d230 	.word	0x2000d230

0800ad34 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	68f9      	ldr	r1, [r7, #12]
 800ad4a:	4806      	ldr	r0, [pc, #24]	; (800ad64 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ad4c:	f7fc fe70 	bl	8007a30 <HAL_SD_WriteBlocks_DMA>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	2000d230 	.word	0x2000d230

0800ad68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ad6c:	4805      	ldr	r0, [pc, #20]	; (800ad84 <BSP_SD_GetCardState+0x1c>)
 800ad6e:	f7fd fb3f 	bl	80083f0 <HAL_SD_GetCardState>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b04      	cmp	r3, #4
 800ad76:	bf14      	ite	ne
 800ad78:	2301      	movne	r3, #1
 800ad7a:	2300      	moveq	r3, #0
 800ad7c:	b2db      	uxtb	r3, r3
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	2000d230 	.word	0x2000d230

0800ad88 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	4803      	ldr	r0, [pc, #12]	; (800ada0 <BSP_SD_GetCardInfo+0x18>)
 800ad94:	f7fd fa66 	bl	8008264 <HAL_SD_GetCardInfo>
}
 800ad98:	bf00      	nop
 800ad9a:	3708      	adds	r7, #8
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	2000d230 	.word	0x2000d230

0800ada4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800adac:	f000 f818 	bl	800ade0 <BSP_SD_AbortCallback>
}
 800adb0:	bf00      	nop
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800adc0:	f000 f9a8 	bl	800b114 <BSP_SD_WriteCpltCallback>
}
 800adc4:	bf00      	nop
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800add4:	f000 f9ac 	bl	800b130 <BSP_SD_ReadCpltCallback>
}
 800add8:	bf00      	nop
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ade0:	b480      	push	{r7}
 800ade2:	af00      	add	r7, sp, #0

}
 800ade4:	bf00      	nop
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800adee:	b480      	push	{r7}
 800adf0:	b083      	sub	sp, #12
 800adf2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800adf4:	2301      	movs	r3, #1
 800adf6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800adf8:	79fb      	ldrb	r3, [r7, #7]
 800adfa:	b2db      	uxtb	r3, r3
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ae10:	f004 fd99 	bl	800f946 <osKernelSysTick>
 800ae14:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ae16:	e006      	b.n	800ae26 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ae18:	f7ff ffa6 	bl	800ad68 <BSP_SD_GetCardState>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d101      	bne.n	800ae26 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ae22:	2300      	movs	r3, #0
 800ae24:	e009      	b.n	800ae3a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ae26:	f004 fd8e 	bl	800f946 <osKernelSysTick>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	1ad3      	subs	r3, r2, r3
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d8f0      	bhi.n	800ae18 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ae36:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
	...

0800ae44 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ae4e:	4b0b      	ldr	r3, [pc, #44]	; (800ae7c <SD_CheckStatus+0x38>)
 800ae50:	2201      	movs	r2, #1
 800ae52:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ae54:	f7ff ff88 	bl	800ad68 <BSP_SD_GetCardState>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d107      	bne.n	800ae6e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ae5e:	4b07      	ldr	r3, [pc, #28]	; (800ae7c <SD_CheckStatus+0x38>)
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	f023 0301 	bic.w	r3, r3, #1
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	4b04      	ldr	r3, [pc, #16]	; (800ae7c <SD_CheckStatus+0x38>)
 800ae6c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ae6e:	4b03      	ldr	r3, [pc, #12]	; (800ae7c <SD_CheckStatus+0x38>)
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	b2db      	uxtb	r3, r3
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	20000019 	.word	0x20000019

0800ae80 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ae80:	b590      	push	{r4, r7, lr}
 800ae82:	b087      	sub	sp, #28
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	4603      	mov	r3, r0
 800ae88:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ae8a:	4b20      	ldr	r3, [pc, #128]	; (800af0c <SD_initialize+0x8c>)
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ae90:	f004 fd4d 	bl	800f92e <osKernelRunning>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d030      	beq.n	800aefc <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ae9a:	f7ff ff0b 	bl	800acb4 <BSP_SD_Init>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d107      	bne.n	800aeb4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800aea4:	79fb      	ldrb	r3, [r7, #7]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7ff ffcc 	bl	800ae44 <SD_CheckStatus>
 800aeac:	4603      	mov	r3, r0
 800aeae:	461a      	mov	r2, r3
 800aeb0:	4b16      	ldr	r3, [pc, #88]	; (800af0c <SD_initialize+0x8c>)
 800aeb2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800aeb4:	4b15      	ldr	r3, [pc, #84]	; (800af0c <SD_initialize+0x8c>)
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d01e      	beq.n	800aefc <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800aebe:	4b14      	ldr	r3, [pc, #80]	; (800af10 <SD_initialize+0x90>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10e      	bne.n	800aee4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800aec6:	4b13      	ldr	r3, [pc, #76]	; (800af14 <SD_initialize+0x94>)
 800aec8:	f107 0408 	add.w	r4, r7, #8
 800aecc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aece:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800aed2:	f107 0308 	add.w	r3, r7, #8
 800aed6:	2100      	movs	r1, #0
 800aed8:	4618      	mov	r0, r3
 800aeda:	f004 ff0a 	bl	800fcf2 <osMessageCreate>
 800aede:	4603      	mov	r3, r0
 800aee0:	4a0b      	ldr	r2, [pc, #44]	; (800af10 <SD_initialize+0x90>)
 800aee2:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800aee4:	4b0a      	ldr	r3, [pc, #40]	; (800af10 <SD_initialize+0x90>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d107      	bne.n	800aefc <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800aeec:	4b07      	ldr	r3, [pc, #28]	; (800af0c <SD_initialize+0x8c>)
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	f043 0301 	orr.w	r3, r3, #1
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	4b04      	ldr	r3, [pc, #16]	; (800af0c <SD_initialize+0x8c>)
 800aefa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800aefc:	4b03      	ldr	r3, [pc, #12]	; (800af0c <SD_initialize+0x8c>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	b2db      	uxtb	r3, r3
}
 800af02:	4618      	mov	r0, r3
 800af04:	371c      	adds	r7, #28
 800af06:	46bd      	mov	sp, r7
 800af08:	bd90      	pop	{r4, r7, pc}
 800af0a:	bf00      	nop
 800af0c:	20000019 	.word	0x20000019
 800af10:	20000b24 	.word	0x20000b24
 800af14:	08021478 	.word	0x08021478

0800af18 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	4603      	mov	r3, r0
 800af20:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800af22:	79fb      	ldrb	r3, [r7, #7]
 800af24:	4618      	mov	r0, r3
 800af26:	f7ff ff8d 	bl	800ae44 <SD_CheckStatus>
 800af2a:	4603      	mov	r3, r0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b08a      	sub	sp, #40	; 0x28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60b9      	str	r1, [r7, #8]
 800af3c:	607a      	str	r2, [r7, #4]
 800af3e:	603b      	str	r3, [r7, #0]
 800af40:	4603      	mov	r3, r0
 800af42:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800af4a:	f247 5030 	movw	r0, #30000	; 0x7530
 800af4e:	f7ff ff5b 	bl	800ae08 <SD_CheckStatusWithTimeout>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	da02      	bge.n	800af5e <SD_read+0x2a>
  {
    return res;
 800af58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af5c:	e032      	b.n	800afc4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	6879      	ldr	r1, [r7, #4]
 800af62:	68b8      	ldr	r0, [r7, #8]
 800af64:	f7ff fecc 	bl	800ad00 <BSP_SD_ReadBlocks_DMA>
 800af68:	4603      	mov	r3, r0
 800af6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800af6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af72:	2b00      	cmp	r3, #0
 800af74:	d124      	bne.n	800afc0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800af76:	4b15      	ldr	r3, [pc, #84]	; (800afcc <SD_read+0x98>)
 800af78:	6819      	ldr	r1, [r3, #0]
 800af7a:	f107 0314 	add.w	r3, r7, #20
 800af7e:	f247 5230 	movw	r2, #30000	; 0x7530
 800af82:	4618      	mov	r0, r3
 800af84:	f004 ff1e 	bl	800fdc4 <osMessageGet>

    if (event.status == osEventMessage)
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	2b10      	cmp	r3, #16
 800af8c:	d118      	bne.n	800afc0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	2b01      	cmp	r3, #1
 800af92:	d115      	bne.n	800afc0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800af94:	f004 fcd7 	bl	800f946 <osKernelSysTick>
 800af98:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800af9a:	e008      	b.n	800afae <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af9c:	f7ff fee4 	bl	800ad68 <BSP_SD_GetCardState>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d103      	bne.n	800afae <SD_read+0x7a>
              {
                res = RES_OK;
 800afa6:	2300      	movs	r3, #0
 800afa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800afac:	e008      	b.n	800afc0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800afae:	f004 fcca 	bl	800f946 <osKernelSysTick>
 800afb2:	4602      	mov	r2, r0
 800afb4:	6a3b      	ldr	r3, [r7, #32]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	f247 522f 	movw	r2, #29999	; 0x752f
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d9ed      	bls.n	800af9c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800afc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3728      	adds	r7, #40	; 0x28
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	20000b24 	.word	0x20000b24

0800afd0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b08a      	sub	sp, #40	; 0x28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	607a      	str	r2, [r7, #4]
 800afda:	603b      	str	r3, [r7, #0]
 800afdc:	4603      	mov	r3, r0
 800afde:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800afe6:	f247 5030 	movw	r0, #30000	; 0x7530
 800afea:	f7ff ff0d 	bl	800ae08 <SD_CheckStatusWithTimeout>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	da02      	bge.n	800affa <SD_write+0x2a>
  {
    return res;
 800aff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aff8:	e02e      	b.n	800b058 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	68b8      	ldr	r0, [r7, #8]
 800b000:	f7ff fe98 	bl	800ad34 <BSP_SD_WriteBlocks_DMA>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d124      	bne.n	800b054 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b00a:	4b15      	ldr	r3, [pc, #84]	; (800b060 <SD_write+0x90>)
 800b00c:	6819      	ldr	r1, [r3, #0]
 800b00e:	f107 0314 	add.w	r3, r7, #20
 800b012:	f247 5230 	movw	r2, #30000	; 0x7530
 800b016:	4618      	mov	r0, r3
 800b018:	f004 fed4 	bl	800fdc4 <osMessageGet>

    if (event.status == osEventMessage)
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	2b10      	cmp	r3, #16
 800b020:	d118      	bne.n	800b054 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	2b02      	cmp	r3, #2
 800b026:	d115      	bne.n	800b054 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b028:	f004 fc8d 	bl	800f946 <osKernelSysTick>
 800b02c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b02e:	e008      	b.n	800b042 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b030:	f7ff fe9a 	bl	800ad68 <BSP_SD_GetCardState>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d103      	bne.n	800b042 <SD_write+0x72>
          {
            res = RES_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b040:	e008      	b.n	800b054 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b042:	f004 fc80 	bl	800f946 <osKernelSysTick>
 800b046:	4602      	mov	r2, r0
 800b048:	6a3b      	ldr	r3, [r7, #32]
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	f247 522f 	movw	r2, #29999	; 0x752f
 800b050:	4293      	cmp	r3, r2
 800b052:	d9ed      	bls.n	800b030 <SD_write+0x60>
    }

  }
#endif

  return res;
 800b054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3728      	adds	r7, #40	; 0x28
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	20000b24 	.word	0x20000b24

0800b064 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b08c      	sub	sp, #48	; 0x30
 800b068:	af00      	add	r7, sp, #0
 800b06a:	4603      	mov	r3, r0
 800b06c:	603a      	str	r2, [r7, #0]
 800b06e:	71fb      	strb	r3, [r7, #7]
 800b070:	460b      	mov	r3, r1
 800b072:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b07a:	4b25      	ldr	r3, [pc, #148]	; (800b110 <SD_ioctl+0xac>)
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <SD_ioctl+0x28>
 800b088:	2303      	movs	r3, #3
 800b08a:	e03c      	b.n	800b106 <SD_ioctl+0xa2>

  switch (cmd)
 800b08c:	79bb      	ldrb	r3, [r7, #6]
 800b08e:	2b03      	cmp	r3, #3
 800b090:	d834      	bhi.n	800b0fc <SD_ioctl+0x98>
 800b092:	a201      	add	r2, pc, #4	; (adr r2, 800b098 <SD_ioctl+0x34>)
 800b094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b098:	0800b0a9 	.word	0x0800b0a9
 800b09c:	0800b0b1 	.word	0x0800b0b1
 800b0a0:	0800b0c9 	.word	0x0800b0c9
 800b0a4:	0800b0e3 	.word	0x0800b0e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b0ae:	e028      	b.n	800b102 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b0b0:	f107 030c 	add.w	r3, r7, #12
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7ff fe67 	bl	800ad88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b0c6:	e01c      	b.n	800b102 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b0c8:	f107 030c 	add.w	r3, r7, #12
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7ff fe5b 	bl	800ad88 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b0e0:	e00f      	b.n	800b102 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b0e2:	f107 030c 	add.w	r3, r7, #12
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7ff fe4e 	bl	800ad88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	0a5a      	lsrs	r2, r3, #9
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b0fa:	e002      	b.n	800b102 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b0fc:	2304      	movs	r3, #4
 800b0fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b106:	4618      	mov	r0, r3
 800b108:	3730      	adds	r7, #48	; 0x30
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	20000019 	.word	0x20000019

0800b114 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800b118:	4b04      	ldr	r3, [pc, #16]	; (800b12c <BSP_SD_WriteCpltCallback+0x18>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2200      	movs	r2, #0
 800b11e:	2102      	movs	r1, #2
 800b120:	4618      	mov	r0, r3
 800b122:	f004 fe0f 	bl	800fd44 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b126:	bf00      	nop
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	20000b24 	.word	0x20000b24

0800b130 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b134:	4b04      	ldr	r3, [pc, #16]	; (800b148 <BSP_SD_ReadCpltCallback+0x18>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2200      	movs	r2, #0
 800b13a:	2101      	movs	r1, #1
 800b13c:	4618      	mov	r0, r3
 800b13e:	f004 fe01 	bl	800fd44 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b142:	bf00      	nop
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	20000b24 	.word	0x20000b24

0800b14c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b14c:	b5b0      	push	{r4, r5, r7, lr}
 800b14e:	b08e      	sub	sp, #56	; 0x38
 800b150:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b152:	4ba0      	ldr	r3, [pc, #640]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b154:	22c0      	movs	r2, #192	; 0xc0
 800b156:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b158:	4b9e      	ldr	r3, [pc, #632]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b15a:	22a8      	movs	r2, #168	; 0xa8
 800b15c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b15e:	4b9d      	ldr	r3, [pc, #628]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b160:	2201      	movs	r2, #1
 800b162:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 243;
 800b164:	4b9b      	ldr	r3, [pc, #620]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b166:	22f3      	movs	r2, #243	; 0xf3
 800b168:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b16a:	4b9b      	ldr	r3, [pc, #620]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b16c:	22ff      	movs	r2, #255	; 0xff
 800b16e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b170:	4b99      	ldr	r3, [pc, #612]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b172:	22ff      	movs	r2, #255	; 0xff
 800b174:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b176:	4b98      	ldr	r3, [pc, #608]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b178:	22ff      	movs	r2, #255	; 0xff
 800b17a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b17c:	4b96      	ldr	r3, [pc, #600]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b17e:	2200      	movs	r2, #0
 800b180:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b182:	4b96      	ldr	r3, [pc, #600]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b184:	22c0      	movs	r2, #192	; 0xc0
 800b186:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b188:	4b94      	ldr	r3, [pc, #592]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b18a:	22a8      	movs	r2, #168	; 0xa8
 800b18c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b18e:	4b93      	ldr	r3, [pc, #588]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b190:	2201      	movs	r2, #1
 800b192:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b194:	4b91      	ldr	r3, [pc, #580]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b196:	2201      	movs	r2, #1
 800b198:	70da      	strb	r2, [r3, #3]


/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b19a:	2100      	movs	r1, #0
 800b19c:	2000      	movs	r0, #0
 800b19e:	f007 fead 	bl	8012efc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b1a2:	4b8c      	ldr	r3, [pc, #560]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	061a      	lsls	r2, r3, #24
 800b1a8:	4b8a      	ldr	r3, [pc, #552]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b1aa:	785b      	ldrb	r3, [r3, #1]
 800b1ac:	041b      	lsls	r3, r3, #16
 800b1ae:	431a      	orrs	r2, r3
 800b1b0:	4b88      	ldr	r3, [pc, #544]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b1b2:	789b      	ldrb	r3, [r3, #2]
 800b1b4:	021b      	lsls	r3, r3, #8
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	4a86      	ldr	r2, [pc, #536]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b1ba:	78d2      	ldrb	r2, [r2, #3]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	061a      	lsls	r2, r3, #24
 800b1c0:	4b84      	ldr	r3, [pc, #528]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	0619      	lsls	r1, r3, #24
 800b1c6:	4b83      	ldr	r3, [pc, #524]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b1c8:	785b      	ldrb	r3, [r3, #1]
 800b1ca:	041b      	lsls	r3, r3, #16
 800b1cc:	4319      	orrs	r1, r3
 800b1ce:	4b81      	ldr	r3, [pc, #516]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b1d0:	789b      	ldrb	r3, [r3, #2]
 800b1d2:	021b      	lsls	r3, r3, #8
 800b1d4:	430b      	orrs	r3, r1
 800b1d6:	497f      	ldr	r1, [pc, #508]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b1d8:	78c9      	ldrb	r1, [r1, #3]
 800b1da:	430b      	orrs	r3, r1
 800b1dc:	021b      	lsls	r3, r3, #8
 800b1de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1e2:	431a      	orrs	r2, r3
 800b1e4:	4b7b      	ldr	r3, [pc, #492]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	0619      	lsls	r1, r3, #24
 800b1ea:	4b7a      	ldr	r3, [pc, #488]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b1ec:	785b      	ldrb	r3, [r3, #1]
 800b1ee:	041b      	lsls	r3, r3, #16
 800b1f0:	4319      	orrs	r1, r3
 800b1f2:	4b78      	ldr	r3, [pc, #480]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b1f4:	789b      	ldrb	r3, [r3, #2]
 800b1f6:	021b      	lsls	r3, r3, #8
 800b1f8:	430b      	orrs	r3, r1
 800b1fa:	4976      	ldr	r1, [pc, #472]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b1fc:	78c9      	ldrb	r1, [r1, #3]
 800b1fe:	430b      	orrs	r3, r1
 800b200:	0a1b      	lsrs	r3, r3, #8
 800b202:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b206:	431a      	orrs	r2, r3
 800b208:	4b72      	ldr	r3, [pc, #456]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	0619      	lsls	r1, r3, #24
 800b20e:	4b71      	ldr	r3, [pc, #452]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b210:	785b      	ldrb	r3, [r3, #1]
 800b212:	041b      	lsls	r3, r3, #16
 800b214:	4319      	orrs	r1, r3
 800b216:	4b6f      	ldr	r3, [pc, #444]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b218:	789b      	ldrb	r3, [r3, #2]
 800b21a:	021b      	lsls	r3, r3, #8
 800b21c:	430b      	orrs	r3, r1
 800b21e:	496d      	ldr	r1, [pc, #436]	; (800b3d4 <MX_LWIP_Init+0x288>)
 800b220:	78c9      	ldrb	r1, [r1, #3]
 800b222:	430b      	orrs	r3, r1
 800b224:	0e1b      	lsrs	r3, r3, #24
 800b226:	4313      	orrs	r3, r2
 800b228:	4a6d      	ldr	r2, [pc, #436]	; (800b3e0 <MX_LWIP_Init+0x294>)
 800b22a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b22c:	4b6a      	ldr	r3, [pc, #424]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	061a      	lsls	r2, r3, #24
 800b232:	4b69      	ldr	r3, [pc, #420]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b234:	785b      	ldrb	r3, [r3, #1]
 800b236:	041b      	lsls	r3, r3, #16
 800b238:	431a      	orrs	r2, r3
 800b23a:	4b67      	ldr	r3, [pc, #412]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b23c:	789b      	ldrb	r3, [r3, #2]
 800b23e:	021b      	lsls	r3, r3, #8
 800b240:	4313      	orrs	r3, r2
 800b242:	4a65      	ldr	r2, [pc, #404]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b244:	78d2      	ldrb	r2, [r2, #3]
 800b246:	4313      	orrs	r3, r2
 800b248:	061a      	lsls	r2, r3, #24
 800b24a:	4b63      	ldr	r3, [pc, #396]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	0619      	lsls	r1, r3, #24
 800b250:	4b61      	ldr	r3, [pc, #388]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b252:	785b      	ldrb	r3, [r3, #1]
 800b254:	041b      	lsls	r3, r3, #16
 800b256:	4319      	orrs	r1, r3
 800b258:	4b5f      	ldr	r3, [pc, #380]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b25a:	789b      	ldrb	r3, [r3, #2]
 800b25c:	021b      	lsls	r3, r3, #8
 800b25e:	430b      	orrs	r3, r1
 800b260:	495d      	ldr	r1, [pc, #372]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b262:	78c9      	ldrb	r1, [r1, #3]
 800b264:	430b      	orrs	r3, r1
 800b266:	021b      	lsls	r3, r3, #8
 800b268:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b26c:	431a      	orrs	r2, r3
 800b26e:	4b5a      	ldr	r3, [pc, #360]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	0619      	lsls	r1, r3, #24
 800b274:	4b58      	ldr	r3, [pc, #352]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b276:	785b      	ldrb	r3, [r3, #1]
 800b278:	041b      	lsls	r3, r3, #16
 800b27a:	4319      	orrs	r1, r3
 800b27c:	4b56      	ldr	r3, [pc, #344]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b27e:	789b      	ldrb	r3, [r3, #2]
 800b280:	021b      	lsls	r3, r3, #8
 800b282:	430b      	orrs	r3, r1
 800b284:	4954      	ldr	r1, [pc, #336]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b286:	78c9      	ldrb	r1, [r1, #3]
 800b288:	430b      	orrs	r3, r1
 800b28a:	0a1b      	lsrs	r3, r3, #8
 800b28c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b290:	431a      	orrs	r2, r3
 800b292:	4b51      	ldr	r3, [pc, #324]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	0619      	lsls	r1, r3, #24
 800b298:	4b4f      	ldr	r3, [pc, #316]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b29a:	785b      	ldrb	r3, [r3, #1]
 800b29c:	041b      	lsls	r3, r3, #16
 800b29e:	4319      	orrs	r1, r3
 800b2a0:	4b4d      	ldr	r3, [pc, #308]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b2a2:	789b      	ldrb	r3, [r3, #2]
 800b2a4:	021b      	lsls	r3, r3, #8
 800b2a6:	430b      	orrs	r3, r1
 800b2a8:	494b      	ldr	r1, [pc, #300]	; (800b3d8 <MX_LWIP_Init+0x28c>)
 800b2aa:	78c9      	ldrb	r1, [r1, #3]
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	0e1b      	lsrs	r3, r3, #24
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	4a4c      	ldr	r2, [pc, #304]	; (800b3e4 <MX_LWIP_Init+0x298>)
 800b2b4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b2b6:	4b49      	ldr	r3, [pc, #292]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	061a      	lsls	r2, r3, #24
 800b2bc:	4b47      	ldr	r3, [pc, #284]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b2be:	785b      	ldrb	r3, [r3, #1]
 800b2c0:	041b      	lsls	r3, r3, #16
 800b2c2:	431a      	orrs	r2, r3
 800b2c4:	4b45      	ldr	r3, [pc, #276]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b2c6:	789b      	ldrb	r3, [r3, #2]
 800b2c8:	021b      	lsls	r3, r3, #8
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	4a43      	ldr	r2, [pc, #268]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b2ce:	78d2      	ldrb	r2, [r2, #3]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	061a      	lsls	r2, r3, #24
 800b2d4:	4b41      	ldr	r3, [pc, #260]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	0619      	lsls	r1, r3, #24
 800b2da:	4b40      	ldr	r3, [pc, #256]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b2dc:	785b      	ldrb	r3, [r3, #1]
 800b2de:	041b      	lsls	r3, r3, #16
 800b2e0:	4319      	orrs	r1, r3
 800b2e2:	4b3e      	ldr	r3, [pc, #248]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b2e4:	789b      	ldrb	r3, [r3, #2]
 800b2e6:	021b      	lsls	r3, r3, #8
 800b2e8:	430b      	orrs	r3, r1
 800b2ea:	493c      	ldr	r1, [pc, #240]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b2ec:	78c9      	ldrb	r1, [r1, #3]
 800b2ee:	430b      	orrs	r3, r1
 800b2f0:	021b      	lsls	r3, r3, #8
 800b2f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b2f6:	431a      	orrs	r2, r3
 800b2f8:	4b38      	ldr	r3, [pc, #224]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	0619      	lsls	r1, r3, #24
 800b2fe:	4b37      	ldr	r3, [pc, #220]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b300:	785b      	ldrb	r3, [r3, #1]
 800b302:	041b      	lsls	r3, r3, #16
 800b304:	4319      	orrs	r1, r3
 800b306:	4b35      	ldr	r3, [pc, #212]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b308:	789b      	ldrb	r3, [r3, #2]
 800b30a:	021b      	lsls	r3, r3, #8
 800b30c:	430b      	orrs	r3, r1
 800b30e:	4933      	ldr	r1, [pc, #204]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b310:	78c9      	ldrb	r1, [r1, #3]
 800b312:	430b      	orrs	r3, r1
 800b314:	0a1b      	lsrs	r3, r3, #8
 800b316:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b31a:	431a      	orrs	r2, r3
 800b31c:	4b2f      	ldr	r3, [pc, #188]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	0619      	lsls	r1, r3, #24
 800b322:	4b2e      	ldr	r3, [pc, #184]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b324:	785b      	ldrb	r3, [r3, #1]
 800b326:	041b      	lsls	r3, r3, #16
 800b328:	4319      	orrs	r1, r3
 800b32a:	4b2c      	ldr	r3, [pc, #176]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b32c:	789b      	ldrb	r3, [r3, #2]
 800b32e:	021b      	lsls	r3, r3, #8
 800b330:	430b      	orrs	r3, r1
 800b332:	492a      	ldr	r1, [pc, #168]	; (800b3dc <MX_LWIP_Init+0x290>)
 800b334:	78c9      	ldrb	r1, [r1, #3]
 800b336:	430b      	orrs	r3, r1
 800b338:	0e1b      	lsrs	r3, r3, #24
 800b33a:	4313      	orrs	r3, r2
 800b33c:	4a2a      	ldr	r2, [pc, #168]	; (800b3e8 <MX_LWIP_Init+0x29c>)
 800b33e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b340:	4b2a      	ldr	r3, [pc, #168]	; (800b3ec <MX_LWIP_Init+0x2a0>)
 800b342:	9302      	str	r3, [sp, #8]
 800b344:	4b2a      	ldr	r3, [pc, #168]	; (800b3f0 <MX_LWIP_Init+0x2a4>)
 800b346:	9301      	str	r3, [sp, #4]
 800b348:	2300      	movs	r3, #0
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	4b26      	ldr	r3, [pc, #152]	; (800b3e8 <MX_LWIP_Init+0x29c>)
 800b34e:	4a25      	ldr	r2, [pc, #148]	; (800b3e4 <MX_LWIP_Init+0x298>)
 800b350:	4923      	ldr	r1, [pc, #140]	; (800b3e0 <MX_LWIP_Init+0x294>)
 800b352:	4828      	ldr	r0, [pc, #160]	; (800b3f4 <MX_LWIP_Init+0x2a8>)
 800b354:	f009 ff26 	bl	80151a4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b358:	4826      	ldr	r0, [pc, #152]	; (800b3f4 <MX_LWIP_Init+0x2a8>)
 800b35a:	f00a f8d5 	bl	8015508 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b35e:	4b25      	ldr	r3, [pc, #148]	; (800b3f4 <MX_LWIP_Init+0x2a8>)
 800b360:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b364:	089b      	lsrs	r3, r3, #2
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d003      	beq.n	800b378 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b370:	4820      	ldr	r0, [pc, #128]	; (800b3f4 <MX_LWIP_Init+0x2a8>)
 800b372:	f00a f8d9 	bl	8015528 <netif_set_up>
 800b376:	e002      	b.n	800b37e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800b378:	481e      	ldr	r0, [pc, #120]	; (800b3f4 <MX_LWIP_Init+0x2a8>)
 800b37a:	f00a f941 	bl	8015600 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800b37e:	491e      	ldr	r1, [pc, #120]	; (800b3f8 <MX_LWIP_Init+0x2ac>)
 800b380:	481c      	ldr	r0, [pc, #112]	; (800b3f4 <MX_LWIP_Init+0x2a8>)
 800b382:	f00a f9d3 	bl	801572c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800b386:	2300      	movs	r3, #0
 800b388:	623b      	str	r3, [r7, #32]
 800b38a:	2300      	movs	r3, #0
 800b38c:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800b38e:	f107 0320 	add.w	r3, r7, #32
 800b392:	2101      	movs	r1, #1
 800b394:	4618      	mov	r0, r3
 800b396:	f004 fbe3 	bl	800fb60 <osSemaphoreCreate>
 800b39a:	4603      	mov	r3, r0
 800b39c:	4a17      	ldr	r2, [pc, #92]	; (800b3fc <MX_LWIP_Init+0x2b0>)
 800b39e:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800b3a0:	4b17      	ldr	r3, [pc, #92]	; (800b400 <MX_LWIP_Init+0x2b4>)
 800b3a2:	4a14      	ldr	r2, [pc, #80]	; (800b3f4 <MX_LWIP_Init+0x2a8>)
 800b3a4:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800b3a6:	4b15      	ldr	r3, [pc, #84]	; (800b3fc <MX_LWIP_Init+0x2b0>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a15      	ldr	r2, [pc, #84]	; (800b400 <MX_LWIP_Init+0x2b4>)
 800b3ac:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800b3ae:	4b15      	ldr	r3, [pc, #84]	; (800b404 <MX_LWIP_Init+0x2b8>)
 800b3b0:	1d3c      	adds	r4, r7, #4
 800b3b2:	461d      	mov	r5, r3
 800b3b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b3bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800b3c0:	1d3b      	adds	r3, r7, #4
 800b3c2:	490f      	ldr	r1, [pc, #60]	; (800b400 <MX_LWIP_Init+0x2b4>)
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f004 face 	bl	800f966 <osThreadCreate>




/* USER CODE END 3 */
}
 800b3ca:	bf00      	nop
 800b3cc:	3728      	adds	r7, #40	; 0x28
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bdb0      	pop	{r4, r5, r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	2000dcc0 	.word	0x2000dcc0
 800b3d8:	2000dcbc 	.word	0x2000dcbc
 800b3dc:	2000dc80 	.word	0x2000dc80
 800b3e0:	2000dcb8 	.word	0x2000dcb8
 800b3e4:	2000dcc4 	.word	0x2000dcc4
 800b3e8:	2000dcc8 	.word	0x2000dcc8
 800b3ec:	08012e39 	.word	0x08012e39
 800b3f0:	0800ba4d 	.word	0x0800ba4d
 800b3f4:	2000dc84 	.word	0x2000dc84
 800b3f8:	0800bb41 	.word	0x0800bb41
 800b3fc:	20000b28 	.word	0x20000b28
 800b400:	2000dc78 	.word	0x2000dc78
 800b404:	08021490 	.word	0x08021490

0800b408 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b08e      	sub	sp, #56	; 0x38
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b414:	2200      	movs	r2, #0
 800b416:	601a      	str	r2, [r3, #0]
 800b418:	605a      	str	r2, [r3, #4]
 800b41a:	609a      	str	r2, [r3, #8]
 800b41c:	60da      	str	r2, [r3, #12]
 800b41e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a4a      	ldr	r2, [pc, #296]	; (800b550 <HAL_ETH_MspInit+0x148>)
 800b426:	4293      	cmp	r3, r2
 800b428:	f040 808d 	bne.w	800b546 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b42c:	2300      	movs	r3, #0
 800b42e:	623b      	str	r3, [r7, #32]
 800b430:	4b48      	ldr	r3, [pc, #288]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b434:	4a47      	ldr	r2, [pc, #284]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b43a:	6313      	str	r3, [r2, #48]	; 0x30
 800b43c:	4b45      	ldr	r3, [pc, #276]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b444:	623b      	str	r3, [r7, #32]
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	2300      	movs	r3, #0
 800b44a:	61fb      	str	r3, [r7, #28]
 800b44c:	4b41      	ldr	r3, [pc, #260]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b450:	4a40      	ldr	r2, [pc, #256]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b452:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b456:	6313      	str	r3, [r2, #48]	; 0x30
 800b458:	4b3e      	ldr	r3, [pc, #248]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b45c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b460:	61fb      	str	r3, [r7, #28]
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	2300      	movs	r3, #0
 800b466:	61bb      	str	r3, [r7, #24]
 800b468:	4b3a      	ldr	r3, [pc, #232]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46c:	4a39      	ldr	r2, [pc, #228]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b46e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b472:	6313      	str	r3, [r2, #48]	; 0x30
 800b474:	4b37      	ldr	r3, [pc, #220]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b47c:	61bb      	str	r3, [r7, #24]
 800b47e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b480:	2300      	movs	r3, #0
 800b482:	617b      	str	r3, [r7, #20]
 800b484:	4b33      	ldr	r3, [pc, #204]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b488:	4a32      	ldr	r2, [pc, #200]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b48a:	f043 0304 	orr.w	r3, r3, #4
 800b48e:	6313      	str	r3, [r2, #48]	; 0x30
 800b490:	4b30      	ldr	r3, [pc, #192]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b494:	f003 0304 	and.w	r3, r3, #4
 800b498:	617b      	str	r3, [r7, #20]
 800b49a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b49c:	2300      	movs	r3, #0
 800b49e:	613b      	str	r3, [r7, #16]
 800b4a0:	4b2c      	ldr	r3, [pc, #176]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a4:	4a2b      	ldr	r2, [pc, #172]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b4a6:	f043 0301 	orr.w	r3, r3, #1
 800b4aa:	6313      	str	r3, [r2, #48]	; 0x30
 800b4ac:	4b29      	ldr	r3, [pc, #164]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b0:	f003 0301 	and.w	r3, r3, #1
 800b4b4:	613b      	str	r3, [r7, #16]
 800b4b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	60fb      	str	r3, [r7, #12]
 800b4bc:	4b25      	ldr	r3, [pc, #148]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4c0:	4a24      	ldr	r2, [pc, #144]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b4c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4c6:	6313      	str	r3, [r2, #48]	; 0x30
 800b4c8:	4b22      	ldr	r3, [pc, #136]	; (800b554 <HAL_ETH_MspInit+0x14c>)
 800b4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4d0:	60fb      	str	r3, [r7, #12]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b4d4:	2332      	movs	r3, #50	; 0x32
 800b4d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4d8:	2302      	movs	r3, #2
 800b4da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b4e4:	230b      	movs	r3, #11
 800b4e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b4e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	481a      	ldr	r0, [pc, #104]	; (800b558 <HAL_ETH_MspInit+0x150>)
 800b4f0:	f7f9 fda0 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800b4f4:	2386      	movs	r3, #134	; 0x86
 800b4f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4f8:	2302      	movs	r3, #2
 800b4fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b500:	2303      	movs	r3, #3
 800b502:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b504:	230b      	movs	r3, #11
 800b506:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b50c:	4619      	mov	r1, r3
 800b50e:	4813      	ldr	r0, [pc, #76]	; (800b55c <HAL_ETH_MspInit+0x154>)
 800b510:	f7f9 fd90 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800b514:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800b518:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b51a:	2302      	movs	r3, #2
 800b51c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b51e:	2300      	movs	r3, #0
 800b520:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b522:	2303      	movs	r3, #3
 800b524:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b526:	230b      	movs	r3, #11
 800b528:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b52a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b52e:	4619      	mov	r1, r3
 800b530:	480b      	ldr	r0, [pc, #44]	; (800b560 <HAL_ETH_MspInit+0x158>)
 800b532:	f7f9 fd7f 	bl	8005034 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 800b536:	2200      	movs	r2, #0
 800b538:	2106      	movs	r1, #6
 800b53a:	203d      	movs	r0, #61	; 0x3d
 800b53c:	f7f6 fe2e 	bl	800219c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b540:	203d      	movs	r0, #61	; 0x3d
 800b542:	f7f6 fe47 	bl	80021d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b546:	bf00      	nop
 800b548:	3738      	adds	r7, #56	; 0x38
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	40028000 	.word	0x40028000
 800b554:	40023800 	.word	0x40023800
 800b558:	40020800 	.word	0x40020800
 800b55c:	40020000 	.word	0x40020000
 800b560:	40021800 	.word	0x40021800

0800b564 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800b56c:	4b04      	ldr	r3, [pc, #16]	; (800b580 <HAL_ETH_RxCpltCallback+0x1c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4618      	mov	r0, r3
 800b572:	f004 fb75 	bl	800fc60 <osSemaphoreRelease>
}
 800b576:	bf00      	nop
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	20000b2c 	.word	0x20000b2c

0800b584 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b584:	b5b0      	push	{r4, r5, r7, lr}
 800b586:	b090      	sub	sp, #64	; 0x40
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800b58c:	2300      	movs	r3, #0
 800b58e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b590:	4b65      	ldr	r3, [pc, #404]	; (800b728 <low_level_init+0x1a4>)
 800b592:	4a66      	ldr	r2, [pc, #408]	; (800b72c <low_level_init+0x1a8>)
 800b594:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b596:	4b64      	ldr	r3, [pc, #400]	; (800b728 <low_level_init+0x1a4>)
 800b598:	2201      	movs	r2, #1
 800b59a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800b59c:	4b62      	ldr	r3, [pc, #392]	; (800b728 <low_level_init+0x1a4>)
 800b59e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b5a2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b5a4:	4b60      	ldr	r3, [pc, #384]	; (800b728 <low_level_init+0x1a4>)
 800b5a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5aa:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800b5ac:	4b5e      	ldr	r3, [pc, #376]	; (800b728 <low_level_init+0x1a4>)
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800b5b8:	2380      	movs	r3, #128	; 0x80
 800b5ba:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800b5be:	23e1      	movs	r3, #225	; 0xe1
 800b5c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800b5d6:	4a54      	ldr	r2, [pc, #336]	; (800b728 <low_level_init+0x1a4>)
 800b5d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b5dc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800b5de:	4b52      	ldr	r3, [pc, #328]	; (800b728 <low_level_init+0x1a4>)
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b5e4:	4b50      	ldr	r3, [pc, #320]	; (800b728 <low_level_init+0x1a4>)
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b5ea:	4b4f      	ldr	r3, [pc, #316]	; (800b728 <low_level_init+0x1a4>)
 800b5ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b5f0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b5f2:	484d      	ldr	r0, [pc, #308]	; (800b728 <low_level_init+0x1a4>)
 800b5f4:	f7f8 fb78 	bl	8003ce8 <HAL_ETH_Init>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800b5fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b602:	2b00      	cmp	r3, #0
 800b604:	d108      	bne.n	800b618 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b60c:	f043 0304 	orr.w	r3, r3, #4
 800b610:	b2da      	uxtb	r2, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b618:	2304      	movs	r3, #4
 800b61a:	4a45      	ldr	r2, [pc, #276]	; (800b730 <low_level_init+0x1ac>)
 800b61c:	4945      	ldr	r1, [pc, #276]	; (800b734 <low_level_init+0x1b0>)
 800b61e:	4842      	ldr	r0, [pc, #264]	; (800b728 <low_level_init+0x1a4>)
 800b620:	f7f8 fcfe 	bl	8004020 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800b624:	2304      	movs	r3, #4
 800b626:	4a44      	ldr	r2, [pc, #272]	; (800b738 <low_level_init+0x1b4>)
 800b628:	4944      	ldr	r1, [pc, #272]	; (800b73c <low_level_init+0x1b8>)
 800b62a:	483f      	ldr	r0, [pc, #252]	; (800b728 <low_level_init+0x1a4>)
 800b62c:	f7f8 fd61 	bl	80040f2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2206      	movs	r2, #6
 800b634:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b638:	4b3b      	ldr	r3, [pc, #236]	; (800b728 <low_level_init+0x1a4>)
 800b63a:	695b      	ldr	r3, [r3, #20]
 800b63c:	781a      	ldrb	r2, [r3, #0]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b644:	4b38      	ldr	r3, [pc, #224]	; (800b728 <low_level_init+0x1a4>)
 800b646:	695b      	ldr	r3, [r3, #20]
 800b648:	785a      	ldrb	r2, [r3, #1]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b650:	4b35      	ldr	r3, [pc, #212]	; (800b728 <low_level_init+0x1a4>)
 800b652:	695b      	ldr	r3, [r3, #20]
 800b654:	789a      	ldrb	r2, [r3, #2]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b65c:	4b32      	ldr	r3, [pc, #200]	; (800b728 <low_level_init+0x1a4>)
 800b65e:	695b      	ldr	r3, [r3, #20]
 800b660:	78da      	ldrb	r2, [r3, #3]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b668:	4b2f      	ldr	r3, [pc, #188]	; (800b728 <low_level_init+0x1a4>)
 800b66a:	695b      	ldr	r3, [r3, #20]
 800b66c:	791a      	ldrb	r2, [r3, #4]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b674:	4b2c      	ldr	r3, [pc, #176]	; (800b728 <low_level_init+0x1a4>)
 800b676:	695b      	ldr	r3, [r3, #20]
 800b678:	795a      	ldrb	r2, [r3, #5]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b686:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b68e:	f043 030a 	orr.w	r3, r3, #10
 800b692:	b2da      	uxtb	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800b69a:	2300      	movs	r3, #0
 800b69c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b69e:	2300      	movs	r3, #0
 800b6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800b6a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b6a6:	2101      	movs	r1, #1
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f004 fa59 	bl	800fb60 <osSemaphoreCreate>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	4a23      	ldr	r2, [pc, #140]	; (800b740 <low_level_init+0x1bc>)
 800b6b2:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b6b4:	4b23      	ldr	r3, [pc, #140]	; (800b744 <low_level_init+0x1c0>)
 800b6b6:	f107 040c 	add.w	r4, r7, #12
 800b6ba:	461d      	mov	r5, r3
 800b6bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b6be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b6c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b6c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800b6c8:	f107 030c 	add.w	r3, r7, #12
 800b6cc:	6879      	ldr	r1, [r7, #4]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f004 f949 	bl	800f966 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800b6d4:	4814      	ldr	r0, [pc, #80]	; (800b728 <low_level_init+0x1a4>)
 800b6d6:	f7f9 f834 	bl	8004742 <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800b6da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b6de:	461a      	mov	r2, r3
 800b6e0:	2111      	movs	r1, #17
 800b6e2:	4811      	ldr	r0, [pc, #68]	; (800b728 <low_level_init+0x1a4>)
 800b6e4:	f7f8 ff5f 	bl	80045a6 <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800b6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ea:	f043 0303 	orr.w	r3, r3, #3
 800b6ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	2111      	movs	r1, #17
 800b6f6:	480c      	ldr	r0, [pc, #48]	; (800b728 <low_level_init+0x1a4>)
 800b6f8:	f7f8 ffbd 	bl	8004676 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800b6fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b700:	461a      	mov	r2, r3
 800b702:	2112      	movs	r1, #18
 800b704:	4808      	ldr	r0, [pc, #32]	; (800b728 <low_level_init+0x1a4>)
 800b706:	f7f8 ff4e 	bl	80045a6 <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800b70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70c:	f043 0320 	orr.w	r3, r3, #32
 800b710:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800b712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b714:	461a      	mov	r2, r3
 800b716:	2112      	movs	r1, #18
 800b718:	4803      	ldr	r0, [pc, #12]	; (800b728 <low_level_init+0x1a4>)
 800b71a:	f7f8 ffac 	bl	8004676 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b71e:	bf00      	nop
 800b720:	3740      	adds	r7, #64	; 0x40
 800b722:	46bd      	mov	sp, r7
 800b724:	bdb0      	pop	{r4, r5, r7, pc}
 800b726:	bf00      	nop
 800b728:	2000f59c 	.word	0x2000f59c
 800b72c:	40028000 	.word	0x40028000
 800b730:	2000f5e4 	.word	0x2000f5e4
 800b734:	2000dccc 	.word	0x2000dccc
 800b738:	2000dd4c 	.word	0x2000dd4c
 800b73c:	2000f51c 	.word	0x2000f51c
 800b740:	20000b2c 	.word	0x20000b2c
 800b744:	080214b4 	.word	0x080214b4

0800b748 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b08a      	sub	sp, #40	; 0x28
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b752:	4b4b      	ldr	r3, [pc, #300]	; (800b880 <low_level_output+0x138>)
 800b754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800b75a:	2300      	movs	r3, #0
 800b75c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800b75e:	2300      	movs	r3, #0
 800b760:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800b766:	2300      	movs	r3, #0
 800b768:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800b76a:	4b45      	ldr	r3, [pc, #276]	; (800b880 <low_level_output+0x138>)
 800b76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800b770:	2300      	movs	r3, #0
 800b772:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	623b      	str	r3, [r7, #32]
 800b778:	e05a      	b.n	800b830 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	da03      	bge.n	800b78a <low_level_output+0x42>
      {
        errval = ERR_USE;
 800b782:	23f8      	movs	r3, #248	; 0xf8
 800b784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800b788:	e05c      	b.n	800b844 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800b78a:	6a3b      	ldr	r3, [r7, #32]
 800b78c:	895b      	ldrh	r3, [r3, #10]
 800b78e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800b790:	2300      	movs	r3, #0
 800b792:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b794:	e02f      	b.n	800b7f6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800b796:	69fa      	ldr	r2, [r7, #28]
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	18d0      	adds	r0, r2, r3
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	18d1      	adds	r1, r2, r3
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b7aa:	3304      	adds	r3, #4
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	f013 fdad 	bl	801f30c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	da03      	bge.n	800b7c8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800b7c0:	23f8      	movs	r3, #248	; 0xf8
 800b7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800b7c6:	e03d      	b.n	800b844 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b7d8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	1ad3      	subs	r3, r2, r3
 800b7e0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b7e4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b7f0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b800:	4293      	cmp	r3, r2
 800b802:	d8c8      	bhi.n	800b796 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b804:	69fa      	ldr	r2, [r7, #28]
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	18d0      	adds	r0, r2, r3
 800b80a:	6a3b      	ldr	r3, [r7, #32]
 800b80c:	685a      	ldr	r2, [r3, #4]
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	4413      	add	r3, r2
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	4619      	mov	r1, r3
 800b816:	f013 fd79 	bl	801f30c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b81a:	693a      	ldr	r2, [r7, #16]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	4413      	add	r3, r2
 800b820:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800b822:	697a      	ldr	r2, [r7, #20]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	4413      	add	r3, r2
 800b828:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	623b      	str	r3, [r7, #32]
 800b830:	6a3b      	ldr	r3, [r7, #32]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1a1      	bne.n	800b77a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800b836:	6979      	ldr	r1, [r7, #20]
 800b838:	4811      	ldr	r0, [pc, #68]	; (800b880 <low_level_output+0x138>)
 800b83a:	f7f8 fcc7 	bl	80041cc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800b83e:	2300      	movs	r3, #0
 800b840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800b844:	4b0e      	ldr	r3, [pc, #56]	; (800b880 <low_level_output+0x138>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b84c:	3314      	adds	r3, #20
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 0320 	and.w	r3, r3, #32
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00d      	beq.n	800b874 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800b858:	4b09      	ldr	r3, [pc, #36]	; (800b880 <low_level_output+0x138>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b860:	3314      	adds	r3, #20
 800b862:	2220      	movs	r2, #32
 800b864:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800b866:	4b06      	ldr	r3, [pc, #24]	; (800b880 <low_level_output+0x138>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b86e:	3304      	adds	r3, #4
 800b870:	2200      	movs	r2, #0
 800b872:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800b874:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3728      	adds	r7, #40	; 0x28
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	2000f59c 	.word	0x2000f59c

0800b884 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b08c      	sub	sp, #48	; 0x30
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b88c:	2300      	movs	r3, #0
 800b88e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800b890:	2300      	movs	r3, #0
 800b892:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800b898:	2300      	movs	r3, #0
 800b89a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800b8a8:	484f      	ldr	r0, [pc, #316]	; (800b9e8 <low_level_input+0x164>)
 800b8aa:	f7f8 fd79 	bl	80043a0 <HAL_ETH_GetReceivedFrame_IT>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d001      	beq.n	800b8b8 <low_level_input+0x34>

    return NULL;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	e092      	b.n	800b9de <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800b8b8:	4b4b      	ldr	r3, [pc, #300]	; (800b9e8 <low_level_input+0x164>)
 800b8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8bc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800b8be:	4b4a      	ldr	r3, [pc, #296]	; (800b9e8 <low_level_input+0x164>)
 800b8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800b8c4:	89fb      	ldrh	r3, [r7, #14]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d007      	beq.n	800b8da <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800b8ca:	89fb      	ldrh	r3, [r7, #14]
 800b8cc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	f009 fff4 	bl	80158c0 <pbuf_alloc>
 800b8d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800b8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d04b      	beq.n	800b978 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b8e0:	4b41      	ldr	r3, [pc, #260]	; (800b9e8 <low_level_input+0x164>)
 800b8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8ee:	e040      	b.n	800b972 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800b8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f2:	895b      	ldrh	r3, [r3, #10]
 800b8f4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b8fa:	e021      	b.n	800b940 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800b8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fe:	685a      	ldr	r2, [r3, #4]
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	18d0      	adds	r0, r2, r3
 800b904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	18d1      	adds	r1, r2, r3
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b910:	3304      	adds	r3, #4
 800b912:	461a      	mov	r2, r3
 800b914:	f013 fcfa 	bl	801f30c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b924:	69fa      	ldr	r2, [r7, #28]
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	4413      	add	r3, r2
 800b92a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b92e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b930:	69ba      	ldr	r2, [r7, #24]
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b93a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800b93c:	2300      	movs	r3, #0
 800b93e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b940:	697a      	ldr	r2, [r7, #20]
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	4413      	add	r3, r2
 800b946:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d8d6      	bhi.n	800b8fc <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b950:	685a      	ldr	r2, [r3, #4]
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	18d0      	adds	r0, r2, r3
 800b956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	4413      	add	r3, r2
 800b95c:	697a      	ldr	r2, [r7, #20]
 800b95e:	4619      	mov	r1, r3
 800b960:	f013 fcd4 	bl	801f30c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b964:	69fa      	ldr	r2, [r7, #28]
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	4413      	add	r3, r2
 800b96a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	62bb      	str	r3, [r7, #40]	; 0x28
 800b972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1bb      	bne.n	800b8f0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b978:	4b1b      	ldr	r3, [pc, #108]	; (800b9e8 <low_level_input+0x164>)
 800b97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b97e:	2300      	movs	r3, #0
 800b980:	613b      	str	r3, [r7, #16]
 800b982:	e00b      	b.n	800b99c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b98c:	6a3b      	ldr	r3, [r7, #32]
 800b98e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b990:	6a3b      	ldr	r3, [r7, #32]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	3301      	adds	r3, #1
 800b99a:	613b      	str	r3, [r7, #16]
 800b99c:	4b12      	ldr	r3, [pc, #72]	; (800b9e8 <low_level_input+0x164>)
 800b99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d3ee      	bcc.n	800b984 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800b9a6:	4b10      	ldr	r3, [pc, #64]	; (800b9e8 <low_level_input+0x164>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800b9ac:	4b0e      	ldr	r3, [pc, #56]	; (800b9e8 <low_level_input+0x164>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9b4:	3314      	adds	r3, #20
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00d      	beq.n	800b9dc <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800b9c0:	4b09      	ldr	r3, [pc, #36]	; (800b9e8 <low_level_input+0x164>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c8:	3314      	adds	r3, #20
 800b9ca:	2280      	movs	r2, #128	; 0x80
 800b9cc:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800b9ce:	4b06      	ldr	r3, [pc, #24]	; (800b9e8 <low_level_input+0x164>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9d6:	3308      	adds	r3, #8
 800b9d8:	2200      	movs	r2, #0
 800b9da:	601a      	str	r2, [r3, #0]
  }
  return p;
 800b9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3730      	adds	r7, #48	; 0x30
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	2000f59c 	.word	0x2000f59c

0800b9ec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b9f8:	4b12      	ldr	r3, [pc, #72]	; (800ba44 <ethernetif_input+0x58>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f04f 31ff 	mov.w	r1, #4294967295
 800ba00:	4618      	mov	r0, r3
 800ba02:	f004 f8df 	bl	800fbc4 <osSemaphoreWait>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d1f5      	bne.n	800b9f8 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800ba0c:	480e      	ldr	r0, [pc, #56]	; (800ba48 <ethernetif_input+0x5c>)
 800ba0e:	f013 fbe7 	bl	801f1e0 <sys_mutex_lock>
        p = low_level_input( netif );
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f7ff ff36 	bl	800b884 <low_level_input>
 800ba18:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00a      	beq.n	800ba36 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	68f9      	ldr	r1, [r7, #12]
 800ba26:	68b8      	ldr	r0, [r7, #8]
 800ba28:	4798      	blx	r3
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d002      	beq.n	800ba36 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800ba30:	68b8      	ldr	r0, [r7, #8]
 800ba32:	f00a fa3b 	bl	8015eac <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800ba36:	4804      	ldr	r0, [pc, #16]	; (800ba48 <ethernetif_input+0x5c>)
 800ba38:	f013 fbe1 	bl	801f1fe <sys_mutex_unlock>
      } while(p!=NULL);
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1e4      	bne.n	800ba0c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ba42:	e7d9      	b.n	800b9f8 <ethernetif_input+0xc>
 800ba44:	20000b2c 	.word	0x20000b2c
 800ba48:	20010df4 	.word	0x20010df4

0800ba4c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d106      	bne.n	800ba68 <ethernetif_init+0x1c>
 800ba5a:	4b0e      	ldr	r3, [pc, #56]	; (800ba94 <ethernetif_init+0x48>)
 800ba5c:	f240 2235 	movw	r2, #565	; 0x235
 800ba60:	490d      	ldr	r1, [pc, #52]	; (800ba98 <ethernetif_init+0x4c>)
 800ba62:	480e      	ldr	r0, [pc, #56]	; (800ba9c <ethernetif_init+0x50>)
 800ba64:	f013 fc82 	bl	801f36c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2273      	movs	r2, #115	; 0x73
 800ba6c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2274      	movs	r2, #116	; 0x74
 800ba74:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a09      	ldr	r2, [pc, #36]	; (800baa0 <ethernetif_init+0x54>)
 800ba7c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4a08      	ldr	r2, [pc, #32]	; (800baa4 <ethernetif_init+0x58>)
 800ba82:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f7ff fd7d 	bl	800b584 <low_level_init>

  return ERR_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	080214d0 	.word	0x080214d0
 800ba98:	080214ec 	.word	0x080214ec
 800ba9c:	080214fc 	.word	0x080214fc
 800baa0:	0801d38d 	.word	0x0801d38d
 800baa4:	0800b749 	.word	0x0800b749

0800baa8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800baac:	f7f6 fa8e 	bl	8001fcc <HAL_GetTick>
 800bab0:	4603      	mov	r3, r0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800bac8:	f107 0308 	add.w	r3, r7, #8
 800bacc:	461a      	mov	r2, r3
 800bace:	2101      	movs	r1, #1
 800bad0:	4819      	ldr	r0, [pc, #100]	; (800bb38 <ethernetif_set_link+0x80>)
 800bad2:	f7f8 fd68 	bl	80045a6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	f003 0304 	and.w	r3, r3, #4
 800badc:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bae6:	f003 0304 	and.w	r3, r3, #4
 800baea:	2b00      	cmp	r3, #0
 800baec:	d108      	bne.n	800bb00 <ethernetif_set_link+0x48>
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d005      	beq.n	800bb00 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f009 fdb3 	bl	8015664 <netif_set_link_up>
 800bafe:	e011      	b.n	800bb24 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb08:	089b      	lsrs	r3, r3, #2
 800bb0a:	f003 0301 	and.w	r3, r3, #1
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d007      	beq.n	800bb24 <ethernetif_set_link+0x6c>
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d104      	bne.n	800bb24 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f009 fdd4 	bl	80156cc <netif_set_link_down>
    }
	xEventGroupSetBits(Event_Handle,KEY1_EVENT);
 800bb24:	4b05      	ldr	r3, [pc, #20]	; (800bb3c <ethernetif_set_link+0x84>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2101      	movs	r1, #1
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f004 faa6 	bl	801007c <xEventGroupSetBits>

    /* Suspend thread for 200 ms */
    osDelay(200);
 800bb30:	20c8      	movs	r0, #200	; 0xc8
 800bb32:	f003 ff64 	bl	800f9fe <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800bb36:	e7c7      	b.n	800bac8 <ethernetif_set_link+0x10>
 800bb38:	2000f59c 	.word	0x2000f59c
 800bb3c:	20000b1c 	.word	0x20000b1c

0800bb40 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb56:	089b      	lsrs	r3, r3, #2
 800bb58:	f003 0301 	and.w	r3, r3, #1
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d05d      	beq.n	800bc1e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800bb62:	4b34      	ldr	r3, [pc, #208]	; (800bc34 <ethernetif_update_config+0xf4>)
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d03f      	beq.n	800bbea <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800bb6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bb6e:	2100      	movs	r1, #0
 800bb70:	4830      	ldr	r0, [pc, #192]	; (800bc34 <ethernetif_update_config+0xf4>)
 800bb72:	f7f8 fd80 	bl	8004676 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800bb76:	f7f6 fa29 	bl	8001fcc <HAL_GetTick>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800bb7e:	f107 0308 	add.w	r3, r7, #8
 800bb82:	461a      	mov	r2, r3
 800bb84:	2101      	movs	r1, #1
 800bb86:	482b      	ldr	r0, [pc, #172]	; (800bc34 <ethernetif_update_config+0xf4>)
 800bb88:	f7f8 fd0d 	bl	80045a6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800bb8c:	f7f6 fa1e 	bl	8001fcc <HAL_GetTick>
 800bb90:	4602      	mov	r2, r0
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	1ad3      	subs	r3, r2, r3
 800bb96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb9a:	d828      	bhi.n	800bbee <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	f003 0320 	and.w	r3, r3, #32
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d0eb      	beq.n	800bb7e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800bba6:	f107 0308 	add.w	r3, r7, #8
 800bbaa:	461a      	mov	r2, r3
 800bbac:	2131      	movs	r1, #49	; 0x31
 800bbae:	4821      	ldr	r0, [pc, #132]	; (800bc34 <ethernetif_update_config+0xf4>)
 800bbb0:	f7f8 fcf9 	bl	80045a6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	f003 0310 	and.w	r3, r3, #16
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d004      	beq.n	800bbc8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800bbbe:	4b1d      	ldr	r3, [pc, #116]	; (800bc34 <ethernetif_update_config+0xf4>)
 800bbc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbc4:	60da      	str	r2, [r3, #12]
 800bbc6:	e002      	b.n	800bbce <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800bbc8:	4b1a      	ldr	r3, [pc, #104]	; (800bc34 <ethernetif_update_config+0xf4>)
 800bbca:	2200      	movs	r2, #0
 800bbcc:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	f003 0304 	and.w	r3, r3, #4
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d003      	beq.n	800bbe0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800bbd8:	4b16      	ldr	r3, [pc, #88]	; (800bc34 <ethernetif_update_config+0xf4>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	609a      	str	r2, [r3, #8]
 800bbde:	e016      	b.n	800bc0e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800bbe0:	4b14      	ldr	r3, [pc, #80]	; (800bc34 <ethernetif_update_config+0xf4>)
 800bbe2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bbe6:	609a      	str	r2, [r3, #8]
 800bbe8:	e011      	b.n	800bc0e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800bbea:	bf00      	nop
 800bbec:	e000      	b.n	800bbf0 <ethernetif_update_config+0xb0>
          goto error;
 800bbee:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800bbf0:	4b10      	ldr	r3, [pc, #64]	; (800bc34 <ethernetif_update_config+0xf4>)
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	08db      	lsrs	r3, r3, #3
 800bbf6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800bbf8:	4b0e      	ldr	r3, [pc, #56]	; (800bc34 <ethernetif_update_config+0xf4>)
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	085b      	lsrs	r3, r3, #1
 800bbfe:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800bc00:	4313      	orrs	r3, r2
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	461a      	mov	r2, r3
 800bc06:	2100      	movs	r1, #0
 800bc08:	480a      	ldr	r0, [pc, #40]	; (800bc34 <ethernetif_update_config+0xf4>)
 800bc0a:	f7f8 fd34 	bl	8004676 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800bc0e:	2100      	movs	r1, #0
 800bc10:	4808      	ldr	r0, [pc, #32]	; (800bc34 <ethernetif_update_config+0xf4>)
 800bc12:	f7f8 fdf5 	bl	8004800 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800bc16:	4807      	ldr	r0, [pc, #28]	; (800bc34 <ethernetif_update_config+0xf4>)
 800bc18:	f7f8 fd93 	bl	8004742 <HAL_ETH_Start>
 800bc1c:	e002      	b.n	800bc24 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800bc1e:	4805      	ldr	r0, [pc, #20]	; (800bc34 <ethernetif_update_config+0xf4>)
 800bc20:	f7f8 fdbe 	bl	80047a0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f807 	bl	800bc38 <ethernetif_notify_conn_changed>
}
 800bc2a:	bf00      	nop
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	2000f59c 	.word	0x2000f59c

0800bc38 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	4603      	mov	r3, r0
 800bc54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bc56:	79fb      	ldrb	r3, [r7, #7]
 800bc58:	4a08      	ldr	r2, [pc, #32]	; (800bc7c <disk_status+0x30>)
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	4413      	add	r3, r2
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	79fa      	ldrb	r2, [r7, #7]
 800bc64:	4905      	ldr	r1, [pc, #20]	; (800bc7c <disk_status+0x30>)
 800bc66:	440a      	add	r2, r1
 800bc68:	7a12      	ldrb	r2, [r2, #8]
 800bc6a:	4610      	mov	r0, r2
 800bc6c:	4798      	blx	r3
 800bc6e:	4603      	mov	r3, r0
 800bc70:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	20000b58 	.word	0x20000b58

0800bc80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	4603      	mov	r3, r0
 800bc88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bc8e:	79fb      	ldrb	r3, [r7, #7]
 800bc90:	4a0d      	ldr	r2, [pc, #52]	; (800bcc8 <disk_initialize+0x48>)
 800bc92:	5cd3      	ldrb	r3, [r2, r3]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d111      	bne.n	800bcbc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bc98:	79fb      	ldrb	r3, [r7, #7]
 800bc9a:	4a0b      	ldr	r2, [pc, #44]	; (800bcc8 <disk_initialize+0x48>)
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bca0:	79fb      	ldrb	r3, [r7, #7]
 800bca2:	4a09      	ldr	r2, [pc, #36]	; (800bcc8 <disk_initialize+0x48>)
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4413      	add	r3, r2
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	79fa      	ldrb	r2, [r7, #7]
 800bcae:	4906      	ldr	r1, [pc, #24]	; (800bcc8 <disk_initialize+0x48>)
 800bcb0:	440a      	add	r2, r1
 800bcb2:	7a12      	ldrb	r2, [r2, #8]
 800bcb4:	4610      	mov	r0, r2
 800bcb6:	4798      	blx	r3
 800bcb8:	4603      	mov	r3, r0
 800bcba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	20000b58 	.word	0x20000b58

0800bccc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bccc:	b590      	push	{r4, r7, lr}
 800bcce:	b087      	sub	sp, #28
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60b9      	str	r1, [r7, #8]
 800bcd4:	607a      	str	r2, [r7, #4]
 800bcd6:	603b      	str	r3, [r7, #0]
 800bcd8:	4603      	mov	r3, r0
 800bcda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
 800bcde:	4a0a      	ldr	r2, [pc, #40]	; (800bd08 <disk_read+0x3c>)
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	4413      	add	r3, r2
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	689c      	ldr	r4, [r3, #8]
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
 800bcea:	4a07      	ldr	r2, [pc, #28]	; (800bd08 <disk_read+0x3c>)
 800bcec:	4413      	add	r3, r2
 800bcee:	7a18      	ldrb	r0, [r3, #8]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	68b9      	ldr	r1, [r7, #8]
 800bcf6:	47a0      	blx	r4
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	75fb      	strb	r3, [r7, #23]
  return res;
 800bcfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	371c      	adds	r7, #28
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd90      	pop	{r4, r7, pc}
 800bd06:	bf00      	nop
 800bd08:	20000b58 	.word	0x20000b58

0800bd0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bd0c:	b590      	push	{r4, r7, lr}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60b9      	str	r1, [r7, #8]
 800bd14:	607a      	str	r2, [r7, #4]
 800bd16:	603b      	str	r3, [r7, #0]
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	4a0a      	ldr	r2, [pc, #40]	; (800bd48 <disk_write+0x3c>)
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4413      	add	r3, r2
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	68dc      	ldr	r4, [r3, #12]
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
 800bd2a:	4a07      	ldr	r2, [pc, #28]	; (800bd48 <disk_write+0x3c>)
 800bd2c:	4413      	add	r3, r2
 800bd2e:	7a18      	ldrb	r0, [r3, #8]
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	68b9      	ldr	r1, [r7, #8]
 800bd36:	47a0      	blx	r4
 800bd38:	4603      	mov	r3, r0
 800bd3a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bd3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	371c      	adds	r7, #28
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd90      	pop	{r4, r7, pc}
 800bd46:	bf00      	nop
 800bd48:	20000b58 	.word	0x20000b58

0800bd4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	4603      	mov	r3, r0
 800bd54:	603a      	str	r2, [r7, #0]
 800bd56:	71fb      	strb	r3, [r7, #7]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bd5c:	79fb      	ldrb	r3, [r7, #7]
 800bd5e:	4a09      	ldr	r2, [pc, #36]	; (800bd84 <disk_ioctl+0x38>)
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	4413      	add	r3, r2
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	79fa      	ldrb	r2, [r7, #7]
 800bd6a:	4906      	ldr	r1, [pc, #24]	; (800bd84 <disk_ioctl+0x38>)
 800bd6c:	440a      	add	r2, r1
 800bd6e:	7a10      	ldrb	r0, [r2, #8]
 800bd70:	79b9      	ldrb	r1, [r7, #6]
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	4798      	blx	r3
 800bd76:	4603      	mov	r3, r0
 800bd78:	73fb      	strb	r3, [r7, #15]
  return res;
 800bd7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	20000b58 	.word	0x20000b58

0800bd88 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	3301      	adds	r3, #1
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bd98:	89fb      	ldrh	r3, [r7, #14]
 800bd9a:	021b      	lsls	r3, r3, #8
 800bd9c:	b21a      	sxth	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	b21b      	sxth	r3, r3
 800bda4:	4313      	orrs	r3, r2
 800bda6:	b21b      	sxth	r3, r3
 800bda8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bdaa:	89fb      	ldrh	r3, [r7, #14]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3714      	adds	r7, #20
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	3303      	adds	r3, #3
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	021b      	lsls	r3, r3, #8
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	3202      	adds	r2, #2
 800bdd0:	7812      	ldrb	r2, [r2, #0]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	021b      	lsls	r3, r3, #8
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	3201      	adds	r2, #1
 800bdde:	7812      	ldrb	r2, [r2, #0]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	021b      	lsls	r3, r3, #8
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	7812      	ldrb	r2, [r2, #0]
 800bdec:	4313      	orrs	r3, r2
 800bdee:	60fb      	str	r3, [r7, #12]
	return rv;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr

0800bdfe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bdfe:	b480      	push	{r7}
 800be00:	b083      	sub	sp, #12
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
 800be06:	460b      	mov	r3, r1
 800be08:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	607a      	str	r2, [r7, #4]
 800be10:	887a      	ldrh	r2, [r7, #2]
 800be12:	b2d2      	uxtb	r2, r2
 800be14:	701a      	strb	r2, [r3, #0]
 800be16:	887b      	ldrh	r3, [r7, #2]
 800be18:	0a1b      	lsrs	r3, r3, #8
 800be1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	1c5a      	adds	r2, r3, #1
 800be20:	607a      	str	r2, [r7, #4]
 800be22:	887a      	ldrh	r2, [r7, #2]
 800be24:	b2d2      	uxtb	r2, r2
 800be26:	701a      	strb	r2, [r3, #0]
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	1c5a      	adds	r2, r3, #1
 800be42:	607a      	str	r2, [r7, #4]
 800be44:	683a      	ldr	r2, [r7, #0]
 800be46:	b2d2      	uxtb	r2, r2
 800be48:	701a      	strb	r2, [r3, #0]
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	0a1b      	lsrs	r3, r3, #8
 800be4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	1c5a      	adds	r2, r3, #1
 800be54:	607a      	str	r2, [r7, #4]
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	b2d2      	uxtb	r2, r2
 800be5a:	701a      	strb	r2, [r3, #0]
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	0a1b      	lsrs	r3, r3, #8
 800be60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	1c5a      	adds	r2, r3, #1
 800be66:	607a      	str	r2, [r7, #4]
 800be68:	683a      	ldr	r2, [r7, #0]
 800be6a:	b2d2      	uxtb	r2, r2
 800be6c:	701a      	strb	r2, [r3, #0]
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	0a1b      	lsrs	r3, r3, #8
 800be72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	1c5a      	adds	r2, r3, #1
 800be78:	607a      	str	r2, [r7, #4]
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	b2d2      	uxtb	r2, r2
 800be7e:	701a      	strb	r2, [r3, #0]
}
 800be80:	bf00      	nop
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr

0800be8c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800be8c:	b480      	push	{r7}
 800be8e:	b087      	sub	sp, #28
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00d      	beq.n	800bec2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bea6:	693a      	ldr	r2, [r7, #16]
 800bea8:	1c53      	adds	r3, r2, #1
 800beaa:	613b      	str	r3, [r7, #16]
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	1c59      	adds	r1, r3, #1
 800beb0:	6179      	str	r1, [r7, #20]
 800beb2:	7812      	ldrb	r2, [r2, #0]
 800beb4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	3b01      	subs	r3, #1
 800beba:	607b      	str	r3, [r7, #4]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1f1      	bne.n	800bea6 <mem_cpy+0x1a>
	}
}
 800bec2:	bf00      	nop
 800bec4:	371c      	adds	r7, #28
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bece:	b480      	push	{r7}
 800bed0:	b087      	sub	sp, #28
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	60f8      	str	r0, [r7, #12]
 800bed6:	60b9      	str	r1, [r7, #8]
 800bed8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	1c5a      	adds	r2, r3, #1
 800bee2:	617a      	str	r2, [r7, #20]
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	b2d2      	uxtb	r2, r2
 800bee8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	3b01      	subs	r3, #1
 800beee:	607b      	str	r3, [r7, #4]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1f3      	bne.n	800bede <mem_set+0x10>
}
 800bef6:	bf00      	nop
 800bef8:	bf00      	nop
 800befa:	371c      	adds	r7, #28
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bf04:	b480      	push	{r7}
 800bf06:	b089      	sub	sp, #36	; 0x24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	61fb      	str	r3, [r7, #28]
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	1c5a      	adds	r2, r3, #1
 800bf20:	61fa      	str	r2, [r7, #28]
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	4619      	mov	r1, r3
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	1c5a      	adds	r2, r3, #1
 800bf2a:	61ba      	str	r2, [r7, #24]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	1acb      	subs	r3, r1, r3
 800bf30:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	3b01      	subs	r3, #1
 800bf36:	607b      	str	r3, [r7, #4]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d002      	beq.n	800bf44 <mem_cmp+0x40>
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d0eb      	beq.n	800bf1c <mem_cmp+0x18>

	return r;
 800bf44:	697b      	ldr	r3, [r7, #20]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3724      	adds	r7, #36	; 0x24
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr

0800bf52 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bf52:	b480      	push	{r7}
 800bf54:	b083      	sub	sp, #12
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bf5c:	e002      	b.n	800bf64 <chk_chr+0x12>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	3301      	adds	r3, #1
 800bf62:	607b      	str	r3, [r7, #4]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d005      	beq.n	800bf78 <chk_chr+0x26>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	461a      	mov	r2, r3
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d1f2      	bne.n	800bf5e <chk_chr+0xc>
	return *str;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d009      	beq.n	800bfaa <lock_fs+0x22>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f003 fc76 	bl	800f88c <ff_req_grant>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <lock_fs+0x22>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e000      	b.n	800bfac <lock_fs+0x24>
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00d      	beq.n	800bfe2 <unlock_fs+0x2e>
 800bfc6:	78fb      	ldrb	r3, [r7, #3]
 800bfc8:	2b0c      	cmp	r3, #12
 800bfca:	d00a      	beq.n	800bfe2 <unlock_fs+0x2e>
 800bfcc:	78fb      	ldrb	r3, [r7, #3]
 800bfce:	2b0b      	cmp	r3, #11
 800bfd0:	d007      	beq.n	800bfe2 <unlock_fs+0x2e>
 800bfd2:	78fb      	ldrb	r3, [r7, #3]
 800bfd4:	2b0f      	cmp	r3, #15
 800bfd6:	d004      	beq.n	800bfe2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f003 fc6a 	bl	800f8b6 <ff_rel_grant>
	}
}
 800bfe2:	bf00      	nop
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
	...

0800bfec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bff6:	2300      	movs	r3, #0
 800bff8:	60bb      	str	r3, [r7, #8]
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	60fb      	str	r3, [r7, #12]
 800bffe:	e029      	b.n	800c054 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c000:	4a27      	ldr	r2, [pc, #156]	; (800c0a0 <chk_lock+0xb4>)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	011b      	lsls	r3, r3, #4
 800c006:	4413      	add	r3, r2
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d01d      	beq.n	800c04a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c00e:	4a24      	ldr	r2, [pc, #144]	; (800c0a0 <chk_lock+0xb4>)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	011b      	lsls	r3, r3, #4
 800c014:	4413      	add	r3, r2
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d116      	bne.n	800c04e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c020:	4a1f      	ldr	r2, [pc, #124]	; (800c0a0 <chk_lock+0xb4>)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	011b      	lsls	r3, r3, #4
 800c026:	4413      	add	r3, r2
 800c028:	3304      	adds	r3, #4
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c030:	429a      	cmp	r2, r3
 800c032:	d10c      	bne.n	800c04e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c034:	4a1a      	ldr	r2, [pc, #104]	; (800c0a0 <chk_lock+0xb4>)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	011b      	lsls	r3, r3, #4
 800c03a:	4413      	add	r3, r2
 800c03c:	3308      	adds	r3, #8
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c044:	429a      	cmp	r2, r3
 800c046:	d102      	bne.n	800c04e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c048:	e007      	b.n	800c05a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c04a:	2301      	movs	r3, #1
 800c04c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3301      	adds	r3, #1
 800c052:	60fb      	str	r3, [r7, #12]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d9d2      	bls.n	800c000 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	d109      	bne.n	800c074 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d102      	bne.n	800c06c <chk_lock+0x80>
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	2b02      	cmp	r3, #2
 800c06a:	d101      	bne.n	800c070 <chk_lock+0x84>
 800c06c:	2300      	movs	r3, #0
 800c06e:	e010      	b.n	800c092 <chk_lock+0xa6>
 800c070:	2312      	movs	r3, #18
 800c072:	e00e      	b.n	800c092 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d108      	bne.n	800c08c <chk_lock+0xa0>
 800c07a:	4a09      	ldr	r2, [pc, #36]	; (800c0a0 <chk_lock+0xb4>)
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	011b      	lsls	r3, r3, #4
 800c080:	4413      	add	r3, r2
 800c082:	330c      	adds	r3, #12
 800c084:	881b      	ldrh	r3, [r3, #0]
 800c086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c08a:	d101      	bne.n	800c090 <chk_lock+0xa4>
 800c08c:	2310      	movs	r3, #16
 800c08e:	e000      	b.n	800c092 <chk_lock+0xa6>
 800c090:	2300      	movs	r3, #0
}
 800c092:	4618      	mov	r0, r3
 800c094:	3714      	adds	r7, #20
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	20000b38 	.word	0x20000b38

0800c0a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	607b      	str	r3, [r7, #4]
 800c0ae:	e002      	b.n	800c0b6 <enq_lock+0x12>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	607b      	str	r3, [r7, #4]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d806      	bhi.n	800c0ca <enq_lock+0x26>
 800c0bc:	4a09      	ldr	r2, [pc, #36]	; (800c0e4 <enq_lock+0x40>)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	011b      	lsls	r3, r3, #4
 800c0c2:	4413      	add	r3, r2
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1f2      	bne.n	800c0b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	bf14      	ite	ne
 800c0d0:	2301      	movne	r3, #1
 800c0d2:	2300      	moveq	r3, #0
 800c0d4:	b2db      	uxtb	r3, r3
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	370c      	adds	r7, #12
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	20000b38 	.word	0x20000b38

0800c0e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60fb      	str	r3, [r7, #12]
 800c0f6:	e01f      	b.n	800c138 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c0f8:	4a41      	ldr	r2, [pc, #260]	; (800c200 <inc_lock+0x118>)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	011b      	lsls	r3, r3, #4
 800c0fe:	4413      	add	r3, r2
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	429a      	cmp	r2, r3
 800c108:	d113      	bne.n	800c132 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c10a:	4a3d      	ldr	r2, [pc, #244]	; (800c200 <inc_lock+0x118>)
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	011b      	lsls	r3, r3, #4
 800c110:	4413      	add	r3, r2
 800c112:	3304      	adds	r3, #4
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d109      	bne.n	800c132 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c11e:	4a38      	ldr	r2, [pc, #224]	; (800c200 <inc_lock+0x118>)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	011b      	lsls	r3, r3, #4
 800c124:	4413      	add	r3, r2
 800c126:	3308      	adds	r3, #8
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c12e:	429a      	cmp	r2, r3
 800c130:	d006      	beq.n	800c140 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	3301      	adds	r3, #1
 800c136:	60fb      	str	r3, [r7, #12]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d9dc      	bls.n	800c0f8 <inc_lock+0x10>
 800c13e:	e000      	b.n	800c142 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c140:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2b02      	cmp	r3, #2
 800c146:	d132      	bne.n	800c1ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c148:	2300      	movs	r3, #0
 800c14a:	60fb      	str	r3, [r7, #12]
 800c14c:	e002      	b.n	800c154 <inc_lock+0x6c>
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	3301      	adds	r3, #1
 800c152:	60fb      	str	r3, [r7, #12]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d806      	bhi.n	800c168 <inc_lock+0x80>
 800c15a:	4a29      	ldr	r2, [pc, #164]	; (800c200 <inc_lock+0x118>)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	011b      	lsls	r3, r3, #4
 800c160:	4413      	add	r3, r2
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1f2      	bne.n	800c14e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d101      	bne.n	800c172 <inc_lock+0x8a>
 800c16e:	2300      	movs	r3, #0
 800c170:	e040      	b.n	800c1f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	4922      	ldr	r1, [pc, #136]	; (800c200 <inc_lock+0x118>)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	011b      	lsls	r3, r3, #4
 800c17c:	440b      	add	r3, r1
 800c17e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	689a      	ldr	r2, [r3, #8]
 800c184:	491e      	ldr	r1, [pc, #120]	; (800c200 <inc_lock+0x118>)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	011b      	lsls	r3, r3, #4
 800c18a:	440b      	add	r3, r1
 800c18c:	3304      	adds	r3, #4
 800c18e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	695a      	ldr	r2, [r3, #20]
 800c194:	491a      	ldr	r1, [pc, #104]	; (800c200 <inc_lock+0x118>)
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	011b      	lsls	r3, r3, #4
 800c19a:	440b      	add	r3, r1
 800c19c:	3308      	adds	r3, #8
 800c19e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c1a0:	4a17      	ldr	r2, [pc, #92]	; (800c200 <inc_lock+0x118>)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	011b      	lsls	r3, r3, #4
 800c1a6:	4413      	add	r3, r2
 800c1a8:	330c      	adds	r3, #12
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d009      	beq.n	800c1c8 <inc_lock+0xe0>
 800c1b4:	4a12      	ldr	r2, [pc, #72]	; (800c200 <inc_lock+0x118>)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	011b      	lsls	r3, r3, #4
 800c1ba:	4413      	add	r3, r2
 800c1bc:	330c      	adds	r3, #12
 800c1be:	881b      	ldrh	r3, [r3, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d001      	beq.n	800c1c8 <inc_lock+0xe0>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	e015      	b.n	800c1f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d108      	bne.n	800c1e0 <inc_lock+0xf8>
 800c1ce:	4a0c      	ldr	r2, [pc, #48]	; (800c200 <inc_lock+0x118>)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	011b      	lsls	r3, r3, #4
 800c1d4:	4413      	add	r3, r2
 800c1d6:	330c      	adds	r3, #12
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	b29a      	uxth	r2, r3
 800c1de:	e001      	b.n	800c1e4 <inc_lock+0xfc>
 800c1e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1e4:	4906      	ldr	r1, [pc, #24]	; (800c200 <inc_lock+0x118>)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	011b      	lsls	r3, r3, #4
 800c1ea:	440b      	add	r3, r1
 800c1ec:	330c      	adds	r3, #12
 800c1ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	3301      	adds	r3, #1
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3714      	adds	r7, #20
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr
 800c200:	20000b38 	.word	0x20000b38

0800c204 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	3b01      	subs	r3, #1
 800c210:	607b      	str	r3, [r7, #4]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b01      	cmp	r3, #1
 800c216:	d825      	bhi.n	800c264 <dec_lock+0x60>
		n = Files[i].ctr;
 800c218:	4a17      	ldr	r2, [pc, #92]	; (800c278 <dec_lock+0x74>)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	011b      	lsls	r3, r3, #4
 800c21e:	4413      	add	r3, r2
 800c220:	330c      	adds	r3, #12
 800c222:	881b      	ldrh	r3, [r3, #0]
 800c224:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c226:	89fb      	ldrh	r3, [r7, #14]
 800c228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c22c:	d101      	bne.n	800c232 <dec_lock+0x2e>
 800c22e:	2300      	movs	r3, #0
 800c230:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c232:	89fb      	ldrh	r3, [r7, #14]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <dec_lock+0x3a>
 800c238:	89fb      	ldrh	r3, [r7, #14]
 800c23a:	3b01      	subs	r3, #1
 800c23c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c23e:	4a0e      	ldr	r2, [pc, #56]	; (800c278 <dec_lock+0x74>)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	011b      	lsls	r3, r3, #4
 800c244:	4413      	add	r3, r2
 800c246:	330c      	adds	r3, #12
 800c248:	89fa      	ldrh	r2, [r7, #14]
 800c24a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c24c:	89fb      	ldrh	r3, [r7, #14]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d105      	bne.n	800c25e <dec_lock+0x5a>
 800c252:	4a09      	ldr	r2, [pc, #36]	; (800c278 <dec_lock+0x74>)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	011b      	lsls	r3, r3, #4
 800c258:	4413      	add	r3, r2
 800c25a:	2200      	movs	r2, #0
 800c25c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c25e:	2300      	movs	r3, #0
 800c260:	737b      	strb	r3, [r7, #13]
 800c262:	e001      	b.n	800c268 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c264:	2302      	movs	r3, #2
 800c266:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c268:	7b7b      	ldrb	r3, [r7, #13]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3714      	adds	r7, #20
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	20000b38 	.word	0x20000b38

0800c27c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c284:	2300      	movs	r3, #0
 800c286:	60fb      	str	r3, [r7, #12]
 800c288:	e010      	b.n	800c2ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c28a:	4a0d      	ldr	r2, [pc, #52]	; (800c2c0 <clear_lock+0x44>)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	011b      	lsls	r3, r3, #4
 800c290:	4413      	add	r3, r2
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	429a      	cmp	r2, r3
 800c298:	d105      	bne.n	800c2a6 <clear_lock+0x2a>
 800c29a:	4a09      	ldr	r2, [pc, #36]	; (800c2c0 <clear_lock+0x44>)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	011b      	lsls	r3, r3, #4
 800c2a0:	4413      	add	r3, r2
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	60fb      	str	r3, [r7, #12]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d9eb      	bls.n	800c28a <clear_lock+0xe>
	}
}
 800c2b2:	bf00      	nop
 800c2b4:	bf00      	nop
 800c2b6:	3714      	adds	r7, #20
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr
 800c2c0:	20000b38 	.word	0x20000b38

0800c2c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b086      	sub	sp, #24
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	78db      	ldrb	r3, [r3, #3]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d034      	beq.n	800c342 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	7858      	ldrb	r0, [r3, #1]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	697a      	ldr	r2, [r7, #20]
 800c2ec:	f7ff fd0e 	bl	800bd0c <disk_write>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d002      	beq.n	800c2fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	73fb      	strb	r3, [r7, #15]
 800c2fa:	e022      	b.n	800c342 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c306:	697a      	ldr	r2, [r7, #20]
 800c308:	1ad2      	subs	r2, r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6a1b      	ldr	r3, [r3, #32]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d217      	bcs.n	800c342 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	789b      	ldrb	r3, [r3, #2]
 800c316:	613b      	str	r3, [r7, #16]
 800c318:	e010      	b.n	800c33c <sync_window+0x78>
					wsect += fs->fsize;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a1b      	ldr	r3, [r3, #32]
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	4413      	add	r3, r2
 800c322:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	7858      	ldrb	r0, [r3, #1]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c32e:	2301      	movs	r3, #1
 800c330:	697a      	ldr	r2, [r7, #20]
 800c332:	f7ff fceb 	bl	800bd0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	3b01      	subs	r3, #1
 800c33a:	613b      	str	r3, [r7, #16]
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d8eb      	bhi.n	800c31a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c342:	7bfb      	ldrb	r3, [r7, #15]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3718      	adds	r7, #24
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c356:	2300      	movs	r3, #0
 800c358:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c35e:	683a      	ldr	r2, [r7, #0]
 800c360:	429a      	cmp	r2, r3
 800c362:	d01b      	beq.n	800c39c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f7ff ffad 	bl	800c2c4 <sync_window>
 800c36a:	4603      	mov	r3, r0
 800c36c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c36e:	7bfb      	ldrb	r3, [r7, #15]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d113      	bne.n	800c39c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	7858      	ldrb	r0, [r3, #1]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c37e:	2301      	movs	r3, #1
 800c380:	683a      	ldr	r2, [r7, #0]
 800c382:	f7ff fca3 	bl	800bccc <disk_read>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d004      	beq.n	800c396 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c38c:	f04f 33ff 	mov.w	r3, #4294967295
 800c390:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c392:	2301      	movs	r3, #1
 800c394:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
	...

0800c3a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f7ff ff87 	bl	800c2c4 <sync_window>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c3ba:	7bfb      	ldrb	r3, [r7, #15]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d158      	bne.n	800c472 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	2b03      	cmp	r3, #3
 800c3c6:	d148      	bne.n	800c45a <sync_fs+0xb2>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	791b      	ldrb	r3, [r3, #4]
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d144      	bne.n	800c45a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	3338      	adds	r3, #56	; 0x38
 800c3d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3d8:	2100      	movs	r1, #0
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7ff fd77 	bl	800bece <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3338      	adds	r3, #56	; 0x38
 800c3e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c3e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7ff fd06 	bl	800bdfe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	3338      	adds	r3, #56	; 0x38
 800c3f6:	4921      	ldr	r1, [pc, #132]	; (800c47c <sync_fs+0xd4>)
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7ff fd1b 	bl	800be34 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	3338      	adds	r3, #56	; 0x38
 800c402:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c406:	491e      	ldr	r1, [pc, #120]	; (800c480 <sync_fs+0xd8>)
 800c408:	4618      	mov	r0, r3
 800c40a:	f7ff fd13 	bl	800be34 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	3338      	adds	r3, #56	; 0x38
 800c412:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	699b      	ldr	r3, [r3, #24]
 800c41a:	4619      	mov	r1, r3
 800c41c:	4610      	mov	r0, r2
 800c41e:	f7ff fd09 	bl	800be34 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	3338      	adds	r3, #56	; 0x38
 800c426:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	695b      	ldr	r3, [r3, #20]
 800c42e:	4619      	mov	r1, r3
 800c430:	4610      	mov	r0, r2
 800c432:	f7ff fcff 	bl	800be34 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c43a:	1c5a      	adds	r2, r3, #1
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	7858      	ldrb	r0, [r3, #1]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c44e:	2301      	movs	r3, #1
 800c450:	f7ff fc5c 	bl	800bd0c <disk_write>
			fs->fsi_flag = 0;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	785b      	ldrb	r3, [r3, #1]
 800c45e:	2200      	movs	r2, #0
 800c460:	2100      	movs	r1, #0
 800c462:	4618      	mov	r0, r3
 800c464:	f7ff fc72 	bl	800bd4c <disk_ioctl>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d001      	beq.n	800c472 <sync_fs+0xca>
 800c46e:	2301      	movs	r3, #1
 800c470:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c472:	7bfb      	ldrb	r3, [r7, #15]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	41615252 	.word	0x41615252
 800c480:	61417272 	.word	0x61417272

0800c484 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	3b02      	subs	r3, #2
 800c492:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	69db      	ldr	r3, [r3, #28]
 800c498:	3b02      	subs	r3, #2
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d301      	bcc.n	800c4a4 <clust2sect+0x20>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	e008      	b.n	800c4b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	895b      	ldrh	r3, [r3, #10]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	fb03 f202 	mul.w	r2, r3, r2
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b4:	4413      	add	r3, r2
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	370c      	adds	r7, #12
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr

0800c4c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b086      	sub	sp, #24
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
 800c4ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d904      	bls.n	800c4e2 <get_fat+0x20>
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	69db      	ldr	r3, [r3, #28]
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d302      	bcc.n	800c4e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	617b      	str	r3, [r7, #20]
 800c4e6:	e08f      	b.n	800c608 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	2b03      	cmp	r3, #3
 800c4f4:	d062      	beq.n	800c5bc <get_fat+0xfa>
 800c4f6:	2b03      	cmp	r3, #3
 800c4f8:	dc7c      	bgt.n	800c5f4 <get_fat+0x132>
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d002      	beq.n	800c504 <get_fat+0x42>
 800c4fe:	2b02      	cmp	r3, #2
 800c500:	d042      	beq.n	800c588 <get_fat+0xc6>
 800c502:	e077      	b.n	800c5f4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	60fb      	str	r3, [r7, #12]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	085b      	lsrs	r3, r3, #1
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	4413      	add	r3, r2
 800c510:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	0a5b      	lsrs	r3, r3, #9
 800c51a:	4413      	add	r3, r2
 800c51c:	4619      	mov	r1, r3
 800c51e:	6938      	ldr	r0, [r7, #16]
 800c520:	f7ff ff14 	bl	800c34c <move_window>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d167      	bne.n	800c5fa <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	1c5a      	adds	r2, r3, #1
 800c52e:	60fa      	str	r2, [r7, #12]
 800c530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c534:	693a      	ldr	r2, [r7, #16]
 800c536:	4413      	add	r3, r2
 800c538:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c53c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	0a5b      	lsrs	r3, r3, #9
 800c546:	4413      	add	r3, r2
 800c548:	4619      	mov	r1, r3
 800c54a:	6938      	ldr	r0, [r7, #16]
 800c54c:	f7ff fefe 	bl	800c34c <move_window>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d153      	bne.n	800c5fe <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c55c:	693a      	ldr	r2, [r7, #16]
 800c55e:	4413      	add	r3, r2
 800c560:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c564:	021b      	lsls	r3, r3, #8
 800c566:	461a      	mov	r2, r3
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	f003 0301 	and.w	r3, r3, #1
 800c574:	2b00      	cmp	r3, #0
 800c576:	d002      	beq.n	800c57e <get_fat+0xbc>
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	091b      	lsrs	r3, r3, #4
 800c57c:	e002      	b.n	800c584 <get_fat+0xc2>
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c584:	617b      	str	r3, [r7, #20]
			break;
 800c586:	e03f      	b.n	800c608 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	0a1b      	lsrs	r3, r3, #8
 800c590:	4413      	add	r3, r2
 800c592:	4619      	mov	r1, r3
 800c594:	6938      	ldr	r0, [r7, #16]
 800c596:	f7ff fed9 	bl	800c34c <move_window>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d130      	bne.n	800c602 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	005b      	lsls	r3, r3, #1
 800c5aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c5ae:	4413      	add	r3, r2
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7ff fbe9 	bl	800bd88 <ld_word>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	617b      	str	r3, [r7, #20]
			break;
 800c5ba:	e025      	b.n	800c608 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	09db      	lsrs	r3, r3, #7
 800c5c4:	4413      	add	r3, r2
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	6938      	ldr	r0, [r7, #16]
 800c5ca:	f7ff febf 	bl	800c34c <move_window>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d118      	bne.n	800c606 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c5e2:	4413      	add	r3, r2
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7ff fbe7 	bl	800bdb8 <ld_dword>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c5f0:	617b      	str	r3, [r7, #20]
			break;
 800c5f2:	e009      	b.n	800c608 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	617b      	str	r3, [r7, #20]
 800c5f8:	e006      	b.n	800c608 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5fa:	bf00      	nop
 800c5fc:	e004      	b.n	800c608 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5fe:	bf00      	nop
 800c600:	e002      	b.n	800c608 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c602:	bf00      	nop
 800c604:	e000      	b.n	800c608 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c606:	bf00      	nop
		}
	}

	return val;
 800c608:	697b      	ldr	r3, [r7, #20]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3718      	adds	r7, #24
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c612:	b590      	push	{r4, r7, lr}
 800c614:	b089      	sub	sp, #36	; 0x24
 800c616:	af00      	add	r7, sp, #0
 800c618:	60f8      	str	r0, [r7, #12]
 800c61a:	60b9      	str	r1, [r7, #8]
 800c61c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c61e:	2302      	movs	r3, #2
 800c620:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	2b01      	cmp	r3, #1
 800c626:	f240 80d2 	bls.w	800c7ce <put_fat+0x1bc>
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	69db      	ldr	r3, [r3, #28]
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	429a      	cmp	r2, r3
 800c632:	f080 80cc 	bcs.w	800c7ce <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	2b03      	cmp	r3, #3
 800c63c:	f000 8096 	beq.w	800c76c <put_fat+0x15a>
 800c640:	2b03      	cmp	r3, #3
 800c642:	f300 80cd 	bgt.w	800c7e0 <put_fat+0x1ce>
 800c646:	2b01      	cmp	r3, #1
 800c648:	d002      	beq.n	800c650 <put_fat+0x3e>
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	d06e      	beq.n	800c72c <put_fat+0x11a>
 800c64e:	e0c7      	b.n	800c7e0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	61bb      	str	r3, [r7, #24]
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	085b      	lsrs	r3, r3, #1
 800c658:	69ba      	ldr	r2, [r7, #24]
 800c65a:	4413      	add	r3, r2
 800c65c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	0a5b      	lsrs	r3, r3, #9
 800c666:	4413      	add	r3, r2
 800c668:	4619      	mov	r1, r3
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f7ff fe6e 	bl	800c34c <move_window>
 800c670:	4603      	mov	r3, r0
 800c672:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c674:	7ffb      	ldrb	r3, [r7, #31]
 800c676:	2b00      	cmp	r3, #0
 800c678:	f040 80ab 	bne.w	800c7d2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c682:	69bb      	ldr	r3, [r7, #24]
 800c684:	1c59      	adds	r1, r3, #1
 800c686:	61b9      	str	r1, [r7, #24]
 800c688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c68c:	4413      	add	r3, r2
 800c68e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	f003 0301 	and.w	r3, r3, #1
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00d      	beq.n	800c6b6 <put_fat+0xa4>
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	b25b      	sxtb	r3, r3
 800c6a0:	f003 030f 	and.w	r3, r3, #15
 800c6a4:	b25a      	sxtb	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	011b      	lsls	r3, r3, #4
 800c6ac:	b25b      	sxtb	r3, r3
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	b25b      	sxtb	r3, r3
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	e001      	b.n	800c6ba <put_fat+0xa8>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	0a5b      	lsrs	r3, r3, #9
 800c6cc:	4413      	add	r3, r2
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	68f8      	ldr	r0, [r7, #12]
 800c6d2:	f7ff fe3b 	bl	800c34c <move_window>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c6da:	7ffb      	ldrb	r3, [r7, #31]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d17a      	bne.n	800c7d6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ec:	4413      	add	r3, r2
 800c6ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	f003 0301 	and.w	r3, r3, #1
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d003      	beq.n	800c702 <put_fat+0xf0>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	091b      	lsrs	r3, r3, #4
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	e00e      	b.n	800c720 <put_fat+0x10e>
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	b25b      	sxtb	r3, r3
 800c708:	f023 030f 	bic.w	r3, r3, #15
 800c70c:	b25a      	sxtb	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	0a1b      	lsrs	r3, r3, #8
 800c712:	b25b      	sxtb	r3, r3
 800c714:	f003 030f 	and.w	r3, r3, #15
 800c718:	b25b      	sxtb	r3, r3
 800c71a:	4313      	orrs	r3, r2
 800c71c:	b25b      	sxtb	r3, r3
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	697a      	ldr	r2, [r7, #20]
 800c722:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2201      	movs	r2, #1
 800c728:	70da      	strb	r2, [r3, #3]
			break;
 800c72a:	e059      	b.n	800c7e0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	0a1b      	lsrs	r3, r3, #8
 800c734:	4413      	add	r3, r2
 800c736:	4619      	mov	r1, r3
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f7ff fe07 	bl	800c34c <move_window>
 800c73e:	4603      	mov	r3, r0
 800c740:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c742:	7ffb      	ldrb	r3, [r7, #31]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d148      	bne.n	800c7da <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c756:	4413      	add	r3, r2
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	b292      	uxth	r2, r2
 800c75c:	4611      	mov	r1, r2
 800c75e:	4618      	mov	r0, r3
 800c760:	f7ff fb4d 	bl	800bdfe <st_word>
			fs->wflag = 1;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2201      	movs	r2, #1
 800c768:	70da      	strb	r2, [r3, #3]
			break;
 800c76a:	e039      	b.n	800c7e0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	09db      	lsrs	r3, r3, #7
 800c774:	4413      	add	r3, r2
 800c776:	4619      	mov	r1, r3
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f7ff fde7 	bl	800c34c <move_window>
 800c77e:	4603      	mov	r3, r0
 800c780:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c782:	7ffb      	ldrb	r3, [r7, #31]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d12a      	bne.n	800c7de <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c79c:	4413      	add	r3, r2
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7ff fb0a 	bl	800bdb8 <ld_dword>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c7aa:	4323      	orrs	r3, r4
 800c7ac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c7bc:	4413      	add	r3, r2
 800c7be:	6879      	ldr	r1, [r7, #4]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7ff fb37 	bl	800be34 <st_dword>
			fs->wflag = 1;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	70da      	strb	r2, [r3, #3]
			break;
 800c7cc:	e008      	b.n	800c7e0 <put_fat+0x1ce>
		}
	}
 800c7ce:	bf00      	nop
 800c7d0:	e006      	b.n	800c7e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c7d2:	bf00      	nop
 800c7d4:	e004      	b.n	800c7e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c7d6:	bf00      	nop
 800c7d8:	e002      	b.n	800c7e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c7da:	bf00      	nop
 800c7dc:	e000      	b.n	800c7e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c7de:	bf00      	nop
	return res;
 800c7e0:	7ffb      	ldrb	r3, [r7, #31]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3724      	adds	r7, #36	; 0x24
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd90      	pop	{r4, r7, pc}

0800c7ea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b088      	sub	sp, #32
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	60f8      	str	r0, [r7, #12]
 800c7f2:	60b9      	str	r1, [r7, #8]
 800c7f4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d904      	bls.n	800c810 <remove_chain+0x26>
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	68ba      	ldr	r2, [r7, #8]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d301      	bcc.n	800c814 <remove_chain+0x2a>
 800c810:	2302      	movs	r3, #2
 800c812:	e04b      	b.n	800c8ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00c      	beq.n	800c834 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c81a:	f04f 32ff 	mov.w	r2, #4294967295
 800c81e:	6879      	ldr	r1, [r7, #4]
 800c820:	69b8      	ldr	r0, [r7, #24]
 800c822:	f7ff fef6 	bl	800c612 <put_fat>
 800c826:	4603      	mov	r3, r0
 800c828:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c82a:	7ffb      	ldrb	r3, [r7, #31]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d001      	beq.n	800c834 <remove_chain+0x4a>
 800c830:	7ffb      	ldrb	r3, [r7, #31]
 800c832:	e03b      	b.n	800c8ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c834:	68b9      	ldr	r1, [r7, #8]
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f7ff fe43 	bl	800c4c2 <get_fat>
 800c83c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d031      	beq.n	800c8a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	2b01      	cmp	r3, #1
 800c848:	d101      	bne.n	800c84e <remove_chain+0x64>
 800c84a:	2302      	movs	r3, #2
 800c84c:	e02e      	b.n	800c8ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c854:	d101      	bne.n	800c85a <remove_chain+0x70>
 800c856:	2301      	movs	r3, #1
 800c858:	e028      	b.n	800c8ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c85a:	2200      	movs	r2, #0
 800c85c:	68b9      	ldr	r1, [r7, #8]
 800c85e:	69b8      	ldr	r0, [r7, #24]
 800c860:	f7ff fed7 	bl	800c612 <put_fat>
 800c864:	4603      	mov	r3, r0
 800c866:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c868:	7ffb      	ldrb	r3, [r7, #31]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d001      	beq.n	800c872 <remove_chain+0x88>
 800c86e:	7ffb      	ldrb	r3, [r7, #31]
 800c870:	e01c      	b.n	800c8ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	699a      	ldr	r2, [r3, #24]
 800c876:	69bb      	ldr	r3, [r7, #24]
 800c878:	69db      	ldr	r3, [r3, #28]
 800c87a:	3b02      	subs	r3, #2
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d20b      	bcs.n	800c898 <remove_chain+0xae>
			fs->free_clst++;
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	699b      	ldr	r3, [r3, #24]
 800c884:	1c5a      	adds	r2, r3, #1
 800c886:	69bb      	ldr	r3, [r7, #24]
 800c888:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	791b      	ldrb	r3, [r3, #4]
 800c88e:	f043 0301 	orr.w	r3, r3, #1
 800c892:	b2da      	uxtb	r2, r3
 800c894:	69bb      	ldr	r3, [r7, #24]
 800c896:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	69db      	ldr	r3, [r3, #28]
 800c8a0:	68ba      	ldr	r2, [r7, #8]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d3c6      	bcc.n	800c834 <remove_chain+0x4a>
 800c8a6:	e000      	b.n	800c8aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c8a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3720      	adds	r7, #32
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b088      	sub	sp, #32
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10d      	bne.n	800c8e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	695b      	ldr	r3, [r3, #20]
 800c8ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d004      	beq.n	800c8e0 <create_chain+0x2c>
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	69db      	ldr	r3, [r3, #28]
 800c8da:	69ba      	ldr	r2, [r7, #24]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d31b      	bcc.n	800c918 <create_chain+0x64>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	61bb      	str	r3, [r7, #24]
 800c8e4:	e018      	b.n	800c918 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c8e6:	6839      	ldr	r1, [r7, #0]
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f7ff fdea 	bl	800c4c2 <get_fat>
 800c8ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d801      	bhi.n	800c8fa <create_chain+0x46>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e070      	b.n	800c9dc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c900:	d101      	bne.n	800c906 <create_chain+0x52>
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	e06a      	b.n	800c9dc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	69db      	ldr	r3, [r3, #28]
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d201      	bcs.n	800c914 <create_chain+0x60>
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	e063      	b.n	800c9dc <create_chain+0x128>
		scl = clst;
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	3301      	adds	r3, #1
 800c920:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	69db      	ldr	r3, [r3, #28]
 800c926:	69fa      	ldr	r2, [r7, #28]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d307      	bcc.n	800c93c <create_chain+0x88>
				ncl = 2;
 800c92c:	2302      	movs	r3, #2
 800c92e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c930:	69fa      	ldr	r2, [r7, #28]
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	429a      	cmp	r2, r3
 800c936:	d901      	bls.n	800c93c <create_chain+0x88>
 800c938:	2300      	movs	r3, #0
 800c93a:	e04f      	b.n	800c9dc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c93c:	69f9      	ldr	r1, [r7, #28]
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f7ff fdbf 	bl	800c4c2 <get_fat>
 800c944:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d00e      	beq.n	800c96a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d003      	beq.n	800c95a <create_chain+0xa6>
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c958:	d101      	bne.n	800c95e <create_chain+0xaa>
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	e03e      	b.n	800c9dc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c95e:	69fa      	ldr	r2, [r7, #28]
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	429a      	cmp	r2, r3
 800c964:	d1da      	bne.n	800c91c <create_chain+0x68>
 800c966:	2300      	movs	r3, #0
 800c968:	e038      	b.n	800c9dc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c96a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c96c:	f04f 32ff 	mov.w	r2, #4294967295
 800c970:	69f9      	ldr	r1, [r7, #28]
 800c972:	6938      	ldr	r0, [r7, #16]
 800c974:	f7ff fe4d 	bl	800c612 <put_fat>
 800c978:	4603      	mov	r3, r0
 800c97a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c97c:	7dfb      	ldrb	r3, [r7, #23]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d109      	bne.n	800c996 <create_chain+0xe2>
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d006      	beq.n	800c996 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c988:	69fa      	ldr	r2, [r7, #28]
 800c98a:	6839      	ldr	r1, [r7, #0]
 800c98c:	6938      	ldr	r0, [r7, #16]
 800c98e:	f7ff fe40 	bl	800c612 <put_fat>
 800c992:	4603      	mov	r3, r0
 800c994:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c996:	7dfb      	ldrb	r3, [r7, #23]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d116      	bne.n	800c9ca <create_chain+0x116>
		fs->last_clst = ncl;
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	69fa      	ldr	r2, [r7, #28]
 800c9a0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	699a      	ldr	r2, [r3, #24]
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	69db      	ldr	r3, [r3, #28]
 800c9aa:	3b02      	subs	r3, #2
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d804      	bhi.n	800c9ba <create_chain+0x106>
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	1e5a      	subs	r2, r3, #1
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	791b      	ldrb	r3, [r3, #4]
 800c9be:	f043 0301 	orr.w	r3, r3, #1
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	711a      	strb	r2, [r3, #4]
 800c9c8:	e007      	b.n	800c9da <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c9ca:	7dfb      	ldrb	r3, [r7, #23]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d102      	bne.n	800c9d6 <create_chain+0x122>
 800c9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d4:	e000      	b.n	800c9d8 <create_chain+0x124>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c9da:	69fb      	ldr	r3, [r7, #28]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3720      	adds	r7, #32
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b087      	sub	sp, #28
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f8:	3304      	adds	r3, #4
 800c9fa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	0a5b      	lsrs	r3, r3, #9
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	8952      	ldrh	r2, [r2, #10]
 800ca04:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca08:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	1d1a      	adds	r2, r3, #4
 800ca0e:	613a      	str	r2, [r7, #16]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d101      	bne.n	800ca1e <clmt_clust+0x3a>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	e010      	b.n	800ca40 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ca1e:	697a      	ldr	r2, [r7, #20]
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d307      	bcc.n	800ca36 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ca26:	697a      	ldr	r2, [r7, #20]
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	1ad3      	subs	r3, r2, r3
 800ca2c:	617b      	str	r3, [r7, #20]
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	3304      	adds	r3, #4
 800ca32:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca34:	e7e9      	b.n	800ca0a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ca36:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	4413      	add	r3, r2
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	371c      	adds	r7, #28
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b086      	sub	sp, #24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca62:	d204      	bcs.n	800ca6e <dir_sdi+0x22>
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	f003 031f 	and.w	r3, r3, #31
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d001      	beq.n	800ca72 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ca6e:	2302      	movs	r3, #2
 800ca70:	e063      	b.n	800cb3a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	683a      	ldr	r2, [r7, #0]
 800ca76:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d106      	bne.n	800ca92 <dir_sdi+0x46>
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	2b02      	cmp	r3, #2
 800ca8a:	d902      	bls.n	800ca92 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca90:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10c      	bne.n	800cab2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	095b      	lsrs	r3, r3, #5
 800ca9c:	693a      	ldr	r2, [r7, #16]
 800ca9e:	8912      	ldrh	r2, [r2, #8]
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d301      	bcc.n	800caa8 <dir_sdi+0x5c>
 800caa4:	2302      	movs	r3, #2
 800caa6:	e048      	b.n	800cb3a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	61da      	str	r2, [r3, #28]
 800cab0:	e029      	b.n	800cb06 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	895b      	ldrh	r3, [r3, #10]
 800cab6:	025b      	lsls	r3, r3, #9
 800cab8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800caba:	e019      	b.n	800caf0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6979      	ldr	r1, [r7, #20]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7ff fcfe 	bl	800c4c2 <get_fat>
 800cac6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cace:	d101      	bne.n	800cad4 <dir_sdi+0x88>
 800cad0:	2301      	movs	r3, #1
 800cad2:	e032      	b.n	800cb3a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d904      	bls.n	800cae4 <dir_sdi+0x98>
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	69db      	ldr	r3, [r3, #28]
 800cade:	697a      	ldr	r2, [r7, #20]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d301      	bcc.n	800cae8 <dir_sdi+0x9c>
 800cae4:	2302      	movs	r3, #2
 800cae6:	e028      	b.n	800cb3a <dir_sdi+0xee>
			ofs -= csz;
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	1ad3      	subs	r3, r2, r3
 800caee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800caf0:	683a      	ldr	r2, [r7, #0]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d2e1      	bcs.n	800cabc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800caf8:	6979      	ldr	r1, [r7, #20]
 800cafa:	6938      	ldr	r0, [r7, #16]
 800cafc:	f7ff fcc2 	bl	800c484 <clust2sect>
 800cb00:	4602      	mov	r2, r0
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	69db      	ldr	r3, [r3, #28]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d101      	bne.n	800cb18 <dir_sdi+0xcc>
 800cb14:	2302      	movs	r3, #2
 800cb16:	e010      	b.n	800cb3a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	69da      	ldr	r2, [r3, #28]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	0a5b      	lsrs	r3, r3, #9
 800cb20:	441a      	add	r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb32:	441a      	add	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3718      	adds	r7, #24
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b086      	sub	sp, #24
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	6078      	str	r0, [r7, #4]
 800cb4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	3320      	adds	r3, #32
 800cb58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	69db      	ldr	r3, [r3, #28]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d003      	beq.n	800cb6a <dir_next+0x28>
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb68:	d301      	bcc.n	800cb6e <dir_next+0x2c>
 800cb6a:	2304      	movs	r3, #4
 800cb6c:	e0aa      	b.n	800ccc4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f040 8098 	bne.w	800ccaa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	69db      	ldr	r3, [r3, #28]
 800cb7e:	1c5a      	adds	r2, r3, #1
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	699b      	ldr	r3, [r3, #24]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d10b      	bne.n	800cba4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	095b      	lsrs	r3, r3, #5
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	8912      	ldrh	r2, [r2, #8]
 800cb94:	4293      	cmp	r3, r2
 800cb96:	f0c0 8088 	bcc.w	800ccaa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	61da      	str	r2, [r3, #28]
 800cba0:	2304      	movs	r3, #4
 800cba2:	e08f      	b.n	800ccc4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	0a5b      	lsrs	r3, r3, #9
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	8952      	ldrh	r2, [r2, #10]
 800cbac:	3a01      	subs	r2, #1
 800cbae:	4013      	ands	r3, r2
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d17a      	bne.n	800ccaa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	4619      	mov	r1, r3
 800cbbc:	4610      	mov	r0, r2
 800cbbe:	f7ff fc80 	bl	800c4c2 <get_fat>
 800cbc2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d801      	bhi.n	800cbce <dir_next+0x8c>
 800cbca:	2302      	movs	r3, #2
 800cbcc:	e07a      	b.n	800ccc4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbd4:	d101      	bne.n	800cbda <dir_next+0x98>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e074      	b.n	800ccc4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	69db      	ldr	r3, [r3, #28]
 800cbde:	697a      	ldr	r2, [r7, #20]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d358      	bcc.n	800cc96 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d104      	bne.n	800cbf4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	61da      	str	r2, [r3, #28]
 800cbf0:	2304      	movs	r3, #4
 800cbf2:	e067      	b.n	800ccc4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	699b      	ldr	r3, [r3, #24]
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	4610      	mov	r0, r2
 800cbfe:	f7ff fe59 	bl	800c8b4 <create_chain>
 800cc02:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d101      	bne.n	800cc0e <dir_next+0xcc>
 800cc0a:	2307      	movs	r3, #7
 800cc0c:	e05a      	b.n	800ccc4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d101      	bne.n	800cc18 <dir_next+0xd6>
 800cc14:	2302      	movs	r3, #2
 800cc16:	e055      	b.n	800ccc4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc1e:	d101      	bne.n	800cc24 <dir_next+0xe2>
 800cc20:	2301      	movs	r3, #1
 800cc22:	e04f      	b.n	800ccc4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f7ff fb4d 	bl	800c2c4 <sync_window>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d001      	beq.n	800cc34 <dir_next+0xf2>
 800cc30:	2301      	movs	r3, #1
 800cc32:	e047      	b.n	800ccc4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	3338      	adds	r3, #56	; 0x38
 800cc38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7ff f945 	bl	800bece <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cc44:	2300      	movs	r3, #0
 800cc46:	613b      	str	r3, [r7, #16]
 800cc48:	6979      	ldr	r1, [r7, #20]
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f7ff fc1a 	bl	800c484 <clust2sect>
 800cc50:	4602      	mov	r2, r0
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	635a      	str	r2, [r3, #52]	; 0x34
 800cc56:	e012      	b.n	800cc7e <dir_next+0x13c>
						fs->wflag = 1;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f7ff fb30 	bl	800c2c4 <sync_window>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d001      	beq.n	800cc6e <dir_next+0x12c>
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e02a      	b.n	800ccc4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	3301      	adds	r3, #1
 800cc72:	613b      	str	r3, [r7, #16]
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc78:	1c5a      	adds	r2, r3, #1
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	635a      	str	r2, [r3, #52]	; 0x34
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	895b      	ldrh	r3, [r3, #10]
 800cc82:	461a      	mov	r2, r3
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d3e6      	bcc.n	800cc58 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	1ad2      	subs	r2, r2, r3
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	697a      	ldr	r2, [r7, #20]
 800cc9a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cc9c:	6979      	ldr	r1, [r7, #20]
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f7ff fbf0 	bl	800c484 <clust2sect>
 800cca4:	4602      	mov	r2, r0
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccbc:	441a      	add	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ccc2:	2300      	movs	r3, #0
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3718      	adds	r7, #24
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ccdc:	2100      	movs	r1, #0
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f7ff feb4 	bl	800ca4c <dir_sdi>
 800cce4:	4603      	mov	r3, r0
 800cce6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cce8:	7dfb      	ldrb	r3, [r7, #23]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d12b      	bne.n	800cd46 <dir_alloc+0x7a>
		n = 0;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	69db      	ldr	r3, [r3, #28]
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f7ff fb27 	bl	800c34c <move_window>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cd02:	7dfb      	ldrb	r3, [r7, #23]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d11d      	bne.n	800cd44 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6a1b      	ldr	r3, [r3, #32]
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	2be5      	cmp	r3, #229	; 0xe5
 800cd10:	d004      	beq.n	800cd1c <dir_alloc+0x50>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d107      	bne.n	800cd2c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	613b      	str	r3, [r7, #16]
 800cd22:	693a      	ldr	r2, [r7, #16]
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d102      	bne.n	800cd30 <dir_alloc+0x64>
 800cd2a:	e00c      	b.n	800cd46 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cd30:	2101      	movs	r1, #1
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff ff05 	bl	800cb42 <dir_next>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cd3c:	7dfb      	ldrb	r3, [r7, #23]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d0d7      	beq.n	800ccf2 <dir_alloc+0x26>
 800cd42:	e000      	b.n	800cd46 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cd44:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cd46:	7dfb      	ldrb	r3, [r7, #23]
 800cd48:	2b04      	cmp	r3, #4
 800cd4a:	d101      	bne.n	800cd50 <dir_alloc+0x84>
 800cd4c:	2307      	movs	r3, #7
 800cd4e:	75fb      	strb	r3, [r7, #23]
	return res;
 800cd50:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3718      	adds	r7, #24
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b084      	sub	sp, #16
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
 800cd62:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	331a      	adds	r3, #26
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7ff f80d 	bl	800bd88 <ld_word>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	2b03      	cmp	r3, #3
 800cd78:	d109      	bne.n	800cd8e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	3314      	adds	r3, #20
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7ff f802 	bl	800bd88 <ld_word>
 800cd84:	4603      	mov	r3, r0
 800cd86:	041b      	lsls	r3, r3, #16
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3710      	adds	r7, #16
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	331a      	adds	r3, #26
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	b292      	uxth	r2, r2
 800cdac:	4611      	mov	r1, r2
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7ff f825 	bl	800bdfe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	2b03      	cmp	r3, #3
 800cdba:	d109      	bne.n	800cdd0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	f103 0214 	add.w	r2, r3, #20
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	0c1b      	lsrs	r3, r3, #16
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	4619      	mov	r1, r3
 800cdca:	4610      	mov	r0, r2
 800cdcc:	f7ff f817 	bl	800bdfe <st_word>
	}
}
 800cdd0:	bf00      	nop
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cdd8:	b590      	push	{r4, r7, lr}
 800cdda:	b087      	sub	sp, #28
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	331a      	adds	r3, #26
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7fe ffce 	bl	800bd88 <ld_word>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d001      	beq.n	800cdf6 <cmp_lfn+0x1e>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	e059      	b.n	800ceaa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdfe:	1e5a      	subs	r2, r3, #1
 800ce00:	4613      	mov	r3, r2
 800ce02:	005b      	lsls	r3, r3, #1
 800ce04:	4413      	add	r3, r2
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	4413      	add	r3, r2
 800ce0a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	81fb      	strh	r3, [r7, #14]
 800ce10:	2300      	movs	r3, #0
 800ce12:	613b      	str	r3, [r7, #16]
 800ce14:	e033      	b.n	800ce7e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ce16:	4a27      	ldr	r2, [pc, #156]	; (800ceb4 <cmp_lfn+0xdc>)
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	461a      	mov	r2, r3
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	4413      	add	r3, r2
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fe ffaf 	bl	800bd88 <ld_word>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ce2e:	89fb      	ldrh	r3, [r7, #14]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d01a      	beq.n	800ce6a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	2bfe      	cmp	r3, #254	; 0xfe
 800ce38:	d812      	bhi.n	800ce60 <cmp_lfn+0x88>
 800ce3a:	89bb      	ldrh	r3, [r7, #12]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f002 fc6f 	bl	800f720 <ff_wtoupper>
 800ce42:	4603      	mov	r3, r0
 800ce44:	461c      	mov	r4, r3
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	1c5a      	adds	r2, r3, #1
 800ce4a:	617a      	str	r2, [r7, #20]
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	4413      	add	r3, r2
 800ce52:	881b      	ldrh	r3, [r3, #0]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f002 fc63 	bl	800f720 <ff_wtoupper>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	429c      	cmp	r4, r3
 800ce5e:	d001      	beq.n	800ce64 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ce60:	2300      	movs	r3, #0
 800ce62:	e022      	b.n	800ceaa <cmp_lfn+0xd2>
			}
			wc = uc;
 800ce64:	89bb      	ldrh	r3, [r7, #12]
 800ce66:	81fb      	strh	r3, [r7, #14]
 800ce68:	e006      	b.n	800ce78 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ce6a:	89bb      	ldrh	r3, [r7, #12]
 800ce6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d001      	beq.n	800ce78 <cmp_lfn+0xa0>
 800ce74:	2300      	movs	r3, #0
 800ce76:	e018      	b.n	800ceaa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	613b      	str	r3, [r7, #16]
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	2b0c      	cmp	r3, #12
 800ce82:	d9c8      	bls.n	800ce16 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00b      	beq.n	800cea8 <cmp_lfn+0xd0>
 800ce90:	89fb      	ldrh	r3, [r7, #14]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d008      	beq.n	800cea8 <cmp_lfn+0xd0>
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	881b      	ldrh	r3, [r3, #0]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d001      	beq.n	800cea8 <cmp_lfn+0xd0>
 800cea4:	2300      	movs	r3, #0
 800cea6:	e000      	b.n	800ceaa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cea8:	2301      	movs	r3, #1
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	371c      	adds	r7, #28
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd90      	pop	{r4, r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	0804e1b8 	.word	0x0804e1b8

0800ceb8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b086      	sub	sp, #24
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	331a      	adds	r3, #26
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fe ff5e 	bl	800bd88 <ld_word>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d001      	beq.n	800ced6 <pick_lfn+0x1e>
 800ced2:	2300      	movs	r3, #0
 800ced4:	e04d      	b.n	800cf72 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cede:	1e5a      	subs	r2, r3, #1
 800cee0:	4613      	mov	r3, r2
 800cee2:	005b      	lsls	r3, r3, #1
 800cee4:	4413      	add	r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	4413      	add	r3, r2
 800ceea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ceec:	2301      	movs	r3, #1
 800ceee:	81fb      	strh	r3, [r7, #14]
 800cef0:	2300      	movs	r3, #0
 800cef2:	613b      	str	r3, [r7, #16]
 800cef4:	e028      	b.n	800cf48 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cef6:	4a21      	ldr	r2, [pc, #132]	; (800cf7c <pick_lfn+0xc4>)
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	4413      	add	r3, r2
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	461a      	mov	r2, r3
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	4413      	add	r3, r2
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7fe ff3f 	bl	800bd88 <ld_word>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cf0e:	89fb      	ldrh	r3, [r7, #14]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00f      	beq.n	800cf34 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	2bfe      	cmp	r3, #254	; 0xfe
 800cf18:	d901      	bls.n	800cf1e <pick_lfn+0x66>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	e029      	b.n	800cf72 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800cf1e:	89bb      	ldrh	r3, [r7, #12]
 800cf20:	81fb      	strh	r3, [r7, #14]
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	1c5a      	adds	r2, r3, #1
 800cf26:	617a      	str	r2, [r7, #20]
 800cf28:	005b      	lsls	r3, r3, #1
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	89fa      	ldrh	r2, [r7, #14]
 800cf30:	801a      	strh	r2, [r3, #0]
 800cf32:	e006      	b.n	800cf42 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cf34:	89bb      	ldrh	r3, [r7, #12]
 800cf36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d001      	beq.n	800cf42 <pick_lfn+0x8a>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	e017      	b.n	800cf72 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	3301      	adds	r3, #1
 800cf46:	613b      	str	r3, [r7, #16]
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	2b0c      	cmp	r3, #12
 800cf4c:	d9d3      	bls.n	800cef6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d00a      	beq.n	800cf70 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	2bfe      	cmp	r3, #254	; 0xfe
 800cf5e:	d901      	bls.n	800cf64 <pick_lfn+0xac>
 800cf60:	2300      	movs	r3, #0
 800cf62:	e006      	b.n	800cf72 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	005b      	lsls	r3, r3, #1
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800cf70:	2301      	movs	r3, #1
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3718      	adds	r7, #24
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	0804e1b8 	.word	0x0804e1b8

0800cf80 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b088      	sub	sp, #32
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	4611      	mov	r1, r2
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	460b      	mov	r3, r1
 800cf90:	71fb      	strb	r3, [r7, #7]
 800cf92:	4613      	mov	r3, r2
 800cf94:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	330d      	adds	r3, #13
 800cf9a:	79ba      	ldrb	r2, [r7, #6]
 800cf9c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	330b      	adds	r3, #11
 800cfa2:	220f      	movs	r2, #15
 800cfa4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	330c      	adds	r3, #12
 800cfaa:	2200      	movs	r2, #0
 800cfac:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	331a      	adds	r3, #26
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fe ff22 	bl	800bdfe <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800cfba:	79fb      	ldrb	r3, [r7, #7]
 800cfbc:	1e5a      	subs	r2, r3, #1
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	005b      	lsls	r3, r3, #1
 800cfc2:	4413      	add	r3, r2
 800cfc4:	009b      	lsls	r3, r3, #2
 800cfc6:	4413      	add	r3, r2
 800cfc8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	82fb      	strh	r3, [r7, #22]
 800cfce:	2300      	movs	r3, #0
 800cfd0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cfd2:	8afb      	ldrh	r3, [r7, #22]
 800cfd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d007      	beq.n	800cfec <put_lfn+0x6c>
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	1c5a      	adds	r2, r3, #1
 800cfe0:	61fa      	str	r2, [r7, #28]
 800cfe2:	005b      	lsls	r3, r3, #1
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	881b      	ldrh	r3, [r3, #0]
 800cfea:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800cfec:	4a17      	ldr	r2, [pc, #92]	; (800d04c <put_lfn+0xcc>)
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	4413      	add	r3, r2
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	461a      	mov	r2, r3
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	4413      	add	r3, r2
 800cffa:	8afa      	ldrh	r2, [r7, #22]
 800cffc:	4611      	mov	r1, r2
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fe fefd 	bl	800bdfe <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d004:	8afb      	ldrh	r3, [r7, #22]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d102      	bne.n	800d010 <put_lfn+0x90>
 800d00a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d00e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	3301      	adds	r3, #1
 800d014:	61bb      	str	r3, [r7, #24]
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	2b0c      	cmp	r3, #12
 800d01a:	d9da      	bls.n	800cfd2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d01c:	8afb      	ldrh	r3, [r7, #22]
 800d01e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d022:	4293      	cmp	r3, r2
 800d024:	d006      	beq.n	800d034 <put_lfn+0xb4>
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	005b      	lsls	r3, r3, #1
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	4413      	add	r3, r2
 800d02e:	881b      	ldrh	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d103      	bne.n	800d03c <put_lfn+0xbc>
 800d034:	79fb      	ldrb	r3, [r7, #7]
 800d036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d03a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	79fa      	ldrb	r2, [r7, #7]
 800d040:	701a      	strb	r2, [r3, #0]
}
 800d042:	bf00      	nop
 800d044:	3720      	adds	r7, #32
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	0804e1b8 	.word	0x0804e1b8

0800d050 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b08c      	sub	sp, #48	; 0x30
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
 800d05c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d05e:	220b      	movs	r2, #11
 800d060:	68b9      	ldr	r1, [r7, #8]
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	f7fe ff12 	bl	800be8c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	2b05      	cmp	r3, #5
 800d06c:	d92b      	bls.n	800d0c6 <gen_numname+0x76>
		sr = seq;
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d072:	e022      	b.n	800d0ba <gen_numname+0x6a>
			wc = *lfn++;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	1c9a      	adds	r2, r3, #2
 800d078:	607a      	str	r2, [r7, #4]
 800d07a:	881b      	ldrh	r3, [r3, #0]
 800d07c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d07e:	2300      	movs	r3, #0
 800d080:	62bb      	str	r3, [r7, #40]	; 0x28
 800d082:	e017      	b.n	800d0b4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	005a      	lsls	r2, r3, #1
 800d088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d08a:	f003 0301 	and.w	r3, r3, #1
 800d08e:	4413      	add	r3, r2
 800d090:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d092:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d094:	085b      	lsrs	r3, r3, #1
 800d096:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d098:	69fb      	ldr	r3, [r7, #28]
 800d09a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d005      	beq.n	800d0ae <gen_numname+0x5e>
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d0a8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d0ac:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b6:	2b0f      	cmp	r3, #15
 800d0b8:	d9e4      	bls.n	800d084 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	881b      	ldrh	r3, [r3, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d1d8      	bne.n	800d074 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d0c6:	2307      	movs	r3, #7
 800d0c8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	f003 030f 	and.w	r3, r3, #15
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	3330      	adds	r3, #48	; 0x30
 800d0d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d0da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0de:	2b39      	cmp	r3, #57	; 0x39
 800d0e0:	d904      	bls.n	800d0ec <gen_numname+0x9c>
 800d0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0e6:	3307      	adds	r3, #7
 800d0e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ee:	1e5a      	subs	r2, r3, #1
 800d0f0:	62ba      	str	r2, [r7, #40]	; 0x28
 800d0f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d0f6:	4413      	add	r3, r2
 800d0f8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d0fc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	091b      	lsrs	r3, r3, #4
 800d104:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d1de      	bne.n	800d0ca <gen_numname+0x7a>
	ns[i] = '~';
 800d10c:	f107 0214 	add.w	r2, r7, #20
 800d110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d112:	4413      	add	r3, r2
 800d114:	227e      	movs	r2, #126	; 0x7e
 800d116:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d118:	2300      	movs	r3, #0
 800d11a:	627b      	str	r3, [r7, #36]	; 0x24
 800d11c:	e016      	b.n	800d14c <gen_numname+0xfc>
		if (IsDBCS1(dst[j])) {
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d122:	4413      	add	r3, r2
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	2b80      	cmp	r3, #128	; 0x80
 800d128:	d90d      	bls.n	800d146 <gen_numname+0xf6>
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12e:	4413      	add	r3, r2
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	2bff      	cmp	r3, #255	; 0xff
 800d134:	d007      	beq.n	800d146 <gen_numname+0xf6>
			if (j == i - 1) break;
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	3b01      	subs	r3, #1
 800d13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d010      	beq.n	800d162 <gen_numname+0x112>
			j++;
 800d140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d142:	3301      	adds	r3, #1
 800d144:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d148:	3301      	adds	r3, #1
 800d14a:	627b      	str	r3, [r7, #36]	; 0x24
 800d14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d150:	429a      	cmp	r2, r3
 800d152:	d207      	bcs.n	800d164 <gen_numname+0x114>
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d158:	4413      	add	r3, r2
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	2b20      	cmp	r3, #32
 800d15e:	d1de      	bne.n	800d11e <gen_numname+0xce>
 800d160:	e000      	b.n	800d164 <gen_numname+0x114>
			if (j == i - 1) break;
 800d162:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d166:	2b07      	cmp	r3, #7
 800d168:	d808      	bhi.n	800d17c <gen_numname+0x12c>
 800d16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16c:	1c5a      	adds	r2, r3, #1
 800d16e:	62ba      	str	r2, [r7, #40]	; 0x28
 800d170:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d174:	4413      	add	r3, r2
 800d176:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d17a:	e000      	b.n	800d17e <gen_numname+0x12e>
 800d17c:	2120      	movs	r1, #32
 800d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d180:	1c5a      	adds	r2, r3, #1
 800d182:	627a      	str	r2, [r7, #36]	; 0x24
 800d184:	68fa      	ldr	r2, [r7, #12]
 800d186:	4413      	add	r3, r2
 800d188:	460a      	mov	r2, r1
 800d18a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	2b07      	cmp	r3, #7
 800d190:	d9e8      	bls.n	800d164 <gen_numname+0x114>
}
 800d192:	bf00      	nop
 800d194:	bf00      	nop
 800d196:	3730      	adds	r7, #48	; 0x30
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b085      	sub	sp, #20
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d1a8:	230b      	movs	r3, #11
 800d1aa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	0852      	lsrs	r2, r2, #1
 800d1b2:	01db      	lsls	r3, r3, #7
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	1c59      	adds	r1, r3, #1
 800d1bc:	6079      	str	r1, [r7, #4]
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	60bb      	str	r3, [r7, #8]
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1ed      	bne.n	800d1ac <sum_sfn+0x10>
	return sum;
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3714      	adds	r7, #20
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr

0800d1de <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b086      	sub	sp, #24
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
 800d1e6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d1e8:	2304      	movs	r3, #4
 800d1ea:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d1f2:	23ff      	movs	r3, #255	; 0xff
 800d1f4:	757b      	strb	r3, [r7, #21]
 800d1f6:	23ff      	movs	r3, #255	; 0xff
 800d1f8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d1fa:	e081      	b.n	800d300 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	69db      	ldr	r3, [r3, #28]
 800d200:	4619      	mov	r1, r3
 800d202:	6938      	ldr	r0, [r7, #16]
 800d204:	f7ff f8a2 	bl	800c34c <move_window>
 800d208:	4603      	mov	r3, r0
 800d20a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d20c:	7dfb      	ldrb	r3, [r7, #23]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d17c      	bne.n	800d30c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6a1b      	ldr	r3, [r3, #32]
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d21a:	7dbb      	ldrb	r3, [r7, #22]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d102      	bne.n	800d226 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d220:	2304      	movs	r3, #4
 800d222:	75fb      	strb	r3, [r7, #23]
 800d224:	e077      	b.n	800d316 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a1b      	ldr	r3, [r3, #32]
 800d22a:	330b      	adds	r3, #11
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d232:	73fb      	strb	r3, [r7, #15]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	7bfa      	ldrb	r2, [r7, #15]
 800d238:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d23a:	7dbb      	ldrb	r3, [r7, #22]
 800d23c:	2be5      	cmp	r3, #229	; 0xe5
 800d23e:	d00e      	beq.n	800d25e <dir_read+0x80>
 800d240:	7dbb      	ldrb	r3, [r7, #22]
 800d242:	2b2e      	cmp	r3, #46	; 0x2e
 800d244:	d00b      	beq.n	800d25e <dir_read+0x80>
 800d246:	7bfb      	ldrb	r3, [r7, #15]
 800d248:	f023 0320 	bic.w	r3, r3, #32
 800d24c:	2b08      	cmp	r3, #8
 800d24e:	bf0c      	ite	eq
 800d250:	2301      	moveq	r3, #1
 800d252:	2300      	movne	r3, #0
 800d254:	b2db      	uxtb	r3, r3
 800d256:	461a      	mov	r2, r3
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d002      	beq.n	800d264 <dir_read+0x86>
				ord = 0xFF;
 800d25e:	23ff      	movs	r3, #255	; 0xff
 800d260:	757b      	strb	r3, [r7, #21]
 800d262:	e044      	b.n	800d2ee <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d264:	7bfb      	ldrb	r3, [r7, #15]
 800d266:	2b0f      	cmp	r3, #15
 800d268:	d12f      	bne.n	800d2ca <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d26a:	7dbb      	ldrb	r3, [r7, #22]
 800d26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d270:	2b00      	cmp	r3, #0
 800d272:	d00d      	beq.n	800d290 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a1b      	ldr	r3, [r3, #32]
 800d278:	7b5b      	ldrb	r3, [r3, #13]
 800d27a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d27c:	7dbb      	ldrb	r3, [r7, #22]
 800d27e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d282:	75bb      	strb	r3, [r7, #22]
 800d284:	7dbb      	ldrb	r3, [r7, #22]
 800d286:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	695a      	ldr	r2, [r3, #20]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d290:	7dba      	ldrb	r2, [r7, #22]
 800d292:	7d7b      	ldrb	r3, [r7, #21]
 800d294:	429a      	cmp	r2, r3
 800d296:	d115      	bne.n	800d2c4 <dir_read+0xe6>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6a1b      	ldr	r3, [r3, #32]
 800d29c:	330d      	adds	r3, #13
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	7d3a      	ldrb	r2, [r7, #20]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d10e      	bne.n	800d2c4 <dir_read+0xe6>
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	68da      	ldr	r2, [r3, #12]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a1b      	ldr	r3, [r3, #32]
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	f7ff fe01 	bl	800ceb8 <pick_lfn>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d003      	beq.n	800d2c4 <dir_read+0xe6>
 800d2bc:	7d7b      	ldrb	r3, [r7, #21]
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	e000      	b.n	800d2c6 <dir_read+0xe8>
 800d2c4:	23ff      	movs	r3, #255	; 0xff
 800d2c6:	757b      	strb	r3, [r7, #21]
 800d2c8:	e011      	b.n	800d2ee <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d2ca:	7d7b      	ldrb	r3, [r7, #21]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d109      	bne.n	800d2e4 <dir_read+0x106>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6a1b      	ldr	r3, [r3, #32]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7ff ff61 	bl	800d19c <sum_sfn>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	461a      	mov	r2, r3
 800d2de:	7d3b      	ldrb	r3, [r7, #20]
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d015      	beq.n	800d310 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d2ec:	e010      	b.n	800d310 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f7ff fc26 	bl	800cb42 <dir_next>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d2fa:	7dfb      	ldrb	r3, [r7, #23]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d109      	bne.n	800d314 <dir_read+0x136>
	while (dp->sect) {
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	69db      	ldr	r3, [r3, #28]
 800d304:	2b00      	cmp	r3, #0
 800d306:	f47f af79 	bne.w	800d1fc <dir_read+0x1e>
 800d30a:	e004      	b.n	800d316 <dir_read+0x138>
		if (res != FR_OK) break;
 800d30c:	bf00      	nop
 800d30e:	e002      	b.n	800d316 <dir_read+0x138>
					break;
 800d310:	bf00      	nop
 800d312:	e000      	b.n	800d316 <dir_read+0x138>
		if (res != FR_OK) break;
 800d314:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d316:	7dfb      	ldrb	r3, [r7, #23]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d002      	beq.n	800d322 <dir_read+0x144>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	61da      	str	r2, [r3, #28]
	return res;
 800d322:	7dfb      	ldrb	r3, [r7, #23]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3718      	adds	r7, #24
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d33a:	2100      	movs	r1, #0
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7ff fb85 	bl	800ca4c <dir_sdi>
 800d342:	4603      	mov	r3, r0
 800d344:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d346:	7dfb      	ldrb	r3, [r7, #23]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <dir_find+0x24>
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
 800d34e:	e0a9      	b.n	800d4a4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d350:	23ff      	movs	r3, #255	; 0xff
 800d352:	753b      	strb	r3, [r7, #20]
 800d354:	7d3b      	ldrb	r3, [r7, #20]
 800d356:	757b      	strb	r3, [r7, #21]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f04f 32ff 	mov.w	r2, #4294967295
 800d35e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	69db      	ldr	r3, [r3, #28]
 800d364:	4619      	mov	r1, r3
 800d366:	6938      	ldr	r0, [r7, #16]
 800d368:	f7fe fff0 	bl	800c34c <move_window>
 800d36c:	4603      	mov	r3, r0
 800d36e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d370:	7dfb      	ldrb	r3, [r7, #23]
 800d372:	2b00      	cmp	r3, #0
 800d374:	f040 8090 	bne.w	800d498 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6a1b      	ldr	r3, [r3, #32]
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d380:	7dbb      	ldrb	r3, [r7, #22]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d102      	bne.n	800d38c <dir_find+0x60>
 800d386:	2304      	movs	r3, #4
 800d388:	75fb      	strb	r3, [r7, #23]
 800d38a:	e08a      	b.n	800d4a2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a1b      	ldr	r3, [r3, #32]
 800d390:	330b      	adds	r3, #11
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d398:	73fb      	strb	r3, [r7, #15]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	7bfa      	ldrb	r2, [r7, #15]
 800d39e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d3a0:	7dbb      	ldrb	r3, [r7, #22]
 800d3a2:	2be5      	cmp	r3, #229	; 0xe5
 800d3a4:	d007      	beq.n	800d3b6 <dir_find+0x8a>
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
 800d3a8:	f003 0308 	and.w	r3, r3, #8
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d009      	beq.n	800d3c4 <dir_find+0x98>
 800d3b0:	7bfb      	ldrb	r3, [r7, #15]
 800d3b2:	2b0f      	cmp	r3, #15
 800d3b4:	d006      	beq.n	800d3c4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d3b6:	23ff      	movs	r3, #255	; 0xff
 800d3b8:	757b      	strb	r3, [r7, #21]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c0:	631a      	str	r2, [r3, #48]	; 0x30
 800d3c2:	e05e      	b.n	800d482 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d3c4:	7bfb      	ldrb	r3, [r7, #15]
 800d3c6:	2b0f      	cmp	r3, #15
 800d3c8:	d136      	bne.n	800d438 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d154      	bne.n	800d482 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d3d8:	7dbb      	ldrb	r3, [r7, #22]
 800d3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00d      	beq.n	800d3fe <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a1b      	ldr	r3, [r3, #32]
 800d3e6:	7b5b      	ldrb	r3, [r3, #13]
 800d3e8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d3ea:	7dbb      	ldrb	r3, [r7, #22]
 800d3ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3f0:	75bb      	strb	r3, [r7, #22]
 800d3f2:	7dbb      	ldrb	r3, [r7, #22]
 800d3f4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	695a      	ldr	r2, [r3, #20]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d3fe:	7dba      	ldrb	r2, [r7, #22]
 800d400:	7d7b      	ldrb	r3, [r7, #21]
 800d402:	429a      	cmp	r2, r3
 800d404:	d115      	bne.n	800d432 <dir_find+0x106>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6a1b      	ldr	r3, [r3, #32]
 800d40a:	330d      	adds	r3, #13
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	7d3a      	ldrb	r2, [r7, #20]
 800d410:	429a      	cmp	r2, r3
 800d412:	d10e      	bne.n	800d432 <dir_find+0x106>
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	68da      	ldr	r2, [r3, #12]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a1b      	ldr	r3, [r3, #32]
 800d41c:	4619      	mov	r1, r3
 800d41e:	4610      	mov	r0, r2
 800d420:	f7ff fcda 	bl	800cdd8 <cmp_lfn>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d003      	beq.n	800d432 <dir_find+0x106>
 800d42a:	7d7b      	ldrb	r3, [r7, #21]
 800d42c:	3b01      	subs	r3, #1
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	e000      	b.n	800d434 <dir_find+0x108>
 800d432:	23ff      	movs	r3, #255	; 0xff
 800d434:	757b      	strb	r3, [r7, #21]
 800d436:	e024      	b.n	800d482 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d438:	7d7b      	ldrb	r3, [r7, #21]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d109      	bne.n	800d452 <dir_find+0x126>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6a1b      	ldr	r3, [r3, #32]
 800d442:	4618      	mov	r0, r3
 800d444:	f7ff feaa 	bl	800d19c <sum_sfn>
 800d448:	4603      	mov	r3, r0
 800d44a:	461a      	mov	r2, r3
 800d44c:	7d3b      	ldrb	r3, [r7, #20]
 800d44e:	4293      	cmp	r3, r2
 800d450:	d024      	beq.n	800d49c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d458:	f003 0301 	and.w	r3, r3, #1
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d10a      	bne.n	800d476 <dir_find+0x14a>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a18      	ldr	r0, [r3, #32]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	3324      	adds	r3, #36	; 0x24
 800d468:	220b      	movs	r2, #11
 800d46a:	4619      	mov	r1, r3
 800d46c:	f7fe fd4a 	bl	800bf04 <mem_cmp>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d014      	beq.n	800d4a0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d476:	23ff      	movs	r3, #255	; 0xff
 800d478:	757b      	strb	r3, [r7, #21]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f04f 32ff 	mov.w	r2, #4294967295
 800d480:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d482:	2100      	movs	r1, #0
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7ff fb5c 	bl	800cb42 <dir_next>
 800d48a:	4603      	mov	r3, r0
 800d48c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
 800d490:	2b00      	cmp	r3, #0
 800d492:	f43f af65 	beq.w	800d360 <dir_find+0x34>
 800d496:	e004      	b.n	800d4a2 <dir_find+0x176>
		if (res != FR_OK) break;
 800d498:	bf00      	nop
 800d49a:	e002      	b.n	800d4a2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d49c:	bf00      	nop
 800d49e:	e000      	b.n	800d4a2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d4a0:	bf00      	nop

	return res;
 800d4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3718      	adds	r7, #24
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b08c      	sub	sp, #48	; 0x30
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d001      	beq.n	800d4cc <dir_register+0x20>
 800d4c8:	2306      	movs	r3, #6
 800d4ca:	e0e0      	b.n	800d68e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	627b      	str	r3, [r7, #36]	; 0x24
 800d4d0:	e002      	b.n	800d4d8 <dir_register+0x2c>
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	68da      	ldr	r2, [r3, #12]
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4de:	005b      	lsls	r3, r3, #1
 800d4e0:	4413      	add	r3, r2
 800d4e2:	881b      	ldrh	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1f4      	bne.n	800d4d2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d4ee:	f107 030c 	add.w	r3, r7, #12
 800d4f2:	220c      	movs	r2, #12
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7fe fcc9 	bl	800be8c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d4fa:	7dfb      	ldrb	r3, [r7, #23]
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d032      	beq.n	800d56a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2240      	movs	r2, #64	; 0x40
 800d508:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d50c:	2301      	movs	r3, #1
 800d50e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d510:	e016      	b.n	800d540 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	68da      	ldr	r2, [r3, #12]
 800d51c:	f107 010c 	add.w	r1, r7, #12
 800d520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d522:	f7ff fd95 	bl	800d050 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f7ff ff00 	bl	800d32c <dir_find>
 800d52c:	4603      	mov	r3, r0
 800d52e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d536:	2b00      	cmp	r3, #0
 800d538:	d106      	bne.n	800d548 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53c:	3301      	adds	r3, #1
 800d53e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d542:	2b63      	cmp	r3, #99	; 0x63
 800d544:	d9e5      	bls.n	800d512 <dir_register+0x66>
 800d546:	e000      	b.n	800d54a <dir_register+0x9e>
			if (res != FR_OK) break;
 800d548:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54c:	2b64      	cmp	r3, #100	; 0x64
 800d54e:	d101      	bne.n	800d554 <dir_register+0xa8>
 800d550:	2307      	movs	r3, #7
 800d552:	e09c      	b.n	800d68e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d554:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d558:	2b04      	cmp	r3, #4
 800d55a:	d002      	beq.n	800d562 <dir_register+0xb6>
 800d55c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d560:	e095      	b.n	800d68e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d562:	7dfa      	ldrb	r2, [r7, #23]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d56a:	7dfb      	ldrb	r3, [r7, #23]
 800d56c:	f003 0302 	and.w	r3, r3, #2
 800d570:	2b00      	cmp	r3, #0
 800d572:	d007      	beq.n	800d584 <dir_register+0xd8>
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	330c      	adds	r3, #12
 800d578:	4a47      	ldr	r2, [pc, #284]	; (800d698 <dir_register+0x1ec>)
 800d57a:	fba2 2303 	umull	r2, r3, r2, r3
 800d57e:	089b      	lsrs	r3, r3, #2
 800d580:	3301      	adds	r3, #1
 800d582:	e000      	b.n	800d586 <dir_register+0xda>
 800d584:	2301      	movs	r3, #1
 800d586:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d588:	6a39      	ldr	r1, [r7, #32]
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f7ff fb9e 	bl	800cccc <dir_alloc>
 800d590:	4603      	mov	r3, r0
 800d592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d148      	bne.n	800d630 <dir_register+0x184>
 800d59e:	6a3b      	ldr	r3, [r7, #32]
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	623b      	str	r3, [r7, #32]
 800d5a4:	6a3b      	ldr	r3, [r7, #32]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d042      	beq.n	800d630 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	695a      	ldr	r2, [r3, #20]
 800d5ae:	6a3b      	ldr	r3, [r7, #32]
 800d5b0:	015b      	lsls	r3, r3, #5
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7ff fa48 	bl	800ca4c <dir_sdi>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d5c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d132      	bne.n	800d630 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	3324      	adds	r3, #36	; 0x24
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7ff fde4 	bl	800d19c <sum_sfn>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	69db      	ldr	r3, [r3, #28]
 800d5dc:	4619      	mov	r1, r3
 800d5de:	69f8      	ldr	r0, [r7, #28]
 800d5e0:	f7fe feb4 	bl	800c34c <move_window>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d5ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d11d      	bne.n	800d62e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	68d8      	ldr	r0, [r3, #12]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a19      	ldr	r1, [r3, #32]
 800d5fa:	6a3b      	ldr	r3, [r7, #32]
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	7efb      	ldrb	r3, [r7, #27]
 800d600:	f7ff fcbe 	bl	800cf80 <put_lfn>
				fs->wflag = 1;
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	2201      	movs	r2, #1
 800d608:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d60a:	2100      	movs	r1, #0
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f7ff fa98 	bl	800cb42 <dir_next>
 800d612:	4603      	mov	r3, r0
 800d614:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d107      	bne.n	800d630 <dir_register+0x184>
 800d620:	6a3b      	ldr	r3, [r7, #32]
 800d622:	3b01      	subs	r3, #1
 800d624:	623b      	str	r3, [r7, #32]
 800d626:	6a3b      	ldr	r3, [r7, #32]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1d5      	bne.n	800d5d8 <dir_register+0x12c>
 800d62c:	e000      	b.n	800d630 <dir_register+0x184>
				if (res != FR_OK) break;
 800d62e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d634:	2b00      	cmp	r3, #0
 800d636:	d128      	bne.n	800d68a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	69db      	ldr	r3, [r3, #28]
 800d63c:	4619      	mov	r1, r3
 800d63e:	69f8      	ldr	r0, [r7, #28]
 800d640:	f7fe fe84 	bl	800c34c <move_window>
 800d644:	4603      	mov	r3, r0
 800d646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d64a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d11b      	bne.n	800d68a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a1b      	ldr	r3, [r3, #32]
 800d656:	2220      	movs	r2, #32
 800d658:	2100      	movs	r1, #0
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fe fc37 	bl	800bece <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6a18      	ldr	r0, [r3, #32]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	3324      	adds	r3, #36	; 0x24
 800d668:	220b      	movs	r2, #11
 800d66a:	4619      	mov	r1, r3
 800d66c:	f7fe fc0e 	bl	800be8c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	330c      	adds	r3, #12
 800d67c:	f002 0218 	and.w	r2, r2, #24
 800d680:	b2d2      	uxtb	r2, r2
 800d682:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	2201      	movs	r2, #1
 800d688:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d68a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3730      	adds	r7, #48	; 0x30
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	4ec4ec4f 	.word	0x4ec4ec4f

0800d69c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b086      	sub	sp, #24
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b8:	d007      	beq.n	800d6ca <dir_remove+0x2e>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6be:	4619      	mov	r1, r3
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f7ff f9c3 	bl	800ca4c <dir_sdi>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	e000      	b.n	800d6cc <dir_remove+0x30>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d6ce:	7dfb      	ldrb	r3, [r7, #23]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d128      	bne.n	800d726 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	69db      	ldr	r3, [r3, #28]
 800d6d8:	4619      	mov	r1, r3
 800d6da:	6938      	ldr	r0, [r7, #16]
 800d6dc:	f7fe fe36 	bl	800c34c <move_window>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d6e4:	7dfb      	ldrb	r3, [r7, #23]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d115      	bne.n	800d716 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6a1b      	ldr	r3, [r3, #32]
 800d6ee:	22e5      	movs	r2, #229	; 0xe5
 800d6f0:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	695b      	ldr	r3, [r3, #20]
 800d6fc:	68fa      	ldr	r2, [r7, #12]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d90b      	bls.n	800d71a <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800d702:	2100      	movs	r1, #0
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f7ff fa1c 	bl	800cb42 <dir_next>
 800d70a:	4603      	mov	r3, r0
 800d70c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800d70e:	7dfb      	ldrb	r3, [r7, #23]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d0df      	beq.n	800d6d4 <dir_remove+0x38>
 800d714:	e002      	b.n	800d71c <dir_remove+0x80>
			if (res != FR_OK) break;
 800d716:	bf00      	nop
 800d718:	e000      	b.n	800d71c <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800d71a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800d71c:	7dfb      	ldrb	r3, [r7, #23]
 800d71e:	2b04      	cmp	r3, #4
 800d720:	d101      	bne.n	800d726 <dir_remove+0x8a>
 800d722:	2302      	movs	r3, #2
 800d724:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800d726:	7dfb      	ldrb	r3, [r7, #23]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3718      	adds	r7, #24
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b08a      	sub	sp, #40	; 0x28
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	613b      	str	r3, [r7, #16]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	60fb      	str	r3, [r7, #12]
 800d748:	2300      	movs	r3, #0
 800d74a:	617b      	str	r3, [r7, #20]
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	1c5a      	adds	r2, r3, #1
 800d754:	61ba      	str	r2, [r7, #24]
 800d756:	693a      	ldr	r2, [r7, #16]
 800d758:	4413      	add	r3, r2
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d75e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d760:	2b1f      	cmp	r3, #31
 800d762:	d96a      	bls.n	800d83a <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d764:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d766:	2b2f      	cmp	r3, #47	; 0x2f
 800d768:	d006      	beq.n	800d778 <create_name+0x48>
 800d76a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d76c:	2b5c      	cmp	r3, #92	; 0x5c
 800d76e:	d110      	bne.n	800d792 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d770:	e002      	b.n	800d778 <create_name+0x48>
 800d772:	69bb      	ldr	r3, [r7, #24]
 800d774:	3301      	adds	r3, #1
 800d776:	61bb      	str	r3, [r7, #24]
 800d778:	693a      	ldr	r2, [r7, #16]
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	4413      	add	r3, r2
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	2b2f      	cmp	r3, #47	; 0x2f
 800d782:	d0f6      	beq.n	800d772 <create_name+0x42>
 800d784:	693a      	ldr	r2, [r7, #16]
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	4413      	add	r3, r2
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	2b5c      	cmp	r3, #92	; 0x5c
 800d78e:	d0f0      	beq.n	800d772 <create_name+0x42>
			break;
 800d790:	e054      	b.n	800d83c <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	2bfe      	cmp	r3, #254	; 0xfe
 800d796:	d901      	bls.n	800d79c <create_name+0x6c>
 800d798:	2306      	movs	r3, #6
 800d79a:	e1bf      	b.n	800db1c <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d79c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800d7a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	2b80      	cmp	r3, #128	; 0x80
 800d7a8:	d925      	bls.n	800d7f6 <create_name+0xc6>
 800d7aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	2bff      	cmp	r3, #255	; 0xff
 800d7b0:	d021      	beq.n	800d7f6 <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	1c5a      	adds	r2, r3, #1
 800d7b6:	61ba      	str	r2, [r7, #24]
 800d7b8:	693a      	ldr	r2, [r7, #16]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800d7c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7c4:	021b      	lsls	r3, r3, #8
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	4413      	add	r3, r2
 800d7d0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800d7d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7d6:	2b3f      	cmp	r3, #63	; 0x3f
 800d7d8:	d903      	bls.n	800d7e2 <create_name+0xb2>
 800d7da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7de:	2b7e      	cmp	r3, #126	; 0x7e
 800d7e0:	d909      	bls.n	800d7f6 <create_name+0xc6>
 800d7e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	da03      	bge.n	800d7f2 <create_name+0xc2>
 800d7ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7ee:	2bff      	cmp	r3, #255	; 0xff
 800d7f0:	d101      	bne.n	800d7f6 <create_name+0xc6>
 800d7f2:	2306      	movs	r3, #6
 800d7f4:	e192      	b.n	800db1c <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d7f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7f8:	2101      	movs	r1, #1
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f001 ff32 	bl	800f664 <ff_convert>
 800d800:	4603      	mov	r3, r0
 800d802:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d806:	2b00      	cmp	r3, #0
 800d808:	d101      	bne.n	800d80e <create_name+0xde>
 800d80a:	2306      	movs	r3, #6
 800d80c:	e186      	b.n	800db1c <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d80e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d810:	2b7f      	cmp	r3, #127	; 0x7f
 800d812:	d809      	bhi.n	800d828 <create_name+0xf8>
 800d814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d816:	4619      	mov	r1, r3
 800d818:	489a      	ldr	r0, [pc, #616]	; (800da84 <create_name+0x354>)
 800d81a:	f7fe fb9a 	bl	800bf52 <chk_chr>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d001      	beq.n	800d828 <create_name+0xf8>
 800d824:	2306      	movs	r3, #6
 800d826:	e179      	b.n	800db1c <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	1c5a      	adds	r2, r3, #1
 800d82c:	617a      	str	r2, [r7, #20]
 800d82e:	005b      	lsls	r3, r3, #1
 800d830:	68fa      	ldr	r2, [r7, #12]
 800d832:	4413      	add	r3, r2
 800d834:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d836:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d838:	e78a      	b.n	800d750 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d83a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d83c:	693a      	ldr	r2, [r7, #16]
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	441a      	add	r2, r3
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d848:	2b1f      	cmp	r3, #31
 800d84a:	d801      	bhi.n	800d850 <create_name+0x120>
 800d84c:	2304      	movs	r3, #4
 800d84e:	e000      	b.n	800d852 <create_name+0x122>
 800d850:	2300      	movs	r3, #0
 800d852:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d856:	e011      	b.n	800d87c <create_name+0x14c>
		w = lfn[di - 1];
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d85e:	3b01      	subs	r3, #1
 800d860:	005b      	lsls	r3, r3, #1
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	4413      	add	r3, r2
 800d866:	881b      	ldrh	r3, [r3, #0]
 800d868:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d86a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d86c:	2b20      	cmp	r3, #32
 800d86e:	d002      	beq.n	800d876 <create_name+0x146>
 800d870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d872:	2b2e      	cmp	r3, #46	; 0x2e
 800d874:	d106      	bne.n	800d884 <create_name+0x154>
		di--;
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	3b01      	subs	r3, #1
 800d87a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1ea      	bne.n	800d858 <create_name+0x128>
 800d882:	e000      	b.n	800d886 <create_name+0x156>
		if (w != ' ' && w != '.') break;
 800d884:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	005b      	lsls	r3, r3, #1
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	4413      	add	r3, r2
 800d88e:	2200      	movs	r2, #0
 800d890:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d101      	bne.n	800d89c <create_name+0x16c>
 800d898:	2306      	movs	r3, #6
 800d89a:	e13f      	b.n	800db1c <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	3324      	adds	r3, #36	; 0x24
 800d8a0:	220b      	movs	r2, #11
 800d8a2:	2120      	movs	r1, #32
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7fe fb12 	bl	800bece <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	61bb      	str	r3, [r7, #24]
 800d8ae:	e002      	b.n	800d8b6 <create_name+0x186>
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	61bb      	str	r3, [r7, #24]
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	005b      	lsls	r3, r3, #1
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	4413      	add	r3, r2
 800d8be:	881b      	ldrh	r3, [r3, #0]
 800d8c0:	2b20      	cmp	r3, #32
 800d8c2:	d0f5      	beq.n	800d8b0 <create_name+0x180>
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	005b      	lsls	r3, r3, #1
 800d8c8:	68fa      	ldr	r2, [r7, #12]
 800d8ca:	4413      	add	r3, r2
 800d8cc:	881b      	ldrh	r3, [r3, #0]
 800d8ce:	2b2e      	cmp	r3, #46	; 0x2e
 800d8d0:	d0ee      	beq.n	800d8b0 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d009      	beq.n	800d8ec <create_name+0x1bc>
 800d8d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8dc:	f043 0303 	orr.w	r3, r3, #3
 800d8e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d8e4:	e002      	b.n	800d8ec <create_name+0x1bc>
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	617b      	str	r3, [r7, #20]
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d009      	beq.n	800d906 <create_name+0x1d6>
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	005b      	lsls	r3, r3, #1
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	4413      	add	r3, r2
 800d900:	881b      	ldrh	r3, [r3, #0]
 800d902:	2b2e      	cmp	r3, #46	; 0x2e
 800d904:	d1ef      	bne.n	800d8e6 <create_name+0x1b6>

	i = b = 0; ni = 8;
 800d906:	2300      	movs	r3, #0
 800d908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d90c:	2300      	movs	r3, #0
 800d90e:	623b      	str	r3, [r7, #32]
 800d910:	2308      	movs	r3, #8
 800d912:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	1c5a      	adds	r2, r3, #1
 800d918:	61ba      	str	r2, [r7, #24]
 800d91a:	005b      	lsls	r3, r3, #1
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	4413      	add	r3, r2
 800d920:	881b      	ldrh	r3, [r3, #0]
 800d922:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d926:	2b00      	cmp	r3, #0
 800d928:	f000 80aa 	beq.w	800da80 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d92c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d92e:	2b20      	cmp	r3, #32
 800d930:	d006      	beq.n	800d940 <create_name+0x210>
 800d932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d934:	2b2e      	cmp	r3, #46	; 0x2e
 800d936:	d10a      	bne.n	800d94e <create_name+0x21e>
 800d938:	69ba      	ldr	r2, [r7, #24]
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d006      	beq.n	800d94e <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 800d940:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d944:	f043 0303 	orr.w	r3, r3, #3
 800d948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d94c:	e097      	b.n	800da7e <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d94e:	6a3a      	ldr	r2, [r7, #32]
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	429a      	cmp	r2, r3
 800d954:	d203      	bcs.n	800d95e <create_name+0x22e>
 800d956:	69ba      	ldr	r2, [r7, #24]
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d123      	bne.n	800d9a6 <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 800d95e:	69fb      	ldr	r3, [r7, #28]
 800d960:	2b0b      	cmp	r3, #11
 800d962:	d106      	bne.n	800d972 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 800d964:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d968:	f043 0303 	orr.w	r3, r3, #3
 800d96c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d970:	e08d      	b.n	800da8e <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d972:	69ba      	ldr	r2, [r7, #24]
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	429a      	cmp	r2, r3
 800d978:	d005      	beq.n	800d986 <create_name+0x256>
 800d97a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d97e:	f043 0303 	orr.w	r3, r3, #3
 800d982:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800d986:	69ba      	ldr	r2, [r7, #24]
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d87e      	bhi.n	800da8c <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	61bb      	str	r3, [r7, #24]
 800d992:	2308      	movs	r3, #8
 800d994:	623b      	str	r3, [r7, #32]
 800d996:	230b      	movs	r3, #11
 800d998:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d99a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d9a4:	e06b      	b.n	800da7e <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d9a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9a8:	2b7f      	cmp	r3, #127	; 0x7f
 800d9aa:	d910      	bls.n	800d9ce <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800d9ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f001 feb6 	bl	800f720 <ff_wtoupper>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2100      	movs	r1, #0
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f001 fe53 	bl	800f664 <ff_convert>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d9c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9c6:	f043 0302 	orr.w	r3, r3, #2
 800d9ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800d9ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9d0:	2bff      	cmp	r3, #255	; 0xff
 800d9d2:	d91a      	bls.n	800da0a <create_name+0x2da>
			if (i >= ni - 1) {
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	6a3a      	ldr	r2, [r7, #32]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d308      	bcc.n	800d9f0 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800d9de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9e2:	f043 0303 	orr.w	r3, r3, #3
 800d9e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	623b      	str	r3, [r7, #32]
 800d9ee:	e046      	b.n	800da7e <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800d9f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9f2:	0a1b      	lsrs	r3, r3, #8
 800d9f4:	b299      	uxth	r1, r3
 800d9f6:	6a3b      	ldr	r3, [r7, #32]
 800d9f8:	1c5a      	adds	r2, r3, #1
 800d9fa:	623a      	str	r2, [r7, #32]
 800d9fc:	b2c9      	uxtb	r1, r1
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	4413      	add	r3, r2
 800da02:	460a      	mov	r2, r1
 800da04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800da08:	e02f      	b.n	800da6a <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800da0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d007      	beq.n	800da20 <create_name+0x2f0>
 800da10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da12:	4619      	mov	r1, r3
 800da14:	481c      	ldr	r0, [pc, #112]	; (800da88 <create_name+0x358>)
 800da16:	f7fe fa9c 	bl	800bf52 <chk_chr>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d008      	beq.n	800da32 <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800da20:	235f      	movs	r3, #95	; 0x5f
 800da22:	84bb      	strh	r3, [r7, #36]	; 0x24
 800da24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da28:	f043 0303 	orr.w	r3, r3, #3
 800da2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da30:	e01b      	b.n	800da6a <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800da32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da34:	2b40      	cmp	r3, #64	; 0x40
 800da36:	d909      	bls.n	800da4c <create_name+0x31c>
 800da38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da3a:	2b5a      	cmp	r3, #90	; 0x5a
 800da3c:	d806      	bhi.n	800da4c <create_name+0x31c>
					b |= 2;
 800da3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da42:	f043 0302 	orr.w	r3, r3, #2
 800da46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da4a:	e00e      	b.n	800da6a <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800da4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da4e:	2b60      	cmp	r3, #96	; 0x60
 800da50:	d90b      	bls.n	800da6a <create_name+0x33a>
 800da52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da54:	2b7a      	cmp	r3, #122	; 0x7a
 800da56:	d808      	bhi.n	800da6a <create_name+0x33a>
						b |= 1; w -= 0x20;
 800da58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da5c:	f043 0301 	orr.w	r3, r3, #1
 800da60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da66:	3b20      	subs	r3, #32
 800da68:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800da6a:	6a3b      	ldr	r3, [r7, #32]
 800da6c:	1c5a      	adds	r2, r3, #1
 800da6e:	623a      	str	r2, [r7, #32]
 800da70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da72:	b2d1      	uxtb	r1, r2
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	4413      	add	r3, r2
 800da78:	460a      	mov	r2, r1
 800da7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800da7e:	e749      	b.n	800d914 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 800da80:	bf00      	nop
 800da82:	e004      	b.n	800da8e <create_name+0x35e>
 800da84:	08021524 	.word	0x08021524
 800da88:	08021530 	.word	0x08021530
			if (si > di) break;			/* No extension */
 800da8c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800da94:	2be5      	cmp	r3, #229	; 0xe5
 800da96:	d103      	bne.n	800daa0 <create_name+0x370>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2205      	movs	r2, #5
 800da9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800daa0:	69fb      	ldr	r3, [r7, #28]
 800daa2:	2b08      	cmp	r3, #8
 800daa4:	d104      	bne.n	800dab0 <create_name+0x380>
 800daa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dab4:	f003 030c 	and.w	r3, r3, #12
 800dab8:	2b0c      	cmp	r3, #12
 800daba:	d005      	beq.n	800dac8 <create_name+0x398>
 800dabc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dac0:	f003 0303 	and.w	r3, r3, #3
 800dac4:	2b03      	cmp	r3, #3
 800dac6:	d105      	bne.n	800dad4 <create_name+0x3a4>
 800dac8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dacc:	f043 0302 	orr.w	r3, r3, #2
 800dad0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dad4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dad8:	f003 0302 	and.w	r3, r3, #2
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d117      	bne.n	800db10 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dae4:	f003 0303 	and.w	r3, r3, #3
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d105      	bne.n	800daf8 <create_name+0x3c8>
 800daec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800daf0:	f043 0310 	orr.w	r3, r3, #16
 800daf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800daf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dafc:	f003 030c 	and.w	r3, r3, #12
 800db00:	2b04      	cmp	r3, #4
 800db02:	d105      	bne.n	800db10 <create_name+0x3e0>
 800db04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db08:	f043 0308 	orr.w	r3, r3, #8
 800db0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800db16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800db1a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3728      	adds	r7, #40	; 0x28
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b086      	sub	sp, #24
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800db38:	e002      	b.n	800db40 <follow_path+0x1c>
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	3301      	adds	r3, #1
 800db3e:	603b      	str	r3, [r7, #0]
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	2b2f      	cmp	r3, #47	; 0x2f
 800db46:	d0f8      	beq.n	800db3a <follow_path+0x16>
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	2b5c      	cmp	r3, #92	; 0x5c
 800db4e:	d0f4      	beq.n	800db3a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	2200      	movs	r2, #0
 800db54:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	2b1f      	cmp	r3, #31
 800db5c:	d80a      	bhi.n	800db74 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2280      	movs	r2, #128	; 0x80
 800db62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800db66:	2100      	movs	r1, #0
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7fe ff6f 	bl	800ca4c <dir_sdi>
 800db6e:	4603      	mov	r3, r0
 800db70:	75fb      	strb	r3, [r7, #23]
 800db72:	e043      	b.n	800dbfc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800db74:	463b      	mov	r3, r7
 800db76:	4619      	mov	r1, r3
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f7ff fdd9 	bl	800d730 <create_name>
 800db7e:	4603      	mov	r3, r0
 800db80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800db82:	7dfb      	ldrb	r3, [r7, #23]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d134      	bne.n	800dbf2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f7ff fbcf 	bl	800d32c <dir_find>
 800db8e:	4603      	mov	r3, r0
 800db90:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800db98:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800db9a:	7dfb      	ldrb	r3, [r7, #23]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d00a      	beq.n	800dbb6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dba0:	7dfb      	ldrb	r3, [r7, #23]
 800dba2:	2b04      	cmp	r3, #4
 800dba4:	d127      	bne.n	800dbf6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dba6:	7afb      	ldrb	r3, [r7, #11]
 800dba8:	f003 0304 	and.w	r3, r3, #4
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d122      	bne.n	800dbf6 <follow_path+0xd2>
 800dbb0:	2305      	movs	r3, #5
 800dbb2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dbb4:	e01f      	b.n	800dbf6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dbb6:	7afb      	ldrb	r3, [r7, #11]
 800dbb8:	f003 0304 	and.w	r3, r3, #4
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d11c      	bne.n	800dbfa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	799b      	ldrb	r3, [r3, #6]
 800dbc4:	f003 0310 	and.w	r3, r3, #16
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d102      	bne.n	800dbd2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dbcc:	2305      	movs	r3, #5
 800dbce:	75fb      	strb	r3, [r7, #23]
 800dbd0:	e014      	b.n	800dbfc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	695b      	ldr	r3, [r3, #20]
 800dbdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbe0:	4413      	add	r3, r2
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f7ff f8b8 	bl	800cd5a <ld_clust>
 800dbea:	4602      	mov	r2, r0
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dbf0:	e7c0      	b.n	800db74 <follow_path+0x50>
			if (res != FR_OK) break;
 800dbf2:	bf00      	nop
 800dbf4:	e002      	b.n	800dbfc <follow_path+0xd8>
				break;
 800dbf6:	bf00      	nop
 800dbf8:	e000      	b.n	800dbfc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dbfa:	bf00      	nop
			}
		}
	}

	return res;
 800dbfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3718      	adds	r7, #24
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dc06:	b480      	push	{r7}
 800dc08:	b087      	sub	sp, #28
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc12:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d031      	beq.n	800dc80 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	617b      	str	r3, [r7, #20]
 800dc22:	e002      	b.n	800dc2a <get_ldnumber+0x24>
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	3301      	adds	r3, #1
 800dc28:	617b      	str	r3, [r7, #20]
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	2b1f      	cmp	r3, #31
 800dc30:	d903      	bls.n	800dc3a <get_ldnumber+0x34>
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	2b3a      	cmp	r3, #58	; 0x3a
 800dc38:	d1f4      	bne.n	800dc24 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	2b3a      	cmp	r3, #58	; 0x3a
 800dc40:	d11c      	bne.n	800dc7c <get_ldnumber+0x76>
			tp = *path;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	1c5a      	adds	r2, r3, #1
 800dc4c:	60fa      	str	r2, [r7, #12]
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	3b30      	subs	r3, #48	; 0x30
 800dc52:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	2b09      	cmp	r3, #9
 800dc58:	d80e      	bhi.n	800dc78 <get_ldnumber+0x72>
 800dc5a:	68fa      	ldr	r2, [r7, #12]
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d10a      	bne.n	800dc78 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d107      	bne.n	800dc78 <get_ldnumber+0x72>
					vol = (int)i;
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	617b      	str	r3, [r7, #20]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	697a      	ldr	r2, [r7, #20]
 800dc76:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	e002      	b.n	800dc82 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dc80:	693b      	ldr	r3, [r7, #16]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	371c      	adds	r7, #28
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr
	...

0800dc90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	70da      	strb	r2, [r3, #3]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f04f 32ff 	mov.w	r2, #4294967295
 800dca6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dca8:	6839      	ldr	r1, [r7, #0]
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f7fe fb4e 	bl	800c34c <move_window>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d001      	beq.n	800dcba <check_fs+0x2a>
 800dcb6:	2304      	movs	r3, #4
 800dcb8:	e038      	b.n	800dd2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	3338      	adds	r3, #56	; 0x38
 800dcbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fe f860 	bl	800bd88 <ld_word>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	461a      	mov	r2, r3
 800dccc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d001      	beq.n	800dcd8 <check_fs+0x48>
 800dcd4:	2303      	movs	r3, #3
 800dcd6:	e029      	b.n	800dd2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dcde:	2be9      	cmp	r3, #233	; 0xe9
 800dce0:	d009      	beq.n	800dcf6 <check_fs+0x66>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dce8:	2beb      	cmp	r3, #235	; 0xeb
 800dcea:	d11e      	bne.n	800dd2a <check_fs+0x9a>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800dcf2:	2b90      	cmp	r3, #144	; 0x90
 800dcf4:	d119      	bne.n	800dd2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	3338      	adds	r3, #56	; 0x38
 800dcfa:	3336      	adds	r3, #54	; 0x36
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7fe f85b 	bl	800bdb8 <ld_dword>
 800dd02:	4603      	mov	r3, r0
 800dd04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dd08:	4a0a      	ldr	r2, [pc, #40]	; (800dd34 <check_fs+0xa4>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d101      	bne.n	800dd12 <check_fs+0x82>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	e00c      	b.n	800dd2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	3338      	adds	r3, #56	; 0x38
 800dd16:	3352      	adds	r3, #82	; 0x52
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7fe f84d 	bl	800bdb8 <ld_dword>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	4a05      	ldr	r2, [pc, #20]	; (800dd38 <check_fs+0xa8>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d101      	bne.n	800dd2a <check_fs+0x9a>
 800dd26:	2300      	movs	r3, #0
 800dd28:	e000      	b.n	800dd2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dd2a:	2302      	movs	r3, #2
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3708      	adds	r7, #8
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	00544146 	.word	0x00544146
 800dd38:	33544146 	.word	0x33544146

0800dd3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b096      	sub	sp, #88	; 0x58
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	4613      	mov	r3, r2
 800dd48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f7ff ff58 	bl	800dc06 <get_ldnumber>
 800dd56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	da01      	bge.n	800dd62 <find_volume+0x26>
 800dd5e:	230b      	movs	r3, #11
 800dd60:	e236      	b.n	800e1d0 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dd62:	4aac      	ldr	r2, [pc, #688]	; (800e014 <find_volume+0x2d8>)
 800dd64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d101      	bne.n	800dd76 <find_volume+0x3a>
 800dd72:	230c      	movs	r3, #12
 800dd74:	e22c      	b.n	800e1d0 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800dd76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd78:	f7fe f906 	bl	800bf88 <lock_fs>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d101      	bne.n	800dd86 <find_volume+0x4a>
 800dd82:	230f      	movs	r3, #15
 800dd84:	e224      	b.n	800e1d0 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dd8c:	79fb      	ldrb	r3, [r7, #7]
 800dd8e:	f023 0301 	bic.w	r3, r3, #1
 800dd92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d01a      	beq.n	800ddd2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800dd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9e:	785b      	ldrb	r3, [r3, #1]
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fd ff53 	bl	800bc4c <disk_status>
 800dda6:	4603      	mov	r3, r0
 800dda8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ddac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddb0:	f003 0301 	and.w	r3, r3, #1
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d10c      	bne.n	800ddd2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ddb8:	79fb      	ldrb	r3, [r7, #7]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d007      	beq.n	800ddce <find_volume+0x92>
 800ddbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddc2:	f003 0304 	and.w	r3, r3, #4
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d001      	beq.n	800ddce <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ddca:	230a      	movs	r3, #10
 800ddcc:	e200      	b.n	800e1d0 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800ddce:	2300      	movs	r3, #0
 800ddd0:	e1fe      	b.n	800e1d0 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ddd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ddd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddda:	b2da      	uxtb	r2, r3
 800dddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddde:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde2:	785b      	ldrb	r3, [r3, #1]
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7fd ff4b 	bl	800bc80 <disk_initialize>
 800ddea:	4603      	mov	r3, r0
 800ddec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ddf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddf4:	f003 0301 	and.w	r3, r3, #1
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d001      	beq.n	800de00 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ddfc:	2303      	movs	r3, #3
 800ddfe:	e1e7      	b.n	800e1d0 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800de00:	79fb      	ldrb	r3, [r7, #7]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d007      	beq.n	800de16 <find_volume+0xda>
 800de06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de0a:	f003 0304 	and.w	r3, r3, #4
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d001      	beq.n	800de16 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800de12:	230a      	movs	r3, #10
 800de14:	e1dc      	b.n	800e1d0 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800de16:	2300      	movs	r3, #0
 800de18:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800de1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de1e:	f7ff ff37 	bl	800dc90 <check_fs>
 800de22:	4603      	mov	r3, r0
 800de24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800de28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	d14b      	bne.n	800dec8 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800de30:	2300      	movs	r3, #0
 800de32:	643b      	str	r3, [r7, #64]	; 0x40
 800de34:	e01f      	b.n	800de76 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800de36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de38:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800de3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de3e:	011b      	lsls	r3, r3, #4
 800de40:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800de44:	4413      	add	r3, r2
 800de46:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800de48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4a:	3304      	adds	r3, #4
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d006      	beq.n	800de60 <find_volume+0x124>
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	3308      	adds	r3, #8
 800de56:	4618      	mov	r0, r3
 800de58:	f7fd ffae 	bl	800bdb8 <ld_dword>
 800de5c:	4602      	mov	r2, r0
 800de5e:	e000      	b.n	800de62 <find_volume+0x126>
 800de60:	2200      	movs	r2, #0
 800de62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800de6a:	440b      	add	r3, r1
 800de6c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800de70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de72:	3301      	adds	r3, #1
 800de74:	643b      	str	r3, [r7, #64]	; 0x40
 800de76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de78:	2b03      	cmp	r3, #3
 800de7a:	d9dc      	bls.n	800de36 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800de7c:	2300      	movs	r3, #0
 800de7e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800de80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de82:	2b00      	cmp	r3, #0
 800de84:	d002      	beq.n	800de8c <find_volume+0x150>
 800de86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de88:	3b01      	subs	r3, #1
 800de8a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800de8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800de94:	4413      	add	r3, r2
 800de96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800de9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800de9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d005      	beq.n	800deae <find_volume+0x172>
 800dea2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dea4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dea6:	f7ff fef3 	bl	800dc90 <check_fs>
 800deaa:	4603      	mov	r3, r0
 800deac:	e000      	b.n	800deb0 <find_volume+0x174>
 800deae:	2303      	movs	r3, #3
 800deb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800deb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d905      	bls.n	800dec8 <find_volume+0x18c>
 800debc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800debe:	3301      	adds	r3, #1
 800dec0:	643b      	str	r3, [r7, #64]	; 0x40
 800dec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dec4:	2b03      	cmp	r3, #3
 800dec6:	d9e1      	bls.n	800de8c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800decc:	2b04      	cmp	r3, #4
 800dece:	d101      	bne.n	800ded4 <find_volume+0x198>
 800ded0:	2301      	movs	r3, #1
 800ded2:	e17d      	b.n	800e1d0 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ded4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d901      	bls.n	800dee0 <find_volume+0x1a4>
 800dedc:	230d      	movs	r3, #13
 800dede:	e177      	b.n	800e1d0 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee2:	3338      	adds	r3, #56	; 0x38
 800dee4:	330b      	adds	r3, #11
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fd ff4e 	bl	800bd88 <ld_word>
 800deec:	4603      	mov	r3, r0
 800deee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800def2:	d001      	beq.n	800def8 <find_volume+0x1bc>
 800def4:	230d      	movs	r3, #13
 800def6:	e16b      	b.n	800e1d0 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800def8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defa:	3338      	adds	r3, #56	; 0x38
 800defc:	3316      	adds	r3, #22
 800defe:	4618      	mov	r0, r3
 800df00:	f7fd ff42 	bl	800bd88 <ld_word>
 800df04:	4603      	mov	r3, r0
 800df06:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800df08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d106      	bne.n	800df1c <find_volume+0x1e0>
 800df0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df10:	3338      	adds	r3, #56	; 0x38
 800df12:	3324      	adds	r3, #36	; 0x24
 800df14:	4618      	mov	r0, r3
 800df16:	f7fd ff4f 	bl	800bdb8 <ld_dword>
 800df1a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800df1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df20:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800df22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df24:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800df28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800df2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2e:	789b      	ldrb	r3, [r3, #2]
 800df30:	2b01      	cmp	r3, #1
 800df32:	d005      	beq.n	800df40 <find_volume+0x204>
 800df34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df36:	789b      	ldrb	r3, [r3, #2]
 800df38:	2b02      	cmp	r3, #2
 800df3a:	d001      	beq.n	800df40 <find_volume+0x204>
 800df3c:	230d      	movs	r3, #13
 800df3e:	e147      	b.n	800e1d0 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800df40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df42:	789b      	ldrb	r3, [r3, #2]
 800df44:	461a      	mov	r2, r3
 800df46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df48:	fb02 f303 	mul.w	r3, r2, r3
 800df4c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800df4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df54:	b29a      	uxth	r2, r3
 800df56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800df5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5c:	895b      	ldrh	r3, [r3, #10]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d008      	beq.n	800df74 <find_volume+0x238>
 800df62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df64:	895b      	ldrh	r3, [r3, #10]
 800df66:	461a      	mov	r2, r3
 800df68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6a:	895b      	ldrh	r3, [r3, #10]
 800df6c:	3b01      	subs	r3, #1
 800df6e:	4013      	ands	r3, r2
 800df70:	2b00      	cmp	r3, #0
 800df72:	d001      	beq.n	800df78 <find_volume+0x23c>
 800df74:	230d      	movs	r3, #13
 800df76:	e12b      	b.n	800e1d0 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800df78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7a:	3338      	adds	r3, #56	; 0x38
 800df7c:	3311      	adds	r3, #17
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fd ff02 	bl	800bd88 <ld_word>
 800df84:	4603      	mov	r3, r0
 800df86:	461a      	mov	r2, r3
 800df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800df8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8e:	891b      	ldrh	r3, [r3, #8]
 800df90:	f003 030f 	and.w	r3, r3, #15
 800df94:	b29b      	uxth	r3, r3
 800df96:	2b00      	cmp	r3, #0
 800df98:	d001      	beq.n	800df9e <find_volume+0x262>
 800df9a:	230d      	movs	r3, #13
 800df9c:	e118      	b.n	800e1d0 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800df9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa0:	3338      	adds	r3, #56	; 0x38
 800dfa2:	3313      	adds	r3, #19
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7fd feef 	bl	800bd88 <ld_word>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dfae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d106      	bne.n	800dfc2 <find_volume+0x286>
 800dfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb6:	3338      	adds	r3, #56	; 0x38
 800dfb8:	3320      	adds	r3, #32
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fd fefc 	bl	800bdb8 <ld_dword>
 800dfc0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc4:	3338      	adds	r3, #56	; 0x38
 800dfc6:	330e      	adds	r3, #14
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7fd fedd 	bl	800bd88 <ld_word>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dfd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d101      	bne.n	800dfdc <find_volume+0x2a0>
 800dfd8:	230d      	movs	r3, #13
 800dfda:	e0f9      	b.n	800e1d0 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dfdc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dfde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfe0:	4413      	add	r3, r2
 800dfe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfe4:	8912      	ldrh	r2, [r2, #8]
 800dfe6:	0912      	lsrs	r2, r2, #4
 800dfe8:	b292      	uxth	r2, r2
 800dfea:	4413      	add	r3, r2
 800dfec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dfee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d201      	bcs.n	800dffa <find_volume+0x2be>
 800dff6:	230d      	movs	r3, #13
 800dff8:	e0ea      	b.n	800e1d0 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffe:	1ad3      	subs	r3, r2, r3
 800e000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e002:	8952      	ldrh	r2, [r2, #10]
 800e004:	fbb3 f3f2 	udiv	r3, r3, r2
 800e008:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d103      	bne.n	800e018 <find_volume+0x2dc>
 800e010:	230d      	movs	r3, #13
 800e012:	e0dd      	b.n	800e1d0 <find_volume+0x494>
 800e014:	20000b30 	.word	0x20000b30
		fmt = FS_FAT32;
 800e018:	2303      	movs	r3, #3
 800e01a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e020:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e024:	4293      	cmp	r3, r2
 800e026:	d802      	bhi.n	800e02e <find_volume+0x2f2>
 800e028:	2302      	movs	r3, #2
 800e02a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e030:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e034:	4293      	cmp	r3, r2
 800e036:	d802      	bhi.n	800e03e <find_volume+0x302>
 800e038:	2301      	movs	r3, #1
 800e03a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e040:	1c9a      	adds	r2, r3, #2
 800e042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e044:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e048:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e04a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e04c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e04e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e050:	441a      	add	r2, r3
 800e052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e054:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e056:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05a:	441a      	add	r2, r3
 800e05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e060:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e064:	2b03      	cmp	r3, #3
 800e066:	d11e      	bne.n	800e0a6 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e06a:	3338      	adds	r3, #56	; 0x38
 800e06c:	332a      	adds	r3, #42	; 0x2a
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fd fe8a 	bl	800bd88 <ld_word>
 800e074:	4603      	mov	r3, r0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d001      	beq.n	800e07e <find_volume+0x342>
 800e07a:	230d      	movs	r3, #13
 800e07c:	e0a8      	b.n	800e1d0 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e080:	891b      	ldrh	r3, [r3, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d001      	beq.n	800e08a <find_volume+0x34e>
 800e086:	230d      	movs	r3, #13
 800e088:	e0a2      	b.n	800e1d0 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08c:	3338      	adds	r3, #56	; 0x38
 800e08e:	332c      	adds	r3, #44	; 0x2c
 800e090:	4618      	mov	r0, r3
 800e092:	f7fd fe91 	bl	800bdb8 <ld_dword>
 800e096:	4602      	mov	r2, r0
 800e098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09e:	69db      	ldr	r3, [r3, #28]
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	647b      	str	r3, [r7, #68]	; 0x44
 800e0a4:	e01f      	b.n	800e0e6 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a8:	891b      	ldrh	r3, [r3, #8]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d101      	bne.n	800e0b2 <find_volume+0x376>
 800e0ae:	230d      	movs	r3, #13
 800e0b0:	e08e      	b.n	800e1d0 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e0b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0b8:	441a      	add	r2, r3
 800e0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0bc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e0be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0c2:	2b02      	cmp	r3, #2
 800e0c4:	d103      	bne.n	800e0ce <find_volume+0x392>
 800e0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c8:	69db      	ldr	r3, [r3, #28]
 800e0ca:	005b      	lsls	r3, r3, #1
 800e0cc:	e00a      	b.n	800e0e4 <find_volume+0x3a8>
 800e0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d0:	69da      	ldr	r2, [r3, #28]
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	005b      	lsls	r3, r3, #1
 800e0d6:	4413      	add	r3, r2
 800e0d8:	085a      	lsrs	r2, r3, #1
 800e0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0dc:	69db      	ldr	r3, [r3, #28]
 800e0de:	f003 0301 	and.w	r3, r3, #1
 800e0e2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e0e4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e8:	6a1a      	ldr	r2, [r3, #32]
 800e0ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e0f0:	0a5b      	lsrs	r3, r3, #9
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d201      	bcs.n	800e0fa <find_volume+0x3be>
 800e0f6:	230d      	movs	r3, #13
 800e0f8:	e06a      	b.n	800e1d0 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fc:	f04f 32ff 	mov.w	r2, #4294967295
 800e100:	619a      	str	r2, [r3, #24]
 800e102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e104:	699a      	ldr	r2, [r3, #24]
 800e106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e108:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10c:	2280      	movs	r2, #128	; 0x80
 800e10e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e110:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e114:	2b03      	cmp	r3, #3
 800e116:	d149      	bne.n	800e1ac <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11a:	3338      	adds	r3, #56	; 0x38
 800e11c:	3330      	adds	r3, #48	; 0x30
 800e11e:	4618      	mov	r0, r3
 800e120:	f7fd fe32 	bl	800bd88 <ld_word>
 800e124:	4603      	mov	r3, r0
 800e126:	2b01      	cmp	r3, #1
 800e128:	d140      	bne.n	800e1ac <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e12a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e12c:	3301      	adds	r3, #1
 800e12e:	4619      	mov	r1, r3
 800e130:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e132:	f7fe f90b 	bl	800c34c <move_window>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d137      	bne.n	800e1ac <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800e13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13e:	2200      	movs	r2, #0
 800e140:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e144:	3338      	adds	r3, #56	; 0x38
 800e146:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fd fe1c 	bl	800bd88 <ld_word>
 800e150:	4603      	mov	r3, r0
 800e152:	461a      	mov	r2, r3
 800e154:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e158:	429a      	cmp	r2, r3
 800e15a:	d127      	bne.n	800e1ac <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15e:	3338      	adds	r3, #56	; 0x38
 800e160:	4618      	mov	r0, r3
 800e162:	f7fd fe29 	bl	800bdb8 <ld_dword>
 800e166:	4603      	mov	r3, r0
 800e168:	4a1b      	ldr	r2, [pc, #108]	; (800e1d8 <find_volume+0x49c>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d11e      	bne.n	800e1ac <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e170:	3338      	adds	r3, #56	; 0x38
 800e172:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e176:	4618      	mov	r0, r3
 800e178:	f7fd fe1e 	bl	800bdb8 <ld_dword>
 800e17c:	4603      	mov	r3, r0
 800e17e:	4a17      	ldr	r2, [pc, #92]	; (800e1dc <find_volume+0x4a0>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d113      	bne.n	800e1ac <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e186:	3338      	adds	r3, #56	; 0x38
 800e188:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7fd fe13 	bl	800bdb8 <ld_dword>
 800e192:	4602      	mov	r2, r0
 800e194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e196:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19a:	3338      	adds	r3, #56	; 0x38
 800e19c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fd fe09 	bl	800bdb8 <ld_dword>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1aa:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ae:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e1b2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e1b4:	4b0a      	ldr	r3, [pc, #40]	; (800e1e0 <find_volume+0x4a4>)
 800e1b6:	881b      	ldrh	r3, [r3, #0]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	b29a      	uxth	r2, r3
 800e1bc:	4b08      	ldr	r3, [pc, #32]	; (800e1e0 <find_volume+0x4a4>)
 800e1be:	801a      	strh	r2, [r3, #0]
 800e1c0:	4b07      	ldr	r3, [pc, #28]	; (800e1e0 <find_volume+0x4a4>)
 800e1c2:	881a      	ldrh	r2, [r3, #0]
 800e1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e1c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1ca:	f7fe f857 	bl	800c27c <clear_lock>
#endif
	return FR_OK;
 800e1ce:	2300      	movs	r3, #0
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3758      	adds	r7, #88	; 0x58
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}
 800e1d8:	41615252 	.word	0x41615252
 800e1dc:	61417272 	.word	0x61417272
 800e1e0:	20000b34 	.word	0x20000b34

0800e1e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e1ee:	2309      	movs	r3, #9
 800e1f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d02e      	beq.n	800e256 <validate+0x72>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d02a      	beq.n	800e256 <validate+0x72>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d025      	beq.n	800e256 <validate+0x72>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	889a      	ldrh	r2, [r3, #4]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	88db      	ldrh	r3, [r3, #6]
 800e214:	429a      	cmp	r2, r3
 800e216:	d11e      	bne.n	800e256 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7fd feb3 	bl	800bf88 <lock_fs>
 800e222:	4603      	mov	r3, r0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d014      	beq.n	800e252 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	785b      	ldrb	r3, [r3, #1]
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fd fd0c 	bl	800bc4c <disk_status>
 800e234:	4603      	mov	r3, r0
 800e236:	f003 0301 	and.w	r3, r3, #1
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d102      	bne.n	800e244 <validate+0x60>
				res = FR_OK;
 800e23e:	2300      	movs	r3, #0
 800e240:	73fb      	strb	r3, [r7, #15]
 800e242:	e008      	b.n	800e256 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2100      	movs	r1, #0
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7fd feb2 	bl	800bfb4 <unlock_fs>
 800e250:	e001      	b.n	800e256 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e252:	230f      	movs	r3, #15
 800e254:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e256:	7bfb      	ldrb	r3, [r7, #15]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d102      	bne.n	800e262 <validate+0x7e>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	e000      	b.n	800e264 <validate+0x80>
 800e262:	2300      	movs	r3, #0
 800e264:	683a      	ldr	r2, [r7, #0]
 800e266:	6013      	str	r3, [r2, #0]
	return res;
 800e268:	7bfb      	ldrb	r3, [r7, #15]
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
	...

0800e274 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b088      	sub	sp, #32
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	4613      	mov	r3, r2
 800e280:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e286:	f107 0310 	add.w	r3, r7, #16
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7ff fcbb 	bl	800dc06 <get_ldnumber>
 800e290:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	2b00      	cmp	r3, #0
 800e296:	da01      	bge.n	800e29c <f_mount+0x28>
 800e298:	230b      	movs	r3, #11
 800e29a:	e048      	b.n	800e32e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e29c:	4a26      	ldr	r2, [pc, #152]	; (800e338 <f_mount+0xc4>)
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e2a6:	69bb      	ldr	r3, [r7, #24]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00f      	beq.n	800e2cc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e2ac:	69b8      	ldr	r0, [r7, #24]
 800e2ae:	f7fd ffe5 	bl	800c27c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e2b2:	69bb      	ldr	r3, [r7, #24]
 800e2b4:	691b      	ldr	r3, [r3, #16]
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f001 fadc 	bl	800f874 <ff_del_syncobj>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d101      	bne.n	800e2c6 <f_mount+0x52>
 800e2c2:	2302      	movs	r3, #2
 800e2c4:	e033      	b.n	800e32e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e2c6:	69bb      	ldr	r3, [r7, #24]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d00f      	beq.n	800e2f2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	b2da      	uxtb	r2, r3
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	3310      	adds	r3, #16
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	4610      	mov	r0, r2
 800e2e4:	f001 faa6 	bl	800f834 <ff_cre_syncobj>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d101      	bne.n	800e2f2 <f_mount+0x7e>
 800e2ee:	2302      	movs	r3, #2
 800e2f0:	e01d      	b.n	800e32e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e2f2:	68fa      	ldr	r2, [r7, #12]
 800e2f4:	4910      	ldr	r1, [pc, #64]	; (800e338 <f_mount+0xc4>)
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d002      	beq.n	800e308 <f_mount+0x94>
 800e302:	79fb      	ldrb	r3, [r7, #7]
 800e304:	2b01      	cmp	r3, #1
 800e306:	d001      	beq.n	800e30c <f_mount+0x98>
 800e308:	2300      	movs	r3, #0
 800e30a:	e010      	b.n	800e32e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e30c:	f107 010c 	add.w	r1, r7, #12
 800e310:	f107 0308 	add.w	r3, r7, #8
 800e314:	2200      	movs	r2, #0
 800e316:	4618      	mov	r0, r3
 800e318:	f7ff fd10 	bl	800dd3c <find_volume>
 800e31c:	4603      	mov	r3, r0
 800e31e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	7dfa      	ldrb	r2, [r7, #23]
 800e324:	4611      	mov	r1, r2
 800e326:	4618      	mov	r0, r3
 800e328:	f7fd fe44 	bl	800bfb4 <unlock_fs>
 800e32c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3720      	adds	r7, #32
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	20000b30 	.word	0x20000b30

0800e33c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800e342:	af00      	add	r7, sp, #0
 800e344:	f107 030c 	add.w	r3, r7, #12
 800e348:	6018      	str	r0, [r3, #0]
 800e34a:	f107 0308 	add.w	r3, r7, #8
 800e34e:	6019      	str	r1, [r3, #0]
 800e350:	1dfb      	adds	r3, r7, #7
 800e352:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e354:	f107 030c 	add.w	r3, r7, #12
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d101      	bne.n	800e362 <f_open+0x26>
 800e35e:	2309      	movs	r3, #9
 800e360:	e239      	b.n	800e7d6 <f_open+0x49a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e362:	1dfb      	adds	r3, r7, #7
 800e364:	1dfa      	adds	r2, r7, #7
 800e366:	7812      	ldrb	r2, [r2, #0]
 800e368:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e36c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800e36e:	1dfb      	adds	r3, r7, #7
 800e370:	781a      	ldrb	r2, [r3, #0]
 800e372:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800e376:	f107 0308 	add.w	r3, r7, #8
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7ff fcde 	bl	800dd3c <find_volume>
 800e380:	4603      	mov	r3, r0
 800e382:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800e386:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	f040 8210 	bne.w	800e7b0 <f_open+0x474>
		dj.obj.fs = fs;
 800e390:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e394:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800e398:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e39c:	f107 0214 	add.w	r2, r7, #20
 800e3a0:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e3a2:	f107 0308 	add.w	r3, r7, #8
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7ff fbb8 	bl	800db24 <follow_path>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e3ba:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d11b      	bne.n	800e3fa <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e3c2:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800e3c6:	b25b      	sxtb	r3, r3
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	da03      	bge.n	800e3d4 <f_open+0x98>
				res = FR_INVALID_NAME;
 800e3cc:	2306      	movs	r3, #6
 800e3ce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e3d2:	e012      	b.n	800e3fa <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e3d4:	1dfb      	adds	r3, r7, #7
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	f023 0301 	bic.w	r3, r3, #1
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	bf14      	ite	ne
 800e3e0:	2301      	movne	r3, #1
 800e3e2:	2300      	moveq	r3, #0
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e3ec:	4611      	mov	r1, r2
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7fd fdfc 	bl	800bfec <chk_lock>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e3fa:	1dfb      	adds	r3, r7, #7
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	f003 031c 	and.w	r3, r3, #28
 800e402:	2b00      	cmp	r3, #0
 800e404:	f000 809b 	beq.w	800e53e <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 800e408:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d019      	beq.n	800e444 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e410:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e414:	2b04      	cmp	r3, #4
 800e416:	d10e      	bne.n	800e436 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e418:	f7fd fe44 	bl	800c0a4 <enq_lock>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d006      	beq.n	800e430 <f_open+0xf4>
 800e422:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e426:	4618      	mov	r0, r3
 800e428:	f7ff f840 	bl	800d4ac <dir_register>
 800e42c:	4603      	mov	r3, r0
 800e42e:	e000      	b.n	800e432 <f_open+0xf6>
 800e430:	2312      	movs	r3, #18
 800e432:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e436:	1dfb      	adds	r3, r7, #7
 800e438:	1dfa      	adds	r2, r7, #7
 800e43a:	7812      	ldrb	r2, [r2, #0]
 800e43c:	f042 0208 	orr.w	r2, r2, #8
 800e440:	701a      	strb	r2, [r3, #0]
 800e442:	e012      	b.n	800e46a <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e444:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800e448:	f003 0311 	and.w	r3, r3, #17
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d003      	beq.n	800e458 <f_open+0x11c>
					res = FR_DENIED;
 800e450:	2307      	movs	r3, #7
 800e452:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e456:	e008      	b.n	800e46a <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e458:	1dfb      	adds	r3, r7, #7
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	f003 0304 	and.w	r3, r3, #4
 800e460:	2b00      	cmp	r3, #0
 800e462:	d002      	beq.n	800e46a <f_open+0x12e>
 800e464:	2308      	movs	r3, #8
 800e466:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e46a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e46e:	2b00      	cmp	r3, #0
 800e470:	f040 8082 	bne.w	800e578 <f_open+0x23c>
 800e474:	1dfb      	adds	r3, r7, #7
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	f003 0308 	and.w	r3, r3, #8
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d07b      	beq.n	800e578 <f_open+0x23c>
				dw = GET_FATTIME();
 800e480:	f7fc fc10 	bl	800aca4 <get_fattime>
 800e484:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e488:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e48c:	330e      	adds	r3, #14
 800e48e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800e492:	4618      	mov	r0, r3
 800e494:	f7fd fcce 	bl	800be34 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e498:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e49c:	3316      	adds	r3, #22
 800e49e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7fd fcc6 	bl	800be34 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e4a8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e4ac:	330b      	adds	r3, #11
 800e4ae:	2220      	movs	r2, #32
 800e4b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e4b2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e4b6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800e4ba:	4611      	mov	r1, r2
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7fe fc4c 	bl	800cd5a <ld_clust>
 800e4c2:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e4c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e4ca:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7fe fc61 	bl	800cd98 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e4d6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e4da:	331c      	adds	r3, #28
 800e4dc:	2100      	movs	r1, #0
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fd fca8 	bl	800be34 <st_dword>
					fs->wflag = 1;
 800e4e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e4ec:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d041      	beq.n	800e578 <f_open+0x23c>
						dw = fs->winsect;
 800e4f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4fa:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800e4fe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e502:	2200      	movs	r2, #0
 800e504:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fe f96e 	bl	800c7ea <remove_chain>
 800e50e:	4603      	mov	r3, r0
 800e510:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800e514:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d12d      	bne.n	800e578 <f_open+0x23c>
							res = move_window(fs, dw);
 800e51c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e520:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800e524:	4618      	mov	r0, r3
 800e526:	f7fd ff11 	bl	800c34c <move_window>
 800e52a:	4603      	mov	r3, r0
 800e52c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e530:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e534:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800e538:	3a01      	subs	r2, #1
 800e53a:	615a      	str	r2, [r3, #20]
 800e53c:	e01c      	b.n	800e578 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e53e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e542:	2b00      	cmp	r3, #0
 800e544:	d118      	bne.n	800e578 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e546:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800e54a:	f003 0310 	and.w	r3, r3, #16
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d003      	beq.n	800e55a <f_open+0x21e>
					res = FR_NO_FILE;
 800e552:	2304      	movs	r3, #4
 800e554:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e558:	e00e      	b.n	800e578 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e55a:	1dfb      	adds	r3, r7, #7
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	f003 0302 	and.w	r3, r3, #2
 800e562:	2b00      	cmp	r3, #0
 800e564:	d008      	beq.n	800e578 <f_open+0x23c>
 800e566:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800e56a:	f003 0301 	and.w	r3, r3, #1
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d002      	beq.n	800e578 <f_open+0x23c>
						res = FR_DENIED;
 800e572:	2307      	movs	r3, #7
 800e574:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800e578:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d136      	bne.n	800e5ee <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e580:	1dfb      	adds	r3, r7, #7
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	f003 0308 	and.w	r3, r3, #8
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d005      	beq.n	800e598 <f_open+0x25c>
				mode |= FA_MODIFIED;
 800e58c:	1dfb      	adds	r3, r7, #7
 800e58e:	1dfa      	adds	r2, r7, #7
 800e590:	7812      	ldrb	r2, [r2, #0]
 800e592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e596:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e598:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e59c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e59e:	f107 030c 	add.w	r3, r7, #12
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e5a6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800e5aa:	f107 030c 	add.w	r3, r7, #12
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e5b2:	1dfb      	adds	r3, r7, #7
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	f023 0301 	bic.w	r3, r3, #1
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	bf14      	ite	ne
 800e5be:	2301      	movne	r3, #1
 800e5c0:	2300      	moveq	r3, #0
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e5ca:	4611      	mov	r1, r2
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7fd fd8b 	bl	800c0e8 <inc_lock>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	f107 030c 	add.w	r3, r7, #12
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e5dc:	f107 030c 	add.w	r3, r7, #12
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	691b      	ldr	r3, [r3, #16]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d102      	bne.n	800e5ee <f_open+0x2b2>
 800e5e8:	2302      	movs	r3, #2
 800e5ea:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e5ee:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f040 80dc 	bne.w	800e7b0 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e5f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e5fc:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800e600:	4611      	mov	r1, r2
 800e602:	4618      	mov	r0, r3
 800e604:	f7fe fba9 	bl	800cd5a <ld_clust>
 800e608:	4602      	mov	r2, r0
 800e60a:	f107 030c 	add.w	r3, r7, #12
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e612:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e616:	331c      	adds	r3, #28
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fd fbcd 	bl	800bdb8 <ld_dword>
 800e61e:	4602      	mov	r2, r0
 800e620:	f107 030c 	add.w	r3, r7, #12
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e628:	f107 030c 	add.w	r3, r7, #12
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2200      	movs	r2, #0
 800e630:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e632:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800e636:	f107 030c 	add.w	r3, r7, #12
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e63e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e642:	88da      	ldrh	r2, [r3, #6]
 800e644:	f107 030c 	add.w	r3, r7, #12
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e64c:	f107 030c 	add.w	r3, r7, #12
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	1dfa      	adds	r2, r7, #7
 800e654:	7812      	ldrb	r2, [r2, #0]
 800e656:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e658:	f107 030c 	add.w	r3, r7, #12
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2200      	movs	r2, #0
 800e660:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e662:	f107 030c 	add.w	r3, r7, #12
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2200      	movs	r2, #0
 800e66a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e66c:	f107 030c 	add.w	r3, r7, #12
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2200      	movs	r2, #0
 800e674:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e676:	f107 030c 	add.w	r3, r7, #12
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3330      	adds	r3, #48	; 0x30
 800e67e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e682:	2100      	movs	r1, #0
 800e684:	4618      	mov	r0, r3
 800e686:	f7fd fc22 	bl	800bece <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e68a:	1dfb      	adds	r3, r7, #7
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	f003 0320 	and.w	r3, r3, #32
 800e692:	2b00      	cmp	r3, #0
 800e694:	f000 808c 	beq.w	800e7b0 <f_open+0x474>
 800e698:	f107 030c 	add.w	r3, r7, #12
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	f000 8085 	beq.w	800e7b0 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e6a6:	f107 030c 	add.w	r3, r7, #12
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	68da      	ldr	r2, [r3, #12]
 800e6ae:	f107 030c 	add.w	r3, r7, #12
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e6b6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e6ba:	895b      	ldrh	r3, [r3, #10]
 800e6bc:	025b      	lsls	r3, r3, #9
 800e6be:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e6c2:	f107 030c 	add.w	r3, r7, #12
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	689b      	ldr	r3, [r3, #8]
 800e6ca:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e6ce:	f107 030c 	add.w	r3, r7, #12
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	68db      	ldr	r3, [r3, #12]
 800e6d6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800e6da:	e01f      	b.n	800e71c <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 800e6dc:	f107 030c 	add.w	r3, r7, #12
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7fd feeb 	bl	800c4c2 <get_fat>
 800e6ec:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800e6f0:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d802      	bhi.n	800e6fe <f_open+0x3c2>
 800e6f8:	2302      	movs	r3, #2
 800e6fa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e6fe:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800e702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e706:	d102      	bne.n	800e70e <f_open+0x3d2>
 800e708:	2301      	movs	r3, #1
 800e70a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e70e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800e712:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800e716:	1ad3      	subs	r3, r2, r3
 800e718:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800e71c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e720:	2b00      	cmp	r3, #0
 800e722:	d105      	bne.n	800e730 <f_open+0x3f4>
 800e724:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800e728:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d8d5      	bhi.n	800e6dc <f_open+0x3a0>
				}
				fp->clust = clst;
 800e730:	f107 030c 	add.w	r3, r7, #12
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800e73a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e73c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e740:	2b00      	cmp	r3, #0
 800e742:	d135      	bne.n	800e7b0 <f_open+0x474>
 800e744:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800e748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d02f      	beq.n	800e7b0 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e750:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e754:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800e758:	4618      	mov	r0, r3
 800e75a:	f7fd fe93 	bl	800c484 <clust2sect>
 800e75e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800e762:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800e766:	2b00      	cmp	r3, #0
 800e768:	d103      	bne.n	800e772 <f_open+0x436>
						res = FR_INT_ERR;
 800e76a:	2302      	movs	r3, #2
 800e76c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e770:	e01e      	b.n	800e7b0 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e772:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800e776:	0a5a      	lsrs	r2, r3, #9
 800e778:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800e77c:	441a      	add	r2, r3
 800e77e:	f107 030c 	add.w	r3, r7, #12
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e786:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e78a:	7858      	ldrb	r0, [r3, #1]
 800e78c:	f107 030c 	add.w	r3, r7, #12
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e796:	f107 030c 	add.w	r3, r7, #12
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	6a1a      	ldr	r2, [r3, #32]
 800e79e:	2301      	movs	r3, #1
 800e7a0:	f7fd fa94 	bl	800bccc <disk_read>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d002      	beq.n	800e7b0 <f_open+0x474>
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e7b0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d004      	beq.n	800e7c2 <f_open+0x486>
 800e7b8:	f107 030c 	add.w	r3, r7, #12
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e7c2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e7c6:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800e7ca:	4611      	mov	r1, r2
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7fd fbf1 	bl	800bfb4 <unlock_fs>
 800e7d2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b08e      	sub	sp, #56	; 0x38
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	607a      	str	r2, [r7, #4]
 800e7ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f107 0214 	add.w	r2, r7, #20
 800e7fe:	4611      	mov	r1, r2
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff fcef 	bl	800e1e4 <validate>
 800e806:	4603      	mov	r3, r0
 800e808:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e80c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e810:	2b00      	cmp	r3, #0
 800e812:	d107      	bne.n	800e824 <f_read+0x44>
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	7d5b      	ldrb	r3, [r3, #21]
 800e818:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e81c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e820:	2b00      	cmp	r3, #0
 800e822:	d009      	beq.n	800e838 <f_read+0x58>
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e82a:	4611      	mov	r1, r2
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7fd fbc1 	bl	800bfb4 <unlock_fs>
 800e832:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e836:	e13d      	b.n	800eab4 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	7d1b      	ldrb	r3, [r3, #20]
 800e83c:	f003 0301 	and.w	r3, r3, #1
 800e840:	2b00      	cmp	r3, #0
 800e842:	d106      	bne.n	800e852 <f_read+0x72>
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	2107      	movs	r1, #7
 800e848:	4618      	mov	r0, r3
 800e84a:	f7fd fbb3 	bl	800bfb4 <unlock_fs>
 800e84e:	2307      	movs	r3, #7
 800e850:	e130      	b.n	800eab4 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	68da      	ldr	r2, [r3, #12]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	699b      	ldr	r3, [r3, #24]
 800e85a:	1ad3      	subs	r3, r2, r3
 800e85c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	6a3b      	ldr	r3, [r7, #32]
 800e862:	429a      	cmp	r2, r3
 800e864:	f240 811c 	bls.w	800eaa0 <f_read+0x2c0>
 800e868:	6a3b      	ldr	r3, [r7, #32]
 800e86a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e86c:	e118      	b.n	800eaa0 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	699b      	ldr	r3, [r3, #24]
 800e872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e876:	2b00      	cmp	r3, #0
 800e878:	f040 80e4 	bne.w	800ea44 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	699b      	ldr	r3, [r3, #24]
 800e880:	0a5b      	lsrs	r3, r3, #9
 800e882:	697a      	ldr	r2, [r7, #20]
 800e884:	8952      	ldrh	r2, [r2, #10]
 800e886:	3a01      	subs	r2, #1
 800e888:	4013      	ands	r3, r2
 800e88a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d139      	bne.n	800e906 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	699b      	ldr	r3, [r3, #24]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d103      	bne.n	800e8a2 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	633b      	str	r3, [r7, #48]	; 0x30
 800e8a0:	e013      	b.n	800e8ca <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d007      	beq.n	800e8ba <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	699b      	ldr	r3, [r3, #24]
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	68f8      	ldr	r0, [r7, #12]
 800e8b2:	f7fe f897 	bl	800c9e4 <clmt_clust>
 800e8b6:	6338      	str	r0, [r7, #48]	; 0x30
 800e8b8:	e007      	b.n	800e8ca <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e8ba:	68fa      	ldr	r2, [r7, #12]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	69db      	ldr	r3, [r3, #28]
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	4610      	mov	r0, r2
 800e8c4:	f7fd fdfd 	bl	800c4c2 <get_fat>
 800e8c8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d809      	bhi.n	800e8e4 <f_read+0x104>
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2202      	movs	r2, #2
 800e8d4:	755a      	strb	r2, [r3, #21]
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	2102      	movs	r1, #2
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7fd fb6a 	bl	800bfb4 <unlock_fs>
 800e8e0:	2302      	movs	r3, #2
 800e8e2:	e0e7      	b.n	800eab4 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ea:	d109      	bne.n	800e900 <f_read+0x120>
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	755a      	strb	r2, [r3, #21]
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	2101      	movs	r1, #1
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fd fb5c 	bl	800bfb4 <unlock_fs>
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	e0d9      	b.n	800eab4 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e904:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e906:	697a      	ldr	r2, [r7, #20]
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	69db      	ldr	r3, [r3, #28]
 800e90c:	4619      	mov	r1, r3
 800e90e:	4610      	mov	r0, r2
 800e910:	f7fd fdb8 	bl	800c484 <clust2sect>
 800e914:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d109      	bne.n	800e930 <f_read+0x150>
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2202      	movs	r2, #2
 800e920:	755a      	strb	r2, [r3, #21]
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	2102      	movs	r1, #2
 800e926:	4618      	mov	r0, r3
 800e928:	f7fd fb44 	bl	800bfb4 <unlock_fs>
 800e92c:	2302      	movs	r3, #2
 800e92e:	e0c1      	b.n	800eab4 <f_read+0x2d4>
			sect += csect;
 800e930:	69ba      	ldr	r2, [r7, #24]
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	4413      	add	r3, r2
 800e936:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	0a5b      	lsrs	r3, r3, #9
 800e93c:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e940:	2b00      	cmp	r3, #0
 800e942:	d03e      	beq.n	800e9c2 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e944:	69fa      	ldr	r2, [r7, #28]
 800e946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e948:	4413      	add	r3, r2
 800e94a:	697a      	ldr	r2, [r7, #20]
 800e94c:	8952      	ldrh	r2, [r2, #10]
 800e94e:	4293      	cmp	r3, r2
 800e950:	d905      	bls.n	800e95e <f_read+0x17e>
					cc = fs->csize - csect;
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	895b      	ldrh	r3, [r3, #10]
 800e956:	461a      	mov	r2, r3
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	1ad3      	subs	r3, r2, r3
 800e95c:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	7858      	ldrb	r0, [r3, #1]
 800e962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e964:	69ba      	ldr	r2, [r7, #24]
 800e966:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e968:	f7fd f9b0 	bl	800bccc <disk_read>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d009      	beq.n	800e986 <f_read+0x1a6>
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2201      	movs	r2, #1
 800e976:	755a      	strb	r2, [r3, #21]
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	2101      	movs	r1, #1
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7fd fb19 	bl	800bfb4 <unlock_fs>
 800e982:	2301      	movs	r3, #1
 800e984:	e096      	b.n	800eab4 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	7d1b      	ldrb	r3, [r3, #20]
 800e98a:	b25b      	sxtb	r3, r3
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	da14      	bge.n	800e9ba <f_read+0x1da>
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	6a1a      	ldr	r2, [r3, #32]
 800e994:	69bb      	ldr	r3, [r7, #24]
 800e996:	1ad3      	subs	r3, r2, r3
 800e998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d90d      	bls.n	800e9ba <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	6a1a      	ldr	r2, [r3, #32]
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	1ad3      	subs	r3, r2, r3
 800e9a6:	025b      	lsls	r3, r3, #9
 800e9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9aa:	18d0      	adds	r0, r2, r3
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	3330      	adds	r3, #48	; 0x30
 800e9b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	f7fd fa69 	bl	800be8c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9bc:	025b      	lsls	r3, r3, #9
 800e9be:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e9c0:	e05a      	b.n	800ea78 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	6a1b      	ldr	r3, [r3, #32]
 800e9c6:	69ba      	ldr	r2, [r7, #24]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d038      	beq.n	800ea3e <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	7d1b      	ldrb	r3, [r3, #20]
 800e9d0:	b25b      	sxtb	r3, r3
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	da1d      	bge.n	800ea12 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	7858      	ldrb	r0, [r3, #1]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	6a1a      	ldr	r2, [r3, #32]
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	f7fd f991 	bl	800bd0c <disk_write>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d009      	beq.n	800ea04 <f_read+0x224>
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	755a      	strb	r2, [r3, #21]
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	2101      	movs	r1, #1
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fd fada 	bl	800bfb4 <unlock_fs>
 800ea00:	2301      	movs	r3, #1
 800ea02:	e057      	b.n	800eab4 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	7d1b      	ldrb	r3, [r3, #20]
 800ea08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea0c:	b2da      	uxtb	r2, r3
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	7858      	ldrb	r0, [r3, #1]
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	69ba      	ldr	r2, [r7, #24]
 800ea20:	f7fd f954 	bl	800bccc <disk_read>
 800ea24:	4603      	mov	r3, r0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d009      	beq.n	800ea3e <f_read+0x25e>
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	755a      	strb	r2, [r3, #21]
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	2101      	movs	r1, #1
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7fd fabd 	bl	800bfb4 <unlock_fs>
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	e03a      	b.n	800eab4 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	69ba      	ldr	r2, [r7, #24]
 800ea42:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	699b      	ldr	r3, [r3, #24]
 800ea48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea4c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ea50:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ea52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d901      	bls.n	800ea5e <f_read+0x27e>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	699b      	ldr	r3, [r3, #24]
 800ea68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea6c:	4413      	add	r3, r2
 800ea6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea70:	4619      	mov	r1, r3
 800ea72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea74:	f7fd fa0a 	bl	800be8c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ea78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7c:	4413      	add	r3, r2
 800ea7e:	627b      	str	r3, [r7, #36]	; 0x24
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	699a      	ldr	r2, [r3, #24]
 800ea84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea86:	441a      	add	r2, r3
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	619a      	str	r2, [r3, #24]
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea92:	441a      	add	r2, r3
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	601a      	str	r2, [r3, #0]
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9c:	1ad3      	subs	r3, r2, r3
 800ea9e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	f47f aee3 	bne.w	800e86e <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	2100      	movs	r1, #0
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7fd fa81 	bl	800bfb4 <unlock_fs>
 800eab2:	2300      	movs	r3, #0
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3738      	adds	r7, #56	; 0x38
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b08c      	sub	sp, #48	; 0x30
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	607a      	str	r2, [r7, #4]
 800eac8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	2200      	movs	r2, #0
 800ead2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f107 0210 	add.w	r2, r7, #16
 800eada:	4611      	mov	r1, r2
 800eadc:	4618      	mov	r0, r3
 800eade:	f7ff fb81 	bl	800e1e4 <validate>
 800eae2:	4603      	mov	r3, r0
 800eae4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eae8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d107      	bne.n	800eb00 <f_write+0x44>
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	7d5b      	ldrb	r3, [r3, #21]
 800eaf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800eaf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d009      	beq.n	800eb14 <f_write+0x58>
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800eb06:	4611      	mov	r1, r2
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fd fa53 	bl	800bfb4 <unlock_fs>
 800eb0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb12:	e173      	b.n	800edfc <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	7d1b      	ldrb	r3, [r3, #20]
 800eb18:	f003 0302 	and.w	r3, r3, #2
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d106      	bne.n	800eb2e <f_write+0x72>
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	2107      	movs	r1, #7
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7fd fa45 	bl	800bfb4 <unlock_fs>
 800eb2a:	2307      	movs	r3, #7
 800eb2c:	e166      	b.n	800edfc <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	699a      	ldr	r2, [r3, #24]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	441a      	add	r2, r3
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	699b      	ldr	r3, [r3, #24]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	f080 814b 	bcs.w	800edd6 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	699b      	ldr	r3, [r3, #24]
 800eb44:	43db      	mvns	r3, r3
 800eb46:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800eb48:	e145      	b.n	800edd6 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	699b      	ldr	r3, [r3, #24]
 800eb4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	f040 8101 	bne.w	800ed5a <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	699b      	ldr	r3, [r3, #24]
 800eb5c:	0a5b      	lsrs	r3, r3, #9
 800eb5e:	693a      	ldr	r2, [r7, #16]
 800eb60:	8952      	ldrh	r2, [r2, #10]
 800eb62:	3a01      	subs	r2, #1
 800eb64:	4013      	ands	r3, r2
 800eb66:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800eb68:	69bb      	ldr	r3, [r7, #24]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d14d      	bne.n	800ec0a <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	699b      	ldr	r3, [r3, #24]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d10c      	bne.n	800eb90 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	689b      	ldr	r3, [r3, #8]
 800eb7a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800eb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d11a      	bne.n	800ebb8 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2100      	movs	r1, #0
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fd fe94 	bl	800c8b4 <create_chain>
 800eb8c:	62b8      	str	r0, [r7, #40]	; 0x28
 800eb8e:	e013      	b.n	800ebb8 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d007      	beq.n	800eba8 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	699b      	ldr	r3, [r3, #24]
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f7fd ff20 	bl	800c9e4 <clmt_clust>
 800eba4:	62b8      	str	r0, [r7, #40]	; 0x28
 800eba6:	e007      	b.n	800ebb8 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	69db      	ldr	r3, [r3, #28]
 800ebae:	4619      	mov	r1, r3
 800ebb0:	4610      	mov	r0, r2
 800ebb2:	f7fd fe7f 	bl	800c8b4 <create_chain>
 800ebb6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ebb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f000 8110 	beq.w	800ede0 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ebc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d109      	bne.n	800ebda <f_write+0x11e>
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2202      	movs	r2, #2
 800ebca:	755a      	strb	r2, [r3, #21]
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	2102      	movs	r1, #2
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7fd f9ef 	bl	800bfb4 <unlock_fs>
 800ebd6:	2302      	movs	r3, #2
 800ebd8:	e110      	b.n	800edfc <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ebda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe0:	d109      	bne.n	800ebf6 <f_write+0x13a>
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	755a      	strb	r2, [r3, #21]
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	2101      	movs	r1, #1
 800ebec:	4618      	mov	r0, r3
 800ebee:	f7fd f9e1 	bl	800bfb4 <unlock_fs>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	e102      	b.n	800edfc <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebfa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	689b      	ldr	r3, [r3, #8]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d102      	bne.n	800ec0a <f_write+0x14e>
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec08:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	7d1b      	ldrb	r3, [r3, #20]
 800ec0e:	b25b      	sxtb	r3, r3
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	da1d      	bge.n	800ec50 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	7858      	ldrb	r0, [r3, #1]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	6a1a      	ldr	r2, [r3, #32]
 800ec22:	2301      	movs	r3, #1
 800ec24:	f7fd f872 	bl	800bd0c <disk_write>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d009      	beq.n	800ec42 <f_write+0x186>
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2201      	movs	r2, #1
 800ec32:	755a      	strb	r2, [r3, #21]
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	2101      	movs	r1, #1
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7fd f9bb 	bl	800bfb4 <unlock_fs>
 800ec3e:	2301      	movs	r3, #1
 800ec40:	e0dc      	b.n	800edfc <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	7d1b      	ldrb	r3, [r3, #20]
 800ec46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec4a:	b2da      	uxtb	r2, r3
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ec50:	693a      	ldr	r2, [r7, #16]
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	69db      	ldr	r3, [r3, #28]
 800ec56:	4619      	mov	r1, r3
 800ec58:	4610      	mov	r0, r2
 800ec5a:	f7fd fc13 	bl	800c484 <clust2sect>
 800ec5e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d109      	bne.n	800ec7a <f_write+0x1be>
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2202      	movs	r2, #2
 800ec6a:	755a      	strb	r2, [r3, #21]
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	2102      	movs	r1, #2
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7fd f99f 	bl	800bfb4 <unlock_fs>
 800ec76:	2302      	movs	r3, #2
 800ec78:	e0c0      	b.n	800edfc <f_write+0x340>
			sect += csect;
 800ec7a:	697a      	ldr	r2, [r7, #20]
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	4413      	add	r3, r2
 800ec80:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	0a5b      	lsrs	r3, r3, #9
 800ec86:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ec88:	6a3b      	ldr	r3, [r7, #32]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d041      	beq.n	800ed12 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ec8e:	69ba      	ldr	r2, [r7, #24]
 800ec90:	6a3b      	ldr	r3, [r7, #32]
 800ec92:	4413      	add	r3, r2
 800ec94:	693a      	ldr	r2, [r7, #16]
 800ec96:	8952      	ldrh	r2, [r2, #10]
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d905      	bls.n	800eca8 <f_write+0x1ec>
					cc = fs->csize - csect;
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	895b      	ldrh	r3, [r3, #10]
 800eca0:	461a      	mov	r2, r3
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	1ad3      	subs	r3, r2, r3
 800eca6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	7858      	ldrb	r0, [r3, #1]
 800ecac:	6a3b      	ldr	r3, [r7, #32]
 800ecae:	697a      	ldr	r2, [r7, #20]
 800ecb0:	69f9      	ldr	r1, [r7, #28]
 800ecb2:	f7fd f82b 	bl	800bd0c <disk_write>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d009      	beq.n	800ecd0 <f_write+0x214>
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	755a      	strb	r2, [r3, #21]
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	2101      	movs	r1, #1
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fd f974 	bl	800bfb4 <unlock_fs>
 800eccc:	2301      	movs	r3, #1
 800ecce:	e095      	b.n	800edfc <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6a1a      	ldr	r2, [r3, #32]
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	6a3a      	ldr	r2, [r7, #32]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d915      	bls.n	800ed0a <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	6a1a      	ldr	r2, [r3, #32]
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	1ad3      	subs	r3, r2, r3
 800ecec:	025b      	lsls	r3, r3, #9
 800ecee:	69fa      	ldr	r2, [r7, #28]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	f7fd f8c8 	bl	800be8c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	7d1b      	ldrb	r3, [r3, #20]
 800ed00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed04:	b2da      	uxtb	r2, r3
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ed0a:	6a3b      	ldr	r3, [r7, #32]
 800ed0c:	025b      	lsls	r3, r3, #9
 800ed0e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ed10:	e044      	b.n	800ed9c <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	6a1b      	ldr	r3, [r3, #32]
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d01b      	beq.n	800ed54 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	699a      	ldr	r2, [r3, #24]
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d215      	bcs.n	800ed54 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	7858      	ldrb	r0, [r3, #1]
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed32:	2301      	movs	r3, #1
 800ed34:	697a      	ldr	r2, [r7, #20]
 800ed36:	f7fc ffc9 	bl	800bccc <disk_read>
 800ed3a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d009      	beq.n	800ed54 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2201      	movs	r2, #1
 800ed44:	755a      	strb	r2, [r3, #21]
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	2101      	movs	r1, #1
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fd f932 	bl	800bfb4 <unlock_fs>
 800ed50:	2301      	movs	r3, #1
 800ed52:	e053      	b.n	800edfc <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	697a      	ldr	r2, [r7, #20]
 800ed58:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	699b      	ldr	r3, [r3, #24]
 800ed5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed62:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ed66:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ed68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d901      	bls.n	800ed74 <f_write+0x2b8>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	699b      	ldr	r3, [r3, #24]
 800ed7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed82:	4413      	add	r3, r2
 800ed84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed86:	69f9      	ldr	r1, [r7, #28]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7fd f87f 	bl	800be8c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	7d1b      	ldrb	r3, [r3, #20]
 800ed92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ed96:	b2da      	uxtb	r2, r3
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ed9c:	69fa      	ldr	r2, [r7, #28]
 800ed9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda0:	4413      	add	r3, r2
 800eda2:	61fb      	str	r3, [r7, #28]
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	699a      	ldr	r2, [r3, #24]
 800eda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edaa:	441a      	add	r2, r3
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	619a      	str	r2, [r3, #24]
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	68da      	ldr	r2, [r3, #12]
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	699b      	ldr	r3, [r3, #24]
 800edb8:	429a      	cmp	r2, r3
 800edba:	bf38      	it	cc
 800edbc:	461a      	movcc	r2, r3
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	60da      	str	r2, [r3, #12]
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	681a      	ldr	r2, [r3, #0]
 800edc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc8:	441a      	add	r2, r3
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	601a      	str	r2, [r3, #0]
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd2:	1ad3      	subs	r3, r2, r3
 800edd4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f47f aeb6 	bne.w	800eb4a <f_write+0x8e>
 800edde:	e000      	b.n	800ede2 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ede0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	7d1b      	ldrb	r3, [r3, #20]
 800ede6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edea:	b2da      	uxtb	r2, r3
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	2100      	movs	r1, #0
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7fd f8dd 	bl	800bfb4 <unlock_fs>
 800edfa:	2300      	movs	r3, #0
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3730      	adds	r7, #48	; 0x30
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b086      	sub	sp, #24
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f107 0208 	add.w	r2, r7, #8
 800ee12:	4611      	mov	r1, r2
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7ff f9e5 	bl	800e1e4 <validate>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ee1e:	7dfb      	ldrb	r3, [r7, #23]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d16d      	bne.n	800ef00 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	7d1b      	ldrb	r3, [r3, #20]
 800ee28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d067      	beq.n	800ef00 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	7d1b      	ldrb	r3, [r3, #20]
 800ee34:	b25b      	sxtb	r3, r3
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	da1a      	bge.n	800ee70 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	7858      	ldrb	r0, [r3, #1]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6a1a      	ldr	r2, [r3, #32]
 800ee48:	2301      	movs	r3, #1
 800ee4a:	f7fc ff5f 	bl	800bd0c <disk_write>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d006      	beq.n	800ee62 <f_sync+0x5e>
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	2101      	movs	r1, #1
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fd f8ab 	bl	800bfb4 <unlock_fs>
 800ee5e:	2301      	movs	r3, #1
 800ee60:	e055      	b.n	800ef0e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	7d1b      	ldrb	r3, [r3, #20]
 800ee66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee6a:	b2da      	uxtb	r2, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ee70:	f7fb ff18 	bl	800aca4 <get_fattime>
 800ee74:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ee76:	68ba      	ldr	r2, [r7, #8]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	4610      	mov	r0, r2
 800ee80:	f7fd fa64 	bl	800c34c <move_window>
 800ee84:	4603      	mov	r3, r0
 800ee86:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ee88:	7dfb      	ldrb	r3, [r7, #23]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d138      	bne.n	800ef00 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee92:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	330b      	adds	r3, #11
 800ee98:	781a      	ldrb	r2, [r3, #0]
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	330b      	adds	r3, #11
 800ee9e:	f042 0220 	orr.w	r2, r2, #32
 800eea2:	b2d2      	uxtb	r2, r2
 800eea4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6818      	ldr	r0, [r3, #0]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	461a      	mov	r2, r3
 800eeb0:	68f9      	ldr	r1, [r7, #12]
 800eeb2:	f7fd ff71 	bl	800cd98 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	f103 021c 	add.w	r2, r3, #28
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	68db      	ldr	r3, [r3, #12]
 800eec0:	4619      	mov	r1, r3
 800eec2:	4610      	mov	r0, r2
 800eec4:	f7fc ffb6 	bl	800be34 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	3316      	adds	r3, #22
 800eecc:	6939      	ldr	r1, [r7, #16]
 800eece:	4618      	mov	r0, r3
 800eed0:	f7fc ffb0 	bl	800be34 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	3312      	adds	r3, #18
 800eed8:	2100      	movs	r1, #0
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7fc ff8f 	bl	800bdfe <st_word>
					fs->wflag = 1;
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	2201      	movs	r2, #1
 800eee4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fd fa5d 	bl	800c3a8 <sync_fs>
 800eeee:	4603      	mov	r3, r0
 800eef0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	7d1b      	ldrb	r3, [r3, #20]
 800eef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eefa:	b2da      	uxtb	r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	7dfa      	ldrb	r2, [r7, #23]
 800ef04:	4611      	mov	r1, r2
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fd f854 	bl	800bfb4 <unlock_fs>
 800ef0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3718      	adds	r7, #24
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ef16:	b580      	push	{r7, lr}
 800ef18:	b084      	sub	sp, #16
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f7ff ff70 	bl	800ee04 <f_sync>
 800ef24:	4603      	mov	r3, r0
 800ef26:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ef28:	7bfb      	ldrb	r3, [r7, #15]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d11d      	bne.n	800ef6a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f107 0208 	add.w	r2, r7, #8
 800ef34:	4611      	mov	r1, r2
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7ff f954 	bl	800e1e4 <validate>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ef40:	7bfb      	ldrb	r3, [r7, #15]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d111      	bne.n	800ef6a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	691b      	ldr	r3, [r3, #16]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fd f95a 	bl	800c204 <dec_lock>
 800ef50:	4603      	mov	r3, r0
 800ef52:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ef54:	7bfb      	ldrb	r3, [r7, #15]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d102      	bne.n	800ef60 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	2100      	movs	r1, #0
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7fd f825 	bl	800bfb4 <unlock_fs>
#endif
		}
	}
	return res;
 800ef6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3710      	adds	r7, #16
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b090      	sub	sp, #64	; 0x40
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f107 0208 	add.w	r2, r7, #8
 800ef84:	4611      	mov	r1, r2
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7ff f92c 	bl	800e1e4 <validate>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ef92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d103      	bne.n	800efa2 <f_lseek+0x2e>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	7d5b      	ldrb	r3, [r3, #21]
 800ef9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800efa2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d009      	beq.n	800efbe <f_lseek+0x4a>
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800efb0:	4611      	mov	r1, r2
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fc fffe 	bl	800bfb4 <unlock_fs>
 800efb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800efbc:	e229      	b.n	800f412 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	f000 80ea 	beq.w	800f19c <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efce:	d164      	bne.n	800f09a <f_lseek+0x126>
			tbl = fp->cltbl;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efd4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800efd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd8:	1d1a      	adds	r2, r3, #4
 800efda:	627a      	str	r2, [r7, #36]	; 0x24
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	617b      	str	r3, [r7, #20]
 800efe0:	2302      	movs	r3, #2
 800efe2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800efea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efec:	2b00      	cmp	r3, #0
 800efee:	d044      	beq.n	800f07a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800eff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff2:	613b      	str	r3, [r7, #16]
 800eff4:	2300      	movs	r3, #0
 800eff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effa:	3302      	adds	r3, #2
 800effc:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800effe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f000:	60fb      	str	r3, [r7, #12]
 800f002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f004:	3301      	adds	r3, #1
 800f006:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fd fa58 	bl	800c4c2 <get_fat>
 800f012:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f016:	2b01      	cmp	r3, #1
 800f018:	d809      	bhi.n	800f02e <f_lseek+0xba>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2202      	movs	r2, #2
 800f01e:	755a      	strb	r2, [r3, #21]
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	2102      	movs	r1, #2
 800f024:	4618      	mov	r0, r3
 800f026:	f7fc ffc5 	bl	800bfb4 <unlock_fs>
 800f02a:	2302      	movs	r3, #2
 800f02c:	e1f1      	b.n	800f412 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f034:	d109      	bne.n	800f04a <f_lseek+0xd6>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2201      	movs	r2, #1
 800f03a:	755a      	strb	r2, [r3, #21]
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	2101      	movs	r1, #1
 800f040:	4618      	mov	r0, r3
 800f042:	f7fc ffb7 	bl	800bfb4 <unlock_fs>
 800f046:	2301      	movs	r3, #1
 800f048:	e1e3      	b.n	800f412 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	3301      	adds	r3, #1
 800f04e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f050:	429a      	cmp	r2, r3
 800f052:	d0d4      	beq.n	800effe <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d809      	bhi.n	800f070 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800f05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05e:	1d1a      	adds	r2, r3, #4
 800f060:	627a      	str	r2, [r7, #36]	; 0x24
 800f062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f064:	601a      	str	r2, [r3, #0]
 800f066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f068:	1d1a      	adds	r2, r3, #4
 800f06a:	627a      	str	r2, [r7, #36]	; 0x24
 800f06c:	693a      	ldr	r2, [r7, #16]
 800f06e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	69db      	ldr	r3, [r3, #28]
 800f074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f076:	429a      	cmp	r2, r3
 800f078:	d3ba      	bcc.n	800eff0 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f080:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	429a      	cmp	r2, r3
 800f088:	d803      	bhi.n	800f092 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800f08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08c:	2200      	movs	r2, #0
 800f08e:	601a      	str	r2, [r3, #0]
 800f090:	e1b6      	b.n	800f400 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f092:	2311      	movs	r3, #17
 800f094:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f098:	e1b2      	b.n	800f400 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	683a      	ldr	r2, [r7, #0]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d902      	bls.n	800f0aa <f_lseek+0x136>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	683a      	ldr	r2, [r7, #0]
 800f0ae:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	f000 81a4 	beq.w	800f400 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	4619      	mov	r1, r3
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7fd fc90 	bl	800c9e4 <clmt_clust>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f0ca:	68ba      	ldr	r2, [r7, #8]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	69db      	ldr	r3, [r3, #28]
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	4610      	mov	r0, r2
 800f0d4:	f7fd f9d6 	bl	800c484 <clust2sect>
 800f0d8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f0da:	69bb      	ldr	r3, [r7, #24]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d109      	bne.n	800f0f4 <f_lseek+0x180>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2202      	movs	r2, #2
 800f0e4:	755a      	strb	r2, [r3, #21]
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	2102      	movs	r1, #2
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fc ff62 	bl	800bfb4 <unlock_fs>
 800f0f0:	2302      	movs	r3, #2
 800f0f2:	e18e      	b.n	800f412 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	3b01      	subs	r3, #1
 800f0f8:	0a5b      	lsrs	r3, r3, #9
 800f0fa:	68ba      	ldr	r2, [r7, #8]
 800f0fc:	8952      	ldrh	r2, [r2, #10]
 800f0fe:	3a01      	subs	r2, #1
 800f100:	4013      	ands	r3, r2
 800f102:	69ba      	ldr	r2, [r7, #24]
 800f104:	4413      	add	r3, r2
 800f106:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	699b      	ldr	r3, [r3, #24]
 800f10c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f110:	2b00      	cmp	r3, #0
 800f112:	f000 8175 	beq.w	800f400 <f_lseek+0x48c>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6a1b      	ldr	r3, [r3, #32]
 800f11a:	69ba      	ldr	r2, [r7, #24]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	f000 816f 	beq.w	800f400 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	7d1b      	ldrb	r3, [r3, #20]
 800f126:	b25b      	sxtb	r3, r3
 800f128:	2b00      	cmp	r3, #0
 800f12a:	da1d      	bge.n	800f168 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	7858      	ldrb	r0, [r3, #1]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6a1a      	ldr	r2, [r3, #32]
 800f13a:	2301      	movs	r3, #1
 800f13c:	f7fc fde6 	bl	800bd0c <disk_write>
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	d009      	beq.n	800f15a <f_lseek+0x1e6>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2201      	movs	r2, #1
 800f14a:	755a      	strb	r2, [r3, #21]
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	2101      	movs	r1, #1
 800f150:	4618      	mov	r0, r3
 800f152:	f7fc ff2f 	bl	800bfb4 <unlock_fs>
 800f156:	2301      	movs	r3, #1
 800f158:	e15b      	b.n	800f412 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	7d1b      	ldrb	r3, [r3, #20]
 800f15e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f162:	b2da      	uxtb	r2, r3
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	7858      	ldrb	r0, [r3, #1]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f172:	2301      	movs	r3, #1
 800f174:	69ba      	ldr	r2, [r7, #24]
 800f176:	f7fc fda9 	bl	800bccc <disk_read>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d009      	beq.n	800f194 <f_lseek+0x220>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2201      	movs	r2, #1
 800f184:	755a      	strb	r2, [r3, #21]
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	2101      	movs	r1, #1
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fc ff12 	bl	800bfb4 <unlock_fs>
 800f190:	2301      	movs	r3, #1
 800f192:	e13e      	b.n	800f412 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	69ba      	ldr	r2, [r7, #24]
 800f198:	621a      	str	r2, [r3, #32]
 800f19a:	e131      	b.n	800f400 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	68db      	ldr	r3, [r3, #12]
 800f1a0:	683a      	ldr	r2, [r7, #0]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d908      	bls.n	800f1b8 <f_lseek+0x244>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	7d1b      	ldrb	r3, [r3, #20]
 800f1aa:	f003 0302 	and.w	r3, r3, #2
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d102      	bne.n	800f1b8 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	699b      	ldr	r3, [r3, #24]
 800f1bc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	637b      	str	r3, [r7, #52]	; 0x34
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1c6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	f000 80c0 	beq.w	800f350 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	895b      	ldrh	r3, [r3, #10]
 800f1d4:	025b      	lsls	r3, r3, #9
 800f1d6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f1d8:	6a3b      	ldr	r3, [r7, #32]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d01b      	beq.n	800f216 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	1e5a      	subs	r2, r3, #1
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	fbb2 f2f3 	udiv	r2, r2, r3
 800f1e8:	6a3b      	ldr	r3, [r7, #32]
 800f1ea:	1e59      	subs	r1, r3, #1
 800f1ec:	69fb      	ldr	r3, [r7, #28]
 800f1ee:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d30f      	bcc.n	800f216 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f1f6:	6a3b      	ldr	r3, [r7, #32]
 800f1f8:	1e5a      	subs	r2, r3, #1
 800f1fa:	69fb      	ldr	r3, [r7, #28]
 800f1fc:	425b      	negs	r3, r3
 800f1fe:	401a      	ands	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	699b      	ldr	r3, [r3, #24]
 800f208:	683a      	ldr	r2, [r7, #0]
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	69db      	ldr	r3, [r3, #28]
 800f212:	63bb      	str	r3, [r7, #56]	; 0x38
 800f214:	e02c      	b.n	800f270 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d123      	bne.n	800f26a <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2100      	movs	r1, #0
 800f226:	4618      	mov	r0, r3
 800f228:	f7fd fb44 	bl	800c8b4 <create_chain>
 800f22c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f230:	2b01      	cmp	r3, #1
 800f232:	d109      	bne.n	800f248 <f_lseek+0x2d4>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2202      	movs	r2, #2
 800f238:	755a      	strb	r2, [r3, #21]
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	2102      	movs	r1, #2
 800f23e:	4618      	mov	r0, r3
 800f240:	f7fc feb8 	bl	800bfb4 <unlock_fs>
 800f244:	2302      	movs	r3, #2
 800f246:	e0e4      	b.n	800f412 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f24e:	d109      	bne.n	800f264 <f_lseek+0x2f0>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2201      	movs	r2, #1
 800f254:	755a      	strb	r2, [r3, #21]
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	2101      	movs	r1, #1
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7fc feaa 	bl	800bfb4 <unlock_fs>
 800f260:	2301      	movs	r3, #1
 800f262:	e0d6      	b.n	800f412 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f268:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f26e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f272:	2b00      	cmp	r3, #0
 800f274:	d06c      	beq.n	800f350 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800f276:	e044      	b.n	800f302 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800f278:	683a      	ldr	r2, [r7, #0]
 800f27a:	69fb      	ldr	r3, [r7, #28]
 800f27c:	1ad3      	subs	r3, r2, r3
 800f27e:	603b      	str	r3, [r7, #0]
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	699a      	ldr	r2, [r3, #24]
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	441a      	add	r2, r3
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	7d1b      	ldrb	r3, [r3, #20]
 800f290:	f003 0302 	and.w	r3, r3, #2
 800f294:	2b00      	cmp	r3, #0
 800f296:	d00b      	beq.n	800f2b0 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7fd fb09 	bl	800c8b4 <create_chain>
 800f2a2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d108      	bne.n	800f2bc <f_lseek+0x348>
							ofs = 0; break;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	603b      	str	r3, [r7, #0]
 800f2ae:	e02c      	b.n	800f30a <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7fd f904 	bl	800c4c2 <get_fat>
 800f2ba:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2c2:	d109      	bne.n	800f2d8 <f_lseek+0x364>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	755a      	strb	r2, [r3, #21]
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	2101      	movs	r1, #1
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fc fe70 	bl	800bfb4 <unlock_fs>
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	e09c      	b.n	800f412 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d904      	bls.n	800f2e8 <f_lseek+0x374>
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	69db      	ldr	r3, [r3, #28]
 800f2e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d309      	bcc.n	800f2fc <f_lseek+0x388>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2202      	movs	r2, #2
 800f2ec:	755a      	strb	r2, [r3, #21]
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	2102      	movs	r1, #2
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fc fe5e 	bl	800bfb4 <unlock_fs>
 800f2f8:	2302      	movs	r3, #2
 800f2fa:	e08a      	b.n	800f412 <f_lseek+0x49e>
					fp->clust = clst;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f300:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f302:	683a      	ldr	r2, [r7, #0]
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	429a      	cmp	r2, r3
 800f308:	d8b6      	bhi.n	800f278 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	699a      	ldr	r2, [r3, #24]
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	441a      	add	r2, r3
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d017      	beq.n	800f350 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f324:	4618      	mov	r0, r3
 800f326:	f7fd f8ad 	bl	800c484 <clust2sect>
 800f32a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d109      	bne.n	800f346 <f_lseek+0x3d2>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2202      	movs	r2, #2
 800f336:	755a      	strb	r2, [r3, #21]
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	2102      	movs	r1, #2
 800f33c:	4618      	mov	r0, r3
 800f33e:	f7fc fe39 	bl	800bfb4 <unlock_fs>
 800f342:	2302      	movs	r3, #2
 800f344:	e065      	b.n	800f412 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	0a5b      	lsrs	r3, r3, #9
 800f34a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f34c:	4413      	add	r3, r2
 800f34e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	699a      	ldr	r2, [r3, #24]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	68db      	ldr	r3, [r3, #12]
 800f358:	429a      	cmp	r2, r3
 800f35a:	d90a      	bls.n	800f372 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	699a      	ldr	r2, [r3, #24]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	7d1b      	ldrb	r3, [r3, #20]
 800f368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f36c:	b2da      	uxtb	r2, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	699b      	ldr	r3, [r3, #24]
 800f376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d040      	beq.n	800f400 <f_lseek+0x48c>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6a1b      	ldr	r3, [r3, #32]
 800f382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f384:	429a      	cmp	r2, r3
 800f386:	d03b      	beq.n	800f400 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	7d1b      	ldrb	r3, [r3, #20]
 800f38c:	b25b      	sxtb	r3, r3
 800f38e:	2b00      	cmp	r3, #0
 800f390:	da1d      	bge.n	800f3ce <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	7858      	ldrb	r0, [r3, #1]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6a1a      	ldr	r2, [r3, #32]
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	f7fc fcb3 	bl	800bd0c <disk_write>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d009      	beq.n	800f3c0 <f_lseek+0x44c>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	755a      	strb	r2, [r3, #21]
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	2101      	movs	r1, #1
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7fc fdfc 	bl	800bfb4 <unlock_fs>
 800f3bc:	2301      	movs	r3, #1
 800f3be:	e028      	b.n	800f412 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	7d1b      	ldrb	r3, [r3, #20]
 800f3c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3c8:	b2da      	uxtb	r2, r3
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	7858      	ldrb	r0, [r3, #1]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f3d8:	2301      	movs	r3, #1
 800f3da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3dc:	f7fc fc76 	bl	800bccc <disk_read>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d009      	beq.n	800f3fa <f_lseek+0x486>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	755a      	strb	r2, [r3, #21]
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	2101      	movs	r1, #1
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7fc fddf 	bl	800bfb4 <unlock_fs>
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	e00b      	b.n	800f412 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3fe:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f406:	4611      	mov	r1, r2
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fc fdd3 	bl	800bfb4 <unlock_fs>
 800f40e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f412:	4618      	mov	r0, r3
 800f414:	3740      	adds	r7, #64	; 0x40
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}

0800f41a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800f41a:	b580      	push	{r7, lr}
 800f41c:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 800f420:	af00      	add	r7, sp, #0
 800f422:	1d3b      	adds	r3, r7, #4
 800f424:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800f426:	2300      	movs	r3, #0
 800f428:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f42c:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 800f430:	1d3b      	adds	r3, r7, #4
 800f432:	2202      	movs	r2, #2
 800f434:	4618      	mov	r0, r3
 800f436:	f7fe fc81 	bl	800dd3c <find_volume>
 800f43a:	4603      	mov	r3, r0
 800f43c:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
	dj.obj.fs = fs;
 800f440:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f444:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	if (res == FR_OK) {
 800f448:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f040 809e 	bne.w	800f58e <f_unlink+0x174>
		INIT_NAMBUF(fs);
 800f452:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f456:	f107 020c 	add.w	r2, r7, #12
 800f45a:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 800f45c:	1d3b      	adds	r3, r7, #4
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800f464:	4611      	mov	r1, r2
 800f466:	4618      	mov	r0, r3
 800f468:	f7fe fb5c 	bl	800db24 <follow_path>
 800f46c:	4603      	mov	r3, r0
 800f46e:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800f472:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f476:	2b00      	cmp	r3, #0
 800f478:	d108      	bne.n	800f48c <f_unlink+0x72>
 800f47a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800f47e:	2102      	movs	r1, #2
 800f480:	4618      	mov	r0, r3
 800f482:	f7fc fdb3 	bl	800bfec <chk_lock>
 800f486:	4603      	mov	r3, r0
 800f488:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800f48c:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f490:	2b00      	cmp	r3, #0
 800f492:	d17c      	bne.n	800f58e <f_unlink+0x174>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800f494:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 800f498:	b25b      	sxtb	r3, r3
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	da03      	bge.n	800f4a6 <f_unlink+0x8c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800f49e:	2306      	movs	r3, #6
 800f4a0:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 800f4a4:	e008      	b.n	800f4b8 <f_unlink+0x9e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800f4a6:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 800f4aa:	f003 0301 	and.w	r3, r3, #1
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d002      	beq.n	800f4b8 <f_unlink+0x9e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800f4b2:	2307      	movs	r3, #7
 800f4b4:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				}
			}
			if (res == FR_OK) {
 800f4b8:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d13b      	bne.n	800f538 <f_unlink+0x11e>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800f4c0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f4c4:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800f4c8:	4611      	mov	r1, r2
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fd fc45 	bl	800cd5a <ld_clust>
 800f4d0:	f8c7 0278 	str.w	r0, [r7, #632]	; 0x278
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800f4d4:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 800f4d8:	f003 0310 	and.w	r3, r3, #16
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d02b      	beq.n	800f538 <f_unlink+0x11e>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800f4e0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f4e4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
						sdj.obj.sclust = dclst;
 800f4e8:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800f4ec:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800f4f0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800f4f4:	2100      	movs	r1, #0
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fd faa8 	bl	800ca4c <dir_sdi>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						if (res == FR_OK) {
 800f502:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f506:	2b00      	cmp	r3, #0
 800f508:	d116      	bne.n	800f538 <f_unlink+0x11e>
							res = dir_read(&sdj, 0);			/* Read an item */
 800f50a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800f50e:	2100      	movs	r1, #0
 800f510:	4618      	mov	r0, r3
 800f512:	f7fd fe64 	bl	800d1de <dir_read>
 800f516:	4603      	mov	r3, r0
 800f518:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800f51c:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f520:	2b00      	cmp	r3, #0
 800f522:	d102      	bne.n	800f52a <f_unlink+0x110>
 800f524:	2307      	movs	r3, #7
 800f526:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800f52a:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f52e:	2b04      	cmp	r3, #4
 800f530:	d102      	bne.n	800f538 <f_unlink+0x11e>
 800f532:	2300      	movs	r3, #0
 800f534:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						}
					}
				}
			}
			if (res == FR_OK) {
 800f538:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d126      	bne.n	800f58e <f_unlink+0x174>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800f540:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800f544:	4618      	mov	r0, r3
 800f546:	f7fe f8a9 	bl	800d69c <dir_remove>
 800f54a:	4603      	mov	r3, r0
 800f54c:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800f550:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f554:	2b00      	cmp	r3, #0
 800f556:	d10e      	bne.n	800f576 <f_unlink+0x15c>
 800f558:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00a      	beq.n	800f576 <f_unlink+0x15c>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800f560:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800f564:	2200      	movs	r2, #0
 800f566:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7fd f93d 	bl	800c7ea <remove_chain>
 800f570:	4603      	mov	r3, r0
 800f572:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800f576:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d107      	bne.n	800f58e <f_unlink+0x174>
 800f57e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f582:	4618      	mov	r0, r3
 800f584:	f7fc ff10 	bl	800c3a8 <sync_fs>
 800f588:	4603      	mov	r3, r0
 800f58a:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f58e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f592:	f897 227f 	ldrb.w	r2, [r7, #639]	; 0x27f
 800f596:	4611      	mov	r1, r2
 800f598:	4618      	mov	r0, r3
 800f59a:	f7fc fd0b 	bl	800bfb4 <unlock_fs>
 800f59e:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f507 7720 	add.w	r7, r7, #640	; 0x280
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b087      	sub	sp, #28
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	4613      	mov	r3, r2
 800f5b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f5c2:	4b1f      	ldr	r3, [pc, #124]	; (800f640 <FATFS_LinkDriverEx+0x94>)
 800f5c4:	7a5b      	ldrb	r3, [r3, #9]
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d131      	bne.n	800f630 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f5cc:	4b1c      	ldr	r3, [pc, #112]	; (800f640 <FATFS_LinkDriverEx+0x94>)
 800f5ce:	7a5b      	ldrb	r3, [r3, #9]
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	4b1a      	ldr	r3, [pc, #104]	; (800f640 <FATFS_LinkDriverEx+0x94>)
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f5da:	4b19      	ldr	r3, [pc, #100]	; (800f640 <FATFS_LinkDriverEx+0x94>)
 800f5dc:	7a5b      	ldrb	r3, [r3, #9]
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	4a17      	ldr	r2, [pc, #92]	; (800f640 <FATFS_LinkDriverEx+0x94>)
 800f5e2:	009b      	lsls	r3, r3, #2
 800f5e4:	4413      	add	r3, r2
 800f5e6:	68fa      	ldr	r2, [r7, #12]
 800f5e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f5ea:	4b15      	ldr	r3, [pc, #84]	; (800f640 <FATFS_LinkDriverEx+0x94>)
 800f5ec:	7a5b      	ldrb	r3, [r3, #9]
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	4b13      	ldr	r3, [pc, #76]	; (800f640 <FATFS_LinkDriverEx+0x94>)
 800f5f4:	4413      	add	r3, r2
 800f5f6:	79fa      	ldrb	r2, [r7, #7]
 800f5f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f5fa:	4b11      	ldr	r3, [pc, #68]	; (800f640 <FATFS_LinkDriverEx+0x94>)
 800f5fc:	7a5b      	ldrb	r3, [r3, #9]
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	1c5a      	adds	r2, r3, #1
 800f602:	b2d1      	uxtb	r1, r2
 800f604:	4a0e      	ldr	r2, [pc, #56]	; (800f640 <FATFS_LinkDriverEx+0x94>)
 800f606:	7251      	strb	r1, [r2, #9]
 800f608:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f60a:	7dbb      	ldrb	r3, [r7, #22]
 800f60c:	3330      	adds	r3, #48	; 0x30
 800f60e:	b2da      	uxtb	r2, r3
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	3301      	adds	r3, #1
 800f618:	223a      	movs	r2, #58	; 0x3a
 800f61a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	3302      	adds	r3, #2
 800f620:	222f      	movs	r2, #47	; 0x2f
 800f622:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	3303      	adds	r3, #3
 800f628:	2200      	movs	r2, #0
 800f62a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f62c:	2300      	movs	r3, #0
 800f62e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f630:	7dfb      	ldrb	r3, [r7, #23]
}
 800f632:	4618      	mov	r0, r3
 800f634:	371c      	adds	r7, #28
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr
 800f63e:	bf00      	nop
 800f640:	20000b58 	.word	0x20000b58

0800f644 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f64e:	2200      	movs	r2, #0
 800f650:	6839      	ldr	r1, [r7, #0]
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f7ff ffaa 	bl	800f5ac <FATFS_LinkDriverEx>
 800f658:	4603      	mov	r3, r0
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
	...

0800f664 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f664:	b480      	push	{r7}
 800f666:	b089      	sub	sp, #36	; 0x24
 800f668:	af00      	add	r7, sp, #0
 800f66a:	4603      	mov	r3, r0
 800f66c:	6039      	str	r1, [r7, #0]
 800f66e:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800f670:	88fb      	ldrh	r3, [r7, #6]
 800f672:	2b7f      	cmp	r3, #127	; 0x7f
 800f674:	d802      	bhi.n	800f67c <ff_convert+0x18>
		c = chr;
 800f676:	88fb      	ldrh	r3, [r7, #6]
 800f678:	837b      	strh	r3, [r7, #26]
 800f67a:	e045      	b.n	800f708 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d005      	beq.n	800f68e <ff_convert+0x2a>
			p = oem2uni;
 800f682:	4b25      	ldr	r3, [pc, #148]	; (800f718 <ff_convert+0xb4>)
 800f684:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800f686:	f245 5320 	movw	r3, #21792	; 0x5520
 800f68a:	60bb      	str	r3, [r7, #8]
 800f68c:	e004      	b.n	800f698 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800f68e:	4b23      	ldr	r3, [pc, #140]	; (800f71c <ff_convert+0xb8>)
 800f690:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800f692:	f245 5320 	movw	r3, #21792	; 0x5520
 800f696:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800f698:	2300      	movs	r3, #0
 800f69a:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800f69c:	2310      	movs	r3, #16
 800f69e:	613b      	str	r3, [r7, #16]
 800f6a0:	e021      	b.n	800f6e6 <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800f6a2:	68ba      	ldr	r2, [r7, #8]
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	1ad3      	subs	r3, r2, r3
 800f6a8:	0fda      	lsrs	r2, r3, #31
 800f6aa:	4413      	add	r3, r2
 800f6ac:	105b      	asrs	r3, r3, #1
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	69fa      	ldr	r2, [r7, #28]
 800f6bc:	4413      	add	r3, r2
 800f6be:	881b      	ldrh	r3, [r3, #0]
 800f6c0:	88fa      	ldrh	r2, [r7, #6]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d013      	beq.n	800f6ee <ff_convert+0x8a>
			if (chr > p[i * 2])
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	009b      	lsls	r3, r3, #2
 800f6ca:	69fa      	ldr	r2, [r7, #28]
 800f6cc:	4413      	add	r3, r2
 800f6ce:	881b      	ldrh	r3, [r3, #0]
 800f6d0:	88fa      	ldrh	r2, [r7, #6]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d902      	bls.n	800f6dc <ff_convert+0x78>
				li = i;
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	60fb      	str	r3, [r7, #12]
 800f6da:	e001      	b.n	800f6e0 <ff_convert+0x7c>
			else
				hi = i;
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	3b01      	subs	r3, #1
 800f6e4:	613b      	str	r3, [r7, #16]
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d1da      	bne.n	800f6a2 <ff_convert+0x3e>
 800f6ec:	e000      	b.n	800f6f0 <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800f6ee:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d006      	beq.n	800f704 <ff_convert+0xa0>
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	3302      	adds	r3, #2
 800f6fc:	69fa      	ldr	r2, [r7, #28]
 800f6fe:	4413      	add	r3, r2
 800f700:	881b      	ldrh	r3, [r3, #0]
 800f702:	e000      	b.n	800f706 <ff_convert+0xa2>
 800f704:	2300      	movs	r3, #0
 800f706:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800f708:	8b7b      	ldrh	r3, [r7, #26]
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3724      	adds	r7, #36	; 0x24
 800f70e:	46bd      	mov	sp, r7
 800f710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop
 800f718:	0806364c 	.word	0x0806364c
 800f71c:	0804e1c8 	.word	0x0804e1c8

0800f720 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f720:	b480      	push	{r7}
 800f722:	b087      	sub	sp, #28
 800f724:	af00      	add	r7, sp, #0
 800f726:	4603      	mov	r3, r0
 800f728:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f72a:	88fb      	ldrh	r3, [r7, #6]
 800f72c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f730:	d201      	bcs.n	800f736 <ff_wtoupper+0x16>
 800f732:	4b3e      	ldr	r3, [pc, #248]	; (800f82c <ff_wtoupper+0x10c>)
 800f734:	e000      	b.n	800f738 <ff_wtoupper+0x18>
 800f736:	4b3e      	ldr	r3, [pc, #248]	; (800f830 <ff_wtoupper+0x110>)
 800f738:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	1c9a      	adds	r2, r3, #2
 800f73e:	617a      	str	r2, [r7, #20]
 800f740:	881b      	ldrh	r3, [r3, #0]
 800f742:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f744:	8a7b      	ldrh	r3, [r7, #18]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d068      	beq.n	800f81c <ff_wtoupper+0xfc>
 800f74a:	88fa      	ldrh	r2, [r7, #6]
 800f74c:	8a7b      	ldrh	r3, [r7, #18]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d364      	bcc.n	800f81c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	1c9a      	adds	r2, r3, #2
 800f756:	617a      	str	r2, [r7, #20]
 800f758:	881b      	ldrh	r3, [r3, #0]
 800f75a:	823b      	strh	r3, [r7, #16]
 800f75c:	8a3b      	ldrh	r3, [r7, #16]
 800f75e:	0a1b      	lsrs	r3, r3, #8
 800f760:	81fb      	strh	r3, [r7, #14]
 800f762:	8a3b      	ldrh	r3, [r7, #16]
 800f764:	b2db      	uxtb	r3, r3
 800f766:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f768:	88fa      	ldrh	r2, [r7, #6]
 800f76a:	8a79      	ldrh	r1, [r7, #18]
 800f76c:	8a3b      	ldrh	r3, [r7, #16]
 800f76e:	440b      	add	r3, r1
 800f770:	429a      	cmp	r2, r3
 800f772:	da49      	bge.n	800f808 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f774:	89fb      	ldrh	r3, [r7, #14]
 800f776:	2b08      	cmp	r3, #8
 800f778:	d84f      	bhi.n	800f81a <ff_wtoupper+0xfa>
 800f77a:	a201      	add	r2, pc, #4	; (adr r2, 800f780 <ff_wtoupper+0x60>)
 800f77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f780:	0800f7a5 	.word	0x0800f7a5
 800f784:	0800f7b7 	.word	0x0800f7b7
 800f788:	0800f7cd 	.word	0x0800f7cd
 800f78c:	0800f7d5 	.word	0x0800f7d5
 800f790:	0800f7dd 	.word	0x0800f7dd
 800f794:	0800f7e5 	.word	0x0800f7e5
 800f798:	0800f7ed 	.word	0x0800f7ed
 800f79c:	0800f7f5 	.word	0x0800f7f5
 800f7a0:	0800f7fd 	.word	0x0800f7fd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f7a4:	88fa      	ldrh	r2, [r7, #6]
 800f7a6:	8a7b      	ldrh	r3, [r7, #18]
 800f7a8:	1ad3      	subs	r3, r2, r3
 800f7aa:	005b      	lsls	r3, r3, #1
 800f7ac:	697a      	ldr	r2, [r7, #20]
 800f7ae:	4413      	add	r3, r2
 800f7b0:	881b      	ldrh	r3, [r3, #0]
 800f7b2:	80fb      	strh	r3, [r7, #6]
 800f7b4:	e027      	b.n	800f806 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f7b6:	88fa      	ldrh	r2, [r7, #6]
 800f7b8:	8a7b      	ldrh	r3, [r7, #18]
 800f7ba:	1ad3      	subs	r3, r2, r3
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	f003 0301 	and.w	r3, r3, #1
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	88fa      	ldrh	r2, [r7, #6]
 800f7c6:	1ad3      	subs	r3, r2, r3
 800f7c8:	80fb      	strh	r3, [r7, #6]
 800f7ca:	e01c      	b.n	800f806 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f7cc:	88fb      	ldrh	r3, [r7, #6]
 800f7ce:	3b10      	subs	r3, #16
 800f7d0:	80fb      	strh	r3, [r7, #6]
 800f7d2:	e018      	b.n	800f806 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f7d4:	88fb      	ldrh	r3, [r7, #6]
 800f7d6:	3b20      	subs	r3, #32
 800f7d8:	80fb      	strh	r3, [r7, #6]
 800f7da:	e014      	b.n	800f806 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f7dc:	88fb      	ldrh	r3, [r7, #6]
 800f7de:	3b30      	subs	r3, #48	; 0x30
 800f7e0:	80fb      	strh	r3, [r7, #6]
 800f7e2:	e010      	b.n	800f806 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f7e4:	88fb      	ldrh	r3, [r7, #6]
 800f7e6:	3b1a      	subs	r3, #26
 800f7e8:	80fb      	strh	r3, [r7, #6]
 800f7ea:	e00c      	b.n	800f806 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f7ec:	88fb      	ldrh	r3, [r7, #6]
 800f7ee:	3308      	adds	r3, #8
 800f7f0:	80fb      	strh	r3, [r7, #6]
 800f7f2:	e008      	b.n	800f806 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f7f4:	88fb      	ldrh	r3, [r7, #6]
 800f7f6:	3b50      	subs	r3, #80	; 0x50
 800f7f8:	80fb      	strh	r3, [r7, #6]
 800f7fa:	e004      	b.n	800f806 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f7fc:	88fb      	ldrh	r3, [r7, #6]
 800f7fe:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f802:	80fb      	strh	r3, [r7, #6]
 800f804:	bf00      	nop
			}
			break;
 800f806:	e008      	b.n	800f81a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f808:	89fb      	ldrh	r3, [r7, #14]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d195      	bne.n	800f73a <ff_wtoupper+0x1a>
 800f80e:	8a3b      	ldrh	r3, [r7, #16]
 800f810:	005b      	lsls	r3, r3, #1
 800f812:	697a      	ldr	r2, [r7, #20]
 800f814:	4413      	add	r3, r2
 800f816:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f818:	e78f      	b.n	800f73a <ff_wtoupper+0x1a>
			break;
 800f81a:	bf00      	nop
	}

	return chr;
 800f81c:	88fb      	ldrh	r3, [r7, #6]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	371c      	adds	r7, #28
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop
 800f82c:	08078ad0 	.word	0x08078ad0
 800f830:	08078cc4 	.word	0x08078cc4

0800f834 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b086      	sub	sp, #24
 800f838:	af00      	add	r7, sp, #0
 800f83a:	4603      	mov	r3, r0
 800f83c:	6039      	str	r1, [r7, #0]
 800f83e:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800f840:	2300      	movs	r3, #0
 800f842:	60fb      	str	r3, [r7, #12]
 800f844:	2300      	movs	r3, #0
 800f846:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800f848:	f107 030c 	add.w	r3, r7, #12
 800f84c:	2101      	movs	r1, #1
 800f84e:	4618      	mov	r0, r3
 800f850:	f000 f986 	bl	800fb60 <osSemaphoreCreate>
 800f854:	4602      	mov	r2, r0
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	bf14      	ite	ne
 800f862:	2301      	movne	r3, #1
 800f864:	2300      	moveq	r3, #0
 800f866:	b2db      	uxtb	r3, r3
 800f868:	617b      	str	r3, [r7, #20]

    return ret;
 800f86a:	697b      	ldr	r3, [r7, #20]
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3718      	adds	r7, #24
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f000 fa25 	bl	800fccc <osSemaphoreDelete>
#endif
    return 1;
 800f882:	2301      	movs	r3, #1
}
 800f884:	4618      	mov	r0, r3
 800f886:	3708      	adds	r7, #8
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b084      	sub	sp, #16
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f894:	2300      	movs	r3, #0
 800f896:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800f898:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f000 f991 	bl	800fbc4 <osSemaphoreWait>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d101      	bne.n	800f8ac <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3710      	adds	r7, #16
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b082      	sub	sp, #8
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 f9ce 	bl	800fc60 <osSemaphoreRelease>
#endif
}
 800f8c4:	bf00      	nop
 800f8c6:	3708      	adds	r7, #8
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}

0800f8cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b085      	sub	sp, #20
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f8da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f8de:	2b84      	cmp	r3, #132	; 0x84
 800f8e0:	d005      	beq.n	800f8ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f8e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	3303      	adds	r3, #3
 800f8ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3714      	adds	r7, #20
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr

0800f8fc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f902:	f3ef 8305 	mrs	r3, IPSR
 800f906:	607b      	str	r3, [r7, #4]
  return(result);
 800f908:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	bf14      	ite	ne
 800f90e:	2301      	movne	r3, #1
 800f910:	2300      	moveq	r3, #0
 800f912:	b2db      	uxtb	r3, r3
}
 800f914:	4618      	mov	r0, r3
 800f916:	370c      	adds	r7, #12
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f924:	f001 fe62 	bl	80115ec <vTaskStartScheduler>
  
  return osOK;
 800f928:	2300      	movs	r3, #0
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	bd80      	pop	{r7, pc}

0800f92e <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800f92e:	b580      	push	{r7, lr}
 800f930:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800f932:	f002 fb19 	bl	8011f68 <xTaskGetSchedulerState>
 800f936:	4603      	mov	r3, r0
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d101      	bne.n	800f940 <osKernelRunning+0x12>
    return 0;
 800f93c:	2300      	movs	r3, #0
 800f93e:	e000      	b.n	800f942 <osKernelRunning+0x14>
  else
    return 1;
 800f940:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800f942:	4618      	mov	r0, r3
 800f944:	bd80      	pop	{r7, pc}

0800f946 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f946:	b580      	push	{r7, lr}
 800f948:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f94a:	f7ff ffd7 	bl	800f8fc <inHandlerMode>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	d003      	beq.n	800f95c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f954:	f001 ff64 	bl	8011820 <xTaskGetTickCountFromISR>
 800f958:	4603      	mov	r3, r0
 800f95a:	e002      	b.n	800f962 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f95c:	f001 ff50 	bl	8011800 <xTaskGetTickCount>
 800f960:	4603      	mov	r3, r0
  }
}
 800f962:	4618      	mov	r0, r3
 800f964:	bd80      	pop	{r7, pc}

0800f966 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f966:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f968:	b089      	sub	sp, #36	; 0x24
 800f96a:	af04      	add	r7, sp, #16
 800f96c:	6078      	str	r0, [r7, #4]
 800f96e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	695b      	ldr	r3, [r3, #20]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d020      	beq.n	800f9ba <osThreadCreate+0x54>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	699b      	ldr	r3, [r3, #24]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d01c      	beq.n	800f9ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	685c      	ldr	r4, [r3, #4]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681d      	ldr	r5, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	691e      	ldr	r6, [r3, #16]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f992:	4618      	mov	r0, r3
 800f994:	f7ff ff9a 	bl	800f8cc <makeFreeRtosPriority>
 800f998:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	695b      	ldr	r3, [r3, #20]
 800f99e:	687a      	ldr	r2, [r7, #4]
 800f9a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f9a2:	9202      	str	r2, [sp, #8]
 800f9a4:	9301      	str	r3, [sp, #4]
 800f9a6:	9100      	str	r1, [sp, #0]
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	4632      	mov	r2, r6
 800f9ac:	4629      	mov	r1, r5
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	f001 fc54 	bl	801125c <xTaskCreateStatic>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	60fb      	str	r3, [r7, #12]
 800f9b8:	e01c      	b.n	800f9f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	685c      	ldr	r4, [r3, #4]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f9c6:	b29e      	uxth	r6, r3
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7ff ff7c 	bl	800f8cc <makeFreeRtosPriority>
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	f107 030c 	add.w	r3, r7, #12
 800f9da:	9301      	str	r3, [sp, #4]
 800f9dc:	9200      	str	r2, [sp, #0]
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	4632      	mov	r2, r6
 800f9e2:	4629      	mov	r1, r5
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	f001 fc96 	bl	8011316 <xTaskCreate>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d001      	beq.n	800f9f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	e000      	b.n	800f9f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3714      	adds	r7, #20
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f9fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f9fe:	b580      	push	{r7, lr}
 800fa00:	b084      	sub	sp, #16
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d001      	beq.n	800fa14 <osDelay+0x16>
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	e000      	b.n	800fa16 <osDelay+0x18>
 800fa14:	2301      	movs	r3, #1
 800fa16:	4618      	mov	r0, r3
 800fa18:	f001 fdb4 	bl	8011584 <vTaskDelay>
  
  return osOK;
 800fa1c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}

0800fa26 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800fa26:	b580      	push	{r7, lr}
 800fa28:	b082      	sub	sp, #8
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	685b      	ldr	r3, [r3, #4]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d007      	beq.n	800fa46 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	685b      	ldr	r3, [r3, #4]
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	2001      	movs	r0, #1
 800fa3e:	f000 fdea 	bl	8010616 <xQueueCreateMutexStatic>
 800fa42:	4603      	mov	r3, r0
 800fa44:	e003      	b.n	800fa4e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800fa46:	2001      	movs	r0, #1
 800fa48:	f000 fdcd 	bl	80105e6 <xQueueCreateMutex>
 800fa4c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3708      	adds	r7, #8
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
	...

0800fa58 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b084      	sub	sp, #16
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fa62:	2300      	movs	r3, #0
 800fa64:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d101      	bne.n	800fa70 <osMutexWait+0x18>
    return osErrorParameter;
 800fa6c:	2380      	movs	r3, #128	; 0x80
 800fa6e:	e03a      	b.n	800fae6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800fa70:	2300      	movs	r3, #0
 800fa72:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa7a:	d103      	bne.n	800fa84 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800fa7c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa80:	60fb      	str	r3, [r7, #12]
 800fa82:	e009      	b.n	800fa98 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d006      	beq.n	800fa98 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d101      	bne.n	800fa98 <osMutexWait+0x40>
      ticks = 1;
 800fa94:	2301      	movs	r3, #1
 800fa96:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800fa98:	f7ff ff30 	bl	800f8fc <inHandlerMode>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d017      	beq.n	800fad2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800faa2:	f107 0308 	add.w	r3, r7, #8
 800faa6:	461a      	mov	r2, r3
 800faa8:	2100      	movs	r1, #0
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f001 f9e0 	bl	8010e70 <xQueueReceiveFromISR>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b01      	cmp	r3, #1
 800fab4:	d001      	beq.n	800faba <osMutexWait+0x62>
      return osErrorOS;
 800fab6:	23ff      	movs	r3, #255	; 0xff
 800fab8:	e015      	b.n	800fae6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d011      	beq.n	800fae4 <osMutexWait+0x8c>
 800fac0:	4b0b      	ldr	r3, [pc, #44]	; (800faf0 <osMutexWait+0x98>)
 800fac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fac6:	601a      	str	r2, [r3, #0]
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	f3bf 8f6f 	isb	sy
 800fad0:	e008      	b.n	800fae4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800fad2:	68f9      	ldr	r1, [r7, #12]
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f001 f8bf 	bl	8010c58 <xQueueSemaphoreTake>
 800fada:	4603      	mov	r3, r0
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d001      	beq.n	800fae4 <osMutexWait+0x8c>
    return osErrorOS;
 800fae0:	23ff      	movs	r3, #255	; 0xff
 800fae2:	e000      	b.n	800fae6 <osMutexWait+0x8e>
  }
  
  return osOK;
 800fae4:	2300      	movs	r3, #0
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3710      	adds	r7, #16
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
 800faee:	bf00      	nop
 800faf0:	e000ed04 	.word	0xe000ed04

0800faf4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fafc:	2300      	movs	r3, #0
 800fafe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fb00:	2300      	movs	r3, #0
 800fb02:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800fb04:	f7ff fefa 	bl	800f8fc <inHandlerMode>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d016      	beq.n	800fb3c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800fb0e:	f107 0308 	add.w	r3, r7, #8
 800fb12:	4619      	mov	r1, r3
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f000 ff32 	bl	801097e <xQueueGiveFromISR>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d001      	beq.n	800fb24 <osMutexRelease+0x30>
      return osErrorOS;
 800fb20:	23ff      	movs	r3, #255	; 0xff
 800fb22:	e017      	b.n	800fb54 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d013      	beq.n	800fb52 <osMutexRelease+0x5e>
 800fb2a:	4b0c      	ldr	r3, [pc, #48]	; (800fb5c <osMutexRelease+0x68>)
 800fb2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb30:	601a      	str	r2, [r3, #0]
 800fb32:	f3bf 8f4f 	dsb	sy
 800fb36:	f3bf 8f6f 	isb	sy
 800fb3a:	e00a      	b.n	800fb52 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	2200      	movs	r2, #0
 800fb40:	2100      	movs	r1, #0
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f000 fd82 	bl	801064c <xQueueGenericSend>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2b01      	cmp	r3, #1
 800fb4c:	d001      	beq.n	800fb52 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800fb4e:	23ff      	movs	r3, #255	; 0xff
 800fb50:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800fb52:	68fb      	ldr	r3, [r7, #12]
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3710      	adds	r7, #16
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	e000ed04 	.word	0xe000ed04

0800fb60 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b086      	sub	sp, #24
 800fb64:	af02      	add	r7, sp, #8
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d00f      	beq.n	800fb92 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	d10a      	bne.n	800fb8e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	2203      	movs	r2, #3
 800fb7e:	9200      	str	r2, [sp, #0]
 800fb80:	2200      	movs	r2, #0
 800fb82:	2100      	movs	r1, #0
 800fb84:	2001      	movs	r0, #1
 800fb86:	f000 fc43 	bl	8010410 <xQueueGenericCreateStatic>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	e016      	b.n	800fbbc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	e014      	b.n	800fbbc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	d110      	bne.n	800fbba <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800fb98:	2203      	movs	r2, #3
 800fb9a:	2100      	movs	r1, #0
 800fb9c:	2001      	movs	r0, #1
 800fb9e:	f000 fcaf 	bl	8010500 <xQueueGenericCreate>
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d005      	beq.n	800fbb6 <osSemaphoreCreate+0x56>
 800fbaa:	2300      	movs	r3, #0
 800fbac:	2200      	movs	r2, #0
 800fbae:	2100      	movs	r1, #0
 800fbb0:	68f8      	ldr	r0, [r7, #12]
 800fbb2:	f000 fd4b 	bl	801064c <xQueueGenericSend>
      return sema;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	e000      	b.n	800fbbc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800fbba:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3710      	adds	r7, #16
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fbce:	2300      	movs	r3, #0
 800fbd0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d101      	bne.n	800fbdc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800fbd8:	2380      	movs	r3, #128	; 0x80
 800fbda:	e03a      	b.n	800fc52 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbe6:	d103      	bne.n	800fbf0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800fbe8:	f04f 33ff 	mov.w	r3, #4294967295
 800fbec:	60fb      	str	r3, [r7, #12]
 800fbee:	e009      	b.n	800fc04 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d006      	beq.n	800fc04 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d101      	bne.n	800fc04 <osSemaphoreWait+0x40>
      ticks = 1;
 800fc00:	2301      	movs	r3, #1
 800fc02:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800fc04:	f7ff fe7a 	bl	800f8fc <inHandlerMode>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d017      	beq.n	800fc3e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fc0e:	f107 0308 	add.w	r3, r7, #8
 800fc12:	461a      	mov	r2, r3
 800fc14:	2100      	movs	r1, #0
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f001 f92a 	bl	8010e70 <xQueueReceiveFromISR>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d001      	beq.n	800fc26 <osSemaphoreWait+0x62>
      return osErrorOS;
 800fc22:	23ff      	movs	r3, #255	; 0xff
 800fc24:	e015      	b.n	800fc52 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d011      	beq.n	800fc50 <osSemaphoreWait+0x8c>
 800fc2c:	4b0b      	ldr	r3, [pc, #44]	; (800fc5c <osSemaphoreWait+0x98>)
 800fc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc32:	601a      	str	r2, [r3, #0]
 800fc34:	f3bf 8f4f 	dsb	sy
 800fc38:	f3bf 8f6f 	isb	sy
 800fc3c:	e008      	b.n	800fc50 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800fc3e:	68f9      	ldr	r1, [r7, #12]
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f001 f809 	bl	8010c58 <xQueueSemaphoreTake>
 800fc46:	4603      	mov	r3, r0
 800fc48:	2b01      	cmp	r3, #1
 800fc4a:	d001      	beq.n	800fc50 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800fc4c:	23ff      	movs	r3, #255	; 0xff
 800fc4e:	e000      	b.n	800fc52 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800fc50:	2300      	movs	r3, #0
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3710      	adds	r7, #16
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	e000ed04 	.word	0xe000ed04

0800fc60 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800fc70:	f7ff fe44 	bl	800f8fc <inHandlerMode>
 800fc74:	4603      	mov	r3, r0
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d016      	beq.n	800fca8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fc7a:	f107 0308 	add.w	r3, r7, #8
 800fc7e:	4619      	mov	r1, r3
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f000 fe7c 	bl	801097e <xQueueGiveFromISR>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b01      	cmp	r3, #1
 800fc8a:	d001      	beq.n	800fc90 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800fc8c:	23ff      	movs	r3, #255	; 0xff
 800fc8e:	e017      	b.n	800fcc0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d013      	beq.n	800fcbe <osSemaphoreRelease+0x5e>
 800fc96:	4b0c      	ldr	r3, [pc, #48]	; (800fcc8 <osSemaphoreRelease+0x68>)
 800fc98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc9c:	601a      	str	r2, [r3, #0]
 800fc9e:	f3bf 8f4f 	dsb	sy
 800fca2:	f3bf 8f6f 	isb	sy
 800fca6:	e00a      	b.n	800fcbe <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800fca8:	2300      	movs	r3, #0
 800fcaa:	2200      	movs	r2, #0
 800fcac:	2100      	movs	r1, #0
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f000 fccc 	bl	801064c <xQueueGenericSend>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d001      	beq.n	800fcbe <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800fcba:	23ff      	movs	r3, #255	; 0xff
 800fcbc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3710      	adds	r7, #16
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	e000ed04 	.word	0xe000ed04

0800fccc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800fcd4:	f7ff fe12 	bl	800f8fc <inHandlerMode>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d001      	beq.n	800fce2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800fcde:	2382      	movs	r3, #130	; 0x82
 800fce0:	e003      	b.n	800fcea <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f001 f944 	bl	8010f70 <vQueueDelete>

  return osOK; 
 800fce8:	2300      	movs	r3, #0
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	3708      	adds	r7, #8
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}

0800fcf2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fcf2:	b590      	push	{r4, r7, lr}
 800fcf4:	b085      	sub	sp, #20
 800fcf6:	af02      	add	r7, sp, #8
 800fcf8:	6078      	str	r0, [r7, #4]
 800fcfa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	689b      	ldr	r3, [r3, #8]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d011      	beq.n	800fd28 <osMessageCreate+0x36>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d00d      	beq.n	800fd28 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6818      	ldr	r0, [r3, #0]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6859      	ldr	r1, [r3, #4]
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	689a      	ldr	r2, [r3, #8]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	68db      	ldr	r3, [r3, #12]
 800fd1c:	2400      	movs	r4, #0
 800fd1e:	9400      	str	r4, [sp, #0]
 800fd20:	f000 fb76 	bl	8010410 <xQueueGenericCreateStatic>
 800fd24:	4603      	mov	r3, r0
 800fd26:	e008      	b.n	800fd3a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6818      	ldr	r0, [r3, #0]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	2200      	movs	r2, #0
 800fd32:	4619      	mov	r1, r3
 800fd34:	f000 fbe4 	bl	8010500 <xQueueGenericCreate>
 800fd38:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	370c      	adds	r7, #12
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd90      	pop	{r4, r7, pc}
	...

0800fd44 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b086      	sub	sp, #24
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	60f8      	str	r0, [r7, #12]
 800fd4c:	60b9      	str	r1, [r7, #8]
 800fd4e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fd50:	2300      	movs	r3, #0
 800fd52:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d101      	bne.n	800fd62 <osMessagePut+0x1e>
    ticks = 1;
 800fd5e:	2301      	movs	r3, #1
 800fd60:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fd62:	f7ff fdcb 	bl	800f8fc <inHandlerMode>
 800fd66:	4603      	mov	r3, r0
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d018      	beq.n	800fd9e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fd6c:	f107 0210 	add.w	r2, r7, #16
 800fd70:	f107 0108 	add.w	r1, r7, #8
 800fd74:	2300      	movs	r3, #0
 800fd76:	68f8      	ldr	r0, [r7, #12]
 800fd78:	f000 fd66 	bl	8010848 <xQueueGenericSendFromISR>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	2b01      	cmp	r3, #1
 800fd80:	d001      	beq.n	800fd86 <osMessagePut+0x42>
      return osErrorOS;
 800fd82:	23ff      	movs	r3, #255	; 0xff
 800fd84:	e018      	b.n	800fdb8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d014      	beq.n	800fdb6 <osMessagePut+0x72>
 800fd8c:	4b0c      	ldr	r3, [pc, #48]	; (800fdc0 <osMessagePut+0x7c>)
 800fd8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd92:	601a      	str	r2, [r3, #0]
 800fd94:	f3bf 8f4f 	dsb	sy
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	e00b      	b.n	800fdb6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fd9e:	f107 0108 	add.w	r1, r7, #8
 800fda2:	2300      	movs	r3, #0
 800fda4:	697a      	ldr	r2, [r7, #20]
 800fda6:	68f8      	ldr	r0, [r7, #12]
 800fda8:	f000 fc50 	bl	801064c <xQueueGenericSend>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d001      	beq.n	800fdb6 <osMessagePut+0x72>
      return osErrorOS;
 800fdb2:	23ff      	movs	r3, #255	; 0xff
 800fdb4:	e000      	b.n	800fdb8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fdb6:	2300      	movs	r3, #0
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3718      	adds	r7, #24
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	e000ed04 	.word	0xe000ed04

0800fdc4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fdc4:	b590      	push	{r4, r7, lr}
 800fdc6:	b08b      	sub	sp, #44	; 0x2c
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d10a      	bne.n	800fdf4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fdde:	2380      	movs	r3, #128	; 0x80
 800fde0:	617b      	str	r3, [r7, #20]
    return event;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	461c      	mov	r4, r3
 800fde6:	f107 0314 	add.w	r3, r7, #20
 800fdea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fdee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fdf2:	e054      	b.n	800fe9e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe02:	d103      	bne.n	800fe0c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fe04:	f04f 33ff 	mov.w	r3, #4294967295
 800fe08:	627b      	str	r3, [r7, #36]	; 0x24
 800fe0a:	e009      	b.n	800fe20 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d006      	beq.n	800fe20 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800fe16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d101      	bne.n	800fe20 <osMessageGet+0x5c>
      ticks = 1;
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fe20:	f7ff fd6c 	bl	800f8fc <inHandlerMode>
 800fe24:	4603      	mov	r3, r0
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d01c      	beq.n	800fe64 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fe2a:	f107 0220 	add.w	r2, r7, #32
 800fe2e:	f107 0314 	add.w	r3, r7, #20
 800fe32:	3304      	adds	r3, #4
 800fe34:	4619      	mov	r1, r3
 800fe36:	68b8      	ldr	r0, [r7, #8]
 800fe38:	f001 f81a 	bl	8010e70 <xQueueReceiveFromISR>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b01      	cmp	r3, #1
 800fe40:	d102      	bne.n	800fe48 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fe42:	2310      	movs	r3, #16
 800fe44:	617b      	str	r3, [r7, #20]
 800fe46:	e001      	b.n	800fe4c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fe4c:	6a3b      	ldr	r3, [r7, #32]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d01d      	beq.n	800fe8e <osMessageGet+0xca>
 800fe52:	4b15      	ldr	r3, [pc, #84]	; (800fea8 <osMessageGet+0xe4>)
 800fe54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe58:	601a      	str	r2, [r3, #0]
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	f3bf 8f6f 	isb	sy
 800fe62:	e014      	b.n	800fe8e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fe64:	f107 0314 	add.w	r3, r7, #20
 800fe68:	3304      	adds	r3, #4
 800fe6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	68b8      	ldr	r0, [r7, #8]
 800fe70:	f000 fe12 	bl	8010a98 <xQueueReceive>
 800fe74:	4603      	mov	r3, r0
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	d102      	bne.n	800fe80 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fe7a:	2310      	movs	r3, #16
 800fe7c:	617b      	str	r3, [r7, #20]
 800fe7e:	e006      	b.n	800fe8e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fe80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d101      	bne.n	800fe8a <osMessageGet+0xc6>
 800fe86:	2300      	movs	r3, #0
 800fe88:	e000      	b.n	800fe8c <osMessageGet+0xc8>
 800fe8a:	2340      	movs	r3, #64	; 0x40
 800fe8c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	461c      	mov	r4, r3
 800fe92:	f107 0314 	add.w	r3, r7, #20
 800fe96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fe9e:	68f8      	ldr	r0, [r7, #12]
 800fea0:	372c      	adds	r7, #44	; 0x2c
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd90      	pop	{r4, r7, pc}
 800fea6:	bf00      	nop
 800fea8:	e000ed04 	.word	0xe000ed04

0800feac <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800feb2:	201c      	movs	r0, #28
 800feb4:	f002 fce0 	bl	8012878 <pvPortMalloc>
 800feb8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00a      	beq.n	800fed6 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2200      	movs	r2, #0
 800fec4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	3304      	adds	r3, #4
 800feca:	4618      	mov	r0, r3
 800fecc:	f000 f983 	bl	80101d6 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2200      	movs	r2, #0
 800fed4:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800fed6:	687b      	ldr	r3, [r7, #4]
	}
 800fed8:	4618      	mov	r0, r3
 800feda:	3708      	adds	r7, #8
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}

0800fee0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b090      	sub	sp, #64	; 0x40
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	607a      	str	r2, [r7, #4]
 800feec:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800fef2:	2300      	movs	r3, #0
 800fef4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800fef6:	2300      	movs	r3, #0
 800fef8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d10a      	bne.n	800ff16 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ff00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff04:	f383 8811 	msr	BASEPRI, r3
 800ff08:	f3bf 8f6f 	isb	sy
 800ff0c:	f3bf 8f4f 	dsb	sy
 800ff10:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ff12:	bf00      	nop
 800ff14:	e7fe      	b.n	800ff14 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d00a      	beq.n	800ff36 <xEventGroupWaitBits+0x56>
	__asm volatile
 800ff20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff24:	f383 8811 	msr	BASEPRI, r3
 800ff28:	f3bf 8f6f 	isb	sy
 800ff2c:	f3bf 8f4f 	dsb	sy
 800ff30:	61fb      	str	r3, [r7, #28]
}
 800ff32:	bf00      	nop
 800ff34:	e7fe      	b.n	800ff34 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d10a      	bne.n	800ff52 <xEventGroupWaitBits+0x72>
	__asm volatile
 800ff3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff40:	f383 8811 	msr	BASEPRI, r3
 800ff44:	f3bf 8f6f 	isb	sy
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	61bb      	str	r3, [r7, #24]
}
 800ff4e:	bf00      	nop
 800ff50:	e7fe      	b.n	800ff50 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff52:	f002 f809 	bl	8011f68 <xTaskGetSchedulerState>
 800ff56:	4603      	mov	r3, r0
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d102      	bne.n	800ff62 <xEventGroupWaitBits+0x82>
 800ff5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d101      	bne.n	800ff66 <xEventGroupWaitBits+0x86>
 800ff62:	2301      	movs	r3, #1
 800ff64:	e000      	b.n	800ff68 <xEventGroupWaitBits+0x88>
 800ff66:	2300      	movs	r3, #0
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d10a      	bne.n	800ff82 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800ff6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff70:	f383 8811 	msr	BASEPRI, r3
 800ff74:	f3bf 8f6f 	isb	sy
 800ff78:	f3bf 8f4f 	dsb	sy
 800ff7c:	617b      	str	r3, [r7, #20]
}
 800ff7e:	bf00      	nop
 800ff80:	e7fe      	b.n	800ff80 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800ff82:	f001 fb93 	bl	80116ac <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800ff86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800ff8c:	683a      	ldr	r2, [r7, #0]
 800ff8e:	68b9      	ldr	r1, [r7, #8]
 800ff90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff92:	f000 f8fe 	bl	8010192 <prvTestWaitCondition>
 800ff96:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800ff98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d00e      	beq.n	800ffbc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800ff9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d028      	beq.n	800fffe <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ffac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffae:	681a      	ldr	r2, [r3, #0]
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	43db      	mvns	r3, r3
 800ffb4:	401a      	ands	r2, r3
 800ffb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffb8:	601a      	str	r2, [r3, #0]
 800ffba:	e020      	b.n	800fffe <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800ffbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d104      	bne.n	800ffcc <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800ffc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	633b      	str	r3, [r7, #48]	; 0x30
 800ffca:	e018      	b.n	800fffe <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d003      	beq.n	800ffda <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800ffd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ffd8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d003      	beq.n	800ffe8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800ffe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ffe6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800ffe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffea:	1d18      	adds	r0, r3, #4
 800ffec:	68ba      	ldr	r2, [r7, #8]
 800ffee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff0:	4313      	orrs	r3, r2
 800fff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fff4:	4619      	mov	r1, r3
 800fff6:	f001 fd5d 	bl	8011ab4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800fffe:	f001 fb63 	bl	80116c8 <xTaskResumeAll>
 8010002:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8010004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010006:	2b00      	cmp	r3, #0
 8010008:	d031      	beq.n	801006e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801000a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000c:	2b00      	cmp	r3, #0
 801000e:	d107      	bne.n	8010020 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8010010:	4b19      	ldr	r3, [pc, #100]	; (8010078 <xEventGroupWaitBits+0x198>)
 8010012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010016:	601a      	str	r2, [r3, #0]
 8010018:	f3bf 8f4f 	dsb	sy
 801001c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8010020:	f002 f94a 	bl	80122b8 <uxTaskResetEventItemValue>
 8010024:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8010026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801002c:	2b00      	cmp	r3, #0
 801002e:	d11a      	bne.n	8010066 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8010030:	f002 fb00 	bl	8012634 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8010034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801003a:	683a      	ldr	r2, [r7, #0]
 801003c:	68b9      	ldr	r1, [r7, #8]
 801003e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010040:	f000 f8a7 	bl	8010192 <prvTestWaitCondition>
 8010044:	4603      	mov	r3, r0
 8010046:	2b00      	cmp	r3, #0
 8010048:	d009      	beq.n	801005e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d006      	beq.n	801005e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8010050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	43db      	mvns	r3, r3
 8010058:	401a      	ands	r2, r3
 801005a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801005c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801005e:	2301      	movs	r3, #1
 8010060:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8010062:	f002 fb17 	bl	8012694 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8010066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010068:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801006c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801006e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010070:	4618      	mov	r0, r3
 8010072:	3740      	adds	r7, #64	; 0x40
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	e000ed04 	.word	0xe000ed04

0801007c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b08e      	sub	sp, #56	; 0x38
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8010086:	2300      	movs	r3, #0
 8010088:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801008e:	2300      	movs	r3, #0
 8010090:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d10a      	bne.n	80100ae <xEventGroupSetBits+0x32>
	__asm volatile
 8010098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801009c:	f383 8811 	msr	BASEPRI, r3
 80100a0:	f3bf 8f6f 	isb	sy
 80100a4:	f3bf 8f4f 	dsb	sy
 80100a8:	613b      	str	r3, [r7, #16]
}
 80100aa:	bf00      	nop
 80100ac:	e7fe      	b.n	80100ac <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d00a      	beq.n	80100ce <xEventGroupSetBits+0x52>
	__asm volatile
 80100b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100bc:	f383 8811 	msr	BASEPRI, r3
 80100c0:	f3bf 8f6f 	isb	sy
 80100c4:	f3bf 8f4f 	dsb	sy
 80100c8:	60fb      	str	r3, [r7, #12]
}
 80100ca:	bf00      	nop
 80100cc:	e7fe      	b.n	80100cc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80100ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d0:	3304      	adds	r3, #4
 80100d2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d6:	3308      	adds	r3, #8
 80100d8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80100da:	f001 fae7 	bl	80116ac <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80100de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80100e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e6:	681a      	ldr	r2, [r3, #0]
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	431a      	orrs	r2, r3
 80100ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ee:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80100f0:	e03c      	b.n	801016c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80100f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f4:	685b      	ldr	r3, [r3, #4]
 80100f6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80100f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80100fe:	2300      	movs	r3, #0
 8010100:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8010102:	69bb      	ldr	r3, [r7, #24]
 8010104:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010108:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801010a:	69bb      	ldr	r3, [r7, #24]
 801010c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010110:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010118:	2b00      	cmp	r3, #0
 801011a:	d108      	bne.n	801012e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801011c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801011e:	681a      	ldr	r2, [r3, #0]
 8010120:	69bb      	ldr	r3, [r7, #24]
 8010122:	4013      	ands	r3, r2
 8010124:	2b00      	cmp	r3, #0
 8010126:	d00b      	beq.n	8010140 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8010128:	2301      	movs	r3, #1
 801012a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801012c:	e008      	b.n	8010140 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801012e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	69bb      	ldr	r3, [r7, #24]
 8010134:	4013      	ands	r3, r2
 8010136:	69ba      	ldr	r2, [r7, #24]
 8010138:	429a      	cmp	r2, r3
 801013a:	d101      	bne.n	8010140 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801013c:	2301      	movs	r3, #1
 801013e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8010140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010142:	2b00      	cmp	r3, #0
 8010144:	d010      	beq.n	8010168 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801014c:	2b00      	cmp	r3, #0
 801014e:	d003      	beq.n	8010158 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8010150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010152:	69bb      	ldr	r3, [r7, #24]
 8010154:	4313      	orrs	r3, r2
 8010156:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8010158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010160:	4619      	mov	r1, r3
 8010162:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010164:	f001 fd44 	bl	8011bf0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8010168:	69fb      	ldr	r3, [r7, #28]
 801016a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 801016c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801016e:	6a3b      	ldr	r3, [r7, #32]
 8010170:	429a      	cmp	r2, r3
 8010172:	d1be      	bne.n	80100f2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8010174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801017a:	43db      	mvns	r3, r3
 801017c:	401a      	ands	r2, r3
 801017e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010180:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8010182:	f001 faa1 	bl	80116c8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8010186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010188:	681b      	ldr	r3, [r3, #0]
}
 801018a:	4618      	mov	r0, r3
 801018c:	3738      	adds	r7, #56	; 0x38
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8010192:	b480      	push	{r7}
 8010194:	b087      	sub	sp, #28
 8010196:	af00      	add	r7, sp, #0
 8010198:	60f8      	str	r0, [r7, #12]
 801019a:	60b9      	str	r1, [r7, #8]
 801019c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801019e:	2300      	movs	r3, #0
 80101a0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d107      	bne.n	80101b8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80101a8:	68fa      	ldr	r2, [r7, #12]
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	4013      	ands	r3, r2
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d00a      	beq.n	80101c8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80101b2:	2301      	movs	r3, #1
 80101b4:	617b      	str	r3, [r7, #20]
 80101b6:	e007      	b.n	80101c8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80101b8:	68fa      	ldr	r2, [r7, #12]
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	4013      	ands	r3, r2
 80101be:	68ba      	ldr	r2, [r7, #8]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d101      	bne.n	80101c8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80101c4:	2301      	movs	r3, #1
 80101c6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80101c8:	697b      	ldr	r3, [r7, #20]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	371c      	adds	r7, #28
 80101ce:	46bd      	mov	sp, r7
 80101d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d4:	4770      	bx	lr

080101d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80101d6:	b480      	push	{r7}
 80101d8:	b083      	sub	sp, #12
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f103 0208 	add.w	r2, r3, #8
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f04f 32ff 	mov.w	r2, #4294967295
 80101ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f103 0208 	add.w	r2, r3, #8
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f103 0208 	add.w	r2, r3, #8
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2200      	movs	r2, #0
 8010208:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801020a:	bf00      	nop
 801020c:	370c      	adds	r7, #12
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr

08010216 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010216:	b480      	push	{r7}
 8010218:	b083      	sub	sp, #12
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2200      	movs	r2, #0
 8010222:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010224:	bf00      	nop
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010230:	b480      	push	{r7}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	68fa      	ldr	r2, [r7, #12]
 8010244:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	689a      	ldr	r2, [r3, #8]
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	689b      	ldr	r3, [r3, #8]
 8010252:	683a      	ldr	r2, [r7, #0]
 8010254:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	683a      	ldr	r2, [r7, #0]
 801025a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	1c5a      	adds	r2, r3, #1
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	601a      	str	r2, [r3, #0]
}
 801026c:	bf00      	nop
 801026e:	3714      	adds	r7, #20
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr

08010278 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010278:	b480      	push	{r7}
 801027a:	b085      	sub	sp, #20
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801028e:	d103      	bne.n	8010298 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	691b      	ldr	r3, [r3, #16]
 8010294:	60fb      	str	r3, [r7, #12]
 8010296:	e00c      	b.n	80102b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	3308      	adds	r3, #8
 801029c:	60fb      	str	r3, [r7, #12]
 801029e:	e002      	b.n	80102a6 <vListInsert+0x2e>
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	685b      	ldr	r3, [r3, #4]
 80102a4:	60fb      	str	r3, [r7, #12]
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	68ba      	ldr	r2, [r7, #8]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d2f6      	bcs.n	80102a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	685a      	ldr	r2, [r3, #4]
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	683a      	ldr	r2, [r7, #0]
 80102c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	68fa      	ldr	r2, [r7, #12]
 80102c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	683a      	ldr	r2, [r7, #0]
 80102cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	1c5a      	adds	r2, r3, #1
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	601a      	str	r2, [r3, #0]
}
 80102de:	bf00      	nop
 80102e0:	3714      	adds	r7, #20
 80102e2:	46bd      	mov	sp, r7
 80102e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e8:	4770      	bx	lr

080102ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80102ea:	b480      	push	{r7}
 80102ec:	b085      	sub	sp, #20
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	691b      	ldr	r3, [r3, #16]
 80102f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	687a      	ldr	r2, [r7, #4]
 80102fe:	6892      	ldr	r2, [r2, #8]
 8010300:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	689b      	ldr	r3, [r3, #8]
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	6852      	ldr	r2, [r2, #4]
 801030a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	687a      	ldr	r2, [r7, #4]
 8010312:	429a      	cmp	r2, r3
 8010314:	d103      	bne.n	801031e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	689a      	ldr	r2, [r3, #8]
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2200      	movs	r2, #0
 8010322:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	1e5a      	subs	r2, r3, #1
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
}
 8010332:	4618      	mov	r0, r3
 8010334:	3714      	adds	r7, #20
 8010336:	46bd      	mov	sp, r7
 8010338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033c:	4770      	bx	lr
	...

08010340 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b084      	sub	sp, #16
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d10a      	bne.n	801036a <xQueueGenericReset+0x2a>
	__asm volatile
 8010354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010358:	f383 8811 	msr	BASEPRI, r3
 801035c:	f3bf 8f6f 	isb	sy
 8010360:	f3bf 8f4f 	dsb	sy
 8010364:	60bb      	str	r3, [r7, #8]
}
 8010366:	bf00      	nop
 8010368:	e7fe      	b.n	8010368 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801036a:	f002 f963 	bl	8012634 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	681a      	ldr	r2, [r3, #0]
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010376:	68f9      	ldr	r1, [r7, #12]
 8010378:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801037a:	fb01 f303 	mul.w	r3, r1, r3
 801037e:	441a      	add	r2, r3
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	2200      	movs	r2, #0
 8010388:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801039a:	3b01      	subs	r3, #1
 801039c:	68f9      	ldr	r1, [r7, #12]
 801039e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80103a0:	fb01 f303 	mul.w	r3, r1, r3
 80103a4:	441a      	add	r2, r3
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	22ff      	movs	r2, #255	; 0xff
 80103ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	22ff      	movs	r2, #255	; 0xff
 80103b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d114      	bne.n	80103ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	691b      	ldr	r3, [r3, #16]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d01a      	beq.n	80103fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	3310      	adds	r3, #16
 80103cc:	4618      	mov	r0, r3
 80103ce:	f001 fbad 	bl	8011b2c <xTaskRemoveFromEventList>
 80103d2:	4603      	mov	r3, r0
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d012      	beq.n	80103fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80103d8:	4b0c      	ldr	r3, [pc, #48]	; (801040c <xQueueGenericReset+0xcc>)
 80103da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103de:	601a      	str	r2, [r3, #0]
 80103e0:	f3bf 8f4f 	dsb	sy
 80103e4:	f3bf 8f6f 	isb	sy
 80103e8:	e009      	b.n	80103fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	3310      	adds	r3, #16
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7ff fef1 	bl	80101d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	3324      	adds	r3, #36	; 0x24
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7ff feec 	bl	80101d6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80103fe:	f002 f949 	bl	8012694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010402:	2301      	movs	r3, #1
}
 8010404:	4618      	mov	r0, r3
 8010406:	3710      	adds	r7, #16
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	e000ed04 	.word	0xe000ed04

08010410 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010410:	b580      	push	{r7, lr}
 8010412:	b08e      	sub	sp, #56	; 0x38
 8010414:	af02      	add	r7, sp, #8
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	607a      	str	r2, [r7, #4]
 801041c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d10a      	bne.n	801043a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010428:	f383 8811 	msr	BASEPRI, r3
 801042c:	f3bf 8f6f 	isb	sy
 8010430:	f3bf 8f4f 	dsb	sy
 8010434:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010436:	bf00      	nop
 8010438:	e7fe      	b.n	8010438 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d10a      	bne.n	8010456 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010444:	f383 8811 	msr	BASEPRI, r3
 8010448:	f3bf 8f6f 	isb	sy
 801044c:	f3bf 8f4f 	dsb	sy
 8010450:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010452:	bf00      	nop
 8010454:	e7fe      	b.n	8010454 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d002      	beq.n	8010462 <xQueueGenericCreateStatic+0x52>
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d001      	beq.n	8010466 <xQueueGenericCreateStatic+0x56>
 8010462:	2301      	movs	r3, #1
 8010464:	e000      	b.n	8010468 <xQueueGenericCreateStatic+0x58>
 8010466:	2300      	movs	r3, #0
 8010468:	2b00      	cmp	r3, #0
 801046a:	d10a      	bne.n	8010482 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801046c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010470:	f383 8811 	msr	BASEPRI, r3
 8010474:	f3bf 8f6f 	isb	sy
 8010478:	f3bf 8f4f 	dsb	sy
 801047c:	623b      	str	r3, [r7, #32]
}
 801047e:	bf00      	nop
 8010480:	e7fe      	b.n	8010480 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d102      	bne.n	801048e <xQueueGenericCreateStatic+0x7e>
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d101      	bne.n	8010492 <xQueueGenericCreateStatic+0x82>
 801048e:	2301      	movs	r3, #1
 8010490:	e000      	b.n	8010494 <xQueueGenericCreateStatic+0x84>
 8010492:	2300      	movs	r3, #0
 8010494:	2b00      	cmp	r3, #0
 8010496:	d10a      	bne.n	80104ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801049c:	f383 8811 	msr	BASEPRI, r3
 80104a0:	f3bf 8f6f 	isb	sy
 80104a4:	f3bf 8f4f 	dsb	sy
 80104a8:	61fb      	str	r3, [r7, #28]
}
 80104aa:	bf00      	nop
 80104ac:	e7fe      	b.n	80104ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80104ae:	2348      	movs	r3, #72	; 0x48
 80104b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	2b48      	cmp	r3, #72	; 0x48
 80104b6:	d00a      	beq.n	80104ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80104b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104bc:	f383 8811 	msr	BASEPRI, r3
 80104c0:	f3bf 8f6f 	isb	sy
 80104c4:	f3bf 8f4f 	dsb	sy
 80104c8:	61bb      	str	r3, [r7, #24]
}
 80104ca:	bf00      	nop
 80104cc:	e7fe      	b.n	80104cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80104ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80104d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d00d      	beq.n	80104f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80104da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104dc:	2201      	movs	r2, #1
 80104de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80104e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80104e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e8:	9300      	str	r3, [sp, #0]
 80104ea:	4613      	mov	r3, r2
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	68b9      	ldr	r1, [r7, #8]
 80104f0:	68f8      	ldr	r0, [r7, #12]
 80104f2:	f000 f83f 	bl	8010574 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80104f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3730      	adds	r7, #48	; 0x30
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}

08010500 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010500:	b580      	push	{r7, lr}
 8010502:	b08a      	sub	sp, #40	; 0x28
 8010504:	af02      	add	r7, sp, #8
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	4613      	mov	r3, r2
 801050c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d10a      	bne.n	801052a <xQueueGenericCreate+0x2a>
	__asm volatile
 8010514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010518:	f383 8811 	msr	BASEPRI, r3
 801051c:	f3bf 8f6f 	isb	sy
 8010520:	f3bf 8f4f 	dsb	sy
 8010524:	613b      	str	r3, [r7, #16]
}
 8010526:	bf00      	nop
 8010528:	e7fe      	b.n	8010528 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	68ba      	ldr	r2, [r7, #8]
 801052e:	fb02 f303 	mul.w	r3, r2, r3
 8010532:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	3348      	adds	r3, #72	; 0x48
 8010538:	4618      	mov	r0, r3
 801053a:	f002 f99d 	bl	8012878 <pvPortMalloc>
 801053e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d011      	beq.n	801056a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	3348      	adds	r3, #72	; 0x48
 801054e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	2200      	movs	r2, #0
 8010554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010558:	79fa      	ldrb	r2, [r7, #7]
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	9300      	str	r3, [sp, #0]
 801055e:	4613      	mov	r3, r2
 8010560:	697a      	ldr	r2, [r7, #20]
 8010562:	68b9      	ldr	r1, [r7, #8]
 8010564:	68f8      	ldr	r0, [r7, #12]
 8010566:	f000 f805 	bl	8010574 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801056a:	69bb      	ldr	r3, [r7, #24]
	}
 801056c:	4618      	mov	r0, r3
 801056e:	3720      	adds	r7, #32
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b084      	sub	sp, #16
 8010578:	af00      	add	r7, sp, #0
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	607a      	str	r2, [r7, #4]
 8010580:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d103      	bne.n	8010590 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010588:	69bb      	ldr	r3, [r7, #24]
 801058a:	69ba      	ldr	r2, [r7, #24]
 801058c:	601a      	str	r2, [r3, #0]
 801058e:	e002      	b.n	8010596 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010590:	69bb      	ldr	r3, [r7, #24]
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	68fa      	ldr	r2, [r7, #12]
 801059a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801059c:	69bb      	ldr	r3, [r7, #24]
 801059e:	68ba      	ldr	r2, [r7, #8]
 80105a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80105a2:	2101      	movs	r1, #1
 80105a4:	69b8      	ldr	r0, [r7, #24]
 80105a6:	f7ff fecb 	bl	8010340 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80105aa:	bf00      	nop
 80105ac:	3710      	adds	r7, #16
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}

080105b2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80105b2:	b580      	push	{r7, lr}
 80105b4:	b082      	sub	sp, #8
 80105b6:	af00      	add	r7, sp, #0
 80105b8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d00e      	beq.n	80105de <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2200      	movs	r2, #0
 80105c4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2200      	movs	r2, #0
 80105ca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2200      	movs	r2, #0
 80105d0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80105d2:	2300      	movs	r3, #0
 80105d4:	2200      	movs	r2, #0
 80105d6:	2100      	movs	r1, #0
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f000 f837 	bl	801064c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80105de:	bf00      	nop
 80105e0:	3708      	adds	r7, #8
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}

080105e6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80105e6:	b580      	push	{r7, lr}
 80105e8:	b086      	sub	sp, #24
 80105ea:	af00      	add	r7, sp, #0
 80105ec:	4603      	mov	r3, r0
 80105ee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80105f0:	2301      	movs	r3, #1
 80105f2:	617b      	str	r3, [r7, #20]
 80105f4:	2300      	movs	r3, #0
 80105f6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80105f8:	79fb      	ldrb	r3, [r7, #7]
 80105fa:	461a      	mov	r2, r3
 80105fc:	6939      	ldr	r1, [r7, #16]
 80105fe:	6978      	ldr	r0, [r7, #20]
 8010600:	f7ff ff7e 	bl	8010500 <xQueueGenericCreate>
 8010604:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010606:	68f8      	ldr	r0, [r7, #12]
 8010608:	f7ff ffd3 	bl	80105b2 <prvInitialiseMutex>

		return xNewQueue;
 801060c:	68fb      	ldr	r3, [r7, #12]
	}
 801060e:	4618      	mov	r0, r3
 8010610:	3718      	adds	r7, #24
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}

08010616 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010616:	b580      	push	{r7, lr}
 8010618:	b088      	sub	sp, #32
 801061a:	af02      	add	r7, sp, #8
 801061c:	4603      	mov	r3, r0
 801061e:	6039      	str	r1, [r7, #0]
 8010620:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010622:	2301      	movs	r3, #1
 8010624:	617b      	str	r3, [r7, #20]
 8010626:	2300      	movs	r3, #0
 8010628:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801062a:	79fb      	ldrb	r3, [r7, #7]
 801062c:	9300      	str	r3, [sp, #0]
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	2200      	movs	r2, #0
 8010632:	6939      	ldr	r1, [r7, #16]
 8010634:	6978      	ldr	r0, [r7, #20]
 8010636:	f7ff feeb 	bl	8010410 <xQueueGenericCreateStatic>
 801063a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801063c:	68f8      	ldr	r0, [r7, #12]
 801063e:	f7ff ffb8 	bl	80105b2 <prvInitialiseMutex>

		return xNewQueue;
 8010642:	68fb      	ldr	r3, [r7, #12]
	}
 8010644:	4618      	mov	r0, r3
 8010646:	3718      	adds	r7, #24
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b08e      	sub	sp, #56	; 0x38
 8010650:	af00      	add	r7, sp, #0
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	607a      	str	r2, [r7, #4]
 8010658:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801065a:	2300      	movs	r3, #0
 801065c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010664:	2b00      	cmp	r3, #0
 8010666:	d10a      	bne.n	801067e <xQueueGenericSend+0x32>
	__asm volatile
 8010668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066c:	f383 8811 	msr	BASEPRI, r3
 8010670:	f3bf 8f6f 	isb	sy
 8010674:	f3bf 8f4f 	dsb	sy
 8010678:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801067a:	bf00      	nop
 801067c:	e7fe      	b.n	801067c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d103      	bne.n	801068c <xQueueGenericSend+0x40>
 8010684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010688:	2b00      	cmp	r3, #0
 801068a:	d101      	bne.n	8010690 <xQueueGenericSend+0x44>
 801068c:	2301      	movs	r3, #1
 801068e:	e000      	b.n	8010692 <xQueueGenericSend+0x46>
 8010690:	2300      	movs	r3, #0
 8010692:	2b00      	cmp	r3, #0
 8010694:	d10a      	bne.n	80106ac <xQueueGenericSend+0x60>
	__asm volatile
 8010696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801069a:	f383 8811 	msr	BASEPRI, r3
 801069e:	f3bf 8f6f 	isb	sy
 80106a2:	f3bf 8f4f 	dsb	sy
 80106a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80106a8:	bf00      	nop
 80106aa:	e7fe      	b.n	80106aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	2b02      	cmp	r3, #2
 80106b0:	d103      	bne.n	80106ba <xQueueGenericSend+0x6e>
 80106b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106b6:	2b01      	cmp	r3, #1
 80106b8:	d101      	bne.n	80106be <xQueueGenericSend+0x72>
 80106ba:	2301      	movs	r3, #1
 80106bc:	e000      	b.n	80106c0 <xQueueGenericSend+0x74>
 80106be:	2300      	movs	r3, #0
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d10a      	bne.n	80106da <xQueueGenericSend+0x8e>
	__asm volatile
 80106c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c8:	f383 8811 	msr	BASEPRI, r3
 80106cc:	f3bf 8f6f 	isb	sy
 80106d0:	f3bf 8f4f 	dsb	sy
 80106d4:	623b      	str	r3, [r7, #32]
}
 80106d6:	bf00      	nop
 80106d8:	e7fe      	b.n	80106d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80106da:	f001 fc45 	bl	8011f68 <xTaskGetSchedulerState>
 80106de:	4603      	mov	r3, r0
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d102      	bne.n	80106ea <xQueueGenericSend+0x9e>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d101      	bne.n	80106ee <xQueueGenericSend+0xa2>
 80106ea:	2301      	movs	r3, #1
 80106ec:	e000      	b.n	80106f0 <xQueueGenericSend+0xa4>
 80106ee:	2300      	movs	r3, #0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d10a      	bne.n	801070a <xQueueGenericSend+0xbe>
	__asm volatile
 80106f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f8:	f383 8811 	msr	BASEPRI, r3
 80106fc:	f3bf 8f6f 	isb	sy
 8010700:	f3bf 8f4f 	dsb	sy
 8010704:	61fb      	str	r3, [r7, #28]
}
 8010706:	bf00      	nop
 8010708:	e7fe      	b.n	8010708 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801070a:	f001 ff93 	bl	8012634 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801070e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010716:	429a      	cmp	r2, r3
 8010718:	d302      	bcc.n	8010720 <xQueueGenericSend+0xd4>
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	2b02      	cmp	r3, #2
 801071e:	d129      	bne.n	8010774 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010720:	683a      	ldr	r2, [r7, #0]
 8010722:	68b9      	ldr	r1, [r7, #8]
 8010724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010726:	f000 fc5e 	bl	8010fe6 <prvCopyDataToQueue>
 801072a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801072c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010730:	2b00      	cmp	r3, #0
 8010732:	d010      	beq.n	8010756 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010736:	3324      	adds	r3, #36	; 0x24
 8010738:	4618      	mov	r0, r3
 801073a:	f001 f9f7 	bl	8011b2c <xTaskRemoveFromEventList>
 801073e:	4603      	mov	r3, r0
 8010740:	2b00      	cmp	r3, #0
 8010742:	d013      	beq.n	801076c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010744:	4b3f      	ldr	r3, [pc, #252]	; (8010844 <xQueueGenericSend+0x1f8>)
 8010746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801074a:	601a      	str	r2, [r3, #0]
 801074c:	f3bf 8f4f 	dsb	sy
 8010750:	f3bf 8f6f 	isb	sy
 8010754:	e00a      	b.n	801076c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010758:	2b00      	cmp	r3, #0
 801075a:	d007      	beq.n	801076c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801075c:	4b39      	ldr	r3, [pc, #228]	; (8010844 <xQueueGenericSend+0x1f8>)
 801075e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010762:	601a      	str	r2, [r3, #0]
 8010764:	f3bf 8f4f 	dsb	sy
 8010768:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801076c:	f001 ff92 	bl	8012694 <vPortExitCritical>
				return pdPASS;
 8010770:	2301      	movs	r3, #1
 8010772:	e063      	b.n	801083c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d103      	bne.n	8010782 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801077a:	f001 ff8b 	bl	8012694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801077e:	2300      	movs	r3, #0
 8010780:	e05c      	b.n	801083c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010784:	2b00      	cmp	r3, #0
 8010786:	d106      	bne.n	8010796 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010788:	f107 0314 	add.w	r3, r7, #20
 801078c:	4618      	mov	r0, r3
 801078e:	f001 fa91 	bl	8011cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010792:	2301      	movs	r3, #1
 8010794:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010796:	f001 ff7d 	bl	8012694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801079a:	f000 ff87 	bl	80116ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801079e:	f001 ff49 	bl	8012634 <vPortEnterCritical>
 80107a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80107a8:	b25b      	sxtb	r3, r3
 80107aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ae:	d103      	bne.n	80107b8 <xQueueGenericSend+0x16c>
 80107b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b2:	2200      	movs	r2, #0
 80107b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80107b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80107be:	b25b      	sxtb	r3, r3
 80107c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c4:	d103      	bne.n	80107ce <xQueueGenericSend+0x182>
 80107c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c8:	2200      	movs	r2, #0
 80107ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80107ce:	f001 ff61 	bl	8012694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80107d2:	1d3a      	adds	r2, r7, #4
 80107d4:	f107 0314 	add.w	r3, r7, #20
 80107d8:	4611      	mov	r1, r2
 80107da:	4618      	mov	r0, r3
 80107dc:	f001 fa80 	bl	8011ce0 <xTaskCheckForTimeOut>
 80107e0:	4603      	mov	r3, r0
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d124      	bne.n	8010830 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80107e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107e8:	f000 fcf5 	bl	80111d6 <prvIsQueueFull>
 80107ec:	4603      	mov	r3, r0
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d018      	beq.n	8010824 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80107f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f4:	3310      	adds	r3, #16
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	4611      	mov	r1, r2
 80107fa:	4618      	mov	r0, r3
 80107fc:	f001 f936 	bl	8011a6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010802:	f000 fc80 	bl	8011106 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010806:	f000 ff5f 	bl	80116c8 <xTaskResumeAll>
 801080a:	4603      	mov	r3, r0
 801080c:	2b00      	cmp	r3, #0
 801080e:	f47f af7c 	bne.w	801070a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010812:	4b0c      	ldr	r3, [pc, #48]	; (8010844 <xQueueGenericSend+0x1f8>)
 8010814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010818:	601a      	str	r2, [r3, #0]
 801081a:	f3bf 8f4f 	dsb	sy
 801081e:	f3bf 8f6f 	isb	sy
 8010822:	e772      	b.n	801070a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010826:	f000 fc6e 	bl	8011106 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801082a:	f000 ff4d 	bl	80116c8 <xTaskResumeAll>
 801082e:	e76c      	b.n	801070a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010832:	f000 fc68 	bl	8011106 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010836:	f000 ff47 	bl	80116c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801083a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801083c:	4618      	mov	r0, r3
 801083e:	3738      	adds	r7, #56	; 0x38
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}
 8010844:	e000ed04 	.word	0xe000ed04

08010848 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b090      	sub	sp, #64	; 0x40
 801084c:	af00      	add	r7, sp, #0
 801084e:	60f8      	str	r0, [r7, #12]
 8010850:	60b9      	str	r1, [r7, #8]
 8010852:	607a      	str	r2, [r7, #4]
 8010854:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801085a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085c:	2b00      	cmp	r3, #0
 801085e:	d10a      	bne.n	8010876 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010864:	f383 8811 	msr	BASEPRI, r3
 8010868:	f3bf 8f6f 	isb	sy
 801086c:	f3bf 8f4f 	dsb	sy
 8010870:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010872:	bf00      	nop
 8010874:	e7fe      	b.n	8010874 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d103      	bne.n	8010884 <xQueueGenericSendFromISR+0x3c>
 801087c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010880:	2b00      	cmp	r3, #0
 8010882:	d101      	bne.n	8010888 <xQueueGenericSendFromISR+0x40>
 8010884:	2301      	movs	r3, #1
 8010886:	e000      	b.n	801088a <xQueueGenericSendFromISR+0x42>
 8010888:	2300      	movs	r3, #0
 801088a:	2b00      	cmp	r3, #0
 801088c:	d10a      	bne.n	80108a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801088e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010892:	f383 8811 	msr	BASEPRI, r3
 8010896:	f3bf 8f6f 	isb	sy
 801089a:	f3bf 8f4f 	dsb	sy
 801089e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80108a0:	bf00      	nop
 80108a2:	e7fe      	b.n	80108a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	2b02      	cmp	r3, #2
 80108a8:	d103      	bne.n	80108b2 <xQueueGenericSendFromISR+0x6a>
 80108aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108ae:	2b01      	cmp	r3, #1
 80108b0:	d101      	bne.n	80108b6 <xQueueGenericSendFromISR+0x6e>
 80108b2:	2301      	movs	r3, #1
 80108b4:	e000      	b.n	80108b8 <xQueueGenericSendFromISR+0x70>
 80108b6:	2300      	movs	r3, #0
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d10a      	bne.n	80108d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80108bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c0:	f383 8811 	msr	BASEPRI, r3
 80108c4:	f3bf 8f6f 	isb	sy
 80108c8:	f3bf 8f4f 	dsb	sy
 80108cc:	623b      	str	r3, [r7, #32]
}
 80108ce:	bf00      	nop
 80108d0:	e7fe      	b.n	80108d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80108d2:	f001 ff91 	bl	80127f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80108d6:	f3ef 8211 	mrs	r2, BASEPRI
 80108da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108de:	f383 8811 	msr	BASEPRI, r3
 80108e2:	f3bf 8f6f 	isb	sy
 80108e6:	f3bf 8f4f 	dsb	sy
 80108ea:	61fa      	str	r2, [r7, #28]
 80108ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80108ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80108f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80108f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80108f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108fa:	429a      	cmp	r2, r3
 80108fc:	d302      	bcc.n	8010904 <xQueueGenericSendFromISR+0xbc>
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	2b02      	cmp	r3, #2
 8010902:	d12f      	bne.n	8010964 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801090a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801090e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010912:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010914:	683a      	ldr	r2, [r7, #0]
 8010916:	68b9      	ldr	r1, [r7, #8]
 8010918:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801091a:	f000 fb64 	bl	8010fe6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801091e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010926:	d112      	bne.n	801094e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801092c:	2b00      	cmp	r3, #0
 801092e:	d016      	beq.n	801095e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010932:	3324      	adds	r3, #36	; 0x24
 8010934:	4618      	mov	r0, r3
 8010936:	f001 f8f9 	bl	8011b2c <xTaskRemoveFromEventList>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d00e      	beq.n	801095e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d00b      	beq.n	801095e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2201      	movs	r2, #1
 801094a:	601a      	str	r2, [r3, #0]
 801094c:	e007      	b.n	801095e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801094e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010952:	3301      	adds	r3, #1
 8010954:	b2db      	uxtb	r3, r3
 8010956:	b25a      	sxtb	r2, r3
 8010958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801095a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801095e:	2301      	movs	r3, #1
 8010960:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010962:	e001      	b.n	8010968 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010964:	2300      	movs	r3, #0
 8010966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801096a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010972:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010976:	4618      	mov	r0, r3
 8010978:	3740      	adds	r7, #64	; 0x40
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}

0801097e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801097e:	b580      	push	{r7, lr}
 8010980:	b08e      	sub	sp, #56	; 0x38
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
 8010986:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801098c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801098e:	2b00      	cmp	r3, #0
 8010990:	d10a      	bne.n	80109a8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010996:	f383 8811 	msr	BASEPRI, r3
 801099a:	f3bf 8f6f 	isb	sy
 801099e:	f3bf 8f4f 	dsb	sy
 80109a2:	623b      	str	r3, [r7, #32]
}
 80109a4:	bf00      	nop
 80109a6:	e7fe      	b.n	80109a6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80109a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d00a      	beq.n	80109c6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80109b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b4:	f383 8811 	msr	BASEPRI, r3
 80109b8:	f3bf 8f6f 	isb	sy
 80109bc:	f3bf 8f4f 	dsb	sy
 80109c0:	61fb      	str	r3, [r7, #28]
}
 80109c2:	bf00      	nop
 80109c4:	e7fe      	b.n	80109c4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80109c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d103      	bne.n	80109d6 <xQueueGiveFromISR+0x58>
 80109ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d0:	689b      	ldr	r3, [r3, #8]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d101      	bne.n	80109da <xQueueGiveFromISR+0x5c>
 80109d6:	2301      	movs	r3, #1
 80109d8:	e000      	b.n	80109dc <xQueueGiveFromISR+0x5e>
 80109da:	2300      	movs	r3, #0
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d10a      	bne.n	80109f6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80109e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e4:	f383 8811 	msr	BASEPRI, r3
 80109e8:	f3bf 8f6f 	isb	sy
 80109ec:	f3bf 8f4f 	dsb	sy
 80109f0:	61bb      	str	r3, [r7, #24]
}
 80109f2:	bf00      	nop
 80109f4:	e7fe      	b.n	80109f4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80109f6:	f001 feff 	bl	80127f8 <vPortValidateInterruptPriority>
	__asm volatile
 80109fa:	f3ef 8211 	mrs	r2, BASEPRI
 80109fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a02:	f383 8811 	msr	BASEPRI, r3
 8010a06:	f3bf 8f6f 	isb	sy
 8010a0a:	f3bf 8f4f 	dsb	sy
 8010a0e:	617a      	str	r2, [r7, #20]
 8010a10:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010a12:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d22b      	bcs.n	8010a7e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a32:	1c5a      	adds	r2, r3, #1
 8010a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a36:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010a38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a40:	d112      	bne.n	8010a68 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d016      	beq.n	8010a78 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a4c:	3324      	adds	r3, #36	; 0x24
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f001 f86c 	bl	8011b2c <xTaskRemoveFromEventList>
 8010a54:	4603      	mov	r3, r0
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d00e      	beq.n	8010a78 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d00b      	beq.n	8010a78 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	2201      	movs	r2, #1
 8010a64:	601a      	str	r2, [r3, #0]
 8010a66:	e007      	b.n	8010a78 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	b25a      	sxtb	r2, r3
 8010a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010a78:	2301      	movs	r3, #1
 8010a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8010a7c:	e001      	b.n	8010a82 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	637b      	str	r3, [r7, #52]	; 0x34
 8010a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a84:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f383 8811 	msr	BASEPRI, r3
}
 8010a8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3738      	adds	r7, #56	; 0x38
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b08c      	sub	sp, #48	; 0x30
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	60b9      	str	r1, [r7, #8]
 8010aa2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d10a      	bne.n	8010ac8 <xQueueReceive+0x30>
	__asm volatile
 8010ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab6:	f383 8811 	msr	BASEPRI, r3
 8010aba:	f3bf 8f6f 	isb	sy
 8010abe:	f3bf 8f4f 	dsb	sy
 8010ac2:	623b      	str	r3, [r7, #32]
}
 8010ac4:	bf00      	nop
 8010ac6:	e7fe      	b.n	8010ac6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d103      	bne.n	8010ad6 <xQueueReceive+0x3e>
 8010ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d101      	bne.n	8010ada <xQueueReceive+0x42>
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	e000      	b.n	8010adc <xQueueReceive+0x44>
 8010ada:	2300      	movs	r3, #0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d10a      	bne.n	8010af6 <xQueueReceive+0x5e>
	__asm volatile
 8010ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae4:	f383 8811 	msr	BASEPRI, r3
 8010ae8:	f3bf 8f6f 	isb	sy
 8010aec:	f3bf 8f4f 	dsb	sy
 8010af0:	61fb      	str	r3, [r7, #28]
}
 8010af2:	bf00      	nop
 8010af4:	e7fe      	b.n	8010af4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010af6:	f001 fa37 	bl	8011f68 <xTaskGetSchedulerState>
 8010afa:	4603      	mov	r3, r0
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d102      	bne.n	8010b06 <xQueueReceive+0x6e>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d101      	bne.n	8010b0a <xQueueReceive+0x72>
 8010b06:	2301      	movs	r3, #1
 8010b08:	e000      	b.n	8010b0c <xQueueReceive+0x74>
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d10a      	bne.n	8010b26 <xQueueReceive+0x8e>
	__asm volatile
 8010b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b14:	f383 8811 	msr	BASEPRI, r3
 8010b18:	f3bf 8f6f 	isb	sy
 8010b1c:	f3bf 8f4f 	dsb	sy
 8010b20:	61bb      	str	r3, [r7, #24]
}
 8010b22:	bf00      	nop
 8010b24:	e7fe      	b.n	8010b24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b26:	f001 fd85 	bl	8012634 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d01f      	beq.n	8010b76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b36:	68b9      	ldr	r1, [r7, #8]
 8010b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b3a:	f000 fabe 	bl	80110ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b40:	1e5a      	subs	r2, r3, #1
 8010b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b48:	691b      	ldr	r3, [r3, #16]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d00f      	beq.n	8010b6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b50:	3310      	adds	r3, #16
 8010b52:	4618      	mov	r0, r3
 8010b54:	f000 ffea 	bl	8011b2c <xTaskRemoveFromEventList>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d007      	beq.n	8010b6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010b5e:	4b3d      	ldr	r3, [pc, #244]	; (8010c54 <xQueueReceive+0x1bc>)
 8010b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b64:	601a      	str	r2, [r3, #0]
 8010b66:	f3bf 8f4f 	dsb	sy
 8010b6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010b6e:	f001 fd91 	bl	8012694 <vPortExitCritical>
				return pdPASS;
 8010b72:	2301      	movs	r3, #1
 8010b74:	e069      	b.n	8010c4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d103      	bne.n	8010b84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010b7c:	f001 fd8a 	bl	8012694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010b80:	2300      	movs	r3, #0
 8010b82:	e062      	b.n	8010c4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d106      	bne.n	8010b98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b8a:	f107 0310 	add.w	r3, r7, #16
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f001 f890 	bl	8011cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b94:	2301      	movs	r3, #1
 8010b96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b98:	f001 fd7c 	bl	8012694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b9c:	f000 fd86 	bl	80116ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010ba0:	f001 fd48 	bl	8012634 <vPortEnterCritical>
 8010ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010baa:	b25b      	sxtb	r3, r3
 8010bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bb0:	d103      	bne.n	8010bba <xQueueReceive+0x122>
 8010bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bc0:	b25b      	sxtb	r3, r3
 8010bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bc6:	d103      	bne.n	8010bd0 <xQueueReceive+0x138>
 8010bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bca:	2200      	movs	r2, #0
 8010bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010bd0:	f001 fd60 	bl	8012694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010bd4:	1d3a      	adds	r2, r7, #4
 8010bd6:	f107 0310 	add.w	r3, r7, #16
 8010bda:	4611      	mov	r1, r2
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f001 f87f 	bl	8011ce0 <xTaskCheckForTimeOut>
 8010be2:	4603      	mov	r3, r0
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d123      	bne.n	8010c30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bea:	f000 fade 	bl	80111aa <prvIsQueueEmpty>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d017      	beq.n	8010c24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf6:	3324      	adds	r3, #36	; 0x24
 8010bf8:	687a      	ldr	r2, [r7, #4]
 8010bfa:	4611      	mov	r1, r2
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f000 ff35 	bl	8011a6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c04:	f000 fa7f 	bl	8011106 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c08:	f000 fd5e 	bl	80116c8 <xTaskResumeAll>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d189      	bne.n	8010b26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010c12:	4b10      	ldr	r3, [pc, #64]	; (8010c54 <xQueueReceive+0x1bc>)
 8010c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c18:	601a      	str	r2, [r3, #0]
 8010c1a:	f3bf 8f4f 	dsb	sy
 8010c1e:	f3bf 8f6f 	isb	sy
 8010c22:	e780      	b.n	8010b26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c26:	f000 fa6e 	bl	8011106 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c2a:	f000 fd4d 	bl	80116c8 <xTaskResumeAll>
 8010c2e:	e77a      	b.n	8010b26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c32:	f000 fa68 	bl	8011106 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c36:	f000 fd47 	bl	80116c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c3c:	f000 fab5 	bl	80111aa <prvIsQueueEmpty>
 8010c40:	4603      	mov	r3, r0
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	f43f af6f 	beq.w	8010b26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3730      	adds	r7, #48	; 0x30
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}
 8010c52:	bf00      	nop
 8010c54:	e000ed04 	.word	0xe000ed04

08010c58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b08e      	sub	sp, #56	; 0x38
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010c62:	2300      	movs	r3, #0
 8010c64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d10a      	bne.n	8010c8a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c78:	f383 8811 	msr	BASEPRI, r3
 8010c7c:	f3bf 8f6f 	isb	sy
 8010c80:	f3bf 8f4f 	dsb	sy
 8010c84:	623b      	str	r3, [r7, #32]
}
 8010c86:	bf00      	nop
 8010c88:	e7fe      	b.n	8010c88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d00a      	beq.n	8010ca8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c96:	f383 8811 	msr	BASEPRI, r3
 8010c9a:	f3bf 8f6f 	isb	sy
 8010c9e:	f3bf 8f4f 	dsb	sy
 8010ca2:	61fb      	str	r3, [r7, #28]
}
 8010ca4:	bf00      	nop
 8010ca6:	e7fe      	b.n	8010ca6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ca8:	f001 f95e 	bl	8011f68 <xTaskGetSchedulerState>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d102      	bne.n	8010cb8 <xQueueSemaphoreTake+0x60>
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d101      	bne.n	8010cbc <xQueueSemaphoreTake+0x64>
 8010cb8:	2301      	movs	r3, #1
 8010cba:	e000      	b.n	8010cbe <xQueueSemaphoreTake+0x66>
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d10a      	bne.n	8010cd8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc6:	f383 8811 	msr	BASEPRI, r3
 8010cca:	f3bf 8f6f 	isb	sy
 8010cce:	f3bf 8f4f 	dsb	sy
 8010cd2:	61bb      	str	r3, [r7, #24]
}
 8010cd4:	bf00      	nop
 8010cd6:	e7fe      	b.n	8010cd6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010cd8:	f001 fcac 	bl	8012634 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ce0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d024      	beq.n	8010d32 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cea:	1e5a      	subs	r2, r3, #1
 8010cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d104      	bne.n	8010d02 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010cf8:	f001 faf6 	bl	80122e8 <pvTaskIncrementMutexHeldCount>
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d00:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d04:	691b      	ldr	r3, [r3, #16]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d00f      	beq.n	8010d2a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d0c:	3310      	adds	r3, #16
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f000 ff0c 	bl	8011b2c <xTaskRemoveFromEventList>
 8010d14:	4603      	mov	r3, r0
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d007      	beq.n	8010d2a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010d1a:	4b54      	ldr	r3, [pc, #336]	; (8010e6c <xQueueSemaphoreTake+0x214>)
 8010d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d20:	601a      	str	r2, [r3, #0]
 8010d22:	f3bf 8f4f 	dsb	sy
 8010d26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010d2a:	f001 fcb3 	bl	8012694 <vPortExitCritical>
				return pdPASS;
 8010d2e:	2301      	movs	r3, #1
 8010d30:	e097      	b.n	8010e62 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d111      	bne.n	8010d5c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d00a      	beq.n	8010d54 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d42:	f383 8811 	msr	BASEPRI, r3
 8010d46:	f3bf 8f6f 	isb	sy
 8010d4a:	f3bf 8f4f 	dsb	sy
 8010d4e:	617b      	str	r3, [r7, #20]
}
 8010d50:	bf00      	nop
 8010d52:	e7fe      	b.n	8010d52 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010d54:	f001 fc9e 	bl	8012694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	e082      	b.n	8010e62 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d106      	bne.n	8010d70 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d62:	f107 030c 	add.w	r3, r7, #12
 8010d66:	4618      	mov	r0, r3
 8010d68:	f000 ffa4 	bl	8011cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010d70:	f001 fc90 	bl	8012694 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d74:	f000 fc9a 	bl	80116ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d78:	f001 fc5c 	bl	8012634 <vPortEnterCritical>
 8010d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d82:	b25b      	sxtb	r3, r3
 8010d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d88:	d103      	bne.n	8010d92 <xQueueSemaphoreTake+0x13a>
 8010d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d98:	b25b      	sxtb	r3, r3
 8010d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d9e:	d103      	bne.n	8010da8 <xQueueSemaphoreTake+0x150>
 8010da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010da2:	2200      	movs	r2, #0
 8010da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010da8:	f001 fc74 	bl	8012694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010dac:	463a      	mov	r2, r7
 8010dae:	f107 030c 	add.w	r3, r7, #12
 8010db2:	4611      	mov	r1, r2
 8010db4:	4618      	mov	r0, r3
 8010db6:	f000 ff93 	bl	8011ce0 <xTaskCheckForTimeOut>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d132      	bne.n	8010e26 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010dc2:	f000 f9f2 	bl	80111aa <prvIsQueueEmpty>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d026      	beq.n	8010e1a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d109      	bne.n	8010de8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010dd4:	f001 fc2e 	bl	8012634 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dda:	689b      	ldr	r3, [r3, #8]
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f001 f8e1 	bl	8011fa4 <xTaskPriorityInherit>
 8010de2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010de4:	f001 fc56 	bl	8012694 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dea:	3324      	adds	r3, #36	; 0x24
 8010dec:	683a      	ldr	r2, [r7, #0]
 8010dee:	4611      	mov	r1, r2
 8010df0:	4618      	mov	r0, r3
 8010df2:	f000 fe3b 	bl	8011a6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010df6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010df8:	f000 f985 	bl	8011106 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010dfc:	f000 fc64 	bl	80116c8 <xTaskResumeAll>
 8010e00:	4603      	mov	r3, r0
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f47f af68 	bne.w	8010cd8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010e08:	4b18      	ldr	r3, [pc, #96]	; (8010e6c <xQueueSemaphoreTake+0x214>)
 8010e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e0e:	601a      	str	r2, [r3, #0]
 8010e10:	f3bf 8f4f 	dsb	sy
 8010e14:	f3bf 8f6f 	isb	sy
 8010e18:	e75e      	b.n	8010cd8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010e1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e1c:	f000 f973 	bl	8011106 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e20:	f000 fc52 	bl	80116c8 <xTaskResumeAll>
 8010e24:	e758      	b.n	8010cd8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010e26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e28:	f000 f96d 	bl	8011106 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e2c:	f000 fc4c 	bl	80116c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e32:	f000 f9ba 	bl	80111aa <prvIsQueueEmpty>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	f43f af4d 	beq.w	8010cd8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d00d      	beq.n	8010e60 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010e44:	f001 fbf6 	bl	8012634 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010e48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e4a:	f000 f8b4 	bl	8010fb6 <prvGetDisinheritPriorityAfterTimeout>
 8010e4e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e52:	689b      	ldr	r3, [r3, #8]
 8010e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e56:	4618      	mov	r0, r3
 8010e58:	f001 f9a0 	bl	801219c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010e5c:	f001 fc1a 	bl	8012694 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010e60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3738      	adds	r7, #56	; 0x38
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	e000ed04 	.word	0xe000ed04

08010e70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b08e      	sub	sp, #56	; 0x38
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	60f8      	str	r0, [r7, #12]
 8010e78:	60b9      	str	r1, [r7, #8]
 8010e7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d10a      	bne.n	8010e9c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e8a:	f383 8811 	msr	BASEPRI, r3
 8010e8e:	f3bf 8f6f 	isb	sy
 8010e92:	f3bf 8f4f 	dsb	sy
 8010e96:	623b      	str	r3, [r7, #32]
}
 8010e98:	bf00      	nop
 8010e9a:	e7fe      	b.n	8010e9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d103      	bne.n	8010eaa <xQueueReceiveFromISR+0x3a>
 8010ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d101      	bne.n	8010eae <xQueueReceiveFromISR+0x3e>
 8010eaa:	2301      	movs	r3, #1
 8010eac:	e000      	b.n	8010eb0 <xQueueReceiveFromISR+0x40>
 8010eae:	2300      	movs	r3, #0
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d10a      	bne.n	8010eca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb8:	f383 8811 	msr	BASEPRI, r3
 8010ebc:	f3bf 8f6f 	isb	sy
 8010ec0:	f3bf 8f4f 	dsb	sy
 8010ec4:	61fb      	str	r3, [r7, #28]
}
 8010ec6:	bf00      	nop
 8010ec8:	e7fe      	b.n	8010ec8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010eca:	f001 fc95 	bl	80127f8 <vPortValidateInterruptPriority>
	__asm volatile
 8010ece:	f3ef 8211 	mrs	r2, BASEPRI
 8010ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed6:	f383 8811 	msr	BASEPRI, r3
 8010eda:	f3bf 8f6f 	isb	sy
 8010ede:	f3bf 8f4f 	dsb	sy
 8010ee2:	61ba      	str	r2, [r7, #24]
 8010ee4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010ee6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d02f      	beq.n	8010f56 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f00:	68b9      	ldr	r1, [r7, #8]
 8010f02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f04:	f000 f8d9 	bl	80110ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f0a:	1e5a      	subs	r2, r3, #1
 8010f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010f10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f18:	d112      	bne.n	8010f40 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f1c:	691b      	ldr	r3, [r3, #16]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d016      	beq.n	8010f50 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f24:	3310      	adds	r3, #16
 8010f26:	4618      	mov	r0, r3
 8010f28:	f000 fe00 	bl	8011b2c <xTaskRemoveFromEventList>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d00e      	beq.n	8010f50 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d00b      	beq.n	8010f50 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	601a      	str	r2, [r3, #0]
 8010f3e:	e007      	b.n	8010f50 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f44:	3301      	adds	r3, #1
 8010f46:	b2db      	uxtb	r3, r3
 8010f48:	b25a      	sxtb	r2, r3
 8010f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010f50:	2301      	movs	r3, #1
 8010f52:	637b      	str	r3, [r7, #52]	; 0x34
 8010f54:	e001      	b.n	8010f5a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010f56:	2300      	movs	r3, #0
 8010f58:	637b      	str	r3, [r7, #52]	; 0x34
 8010f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	f383 8811 	msr	BASEPRI, r3
}
 8010f64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3738      	adds	r7, #56	; 0x38
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d10a      	bne.n	8010f98 <vQueueDelete+0x28>
	__asm volatile
 8010f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f86:	f383 8811 	msr	BASEPRI, r3
 8010f8a:	f3bf 8f6f 	isb	sy
 8010f8e:	f3bf 8f4f 	dsb	sy
 8010f92:	60bb      	str	r3, [r7, #8]
}
 8010f94:	bf00      	nop
 8010f96:	e7fe      	b.n	8010f96 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f000 f935 	bl	8011208 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d102      	bne.n	8010fae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010fa8:	68f8      	ldr	r0, [r7, #12]
 8010faa:	f001 fd31 	bl	8012a10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010fae:	bf00      	nop
 8010fb0:	3710      	adds	r7, #16
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}

08010fb6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010fb6:	b480      	push	{r7}
 8010fb8:	b085      	sub	sp, #20
 8010fba:	af00      	add	r7, sp, #0
 8010fbc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d006      	beq.n	8010fd4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	f1c3 0307 	rsb	r3, r3, #7
 8010fd0:	60fb      	str	r3, [r7, #12]
 8010fd2:	e001      	b.n	8010fd8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
	}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3714      	adds	r7, #20
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe4:	4770      	bx	lr

08010fe6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010fe6:	b580      	push	{r7, lr}
 8010fe8:	b086      	sub	sp, #24
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	60f8      	str	r0, [r7, #12]
 8010fee:	60b9      	str	r1, [r7, #8]
 8010ff0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ffa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011000:	2b00      	cmp	r3, #0
 8011002:	d10d      	bne.n	8011020 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d14d      	bne.n	80110a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	689b      	ldr	r3, [r3, #8]
 8011010:	4618      	mov	r0, r3
 8011012:	f001 f83d 	bl	8012090 <xTaskPriorityDisinherit>
 8011016:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	2200      	movs	r2, #0
 801101c:	609a      	str	r2, [r3, #8]
 801101e:	e043      	b.n	80110a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d119      	bne.n	801105a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	6858      	ldr	r0, [r3, #4]
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801102e:	461a      	mov	r2, r3
 8011030:	68b9      	ldr	r1, [r7, #8]
 8011032:	f00e f96b 	bl	801f30c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	685a      	ldr	r2, [r3, #4]
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801103e:	441a      	add	r2, r3
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	685a      	ldr	r2, [r3, #4]
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	689b      	ldr	r3, [r3, #8]
 801104c:	429a      	cmp	r2, r3
 801104e:	d32b      	bcc.n	80110a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	681a      	ldr	r2, [r3, #0]
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	605a      	str	r2, [r3, #4]
 8011058:	e026      	b.n	80110a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	68d8      	ldr	r0, [r3, #12]
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011062:	461a      	mov	r2, r3
 8011064:	68b9      	ldr	r1, [r7, #8]
 8011066:	f00e f951 	bl	801f30c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	68da      	ldr	r2, [r3, #12]
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011072:	425b      	negs	r3, r3
 8011074:	441a      	add	r2, r3
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	68da      	ldr	r2, [r3, #12]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	429a      	cmp	r2, r3
 8011084:	d207      	bcs.n	8011096 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	689a      	ldr	r2, [r3, #8]
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801108e:	425b      	negs	r3, r3
 8011090:	441a      	add	r2, r3
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	2b02      	cmp	r3, #2
 801109a:	d105      	bne.n	80110a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d002      	beq.n	80110a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	3b01      	subs	r3, #1
 80110a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	1c5a      	adds	r2, r3, #1
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80110b0:	697b      	ldr	r3, [r7, #20]
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3718      	adds	r7, #24
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}

080110ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80110ba:	b580      	push	{r7, lr}
 80110bc:	b082      	sub	sp, #8
 80110be:	af00      	add	r7, sp, #0
 80110c0:	6078      	str	r0, [r7, #4]
 80110c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d018      	beq.n	80110fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	68da      	ldr	r2, [r3, #12]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110d4:	441a      	add	r2, r3
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	68da      	ldr	r2, [r3, #12]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	689b      	ldr	r3, [r3, #8]
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d303      	bcc.n	80110ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681a      	ldr	r2, [r3, #0]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	68d9      	ldr	r1, [r3, #12]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110f6:	461a      	mov	r2, r3
 80110f8:	6838      	ldr	r0, [r7, #0]
 80110fa:	f00e f907 	bl	801f30c <memcpy>
	}
}
 80110fe:	bf00      	nop
 8011100:	3708      	adds	r7, #8
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}

08011106 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011106:	b580      	push	{r7, lr}
 8011108:	b084      	sub	sp, #16
 801110a:	af00      	add	r7, sp, #0
 801110c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801110e:	f001 fa91 	bl	8012634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011118:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801111a:	e011      	b.n	8011140 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011120:	2b00      	cmp	r3, #0
 8011122:	d012      	beq.n	801114a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	3324      	adds	r3, #36	; 0x24
 8011128:	4618      	mov	r0, r3
 801112a:	f000 fcff 	bl	8011b2c <xTaskRemoveFromEventList>
 801112e:	4603      	mov	r3, r0
 8011130:	2b00      	cmp	r3, #0
 8011132:	d001      	beq.n	8011138 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011134:	f000 fe36 	bl	8011da4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011138:	7bfb      	ldrb	r3, [r7, #15]
 801113a:	3b01      	subs	r3, #1
 801113c:	b2db      	uxtb	r3, r3
 801113e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011144:	2b00      	cmp	r3, #0
 8011146:	dce9      	bgt.n	801111c <prvUnlockQueue+0x16>
 8011148:	e000      	b.n	801114c <prvUnlockQueue+0x46>
					break;
 801114a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	22ff      	movs	r2, #255	; 0xff
 8011150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011154:	f001 fa9e 	bl	8012694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011158:	f001 fa6c 	bl	8012634 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011162:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011164:	e011      	b.n	801118a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	691b      	ldr	r3, [r3, #16]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d012      	beq.n	8011194 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	3310      	adds	r3, #16
 8011172:	4618      	mov	r0, r3
 8011174:	f000 fcda 	bl	8011b2c <xTaskRemoveFromEventList>
 8011178:	4603      	mov	r3, r0
 801117a:	2b00      	cmp	r3, #0
 801117c:	d001      	beq.n	8011182 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801117e:	f000 fe11 	bl	8011da4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011182:	7bbb      	ldrb	r3, [r7, #14]
 8011184:	3b01      	subs	r3, #1
 8011186:	b2db      	uxtb	r3, r3
 8011188:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801118a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801118e:	2b00      	cmp	r3, #0
 8011190:	dce9      	bgt.n	8011166 <prvUnlockQueue+0x60>
 8011192:	e000      	b.n	8011196 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011194:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	22ff      	movs	r2, #255	; 0xff
 801119a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801119e:	f001 fa79 	bl	8012694 <vPortExitCritical>
}
 80111a2:	bf00      	nop
 80111a4:	3710      	adds	r7, #16
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}

080111aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80111aa:	b580      	push	{r7, lr}
 80111ac:	b084      	sub	sp, #16
 80111ae:	af00      	add	r7, sp, #0
 80111b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80111b2:	f001 fa3f 	bl	8012634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d102      	bne.n	80111c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80111be:	2301      	movs	r3, #1
 80111c0:	60fb      	str	r3, [r7, #12]
 80111c2:	e001      	b.n	80111c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80111c4:	2300      	movs	r3, #0
 80111c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80111c8:	f001 fa64 	bl	8012694 <vPortExitCritical>

	return xReturn;
 80111cc:	68fb      	ldr	r3, [r7, #12]
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3710      	adds	r7, #16
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}

080111d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80111d6:	b580      	push	{r7, lr}
 80111d8:	b084      	sub	sp, #16
 80111da:	af00      	add	r7, sp, #0
 80111dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80111de:	f001 fa29 	bl	8012634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d102      	bne.n	80111f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80111ee:	2301      	movs	r3, #1
 80111f0:	60fb      	str	r3, [r7, #12]
 80111f2:	e001      	b.n	80111f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80111f4:	2300      	movs	r3, #0
 80111f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80111f8:	f001 fa4c 	bl	8012694 <vPortExitCritical>

	return xReturn;
 80111fc:	68fb      	ldr	r3, [r7, #12]
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3710      	adds	r7, #16
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}
	...

08011208 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011208:	b480      	push	{r7}
 801120a:	b085      	sub	sp, #20
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011210:	2300      	movs	r3, #0
 8011212:	60fb      	str	r3, [r7, #12]
 8011214:	e016      	b.n	8011244 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011216:	4a10      	ldr	r2, [pc, #64]	; (8011258 <vQueueUnregisterQueue+0x50>)
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	00db      	lsls	r3, r3, #3
 801121c:	4413      	add	r3, r2
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	687a      	ldr	r2, [r7, #4]
 8011222:	429a      	cmp	r2, r3
 8011224:	d10b      	bne.n	801123e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011226:	4a0c      	ldr	r2, [pc, #48]	; (8011258 <vQueueUnregisterQueue+0x50>)
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	2100      	movs	r1, #0
 801122c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011230:	4a09      	ldr	r2, [pc, #36]	; (8011258 <vQueueUnregisterQueue+0x50>)
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	00db      	lsls	r3, r3, #3
 8011236:	4413      	add	r3, r2
 8011238:	2200      	movs	r2, #0
 801123a:	605a      	str	r2, [r3, #4]
				break;
 801123c:	e006      	b.n	801124c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	3301      	adds	r3, #1
 8011242:	60fb      	str	r3, [r7, #12]
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2b07      	cmp	r3, #7
 8011248:	d9e5      	bls.n	8011216 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801124a:	bf00      	nop
 801124c:	bf00      	nop
 801124e:	3714      	adds	r7, #20
 8011250:	46bd      	mov	sp, r7
 8011252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011256:	4770      	bx	lr
 8011258:	20010db4 	.word	0x20010db4

0801125c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801125c:	b580      	push	{r7, lr}
 801125e:	b08e      	sub	sp, #56	; 0x38
 8011260:	af04      	add	r7, sp, #16
 8011262:	60f8      	str	r0, [r7, #12]
 8011264:	60b9      	str	r1, [r7, #8]
 8011266:	607a      	str	r2, [r7, #4]
 8011268:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801126a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801126c:	2b00      	cmp	r3, #0
 801126e:	d10a      	bne.n	8011286 <xTaskCreateStatic+0x2a>
	__asm volatile
 8011270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011274:	f383 8811 	msr	BASEPRI, r3
 8011278:	f3bf 8f6f 	isb	sy
 801127c:	f3bf 8f4f 	dsb	sy
 8011280:	623b      	str	r3, [r7, #32]
}
 8011282:	bf00      	nop
 8011284:	e7fe      	b.n	8011284 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011288:	2b00      	cmp	r3, #0
 801128a:	d10a      	bne.n	80112a2 <xTaskCreateStatic+0x46>
	__asm volatile
 801128c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011290:	f383 8811 	msr	BASEPRI, r3
 8011294:	f3bf 8f6f 	isb	sy
 8011298:	f3bf 8f4f 	dsb	sy
 801129c:	61fb      	str	r3, [r7, #28]
}
 801129e:	bf00      	nop
 80112a0:	e7fe      	b.n	80112a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80112a2:	2354      	movs	r3, #84	; 0x54
 80112a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	2b54      	cmp	r3, #84	; 0x54
 80112aa:	d00a      	beq.n	80112c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80112ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112b0:	f383 8811 	msr	BASEPRI, r3
 80112b4:	f3bf 8f6f 	isb	sy
 80112b8:	f3bf 8f4f 	dsb	sy
 80112bc:	61bb      	str	r3, [r7, #24]
}
 80112be:	bf00      	nop
 80112c0:	e7fe      	b.n	80112c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80112c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80112c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d01e      	beq.n	8011308 <xTaskCreateStatic+0xac>
 80112ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d01b      	beq.n	8011308 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80112d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80112d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80112d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80112da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112dc:	2202      	movs	r2, #2
 80112de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80112e2:	2300      	movs	r3, #0
 80112e4:	9303      	str	r3, [sp, #12]
 80112e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e8:	9302      	str	r3, [sp, #8]
 80112ea:	f107 0314 	add.w	r3, r7, #20
 80112ee:	9301      	str	r3, [sp, #4]
 80112f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f2:	9300      	str	r3, [sp, #0]
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	68b9      	ldr	r1, [r7, #8]
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	f000 f850 	bl	80113a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011300:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011302:	f000 f8d5 	bl	80114b0 <prvAddNewTaskToReadyList>
 8011306:	e001      	b.n	801130c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011308:	2300      	movs	r3, #0
 801130a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801130c:	697b      	ldr	r3, [r7, #20]
	}
 801130e:	4618      	mov	r0, r3
 8011310:	3728      	adds	r7, #40	; 0x28
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011316:	b580      	push	{r7, lr}
 8011318:	b08c      	sub	sp, #48	; 0x30
 801131a:	af04      	add	r7, sp, #16
 801131c:	60f8      	str	r0, [r7, #12]
 801131e:	60b9      	str	r1, [r7, #8]
 8011320:	603b      	str	r3, [r7, #0]
 8011322:	4613      	mov	r3, r2
 8011324:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011326:	88fb      	ldrh	r3, [r7, #6]
 8011328:	009b      	lsls	r3, r3, #2
 801132a:	4618      	mov	r0, r3
 801132c:	f001 faa4 	bl	8012878 <pvPortMalloc>
 8011330:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d00e      	beq.n	8011356 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011338:	2054      	movs	r0, #84	; 0x54
 801133a:	f001 fa9d 	bl	8012878 <pvPortMalloc>
 801133e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011340:	69fb      	ldr	r3, [r7, #28]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d003      	beq.n	801134e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011346:	69fb      	ldr	r3, [r7, #28]
 8011348:	697a      	ldr	r2, [r7, #20]
 801134a:	631a      	str	r2, [r3, #48]	; 0x30
 801134c:	e005      	b.n	801135a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801134e:	6978      	ldr	r0, [r7, #20]
 8011350:	f001 fb5e 	bl	8012a10 <vPortFree>
 8011354:	e001      	b.n	801135a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011356:	2300      	movs	r3, #0
 8011358:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801135a:	69fb      	ldr	r3, [r7, #28]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d017      	beq.n	8011390 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011360:	69fb      	ldr	r3, [r7, #28]
 8011362:	2200      	movs	r2, #0
 8011364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011368:	88fa      	ldrh	r2, [r7, #6]
 801136a:	2300      	movs	r3, #0
 801136c:	9303      	str	r3, [sp, #12]
 801136e:	69fb      	ldr	r3, [r7, #28]
 8011370:	9302      	str	r3, [sp, #8]
 8011372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011374:	9301      	str	r3, [sp, #4]
 8011376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011378:	9300      	str	r3, [sp, #0]
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	68b9      	ldr	r1, [r7, #8]
 801137e:	68f8      	ldr	r0, [r7, #12]
 8011380:	f000 f80e 	bl	80113a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011384:	69f8      	ldr	r0, [r7, #28]
 8011386:	f000 f893 	bl	80114b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801138a:	2301      	movs	r3, #1
 801138c:	61bb      	str	r3, [r7, #24]
 801138e:	e002      	b.n	8011396 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011390:	f04f 33ff 	mov.w	r3, #4294967295
 8011394:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011396:	69bb      	ldr	r3, [r7, #24]
	}
 8011398:	4618      	mov	r0, r3
 801139a:	3720      	adds	r7, #32
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}

080113a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b088      	sub	sp, #32
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	60b9      	str	r1, [r7, #8]
 80113aa:	607a      	str	r2, [r7, #4]
 80113ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80113ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80113b8:	3b01      	subs	r3, #1
 80113ba:	009b      	lsls	r3, r3, #2
 80113bc:	4413      	add	r3, r2
 80113be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80113c0:	69bb      	ldr	r3, [r7, #24]
 80113c2:	f023 0307 	bic.w	r3, r3, #7
 80113c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80113c8:	69bb      	ldr	r3, [r7, #24]
 80113ca:	f003 0307 	and.w	r3, r3, #7
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d00a      	beq.n	80113e8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80113d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d6:	f383 8811 	msr	BASEPRI, r3
 80113da:	f3bf 8f6f 	isb	sy
 80113de:	f3bf 8f4f 	dsb	sy
 80113e2:	617b      	str	r3, [r7, #20]
}
 80113e4:	bf00      	nop
 80113e6:	e7fe      	b.n	80113e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d01f      	beq.n	801142e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80113ee:	2300      	movs	r3, #0
 80113f0:	61fb      	str	r3, [r7, #28]
 80113f2:	e012      	b.n	801141a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80113f4:	68ba      	ldr	r2, [r7, #8]
 80113f6:	69fb      	ldr	r3, [r7, #28]
 80113f8:	4413      	add	r3, r2
 80113fa:	7819      	ldrb	r1, [r3, #0]
 80113fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	4413      	add	r3, r2
 8011402:	3334      	adds	r3, #52	; 0x34
 8011404:	460a      	mov	r2, r1
 8011406:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011408:	68ba      	ldr	r2, [r7, #8]
 801140a:	69fb      	ldr	r3, [r7, #28]
 801140c:	4413      	add	r3, r2
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d006      	beq.n	8011422 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	3301      	adds	r3, #1
 8011418:	61fb      	str	r3, [r7, #28]
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	2b0f      	cmp	r3, #15
 801141e:	d9e9      	bls.n	80113f4 <prvInitialiseNewTask+0x54>
 8011420:	e000      	b.n	8011424 <prvInitialiseNewTask+0x84>
			{
				break;
 8011422:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011426:	2200      	movs	r2, #0
 8011428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801142c:	e003      	b.n	8011436 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801142e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011430:	2200      	movs	r2, #0
 8011432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011438:	2b06      	cmp	r3, #6
 801143a:	d901      	bls.n	8011440 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801143c:	2306      	movs	r3, #6
 801143e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011444:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801144a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801144c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801144e:	2200      	movs	r2, #0
 8011450:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011454:	3304      	adds	r3, #4
 8011456:	4618      	mov	r0, r3
 8011458:	f7fe fedd 	bl	8010216 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801145c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801145e:	3318      	adds	r3, #24
 8011460:	4618      	mov	r0, r3
 8011462:	f7fe fed8 	bl	8010216 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801146a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801146c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801146e:	f1c3 0207 	rsb	r2, r3, #7
 8011472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011474:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801147a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801147c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801147e:	2200      	movs	r2, #0
 8011480:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011484:	2200      	movs	r2, #0
 8011486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801148a:	683a      	ldr	r2, [r7, #0]
 801148c:	68f9      	ldr	r1, [r7, #12]
 801148e:	69b8      	ldr	r0, [r7, #24]
 8011490:	f000 ffa4 	bl	80123dc <pxPortInitialiseStack>
 8011494:	4602      	mov	r2, r0
 8011496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011498:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801149c:	2b00      	cmp	r3, #0
 801149e:	d002      	beq.n	80114a6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80114a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80114a6:	bf00      	nop
 80114a8:	3720      	adds	r7, #32
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}
	...

080114b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b082      	sub	sp, #8
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80114b8:	f001 f8bc 	bl	8012634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80114bc:	4b2a      	ldr	r3, [pc, #168]	; (8011568 <prvAddNewTaskToReadyList+0xb8>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	3301      	adds	r3, #1
 80114c2:	4a29      	ldr	r2, [pc, #164]	; (8011568 <prvAddNewTaskToReadyList+0xb8>)
 80114c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80114c6:	4b29      	ldr	r3, [pc, #164]	; (801156c <prvAddNewTaskToReadyList+0xbc>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d109      	bne.n	80114e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80114ce:	4a27      	ldr	r2, [pc, #156]	; (801156c <prvAddNewTaskToReadyList+0xbc>)
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80114d4:	4b24      	ldr	r3, [pc, #144]	; (8011568 <prvAddNewTaskToReadyList+0xb8>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2b01      	cmp	r3, #1
 80114da:	d110      	bne.n	80114fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80114dc:	f000 fc86 	bl	8011dec <prvInitialiseTaskLists>
 80114e0:	e00d      	b.n	80114fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80114e2:	4b23      	ldr	r3, [pc, #140]	; (8011570 <prvAddNewTaskToReadyList+0xc0>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d109      	bne.n	80114fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80114ea:	4b20      	ldr	r3, [pc, #128]	; (801156c <prvAddNewTaskToReadyList+0xbc>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d802      	bhi.n	80114fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80114f8:	4a1c      	ldr	r2, [pc, #112]	; (801156c <prvAddNewTaskToReadyList+0xbc>)
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80114fe:	4b1d      	ldr	r3, [pc, #116]	; (8011574 <prvAddNewTaskToReadyList+0xc4>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	3301      	adds	r3, #1
 8011504:	4a1b      	ldr	r2, [pc, #108]	; (8011574 <prvAddNewTaskToReadyList+0xc4>)
 8011506:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801150c:	2201      	movs	r2, #1
 801150e:	409a      	lsls	r2, r3
 8011510:	4b19      	ldr	r3, [pc, #100]	; (8011578 <prvAddNewTaskToReadyList+0xc8>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	4313      	orrs	r3, r2
 8011516:	4a18      	ldr	r2, [pc, #96]	; (8011578 <prvAddNewTaskToReadyList+0xc8>)
 8011518:	6013      	str	r3, [r2, #0]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801151e:	4613      	mov	r3, r2
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	4413      	add	r3, r2
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	4a15      	ldr	r2, [pc, #84]	; (801157c <prvAddNewTaskToReadyList+0xcc>)
 8011528:	441a      	add	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	3304      	adds	r3, #4
 801152e:	4619      	mov	r1, r3
 8011530:	4610      	mov	r0, r2
 8011532:	f7fe fe7d 	bl	8010230 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011536:	f001 f8ad 	bl	8012694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801153a:	4b0d      	ldr	r3, [pc, #52]	; (8011570 <prvAddNewTaskToReadyList+0xc0>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d00e      	beq.n	8011560 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011542:	4b0a      	ldr	r3, [pc, #40]	; (801156c <prvAddNewTaskToReadyList+0xbc>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801154c:	429a      	cmp	r2, r3
 801154e:	d207      	bcs.n	8011560 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011550:	4b0b      	ldr	r3, [pc, #44]	; (8011580 <prvAddNewTaskToReadyList+0xd0>)
 8011552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011556:	601a      	str	r2, [r3, #0]
 8011558:	f3bf 8f4f 	dsb	sy
 801155c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011560:	bf00      	nop
 8011562:	3708      	adds	r7, #8
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}
 8011568:	20000c64 	.word	0x20000c64
 801156c:	20000b64 	.word	0x20000b64
 8011570:	20000c70 	.word	0x20000c70
 8011574:	20000c80 	.word	0x20000c80
 8011578:	20000c6c 	.word	0x20000c6c
 801157c:	20000b68 	.word	0x20000b68
 8011580:	e000ed04 	.word	0xe000ed04

08011584 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011584:	b580      	push	{r7, lr}
 8011586:	b084      	sub	sp, #16
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801158c:	2300      	movs	r3, #0
 801158e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d017      	beq.n	80115c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011596:	4b13      	ldr	r3, [pc, #76]	; (80115e4 <vTaskDelay+0x60>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d00a      	beq.n	80115b4 <vTaskDelay+0x30>
	__asm volatile
 801159e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a2:	f383 8811 	msr	BASEPRI, r3
 80115a6:	f3bf 8f6f 	isb	sy
 80115aa:	f3bf 8f4f 	dsb	sy
 80115ae:	60bb      	str	r3, [r7, #8]
}
 80115b0:	bf00      	nop
 80115b2:	e7fe      	b.n	80115b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80115b4:	f000 f87a 	bl	80116ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80115b8:	2100      	movs	r1, #0
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f000 fea8 	bl	8012310 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80115c0:	f000 f882 	bl	80116c8 <xTaskResumeAll>
 80115c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d107      	bne.n	80115dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80115cc:	4b06      	ldr	r3, [pc, #24]	; (80115e8 <vTaskDelay+0x64>)
 80115ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115d2:	601a      	str	r2, [r3, #0]
 80115d4:	f3bf 8f4f 	dsb	sy
 80115d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80115dc:	bf00      	nop
 80115de:	3710      	adds	r7, #16
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}
 80115e4:	20000c8c 	.word	0x20000c8c
 80115e8:	e000ed04 	.word	0xe000ed04

080115ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b08a      	sub	sp, #40	; 0x28
 80115f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80115f2:	2300      	movs	r3, #0
 80115f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80115f6:	2300      	movs	r3, #0
 80115f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80115fa:	463a      	mov	r2, r7
 80115fc:	1d39      	adds	r1, r7, #4
 80115fe:	f107 0308 	add.w	r3, r7, #8
 8011602:	4618      	mov	r0, r3
 8011604:	f7ef fa1c 	bl	8000a40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011608:	6839      	ldr	r1, [r7, #0]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	68ba      	ldr	r2, [r7, #8]
 801160e:	9202      	str	r2, [sp, #8]
 8011610:	9301      	str	r3, [sp, #4]
 8011612:	2300      	movs	r3, #0
 8011614:	9300      	str	r3, [sp, #0]
 8011616:	2300      	movs	r3, #0
 8011618:	460a      	mov	r2, r1
 801161a:	491e      	ldr	r1, [pc, #120]	; (8011694 <vTaskStartScheduler+0xa8>)
 801161c:	481e      	ldr	r0, [pc, #120]	; (8011698 <vTaskStartScheduler+0xac>)
 801161e:	f7ff fe1d 	bl	801125c <xTaskCreateStatic>
 8011622:	4603      	mov	r3, r0
 8011624:	4a1d      	ldr	r2, [pc, #116]	; (801169c <vTaskStartScheduler+0xb0>)
 8011626:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011628:	4b1c      	ldr	r3, [pc, #112]	; (801169c <vTaskStartScheduler+0xb0>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d002      	beq.n	8011636 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011630:	2301      	movs	r3, #1
 8011632:	617b      	str	r3, [r7, #20]
 8011634:	e001      	b.n	801163a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011636:	2300      	movs	r3, #0
 8011638:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	2b01      	cmp	r3, #1
 801163e:	d116      	bne.n	801166e <vTaskStartScheduler+0x82>
	__asm volatile
 8011640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011644:	f383 8811 	msr	BASEPRI, r3
 8011648:	f3bf 8f6f 	isb	sy
 801164c:	f3bf 8f4f 	dsb	sy
 8011650:	613b      	str	r3, [r7, #16]
}
 8011652:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011654:	4b12      	ldr	r3, [pc, #72]	; (80116a0 <vTaskStartScheduler+0xb4>)
 8011656:	f04f 32ff 	mov.w	r2, #4294967295
 801165a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801165c:	4b11      	ldr	r3, [pc, #68]	; (80116a4 <vTaskStartScheduler+0xb8>)
 801165e:	2201      	movs	r2, #1
 8011660:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011662:	4b11      	ldr	r3, [pc, #68]	; (80116a8 <vTaskStartScheduler+0xbc>)
 8011664:	2200      	movs	r2, #0
 8011666:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011668:	f000 ff42 	bl	80124f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801166c:	e00e      	b.n	801168c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011674:	d10a      	bne.n	801168c <vTaskStartScheduler+0xa0>
	__asm volatile
 8011676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801167a:	f383 8811 	msr	BASEPRI, r3
 801167e:	f3bf 8f6f 	isb	sy
 8011682:	f3bf 8f4f 	dsb	sy
 8011686:	60fb      	str	r3, [r7, #12]
}
 8011688:	bf00      	nop
 801168a:	e7fe      	b.n	801168a <vTaskStartScheduler+0x9e>
}
 801168c:	bf00      	nop
 801168e:	3718      	adds	r7, #24
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}
 8011694:	0802156c 	.word	0x0802156c
 8011698:	08011dbd 	.word	0x08011dbd
 801169c:	20000c88 	.word	0x20000c88
 80116a0:	20000c84 	.word	0x20000c84
 80116a4:	20000c70 	.word	0x20000c70
 80116a8:	20000c68 	.word	0x20000c68

080116ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80116ac:	b480      	push	{r7}
 80116ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80116b0:	4b04      	ldr	r3, [pc, #16]	; (80116c4 <vTaskSuspendAll+0x18>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	3301      	adds	r3, #1
 80116b6:	4a03      	ldr	r2, [pc, #12]	; (80116c4 <vTaskSuspendAll+0x18>)
 80116b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80116ba:	bf00      	nop
 80116bc:	46bd      	mov	sp, r7
 80116be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c2:	4770      	bx	lr
 80116c4:	20000c8c 	.word	0x20000c8c

080116c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b084      	sub	sp, #16
 80116cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80116ce:	2300      	movs	r3, #0
 80116d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80116d2:	2300      	movs	r3, #0
 80116d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80116d6:	4b41      	ldr	r3, [pc, #260]	; (80117dc <xTaskResumeAll+0x114>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d10a      	bne.n	80116f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80116de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e2:	f383 8811 	msr	BASEPRI, r3
 80116e6:	f3bf 8f6f 	isb	sy
 80116ea:	f3bf 8f4f 	dsb	sy
 80116ee:	603b      	str	r3, [r7, #0]
}
 80116f0:	bf00      	nop
 80116f2:	e7fe      	b.n	80116f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80116f4:	f000 ff9e 	bl	8012634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80116f8:	4b38      	ldr	r3, [pc, #224]	; (80117dc <xTaskResumeAll+0x114>)
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	3b01      	subs	r3, #1
 80116fe:	4a37      	ldr	r2, [pc, #220]	; (80117dc <xTaskResumeAll+0x114>)
 8011700:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011702:	4b36      	ldr	r3, [pc, #216]	; (80117dc <xTaskResumeAll+0x114>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d161      	bne.n	80117ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801170a:	4b35      	ldr	r3, [pc, #212]	; (80117e0 <xTaskResumeAll+0x118>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d05d      	beq.n	80117ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011712:	e02e      	b.n	8011772 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011714:	4b33      	ldr	r3, [pc, #204]	; (80117e4 <xTaskResumeAll+0x11c>)
 8011716:	68db      	ldr	r3, [r3, #12]
 8011718:	68db      	ldr	r3, [r3, #12]
 801171a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	3318      	adds	r3, #24
 8011720:	4618      	mov	r0, r3
 8011722:	f7fe fde2 	bl	80102ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	3304      	adds	r3, #4
 801172a:	4618      	mov	r0, r3
 801172c:	f7fe fddd 	bl	80102ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011734:	2201      	movs	r2, #1
 8011736:	409a      	lsls	r2, r3
 8011738:	4b2b      	ldr	r3, [pc, #172]	; (80117e8 <xTaskResumeAll+0x120>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	4313      	orrs	r3, r2
 801173e:	4a2a      	ldr	r2, [pc, #168]	; (80117e8 <xTaskResumeAll+0x120>)
 8011740:	6013      	str	r3, [r2, #0]
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011746:	4613      	mov	r3, r2
 8011748:	009b      	lsls	r3, r3, #2
 801174a:	4413      	add	r3, r2
 801174c:	009b      	lsls	r3, r3, #2
 801174e:	4a27      	ldr	r2, [pc, #156]	; (80117ec <xTaskResumeAll+0x124>)
 8011750:	441a      	add	r2, r3
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	3304      	adds	r3, #4
 8011756:	4619      	mov	r1, r3
 8011758:	4610      	mov	r0, r2
 801175a:	f7fe fd69 	bl	8010230 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011762:	4b23      	ldr	r3, [pc, #140]	; (80117f0 <xTaskResumeAll+0x128>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011768:	429a      	cmp	r2, r3
 801176a:	d302      	bcc.n	8011772 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801176c:	4b21      	ldr	r3, [pc, #132]	; (80117f4 <xTaskResumeAll+0x12c>)
 801176e:	2201      	movs	r2, #1
 8011770:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011772:	4b1c      	ldr	r3, [pc, #112]	; (80117e4 <xTaskResumeAll+0x11c>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d1cc      	bne.n	8011714 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d001      	beq.n	8011784 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011780:	f000 fbd2 	bl	8011f28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011784:	4b1c      	ldr	r3, [pc, #112]	; (80117f8 <xTaskResumeAll+0x130>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d010      	beq.n	80117b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011790:	f000 f858 	bl	8011844 <xTaskIncrementTick>
 8011794:	4603      	mov	r3, r0
 8011796:	2b00      	cmp	r3, #0
 8011798:	d002      	beq.n	80117a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801179a:	4b16      	ldr	r3, [pc, #88]	; (80117f4 <xTaskResumeAll+0x12c>)
 801179c:	2201      	movs	r2, #1
 801179e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	3b01      	subs	r3, #1
 80117a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d1f1      	bne.n	8011790 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80117ac:	4b12      	ldr	r3, [pc, #72]	; (80117f8 <xTaskResumeAll+0x130>)
 80117ae:	2200      	movs	r2, #0
 80117b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80117b2:	4b10      	ldr	r3, [pc, #64]	; (80117f4 <xTaskResumeAll+0x12c>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d009      	beq.n	80117ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80117ba:	2301      	movs	r3, #1
 80117bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80117be:	4b0f      	ldr	r3, [pc, #60]	; (80117fc <xTaskResumeAll+0x134>)
 80117c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117c4:	601a      	str	r2, [r3, #0]
 80117c6:	f3bf 8f4f 	dsb	sy
 80117ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80117ce:	f000 ff61 	bl	8012694 <vPortExitCritical>

	return xAlreadyYielded;
 80117d2:	68bb      	ldr	r3, [r7, #8]
}
 80117d4:	4618      	mov	r0, r3
 80117d6:	3710      	adds	r7, #16
 80117d8:	46bd      	mov	sp, r7
 80117da:	bd80      	pop	{r7, pc}
 80117dc:	20000c8c 	.word	0x20000c8c
 80117e0:	20000c64 	.word	0x20000c64
 80117e4:	20000c24 	.word	0x20000c24
 80117e8:	20000c6c 	.word	0x20000c6c
 80117ec:	20000b68 	.word	0x20000b68
 80117f0:	20000b64 	.word	0x20000b64
 80117f4:	20000c78 	.word	0x20000c78
 80117f8:	20000c74 	.word	0x20000c74
 80117fc:	e000ed04 	.word	0xe000ed04

08011800 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011800:	b480      	push	{r7}
 8011802:	b083      	sub	sp, #12
 8011804:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011806:	4b05      	ldr	r3, [pc, #20]	; (801181c <xTaskGetTickCount+0x1c>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801180c:	687b      	ldr	r3, [r7, #4]
}
 801180e:	4618      	mov	r0, r3
 8011810:	370c      	adds	r7, #12
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr
 801181a:	bf00      	nop
 801181c:	20000c68 	.word	0x20000c68

08011820 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b082      	sub	sp, #8
 8011824:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011826:	f000 ffe7 	bl	80127f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801182a:	2300      	movs	r3, #0
 801182c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801182e:	4b04      	ldr	r3, [pc, #16]	; (8011840 <xTaskGetTickCountFromISR+0x20>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011834:	683b      	ldr	r3, [r7, #0]
}
 8011836:	4618      	mov	r0, r3
 8011838:	3708      	adds	r7, #8
 801183a:	46bd      	mov	sp, r7
 801183c:	bd80      	pop	{r7, pc}
 801183e:	bf00      	nop
 8011840:	20000c68 	.word	0x20000c68

08011844 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b086      	sub	sp, #24
 8011848:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801184a:	2300      	movs	r3, #0
 801184c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801184e:	4b4e      	ldr	r3, [pc, #312]	; (8011988 <xTaskIncrementTick+0x144>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	2b00      	cmp	r3, #0
 8011854:	f040 808e 	bne.w	8011974 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011858:	4b4c      	ldr	r3, [pc, #304]	; (801198c <xTaskIncrementTick+0x148>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	3301      	adds	r3, #1
 801185e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011860:	4a4a      	ldr	r2, [pc, #296]	; (801198c <xTaskIncrementTick+0x148>)
 8011862:	693b      	ldr	r3, [r7, #16]
 8011864:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011866:	693b      	ldr	r3, [r7, #16]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d120      	bne.n	80118ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801186c:	4b48      	ldr	r3, [pc, #288]	; (8011990 <xTaskIncrementTick+0x14c>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d00a      	beq.n	801188c <xTaskIncrementTick+0x48>
	__asm volatile
 8011876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801187a:	f383 8811 	msr	BASEPRI, r3
 801187e:	f3bf 8f6f 	isb	sy
 8011882:	f3bf 8f4f 	dsb	sy
 8011886:	603b      	str	r3, [r7, #0]
}
 8011888:	bf00      	nop
 801188a:	e7fe      	b.n	801188a <xTaskIncrementTick+0x46>
 801188c:	4b40      	ldr	r3, [pc, #256]	; (8011990 <xTaskIncrementTick+0x14c>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	60fb      	str	r3, [r7, #12]
 8011892:	4b40      	ldr	r3, [pc, #256]	; (8011994 <xTaskIncrementTick+0x150>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	4a3e      	ldr	r2, [pc, #248]	; (8011990 <xTaskIncrementTick+0x14c>)
 8011898:	6013      	str	r3, [r2, #0]
 801189a:	4a3e      	ldr	r2, [pc, #248]	; (8011994 <xTaskIncrementTick+0x150>)
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	6013      	str	r3, [r2, #0]
 80118a0:	4b3d      	ldr	r3, [pc, #244]	; (8011998 <xTaskIncrementTick+0x154>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	3301      	adds	r3, #1
 80118a6:	4a3c      	ldr	r2, [pc, #240]	; (8011998 <xTaskIncrementTick+0x154>)
 80118a8:	6013      	str	r3, [r2, #0]
 80118aa:	f000 fb3d 	bl	8011f28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80118ae:	4b3b      	ldr	r3, [pc, #236]	; (801199c <xTaskIncrementTick+0x158>)
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	693a      	ldr	r2, [r7, #16]
 80118b4:	429a      	cmp	r2, r3
 80118b6:	d348      	bcc.n	801194a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118b8:	4b35      	ldr	r3, [pc, #212]	; (8011990 <xTaskIncrementTick+0x14c>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d104      	bne.n	80118cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118c2:	4b36      	ldr	r3, [pc, #216]	; (801199c <xTaskIncrementTick+0x158>)
 80118c4:	f04f 32ff 	mov.w	r2, #4294967295
 80118c8:	601a      	str	r2, [r3, #0]
					break;
 80118ca:	e03e      	b.n	801194a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118cc:	4b30      	ldr	r3, [pc, #192]	; (8011990 <xTaskIncrementTick+0x14c>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	68db      	ldr	r3, [r3, #12]
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	685b      	ldr	r3, [r3, #4]
 80118da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80118dc:	693a      	ldr	r2, [r7, #16]
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d203      	bcs.n	80118ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80118e4:	4a2d      	ldr	r2, [pc, #180]	; (801199c <xTaskIncrementTick+0x158>)
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80118ea:	e02e      	b.n	801194a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	3304      	adds	r3, #4
 80118f0:	4618      	mov	r0, r3
 80118f2:	f7fe fcfa 	bl	80102ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d004      	beq.n	8011908 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	3318      	adds	r3, #24
 8011902:	4618      	mov	r0, r3
 8011904:	f7fe fcf1 	bl	80102ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801190c:	2201      	movs	r2, #1
 801190e:	409a      	lsls	r2, r3
 8011910:	4b23      	ldr	r3, [pc, #140]	; (80119a0 <xTaskIncrementTick+0x15c>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	4313      	orrs	r3, r2
 8011916:	4a22      	ldr	r2, [pc, #136]	; (80119a0 <xTaskIncrementTick+0x15c>)
 8011918:	6013      	str	r3, [r2, #0]
 801191a:	68bb      	ldr	r3, [r7, #8]
 801191c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801191e:	4613      	mov	r3, r2
 8011920:	009b      	lsls	r3, r3, #2
 8011922:	4413      	add	r3, r2
 8011924:	009b      	lsls	r3, r3, #2
 8011926:	4a1f      	ldr	r2, [pc, #124]	; (80119a4 <xTaskIncrementTick+0x160>)
 8011928:	441a      	add	r2, r3
 801192a:	68bb      	ldr	r3, [r7, #8]
 801192c:	3304      	adds	r3, #4
 801192e:	4619      	mov	r1, r3
 8011930:	4610      	mov	r0, r2
 8011932:	f7fe fc7d 	bl	8010230 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801193a:	4b1b      	ldr	r3, [pc, #108]	; (80119a8 <xTaskIncrementTick+0x164>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011940:	429a      	cmp	r2, r3
 8011942:	d3b9      	bcc.n	80118b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011944:	2301      	movs	r3, #1
 8011946:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011948:	e7b6      	b.n	80118b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801194a:	4b17      	ldr	r3, [pc, #92]	; (80119a8 <xTaskIncrementTick+0x164>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011950:	4914      	ldr	r1, [pc, #80]	; (80119a4 <xTaskIncrementTick+0x160>)
 8011952:	4613      	mov	r3, r2
 8011954:	009b      	lsls	r3, r3, #2
 8011956:	4413      	add	r3, r2
 8011958:	009b      	lsls	r3, r3, #2
 801195a:	440b      	add	r3, r1
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	2b01      	cmp	r3, #1
 8011960:	d901      	bls.n	8011966 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8011962:	2301      	movs	r3, #1
 8011964:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011966:	4b11      	ldr	r3, [pc, #68]	; (80119ac <xTaskIncrementTick+0x168>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d007      	beq.n	801197e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801196e:	2301      	movs	r3, #1
 8011970:	617b      	str	r3, [r7, #20]
 8011972:	e004      	b.n	801197e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011974:	4b0e      	ldr	r3, [pc, #56]	; (80119b0 <xTaskIncrementTick+0x16c>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	3301      	adds	r3, #1
 801197a:	4a0d      	ldr	r2, [pc, #52]	; (80119b0 <xTaskIncrementTick+0x16c>)
 801197c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801197e:	697b      	ldr	r3, [r7, #20]
}
 8011980:	4618      	mov	r0, r3
 8011982:	3718      	adds	r7, #24
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}
 8011988:	20000c8c 	.word	0x20000c8c
 801198c:	20000c68 	.word	0x20000c68
 8011990:	20000c1c 	.word	0x20000c1c
 8011994:	20000c20 	.word	0x20000c20
 8011998:	20000c7c 	.word	0x20000c7c
 801199c:	20000c84 	.word	0x20000c84
 80119a0:	20000c6c 	.word	0x20000c6c
 80119a4:	20000b68 	.word	0x20000b68
 80119a8:	20000b64 	.word	0x20000b64
 80119ac:	20000c78 	.word	0x20000c78
 80119b0:	20000c74 	.word	0x20000c74

080119b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80119b4:	b480      	push	{r7}
 80119b6:	b087      	sub	sp, #28
 80119b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80119ba:	4b27      	ldr	r3, [pc, #156]	; (8011a58 <vTaskSwitchContext+0xa4>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d003      	beq.n	80119ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80119c2:	4b26      	ldr	r3, [pc, #152]	; (8011a5c <vTaskSwitchContext+0xa8>)
 80119c4:	2201      	movs	r2, #1
 80119c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80119c8:	e03f      	b.n	8011a4a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80119ca:	4b24      	ldr	r3, [pc, #144]	; (8011a5c <vTaskSwitchContext+0xa8>)
 80119cc:	2200      	movs	r2, #0
 80119ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119d0:	4b23      	ldr	r3, [pc, #140]	; (8011a60 <vTaskSwitchContext+0xac>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	fab3 f383 	clz	r3, r3
 80119dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80119de:	7afb      	ldrb	r3, [r7, #11]
 80119e0:	f1c3 031f 	rsb	r3, r3, #31
 80119e4:	617b      	str	r3, [r7, #20]
 80119e6:	491f      	ldr	r1, [pc, #124]	; (8011a64 <vTaskSwitchContext+0xb0>)
 80119e8:	697a      	ldr	r2, [r7, #20]
 80119ea:	4613      	mov	r3, r2
 80119ec:	009b      	lsls	r3, r3, #2
 80119ee:	4413      	add	r3, r2
 80119f0:	009b      	lsls	r3, r3, #2
 80119f2:	440b      	add	r3, r1
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d10a      	bne.n	8011a10 <vTaskSwitchContext+0x5c>
	__asm volatile
 80119fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119fe:	f383 8811 	msr	BASEPRI, r3
 8011a02:	f3bf 8f6f 	isb	sy
 8011a06:	f3bf 8f4f 	dsb	sy
 8011a0a:	607b      	str	r3, [r7, #4]
}
 8011a0c:	bf00      	nop
 8011a0e:	e7fe      	b.n	8011a0e <vTaskSwitchContext+0x5a>
 8011a10:	697a      	ldr	r2, [r7, #20]
 8011a12:	4613      	mov	r3, r2
 8011a14:	009b      	lsls	r3, r3, #2
 8011a16:	4413      	add	r3, r2
 8011a18:	009b      	lsls	r3, r3, #2
 8011a1a:	4a12      	ldr	r2, [pc, #72]	; (8011a64 <vTaskSwitchContext+0xb0>)
 8011a1c:	4413      	add	r3, r2
 8011a1e:	613b      	str	r3, [r7, #16]
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	685b      	ldr	r3, [r3, #4]
 8011a24:	685a      	ldr	r2, [r3, #4]
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	605a      	str	r2, [r3, #4]
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	685a      	ldr	r2, [r3, #4]
 8011a2e:	693b      	ldr	r3, [r7, #16]
 8011a30:	3308      	adds	r3, #8
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d104      	bne.n	8011a40 <vTaskSwitchContext+0x8c>
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	685a      	ldr	r2, [r3, #4]
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	605a      	str	r2, [r3, #4]
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	68db      	ldr	r3, [r3, #12]
 8011a46:	4a08      	ldr	r2, [pc, #32]	; (8011a68 <vTaskSwitchContext+0xb4>)
 8011a48:	6013      	str	r3, [r2, #0]
}
 8011a4a:	bf00      	nop
 8011a4c:	371c      	adds	r7, #28
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a54:	4770      	bx	lr
 8011a56:	bf00      	nop
 8011a58:	20000c8c 	.word	0x20000c8c
 8011a5c:	20000c78 	.word	0x20000c78
 8011a60:	20000c6c 	.word	0x20000c6c
 8011a64:	20000b68 	.word	0x20000b68
 8011a68:	20000b64 	.word	0x20000b64

08011a6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b084      	sub	sp, #16
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d10a      	bne.n	8011a92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a80:	f383 8811 	msr	BASEPRI, r3
 8011a84:	f3bf 8f6f 	isb	sy
 8011a88:	f3bf 8f4f 	dsb	sy
 8011a8c:	60fb      	str	r3, [r7, #12]
}
 8011a8e:	bf00      	nop
 8011a90:	e7fe      	b.n	8011a90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011a92:	4b07      	ldr	r3, [pc, #28]	; (8011ab0 <vTaskPlaceOnEventList+0x44>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	3318      	adds	r3, #24
 8011a98:	4619      	mov	r1, r3
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f7fe fbec 	bl	8010278 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011aa0:	2101      	movs	r1, #1
 8011aa2:	6838      	ldr	r0, [r7, #0]
 8011aa4:	f000 fc34 	bl	8012310 <prvAddCurrentTaskToDelayedList>
}
 8011aa8:	bf00      	nop
 8011aaa:	3710      	adds	r7, #16
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}
 8011ab0:	20000b64 	.word	0x20000b64

08011ab4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b086      	sub	sp, #24
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	60f8      	str	r0, [r7, #12]
 8011abc:	60b9      	str	r1, [r7, #8]
 8011abe:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d10a      	bne.n	8011adc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8011ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aca:	f383 8811 	msr	BASEPRI, r3
 8011ace:	f3bf 8f6f 	isb	sy
 8011ad2:	f3bf 8f4f 	dsb	sy
 8011ad6:	617b      	str	r3, [r7, #20]
}
 8011ad8:	bf00      	nop
 8011ada:	e7fe      	b.n	8011ada <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8011adc:	4b11      	ldr	r3, [pc, #68]	; (8011b24 <vTaskPlaceOnUnorderedEventList+0x70>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d10a      	bne.n	8011afa <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8011ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae8:	f383 8811 	msr	BASEPRI, r3
 8011aec:	f3bf 8f6f 	isb	sy
 8011af0:	f3bf 8f4f 	dsb	sy
 8011af4:	613b      	str	r3, [r7, #16]
}
 8011af6:	bf00      	nop
 8011af8:	e7fe      	b.n	8011af8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011afa:	4b0b      	ldr	r3, [pc, #44]	; (8011b28 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	68ba      	ldr	r2, [r7, #8]
 8011b00:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8011b04:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011b06:	4b08      	ldr	r3, [pc, #32]	; (8011b28 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	3318      	adds	r3, #24
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	68f8      	ldr	r0, [r7, #12]
 8011b10:	f7fe fb8e 	bl	8010230 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011b14:	2101      	movs	r1, #1
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f000 fbfa 	bl	8012310 <prvAddCurrentTaskToDelayedList>
}
 8011b1c:	bf00      	nop
 8011b1e:	3718      	adds	r7, #24
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}
 8011b24:	20000c8c 	.word	0x20000c8c
 8011b28:	20000b64 	.word	0x20000b64

08011b2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b086      	sub	sp, #24
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	68db      	ldr	r3, [r3, #12]
 8011b38:	68db      	ldr	r3, [r3, #12]
 8011b3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d10a      	bne.n	8011b58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b46:	f383 8811 	msr	BASEPRI, r3
 8011b4a:	f3bf 8f6f 	isb	sy
 8011b4e:	f3bf 8f4f 	dsb	sy
 8011b52:	60fb      	str	r3, [r7, #12]
}
 8011b54:	bf00      	nop
 8011b56:	e7fe      	b.n	8011b56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	3318      	adds	r3, #24
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f7fe fbc4 	bl	80102ea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b62:	4b1d      	ldr	r3, [pc, #116]	; (8011bd8 <xTaskRemoveFromEventList+0xac>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d11c      	bne.n	8011ba4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	3304      	adds	r3, #4
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7fe fbbb 	bl	80102ea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b78:	2201      	movs	r2, #1
 8011b7a:	409a      	lsls	r2, r3
 8011b7c:	4b17      	ldr	r3, [pc, #92]	; (8011bdc <xTaskRemoveFromEventList+0xb0>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	4313      	orrs	r3, r2
 8011b82:	4a16      	ldr	r2, [pc, #88]	; (8011bdc <xTaskRemoveFromEventList+0xb0>)
 8011b84:	6013      	str	r3, [r2, #0]
 8011b86:	693b      	ldr	r3, [r7, #16]
 8011b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b8a:	4613      	mov	r3, r2
 8011b8c:	009b      	lsls	r3, r3, #2
 8011b8e:	4413      	add	r3, r2
 8011b90:	009b      	lsls	r3, r3, #2
 8011b92:	4a13      	ldr	r2, [pc, #76]	; (8011be0 <xTaskRemoveFromEventList+0xb4>)
 8011b94:	441a      	add	r2, r3
 8011b96:	693b      	ldr	r3, [r7, #16]
 8011b98:	3304      	adds	r3, #4
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	4610      	mov	r0, r2
 8011b9e:	f7fe fb47 	bl	8010230 <vListInsertEnd>
 8011ba2:	e005      	b.n	8011bb0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	3318      	adds	r3, #24
 8011ba8:	4619      	mov	r1, r3
 8011baa:	480e      	ldr	r0, [pc, #56]	; (8011be4 <xTaskRemoveFromEventList+0xb8>)
 8011bac:	f7fe fb40 	bl	8010230 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bb4:	4b0c      	ldr	r3, [pc, #48]	; (8011be8 <xTaskRemoveFromEventList+0xbc>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d905      	bls.n	8011bca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011bc2:	4b0a      	ldr	r3, [pc, #40]	; (8011bec <xTaskRemoveFromEventList+0xc0>)
 8011bc4:	2201      	movs	r2, #1
 8011bc6:	601a      	str	r2, [r3, #0]
 8011bc8:	e001      	b.n	8011bce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011bce:	697b      	ldr	r3, [r7, #20]
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3718      	adds	r7, #24
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	20000c8c 	.word	0x20000c8c
 8011bdc:	20000c6c 	.word	0x20000c6c
 8011be0:	20000b68 	.word	0x20000b68
 8011be4:	20000c24 	.word	0x20000c24
 8011be8:	20000b64 	.word	0x20000b64
 8011bec:	20000c78 	.word	0x20000c78

08011bf0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b086      	sub	sp, #24
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8011bfa:	4b29      	ldr	r3, [pc, #164]	; (8011ca0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d10a      	bne.n	8011c18 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8011c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c06:	f383 8811 	msr	BASEPRI, r3
 8011c0a:	f3bf 8f6f 	isb	sy
 8011c0e:	f3bf 8f4f 	dsb	sy
 8011c12:	613b      	str	r3, [r7, #16]
}
 8011c14:	bf00      	nop
 8011c16:	e7fe      	b.n	8011c16 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	68db      	ldr	r3, [r3, #12]
 8011c26:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d10a      	bne.n	8011c44 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8011c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c32:	f383 8811 	msr	BASEPRI, r3
 8011c36:	f3bf 8f6f 	isb	sy
 8011c3a:	f3bf 8f4f 	dsb	sy
 8011c3e:	60fb      	str	r3, [r7, #12]
}
 8011c40:	bf00      	nop
 8011c42:	e7fe      	b.n	8011c42 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f7fe fb50 	bl	80102ea <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	3304      	adds	r3, #4
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f7fe fb4b 	bl	80102ea <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c58:	2201      	movs	r2, #1
 8011c5a:	409a      	lsls	r2, r3
 8011c5c:	4b11      	ldr	r3, [pc, #68]	; (8011ca4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	4313      	orrs	r3, r2
 8011c62:	4a10      	ldr	r2, [pc, #64]	; (8011ca4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011c64:	6013      	str	r3, [r2, #0]
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c6a:	4613      	mov	r3, r2
 8011c6c:	009b      	lsls	r3, r3, #2
 8011c6e:	4413      	add	r3, r2
 8011c70:	009b      	lsls	r3, r3, #2
 8011c72:	4a0d      	ldr	r2, [pc, #52]	; (8011ca8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8011c74:	441a      	add	r2, r3
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	3304      	adds	r3, #4
 8011c7a:	4619      	mov	r1, r3
 8011c7c:	4610      	mov	r0, r2
 8011c7e:	f7fe fad7 	bl	8010230 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c86:	4b09      	ldr	r3, [pc, #36]	; (8011cac <vTaskRemoveFromUnorderedEventList+0xbc>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c8c:	429a      	cmp	r2, r3
 8011c8e:	d902      	bls.n	8011c96 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8011c90:	4b07      	ldr	r3, [pc, #28]	; (8011cb0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011c92:	2201      	movs	r2, #1
 8011c94:	601a      	str	r2, [r3, #0]
	}
}
 8011c96:	bf00      	nop
 8011c98:	3718      	adds	r7, #24
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}
 8011c9e:	bf00      	nop
 8011ca0:	20000c8c 	.word	0x20000c8c
 8011ca4:	20000c6c 	.word	0x20000c6c
 8011ca8:	20000b68 	.word	0x20000b68
 8011cac:	20000b64 	.word	0x20000b64
 8011cb0:	20000c78 	.word	0x20000c78

08011cb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011cb4:	b480      	push	{r7}
 8011cb6:	b083      	sub	sp, #12
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011cbc:	4b06      	ldr	r3, [pc, #24]	; (8011cd8 <vTaskInternalSetTimeOutState+0x24>)
 8011cbe:	681a      	ldr	r2, [r3, #0]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011cc4:	4b05      	ldr	r3, [pc, #20]	; (8011cdc <vTaskInternalSetTimeOutState+0x28>)
 8011cc6:	681a      	ldr	r2, [r3, #0]
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	605a      	str	r2, [r3, #4]
}
 8011ccc:	bf00      	nop
 8011cce:	370c      	adds	r7, #12
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr
 8011cd8:	20000c7c 	.word	0x20000c7c
 8011cdc:	20000c68 	.word	0x20000c68

08011ce0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b088      	sub	sp, #32
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d10a      	bne.n	8011d06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf4:	f383 8811 	msr	BASEPRI, r3
 8011cf8:	f3bf 8f6f 	isb	sy
 8011cfc:	f3bf 8f4f 	dsb	sy
 8011d00:	613b      	str	r3, [r7, #16]
}
 8011d02:	bf00      	nop
 8011d04:	e7fe      	b.n	8011d04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d10a      	bne.n	8011d22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d10:	f383 8811 	msr	BASEPRI, r3
 8011d14:	f3bf 8f6f 	isb	sy
 8011d18:	f3bf 8f4f 	dsb	sy
 8011d1c:	60fb      	str	r3, [r7, #12]
}
 8011d1e:	bf00      	nop
 8011d20:	e7fe      	b.n	8011d20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011d22:	f000 fc87 	bl	8012634 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011d26:	4b1d      	ldr	r3, [pc, #116]	; (8011d9c <xTaskCheckForTimeOut+0xbc>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	69ba      	ldr	r2, [r7, #24]
 8011d32:	1ad3      	subs	r3, r2, r3
 8011d34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d3e:	d102      	bne.n	8011d46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011d40:	2300      	movs	r3, #0
 8011d42:	61fb      	str	r3, [r7, #28]
 8011d44:	e023      	b.n	8011d8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681a      	ldr	r2, [r3, #0]
 8011d4a:	4b15      	ldr	r3, [pc, #84]	; (8011da0 <xTaskCheckForTimeOut+0xc0>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d007      	beq.n	8011d62 <xTaskCheckForTimeOut+0x82>
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	69ba      	ldr	r2, [r7, #24]
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	d302      	bcc.n	8011d62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	61fb      	str	r3, [r7, #28]
 8011d60:	e015      	b.n	8011d8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	697a      	ldr	r2, [r7, #20]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d20b      	bcs.n	8011d84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	681a      	ldr	r2, [r3, #0]
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	1ad2      	subs	r2, r2, r3
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f7ff ff9b 	bl	8011cb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	61fb      	str	r3, [r7, #28]
 8011d82:	e004      	b.n	8011d8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	2200      	movs	r2, #0
 8011d88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011d8e:	f000 fc81 	bl	8012694 <vPortExitCritical>

	return xReturn;
 8011d92:	69fb      	ldr	r3, [r7, #28]
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	3720      	adds	r7, #32
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}
 8011d9c:	20000c68 	.word	0x20000c68
 8011da0:	20000c7c 	.word	0x20000c7c

08011da4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011da4:	b480      	push	{r7}
 8011da6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011da8:	4b03      	ldr	r3, [pc, #12]	; (8011db8 <vTaskMissedYield+0x14>)
 8011daa:	2201      	movs	r2, #1
 8011dac:	601a      	str	r2, [r3, #0]
}
 8011dae:	bf00      	nop
 8011db0:	46bd      	mov	sp, r7
 8011db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db6:	4770      	bx	lr
 8011db8:	20000c78 	.word	0x20000c78

08011dbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b082      	sub	sp, #8
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011dc4:	f000 f852 	bl	8011e6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011dc8:	4b06      	ldr	r3, [pc, #24]	; (8011de4 <prvIdleTask+0x28>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2b01      	cmp	r3, #1
 8011dce:	d9f9      	bls.n	8011dc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011dd0:	4b05      	ldr	r3, [pc, #20]	; (8011de8 <prvIdleTask+0x2c>)
 8011dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dd6:	601a      	str	r2, [r3, #0]
 8011dd8:	f3bf 8f4f 	dsb	sy
 8011ddc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011de0:	e7f0      	b.n	8011dc4 <prvIdleTask+0x8>
 8011de2:	bf00      	nop
 8011de4:	20000b68 	.word	0x20000b68
 8011de8:	e000ed04 	.word	0xe000ed04

08011dec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011df2:	2300      	movs	r3, #0
 8011df4:	607b      	str	r3, [r7, #4]
 8011df6:	e00c      	b.n	8011e12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	4613      	mov	r3, r2
 8011dfc:	009b      	lsls	r3, r3, #2
 8011dfe:	4413      	add	r3, r2
 8011e00:	009b      	lsls	r3, r3, #2
 8011e02:	4a12      	ldr	r2, [pc, #72]	; (8011e4c <prvInitialiseTaskLists+0x60>)
 8011e04:	4413      	add	r3, r2
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7fe f9e5 	bl	80101d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	3301      	adds	r3, #1
 8011e10:	607b      	str	r3, [r7, #4]
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2b06      	cmp	r3, #6
 8011e16:	d9ef      	bls.n	8011df8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011e18:	480d      	ldr	r0, [pc, #52]	; (8011e50 <prvInitialiseTaskLists+0x64>)
 8011e1a:	f7fe f9dc 	bl	80101d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011e1e:	480d      	ldr	r0, [pc, #52]	; (8011e54 <prvInitialiseTaskLists+0x68>)
 8011e20:	f7fe f9d9 	bl	80101d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011e24:	480c      	ldr	r0, [pc, #48]	; (8011e58 <prvInitialiseTaskLists+0x6c>)
 8011e26:	f7fe f9d6 	bl	80101d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011e2a:	480c      	ldr	r0, [pc, #48]	; (8011e5c <prvInitialiseTaskLists+0x70>)
 8011e2c:	f7fe f9d3 	bl	80101d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011e30:	480b      	ldr	r0, [pc, #44]	; (8011e60 <prvInitialiseTaskLists+0x74>)
 8011e32:	f7fe f9d0 	bl	80101d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011e36:	4b0b      	ldr	r3, [pc, #44]	; (8011e64 <prvInitialiseTaskLists+0x78>)
 8011e38:	4a05      	ldr	r2, [pc, #20]	; (8011e50 <prvInitialiseTaskLists+0x64>)
 8011e3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011e3c:	4b0a      	ldr	r3, [pc, #40]	; (8011e68 <prvInitialiseTaskLists+0x7c>)
 8011e3e:	4a05      	ldr	r2, [pc, #20]	; (8011e54 <prvInitialiseTaskLists+0x68>)
 8011e40:	601a      	str	r2, [r3, #0]
}
 8011e42:	bf00      	nop
 8011e44:	3708      	adds	r7, #8
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}
 8011e4a:	bf00      	nop
 8011e4c:	20000b68 	.word	0x20000b68
 8011e50:	20000bf4 	.word	0x20000bf4
 8011e54:	20000c08 	.word	0x20000c08
 8011e58:	20000c24 	.word	0x20000c24
 8011e5c:	20000c38 	.word	0x20000c38
 8011e60:	20000c50 	.word	0x20000c50
 8011e64:	20000c1c 	.word	0x20000c1c
 8011e68:	20000c20 	.word	0x20000c20

08011e6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b082      	sub	sp, #8
 8011e70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011e72:	e019      	b.n	8011ea8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011e74:	f000 fbde 	bl	8012634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e78:	4b10      	ldr	r3, [pc, #64]	; (8011ebc <prvCheckTasksWaitingTermination+0x50>)
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	68db      	ldr	r3, [r3, #12]
 8011e7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	3304      	adds	r3, #4
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7fe fa30 	bl	80102ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011e8a:	4b0d      	ldr	r3, [pc, #52]	; (8011ec0 <prvCheckTasksWaitingTermination+0x54>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	3b01      	subs	r3, #1
 8011e90:	4a0b      	ldr	r2, [pc, #44]	; (8011ec0 <prvCheckTasksWaitingTermination+0x54>)
 8011e92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011e94:	4b0b      	ldr	r3, [pc, #44]	; (8011ec4 <prvCheckTasksWaitingTermination+0x58>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	3b01      	subs	r3, #1
 8011e9a:	4a0a      	ldr	r2, [pc, #40]	; (8011ec4 <prvCheckTasksWaitingTermination+0x58>)
 8011e9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011e9e:	f000 fbf9 	bl	8012694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f000 f810 	bl	8011ec8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011ea8:	4b06      	ldr	r3, [pc, #24]	; (8011ec4 <prvCheckTasksWaitingTermination+0x58>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d1e1      	bne.n	8011e74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011eb0:	bf00      	nop
 8011eb2:	bf00      	nop
 8011eb4:	3708      	adds	r7, #8
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	20000c38 	.word	0x20000c38
 8011ec0:	20000c64 	.word	0x20000c64
 8011ec4:	20000c4c 	.word	0x20000c4c

08011ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b084      	sub	sp, #16
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d108      	bne.n	8011eec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f000 fd96 	bl	8012a10 <vPortFree>
				vPortFree( pxTCB );
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f000 fd93 	bl	8012a10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011eea:	e018      	b.n	8011f1e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011ef2:	2b01      	cmp	r3, #1
 8011ef4:	d103      	bne.n	8011efe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f000 fd8a 	bl	8012a10 <vPortFree>
	}
 8011efc:	e00f      	b.n	8011f1e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011f04:	2b02      	cmp	r3, #2
 8011f06:	d00a      	beq.n	8011f1e <prvDeleteTCB+0x56>
	__asm volatile
 8011f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f0c:	f383 8811 	msr	BASEPRI, r3
 8011f10:	f3bf 8f6f 	isb	sy
 8011f14:	f3bf 8f4f 	dsb	sy
 8011f18:	60fb      	str	r3, [r7, #12]
}
 8011f1a:	bf00      	nop
 8011f1c:	e7fe      	b.n	8011f1c <prvDeleteTCB+0x54>
	}
 8011f1e:	bf00      	nop
 8011f20:	3710      	adds	r7, #16
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
	...

08011f28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011f28:	b480      	push	{r7}
 8011f2a:	b083      	sub	sp, #12
 8011f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f2e:	4b0c      	ldr	r3, [pc, #48]	; (8011f60 <prvResetNextTaskUnblockTime+0x38>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d104      	bne.n	8011f42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011f38:	4b0a      	ldr	r3, [pc, #40]	; (8011f64 <prvResetNextTaskUnblockTime+0x3c>)
 8011f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011f40:	e008      	b.n	8011f54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f42:	4b07      	ldr	r3, [pc, #28]	; (8011f60 <prvResetNextTaskUnblockTime+0x38>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	68db      	ldr	r3, [r3, #12]
 8011f4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	4a04      	ldr	r2, [pc, #16]	; (8011f64 <prvResetNextTaskUnblockTime+0x3c>)
 8011f52:	6013      	str	r3, [r2, #0]
}
 8011f54:	bf00      	nop
 8011f56:	370c      	adds	r7, #12
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr
 8011f60:	20000c1c 	.word	0x20000c1c
 8011f64:	20000c84 	.word	0x20000c84

08011f68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011f68:	b480      	push	{r7}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011f6e:	4b0b      	ldr	r3, [pc, #44]	; (8011f9c <xTaskGetSchedulerState+0x34>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d102      	bne.n	8011f7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011f76:	2301      	movs	r3, #1
 8011f78:	607b      	str	r3, [r7, #4]
 8011f7a:	e008      	b.n	8011f8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f7c:	4b08      	ldr	r3, [pc, #32]	; (8011fa0 <xTaskGetSchedulerState+0x38>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d102      	bne.n	8011f8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011f84:	2302      	movs	r3, #2
 8011f86:	607b      	str	r3, [r7, #4]
 8011f88:	e001      	b.n	8011f8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011f8e:	687b      	ldr	r3, [r7, #4]
	}
 8011f90:	4618      	mov	r0, r3
 8011f92:	370c      	adds	r7, #12
 8011f94:	46bd      	mov	sp, r7
 8011f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9a:	4770      	bx	lr
 8011f9c:	20000c70 	.word	0x20000c70
 8011fa0:	20000c8c 	.word	0x20000c8c

08011fa4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b084      	sub	sp, #16
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d05e      	beq.n	8012078 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fbe:	4b31      	ldr	r3, [pc, #196]	; (8012084 <xTaskPriorityInherit+0xe0>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d24e      	bcs.n	8012066 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	699b      	ldr	r3, [r3, #24]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	db06      	blt.n	8011fde <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fd0:	4b2c      	ldr	r3, [pc, #176]	; (8012084 <xTaskPriorityInherit+0xe0>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fd6:	f1c3 0207 	rsb	r2, r3, #7
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011fde:	68bb      	ldr	r3, [r7, #8]
 8011fe0:	6959      	ldr	r1, [r3, #20]
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fe6:	4613      	mov	r3, r2
 8011fe8:	009b      	lsls	r3, r3, #2
 8011fea:	4413      	add	r3, r2
 8011fec:	009b      	lsls	r3, r3, #2
 8011fee:	4a26      	ldr	r2, [pc, #152]	; (8012088 <xTaskPriorityInherit+0xe4>)
 8011ff0:	4413      	add	r3, r2
 8011ff2:	4299      	cmp	r1, r3
 8011ff4:	d12f      	bne.n	8012056 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	3304      	adds	r3, #4
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7fe f975 	bl	80102ea <uxListRemove>
 8012000:	4603      	mov	r3, r0
 8012002:	2b00      	cmp	r3, #0
 8012004:	d10a      	bne.n	801201c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801200a:	2201      	movs	r2, #1
 801200c:	fa02 f303 	lsl.w	r3, r2, r3
 8012010:	43da      	mvns	r2, r3
 8012012:	4b1e      	ldr	r3, [pc, #120]	; (801208c <xTaskPriorityInherit+0xe8>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	4013      	ands	r3, r2
 8012018:	4a1c      	ldr	r2, [pc, #112]	; (801208c <xTaskPriorityInherit+0xe8>)
 801201a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801201c:	4b19      	ldr	r3, [pc, #100]	; (8012084 <xTaskPriorityInherit+0xe0>)
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801202a:	2201      	movs	r2, #1
 801202c:	409a      	lsls	r2, r3
 801202e:	4b17      	ldr	r3, [pc, #92]	; (801208c <xTaskPriorityInherit+0xe8>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	4313      	orrs	r3, r2
 8012034:	4a15      	ldr	r2, [pc, #84]	; (801208c <xTaskPriorityInherit+0xe8>)
 8012036:	6013      	str	r3, [r2, #0]
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801203c:	4613      	mov	r3, r2
 801203e:	009b      	lsls	r3, r3, #2
 8012040:	4413      	add	r3, r2
 8012042:	009b      	lsls	r3, r3, #2
 8012044:	4a10      	ldr	r2, [pc, #64]	; (8012088 <xTaskPriorityInherit+0xe4>)
 8012046:	441a      	add	r2, r3
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	3304      	adds	r3, #4
 801204c:	4619      	mov	r1, r3
 801204e:	4610      	mov	r0, r2
 8012050:	f7fe f8ee 	bl	8010230 <vListInsertEnd>
 8012054:	e004      	b.n	8012060 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012056:	4b0b      	ldr	r3, [pc, #44]	; (8012084 <xTaskPriorityInherit+0xe0>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012060:	2301      	movs	r3, #1
 8012062:	60fb      	str	r3, [r7, #12]
 8012064:	e008      	b.n	8012078 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801206a:	4b06      	ldr	r3, [pc, #24]	; (8012084 <xTaskPriorityInherit+0xe0>)
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012070:	429a      	cmp	r2, r3
 8012072:	d201      	bcs.n	8012078 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012074:	2301      	movs	r3, #1
 8012076:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012078:	68fb      	ldr	r3, [r7, #12]
	}
 801207a:	4618      	mov	r0, r3
 801207c:	3710      	adds	r7, #16
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
 8012082:	bf00      	nop
 8012084:	20000b64 	.word	0x20000b64
 8012088:	20000b68 	.word	0x20000b68
 801208c:	20000c6c 	.word	0x20000c6c

08012090 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012090:	b580      	push	{r7, lr}
 8012092:	b086      	sub	sp, #24
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801209c:	2300      	movs	r3, #0
 801209e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d06e      	beq.n	8012184 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80120a6:	4b3a      	ldr	r3, [pc, #232]	; (8012190 <xTaskPriorityDisinherit+0x100>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	693a      	ldr	r2, [r7, #16]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d00a      	beq.n	80120c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80120b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b4:	f383 8811 	msr	BASEPRI, r3
 80120b8:	f3bf 8f6f 	isb	sy
 80120bc:	f3bf 8f4f 	dsb	sy
 80120c0:	60fb      	str	r3, [r7, #12]
}
 80120c2:	bf00      	nop
 80120c4:	e7fe      	b.n	80120c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d10a      	bne.n	80120e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80120ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d2:	f383 8811 	msr	BASEPRI, r3
 80120d6:	f3bf 8f6f 	isb	sy
 80120da:	f3bf 8f4f 	dsb	sy
 80120de:	60bb      	str	r3, [r7, #8]
}
 80120e0:	bf00      	nop
 80120e2:	e7fe      	b.n	80120e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80120e4:	693b      	ldr	r3, [r7, #16]
 80120e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80120e8:	1e5a      	subs	r2, r3, #1
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d044      	beq.n	8012184 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d140      	bne.n	8012184 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	3304      	adds	r3, #4
 8012106:	4618      	mov	r0, r3
 8012108:	f7fe f8ef 	bl	80102ea <uxListRemove>
 801210c:	4603      	mov	r3, r0
 801210e:	2b00      	cmp	r3, #0
 8012110:	d115      	bne.n	801213e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012116:	491f      	ldr	r1, [pc, #124]	; (8012194 <xTaskPriorityDisinherit+0x104>)
 8012118:	4613      	mov	r3, r2
 801211a:	009b      	lsls	r3, r3, #2
 801211c:	4413      	add	r3, r2
 801211e:	009b      	lsls	r3, r3, #2
 8012120:	440b      	add	r3, r1
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d10a      	bne.n	801213e <xTaskPriorityDisinherit+0xae>
 8012128:	693b      	ldr	r3, [r7, #16]
 801212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801212c:	2201      	movs	r2, #1
 801212e:	fa02 f303 	lsl.w	r3, r2, r3
 8012132:	43da      	mvns	r2, r3
 8012134:	4b18      	ldr	r3, [pc, #96]	; (8012198 <xTaskPriorityDisinherit+0x108>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	4013      	ands	r3, r2
 801213a:	4a17      	ldr	r2, [pc, #92]	; (8012198 <xTaskPriorityDisinherit+0x108>)
 801213c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801214a:	f1c3 0207 	rsb	r2, r3, #7
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012156:	2201      	movs	r2, #1
 8012158:	409a      	lsls	r2, r3
 801215a:	4b0f      	ldr	r3, [pc, #60]	; (8012198 <xTaskPriorityDisinherit+0x108>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	4313      	orrs	r3, r2
 8012160:	4a0d      	ldr	r2, [pc, #52]	; (8012198 <xTaskPriorityDisinherit+0x108>)
 8012162:	6013      	str	r3, [r2, #0]
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012168:	4613      	mov	r3, r2
 801216a:	009b      	lsls	r3, r3, #2
 801216c:	4413      	add	r3, r2
 801216e:	009b      	lsls	r3, r3, #2
 8012170:	4a08      	ldr	r2, [pc, #32]	; (8012194 <xTaskPriorityDisinherit+0x104>)
 8012172:	441a      	add	r2, r3
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	3304      	adds	r3, #4
 8012178:	4619      	mov	r1, r3
 801217a:	4610      	mov	r0, r2
 801217c:	f7fe f858 	bl	8010230 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012180:	2301      	movs	r3, #1
 8012182:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012184:	697b      	ldr	r3, [r7, #20]
	}
 8012186:	4618      	mov	r0, r3
 8012188:	3718      	adds	r7, #24
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}
 801218e:	bf00      	nop
 8012190:	20000b64 	.word	0x20000b64
 8012194:	20000b68 	.word	0x20000b68
 8012198:	20000c6c 	.word	0x20000c6c

0801219c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801219c:	b580      	push	{r7, lr}
 801219e:	b088      	sub	sp, #32
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80121aa:	2301      	movs	r3, #1
 80121ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d077      	beq.n	80122a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80121b4:	69bb      	ldr	r3, [r7, #24]
 80121b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d10a      	bne.n	80121d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80121bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c0:	f383 8811 	msr	BASEPRI, r3
 80121c4:	f3bf 8f6f 	isb	sy
 80121c8:	f3bf 8f4f 	dsb	sy
 80121cc:	60fb      	str	r3, [r7, #12]
}
 80121ce:	bf00      	nop
 80121d0:	e7fe      	b.n	80121d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80121d2:	69bb      	ldr	r3, [r7, #24]
 80121d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121d6:	683a      	ldr	r2, [r7, #0]
 80121d8:	429a      	cmp	r2, r3
 80121da:	d902      	bls.n	80121e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	61fb      	str	r3, [r7, #28]
 80121e0:	e002      	b.n	80121e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80121e8:	69bb      	ldr	r3, [r7, #24]
 80121ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ec:	69fa      	ldr	r2, [r7, #28]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d058      	beq.n	80122a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80121f2:	69bb      	ldr	r3, [r7, #24]
 80121f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80121f6:	697a      	ldr	r2, [r7, #20]
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d153      	bne.n	80122a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80121fc:	4b2b      	ldr	r3, [pc, #172]	; (80122ac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	69ba      	ldr	r2, [r7, #24]
 8012202:	429a      	cmp	r2, r3
 8012204:	d10a      	bne.n	801221c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8012206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801220a:	f383 8811 	msr	BASEPRI, r3
 801220e:	f3bf 8f6f 	isb	sy
 8012212:	f3bf 8f4f 	dsb	sy
 8012216:	60bb      	str	r3, [r7, #8]
}
 8012218:	bf00      	nop
 801221a:	e7fe      	b.n	801221a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012220:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012222:	69bb      	ldr	r3, [r7, #24]
 8012224:	69fa      	ldr	r2, [r7, #28]
 8012226:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012228:	69bb      	ldr	r3, [r7, #24]
 801222a:	699b      	ldr	r3, [r3, #24]
 801222c:	2b00      	cmp	r3, #0
 801222e:	db04      	blt.n	801223a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012230:	69fb      	ldr	r3, [r7, #28]
 8012232:	f1c3 0207 	rsb	r2, r3, #7
 8012236:	69bb      	ldr	r3, [r7, #24]
 8012238:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801223a:	69bb      	ldr	r3, [r7, #24]
 801223c:	6959      	ldr	r1, [r3, #20]
 801223e:	693a      	ldr	r2, [r7, #16]
 8012240:	4613      	mov	r3, r2
 8012242:	009b      	lsls	r3, r3, #2
 8012244:	4413      	add	r3, r2
 8012246:	009b      	lsls	r3, r3, #2
 8012248:	4a19      	ldr	r2, [pc, #100]	; (80122b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801224a:	4413      	add	r3, r2
 801224c:	4299      	cmp	r1, r3
 801224e:	d129      	bne.n	80122a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	3304      	adds	r3, #4
 8012254:	4618      	mov	r0, r3
 8012256:	f7fe f848 	bl	80102ea <uxListRemove>
 801225a:	4603      	mov	r3, r0
 801225c:	2b00      	cmp	r3, #0
 801225e:	d10a      	bne.n	8012276 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012260:	69bb      	ldr	r3, [r7, #24]
 8012262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012264:	2201      	movs	r2, #1
 8012266:	fa02 f303 	lsl.w	r3, r2, r3
 801226a:	43da      	mvns	r2, r3
 801226c:	4b11      	ldr	r3, [pc, #68]	; (80122b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	4013      	ands	r3, r2
 8012272:	4a10      	ldr	r2, [pc, #64]	; (80122b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012274:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012276:	69bb      	ldr	r3, [r7, #24]
 8012278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801227a:	2201      	movs	r2, #1
 801227c:	409a      	lsls	r2, r3
 801227e:	4b0d      	ldr	r3, [pc, #52]	; (80122b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	4313      	orrs	r3, r2
 8012284:	4a0b      	ldr	r2, [pc, #44]	; (80122b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012286:	6013      	str	r3, [r2, #0]
 8012288:	69bb      	ldr	r3, [r7, #24]
 801228a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801228c:	4613      	mov	r3, r2
 801228e:	009b      	lsls	r3, r3, #2
 8012290:	4413      	add	r3, r2
 8012292:	009b      	lsls	r3, r3, #2
 8012294:	4a06      	ldr	r2, [pc, #24]	; (80122b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8012296:	441a      	add	r2, r3
 8012298:	69bb      	ldr	r3, [r7, #24]
 801229a:	3304      	adds	r3, #4
 801229c:	4619      	mov	r1, r3
 801229e:	4610      	mov	r0, r2
 80122a0:	f7fd ffc6 	bl	8010230 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80122a4:	bf00      	nop
 80122a6:	3720      	adds	r7, #32
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	20000b64 	.word	0x20000b64
 80122b0:	20000b68 	.word	0x20000b68
 80122b4:	20000c6c 	.word	0x20000c6c

080122b8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80122b8:	b480      	push	{r7}
 80122ba:	b083      	sub	sp, #12
 80122bc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80122be:	4b09      	ldr	r3, [pc, #36]	; (80122e4 <uxTaskResetEventItemValue+0x2c>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	699b      	ldr	r3, [r3, #24]
 80122c4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122c6:	4b07      	ldr	r3, [pc, #28]	; (80122e4 <uxTaskResetEventItemValue+0x2c>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122cc:	4b05      	ldr	r3, [pc, #20]	; (80122e4 <uxTaskResetEventItemValue+0x2c>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	f1c2 0207 	rsb	r2, r2, #7
 80122d4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80122d6:	687b      	ldr	r3, [r7, #4]
}
 80122d8:	4618      	mov	r0, r3
 80122da:	370c      	adds	r7, #12
 80122dc:	46bd      	mov	sp, r7
 80122de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e2:	4770      	bx	lr
 80122e4:	20000b64 	.word	0x20000b64

080122e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80122e8:	b480      	push	{r7}
 80122ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80122ec:	4b07      	ldr	r3, [pc, #28]	; (801230c <pvTaskIncrementMutexHeldCount+0x24>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d004      	beq.n	80122fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80122f4:	4b05      	ldr	r3, [pc, #20]	; (801230c <pvTaskIncrementMutexHeldCount+0x24>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80122fa:	3201      	adds	r2, #1
 80122fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80122fe:	4b03      	ldr	r3, [pc, #12]	; (801230c <pvTaskIncrementMutexHeldCount+0x24>)
 8012300:	681b      	ldr	r3, [r3, #0]
	}
 8012302:	4618      	mov	r0, r3
 8012304:	46bd      	mov	sp, r7
 8012306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230a:	4770      	bx	lr
 801230c:	20000b64 	.word	0x20000b64

08012310 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b084      	sub	sp, #16
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801231a:	4b29      	ldr	r3, [pc, #164]	; (80123c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012320:	4b28      	ldr	r3, [pc, #160]	; (80123c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	3304      	adds	r3, #4
 8012326:	4618      	mov	r0, r3
 8012328:	f7fd ffdf 	bl	80102ea <uxListRemove>
 801232c:	4603      	mov	r3, r0
 801232e:	2b00      	cmp	r3, #0
 8012330:	d10b      	bne.n	801234a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012332:	4b24      	ldr	r3, [pc, #144]	; (80123c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012338:	2201      	movs	r2, #1
 801233a:	fa02 f303 	lsl.w	r3, r2, r3
 801233e:	43da      	mvns	r2, r3
 8012340:	4b21      	ldr	r3, [pc, #132]	; (80123c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	4013      	ands	r3, r2
 8012346:	4a20      	ldr	r2, [pc, #128]	; (80123c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012348:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012350:	d10a      	bne.n	8012368 <prvAddCurrentTaskToDelayedList+0x58>
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d007      	beq.n	8012368 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012358:	4b1a      	ldr	r3, [pc, #104]	; (80123c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	3304      	adds	r3, #4
 801235e:	4619      	mov	r1, r3
 8012360:	481a      	ldr	r0, [pc, #104]	; (80123cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8012362:	f7fd ff65 	bl	8010230 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012366:	e026      	b.n	80123b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012368:	68fa      	ldr	r2, [r7, #12]
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	4413      	add	r3, r2
 801236e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012370:	4b14      	ldr	r3, [pc, #80]	; (80123c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	68ba      	ldr	r2, [r7, #8]
 8012376:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012378:	68ba      	ldr	r2, [r7, #8]
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	429a      	cmp	r2, r3
 801237e:	d209      	bcs.n	8012394 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012380:	4b13      	ldr	r3, [pc, #76]	; (80123d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012382:	681a      	ldr	r2, [r3, #0]
 8012384:	4b0f      	ldr	r3, [pc, #60]	; (80123c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	3304      	adds	r3, #4
 801238a:	4619      	mov	r1, r3
 801238c:	4610      	mov	r0, r2
 801238e:	f7fd ff73 	bl	8010278 <vListInsert>
}
 8012392:	e010      	b.n	80123b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012394:	4b0f      	ldr	r3, [pc, #60]	; (80123d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012396:	681a      	ldr	r2, [r3, #0]
 8012398:	4b0a      	ldr	r3, [pc, #40]	; (80123c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	3304      	adds	r3, #4
 801239e:	4619      	mov	r1, r3
 80123a0:	4610      	mov	r0, r2
 80123a2:	f7fd ff69 	bl	8010278 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80123a6:	4b0c      	ldr	r3, [pc, #48]	; (80123d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	68ba      	ldr	r2, [r7, #8]
 80123ac:	429a      	cmp	r2, r3
 80123ae:	d202      	bcs.n	80123b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80123b0:	4a09      	ldr	r2, [pc, #36]	; (80123d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	6013      	str	r3, [r2, #0]
}
 80123b6:	bf00      	nop
 80123b8:	3710      	adds	r7, #16
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	20000c68 	.word	0x20000c68
 80123c4:	20000b64 	.word	0x20000b64
 80123c8:	20000c6c 	.word	0x20000c6c
 80123cc:	20000c50 	.word	0x20000c50
 80123d0:	20000c20 	.word	0x20000c20
 80123d4:	20000c1c 	.word	0x20000c1c
 80123d8:	20000c84 	.word	0x20000c84

080123dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80123dc:	b480      	push	{r7}
 80123de:	b085      	sub	sp, #20
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	3b04      	subs	r3, #4
 80123ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80123f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	3b04      	subs	r3, #4
 80123fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	f023 0201 	bic.w	r2, r3, #1
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	3b04      	subs	r3, #4
 801240a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801240c:	4a0c      	ldr	r2, [pc, #48]	; (8012440 <pxPortInitialiseStack+0x64>)
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	3b14      	subs	r3, #20
 8012416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	3b04      	subs	r3, #4
 8012422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	f06f 0202 	mvn.w	r2, #2
 801242a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	3b20      	subs	r3, #32
 8012430:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012432:	68fb      	ldr	r3, [r7, #12]
}
 8012434:	4618      	mov	r0, r3
 8012436:	3714      	adds	r7, #20
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr
 8012440:	08012445 	.word	0x08012445

08012444 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012444:	b480      	push	{r7}
 8012446:	b085      	sub	sp, #20
 8012448:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801244a:	2300      	movs	r3, #0
 801244c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801244e:	4b12      	ldr	r3, [pc, #72]	; (8012498 <prvTaskExitError+0x54>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012456:	d00a      	beq.n	801246e <prvTaskExitError+0x2a>
	__asm volatile
 8012458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801245c:	f383 8811 	msr	BASEPRI, r3
 8012460:	f3bf 8f6f 	isb	sy
 8012464:	f3bf 8f4f 	dsb	sy
 8012468:	60fb      	str	r3, [r7, #12]
}
 801246a:	bf00      	nop
 801246c:	e7fe      	b.n	801246c <prvTaskExitError+0x28>
	__asm volatile
 801246e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012472:	f383 8811 	msr	BASEPRI, r3
 8012476:	f3bf 8f6f 	isb	sy
 801247a:	f3bf 8f4f 	dsb	sy
 801247e:	60bb      	str	r3, [r7, #8]
}
 8012480:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012482:	bf00      	nop
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d0fc      	beq.n	8012484 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801248a:	bf00      	nop
 801248c:	bf00      	nop
 801248e:	3714      	adds	r7, #20
 8012490:	46bd      	mov	sp, r7
 8012492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012496:	4770      	bx	lr
 8012498:	2000001c 	.word	0x2000001c
 801249c:	00000000 	.word	0x00000000

080124a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80124a0:	4b07      	ldr	r3, [pc, #28]	; (80124c0 <pxCurrentTCBConst2>)
 80124a2:	6819      	ldr	r1, [r3, #0]
 80124a4:	6808      	ldr	r0, [r1, #0]
 80124a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124aa:	f380 8809 	msr	PSP, r0
 80124ae:	f3bf 8f6f 	isb	sy
 80124b2:	f04f 0000 	mov.w	r0, #0
 80124b6:	f380 8811 	msr	BASEPRI, r0
 80124ba:	4770      	bx	lr
 80124bc:	f3af 8000 	nop.w

080124c0 <pxCurrentTCBConst2>:
 80124c0:	20000b64 	.word	0x20000b64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80124c4:	bf00      	nop
 80124c6:	bf00      	nop

080124c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80124c8:	4808      	ldr	r0, [pc, #32]	; (80124ec <prvPortStartFirstTask+0x24>)
 80124ca:	6800      	ldr	r0, [r0, #0]
 80124cc:	6800      	ldr	r0, [r0, #0]
 80124ce:	f380 8808 	msr	MSP, r0
 80124d2:	f04f 0000 	mov.w	r0, #0
 80124d6:	f380 8814 	msr	CONTROL, r0
 80124da:	b662      	cpsie	i
 80124dc:	b661      	cpsie	f
 80124de:	f3bf 8f4f 	dsb	sy
 80124e2:	f3bf 8f6f 	isb	sy
 80124e6:	df00      	svc	0
 80124e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80124ea:	bf00      	nop
 80124ec:	e000ed08 	.word	0xe000ed08

080124f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b086      	sub	sp, #24
 80124f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80124f6:	4b46      	ldr	r3, [pc, #280]	; (8012610 <xPortStartScheduler+0x120>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	4a46      	ldr	r2, [pc, #280]	; (8012614 <xPortStartScheduler+0x124>)
 80124fc:	4293      	cmp	r3, r2
 80124fe:	d10a      	bne.n	8012516 <xPortStartScheduler+0x26>
	__asm volatile
 8012500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012504:	f383 8811 	msr	BASEPRI, r3
 8012508:	f3bf 8f6f 	isb	sy
 801250c:	f3bf 8f4f 	dsb	sy
 8012510:	613b      	str	r3, [r7, #16]
}
 8012512:	bf00      	nop
 8012514:	e7fe      	b.n	8012514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012516:	4b3e      	ldr	r3, [pc, #248]	; (8012610 <xPortStartScheduler+0x120>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	4a3f      	ldr	r2, [pc, #252]	; (8012618 <xPortStartScheduler+0x128>)
 801251c:	4293      	cmp	r3, r2
 801251e:	d10a      	bne.n	8012536 <xPortStartScheduler+0x46>
	__asm volatile
 8012520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012524:	f383 8811 	msr	BASEPRI, r3
 8012528:	f3bf 8f6f 	isb	sy
 801252c:	f3bf 8f4f 	dsb	sy
 8012530:	60fb      	str	r3, [r7, #12]
}
 8012532:	bf00      	nop
 8012534:	e7fe      	b.n	8012534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012536:	4b39      	ldr	r3, [pc, #228]	; (801261c <xPortStartScheduler+0x12c>)
 8012538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	781b      	ldrb	r3, [r3, #0]
 801253e:	b2db      	uxtb	r3, r3
 8012540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	22ff      	movs	r2, #255	; 0xff
 8012546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	b2db      	uxtb	r3, r3
 801254e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012550:	78fb      	ldrb	r3, [r7, #3]
 8012552:	b2db      	uxtb	r3, r3
 8012554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012558:	b2da      	uxtb	r2, r3
 801255a:	4b31      	ldr	r3, [pc, #196]	; (8012620 <xPortStartScheduler+0x130>)
 801255c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801255e:	4b31      	ldr	r3, [pc, #196]	; (8012624 <xPortStartScheduler+0x134>)
 8012560:	2207      	movs	r2, #7
 8012562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012564:	e009      	b.n	801257a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012566:	4b2f      	ldr	r3, [pc, #188]	; (8012624 <xPortStartScheduler+0x134>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	3b01      	subs	r3, #1
 801256c:	4a2d      	ldr	r2, [pc, #180]	; (8012624 <xPortStartScheduler+0x134>)
 801256e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012570:	78fb      	ldrb	r3, [r7, #3]
 8012572:	b2db      	uxtb	r3, r3
 8012574:	005b      	lsls	r3, r3, #1
 8012576:	b2db      	uxtb	r3, r3
 8012578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801257a:	78fb      	ldrb	r3, [r7, #3]
 801257c:	b2db      	uxtb	r3, r3
 801257e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012582:	2b80      	cmp	r3, #128	; 0x80
 8012584:	d0ef      	beq.n	8012566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012586:	4b27      	ldr	r3, [pc, #156]	; (8012624 <xPortStartScheduler+0x134>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	f1c3 0307 	rsb	r3, r3, #7
 801258e:	2b04      	cmp	r3, #4
 8012590:	d00a      	beq.n	80125a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8012592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012596:	f383 8811 	msr	BASEPRI, r3
 801259a:	f3bf 8f6f 	isb	sy
 801259e:	f3bf 8f4f 	dsb	sy
 80125a2:	60bb      	str	r3, [r7, #8]
}
 80125a4:	bf00      	nop
 80125a6:	e7fe      	b.n	80125a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80125a8:	4b1e      	ldr	r3, [pc, #120]	; (8012624 <xPortStartScheduler+0x134>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	021b      	lsls	r3, r3, #8
 80125ae:	4a1d      	ldr	r2, [pc, #116]	; (8012624 <xPortStartScheduler+0x134>)
 80125b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80125b2:	4b1c      	ldr	r3, [pc, #112]	; (8012624 <xPortStartScheduler+0x134>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80125ba:	4a1a      	ldr	r2, [pc, #104]	; (8012624 <xPortStartScheduler+0x134>)
 80125bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	b2da      	uxtb	r2, r3
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80125c6:	4b18      	ldr	r3, [pc, #96]	; (8012628 <xPortStartScheduler+0x138>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	4a17      	ldr	r2, [pc, #92]	; (8012628 <xPortStartScheduler+0x138>)
 80125cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80125d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80125d2:	4b15      	ldr	r3, [pc, #84]	; (8012628 <xPortStartScheduler+0x138>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	4a14      	ldr	r2, [pc, #80]	; (8012628 <xPortStartScheduler+0x138>)
 80125d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80125dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80125de:	f000 f8dd 	bl	801279c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80125e2:	4b12      	ldr	r3, [pc, #72]	; (801262c <xPortStartScheduler+0x13c>)
 80125e4:	2200      	movs	r2, #0
 80125e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80125e8:	f000 f8fc 	bl	80127e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80125ec:	4b10      	ldr	r3, [pc, #64]	; (8012630 <xPortStartScheduler+0x140>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	4a0f      	ldr	r2, [pc, #60]	; (8012630 <xPortStartScheduler+0x140>)
 80125f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80125f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80125f8:	f7ff ff66 	bl	80124c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80125fc:	f7ff f9da 	bl	80119b4 <vTaskSwitchContext>
	prvTaskExitError();
 8012600:	f7ff ff20 	bl	8012444 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012604:	2300      	movs	r3, #0
}
 8012606:	4618      	mov	r0, r3
 8012608:	3718      	adds	r7, #24
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	e000ed00 	.word	0xe000ed00
 8012614:	410fc271 	.word	0x410fc271
 8012618:	410fc270 	.word	0x410fc270
 801261c:	e000e400 	.word	0xe000e400
 8012620:	20000c90 	.word	0x20000c90
 8012624:	20000c94 	.word	0x20000c94
 8012628:	e000ed20 	.word	0xe000ed20
 801262c:	2000001c 	.word	0x2000001c
 8012630:	e000ef34 	.word	0xe000ef34

08012634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012634:	b480      	push	{r7}
 8012636:	b083      	sub	sp, #12
 8012638:	af00      	add	r7, sp, #0
	__asm volatile
 801263a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801263e:	f383 8811 	msr	BASEPRI, r3
 8012642:	f3bf 8f6f 	isb	sy
 8012646:	f3bf 8f4f 	dsb	sy
 801264a:	607b      	str	r3, [r7, #4]
}
 801264c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801264e:	4b0f      	ldr	r3, [pc, #60]	; (801268c <vPortEnterCritical+0x58>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	3301      	adds	r3, #1
 8012654:	4a0d      	ldr	r2, [pc, #52]	; (801268c <vPortEnterCritical+0x58>)
 8012656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012658:	4b0c      	ldr	r3, [pc, #48]	; (801268c <vPortEnterCritical+0x58>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	2b01      	cmp	r3, #1
 801265e:	d10f      	bne.n	8012680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012660:	4b0b      	ldr	r3, [pc, #44]	; (8012690 <vPortEnterCritical+0x5c>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	b2db      	uxtb	r3, r3
 8012666:	2b00      	cmp	r3, #0
 8012668:	d00a      	beq.n	8012680 <vPortEnterCritical+0x4c>
	__asm volatile
 801266a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801266e:	f383 8811 	msr	BASEPRI, r3
 8012672:	f3bf 8f6f 	isb	sy
 8012676:	f3bf 8f4f 	dsb	sy
 801267a:	603b      	str	r3, [r7, #0]
}
 801267c:	bf00      	nop
 801267e:	e7fe      	b.n	801267e <vPortEnterCritical+0x4a>
	}
}
 8012680:	bf00      	nop
 8012682:	370c      	adds	r7, #12
 8012684:	46bd      	mov	sp, r7
 8012686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268a:	4770      	bx	lr
 801268c:	2000001c 	.word	0x2000001c
 8012690:	e000ed04 	.word	0xe000ed04

08012694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801269a:	4b12      	ldr	r3, [pc, #72]	; (80126e4 <vPortExitCritical+0x50>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d10a      	bne.n	80126b8 <vPortExitCritical+0x24>
	__asm volatile
 80126a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a6:	f383 8811 	msr	BASEPRI, r3
 80126aa:	f3bf 8f6f 	isb	sy
 80126ae:	f3bf 8f4f 	dsb	sy
 80126b2:	607b      	str	r3, [r7, #4]
}
 80126b4:	bf00      	nop
 80126b6:	e7fe      	b.n	80126b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80126b8:	4b0a      	ldr	r3, [pc, #40]	; (80126e4 <vPortExitCritical+0x50>)
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	3b01      	subs	r3, #1
 80126be:	4a09      	ldr	r2, [pc, #36]	; (80126e4 <vPortExitCritical+0x50>)
 80126c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80126c2:	4b08      	ldr	r3, [pc, #32]	; (80126e4 <vPortExitCritical+0x50>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d105      	bne.n	80126d6 <vPortExitCritical+0x42>
 80126ca:	2300      	movs	r3, #0
 80126cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	f383 8811 	msr	BASEPRI, r3
}
 80126d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80126d6:	bf00      	nop
 80126d8:	370c      	adds	r7, #12
 80126da:	46bd      	mov	sp, r7
 80126dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e0:	4770      	bx	lr
 80126e2:	bf00      	nop
 80126e4:	2000001c 	.word	0x2000001c
	...

080126f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80126f0:	f3ef 8009 	mrs	r0, PSP
 80126f4:	f3bf 8f6f 	isb	sy
 80126f8:	4b15      	ldr	r3, [pc, #84]	; (8012750 <pxCurrentTCBConst>)
 80126fa:	681a      	ldr	r2, [r3, #0]
 80126fc:	f01e 0f10 	tst.w	lr, #16
 8012700:	bf08      	it	eq
 8012702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801270a:	6010      	str	r0, [r2, #0]
 801270c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012714:	f380 8811 	msr	BASEPRI, r0
 8012718:	f3bf 8f4f 	dsb	sy
 801271c:	f3bf 8f6f 	isb	sy
 8012720:	f7ff f948 	bl	80119b4 <vTaskSwitchContext>
 8012724:	f04f 0000 	mov.w	r0, #0
 8012728:	f380 8811 	msr	BASEPRI, r0
 801272c:	bc09      	pop	{r0, r3}
 801272e:	6819      	ldr	r1, [r3, #0]
 8012730:	6808      	ldr	r0, [r1, #0]
 8012732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012736:	f01e 0f10 	tst.w	lr, #16
 801273a:	bf08      	it	eq
 801273c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012740:	f380 8809 	msr	PSP, r0
 8012744:	f3bf 8f6f 	isb	sy
 8012748:	4770      	bx	lr
 801274a:	bf00      	nop
 801274c:	f3af 8000 	nop.w

08012750 <pxCurrentTCBConst>:
 8012750:	20000b64 	.word	0x20000b64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012754:	bf00      	nop
 8012756:	bf00      	nop

08012758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
	__asm volatile
 801275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012762:	f383 8811 	msr	BASEPRI, r3
 8012766:	f3bf 8f6f 	isb	sy
 801276a:	f3bf 8f4f 	dsb	sy
 801276e:	607b      	str	r3, [r7, #4]
}
 8012770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012772:	f7ff f867 	bl	8011844 <xTaskIncrementTick>
 8012776:	4603      	mov	r3, r0
 8012778:	2b00      	cmp	r3, #0
 801277a:	d003      	beq.n	8012784 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801277c:	4b06      	ldr	r3, [pc, #24]	; (8012798 <SysTick_Handler+0x40>)
 801277e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012782:	601a      	str	r2, [r3, #0]
 8012784:	2300      	movs	r3, #0
 8012786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	f383 8811 	msr	BASEPRI, r3
}
 801278e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012790:	bf00      	nop
 8012792:	3708      	adds	r7, #8
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}
 8012798:	e000ed04 	.word	0xe000ed04

0801279c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801279c:	b480      	push	{r7}
 801279e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80127a0:	4b0b      	ldr	r3, [pc, #44]	; (80127d0 <vPortSetupTimerInterrupt+0x34>)
 80127a2:	2200      	movs	r2, #0
 80127a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80127a6:	4b0b      	ldr	r3, [pc, #44]	; (80127d4 <vPortSetupTimerInterrupt+0x38>)
 80127a8:	2200      	movs	r2, #0
 80127aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80127ac:	4b0a      	ldr	r3, [pc, #40]	; (80127d8 <vPortSetupTimerInterrupt+0x3c>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	4a0a      	ldr	r2, [pc, #40]	; (80127dc <vPortSetupTimerInterrupt+0x40>)
 80127b2:	fba2 2303 	umull	r2, r3, r2, r3
 80127b6:	099b      	lsrs	r3, r3, #6
 80127b8:	4a09      	ldr	r2, [pc, #36]	; (80127e0 <vPortSetupTimerInterrupt+0x44>)
 80127ba:	3b01      	subs	r3, #1
 80127bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80127be:	4b04      	ldr	r3, [pc, #16]	; (80127d0 <vPortSetupTimerInterrupt+0x34>)
 80127c0:	2207      	movs	r2, #7
 80127c2:	601a      	str	r2, [r3, #0]
}
 80127c4:	bf00      	nop
 80127c6:	46bd      	mov	sp, r7
 80127c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127cc:	4770      	bx	lr
 80127ce:	bf00      	nop
 80127d0:	e000e010 	.word	0xe000e010
 80127d4:	e000e018 	.word	0xe000e018
 80127d8:	20000010 	.word	0x20000010
 80127dc:	10624dd3 	.word	0x10624dd3
 80127e0:	e000e014 	.word	0xe000e014

080127e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80127e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80127f4 <vPortEnableVFP+0x10>
 80127e8:	6801      	ldr	r1, [r0, #0]
 80127ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80127ee:	6001      	str	r1, [r0, #0]
 80127f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80127f2:	bf00      	nop
 80127f4:	e000ed88 	.word	0xe000ed88

080127f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80127f8:	b480      	push	{r7}
 80127fa:	b085      	sub	sp, #20
 80127fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80127fe:	f3ef 8305 	mrs	r3, IPSR
 8012802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	2b0f      	cmp	r3, #15
 8012808:	d914      	bls.n	8012834 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801280a:	4a17      	ldr	r2, [pc, #92]	; (8012868 <vPortValidateInterruptPriority+0x70>)
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	4413      	add	r3, r2
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012814:	4b15      	ldr	r3, [pc, #84]	; (801286c <vPortValidateInterruptPriority+0x74>)
 8012816:	781b      	ldrb	r3, [r3, #0]
 8012818:	7afa      	ldrb	r2, [r7, #11]
 801281a:	429a      	cmp	r2, r3
 801281c:	d20a      	bcs.n	8012834 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801281e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012822:	f383 8811 	msr	BASEPRI, r3
 8012826:	f3bf 8f6f 	isb	sy
 801282a:	f3bf 8f4f 	dsb	sy
 801282e:	607b      	str	r3, [r7, #4]
}
 8012830:	bf00      	nop
 8012832:	e7fe      	b.n	8012832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012834:	4b0e      	ldr	r3, [pc, #56]	; (8012870 <vPortValidateInterruptPriority+0x78>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801283c:	4b0d      	ldr	r3, [pc, #52]	; (8012874 <vPortValidateInterruptPriority+0x7c>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	429a      	cmp	r2, r3
 8012842:	d90a      	bls.n	801285a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012848:	f383 8811 	msr	BASEPRI, r3
 801284c:	f3bf 8f6f 	isb	sy
 8012850:	f3bf 8f4f 	dsb	sy
 8012854:	603b      	str	r3, [r7, #0]
}
 8012856:	bf00      	nop
 8012858:	e7fe      	b.n	8012858 <vPortValidateInterruptPriority+0x60>
	}
 801285a:	bf00      	nop
 801285c:	3714      	adds	r7, #20
 801285e:	46bd      	mov	sp, r7
 8012860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012864:	4770      	bx	lr
 8012866:	bf00      	nop
 8012868:	e000e3f0 	.word	0xe000e3f0
 801286c:	20000c90 	.word	0x20000c90
 8012870:	e000ed0c 	.word	0xe000ed0c
 8012874:	20000c94 	.word	0x20000c94

08012878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b08a      	sub	sp, #40	; 0x28
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012880:	2300      	movs	r3, #0
 8012882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012884:	f7fe ff12 	bl	80116ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012888:	4b5b      	ldr	r3, [pc, #364]	; (80129f8 <pvPortMalloc+0x180>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d101      	bne.n	8012894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012890:	f000 f920 	bl	8012ad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012894:	4b59      	ldr	r3, [pc, #356]	; (80129fc <pvPortMalloc+0x184>)
 8012896:	681a      	ldr	r2, [r3, #0]
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	4013      	ands	r3, r2
 801289c:	2b00      	cmp	r3, #0
 801289e:	f040 8093 	bne.w	80129c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d01d      	beq.n	80128e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80128a8:	2208      	movs	r2, #8
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	4413      	add	r3, r2
 80128ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f003 0307 	and.w	r3, r3, #7
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d014      	beq.n	80128e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f023 0307 	bic.w	r3, r3, #7
 80128c0:	3308      	adds	r3, #8
 80128c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f003 0307 	and.w	r3, r3, #7
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d00a      	beq.n	80128e4 <pvPortMalloc+0x6c>
	__asm volatile
 80128ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128d2:	f383 8811 	msr	BASEPRI, r3
 80128d6:	f3bf 8f6f 	isb	sy
 80128da:	f3bf 8f4f 	dsb	sy
 80128de:	617b      	str	r3, [r7, #20]
}
 80128e0:	bf00      	nop
 80128e2:	e7fe      	b.n	80128e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d06e      	beq.n	80129c8 <pvPortMalloc+0x150>
 80128ea:	4b45      	ldr	r3, [pc, #276]	; (8012a00 <pvPortMalloc+0x188>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	687a      	ldr	r2, [r7, #4]
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d869      	bhi.n	80129c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80128f4:	4b43      	ldr	r3, [pc, #268]	; (8012a04 <pvPortMalloc+0x18c>)
 80128f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80128f8:	4b42      	ldr	r3, [pc, #264]	; (8012a04 <pvPortMalloc+0x18c>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80128fe:	e004      	b.n	801290a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012902:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801290c:	685b      	ldr	r3, [r3, #4]
 801290e:	687a      	ldr	r2, [r7, #4]
 8012910:	429a      	cmp	r2, r3
 8012912:	d903      	bls.n	801291c <pvPortMalloc+0xa4>
 8012914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d1f1      	bne.n	8012900 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801291c:	4b36      	ldr	r3, [pc, #216]	; (80129f8 <pvPortMalloc+0x180>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012922:	429a      	cmp	r2, r3
 8012924:	d050      	beq.n	80129c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012926:	6a3b      	ldr	r3, [r7, #32]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	2208      	movs	r2, #8
 801292c:	4413      	add	r3, r2
 801292e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012932:	681a      	ldr	r2, [r3, #0]
 8012934:	6a3b      	ldr	r3, [r7, #32]
 8012936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293a:	685a      	ldr	r2, [r3, #4]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	1ad2      	subs	r2, r2, r3
 8012940:	2308      	movs	r3, #8
 8012942:	005b      	lsls	r3, r3, #1
 8012944:	429a      	cmp	r2, r3
 8012946:	d91f      	bls.n	8012988 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	4413      	add	r3, r2
 801294e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012950:	69bb      	ldr	r3, [r7, #24]
 8012952:	f003 0307 	and.w	r3, r3, #7
 8012956:	2b00      	cmp	r3, #0
 8012958:	d00a      	beq.n	8012970 <pvPortMalloc+0xf8>
	__asm volatile
 801295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801295e:	f383 8811 	msr	BASEPRI, r3
 8012962:	f3bf 8f6f 	isb	sy
 8012966:	f3bf 8f4f 	dsb	sy
 801296a:	613b      	str	r3, [r7, #16]
}
 801296c:	bf00      	nop
 801296e:	e7fe      	b.n	801296e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012972:	685a      	ldr	r2, [r3, #4]
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	1ad2      	subs	r2, r2, r3
 8012978:	69bb      	ldr	r3, [r7, #24]
 801297a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012982:	69b8      	ldr	r0, [r7, #24]
 8012984:	f000 f908 	bl	8012b98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012988:	4b1d      	ldr	r3, [pc, #116]	; (8012a00 <pvPortMalloc+0x188>)
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298e:	685b      	ldr	r3, [r3, #4]
 8012990:	1ad3      	subs	r3, r2, r3
 8012992:	4a1b      	ldr	r2, [pc, #108]	; (8012a00 <pvPortMalloc+0x188>)
 8012994:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012996:	4b1a      	ldr	r3, [pc, #104]	; (8012a00 <pvPortMalloc+0x188>)
 8012998:	681a      	ldr	r2, [r3, #0]
 801299a:	4b1b      	ldr	r3, [pc, #108]	; (8012a08 <pvPortMalloc+0x190>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	429a      	cmp	r2, r3
 80129a0:	d203      	bcs.n	80129aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80129a2:	4b17      	ldr	r3, [pc, #92]	; (8012a00 <pvPortMalloc+0x188>)
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	4a18      	ldr	r2, [pc, #96]	; (8012a08 <pvPortMalloc+0x190>)
 80129a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80129aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ac:	685a      	ldr	r2, [r3, #4]
 80129ae:	4b13      	ldr	r3, [pc, #76]	; (80129fc <pvPortMalloc+0x184>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	431a      	orrs	r2, r3
 80129b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80129b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ba:	2200      	movs	r2, #0
 80129bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80129be:	4b13      	ldr	r3, [pc, #76]	; (8012a0c <pvPortMalloc+0x194>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	3301      	adds	r3, #1
 80129c4:	4a11      	ldr	r2, [pc, #68]	; (8012a0c <pvPortMalloc+0x194>)
 80129c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80129c8:	f7fe fe7e 	bl	80116c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80129cc:	69fb      	ldr	r3, [r7, #28]
 80129ce:	f003 0307 	and.w	r3, r3, #7
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d00a      	beq.n	80129ec <pvPortMalloc+0x174>
	__asm volatile
 80129d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129da:	f383 8811 	msr	BASEPRI, r3
 80129de:	f3bf 8f6f 	isb	sy
 80129e2:	f3bf 8f4f 	dsb	sy
 80129e6:	60fb      	str	r3, [r7, #12]
}
 80129e8:	bf00      	nop
 80129ea:	e7fe      	b.n	80129ea <pvPortMalloc+0x172>
	return pvReturn;
 80129ec:	69fb      	ldr	r3, [r7, #28]
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	3728      	adds	r7, #40	; 0x28
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	bf00      	nop
 80129f8:	20008338 	.word	0x20008338
 80129fc:	2000834c 	.word	0x2000834c
 8012a00:	2000833c 	.word	0x2000833c
 8012a04:	20008330 	.word	0x20008330
 8012a08:	20008340 	.word	0x20008340
 8012a0c:	20008344 	.word	0x20008344

08012a10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b086      	sub	sp, #24
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d04d      	beq.n	8012abe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012a22:	2308      	movs	r3, #8
 8012a24:	425b      	negs	r3, r3
 8012a26:	697a      	ldr	r2, [r7, #20]
 8012a28:	4413      	add	r3, r2
 8012a2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	685a      	ldr	r2, [r3, #4]
 8012a34:	4b24      	ldr	r3, [pc, #144]	; (8012ac8 <vPortFree+0xb8>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	4013      	ands	r3, r2
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d10a      	bne.n	8012a54 <vPortFree+0x44>
	__asm volatile
 8012a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a42:	f383 8811 	msr	BASEPRI, r3
 8012a46:	f3bf 8f6f 	isb	sy
 8012a4a:	f3bf 8f4f 	dsb	sy
 8012a4e:	60fb      	str	r3, [r7, #12]
}
 8012a50:	bf00      	nop
 8012a52:	e7fe      	b.n	8012a52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012a54:	693b      	ldr	r3, [r7, #16]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d00a      	beq.n	8012a72 <vPortFree+0x62>
	__asm volatile
 8012a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a60:	f383 8811 	msr	BASEPRI, r3
 8012a64:	f3bf 8f6f 	isb	sy
 8012a68:	f3bf 8f4f 	dsb	sy
 8012a6c:	60bb      	str	r3, [r7, #8]
}
 8012a6e:	bf00      	nop
 8012a70:	e7fe      	b.n	8012a70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	685a      	ldr	r2, [r3, #4]
 8012a76:	4b14      	ldr	r3, [pc, #80]	; (8012ac8 <vPortFree+0xb8>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	4013      	ands	r3, r2
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d01e      	beq.n	8012abe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012a80:	693b      	ldr	r3, [r7, #16]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d11a      	bne.n	8012abe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	685a      	ldr	r2, [r3, #4]
 8012a8c:	4b0e      	ldr	r3, [pc, #56]	; (8012ac8 <vPortFree+0xb8>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	43db      	mvns	r3, r3
 8012a92:	401a      	ands	r2, r3
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012a98:	f7fe fe08 	bl	80116ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012a9c:	693b      	ldr	r3, [r7, #16]
 8012a9e:	685a      	ldr	r2, [r3, #4]
 8012aa0:	4b0a      	ldr	r3, [pc, #40]	; (8012acc <vPortFree+0xbc>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	4a09      	ldr	r2, [pc, #36]	; (8012acc <vPortFree+0xbc>)
 8012aa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012aaa:	6938      	ldr	r0, [r7, #16]
 8012aac:	f000 f874 	bl	8012b98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012ab0:	4b07      	ldr	r3, [pc, #28]	; (8012ad0 <vPortFree+0xc0>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	3301      	adds	r3, #1
 8012ab6:	4a06      	ldr	r2, [pc, #24]	; (8012ad0 <vPortFree+0xc0>)
 8012ab8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012aba:	f7fe fe05 	bl	80116c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012abe:	bf00      	nop
 8012ac0:	3718      	adds	r7, #24
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	2000834c 	.word	0x2000834c
 8012acc:	2000833c 	.word	0x2000833c
 8012ad0:	20008348 	.word	0x20008348

08012ad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012ad4:	b480      	push	{r7}
 8012ad6:	b085      	sub	sp, #20
 8012ad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012ada:	f247 6398 	movw	r3, #30360	; 0x7698
 8012ade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012ae0:	4b27      	ldr	r3, [pc, #156]	; (8012b80 <prvHeapInit+0xac>)
 8012ae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	f003 0307 	and.w	r3, r3, #7
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d00c      	beq.n	8012b08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	3307      	adds	r3, #7
 8012af2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	f023 0307 	bic.w	r3, r3, #7
 8012afa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012afc:	68ba      	ldr	r2, [r7, #8]
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	1ad3      	subs	r3, r2, r3
 8012b02:	4a1f      	ldr	r2, [pc, #124]	; (8012b80 <prvHeapInit+0xac>)
 8012b04:	4413      	add	r3, r2
 8012b06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012b0c:	4a1d      	ldr	r2, [pc, #116]	; (8012b84 <prvHeapInit+0xb0>)
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012b12:	4b1c      	ldr	r3, [pc, #112]	; (8012b84 <prvHeapInit+0xb0>)
 8012b14:	2200      	movs	r2, #0
 8012b16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	68ba      	ldr	r2, [r7, #8]
 8012b1c:	4413      	add	r3, r2
 8012b1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012b20:	2208      	movs	r2, #8
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	1a9b      	subs	r3, r3, r2
 8012b26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	f023 0307 	bic.w	r3, r3, #7
 8012b2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	4a15      	ldr	r2, [pc, #84]	; (8012b88 <prvHeapInit+0xb4>)
 8012b34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012b36:	4b14      	ldr	r3, [pc, #80]	; (8012b88 <prvHeapInit+0xb4>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012b3e:	4b12      	ldr	r3, [pc, #72]	; (8012b88 <prvHeapInit+0xb4>)
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	2200      	movs	r2, #0
 8012b44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012b4a:	683b      	ldr	r3, [r7, #0]
 8012b4c:	68fa      	ldr	r2, [r7, #12]
 8012b4e:	1ad2      	subs	r2, r2, r3
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012b54:	4b0c      	ldr	r3, [pc, #48]	; (8012b88 <prvHeapInit+0xb4>)
 8012b56:	681a      	ldr	r2, [r3, #0]
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	685b      	ldr	r3, [r3, #4]
 8012b60:	4a0a      	ldr	r2, [pc, #40]	; (8012b8c <prvHeapInit+0xb8>)
 8012b62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	685b      	ldr	r3, [r3, #4]
 8012b68:	4a09      	ldr	r2, [pc, #36]	; (8012b90 <prvHeapInit+0xbc>)
 8012b6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012b6c:	4b09      	ldr	r3, [pc, #36]	; (8012b94 <prvHeapInit+0xc0>)
 8012b6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012b72:	601a      	str	r2, [r3, #0]
}
 8012b74:	bf00      	nop
 8012b76:	3714      	adds	r7, #20
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7e:	4770      	bx	lr
 8012b80:	20000c98 	.word	0x20000c98
 8012b84:	20008330 	.word	0x20008330
 8012b88:	20008338 	.word	0x20008338
 8012b8c:	20008340 	.word	0x20008340
 8012b90:	2000833c 	.word	0x2000833c
 8012b94:	2000834c 	.word	0x2000834c

08012b98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b085      	sub	sp, #20
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012ba0:	4b28      	ldr	r3, [pc, #160]	; (8012c44 <prvInsertBlockIntoFreeList+0xac>)
 8012ba2:	60fb      	str	r3, [r7, #12]
 8012ba4:	e002      	b.n	8012bac <prvInsertBlockIntoFreeList+0x14>
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	60fb      	str	r3, [r7, #12]
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	687a      	ldr	r2, [r7, #4]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d8f7      	bhi.n	8012ba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	685b      	ldr	r3, [r3, #4]
 8012bbe:	68ba      	ldr	r2, [r7, #8]
 8012bc0:	4413      	add	r3, r2
 8012bc2:	687a      	ldr	r2, [r7, #4]
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d108      	bne.n	8012bda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	685a      	ldr	r2, [r3, #4]
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	685b      	ldr	r3, [r3, #4]
 8012bd0:	441a      	add	r2, r3
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	685b      	ldr	r3, [r3, #4]
 8012be2:	68ba      	ldr	r2, [r7, #8]
 8012be4:	441a      	add	r2, r3
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d118      	bne.n	8012c20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	4b15      	ldr	r3, [pc, #84]	; (8012c48 <prvInsertBlockIntoFreeList+0xb0>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d00d      	beq.n	8012c16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	685a      	ldr	r2, [r3, #4]
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	441a      	add	r2, r3
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	681a      	ldr	r2, [r3, #0]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	601a      	str	r2, [r3, #0]
 8012c14:	e008      	b.n	8012c28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012c16:	4b0c      	ldr	r3, [pc, #48]	; (8012c48 <prvInsertBlockIntoFreeList+0xb0>)
 8012c18:	681a      	ldr	r2, [r3, #0]
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	601a      	str	r2, [r3, #0]
 8012c1e:	e003      	b.n	8012c28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	681a      	ldr	r2, [r3, #0]
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012c28:	68fa      	ldr	r2, [r7, #12]
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d002      	beq.n	8012c36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	687a      	ldr	r2, [r7, #4]
 8012c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012c36:	bf00      	nop
 8012c38:	3714      	adds	r7, #20
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c40:	4770      	bx	lr
 8012c42:	bf00      	nop
 8012c44:	20008330 	.word	0x20008330
 8012c48:	20008338 	.word	0x20008338

08012c4c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b084      	sub	sp, #16
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012c56:	f009 fd5b 	bl	801c710 <sys_timeouts_sleeptime>
 8012c5a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c62:	d10b      	bne.n	8012c7c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012c64:	4813      	ldr	r0, [pc, #76]	; (8012cb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8012c66:	f00c faca 	bl	801f1fe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	6839      	ldr	r1, [r7, #0]
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f00c fa3c 	bl	801f0ec <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012c74:	480f      	ldr	r0, [pc, #60]	; (8012cb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8012c76:	f00c fab3 	bl	801f1e0 <sys_mutex_lock>
    return;
 8012c7a:	e018      	b.n	8012cae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d102      	bne.n	8012c88 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012c82:	f009 fd0b 	bl	801c69c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012c86:	e7e6      	b.n	8012c56 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012c88:	480a      	ldr	r0, [pc, #40]	; (8012cb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8012c8a:	f00c fab8 	bl	801f1fe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012c8e:	68fa      	ldr	r2, [r7, #12]
 8012c90:	6839      	ldr	r1, [r7, #0]
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f00c fa2a 	bl	801f0ec <sys_arch_mbox_fetch>
 8012c98:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012c9a:	4806      	ldr	r0, [pc, #24]	; (8012cb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8012c9c:	f00c faa0 	bl	801f1e0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ca6:	d102      	bne.n	8012cae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012ca8:	f009 fcf8 	bl	801c69c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012cac:	e7d3      	b.n	8012c56 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012cae:	3710      	adds	r7, #16
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}
 8012cb4:	20010df4 	.word	0x20010df4

08012cb8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b084      	sub	sp, #16
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012cc0:	4810      	ldr	r0, [pc, #64]	; (8012d04 <tcpip_thread+0x4c>)
 8012cc2:	f00c fa8d 	bl	801f1e0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012cc6:	4b10      	ldr	r3, [pc, #64]	; (8012d08 <tcpip_thread+0x50>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d005      	beq.n	8012cda <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012cce:	4b0e      	ldr	r3, [pc, #56]	; (8012d08 <tcpip_thread+0x50>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	4a0e      	ldr	r2, [pc, #56]	; (8012d0c <tcpip_thread+0x54>)
 8012cd4:	6812      	ldr	r2, [r2, #0]
 8012cd6:	4610      	mov	r0, r2
 8012cd8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012cda:	f107 030c 	add.w	r3, r7, #12
 8012cde:	4619      	mov	r1, r3
 8012ce0:	480b      	ldr	r0, [pc, #44]	; (8012d10 <tcpip_thread+0x58>)
 8012ce2:	f7ff ffb3 	bl	8012c4c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d106      	bne.n	8012cfa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012cec:	4b09      	ldr	r3, [pc, #36]	; (8012d14 <tcpip_thread+0x5c>)
 8012cee:	2291      	movs	r2, #145	; 0x91
 8012cf0:	4909      	ldr	r1, [pc, #36]	; (8012d18 <tcpip_thread+0x60>)
 8012cf2:	480a      	ldr	r0, [pc, #40]	; (8012d1c <tcpip_thread+0x64>)
 8012cf4:	f00c fb3a 	bl	801f36c <iprintf>
      continue;
 8012cf8:	e003      	b.n	8012d02 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f000 f80f 	bl	8012d20 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012d02:	e7ea      	b.n	8012cda <tcpip_thread+0x22>
 8012d04:	20010df4 	.word	0x20010df4
 8012d08:	20008350 	.word	0x20008350
 8012d0c:	20008354 	.word	0x20008354
 8012d10:	20008358 	.word	0x20008358
 8012d14:	08021574 	.word	0x08021574
 8012d18:	080215a4 	.word	0x080215a4
 8012d1c:	080215c4 	.word	0x080215c4

08012d20 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	781b      	ldrb	r3, [r3, #0]
 8012d2c:	2b02      	cmp	r3, #2
 8012d2e:	d026      	beq.n	8012d7e <tcpip_thread_handle_msg+0x5e>
 8012d30:	2b02      	cmp	r3, #2
 8012d32:	dc2b      	bgt.n	8012d8c <tcpip_thread_handle_msg+0x6c>
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d002      	beq.n	8012d3e <tcpip_thread_handle_msg+0x1e>
 8012d38:	2b01      	cmp	r3, #1
 8012d3a:	d015      	beq.n	8012d68 <tcpip_thread_handle_msg+0x48>
 8012d3c:	e026      	b.n	8012d8c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	68db      	ldr	r3, [r3, #12]
 8012d42:	687a      	ldr	r2, [r7, #4]
 8012d44:	6850      	ldr	r0, [r2, #4]
 8012d46:	687a      	ldr	r2, [r7, #4]
 8012d48:	6892      	ldr	r2, [r2, #8]
 8012d4a:	4611      	mov	r1, r2
 8012d4c:	4798      	blx	r3
 8012d4e:	4603      	mov	r3, r0
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d004      	beq.n	8012d5e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f003 f8a7 	bl	8015eac <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012d5e:	6879      	ldr	r1, [r7, #4]
 8012d60:	2009      	movs	r0, #9
 8012d62:	f002 f9ed 	bl	8015140 <memp_free>
      break;
 8012d66:	e018      	b.n	8012d9a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	685b      	ldr	r3, [r3, #4]
 8012d6c:	687a      	ldr	r2, [r7, #4]
 8012d6e:	6892      	ldr	r2, [r2, #8]
 8012d70:	4610      	mov	r0, r2
 8012d72:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012d74:	6879      	ldr	r1, [r7, #4]
 8012d76:	2008      	movs	r0, #8
 8012d78:	f002 f9e2 	bl	8015140 <memp_free>
      break;
 8012d7c:	e00d      	b.n	8012d9a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	685b      	ldr	r3, [r3, #4]
 8012d82:	687a      	ldr	r2, [r7, #4]
 8012d84:	6892      	ldr	r2, [r2, #8]
 8012d86:	4610      	mov	r0, r2
 8012d88:	4798      	blx	r3
      break;
 8012d8a:	e006      	b.n	8012d9a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012d8c:	4b05      	ldr	r3, [pc, #20]	; (8012da4 <tcpip_thread_handle_msg+0x84>)
 8012d8e:	22cf      	movs	r2, #207	; 0xcf
 8012d90:	4905      	ldr	r1, [pc, #20]	; (8012da8 <tcpip_thread_handle_msg+0x88>)
 8012d92:	4806      	ldr	r0, [pc, #24]	; (8012dac <tcpip_thread_handle_msg+0x8c>)
 8012d94:	f00c faea 	bl	801f36c <iprintf>
      break;
 8012d98:	bf00      	nop
  }
}
 8012d9a:	bf00      	nop
 8012d9c:	3708      	adds	r7, #8
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
 8012da2:	bf00      	nop
 8012da4:	08021574 	.word	0x08021574
 8012da8:	080215a4 	.word	0x080215a4
 8012dac:	080215c4 	.word	0x080215c4

08012db0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b086      	sub	sp, #24
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	60f8      	str	r0, [r7, #12]
 8012db8:	60b9      	str	r1, [r7, #8]
 8012dba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012dbc:	481a      	ldr	r0, [pc, #104]	; (8012e28 <tcpip_inpkt+0x78>)
 8012dbe:	f00c f9d4 	bl	801f16a <sys_mbox_valid>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d105      	bne.n	8012dd4 <tcpip_inpkt+0x24>
 8012dc8:	4b18      	ldr	r3, [pc, #96]	; (8012e2c <tcpip_inpkt+0x7c>)
 8012dca:	22fc      	movs	r2, #252	; 0xfc
 8012dcc:	4918      	ldr	r1, [pc, #96]	; (8012e30 <tcpip_inpkt+0x80>)
 8012dce:	4819      	ldr	r0, [pc, #100]	; (8012e34 <tcpip_inpkt+0x84>)
 8012dd0:	f00c facc 	bl	801f36c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012dd4:	2009      	movs	r0, #9
 8012dd6:	f002 f961 	bl	801509c <memp_malloc>
 8012dda:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d102      	bne.n	8012de8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012de2:	f04f 33ff 	mov.w	r3, #4294967295
 8012de6:	e01a      	b.n	8012e1e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012de8:	697b      	ldr	r3, [r7, #20]
 8012dea:	2200      	movs	r2, #0
 8012dec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	68fa      	ldr	r2, [r7, #12]
 8012df2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	68ba      	ldr	r2, [r7, #8]
 8012df8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012dfa:	697b      	ldr	r3, [r7, #20]
 8012dfc:	687a      	ldr	r2, [r7, #4]
 8012dfe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012e00:	6979      	ldr	r1, [r7, #20]
 8012e02:	4809      	ldr	r0, [pc, #36]	; (8012e28 <tcpip_inpkt+0x78>)
 8012e04:	f00c f958 	bl	801f0b8 <sys_mbox_trypost>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d006      	beq.n	8012e1c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012e0e:	6979      	ldr	r1, [r7, #20]
 8012e10:	2009      	movs	r0, #9
 8012e12:	f002 f995 	bl	8015140 <memp_free>
    return ERR_MEM;
 8012e16:	f04f 33ff 	mov.w	r3, #4294967295
 8012e1a:	e000      	b.n	8012e1e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012e1c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	3718      	adds	r7, #24
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	20008358 	.word	0x20008358
 8012e2c:	08021574 	.word	0x08021574
 8012e30:	080215ec 	.word	0x080215ec
 8012e34:	080215c4 	.word	0x080215c4

08012e38 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b082      	sub	sp, #8
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e48:	f003 0318 	and.w	r3, r3, #24
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d006      	beq.n	8012e5e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012e50:	4a08      	ldr	r2, [pc, #32]	; (8012e74 <tcpip_input+0x3c>)
 8012e52:	6839      	ldr	r1, [r7, #0]
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f7ff ffab 	bl	8012db0 <tcpip_inpkt>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	e005      	b.n	8012e6a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012e5e:	4a06      	ldr	r2, [pc, #24]	; (8012e78 <tcpip_input+0x40>)
 8012e60:	6839      	ldr	r1, [r7, #0]
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f7ff ffa4 	bl	8012db0 <tcpip_inpkt>
 8012e68:	4603      	mov	r3, r0
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3708      	adds	r7, #8
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	0801eec9 	.word	0x0801eec9
 8012e78:	0801dddd 	.word	0x0801dddd

08012e7c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b084      	sub	sp, #16
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012e86:	4819      	ldr	r0, [pc, #100]	; (8012eec <tcpip_try_callback+0x70>)
 8012e88:	f00c f96f 	bl	801f16a <sys_mbox_valid>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d106      	bne.n	8012ea0 <tcpip_try_callback+0x24>
 8012e92:	4b17      	ldr	r3, [pc, #92]	; (8012ef0 <tcpip_try_callback+0x74>)
 8012e94:	f240 125d 	movw	r2, #349	; 0x15d
 8012e98:	4916      	ldr	r1, [pc, #88]	; (8012ef4 <tcpip_try_callback+0x78>)
 8012e9a:	4817      	ldr	r0, [pc, #92]	; (8012ef8 <tcpip_try_callback+0x7c>)
 8012e9c:	f00c fa66 	bl	801f36c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012ea0:	2008      	movs	r0, #8
 8012ea2:	f002 f8fb 	bl	801509c <memp_malloc>
 8012ea6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d102      	bne.n	8012eb4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012eae:	f04f 33ff 	mov.w	r3, #4294967295
 8012eb2:	e017      	b.n	8012ee4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	2201      	movs	r2, #1
 8012eb8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	687a      	ldr	r2, [r7, #4]
 8012ebe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	683a      	ldr	r2, [r7, #0]
 8012ec4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012ec6:	68f9      	ldr	r1, [r7, #12]
 8012ec8:	4808      	ldr	r0, [pc, #32]	; (8012eec <tcpip_try_callback+0x70>)
 8012eca:	f00c f8f5 	bl	801f0b8 <sys_mbox_trypost>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d006      	beq.n	8012ee2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012ed4:	68f9      	ldr	r1, [r7, #12]
 8012ed6:	2008      	movs	r0, #8
 8012ed8:	f002 f932 	bl	8015140 <memp_free>
    return ERR_MEM;
 8012edc:	f04f 33ff 	mov.w	r3, #4294967295
 8012ee0:	e000      	b.n	8012ee4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012ee2:	2300      	movs	r3, #0
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	3710      	adds	r7, #16
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}
 8012eec:	20008358 	.word	0x20008358
 8012ef0:	08021574 	.word	0x08021574
 8012ef4:	080215ec 	.word	0x080215ec
 8012ef8:	080215c4 	.word	0x080215c4

08012efc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b084      	sub	sp, #16
 8012f00:	af02      	add	r7, sp, #8
 8012f02:	6078      	str	r0, [r7, #4]
 8012f04:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012f06:	f001 fc41 	bl	801478c <lwip_init>

  tcpip_init_done = initfunc;
 8012f0a:	4a17      	ldr	r2, [pc, #92]	; (8012f68 <tcpip_init+0x6c>)
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012f10:	4a16      	ldr	r2, [pc, #88]	; (8012f6c <tcpip_init+0x70>)
 8012f12:	683b      	ldr	r3, [r7, #0]
 8012f14:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012f16:	2106      	movs	r1, #6
 8012f18:	4815      	ldr	r0, [pc, #84]	; (8012f70 <tcpip_init+0x74>)
 8012f1a:	f00c f8ab 	bl	801f074 <sys_mbox_new>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d006      	beq.n	8012f32 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012f24:	4b13      	ldr	r3, [pc, #76]	; (8012f74 <tcpip_init+0x78>)
 8012f26:	f240 2261 	movw	r2, #609	; 0x261
 8012f2a:	4913      	ldr	r1, [pc, #76]	; (8012f78 <tcpip_init+0x7c>)
 8012f2c:	4813      	ldr	r0, [pc, #76]	; (8012f7c <tcpip_init+0x80>)
 8012f2e:	f00c fa1d 	bl	801f36c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012f32:	4813      	ldr	r0, [pc, #76]	; (8012f80 <tcpip_init+0x84>)
 8012f34:	f00c f938 	bl	801f1a8 <sys_mutex_new>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d006      	beq.n	8012f4c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012f3e:	4b0d      	ldr	r3, [pc, #52]	; (8012f74 <tcpip_init+0x78>)
 8012f40:	f240 2265 	movw	r2, #613	; 0x265
 8012f44:	490f      	ldr	r1, [pc, #60]	; (8012f84 <tcpip_init+0x88>)
 8012f46:	480d      	ldr	r0, [pc, #52]	; (8012f7c <tcpip_init+0x80>)
 8012f48:	f00c fa10 	bl	801f36c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	9300      	str	r3, [sp, #0]
 8012f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f54:	2200      	movs	r2, #0
 8012f56:	490c      	ldr	r1, [pc, #48]	; (8012f88 <tcpip_init+0x8c>)
 8012f58:	480c      	ldr	r0, [pc, #48]	; (8012f8c <tcpip_init+0x90>)
 8012f5a:	f00c f95d 	bl	801f218 <sys_thread_new>
}
 8012f5e:	bf00      	nop
 8012f60:	3708      	adds	r7, #8
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}
 8012f66:	bf00      	nop
 8012f68:	20008350 	.word	0x20008350
 8012f6c:	20008354 	.word	0x20008354
 8012f70:	20008358 	.word	0x20008358
 8012f74:	08021574 	.word	0x08021574
 8012f78:	080215fc 	.word	0x080215fc
 8012f7c:	080215c4 	.word	0x080215c4
 8012f80:	20010df4 	.word	0x20010df4
 8012f84:	08021620 	.word	0x08021620
 8012f88:	08012cb9 	.word	0x08012cb9
 8012f8c:	08021644 	.word	0x08021644

08012f90 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b084      	sub	sp, #16
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d002      	beq.n	8012fa6 <fs_open+0x16>
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d102      	bne.n	8012fac <fs_open+0x1c>
    return ERR_ARG;
 8012fa6:	f06f 030f 	mvn.w	r3, #15
 8012faa:	e028      	b.n	8012ffe <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8012fac:	4b16      	ldr	r3, [pc, #88]	; (8013008 <fs_open+0x78>)
 8012fae:	60fb      	str	r3, [r7, #12]
 8012fb0:	e020      	b.n	8012ff4 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	4619      	mov	r1, r3
 8012fb8:	6838      	ldr	r0, [r7, #0]
 8012fba:	f7ed f909 	bl	80001d0 <strcmp>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d114      	bne.n	8012fee <fs_open+0x5e>
      file->data = (const char *)f->data;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	689a      	ldr	r2, [r3, #8]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	68da      	ldr	r2, [r3, #12]
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	68da      	ldr	r2, [r3, #12]
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	7c1a      	ldrb	r2, [r3, #16]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8012fea:	2300      	movs	r3, #0
 8012fec:	e007      	b.n	8012ffe <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	60fb      	str	r3, [r7, #12]
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d1db      	bne.n	8012fb2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8012ffa:	f06f 0305 	mvn.w	r3, #5
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	3710      	adds	r7, #16
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}
 8013006:	bf00      	nop
 8013008:	0807afac 	.word	0x0807afac

0801300c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 801300c:	b480      	push	{r7}
 801300e:	b083      	sub	sp, #12
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8013014:	bf00      	nop
 8013016:	370c      	adds	r7, #12
 8013018:	46bd      	mov	sp, r7
 801301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301e:	4770      	bx	lr

08013020 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8013020:	b480      	push	{r7}
 8013022:	b083      	sub	sp, #12
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	685a      	ldr	r2, [r3, #4]
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	689b      	ldr	r3, [r3, #8]
 8013030:	1ad3      	subs	r3, r2, r3
}
 8013032:	4618      	mov	r0, r3
 8013034:	370c      	adds	r7, #12
 8013036:	46bd      	mov	sp, r7
 8013038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303c:	4770      	bx	lr

0801303e <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 801303e:	b580      	push	{r7, lr}
 8013040:	b082      	sub	sp, #8
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8013046:	22b0      	movs	r2, #176	; 0xb0
 8013048:	2100      	movs	r1, #0
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	f00c f986 	bl	801f35c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8013050:	bf00      	nop
 8013052:	3708      	adds	r7, #8
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}

08013058 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 801305e:	20b0      	movs	r0, #176	; 0xb0
 8013060:	f001 fe9a 	bl	8014d98 <mem_malloc>
 8013064:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d002      	beq.n	8013072 <http_state_alloc+0x1a>
    http_state_init(ret);
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f7ff ffe6 	bl	801303e <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8013072:	687b      	ldr	r3, [r7, #4]
}
 8013074:	4618      	mov	r0, r3
 8013076:	3708      	adds	r7, #8
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}

0801307c <httpd_post_begin>:

err_t
httpd_post_begin(void *connection, const char *uri, const char *http_request,
                 u16_t http_request_len, int content_len, char *response_uri,
                 u16_t response_uri_len, u8_t *post_auto_wnd)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b084      	sub	sp, #16
 8013080:	af00      	add	r7, sp, #0
 8013082:	60f8      	str	r0, [r7, #12]
 8013084:	60b9      	str	r1, [r7, #8]
 8013086:	607a      	str	r2, [r7, #4]
 8013088:	807b      	strh	r3, [r7, #2]
  LWIP_UNUSED_ARG(connection);
  LWIP_UNUSED_ARG(http_request);
  LWIP_UNUSED_ARG(http_request_len);
  LWIP_UNUSED_ARG(content_len);
  LWIP_UNUSED_ARG(post_auto_wnd);
  if (!memcmp(uri, "/login.cgi", 11)) {
 801308a:	220b      	movs	r2, #11
 801308c:	4911      	ldr	r1, [pc, #68]	; (80130d4 <httpd_post_begin+0x58>)
 801308e:	68b8      	ldr	r0, [r7, #8]
 8013090:	f00c f92e 	bl	801f2f0 <memcmp>
 8013094:	4603      	mov	r3, r0
 8013096:	2b00      	cmp	r3, #0
 8013098:	d115      	bne.n	80130c6 <httpd_post_begin+0x4a>
    if (current_connection != connection) {
 801309a:	4b0f      	ldr	r3, [pc, #60]	; (80130d8 <httpd_post_begin+0x5c>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	68fa      	ldr	r2, [r7, #12]
 80130a0:	429a      	cmp	r2, r3
 80130a2:	d010      	beq.n	80130c6 <httpd_post_begin+0x4a>
      current_connection = connection;
 80130a4:	4a0c      	ldr	r2, [pc, #48]	; (80130d8 <httpd_post_begin+0x5c>)
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	6013      	str	r3, [r2, #0]
      valid_connection = NULL;
 80130aa:	4b0c      	ldr	r3, [pc, #48]	; (80130dc <httpd_post_begin+0x60>)
 80130ac:	2200      	movs	r2, #0
 80130ae:	601a      	str	r2, [r3, #0]
      /* default page is "login failed" */
      snprintf(response_uri, response_uri_len, "/loginfail.html");
 80130b0:	8c3b      	ldrh	r3, [r7, #32]
 80130b2:	4a0b      	ldr	r2, [pc, #44]	; (80130e0 <httpd_post_begin+0x64>)
 80130b4:	4619      	mov	r1, r3
 80130b6:	69f8      	ldr	r0, [r7, #28]
 80130b8:	f00c fa26 	bl	801f508 <sniprintf>
      /* e.g. for large uploads to slow flash over a fast connection, you should
         manually update the rx window. That way, a sender can only send a full
         tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
         We do not need to throttle upload speed here, so: */
      *post_auto_wnd = 1;
 80130bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130be:	2201      	movs	r2, #1
 80130c0:	701a      	strb	r2, [r3, #0]
      return ERR_OK;
 80130c2:	2300      	movs	r3, #0
 80130c4:	e001      	b.n	80130ca <httpd_post_begin+0x4e>
    }
  }
  return ERR_VAL;
 80130c6:	f06f 0305 	mvn.w	r3, #5
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3710      	adds	r7, #16
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}
 80130d2:	bf00      	nop
 80130d4:	08021694 	.word	0x08021694
 80130d8:	2000c7ac 	.word	0x2000c7ac
 80130dc:	2000c7b0 	.word	0x2000c7b0
 80130e0:	080216a0 	.word	0x080216a0

080130e4 <first_end>:

int first_end(char * k1,const char* l){
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b084      	sub	sp, #16
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	6039      	str	r1, [r7, #0]
 int i=0;
 80130ee:	2300      	movs	r3, #0
 80130f0:	60fb      	str	r3, [r7, #12]
  for(i=0;i<strlen(k1);i++){
 80130f2:	2300      	movs	r3, #0
 80130f4:	60fb      	str	r3, [r7, #12]
 80130f6:	e00a      	b.n	801310e <first_end+0x2a>
    if(*l==k1[i]){
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	781a      	ldrb	r2, [r3, #0]
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	6879      	ldr	r1, [r7, #4]
 8013100:	440b      	add	r3, r1
 8013102:	781b      	ldrb	r3, [r3, #0]
 8013104:	429a      	cmp	r2, r3
 8013106:	d00a      	beq.n	801311e <first_end+0x3a>
  for(i=0;i<strlen(k1);i++){
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	3301      	adds	r3, #1
 801310c:	60fb      	str	r3, [r7, #12]
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f7ed f868 	bl	80001e4 <strlen>
 8013114:	4602      	mov	r2, r0
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	429a      	cmp	r2, r3
 801311a:	d8ed      	bhi.n	80130f8 <first_end+0x14>
 801311c:	e000      	b.n	8013120 <first_end+0x3c>
    //  printf("wo %d\n",i-1);
      break;
 801311e:	bf00      	nop
    }
  }
  return i;
 8013120:	68fb      	ldr	r3, [r7, #12]
}
 8013122:	4618      	mov	r0, r3
 8013124:	3710      	adds	r7, #16
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}
	...

0801312c <httpd_post_receive_data>:



err_t
httpd_post_receive_data(void *connection, struct pbuf *p)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b092      	sub	sp, #72	; 0x48
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
 8013134:	6039      	str	r1, [r7, #0]
 memset(http_post_payload,0,LWIP_HTTPD_POST_MAX_PAYLOAD_LEN);
 8013136:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801313a:	2100      	movs	r1, #0
 801313c:	4870      	ldr	r0, [pc, #448]	; (8013300 <httpd_post_receive_data+0x1d4>)
 801313e:	f00c f90d 	bl	801f35c <memset>

  if (current_connection == connection) {
 8013142:	4b70      	ldr	r3, [pc, #448]	; (8013304 <httpd_post_receive_data+0x1d8>)
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	687a      	ldr	r2, [r7, #4]
 8013148:	429a      	cmp	r2, r3
 801314a:	f040 81b6 	bne.w	80134ba <httpd_post_receive_data+0x38e>

      /* find pass len */


      if(sd_status!=3){
 801314e:	4b6e      	ldr	r3, [pc, #440]	; (8013308 <httpd_post_receive_data+0x1dc>)
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	2b03      	cmp	r3, #3
 8013154:	d008      	beq.n	8013168 <httpd_post_receive_data+0x3c>
           sd_status= f_mount(&fs1,"0:",1);
 8013156:	2201      	movs	r2, #1
 8013158:	496c      	ldr	r1, [pc, #432]	; (801330c <httpd_post_receive_data+0x1e0>)
 801315a:	486d      	ldr	r0, [pc, #436]	; (8013310 <httpd_post_receive_data+0x1e4>)
 801315c:	f7fb f88a 	bl	800e274 <f_mount>
 8013160:	4603      	mov	r3, r0
 8013162:	461a      	mov	r2, r3
 8013164:	4b68      	ldr	r3, [pc, #416]	; (8013308 <httpd_post_receive_data+0x1dc>)
 8013166:	601a      	str	r2, [r3, #0]

      }


           //retSD=f_open(&file,"0:\\alt6.c",FA_OPEN_APPEND|FA_WRITE);
          hs=(struct http_state *)connection;
 8013168:	4a6a      	ldr	r2, [pc, #424]	; (8013314 <httpd_post_receive_data+0x1e8>)
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	6013      	str	r3, [r2, #0]
             struct pbuf *q =p;
 801316e:	683b      	ldr	r3, [r7, #0]
 8013170:	647b      	str	r3, [r7, #68]	; 0x44
             int count;
             u32_t http_post_payload_full_flag=0;
 8013172:	2300      	movs	r3, #0
 8013174:	643b      	str	r3, [r7, #64]	; 0x40
           //  printf("+++++++++++%s--------------",(char*)q->payload);
            if(pack_num==0){
 8013176:	4b68      	ldr	r3, [pc, #416]	; (8013318 <httpd_post_receive_data+0x1ec>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	2b00      	cmp	r3, #0
 801317c:	f040 8191 	bne.w	80134a2 <httpd_post_receive_data+0x376>
           pointer=boundary;
 8013180:	4b66      	ldr	r3, [pc, #408]	; (801331c <httpd_post_receive_data+0x1f0>)
 8013182:	4a67      	ldr	r2, [pc, #412]	; (8013320 <httpd_post_receive_data+0x1f4>)
 8013184:	601a      	str	r2, [r3, #0]

           memset(filename2 ,0,24);
 8013186:	2218      	movs	r2, #24
 8013188:	2100      	movs	r1, #0
 801318a:	4866      	ldr	r0, [pc, #408]	; (8013324 <httpd_post_receive_data+0x1f8>)
 801318c:	f00c f8e6 	bl	801f35c <memset>

           uint32_t byteswritten;

           HAL_UART_Transmit(&huart1,boundary,200,HAL_MAX_DELAY);
 8013190:	f04f 33ff 	mov.w	r3, #4294967295
 8013194:	22c8      	movs	r2, #200	; 0xc8
 8013196:	4962      	ldr	r1, [pc, #392]	; (8013320 <httpd_post_receive_data+0x1f4>)
 8013198:	4863      	ldr	r0, [pc, #396]	; (8013328 <httpd_post_receive_data+0x1fc>)
 801319a:	f7f6 f8e2 	bl	8009362 <HAL_UART_Transmit>
           HAL_UART_Transmit(&huart1,"\r\n",2,HAL_MAX_DELAY);
 801319e:	f04f 33ff 	mov.w	r3, #4294967295
 80131a2:	2202      	movs	r2, #2
 80131a4:	4961      	ldr	r1, [pc, #388]	; (801332c <httpd_post_receive_data+0x200>)
 80131a6:	4860      	ldr	r0, [pc, #384]	; (8013328 <httpd_post_receive_data+0x1fc>)
 80131a8:	f7f6 f8db 	bl	8009362 <HAL_UART_Transmit>


           boundary_start=NULL;
 80131ac:	4b60      	ldr	r3, [pc, #384]	; (8013330 <httpd_post_receive_data+0x204>)
 80131ae:	2200      	movs	r2, #0
 80131b0:	601a      	str	r2, [r3, #0]
           boundary_start =strnstr((char*)q->payload,pointer+2,q->len);
 80131b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131b4:	6858      	ldr	r0, [r3, #4]
 80131b6:	4b59      	ldr	r3, [pc, #356]	; (801331c <httpd_post_receive_data+0x1f0>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	1c99      	adds	r1, r3, #2
 80131bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131be:	895b      	ldrh	r3, [r3, #10]
 80131c0:	461a      	mov	r2, r3
 80131c2:	f00c fa9c 	bl	801f6fe <strnstr>
 80131c6:	4603      	mov	r3, r0
 80131c8:	4a59      	ldr	r2, [pc, #356]	; (8013330 <httpd_post_receive_data+0x204>)
 80131ca:	6013      	str	r3, [r2, #0]


           int h=strlen(pointer);
 80131cc:	4b53      	ldr	r3, [pc, #332]	; (801331c <httpd_post_receive_data+0x1f0>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7ed f807 	bl	80001e4 <strlen>
 80131d6:	4603      	mov	r3, r0
 80131d8:	633b      	str	r3, [r7, #48]	; 0x30
           file_start=NULL;
 80131da:	4b56      	ldr	r3, [pc, #344]	; (8013334 <httpd_post_receive_data+0x208>)
 80131dc:	2200      	movs	r2, #0
 80131de:	601a      	str	r2, [r3, #0]
            file_start=strnstr(boundary_start+h,CRLF CRLF,q->len-h);
 80131e0:	4b53      	ldr	r3, [pc, #332]	; (8013330 <httpd_post_receive_data+0x204>)
 80131e2:	681a      	ldr	r2, [r3, #0]
 80131e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e6:	18d0      	adds	r0, r2, r3
 80131e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131ea:	895b      	ldrh	r3, [r3, #10]
 80131ec:	461a      	mov	r2, r3
 80131ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f0:	1ad3      	subs	r3, r2, r3
 80131f2:	461a      	mov	r2, r3
 80131f4:	4950      	ldr	r1, [pc, #320]	; (8013338 <httpd_post_receive_data+0x20c>)
 80131f6:	f00c fa82 	bl	801f6fe <strnstr>
 80131fa:	4603      	mov	r3, r0
 80131fc:	4a4d      	ldr	r2, [pc, #308]	; (8013334 <httpd_post_receive_data+0x208>)
 80131fe:	6013      	str	r3, [r2, #0]
              pack_num+=1;
 8013200:	4b45      	ldr	r3, [pc, #276]	; (8013318 <httpd_post_receive_data+0x1ec>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	3301      	adds	r3, #1
 8013206:	4a44      	ldr	r2, [pc, #272]	; (8013318 <httpd_post_receive_data+0x1ec>)
 8013208:	6013      	str	r3, [r2, #0]

              file_start+=4;
 801320a:	4b4a      	ldr	r3, [pc, #296]	; (8013334 <httpd_post_receive_data+0x208>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	3304      	adds	r3, #4
 8013210:	4a48      	ldr	r2, [pc, #288]	; (8013334 <httpd_post_receive_data+0x208>)
 8013212:	6013      	str	r3, [r2, #0]
               s16_t intro_boundary_len=(s16_t)(file_start-(char*)q->payload);
 8013214:	4b47      	ldr	r3, [pc, #284]	; (8013334 <httpd_post_receive_data+0x208>)
 8013216:	681a      	ldr	r2, [r3, #0]
 8013218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801321a:	685b      	ldr	r3, [r3, #4]
 801321c:	1ad3      	subs	r3, r2, r3
 801321e:	85fb      	strh	r3, [r7, #46]	; 0x2e
               char * filename;

                filename=strnstr(q->payload,"filename=",intro_boundary_len)+10;
 8013220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8013228:	4944      	ldr	r1, [pc, #272]	; (801333c <httpd_post_receive_data+0x210>)
 801322a:	4618      	mov	r0, r3
 801322c:	f00c fa67 	bl	801f6fe <strnstr>
 8013230:	4603      	mov	r3, r0
 8013232:	330a      	adds	r3, #10
 8013234:	62bb      	str	r3, [r7, #40]	; 0x28
              int h2=first_end(filename,"\"");
 8013236:	4942      	ldr	r1, [pc, #264]	; (8013340 <httpd_post_receive_data+0x214>)
 8013238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801323a:	f7ff ff53 	bl	80130e4 <first_end>
 801323e:	6278      	str	r0, [r7, #36]	; 0x24
               memcpy(filename2,filename,h2);
 8013240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013242:	461a      	mov	r2, r3
 8013244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013246:	4837      	ldr	r0, [pc, #220]	; (8013324 <httpd_post_receive_data+0x1f8>)
 8013248:	f00c f860 	bl	801f30c <memcpy>
               filename2[h2]='\0';
 801324c:	4a35      	ldr	r2, [pc, #212]	; (8013324 <httpd_post_receive_data+0x1f8>)
 801324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013250:	4413      	add	r3, r2
 8013252:	2200      	movs	r2, #0
 8013254:	701a      	strb	r2, [r3, #0]
                   memset(filx ,0,200);
 8013256:	22c8      	movs	r2, #200	; 0xc8
 8013258:	2100      	movs	r1, #0
 801325a:	483a      	ldr	r0, [pc, #232]	; (8013344 <httpd_post_receive_data+0x218>)
 801325c:	f00c f87e 	bl	801f35c <memset>
                   memcpy(filx,prefix,20);
 8013260:	2214      	movs	r2, #20
 8013262:	4939      	ldr	r1, [pc, #228]	; (8013348 <httpd_post_receive_data+0x21c>)
 8013264:	4837      	ldr	r0, [pc, #220]	; (8013344 <httpd_post_receive_data+0x218>)
 8013266:	f00c f851 	bl	801f30c <memcpy>
              strcat(filx,filename2);
 801326a:	492e      	ldr	r1, [pc, #184]	; (8013324 <httpd_post_receive_data+0x1f8>)
 801326c:	4835      	ldr	r0, [pc, #212]	; (8013344 <httpd_post_receive_data+0x218>)
 801326e:	f00c fa10 	bl	801f692 <strcat>

               memset(filename_upload ,0,24);
 8013272:	2218      	movs	r2, #24
 8013274:	2100      	movs	r1, #0
 8013276:	4835      	ldr	r0, [pc, #212]	; (801334c <httpd_post_receive_data+0x220>)
 8013278:	f00c f870 	bl	801f35c <memset>

               memcpy(filename_upload,filx,strlen(filx));
 801327c:	4831      	ldr	r0, [pc, #196]	; (8013344 <httpd_post_receive_data+0x218>)
 801327e:	f7ec ffb1 	bl	80001e4 <strlen>
 8013282:	4603      	mov	r3, r0
 8013284:	461a      	mov	r2, r3
 8013286:	492f      	ldr	r1, [pc, #188]	; (8013344 <httpd_post_receive_data+0x218>)
 8013288:	4830      	ldr	r0, [pc, #192]	; (801334c <httpd_post_receive_data+0x220>)
 801328a:	f00c f83f 	bl	801f30c <memcpy>
               //delete if file exists
        	   f_unlink(filename_upload);
 801328e:	482f      	ldr	r0, [pc, #188]	; (801334c <httpd_post_receive_data+0x220>)
 8013290:	f7fc f8c3 	bl	800f41a <f_unlink>
              retSD=f_open(&file,filename_upload,FA_OPEN_APPEND|FA_WRITE);
 8013294:	2232      	movs	r2, #50	; 0x32
 8013296:	492d      	ldr	r1, [pc, #180]	; (801334c <httpd_post_receive_data+0x220>)
 8013298:	482d      	ldr	r0, [pc, #180]	; (8013350 <httpd_post_receive_data+0x224>)
 801329a:	f7fb f84f 	bl	800e33c <f_open>
 801329e:	4603      	mov	r3, r0
 80132a0:	461a      	mov	r2, r3
 80132a2:	4b2c      	ldr	r3, [pc, #176]	; (8013354 <httpd_post_receive_data+0x228>)
 80132a4:	701a      	strb	r2, [r3, #0]
              pbuf_header(q,-intro_boundary_len);
 80132a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80132a8:	425b      	negs	r3, r3
 80132aa:	b29b      	uxth	r3, r3
 80132ac:	b21b      	sxth	r3, r3
 80132ae:	4619      	mov	r1, r3
 80132b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80132b2:	f002 fdd6 	bl	8015e62 <pbuf_header>
              MEMCPY(http_post_payload+http_post_payload_len,q->payload,q->len);
 80132b6:	4b28      	ldr	r3, [pc, #160]	; (8013358 <httpd_post_receive_data+0x22c>)
 80132b8:	881b      	ldrh	r3, [r3, #0]
 80132ba:	461a      	mov	r2, r3
 80132bc:	4b10      	ldr	r3, [pc, #64]	; (8013300 <httpd_post_receive_data+0x1d4>)
 80132be:	18d0      	adds	r0, r2, r3
 80132c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132c2:	6859      	ldr	r1, [r3, #4]
 80132c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132c6:	895b      	ldrh	r3, [r3, #10]
 80132c8:	461a      	mov	r2, r3
 80132ca:	f00c f81f 	bl	801f30c <memcpy>
              http_post_payload_len+=q->len;
 80132ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132d0:	895a      	ldrh	r2, [r3, #10]
 80132d2:	4b21      	ldr	r3, [pc, #132]	; (8013358 <httpd_post_receive_data+0x22c>)
 80132d4:	881b      	ldrh	r3, [r3, #0]
 80132d6:	4413      	add	r3, r2
 80132d8:	b29a      	uxth	r2, r3
 80132da:	4b1f      	ldr	r3, [pc, #124]	; (8013358 <httpd_post_receive_data+0x22c>)
 80132dc:	801a      	strh	r2, [r3, #0]
              retSD = f_write(&file, http_post_payload, q->len, (void *)&byteswritten);	//在文件内写入wtext内的内
 80132de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132e0:	895b      	ldrh	r3, [r3, #10]
 80132e2:	461a      	mov	r2, r3
 80132e4:	f107 0320 	add.w	r3, r7, #32
 80132e8:	4905      	ldr	r1, [pc, #20]	; (8013300 <httpd_post_receive_data+0x1d4>)
 80132ea:	4819      	ldr	r0, [pc, #100]	; (8013350 <httpd_post_receive_data+0x224>)
 80132ec:	f7fb fbe6 	bl	800eabc <f_write>
 80132f0:	4603      	mov	r3, r0
 80132f2:	461a      	mov	r2, r3
 80132f4:	4b17      	ldr	r3, [pc, #92]	; (8013354 <httpd_post_receive_data+0x228>)
 80132f6:	701a      	strb	r2, [r3, #0]


     	      f_sync(&file);
 80132f8:	4815      	ldr	r0, [pc, #84]	; (8013350 <httpd_post_receive_data+0x224>)
 80132fa:	f7fb fd83 	bl	800ee04 <f_sync>
 80132fe:	e0d4      	b.n	80134aa <httpd_post_receive_data+0x37e>
 8013300:	2000835c 	.word	0x2000835c
 8013304:	2000c7ac 	.word	0x2000c7ac
 8013308:	20000020 	.word	0x20000020
 801330c:	080216b0 	.word	0x080216b0
 8013310:	20011134 	.word	0x20011134
 8013314:	20010e2c 	.word	0x20010e2c
 8013318:	20011370 	.word	0x20011370
 801331c:	2001112c 	.word	0x2001112c
 8013320:	20011374 	.word	0x20011374
 8013324:	20010e14 	.word	0x20010e14
 8013328:	2000cf58 	.word	0x2000cf58
 801332c:	080216b4 	.word	0x080216b4
 8013330:	20010e10 	.word	0x20010e10
 8013334:	2001136c 	.word	0x2001136c
 8013338:	080216b8 	.word	0x080216b8
 801333c:	080216c0 	.word	0x080216c0
 8013340:	080216cc 	.word	0x080216cc
 8013344:	20010e34 	.word	0x20010e34
 8013348:	20000024 	.word	0x20000024
 801334c:	20010df8 	.word	0x20010df8
 8013350:	20010efc 	.word	0x20010efc
 8013354:	2000d808 	.word	0x2000d808
 8013358:	2000c35c 	.word	0x2000c35c

           while(q!=NULL){
               uint32_t byteswritten;
               unsigned char lens[20];
        	   int tail_boundary_len;
        	   if(0==hs->post_content_len_left){
 801335c:	4b5a      	ldr	r3, [pc, #360]	; (80134c8 <httpd_post_receive_data+0x39c>)
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013364:	2b00      	cmp	r3, #0
 8013366:	d15f      	bne.n	8013428 <httpd_post_receive_data+0x2fc>
        			pack_num=0;
 8013368:	4b58      	ldr	r3, [pc, #352]	; (80134cc <httpd_post_receive_data+0x3a0>)
 801336a:	2200      	movs	r2, #0
 801336c:	601a      	str	r2, [r3, #0]

        		   tail_boundary_len=strlen(boundary);
 801336e:	4858      	ldr	r0, [pc, #352]	; (80134d0 <httpd_post_receive_data+0x3a4>)
 8013370:	f7ec ff38 	bl	80001e4 <strlen>
 8013374:	4603      	mov	r3, r0
 8013376:	63fb      	str	r3, [r7, #60]	; 0x3c
        		   tail_boundary_len+=4;
 8013378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801337a:	3304      	adds	r3, #4
 801337c:	63fb      	str	r3, [r7, #60]	; 0x3c
//        		   if(q->len<tail_boundary_len){
//        			   break;
//        		   }
        		   strcat(boundary, "--\r");
 801337e:	4854      	ldr	r0, [pc, #336]	; (80134d0 <httpd_post_receive_data+0x3a4>)
 8013380:	f7ec ff30 	bl	80001e4 <strlen>
 8013384:	4603      	mov	r3, r0
 8013386:	461a      	mov	r2, r3
 8013388:	4b51      	ldr	r3, [pc, #324]	; (80134d0 <httpd_post_receive_data+0x3a4>)
 801338a:	4413      	add	r3, r2
 801338c:	4a51      	ldr	r2, [pc, #324]	; (80134d4 <httpd_post_receive_data+0x3a8>)
 801338e:	6810      	ldr	r0, [r2, #0]
 8013390:	6018      	str	r0, [r3, #0]
        		   sprintf(lens, "%d", q->len); //
 8013392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013394:	895b      	ldrh	r3, [r3, #10]
 8013396:	461a      	mov	r2, r3
 8013398:	f107 0308 	add.w	r3, r7, #8
 801339c:	494e      	ldr	r1, [pc, #312]	; (80134d8 <httpd_post_receive_data+0x3ac>)
 801339e:	4618      	mov	r0, r3
 80133a0:	f00c f8e6 	bl	801f570 <siprintf>
        		   if(q->len<tail_boundary_len){
 80133a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133a6:	895b      	ldrh	r3, [r3, #10]
 80133a8:	461a      	mov	r2, r3
 80133aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133ac:	4293      	cmp	r3, r2
 80133ae:	dd06      	ble.n	80133be <httpd_post_receive_data+0x292>
        			   q->payload+=q->len;
 80133b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80133b6:	8952      	ldrh	r2, [r2, #10]
 80133b8:	441a      	add	r2, r3
 80133ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133bc:	605a      	str	r2, [r3, #4]
        		   }


        		   char * tailing_boundary=(char*)q->payload+(q->len-tail_boundary_len);
 80133be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80133c4:	8952      	ldrh	r2, [r2, #10]
 80133c6:	4611      	mov	r1, r2
 80133c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133ca:	1a8a      	subs	r2, r1, r2
 80133cc:	4413      	add	r3, r2
 80133ce:	63bb      	str	r3, [r7, #56]	; 0x38
        		   char last_char=*((char*)q->payload+q->len-1);
 80133d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133d2:	685a      	ldr	r2, [r3, #4]
 80133d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133d6:	895b      	ldrh	r3, [r3, #10]
 80133d8:	3b01      	subs	r3, #1
 80133da:	4413      	add	r3, r2
 80133dc:	781b      	ldrb	r3, [r3, #0]
 80133de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		   *((char*)q->payload+q->len-1)='\0';
 80133e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133e4:	685a      	ldr	r2, [r3, #4]
 80133e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133e8:	895b      	ldrh	r3, [r3, #10]
 80133ea:	3b01      	subs	r3, #1
 80133ec:	4413      	add	r3, r2
 80133ee:	2200      	movs	r2, #0
 80133f0:	701a      	strb	r2, [r3, #0]
        		  if(strcmp(tailing_boundary,boundary)==0){
 80133f2:	4937      	ldr	r1, [pc, #220]	; (80134d0 <httpd_post_receive_data+0x3a4>)
 80133f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80133f6:	f7ec feeb 	bl	80001d0 <strcmp>
 80133fa:	4603      	mov	r3, r0
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d107      	bne.n	8013410 <httpd_post_receive_data+0x2e4>
        			   q->len -= tail_boundary_len;
 8013400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013402:	895a      	ldrh	r2, [r3, #10]
 8013404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013406:	b29b      	uxth	r3, r3
 8013408:	1ad3      	subs	r3, r2, r3
 801340a:	b29a      	uxth	r2, r3
 801340c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801340e:	815a      	strh	r2, [r3, #10]
        		   }else{

        		   }
        		   *((char*)q->payload+q->len+tail_boundary_len-1)=last_char;
 8013410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013412:	685a      	ldr	r2, [r3, #4]
 8013414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013416:	895b      	ldrh	r3, [r3, #10]
 8013418:	4619      	mov	r1, r3
 801341a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801341c:	440b      	add	r3, r1
 801341e:	3b01      	subs	r3, #1
 8013420:	4413      	add	r3, r2
 8013422:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013426:	701a      	strb	r2, [r3, #0]
        	   }
         	  if(http_post_payload_len+q->len<=LWIP_HTTPD_POST_MAX_PAYLOAD_LEN){
 8013428:	4b2c      	ldr	r3, [pc, #176]	; (80134dc <httpd_post_receive_data+0x3b0>)
 801342a:	881b      	ldrh	r3, [r3, #0]
 801342c:	461a      	mov	r2, r3
 801342e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013430:	895b      	ldrh	r3, [r3, #10]
 8013432:	4413      	add	r3, r2
 8013434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013438:	dc2d      	bgt.n	8013496 <httpd_post_receive_data+0x36a>
         		  MEMCPY(http_post_payload+http_post_payload_len,q->payload,q->len);
 801343a:	4b28      	ldr	r3, [pc, #160]	; (80134dc <httpd_post_receive_data+0x3b0>)
 801343c:	881b      	ldrh	r3, [r3, #0]
 801343e:	461a      	mov	r2, r3
 8013440:	4b27      	ldr	r3, [pc, #156]	; (80134e0 <httpd_post_receive_data+0x3b4>)
 8013442:	18d0      	adds	r0, r2, r3
 8013444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013446:	6859      	ldr	r1, [r3, #4]
 8013448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801344a:	895b      	ldrh	r3, [r3, #10]
 801344c:	461a      	mov	r2, r3
 801344e:	f00b ff5d 	bl	801f30c <memcpy>
         		  http_post_payload_len+=q->len;
 8013452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013454:	895a      	ldrh	r2, [r3, #10]
 8013456:	4b21      	ldr	r3, [pc, #132]	; (80134dc <httpd_post_receive_data+0x3b0>)
 8013458:	881b      	ldrh	r3, [r3, #0]
 801345a:	4413      	add	r3, r2
 801345c:	b29a      	uxth	r2, r3
 801345e:	4b1f      	ldr	r3, [pc, #124]	; (80134dc <httpd_post_receive_data+0x3b0>)
 8013460:	801a      	strh	r2, [r3, #0]
                  retSD=f_open(&file,filename_upload,FA_OPEN_APPEND|FA_WRITE);
 8013462:	2232      	movs	r2, #50	; 0x32
 8013464:	491f      	ldr	r1, [pc, #124]	; (80134e4 <httpd_post_receive_data+0x3b8>)
 8013466:	4820      	ldr	r0, [pc, #128]	; (80134e8 <httpd_post_receive_data+0x3bc>)
 8013468:	f7fa ff68 	bl	800e33c <f_open>
 801346c:	4603      	mov	r3, r0
 801346e:	461a      	mov	r2, r3
 8013470:	4b1e      	ldr	r3, [pc, #120]	; (80134ec <httpd_post_receive_data+0x3c0>)
 8013472:	701a      	strb	r2, [r3, #0]
         	      retSD = f_write(&file, http_post_payload, q->len, (void *)&byteswritten);	//在文件内写入wtext内的内容
 8013474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013476:	895b      	ldrh	r3, [r3, #10]
 8013478:	461a      	mov	r2, r3
 801347a:	f107 031c 	add.w	r3, r7, #28
 801347e:	4918      	ldr	r1, [pc, #96]	; (80134e0 <httpd_post_receive_data+0x3b4>)
 8013480:	4819      	ldr	r0, [pc, #100]	; (80134e8 <httpd_post_receive_data+0x3bc>)
 8013482:	f7fb fb1b 	bl	800eabc <f_write>
 8013486:	4603      	mov	r3, r0
 8013488:	461a      	mov	r2, r3
 801348a:	4b18      	ldr	r3, [pc, #96]	; (80134ec <httpd_post_receive_data+0x3c0>)
 801348c:	701a      	strb	r2, [r3, #0]
         	      f_sync(&file);
 801348e:	4816      	ldr	r0, [pc, #88]	; (80134e8 <httpd_post_receive_data+0x3bc>)
 8013490:	f7fb fcb8 	bl	800ee04 <f_sync>
 8013494:	e002      	b.n	801349c <httpd_post_receive_data+0x370>

         	  }else{

         		  http_post_payload_full_flag=1;
 8013496:	2301      	movs	r3, #1
 8013498:	643b      	str	r3, [r7, #64]	; 0x40
 801349a:	e006      	b.n	80134aa <httpd_post_receive_data+0x37e>
         		  break;
         	  }
         	  q=q->next;
 801349c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	647b      	str	r3, [r7, #68]	; 0x44
           while(q!=NULL){
 80134a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	f47f af59 	bne.w	801335c <httpd_post_receive_data+0x230>
           }
            }
           pbuf_free(p);
 80134aa:	6838      	ldr	r0, [r7, #0]
 80134ac:	f002 fcfe 	bl	8015eac <pbuf_free>


    	http_post_payload_len=0;
 80134b0:	4b0a      	ldr	r3, [pc, #40]	; (80134dc <httpd_post_receive_data+0x3b0>)
 80134b2:	2200      	movs	r2, #0
 80134b4:	801a      	strh	r2, [r3, #0]



    /* not returning ERR_OK aborts the connection, so return ERR_OK unless the
       conenction is unknown */
    return ERR_OK;
 80134b6:	2300      	movs	r3, #0
 80134b8:	e001      	b.n	80134be <httpd_post_receive_data+0x392>
  }
  return ERR_VAL;
 80134ba:	f06f 0305 	mvn.w	r3, #5
}
 80134be:	4618      	mov	r0, r3
 80134c0:	3748      	adds	r7, #72	; 0x48
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}
 80134c6:	bf00      	nop
 80134c8:	20010e2c 	.word	0x20010e2c
 80134cc:	20011370 	.word	0x20011370
 80134d0:	20011374 	.word	0x20011374
 80134d4:	080216d0 	.word	0x080216d0
 80134d8:	080216d4 	.word	0x080216d4
 80134dc:	2000c35c 	.word	0x2000c35c
 80134e0:	2000835c 	.word	0x2000835c
 80134e4:	20010df8 	.word	0x20010df8
 80134e8:	20010efc 	.word	0x20010efc
 80134ec:	2000d808 	.word	0x2000d808

080134f0 <httpd_post_finished>:


void
httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b084      	sub	sp, #16
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	60b9      	str	r1, [r7, #8]
 80134fa:	4613      	mov	r3, r2
 80134fc:	80fb      	strh	r3, [r7, #6]
  /* default page is "login failed" */
  snprintf(response_uri, response_uri_len, "/loginfail.html");
 80134fe:	88fb      	ldrh	r3, [r7, #6]
 8013500:	4a0f      	ldr	r2, [pc, #60]	; (8013540 <httpd_post_finished+0x50>)
 8013502:	4619      	mov	r1, r3
 8013504:	68b8      	ldr	r0, [r7, #8]
 8013506:	f00b ffff 	bl	801f508 <sniprintf>
  if (current_connection == connection) {
 801350a:	4b0e      	ldr	r3, [pc, #56]	; (8013544 <httpd_post_finished+0x54>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	68fa      	ldr	r2, [r7, #12]
 8013510:	429a      	cmp	r2, r3
 8013512:	d110      	bne.n	8013536 <httpd_post_finished+0x46>
    if (valid_connection == connection) {
 8013514:	4b0c      	ldr	r3, [pc, #48]	; (8013548 <httpd_post_finished+0x58>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	68fa      	ldr	r2, [r7, #12]
 801351a:	429a      	cmp	r2, r3
 801351c:	d105      	bne.n	801352a <httpd_post_finished+0x3a>
      /* login succeeded */
      snprintf(response_uri, response_uri_len, "/session.html");
 801351e:	88fb      	ldrh	r3, [r7, #6]
 8013520:	4a0a      	ldr	r2, [pc, #40]	; (801354c <httpd_post_finished+0x5c>)
 8013522:	4619      	mov	r1, r3
 8013524:	68b8      	ldr	r0, [r7, #8]
 8013526:	f00b ffef 	bl	801f508 <sniprintf>
    }
    current_connection = NULL;
 801352a:	4b06      	ldr	r3, [pc, #24]	; (8013544 <httpd_post_finished+0x54>)
 801352c:	2200      	movs	r2, #0
 801352e:	601a      	str	r2, [r3, #0]
    valid_connection = NULL;
 8013530:	4b05      	ldr	r3, [pc, #20]	; (8013548 <httpd_post_finished+0x58>)
 8013532:	2200      	movs	r2, #0
 8013534:	601a      	str	r2, [r3, #0]
  }
}
 8013536:	bf00      	nop
 8013538:	3710      	adds	r7, #16
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}
 801353e:	bf00      	nop
 8013540:	080216a0 	.word	0x080216a0
 8013544:	2000c7ac 	.word	0x2000c7ac
 8013548:	2000c7b0 	.word	0x2000c7b0
 801354c:	080216d8 	.word	0x080216d8

08013550 <http_state_eof>:



static void
http_state_eof(struct http_state *hs)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b082      	sub	sp, #8
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	695b      	ldr	r3, [r3, #20]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d007      	beq.n	8013570 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	695b      	ldr	r3, [r3, #20]
 8013564:	4618      	mov	r0, r3
 8013566:	f7ff fd51 	bl	801300c <fs_close>
    hs->handle = NULL;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	2200      	movs	r2, #0
 801356e:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	6a1b      	ldr	r3, [r3, #32]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d007      	beq.n	8013588 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6a1b      	ldr	r3, [r3, #32]
 801357c:	4618      	mov	r0, r3
 801357e:	f002 fc95 	bl	8015eac <pbuf_free>
    hs->req = NULL;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	2200      	movs	r2, #0
 8013586:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8013588:	bf00      	nop
 801358a:	3708      	adds	r7, #8
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}

08013590 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b082      	sub	sp, #8
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d005      	beq.n	80135aa <http_state_free+0x1a>
    http_state_eof(hs);
 801359e:	6878      	ldr	r0, [r7, #4]
 80135a0:	f7ff ffd6 	bl	8013550 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f001 fa5d 	bl	8014a64 <mem_free>
  }
}
 80135aa:	bf00      	nop
 80135ac:	3708      	adds	r7, #8
 80135ae:	46bd      	mov	sp, r7
 80135b0:	bd80      	pop	{r7, pc}
	...

080135b4 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b086      	sub	sp, #24
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	60f8      	str	r0, [r7, #12]
 80135bc:	60b9      	str	r1, [r7, #8]
 80135be:	607a      	str	r2, [r7, #4]
 80135c0:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d106      	bne.n	80135d6 <http_write+0x22>
 80135c8:	4b2c      	ldr	r3, [pc, #176]	; (801367c <http_write+0xc8>)
 80135ca:	f240 324a 	movw	r2, #842	; 0x34a
 80135ce:	492c      	ldr	r1, [pc, #176]	; (8013680 <http_write+0xcc>)
 80135d0:	482c      	ldr	r0, [pc, #176]	; (8013684 <http_write+0xd0>)
 80135d2:	f00b fecb 	bl	801f36c <iprintf>
  len = *length;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	881b      	ldrh	r3, [r3, #0]
 80135da:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80135dc:	8afb      	ldrh	r3, [r7, #22]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d101      	bne.n	80135e6 <http_write+0x32>
    return ERR_OK;
 80135e2:	2300      	movs	r3, #0
 80135e4:	e045      	b.n	8013672 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80135ec:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80135ee:	8aba      	ldrh	r2, [r7, #20]
 80135f0:	8afb      	ldrh	r3, [r7, #22]
 80135f2:	429a      	cmp	r2, r3
 80135f4:	d201      	bcs.n	80135fa <http_write+0x46>
    len = max_len;
 80135f6:	8abb      	ldrh	r3, [r7, #20]
 80135f8:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135fe:	005b      	lsls	r3, r3, #1
 8013600:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8013602:	8afa      	ldrh	r2, [r7, #22]
 8013604:	8abb      	ldrh	r3, [r7, #20]
 8013606:	429a      	cmp	r2, r3
 8013608:	d901      	bls.n	801360e <http_write+0x5a>
    len = max_len;
 801360a:	8abb      	ldrh	r3, [r7, #20]
 801360c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 801360e:	78fb      	ldrb	r3, [r7, #3]
 8013610:	8afa      	ldrh	r2, [r7, #22]
 8013612:	68b9      	ldr	r1, [r7, #8]
 8013614:	68f8      	ldr	r0, [r7, #12]
 8013616:	f007 f9d9 	bl	801a9cc <tcp_write>
 801361a:	4603      	mov	r3, r0
 801361c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 801361e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013626:	d10f      	bne.n	8013648 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801362e:	2b00      	cmp	r3, #0
 8013630:	d004      	beq.n	801363c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8013638:	2b08      	cmp	r3, #8
 801363a:	d902      	bls.n	8013642 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 801363c:	2301      	movs	r3, #1
 801363e:	82fb      	strh	r3, [r7, #22]
 8013640:	e002      	b.n	8013648 <http_write+0x94>
      } else {
        len /= 2;
 8013642:	8afb      	ldrh	r3, [r7, #22]
 8013644:	085b      	lsrs	r3, r3, #1
 8013646:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8013648:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013650:	d102      	bne.n	8013658 <http_write+0xa4>
 8013652:	8afb      	ldrh	r3, [r7, #22]
 8013654:	2b01      	cmp	r3, #1
 8013656:	d8da      	bhi.n	801360e <http_write+0x5a>

  if (err == ERR_OK) {
 8013658:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d103      	bne.n	8013668 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	8afa      	ldrh	r2, [r7, #22]
 8013664:	801a      	strh	r2, [r3, #0]
 8013666:	e002      	b.n	801366e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2200      	movs	r2, #0
 801366c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 801366e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8013672:	4618      	mov	r0, r3
 8013674:	3718      	adds	r7, #24
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}
 801367a:	bf00      	nop
 801367c:	080216e8 	.word	0x080216e8
 8013680:	08021720 	.word	0x08021720
 8013684:	08021730 	.word	0x08021730

08013688 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b086      	sub	sp, #24
 801368c:	af00      	add	r7, sp, #0
 801368e:	60f8      	str	r0, [r7, #12]
 8013690:	60b9      	str	r1, [r7, #8]
 8013692:	4613      	mov	r3, r2
 8013694:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d00c      	beq.n	80136b6 <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d007      	beq.n	80136b6 <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 80136a6:	4b1f      	ldr	r3, [pc, #124]	; (8013724 <http_close_or_abort_conn+0x9c>)
 80136a8:	2200      	movs	r2, #0
 80136aa:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80136ac:	223f      	movs	r2, #63	; 0x3f
 80136ae:	491d      	ldr	r1, [pc, #116]	; (8013724 <http_close_or_abort_conn+0x9c>)
 80136b0:	68b8      	ldr	r0, [r7, #8]
 80136b2:	f7ff ff1d 	bl	80134f0 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 80136b6:	2100      	movs	r1, #0
 80136b8:	68f8      	ldr	r0, [r7, #12]
 80136ba:	f004 fa49 	bl	8017b50 <tcp_arg>
  altcp_recv(pcb, NULL);
 80136be:	2100      	movs	r1, #0
 80136c0:	68f8      	ldr	r0, [r7, #12]
 80136c2:	f004 fa57 	bl	8017b74 <tcp_recv>
  altcp_err(pcb, NULL);
 80136c6:	2100      	movs	r1, #0
 80136c8:	68f8      	ldr	r0, [r7, #12]
 80136ca:	f004 fa97 	bl	8017bfc <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80136ce:	2200      	movs	r2, #0
 80136d0:	2100      	movs	r1, #0
 80136d2:	68f8      	ldr	r0, [r7, #12]
 80136d4:	f004 facc 	bl	8017c70 <tcp_poll>
  altcp_sent(pcb, NULL);
 80136d8:	2100      	movs	r1, #0
 80136da:	68f8      	ldr	r0, [r7, #12]
 80136dc:	f004 fa6c 	bl	8017bb8 <tcp_sent>
  if (hs != NULL) {
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d002      	beq.n	80136ec <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 80136e6:	68b8      	ldr	r0, [r7, #8]
 80136e8:	f7ff ff52 	bl	8013590 <http_state_free>
  }

  if (abort_conn) {
 80136ec:	79fb      	ldrb	r3, [r7, #7]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d004      	beq.n	80136fc <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 80136f2:	68f8      	ldr	r0, [r7, #12]
 80136f4:	f003 f96e 	bl	80169d4 <tcp_abort>
    return ERR_OK;
 80136f8:	2300      	movs	r3, #0
 80136fa:	e00f      	b.n	801371c <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 80136fc:	68f8      	ldr	r0, [r7, #12]
 80136fe:	f003 f87f 	bl	8016800 <tcp_close>
 8013702:	4603      	mov	r3, r0
 8013704:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8013706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d004      	beq.n	8013718 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 801370e:	2204      	movs	r2, #4
 8013710:	4905      	ldr	r1, [pc, #20]	; (8013728 <http_close_or_abort_conn+0xa0>)
 8013712:	68f8      	ldr	r0, [r7, #12]
 8013714:	f004 faac 	bl	8017c70 <tcp_poll>
  }
  return err;
 8013718:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801371c:	4618      	mov	r0, r3
 801371e:	3718      	adds	r7, #24
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}
 8013724:	2000c760 	.word	0x2000c760
 8013728:	0801435f 	.word	0x0801435f

0801372c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b082      	sub	sp, #8
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8013736:	2200      	movs	r2, #0
 8013738:	6839      	ldr	r1, [r7, #0]
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f7ff ffa4 	bl	8013688 <http_close_or_abort_conn>
 8013740:	4603      	mov	r3, r0
}
 8013742:	4618      	mov	r0, r3
 8013744:	3708      	adds	r7, #8
 8013746:	46bd      	mov	sp, r7
 8013748:	bd80      	pop	{r7, pc}

0801374a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 801374a:	b580      	push	{r7, lr}
 801374c:	b082      	sub	sp, #8
 801374e:	af00      	add	r7, sp, #0
 8013750:	6078      	str	r0, [r7, #4]
 8013752:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8013754:	6839      	ldr	r1, [r7, #0]
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f7ff ffe8 	bl	801372c <http_close_conn>
  }
}
 801375c:	bf00      	nop
 801375e:	3708      	adds	r7, #8
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}

08013764 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b086      	sub	sp, #24
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
 801376c:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d003      	beq.n	801377c <extract_uri_parameters+0x18>
 8013774:	683b      	ldr	r3, [r7, #0]
 8013776:	781b      	ldrb	r3, [r3, #0]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d101      	bne.n	8013780 <extract_uri_parameters+0x1c>
    return (0);
 801377c:	2300      	movs	r3, #0
 801377e:	e04e      	b.n	801381e <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8013784:	2300      	movs	r3, #0
 8013786:	613b      	str	r3, [r7, #16]
 8013788:	e042      	b.n	8013810 <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 801378a:	687a      	ldr	r2, [r7, #4]
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	330a      	adds	r3, #10
 8013790:	009b      	lsls	r3, r3, #2
 8013792:	4413      	add	r3, r2
 8013794:	697a      	ldr	r2, [r7, #20]
 8013796:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 8013798:	697b      	ldr	r3, [r7, #20]
 801379a:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 801379c:	2126      	movs	r1, #38	; 0x26
 801379e:	6978      	ldr	r0, [r7, #20]
 80137a0:	f00b ff86 	bl	801f6b0 <strchr>
 80137a4:	6178      	str	r0, [r7, #20]
    if (pair) {
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d006      	beq.n	80137ba <extract_uri_parameters+0x56>
      *pair = '\0';
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	2200      	movs	r2, #0
 80137b0:	701a      	strb	r2, [r3, #0]
      pair++;
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	3301      	adds	r3, #1
 80137b6:	617b      	str	r3, [r7, #20]
 80137b8:	e00c      	b.n	80137d4 <extract_uri_parameters+0x70>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 80137ba:	2120      	movs	r1, #32
 80137bc:	68f8      	ldr	r0, [r7, #12]
 80137be:	f00b ff77 	bl	801f6b0 <strchr>
 80137c2:	6178      	str	r0, [r7, #20]
      if (pair) {
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d002      	beq.n	80137d0 <extract_uri_parameters+0x6c>
        *pair = '\0';
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	2200      	movs	r2, #0
 80137ce:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 80137d0:	2300      	movs	r3, #0
 80137d2:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 80137d4:	213d      	movs	r1, #61	; 0x3d
 80137d6:	68f8      	ldr	r0, [r7, #12]
 80137d8:	f00b ff6a 	bl	801f6b0 <strchr>
 80137dc:	60f8      	str	r0, [r7, #12]
    if (equals) {
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d00b      	beq.n	80137fc <extract_uri_parameters+0x98>
      *equals = '\0';
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	2200      	movs	r2, #0
 80137e8:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	1c5a      	adds	r2, r3, #1
 80137ee:	6879      	ldr	r1, [r7, #4]
 80137f0:	693b      	ldr	r3, [r7, #16]
 80137f2:	331a      	adds	r3, #26
 80137f4:	009b      	lsls	r3, r3, #2
 80137f6:	440b      	add	r3, r1
 80137f8:	605a      	str	r2, [r3, #4]
 80137fa:	e006      	b.n	801380a <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 80137fc:	687a      	ldr	r2, [r7, #4]
 80137fe:	693b      	ldr	r3, [r7, #16]
 8013800:	331a      	adds	r3, #26
 8013802:	009b      	lsls	r3, r3, #2
 8013804:	4413      	add	r3, r2
 8013806:	2200      	movs	r2, #0
 8013808:	605a      	str	r2, [r3, #4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	3301      	adds	r3, #1
 801380e:	613b      	str	r3, [r7, #16]
 8013810:	693b      	ldr	r3, [r7, #16]
 8013812:	2b0f      	cmp	r3, #15
 8013814:	dc02      	bgt.n	801381c <extract_uri_parameters+0xb8>
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d1b6      	bne.n	801378a <extract_uri_parameters+0x26>
    }
  }

  return loop;
 801381c:	693b      	ldr	r3, [r7, #16]
}
 801381e:	4618      	mov	r0, r3
 8013820:	3718      	adds	r7, #24
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}
	...

08013828 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b084      	sub	sp, #16
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	695b      	ldr	r3, [r3, #20]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d105      	bne.n	8013846 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 801383a:	6839      	ldr	r1, [r7, #0]
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f7ff ff84 	bl	801374a <http_eof>
    return 0;
 8013842:	2300      	movs	r3, #0
 8013844:	e016      	b.n	8013874 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	695b      	ldr	r3, [r3, #20]
 801384a:	4618      	mov	r0, r3
 801384c:	f7ff fbe8 	bl	8013020 <fs_bytes_left>
 8013850:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	2b00      	cmp	r3, #0
 8013856:	dc05      	bgt.n	8013864 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8013858:	6839      	ldr	r1, [r7, #0]
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f7ff ff75 	bl	801374a <http_eof>
    return 0;
 8013860:	2300      	movs	r3, #0
 8013862:	e007      	b.n	8013874 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8013864:	4b05      	ldr	r3, [pc, #20]	; (801387c <http_check_eof+0x54>)
 8013866:	f240 52ce 	movw	r2, #1486	; 0x5ce
 801386a:	4905      	ldr	r1, [pc, #20]	; (8013880 <http_check_eof+0x58>)
 801386c:	4805      	ldr	r0, [pc, #20]	; (8013884 <http_check_eof+0x5c>)
 801386e:	f00b fd7d 	bl	801f36c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8013872:	2301      	movs	r3, #1
}
 8013874:	4618      	mov	r0, r3
 8013876:	3710      	adds	r7, #16
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}
 801387c:	080216e8 	.word	0x080216e8
 8013880:	08021758 	.word	0x08021758
 8013884:	08021730 	.word	0x08021730

08013888 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b084      	sub	sp, #16
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8013892:	2300      	movs	r3, #0
 8013894:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801389a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801389e:	4293      	cmp	r3, r2
 80138a0:	d803      	bhi.n	80138aa <http_send_data_nonssi+0x22>
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	e001      	b.n	80138ae <http_send_data_nonssi+0x26>
 80138aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80138ae:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80138b0:	683b      	ldr	r3, [r7, #0]
 80138b2:	6999      	ldr	r1, [r3, #24]
 80138b4:	f107 020c 	add.w	r2, r7, #12
 80138b8:	2300      	movs	r3, #0
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f7ff fe7a 	bl	80135b4 <http_write>
 80138c0:	4603      	mov	r3, r0
 80138c2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 80138c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d10d      	bne.n	80138e8 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 80138cc:	2301      	movs	r3, #1
 80138ce:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	699b      	ldr	r3, [r3, #24]
 80138d4:	89ba      	ldrh	r2, [r7, #12]
 80138d6:	441a      	add	r2, r3
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138e0:	89ba      	ldrh	r2, [r7, #12]
 80138e2:	1a9a      	subs	r2, r3, r2
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 80138e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	3710      	adds	r7, #16
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}

080138f2 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80138f2:	b580      	push	{r7, lr}
 80138f4:	b084      	sub	sp, #16
 80138f6:	af00      	add	r7, sp, #0
 80138f8:	6078      	str	r0, [r7, #4]
 80138fa:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80138fc:	2300      	movs	r3, #0
 80138fe:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d101      	bne.n	801390a <http_send+0x18>
    return 0;
 8013906:	2300      	movs	r3, #0
 8013908:	e025      	b.n	8013956 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801390e:	2b00      	cmp	r3, #0
 8013910:	d108      	bne.n	8013924 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8013912:	6839      	ldr	r1, [r7, #0]
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f7ff ff87 	bl	8013828 <http_check_eof>
 801391a:	4603      	mov	r3, r0
 801391c:	2b00      	cmp	r3, #0
 801391e:	d101      	bne.n	8013924 <http_send+0x32>
      return 0;
 8013920:	2300      	movs	r3, #0
 8013922:	e018      	b.n	8013956 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8013924:	6839      	ldr	r1, [r7, #0]
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	f7ff ffae 	bl	8013888 <http_send_data_nonssi>
 801392c:	4603      	mov	r3, r0
 801392e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013934:	2b00      	cmp	r3, #0
 8013936:	d10d      	bne.n	8013954 <http_send+0x62>
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	695b      	ldr	r3, [r3, #20]
 801393c:	4618      	mov	r0, r3
 801393e:	f7ff fb6f 	bl	8013020 <fs_bytes_left>
 8013942:	4603      	mov	r3, r0
 8013944:	2b00      	cmp	r3, #0
 8013946:	dc05      	bgt.n	8013954 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8013948:	6839      	ldr	r1, [r7, #0]
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f7ff fefd 	bl	801374a <http_eof>
    return 0;
 8013950:	2300      	movs	r3, #0
 8013952:	e000      	b.n	8013956 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8013954:	7bfb      	ldrb	r3, [r7, #15]
}
 8013956:	4618      	mov	r0, r3
 8013958:	3710      	adds	r7, #16
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}
	...

08013960 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b084      	sub	sp, #16
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 801396a:	683b      	ldr	r3, [r7, #0]
 801396c:	4a1c      	ldr	r2, [pc, #112]	; (80139e0 <http_get_404_file+0x80>)
 801396e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8013970:	687a      	ldr	r2, [r7, #4]
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	4619      	mov	r1, r3
 8013978:	4610      	mov	r0, r2
 801397a:	f7ff fb09 	bl	8012f90 <fs_open>
 801397e:	4603      	mov	r3, r0
 8013980:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d024      	beq.n	80139d4 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 801398a:	683b      	ldr	r3, [r7, #0]
 801398c:	4a15      	ldr	r2, [pc, #84]	; (80139e4 <http_get_404_file+0x84>)
 801398e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8013990:	687a      	ldr	r2, [r7, #4]
 8013992:	683b      	ldr	r3, [r7, #0]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	4619      	mov	r1, r3
 8013998:	4610      	mov	r0, r2
 801399a:	f7ff faf9 	bl	8012f90 <fs_open>
 801399e:	4603      	mov	r3, r0
 80139a0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80139a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d014      	beq.n	80139d4 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	4a0e      	ldr	r2, [pc, #56]	; (80139e8 <http_get_404_file+0x88>)
 80139ae:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 80139b0:	687a      	ldr	r2, [r7, #4]
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	4619      	mov	r1, r3
 80139b8:	4610      	mov	r0, r2
 80139ba:	f7ff fae9 	bl	8012f90 <fs_open>
 80139be:	4603      	mov	r3, r0
 80139c0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80139c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d004      	beq.n	80139d4 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	2200      	movs	r2, #0
 80139ce:	601a      	str	r2, [r3, #0]
        return NULL;
 80139d0:	2300      	movs	r3, #0
 80139d2:	e000      	b.n	80139d6 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80139d4:	687b      	ldr	r3, [r7, #4]
}
 80139d6:	4618      	mov	r0, r3
 80139d8:	3710      	adds	r7, #16
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}
 80139de:	bf00      	nop
 80139e0:	08021790 	.word	0x08021790
 80139e4:	0802179c 	.word	0x0802179c
 80139e8:	080217a8 	.word	0x080217a8

080139ec <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b082      	sub	sp, #8
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 80139f4:	4b08      	ldr	r3, [pc, #32]	; (8013a18 <http_handle_post_finished+0x2c>)
 80139f6:	2200      	movs	r2, #0
 80139f8:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80139fa:	223f      	movs	r2, #63	; 0x3f
 80139fc:	4906      	ldr	r1, [pc, #24]	; (8013a18 <http_handle_post_finished+0x2c>)
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	f7ff fd76 	bl	80134f0 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8013a04:	2200      	movs	r2, #0
 8013a06:	4904      	ldr	r1, [pc, #16]	; (8013a18 <http_handle_post_finished+0x2c>)
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f000 fae9 	bl	8013fe0 <http_find_file>
 8013a0e:	4603      	mov	r3, r0
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3708      	adds	r7, #8
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	2000c760 	.word	0x2000c760

08013a1c <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b084      	sub	sp, #16
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
 8013a24:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d014      	beq.n	8013a56 <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013a32:	683a      	ldr	r2, [r7, #0]
 8013a34:	8912      	ldrh	r2, [r2, #8]
 8013a36:	4293      	cmp	r3, r2
 8013a38:	d204      	bcs.n	8013a44 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8013a42:	e008      	b.n	8013a56 <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013a4a:	683a      	ldr	r2, [r7, #0]
 8013a4c:	8912      	ldrh	r2, [r2, #8]
 8013a4e:	1a9a      	subs	r2, r3, r2
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d006      	beq.n	8013a6a <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 8013a5c:	6839      	ldr	r1, [r7, #0]
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f7ff fb64 	bl	801312c <httpd_post_receive_data>
 8013a64:	4603      	mov	r3, r0
 8013a66:	73fb      	strb	r3, [r7, #15]
 8013a68:	e001      	b.n	8013a6e <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 8013a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d003      	beq.n	8013a7e <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
  if (hs->post_content_len_left == 0) {
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d104      	bne.n	8013a92 <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f7ff ffaf 	bl	80139ec <http_handle_post_finished>
 8013a8e:	4603      	mov	r3, r0
 8013a90:	e000      	b.n	8013a94 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 8013a92:	2300      	movs	r3, #0
}
 8013a94:	4618      	mov	r0, r3
 8013a96:	3710      	adds	r7, #16
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}

08013a9c <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b0ac      	sub	sp, #176	; 0xb0
 8013aa0:	af04      	add	r7, sp, #16
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	607a      	str	r2, [r7, #4]
 8013aa8:	807b      	strh	r3, [r7, #2]




  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8013aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013aae:	1c58      	adds	r0, r3, #1
 8013ab0:	887a      	ldrh	r2, [r7, #2]
 8013ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013ab6:	1c59      	adds	r1, r3, #1
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	1acb      	subs	r3, r1, r3
 8013abc:	1ad3      	subs	r3, r2, r3
 8013abe:	461a      	mov	r2, r3
 8013ac0:	49a6      	ldr	r1, [pc, #664]	; (8013d5c <http_post_request+0x2c0>)
 8013ac2:	f000 fe2d 	bl	8014720 <lwip_strnstr>
 8013ac6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if (crlfcrlf != NULL) {
 8013aca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	f000 813e 	beq.w	8013d50 <http_post_request+0x2b4>


#define HTTP_HDR_BOUNDARY "boundary="
	//memcpy(boundary,0,300);

memcpy(boundary,boundary_prefix,5);
 8013ad4:	4ba2      	ldr	r3, [pc, #648]	; (8013d60 <http_post_request+0x2c4>)
 8013ad6:	4aa3      	ldr	r2, [pc, #652]	; (8013d64 <http_post_request+0x2c8>)
 8013ad8:	6810      	ldr	r0, [r2, #0]
 8013ada:	6018      	str	r0, [r3, #0]
 8013adc:	7912      	ldrb	r2, [r2, #4]
 8013ade:	711a      	strb	r2, [r3, #4]
#define HTTP_HDR_BOUNDARY_LEN (sizeof HTTP_HDR_BOUNDARY-1)
 boundary_start =strnstr(uri_end+1,HTTP_HDR_BOUNDARY,crlfcrlf-(uri_end+1));
 8013ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013ae4:	1c58      	adds	r0, r3, #1
 8013ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013aea:	3301      	adds	r3, #1
 8013aec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8013af0:	1ad3      	subs	r3, r2, r3
 8013af2:	461a      	mov	r2, r3
 8013af4:	499c      	ldr	r1, [pc, #624]	; (8013d68 <http_post_request+0x2cc>)
 8013af6:	f00b fe02 	bl	801f6fe <strnstr>
 8013afa:	4603      	mov	r3, r0
 8013afc:	4a9b      	ldr	r2, [pc, #620]	; (8013d6c <http_post_request+0x2d0>)
 8013afe:	6013      	str	r3, [r2, #0]
boundary_start+=HTTP_HDR_BOUNDARY_LEN;
 8013b00:	4b9a      	ldr	r3, [pc, #616]	; (8013d6c <http_post_request+0x2d0>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	3309      	adds	r3, #9
 8013b06:	4a99      	ldr	r2, [pc, #612]	; (8013d6c <http_post_request+0x2d0>)
 8013b08:	6013      	str	r3, [r2, #0]
boundary_end =strnstr(boundary_start+1, CRLF,crlfcrlf-(boundary_start+1));
 8013b0a:	4b98      	ldr	r3, [pc, #608]	; (8013d6c <http_post_request+0x2d0>)
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	1c58      	adds	r0, r3, #1
 8013b10:	4b96      	ldr	r3, [pc, #600]	; (8013d6c <http_post_request+0x2d0>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	3301      	adds	r3, #1
 8013b16:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8013b1a:	1ad3      	subs	r3, r2, r3
 8013b1c:	461a      	mov	r2, r3
 8013b1e:	4994      	ldr	r1, [pc, #592]	; (8013d70 <http_post_request+0x2d4>)
 8013b20:	f00b fded 	bl	801f6fe <strnstr>
 8013b24:	4603      	mov	r3, r0
 8013b26:	4a93      	ldr	r2, [pc, #588]	; (8013d74 <http_post_request+0x2d8>)
 8013b28:	6013      	str	r3, [r2, #0]
 boundary_lens=boundary_end-boundary_start;
 8013b2a:	4b92      	ldr	r3, [pc, #584]	; (8013d74 <http_post_request+0x2d8>)
 8013b2c:	681a      	ldr	r2, [r3, #0]
 8013b2e:	4b8f      	ldr	r3, [pc, #572]	; (8013d6c <http_post_request+0x2d0>)
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	1ad3      	subs	r3, r2, r3
 8013b34:	4a90      	ldr	r2, [pc, #576]	; (8013d78 <http_post_request+0x2dc>)
 8013b36:	6013      	str	r3, [r2, #0]
 char str[100]="";
 8013b38:	2300      	movs	r3, #0
 8013b3a:	617b      	str	r3, [r7, #20]
 8013b3c:	f107 0318 	add.w	r3, r7, #24
 8013b40:	2260      	movs	r2, #96	; 0x60
 8013b42:	2100      	movs	r1, #0
 8013b44:	4618      	mov	r0, r3
 8013b46:	f00b fc09 	bl	801f35c <memset>
 MEMCPY(str,boundary_start,boundary_lens);
 8013b4a:	4b88      	ldr	r3, [pc, #544]	; (8013d6c <http_post_request+0x2d0>)
 8013b4c:	6819      	ldr	r1, [r3, #0]
 8013b4e:	4b8a      	ldr	r3, [pc, #552]	; (8013d78 <http_post_request+0x2dc>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	461a      	mov	r2, r3
 8013b54:	f107 0314 	add.w	r3, r7, #20
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f00b fbd7 	bl	801f30c <memcpy>
 strcat(boundary,str);
 8013b5e:	f107 0314 	add.w	r3, r7, #20
 8013b62:	4619      	mov	r1, r3
 8013b64:	487e      	ldr	r0, [pc, #504]	; (8013d60 <http_post_request+0x2c4>)
 8013b66:	f00b fd94 	bl	801f692 <strcat>
 //printf("%s",boundary);


    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8013b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013b6e:	1c58      	adds	r0, r3, #1
 8013b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013b74:	3301      	adds	r3, #1
 8013b76:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8013b7a:	1ad3      	subs	r3, r2, r3
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	497f      	ldr	r1, [pc, #508]	; (8013d7c <http_post_request+0x2e0>)
 8013b80:	f000 fdce 	bl	8014720 <lwip_strnstr>
 8013b84:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if (scontent_len != NULL) {
 8013b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	f000 80dc 	beq.w	8013d4a <http_post_request+0x2ae>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8013b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b96:	3310      	adds	r3, #16
 8013b98:	220a      	movs	r2, #10
 8013b9a:	4975      	ldr	r1, [pc, #468]	; (8013d70 <http_post_request+0x2d4>)
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f000 fdbf 	bl	8014720 <lwip_strnstr>
 8013ba2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
      if (scontent_len_end != NULL) {
 8013ba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	f000 80cd 	beq.w	8013d4a <http_post_request+0x2ae>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 8013bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013bb4:	3310      	adds	r3, #16
 8013bb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        content_len = atoi(content_len_num);
 8013bba:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8013bbe:	f00b fb6f 	bl	801f2a0 <atoi>
 8013bc2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (content_len == 0) {
 8013bc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d10e      	bne.n	8013bec <http_post_request+0x150>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8013bce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013bd2:	781b      	ldrb	r3, [r3, #0]
 8013bd4:	2b30      	cmp	r3, #48	; 0x30
 8013bd6:	d105      	bne.n	8013be4 <http_post_request+0x148>
 8013bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013bdc:	3301      	adds	r3, #1
 8013bde:	781b      	ldrb	r3, [r3, #0]
 8013be0:	2b0d      	cmp	r3, #13
 8013be2:	d003      	beq.n	8013bec <http_post_request+0x150>
            content_len = -1;
 8013be4:	f04f 33ff 	mov.w	r3, #4294967295
 8013be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
          }
        }
        if (content_len >= 0) {
 8013bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f2c0 80a7 	blt.w	8013d44 <http_post_request+0x2a8>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 8013bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013bfa:	3301      	adds	r3, #1
 8013bfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8013c00:	887a      	ldrh	r2, [r7, #2]
 8013c02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013c06:	1d19      	adds	r1, r3, #4
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	1acb      	subs	r3, r1, r3
 8013c0c:	429a      	cmp	r2, r3
 8013c0e:	db06      	blt.n	8013c1e <http_post_request+0x182>
 8013c10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013c14:	1d1a      	adds	r2, r3, #4
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	1ad3      	subs	r3, r2, r3
 8013c1a:	b29b      	uxth	r3, r3
 8013c1c:	e000      	b.n	8013c20 <http_post_request+0x184>
 8013c1e:	887b      	ldrh	r3, [r7, #2]
 8013c20:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8013c24:	887a      	ldrh	r2, [r7, #2]
 8013c26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013c2a:	1d19      	adds	r1, r3, #4
 8013c2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013c30:	1acb      	subs	r3, r1, r3
 8013c32:	429a      	cmp	r2, r3
 8013c34:	db07      	blt.n	8013c46 <http_post_request+0x1aa>
 8013c36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013c3a:	1d1a      	adds	r2, r3, #4
 8013c3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013c40:	1ad3      	subs	r3, r2, r3
 8013c42:	b29b      	uxth	r3, r3
 8013c44:	e000      	b.n	8013c48 <http_post_request+0x1ac>
 8013c46:	887b      	ldrh	r3, [r7, #2]
 8013c48:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
          u8_t post_auto_wnd = 1;
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
          http_uri_buf[0] = 0;
 8013c52:	4b4b      	ldr	r3, [pc, #300]	; (8013d80 <http_post_request+0x2e4>)
 8013c54:	2200      	movs	r2, #0
 8013c56:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 8013c58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8013c60:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8013c64:	f107 037a 	add.w	r3, r7, #122	; 0x7a
 8013c68:	9303      	str	r3, [sp, #12]
 8013c6a:	233f      	movs	r3, #63	; 0x3f
 8013c6c:	9302      	str	r3, [sp, #8]
 8013c6e:	4b44      	ldr	r3, [pc, #272]	; (8013d80 <http_post_request+0x2e4>)
 8013c70:	9301      	str	r3, [sp, #4]
 8013c72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013c76:	9300      	str	r3, [sp, #0]
 8013c78:	4613      	mov	r3, r2
 8013c7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013c7e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013c82:	68b8      	ldr	r0, [r7, #8]
 8013c84:	f7ff f9fa 	bl	801307c <httpd_post_begin>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 8013c8e:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d14f      	bne.n	8013d36 <http_post_request+0x29a>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            u16_t start_offset = hdr_len;
 8013c9c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8013ca0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 8013ca4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 8013cae:	e00c      	b.n	8013cca <http_post_request+0x22e>
              start_offset -= q->len;
 8013cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013cb4:	895b      	ldrh	r3, [r3, #10]
 8013cb6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8013cba:	1ad3      	subs	r3, r2, r3
 8013cbc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
              q = q->next;
 8013cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            while ((q != NULL) && (q->len <= start_offset)) {
 8013cca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d006      	beq.n	8013ce0 <http_post_request+0x244>
 8013cd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013cd6:	895b      	ldrh	r3, [r3, #10]
 8013cd8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8013cdc:	429a      	cmp	r2, r3
 8013cde:	d2e7      	bcs.n	8013cb0 <http_post_request+0x214>
            }
            if (q != NULL) {
 8013ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d011      	beq.n	8013d0c <http_post_request+0x270>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 8013ce8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8013cec:	4619      	mov	r1, r3
 8013cee:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8013cf2:	f002 f843 	bl	8015d7c <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 8013cf6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8013cfa:	f002 f97d 	bl	8015ff8 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8013cfe:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013d02:	68b8      	ldr	r0, [r7, #8]
 8013d04:	f7ff fe8a 	bl	8013a1c <http_post_rxpbuf>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	e023      	b.n	8013d54 <http_post_request+0x2b8>
            } else if (hs->post_content_len_left == 0) {
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d10d      	bne.n	8013d32 <http_post_request+0x296>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8013d16:	2241      	movs	r2, #65	; 0x41
 8013d18:	2100      	movs	r1, #0
 8013d1a:	2000      	movs	r0, #0
 8013d1c:	f001 fdd0 	bl	80158c0 <pbuf_alloc>
 8013d20:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
              return http_post_rxpbuf(hs, q);
 8013d24:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013d28:	68b8      	ldr	r0, [r7, #8]
 8013d2a:	f7ff fe77 	bl	8013a1c <http_post_rxpbuf>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	e010      	b.n	8013d54 <http_post_request+0x2b8>
            } else {
              return ERR_OK;
 8013d32:	2300      	movs	r3, #0
 8013d34:	e00e      	b.n	8013d54 <http_post_request+0x2b8>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 8013d36:	2200      	movs	r2, #0
 8013d38:	4911      	ldr	r1, [pc, #68]	; (8013d80 <http_post_request+0x2e4>)
 8013d3a:	68b8      	ldr	r0, [r7, #8]
 8013d3c:	f000 f950 	bl	8013fe0 <http_find_file>
 8013d40:	4603      	mov	r3, r0
 8013d42:	e007      	b.n	8013d54 <http_post_request+0x2b8>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 8013d44:	f06f 030f 	mvn.w	r3, #15
 8013d48:	e004      	b.n	8013d54 <http_post_request+0x2b8>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 8013d4a:	f06f 030f 	mvn.w	r3, #15
 8013d4e:	e001      	b.n	8013d54 <http_post_request+0x2b8>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 8013d50:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8013d54:	4618      	mov	r0, r3
 8013d56:	37a0      	adds	r7, #160	; 0xa0
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	080216b8 	.word	0x080216b8
 8013d60:	20011374 	.word	0x20011374
 8013d64:	20000030 	.word	0x20000030
 8013d68:	080217b4 	.word	0x080217b4
 8013d6c:	20010e10 	.word	0x20010e10
 8013d70:	080216b4 	.word	0x080216b4
 8013d74:	20010e30 	.word	0x20010e30
 8013d78:	20011130 	.word	0x20011130
 8013d7c:	080217c0 	.word	0x080217c0
 8013d80:	2000c760 	.word	0x2000c760

08013d84 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b092      	sub	sp, #72	; 0x48
 8013d88:	af02      	add	r7, sp, #8
 8013d8a:	60f8      	str	r0, [r7, #12]
 8013d8c:	60b9      	str	r1, [r7, #8]
 8013d8e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8013d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d106      	bne.n	8013da8 <http_parse_request+0x24>
 8013d9a:	4b87      	ldr	r3, [pc, #540]	; (8013fb8 <http_parse_request+0x234>)
 8013d9c:	f640 120c 	movw	r2, #2316	; 0x90c
 8013da0:	4986      	ldr	r1, [pc, #536]	; (8013fbc <http_parse_request+0x238>)
 8013da2:	4887      	ldr	r0, [pc, #540]	; (8013fc0 <http_parse_request+0x23c>)
 8013da4:	f00b fae2 	bl	801f36c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d106      	bne.n	8013dbc <http_parse_request+0x38>
 8013dae:	4b82      	ldr	r3, [pc, #520]	; (8013fb8 <http_parse_request+0x234>)
 8013db0:	f640 120d 	movw	r2, #2317	; 0x90d
 8013db4:	4983      	ldr	r1, [pc, #524]	; (8013fc4 <http_parse_request+0x240>)
 8013db6:	4882      	ldr	r0, [pc, #520]	; (8013fc0 <http_parse_request+0x23c>)
 8013db8:	f00b fad8 	bl	801f36c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	695b      	ldr	r3, [r3, #20]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d103      	bne.n	8013dcc <http_parse_request+0x48>
 8013dc4:	68bb      	ldr	r3, [r7, #8]
 8013dc6:	699b      	ldr	r3, [r3, #24]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d002      	beq.n	8013dd2 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8013dcc:	f06f 0307 	mvn.w	r3, #7
 8013dd0:	e0ed      	b.n	8013fae <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	6a1b      	ldr	r3, [r3, #32]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d103      	bne.n	8013de2 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013dde:	621a      	str	r2, [r3, #32]
 8013de0:	e005      	b.n	8013dee <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	6a1b      	ldr	r3, [r3, #32]
 8013de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013de8:	4618      	mov	r0, r3
 8013dea:	f002 f92d 	bl	8016048 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8013dee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013df0:	f002 f902 	bl	8015ff8 <pbuf_ref>

  if (hs->req->next != NULL) {
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	6a1b      	ldr	r3, [r3, #32]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d012      	beq.n	8013e24 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	6a1b      	ldr	r3, [r3, #32]
 8013e02:	891b      	ldrh	r3, [r3, #8]
 8013e04:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8013e08:	4293      	cmp	r3, r2
 8013e0a:	bf28      	it	cs
 8013e0c:	4613      	movcs	r3, r2
 8013e0e:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	6a18      	ldr	r0, [r3, #32]
 8013e14:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013e16:	2300      	movs	r3, #0
 8013e18:	496b      	ldr	r1, [pc, #428]	; (8013fc8 <http_parse_request+0x244>)
 8013e1a:	f002 fa3d 	bl	8016298 <pbuf_copy_partial>
    data = httpd_req_buf;
 8013e1e:	4b6a      	ldr	r3, [pc, #424]	; (8013fc8 <http_parse_request+0x244>)
 8013e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013e22:	e005      	b.n	8013e30 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8013e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 8013e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2c:	895b      	ldrh	r3, [r3, #10]
 8013e2e:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8013e30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e32:	2b06      	cmp	r3, #6
 8013e34:	f240 80a1 	bls.w	8013f7a <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8013e38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e3a:	461a      	mov	r2, r3
 8013e3c:	4963      	ldr	r1, [pc, #396]	; (8013fcc <http_parse_request+0x248>)
 8013e3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013e40:	f000 fc6e 	bl	8014720 <lwip_strnstr>
 8013e44:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8013e46:	6a3b      	ldr	r3, [r7, #32]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	f000 8096 	beq.w	8013f7a <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8013e52:	2300      	movs	r3, #0
 8013e54:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8013e56:	2204      	movs	r2, #4
 8013e58:	495d      	ldr	r1, [pc, #372]	; (8013fd0 <http_parse_request+0x24c>)
 8013e5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013e5c:	f00b fc3d 	bl	801f6da <strncmp>
 8013e60:	4603      	mov	r3, r0
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d103      	bne.n	8013e6e <http_parse_request+0xea>
        sp1 = data + 3;
 8013e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e68:	3303      	adds	r3, #3
 8013e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e6c:	e014      	b.n	8013e98 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 8013e6e:	2205      	movs	r2, #5
 8013e70:	4958      	ldr	r1, [pc, #352]	; (8013fd4 <http_parse_request+0x250>)
 8013e72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013e74:	f00b fc31 	bl	801f6da <strncmp>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d105      	bne.n	8013e8a <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 8013e7e:	2301      	movs	r3, #1
 8013e80:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 8013e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e84:	3304      	adds	r3, #4
 8013e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e88:	e006      	b.n	8013e98 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 8013e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e8c:	3304      	adds	r3, #4
 8013e8e:	2200      	movs	r2, #0
 8013e90:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 8013e92:	f06f 030f 	mvn.w	r3, #15
 8013e96:	e08a      	b.n	8013fae <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8013e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e9a:	1c5a      	adds	r2, r3, #1
 8013e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e9e:	1ad3      	subs	r3, r2, r3
 8013ea0:	b29b      	uxth	r3, r3
 8013ea2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013ea4:	1ad3      	subs	r3, r2, r3
 8013ea6:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8013ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eaa:	3301      	adds	r3, #1
 8013eac:	8bfa      	ldrh	r2, [r7, #30]
 8013eae:	494a      	ldr	r1, [pc, #296]	; (8013fd8 <http_parse_request+0x254>)
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f000 fc35 	bl	8014720 <lwip_strnstr>
 8013eb6:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8013eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d10c      	bne.n	8013ed8 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8013ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	8bfa      	ldrh	r2, [r7, #30]
 8013ec4:	4941      	ldr	r1, [pc, #260]	; (8013fcc <http_parse_request+0x248>)
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f000 fc2a 	bl	8014720 <lwip_strnstr>
 8013ecc:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8013ece:	2301      	movs	r3, #1
 8013ed0:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 8013ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d163      	bne.n	8013fa0 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8013ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eda:	3301      	adds	r3, #1
 8013edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ede:	1ad3      	subs	r3, r2, r3
 8013ee0:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8013ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d048      	beq.n	8013f7a <http_parse_request+0x1f6>
 8013ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eec:	429a      	cmp	r2, r3
 8013eee:	d944      	bls.n	8013f7a <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8013ef0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ef2:	461a      	mov	r2, r3
 8013ef4:	4939      	ldr	r1, [pc, #228]	; (8013fdc <http_parse_request+0x258>)
 8013ef6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013ef8:	f000 fc12 	bl	8014720 <lwip_strnstr>
 8013efc:	4603      	mov	r3, r0
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d03b      	beq.n	8013f7a <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 8013f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f04:	3301      	adds	r3, #1
 8013f06:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8013f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8013f0e:	8bbb      	ldrh	r3, [r7, #28]
 8013f10:	69ba      	ldr	r2, [r7, #24]
 8013f12:	4413      	add	r3, r2
 8013f14:	2200      	movs	r2, #0
 8013f16:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 8013f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d026      	beq.n	8013f6c <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	6a1b      	ldr	r3, [r3, #32]
 8013f22:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 8013f24:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f28:	9301      	str	r3, [sp, #4]
 8013f2a:	69bb      	ldr	r3, [r7, #24]
 8013f2c:	9300      	str	r3, [sp, #0]
 8013f2e:	4613      	mov	r3, r2
 8013f30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013f32:	68b9      	ldr	r1, [r7, #8]
 8013f34:	6978      	ldr	r0, [r7, #20]
 8013f36:	f7ff fdb1 	bl	8013a9c <http_post_request>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 8013f3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d00a      	beq.n	8013f5c <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 8013f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f48:	2220      	movs	r2, #32
 8013f4a:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 8013f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f4e:	2220      	movs	r2, #32
 8013f50:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 8013f52:	8bbb      	ldrh	r3, [r7, #28]
 8013f54:	69ba      	ldr	r2, [r7, #24]
 8013f56:	4413      	add	r3, r2
 8013f58:	2220      	movs	r2, #32
 8013f5a:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 8013f5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f60:	f113 0f10 	cmn.w	r3, #16
 8013f64:	d01e      	beq.n	8013fa4 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 8013f66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f6a:	e020      	b.n	8013fae <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8013f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f6e:	69b9      	ldr	r1, [r7, #24]
 8013f70:	68b8      	ldr	r0, [r7, #8]
 8013f72:	f000 f835 	bl	8013fe0 <http_find_file>
 8013f76:	4603      	mov	r3, r0
 8013f78:	e019      	b.n	8013fae <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	6a1b      	ldr	r3, [r3, #32]
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f002 f822 	bl	8015fc8 <pbuf_clen>
 8013f84:	4603      	mov	r3, r0
 8013f86:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	6a1b      	ldr	r3, [r3, #32]
 8013f8c:	891b      	ldrh	r3, [r3, #8]
 8013f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013f92:	d209      	bcs.n	8013fa8 <http_parse_request+0x224>
 8013f94:	8a3b      	ldrh	r3, [r7, #16]
 8013f96:	2b05      	cmp	r3, #5
 8013f98:	d806      	bhi.n	8013fa8 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8013f9a:	f06f 0304 	mvn.w	r3, #4
 8013f9e:	e006      	b.n	8013fae <http_parse_request+0x22a>
          goto badrequest;
 8013fa0:	bf00      	nop
 8013fa2:	e002      	b.n	8013faa <http_parse_request+0x226>
              goto badrequest;
 8013fa4:	bf00      	nop
 8013fa6:	e000      	b.n	8013faa <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 8013fa8:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8013faa:	f06f 030f 	mvn.w	r3, #15
  }
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3740      	adds	r7, #64	; 0x40
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	080216e8 	.word	0x080216e8
 8013fbc:	080217d4 	.word	0x080217d4
 8013fc0:	08021730 	.word	0x08021730
 8013fc4:	080217e0 	.word	0x080217e0
 8013fc8:	2000c360 	.word	0x2000c360
 8013fcc:	080216b4 	.word	0x080216b4
 8013fd0:	080217ec 	.word	0x080217ec
 8013fd4:	080217f4 	.word	0x080217f4
 8013fd8:	080217fc 	.word	0x080217fc
 8013fdc:	080216b8 	.word	0x080216b8

08013fe0 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8013fe0:	b590      	push	{r4, r7, lr}
 8013fe2:	b093      	sub	sp, #76	; 0x4c
 8013fe4:	af02      	add	r7, sp, #8
 8013fe6:	60f8      	str	r0, [r7, #12]
 8013fe8:	60b9      	str	r1, [r7, #8]
 8013fea:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8013fec:	2300      	movs	r3, #0
 8013fee:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7ec f8f1 	bl	80001e4 <strlen>
 8014002:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8014004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014006:	2b00      	cmp	r3, #0
 8014008:	d06b      	beq.n	80140e2 <http_find_file+0x102>
 801400a:	68ba      	ldr	r2, [r7, #8]
 801400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400e:	3b01      	subs	r3, #1
 8014010:	4413      	add	r3, r2
 8014012:	781b      	ldrb	r3, [r3, #0]
 8014014:	2b2f      	cmp	r3, #47	; 0x2f
 8014016:	d164      	bne.n	80140e2 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8014018:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801401a:	4a72      	ldr	r2, [pc, #456]	; (80141e4 <http_find_file+0x204>)
 801401c:	4293      	cmp	r3, r2
 801401e:	d102      	bne.n	8014026 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8014020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014022:	2b01      	cmp	r3, #1
 8014024:	d15d      	bne.n	80140e2 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8014026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014028:	3b01      	subs	r3, #1
 801402a:	2b3f      	cmp	r3, #63	; 0x3f
 801402c:	bf28      	it	cs
 801402e:	233f      	movcs	r3, #63	; 0x3f
 8014030:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8014032:	6a3b      	ldr	r3, [r7, #32]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d00a      	beq.n	801404e <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	6a3a      	ldr	r2, [r7, #32]
 801403c:	4619      	mov	r1, r3
 801403e:	4869      	ldr	r0, [pc, #420]	; (80141e4 <http_find_file+0x204>)
 8014040:	f00b f964 	bl	801f30c <memcpy>
      http_uri_buf[copy_len] = 0;
 8014044:	4a67      	ldr	r2, [pc, #412]	; (80141e4 <http_find_file+0x204>)
 8014046:	6a3b      	ldr	r3, [r7, #32]
 8014048:	4413      	add	r3, r2
 801404a:	2200      	movs	r2, #0
 801404c:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 801404e:	2300      	movs	r3, #0
 8014050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014052:	e043      	b.n	80140dc <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8014054:	6a3b      	ldr	r3, [r7, #32]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d028      	beq.n	80140ac <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 801405a:	6a3b      	ldr	r3, [r7, #32]
 801405c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8014060:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8014062:	69fb      	ldr	r3, [r7, #28]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d01e      	beq.n	80140a6 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8014068:	4a5f      	ldr	r2, [pc, #380]	; (80141e8 <http_find_file+0x208>)
 801406a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801406c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014070:	4618      	mov	r0, r3
 8014072:	f7ec f8b7 	bl	80001e4 <strlen>
 8014076:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8014078:	69ba      	ldr	r2, [r7, #24]
 801407a:	69fb      	ldr	r3, [r7, #28]
 801407c:	4293      	cmp	r3, r2
 801407e:	bf28      	it	cs
 8014080:	4613      	movcs	r3, r2
 8014082:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8014084:	6a3b      	ldr	r3, [r7, #32]
 8014086:	4a57      	ldr	r2, [pc, #348]	; (80141e4 <http_find_file+0x204>)
 8014088:	1898      	adds	r0, r3, r2
 801408a:	4a57      	ldr	r2, [pc, #348]	; (80141e8 <http_find_file+0x208>)
 801408c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801408e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014092:	697a      	ldr	r2, [r7, #20]
 8014094:	4619      	mov	r1, r3
 8014096:	f00b f939 	bl	801f30c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 801409a:	6a3a      	ldr	r2, [r7, #32]
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	4413      	add	r3, r2
 80140a0:	4a50      	ldr	r2, [pc, #320]	; (80141e4 <http_find_file+0x204>)
 80140a2:	2100      	movs	r1, #0
 80140a4:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 80140a6:	4b4f      	ldr	r3, [pc, #316]	; (80141e4 <http_find_file+0x204>)
 80140a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80140aa:	e004      	b.n	80140b6 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 80140ac:	4a4e      	ldr	r2, [pc, #312]	; (80141e8 <http_find_file+0x208>)
 80140ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80140b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7fe ff68 	bl	8012f90 <fs_open>
 80140c0:	4603      	mov	r3, r0
 80140c2:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 80140c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d104      	bne.n	80140d6 <http_find_file+0xf6>
        uri = file_name;
 80140cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ce:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 80140d4:	e005      	b.n	80140e2 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80140d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140d8:	3301      	adds	r3, #1
 80140da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80140dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140de:	2b04      	cmp	r3, #4
 80140e0:	d9b8      	bls.n	8014054 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 80140e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d161      	bne.n	80141ac <http_find_file+0x1cc>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	213f      	movs	r1, #63	; 0x3f
 80140ec:	4618      	mov	r0, r3
 80140ee:	f00b fadf 	bl	801f6b0 <strchr>
 80140f2:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 80140f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d005      	beq.n	8014106 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80140fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140fc:	2200      	movs	r2, #0
 80140fe:	701a      	strb	r2, [r3, #0]
      params++;
 8014100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014102:	3301      	adds	r3, #1
 8014104:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8014106:	4b39      	ldr	r3, [pc, #228]	; (80141ec <http_find_file+0x20c>)
 8014108:	f04f 32ff 	mov.w	r2, #4294967295
 801410c:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 801410e:	4b38      	ldr	r3, [pc, #224]	; (80141f0 <http_find_file+0x210>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d034      	beq.n	8014180 <http_find_file+0x1a0>
 8014116:	4b37      	ldr	r3, [pc, #220]	; (80141f4 <http_find_file+0x214>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d030      	beq.n	8014180 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 801411e:	2300      	movs	r3, #0
 8014120:	633b      	str	r3, [r7, #48]	; 0x30
 8014122:	e028      	b.n	8014176 <http_find_file+0x196>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8014124:	68b8      	ldr	r0, [r7, #8]
 8014126:	4b33      	ldr	r3, [pc, #204]	; (80141f4 <http_find_file+0x214>)
 8014128:	681a      	ldr	r2, [r3, #0]
 801412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801412c:	00db      	lsls	r3, r3, #3
 801412e:	4413      	add	r3, r2
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	4619      	mov	r1, r3
 8014134:	f7ec f84c 	bl	80001d0 <strcmp>
 8014138:	4603      	mov	r3, r0
 801413a:	2b00      	cmp	r3, #0
 801413c:	d118      	bne.n	8014170 <http_find_file+0x190>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 801413e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014140:	68f8      	ldr	r0, [r7, #12]
 8014142:	f7ff fb0f 	bl	8013764 <extract_uri_parameters>
 8014146:	4603      	mov	r3, r0
 8014148:	4a28      	ldr	r2, [pc, #160]	; (80141ec <http_find_file+0x20c>)
 801414a:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 801414c:	4b29      	ldr	r3, [pc, #164]	; (80141f4 <http_find_file+0x214>)
 801414e:	681a      	ldr	r2, [r3, #0]
 8014150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014152:	00db      	lsls	r3, r3, #3
 8014154:	4413      	add	r3, r2
 8014156:	685c      	ldr	r4, [r3, #4]
 8014158:	4b24      	ldr	r3, [pc, #144]	; (80141ec <http_find_file+0x20c>)
 801415a:	6819      	ldr	r1, [r3, #0]
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
                                         hs->param_vals);
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	336c      	adds	r3, #108	; 0x6c
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8014166:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014168:	47a0      	blx	r4
 801416a:	4603      	mov	r3, r0
 801416c:	60bb      	str	r3, [r7, #8]
          break;
 801416e:	e007      	b.n	8014180 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 8014170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014172:	3301      	adds	r3, #1
 8014174:	633b      	str	r3, [r7, #48]	; 0x30
 8014176:	4b1e      	ldr	r3, [pc, #120]	; (80141f0 <http_find_file+0x210>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801417c:	429a      	cmp	r2, r3
 801417e:	dbd1      	blt.n	8014124 <http_find_file+0x144>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	68ba      	ldr	r2, [r7, #8]
 8014184:	4611      	mov	r1, r2
 8014186:	4618      	mov	r0, r3
 8014188:	f7fe ff02 	bl	8012f90 <fs_open>
 801418c:	4603      	mov	r3, r0
 801418e:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8014190:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d102      	bne.n	801419e <http_find_file+0x1be>
      file = &hs->file_handle;
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	63bb      	str	r3, [r7, #56]	; 0x38
 801419c:	e006      	b.n	80141ac <http_find_file+0x1cc>
    } else {
      file = http_get_404_file(hs, &uri);
 801419e:	f107 0308 	add.w	r3, r7, #8
 80141a2:	4619      	mov	r1, r3
 80141a4:	68f8      	ldr	r0, [r7, #12]
 80141a6:	f7ff fbdb 	bl	8013960 <http_get_404_file>
 80141aa:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80141ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d106      	bne.n	80141c0 <http_find_file+0x1e0>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80141b2:	f107 0308 	add.w	r3, r7, #8
 80141b6:	4619      	mov	r1, r3
 80141b8:	68f8      	ldr	r0, [r7, #12]
 80141ba:	f7ff fbd1 	bl	8013960 <http_get_404_file>
 80141be:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80141c0:	68ba      	ldr	r2, [r7, #8]
 80141c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141c4:	9301      	str	r3, [sp, #4]
 80141c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80141ca:	9300      	str	r3, [sp, #0]
 80141cc:	4613      	mov	r3, r2
 80141ce:	687a      	ldr	r2, [r7, #4]
 80141d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80141d2:	68f8      	ldr	r0, [r7, #12]
 80141d4:	f000 f810 	bl	80141f8 <http_init_file>
 80141d8:	4603      	mov	r3, r0
}
 80141da:	4618      	mov	r0, r3
 80141dc:	3744      	adds	r7, #68	; 0x44
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd90      	pop	{r4, r7, pc}
 80141e2:	bf00      	nop
 80141e4:	2000c760 	.word	0x2000c760
 80141e8:	0807afc0 	.word	0x0807afc0
 80141ec:	2000c7a8 	.word	0x2000c7a8
 80141f0:	2000c7a4 	.word	0x2000c7a4
 80141f4:	2000c7a0 	.word	0x2000c7a0

080141f8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b086      	sub	sp, #24
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	60f8      	str	r0, [r7, #12]
 8014200:	60b9      	str	r1, [r7, #8]
 8014202:	607a      	str	r2, [r7, #4]
 8014204:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d05c      	beq.n	80142c6 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d106      	bne.n	8014222 <http_init_file+0x2a>
 8014214:	4b35      	ldr	r3, [pc, #212]	; (80142ec <http_init_file+0xf4>)
 8014216:	f640 2269 	movw	r2, #2665	; 0xa69
 801421a:	4935      	ldr	r1, [pc, #212]	; (80142f0 <http_init_file+0xf8>)
 801421c:	4835      	ldr	r0, [pc, #212]	; (80142f4 <http_init_file+0xfc>)
 801421e:	f00b f8a5 	bl	801f36c <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	68ba      	ldr	r2, [r7, #8]
 8014226:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	681a      	ldr	r2, [r3, #0]
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	685b      	ldr	r3, [r3, #4]
 8014234:	2b00      	cmp	r3, #0
 8014236:	da06      	bge.n	8014246 <http_init_file+0x4e>
 8014238:	4b2c      	ldr	r3, [pc, #176]	; (80142ec <http_init_file+0xf4>)
 801423a:	f640 2292 	movw	r2, #2706	; 0xa92
 801423e:	492e      	ldr	r1, [pc, #184]	; (80142f8 <http_init_file+0x100>)
 8014240:	482c      	ldr	r0, [pc, #176]	; (80142f4 <http_init_file+0xfc>)
 8014242:	f00b f893 	bl	801f36c <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	685b      	ldr	r3, [r3, #4]
 801424a:	461a      	mov	r2, r3
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	2200      	movs	r2, #0
 8014254:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	695b      	ldr	r3, [r3, #20]
 801425c:	7c1b      	ldrb	r3, [r3, #16]
 801425e:	f003 0301 	and.w	r3, r3, #1
 8014262:	2b00      	cmp	r3, #0
 8014264:	d106      	bne.n	8014274 <http_init_file+0x7c>
 8014266:	4b21      	ldr	r3, [pc, #132]	; (80142ec <http_init_file+0xf4>)
 8014268:	f640 22a1 	movw	r2, #2721	; 0xaa1
 801426c:	4923      	ldr	r1, [pc, #140]	; (80142fc <http_init_file+0x104>)
 801426e:	4821      	ldr	r0, [pc, #132]	; (80142f4 <http_init_file+0xfc>)
 8014270:	f00b f87c 	bl	801f36c <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d032      	beq.n	80142e0 <http_init_file+0xe8>
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	695b      	ldr	r3, [r3, #20]
 801427e:	7c1b      	ldrb	r3, [r3, #16]
 8014280:	f003 0301 	and.w	r3, r3, #1
 8014284:	2b00      	cmp	r3, #0
 8014286:	d02b      	beq.n	80142e0 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	6998      	ldr	r0, [r3, #24]
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014290:	461a      	mov	r2, r3
 8014292:	491b      	ldr	r1, [pc, #108]	; (8014300 <http_init_file+0x108>)
 8014294:	f000 fa44 	bl	8014720 <lwip_strnstr>
 8014298:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 801429a:	697b      	ldr	r3, [r7, #20]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d01f      	beq.n	80142e0 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 80142a0:	697b      	ldr	r3, [r7, #20]
 80142a2:	1d1a      	adds	r2, r3, #4
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	699b      	ldr	r3, [r3, #24]
 80142a8:	1ad3      	subs	r3, r2, r3
 80142aa:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	699a      	ldr	r2, [r3, #24]
 80142b0:	693b      	ldr	r3, [r7, #16]
 80142b2:	441a      	add	r2, r3
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	1ad2      	subs	r2, r2, r3
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	625a      	str	r2, [r3, #36]	; 0x24
 80142c4:	e00c      	b.n	80142e0 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	2200      	movs	r2, #0
 80142ca:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2200      	movs	r2, #0
 80142d0:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	2200      	movs	r2, #0
 80142d6:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	2200      	movs	r2, #0
 80142dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80142e0:	2300      	movs	r3, #0
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3718      	adds	r7, #24
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	080216e8 	.word	0x080216e8
 80142f0:	08021800 	.word	0x08021800
 80142f4:	08021730 	.word	0x08021730
 80142f8:	08021814 	.word	0x08021814
 80142fc:	08021834 	.word	0x08021834
 8014300:	080216b8 	.word	0x080216b8

08014304 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b084      	sub	sp, #16
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	460b      	mov	r3, r1
 801430e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d002      	beq.n	8014320 <http_err+0x1c>
    http_state_free(hs);
 801431a:	68f8      	ldr	r0, [r7, #12]
 801431c:	f7ff f938 	bl	8013590 <http_state_free>
  }
}
 8014320:	bf00      	nop
 8014322:	3710      	adds	r7, #16
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}

08014328 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b086      	sub	sp, #24
 801432c:	af00      	add	r7, sp, #0
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	60b9      	str	r1, [r7, #8]
 8014332:	4613      	mov	r3, r2
 8014334:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 801433a:	697b      	ldr	r3, [r7, #20]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d101      	bne.n	8014344 <http_sent+0x1c>
    return ERR_OK;
 8014340:	2300      	movs	r3, #0
 8014342:	e008      	b.n	8014356 <http_sent+0x2e>
  }

  hs->retries = 0;
 8014344:	697b      	ldr	r3, [r7, #20]
 8014346:	2200      	movs	r2, #0
 8014348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 801434c:	6979      	ldr	r1, [r7, #20]
 801434e:	68b8      	ldr	r0, [r7, #8]
 8014350:	f7ff facf 	bl	80138f2 <http_send>

  return ERR_OK;
 8014354:	2300      	movs	r3, #0
}
 8014356:	4618      	mov	r0, r3
 8014358:	3718      	adds	r7, #24
 801435a:	46bd      	mov	sp, r7
 801435c:	bd80      	pop	{r7, pc}

0801435e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 801435e:	b580      	push	{r7, lr}
 8014360:	b084      	sub	sp, #16
 8014362:	af00      	add	r7, sp, #0
 8014364:	6078      	str	r0, [r7, #4]
 8014366:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d107      	bne.n	8014382 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8014372:	2100      	movs	r1, #0
 8014374:	6838      	ldr	r0, [r7, #0]
 8014376:	f7ff f9d9 	bl	801372c <http_close_conn>
 801437a:	4603      	mov	r3, r0
 801437c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 801437e:	2300      	movs	r3, #0
 8014380:	e021      	b.n	80143c6 <http_poll+0x68>
  } else {
    hs->retries++;
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014388:	3301      	adds	r3, #1
 801438a:	b2da      	uxtb	r2, r3
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014398:	2b04      	cmp	r3, #4
 801439a:	d105      	bne.n	80143a8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 801439c:	68f9      	ldr	r1, [r7, #12]
 801439e:	6838      	ldr	r0, [r7, #0]
 80143a0:	f7ff f9c4 	bl	801372c <http_close_conn>
      return ERR_OK;
 80143a4:	2300      	movs	r3, #0
 80143a6:	e00e      	b.n	80143c6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	695b      	ldr	r3, [r3, #20]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d009      	beq.n	80143c4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80143b0:	68f9      	ldr	r1, [r7, #12]
 80143b2:	6838      	ldr	r0, [r7, #0]
 80143b4:	f7ff fa9d 	bl	80138f2 <http_send>
 80143b8:	4603      	mov	r3, r0
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d002      	beq.n	80143c4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80143be:	6838      	ldr	r0, [r7, #0]
 80143c0:	f007 f8ee 	bl	801b5a0 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80143c4:	2300      	movs	r3, #0
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3710      	adds	r7, #16
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
	...

080143d0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b086      	sub	sp, #24
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	60f8      	str	r0, [r7, #12]
 80143d8:	60b9      	str	r1, [r7, #8]
 80143da:	607a      	str	r2, [r7, #4]
 80143dc:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80143e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d105      	bne.n	80143f6 <http_recv+0x26>
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d002      	beq.n	80143f6 <http_recv+0x26>
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d111      	bne.n	801441a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d008      	beq.n	801440e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	891b      	ldrh	r3, [r3, #8]
 8014400:	4619      	mov	r1, r3
 8014402:	68b8      	ldr	r0, [r7, #8]
 8014404:	f002 fcc0 	bl	8016d88 <tcp_recved>
      pbuf_free(p);
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f001 fd4f 	bl	8015eac <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 801440e:	6979      	ldr	r1, [r7, #20]
 8014410:	68b8      	ldr	r0, [r7, #8]
 8014412:	f7ff f98b 	bl	801372c <http_close_conn>
    return ERR_OK;
 8014416:	2300      	movs	r3, #0
 8014418:	e072      	b.n	8014500 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	891b      	ldrh	r3, [r3, #8]
 801441e:	4619      	mov	r1, r3
 8014420:	68b8      	ldr	r0, [r7, #8]
 8014422:	f002 fcb1 	bl	8016d88 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 8014426:	697b      	ldr	r3, [r7, #20]
 8014428:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801442c:	2b00      	cmp	r3, #0
 801442e:	d012      	beq.n	8014456 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	2200      	movs	r2, #0
 8014434:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 8014438:	6879      	ldr	r1, [r7, #4]
 801443a:	6978      	ldr	r0, [r7, #20]
 801443c:	f7ff faee 	bl	8013a1c <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 8014440:	697b      	ldr	r3, [r7, #20]
 8014442:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014446:	2b00      	cmp	r3, #0
 8014448:	d103      	bne.n	8014452 <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 801444a:	6979      	ldr	r1, [r7, #20]
 801444c:	68b8      	ldr	r0, [r7, #8]
 801444e:	f7ff fa50 	bl	80138f2 <http_send>
    }
    return ERR_OK;
 8014452:	2300      	movs	r3, #0
 8014454:	e054      	b.n	8014500 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8014456:	697b      	ldr	r3, [r7, #20]
 8014458:	695b      	ldr	r3, [r3, #20]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d14c      	bne.n	80144f8 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 801445e:	68ba      	ldr	r2, [r7, #8]
 8014460:	6979      	ldr	r1, [r7, #20]
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f7ff fc8e 	bl	8013d84 <http_parse_request>
 8014468:	4603      	mov	r3, r0
 801446a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801446c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d015      	beq.n	80144a0 <http_recv+0xd0>
 8014474:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014478:	f113 0f05 	cmn.w	r3, #5
 801447c:	d010      	beq.n	80144a0 <http_recv+0xd0>
 801447e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014482:	f113 0f10 	cmn.w	r3, #16
 8014486:	d00b      	beq.n	80144a0 <http_recv+0xd0>
 8014488:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801448c:	f113 0f08 	cmn.w	r3, #8
 8014490:	d006      	beq.n	80144a0 <http_recv+0xd0>
 8014492:	4b1d      	ldr	r3, [pc, #116]	; (8014508 <http_recv+0x138>)
 8014494:	f640 3262 	movw	r2, #2914	; 0xb62
 8014498:	491c      	ldr	r1, [pc, #112]	; (801450c <http_recv+0x13c>)
 801449a:	481d      	ldr	r0, [pc, #116]	; (8014510 <http_recv+0x140>)
 801449c:	f00a ff66 	bl	801f36c <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80144a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144a4:	f113 0f05 	cmn.w	r3, #5
 80144a8:	d00b      	beq.n	80144c2 <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80144aa:	697b      	ldr	r3, [r7, #20]
 80144ac:	6a1b      	ldr	r3, [r3, #32]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d007      	beq.n	80144c2 <http_recv+0xf2>
          pbuf_free(hs->req);
 80144b2:	697b      	ldr	r3, [r7, #20]
 80144b4:	6a1b      	ldr	r3, [r3, #32]
 80144b6:	4618      	mov	r0, r3
 80144b8:	f001 fcf8 	bl	8015eac <pbuf_free>
          hs->req = NULL;
 80144bc:	697b      	ldr	r3, [r7, #20]
 80144be:	2200      	movs	r2, #0
 80144c0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f001 fcf2 	bl	8015eac <pbuf_free>
      if (parsed == ERR_OK) {
 80144c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d109      	bne.n	80144e4 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d111      	bne.n	80144fe <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80144da:	6979      	ldr	r1, [r7, #20]
 80144dc:	68b8      	ldr	r0, [r7, #8]
 80144de:	f7ff fa08 	bl	80138f2 <http_send>
 80144e2:	e00c      	b.n	80144fe <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 80144e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144e8:	f113 0f10 	cmn.w	r3, #16
 80144ec:	d107      	bne.n	80144fe <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80144ee:	6979      	ldr	r1, [r7, #20]
 80144f0:	68b8      	ldr	r0, [r7, #8]
 80144f2:	f7ff f91b 	bl	801372c <http_close_conn>
 80144f6:	e002      	b.n	80144fe <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f001 fcd7 	bl	8015eac <pbuf_free>
    }
  }
  return ERR_OK;
 80144fe:	2300      	movs	r3, #0
}
 8014500:	4618      	mov	r0, r3
 8014502:	3718      	adds	r7, #24
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}
 8014508:	080216e8 	.word	0x080216e8
 801450c:	08021860 	.word	0x08021860
 8014510:	08021730 	.word	0x08021730

08014514 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b086      	sub	sp, #24
 8014518:	af00      	add	r7, sp, #0
 801451a:	60f8      	str	r0, [r7, #12]
 801451c:	60b9      	str	r1, [r7, #8]
 801451e:	4613      	mov	r3, r2
 8014520:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8014522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d102      	bne.n	8014530 <http_accept+0x1c>
 801452a:	68bb      	ldr	r3, [r7, #8]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d102      	bne.n	8014536 <http_accept+0x22>
    return ERR_VAL;
 8014530:	f06f 0305 	mvn.w	r3, #5
 8014534:	e025      	b.n	8014582 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8014536:	2101      	movs	r1, #1
 8014538:	68b8      	ldr	r0, [r7, #8]
 801453a:	f003 f909 	bl	8017750 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 801453e:	f7fe fd8b 	bl	8013058 <http_state_alloc>
 8014542:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8014544:	697b      	ldr	r3, [r7, #20]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d102      	bne.n	8014550 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 801454a:	f04f 33ff 	mov.w	r3, #4294967295
 801454e:	e018      	b.n	8014582 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8014550:	697b      	ldr	r3, [r7, #20]
 8014552:	68ba      	ldr	r2, [r7, #8]
 8014554:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8014556:	6979      	ldr	r1, [r7, #20]
 8014558:	68b8      	ldr	r0, [r7, #8]
 801455a:	f003 faf9 	bl	8017b50 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 801455e:	490b      	ldr	r1, [pc, #44]	; (801458c <http_accept+0x78>)
 8014560:	68b8      	ldr	r0, [r7, #8]
 8014562:	f003 fb07 	bl	8017b74 <tcp_recv>
  altcp_err(pcb, http_err);
 8014566:	490a      	ldr	r1, [pc, #40]	; (8014590 <http_accept+0x7c>)
 8014568:	68b8      	ldr	r0, [r7, #8]
 801456a:	f003 fb47 	bl	8017bfc <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 801456e:	2204      	movs	r2, #4
 8014570:	4908      	ldr	r1, [pc, #32]	; (8014594 <http_accept+0x80>)
 8014572:	68b8      	ldr	r0, [r7, #8]
 8014574:	f003 fb7c 	bl	8017c70 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8014578:	4907      	ldr	r1, [pc, #28]	; (8014598 <http_accept+0x84>)
 801457a:	68b8      	ldr	r0, [r7, #8]
 801457c:	f003 fb1c 	bl	8017bb8 <tcp_sent>

  return ERR_OK;
 8014580:	2300      	movs	r3, #0
}
 8014582:	4618      	mov	r0, r3
 8014584:	3718      	adds	r7, #24
 8014586:	46bd      	mov	sp, r7
 8014588:	bd80      	pop	{r7, pc}
 801458a:	bf00      	nop
 801458c:	080143d1 	.word	0x080143d1
 8014590:	08014305 	.word	0x08014305
 8014594:	0801435f 	.word	0x0801435f
 8014598:	08014329 	.word	0x08014329

0801459c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b084      	sub	sp, #16
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	460b      	mov	r3, r1
 80145a6:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d029      	beq.n	8014602 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80145ae:	2101      	movs	r1, #1
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f003 f8cd 	bl	8017750 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80145b6:	887b      	ldrh	r3, [r7, #2]
 80145b8:	461a      	mov	r2, r3
 80145ba:	4914      	ldr	r1, [pc, #80]	; (801460c <httpd_init_pcb+0x70>)
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	f002 fa15 	bl	80169ec <tcp_bind>
 80145c2:	4603      	mov	r3, r0
 80145c4:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80145c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d006      	beq.n	80145dc <httpd_init_pcb+0x40>
 80145ce:	4b10      	ldr	r3, [pc, #64]	; (8014610 <httpd_init_pcb+0x74>)
 80145d0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80145d4:	490f      	ldr	r1, [pc, #60]	; (8014614 <httpd_init_pcb+0x78>)
 80145d6:	4810      	ldr	r0, [pc, #64]	; (8014618 <httpd_init_pcb+0x7c>)
 80145d8:	f00a fec8 	bl	801f36c <iprintf>
    pcb = altcp_listen(pcb);
 80145dc:	21ff      	movs	r1, #255	; 0xff
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f002 fabc 	bl	8016b5c <tcp_listen_with_backlog>
 80145e4:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d106      	bne.n	80145fa <httpd_init_pcb+0x5e>
 80145ec:	4b08      	ldr	r3, [pc, #32]	; (8014610 <httpd_init_pcb+0x74>)
 80145ee:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80145f2:	490a      	ldr	r1, [pc, #40]	; (801461c <httpd_init_pcb+0x80>)
 80145f4:	4808      	ldr	r0, [pc, #32]	; (8014618 <httpd_init_pcb+0x7c>)
 80145f6:	f00a feb9 	bl	801f36c <iprintf>
    altcp_accept(pcb, http_accept);
 80145fa:	4909      	ldr	r1, [pc, #36]	; (8014620 <httpd_init_pcb+0x84>)
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f003 fb1f 	bl	8017c40 <tcp_accept>
  }
}
 8014602:	bf00      	nop
 8014604:	3710      	adds	r7, #16
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}
 801460a:	bf00      	nop
 801460c:	0807b0f8 	.word	0x0807b0f8
 8014610:	080216e8 	.word	0x080216e8
 8014614:	0802188c 	.word	0x0802188c
 8014618:	08021730 	.word	0x08021730
 801461c:	080218a8 	.word	0x080218a8
 8014620:	08014515 	.word	0x08014515

08014624 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801462a:	202e      	movs	r0, #46	; 0x2e
 801462c:	f003 fa82 	bl	8017b34 <tcp_new_ip_type>
 8014630:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d106      	bne.n	8014646 <httpd_init+0x22>
 8014638:	4b07      	ldr	r3, [pc, #28]	; (8014658 <httpd_init+0x34>)
 801463a:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
 801463e:	4907      	ldr	r1, [pc, #28]	; (801465c <httpd_init+0x38>)
 8014640:	4807      	ldr	r0, [pc, #28]	; (8014660 <httpd_init+0x3c>)
 8014642:	f00a fe93 	bl	801f36c <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8014646:	2150      	movs	r1, #80	; 0x50
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f7ff ffa7 	bl	801459c <httpd_init_pcb>
}
 801464e:	bf00      	nop
 8014650:	3708      	adds	r7, #8
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	080216e8 	.word	0x080216e8
 801465c:	080218c8 	.word	0x080218c8
 8014660:	08021730 	.word	0x08021730

08014664 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b082      	sub	sp, #8
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
 801466c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d106      	bne.n	8014682 <http_set_cgi_handlers+0x1e>
 8014674:	4b0d      	ldr	r3, [pc, #52]	; (80146ac <http_set_cgi_handlers+0x48>)
 8014676:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 801467a:	490d      	ldr	r1, [pc, #52]	; (80146b0 <http_set_cgi_handlers+0x4c>)
 801467c:	480d      	ldr	r0, [pc, #52]	; (80146b4 <http_set_cgi_handlers+0x50>)
 801467e:	f00a fe75 	bl	801f36c <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	2b00      	cmp	r3, #0
 8014686:	dc06      	bgt.n	8014696 <http_set_cgi_handlers+0x32>
 8014688:	4b08      	ldr	r3, [pc, #32]	; (80146ac <http_set_cgi_handlers+0x48>)
 801468a:	f640 4211 	movw	r2, #3089	; 0xc11
 801468e:	490a      	ldr	r1, [pc, #40]	; (80146b8 <http_set_cgi_handlers+0x54>)
 8014690:	4808      	ldr	r0, [pc, #32]	; (80146b4 <http_set_cgi_handlers+0x50>)
 8014692:	f00a fe6b 	bl	801f36c <iprintf>

  httpd_cgis = cgis;
 8014696:	4a09      	ldr	r2, [pc, #36]	; (80146bc <http_set_cgi_handlers+0x58>)
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 801469c:	4a08      	ldr	r2, [pc, #32]	; (80146c0 <http_set_cgi_handlers+0x5c>)
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	6013      	str	r3, [r2, #0]
}
 80146a2:	bf00      	nop
 80146a4:	3708      	adds	r7, #8
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop
 80146ac:	080216e8 	.word	0x080216e8
 80146b0:	080218e4 	.word	0x080218e4
 80146b4:	08021730 	.word	0x08021730
 80146b8:	080218f4 	.word	0x080218f4
 80146bc:	2000c7a0 	.word	0x2000c7a0
 80146c0:	2000c7a4 	.word	0x2000c7a4

080146c4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80146c4:	b480      	push	{r7}
 80146c6:	b083      	sub	sp, #12
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	4603      	mov	r3, r0
 80146cc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80146ce:	88fb      	ldrh	r3, [r7, #6]
 80146d0:	021b      	lsls	r3, r3, #8
 80146d2:	b21a      	sxth	r2, r3
 80146d4:	88fb      	ldrh	r3, [r7, #6]
 80146d6:	0a1b      	lsrs	r3, r3, #8
 80146d8:	b29b      	uxth	r3, r3
 80146da:	b21b      	sxth	r3, r3
 80146dc:	4313      	orrs	r3, r2
 80146de:	b21b      	sxth	r3, r3
 80146e0:	b29b      	uxth	r3, r3
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	370c      	adds	r7, #12
 80146e6:	46bd      	mov	sp, r7
 80146e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ec:	4770      	bx	lr

080146ee <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80146ee:	b480      	push	{r7}
 80146f0:	b083      	sub	sp, #12
 80146f2:	af00      	add	r7, sp, #0
 80146f4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	061a      	lsls	r2, r3, #24
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	021b      	lsls	r3, r3, #8
 80146fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014702:	431a      	orrs	r2, r3
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	0a1b      	lsrs	r3, r3, #8
 8014708:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801470c:	431a      	orrs	r2, r3
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	0e1b      	lsrs	r3, r3, #24
 8014712:	4313      	orrs	r3, r2
}
 8014714:	4618      	mov	r0, r3
 8014716:	370c      	adds	r7, #12
 8014718:	46bd      	mov	sp, r7
 801471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471e:	4770      	bx	lr

08014720 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b086      	sub	sp, #24
 8014724:	af00      	add	r7, sp, #0
 8014726:	60f8      	str	r0, [r7, #12]
 8014728:	60b9      	str	r1, [r7, #8]
 801472a:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 801472c:	68b8      	ldr	r0, [r7, #8]
 801472e:	f7eb fd59 	bl	80001e4 <strlen>
 8014732:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d101      	bne.n	801473e <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	e022      	b.n	8014784 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	617b      	str	r3, [r7, #20]
 8014742:	e012      	b.n	801476a <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8014744:	697b      	ldr	r3, [r7, #20]
 8014746:	781a      	ldrb	r2, [r3, #0]
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	781b      	ldrb	r3, [r3, #0]
 801474c:	429a      	cmp	r2, r3
 801474e:	d109      	bne.n	8014764 <lwip_strnstr+0x44>
 8014750:	693a      	ldr	r2, [r7, #16]
 8014752:	68b9      	ldr	r1, [r7, #8]
 8014754:	6978      	ldr	r0, [r7, #20]
 8014756:	f00a ffc0 	bl	801f6da <strncmp>
 801475a:	4603      	mov	r3, r0
 801475c:	2b00      	cmp	r3, #0
 801475e:	d101      	bne.n	8014764 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8014760:	697b      	ldr	r3, [r7, #20]
 8014762:	e00f      	b.n	8014784 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	3301      	adds	r3, #1
 8014768:	617b      	str	r3, [r7, #20]
 801476a:	697b      	ldr	r3, [r7, #20]
 801476c:	781b      	ldrb	r3, [r3, #0]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d007      	beq.n	8014782 <lwip_strnstr+0x62>
 8014772:	697a      	ldr	r2, [r7, #20]
 8014774:	693b      	ldr	r3, [r7, #16]
 8014776:	441a      	add	r2, r3
 8014778:	68f9      	ldr	r1, [r7, #12]
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	440b      	add	r3, r1
 801477e:	429a      	cmp	r2, r3
 8014780:	d9e0      	bls.n	8014744 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8014782:	2300      	movs	r3, #0
}
 8014784:	4618      	mov	r0, r3
 8014786:	3718      	adds	r7, #24
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}

0801478c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b082      	sub	sp, #8
 8014790:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8014792:	2300      	movs	r3, #0
 8014794:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8014796:	f00a fcf9 	bl	801f18c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801479a:	f000 f8d5 	bl	8014948 <mem_init>
  memp_init();
 801479e:	f000 fc31 	bl	8015004 <memp_init>
  pbuf_init();
  netif_init();
 80147a2:	f000 fcf7 	bl	8015194 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80147a6:	f007 ffeb 	bl	801c780 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80147aa:	f001 fe19 	bl	80163e0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80147ae:	f007 ff2d 	bl	801c60c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80147b2:	bf00      	nop
 80147b4:	3708      	adds	r7, #8
 80147b6:	46bd      	mov	sp, r7
 80147b8:	bd80      	pop	{r7, pc}
	...

080147bc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80147bc:	b480      	push	{r7}
 80147be:	b083      	sub	sp, #12
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	4603      	mov	r3, r0
 80147c4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80147c6:	4b05      	ldr	r3, [pc, #20]	; (80147dc <ptr_to_mem+0x20>)
 80147c8:	681a      	ldr	r2, [r3, #0]
 80147ca:	88fb      	ldrh	r3, [r7, #6]
 80147cc:	4413      	add	r3, r2
}
 80147ce:	4618      	mov	r0, r3
 80147d0:	370c      	adds	r7, #12
 80147d2:	46bd      	mov	sp, r7
 80147d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d8:	4770      	bx	lr
 80147da:	bf00      	nop
 80147dc:	2000c7b4 	.word	0x2000c7b4

080147e0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80147e0:	b480      	push	{r7}
 80147e2:	b083      	sub	sp, #12
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80147e8:	4b05      	ldr	r3, [pc, #20]	; (8014800 <mem_to_ptr+0x20>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	687a      	ldr	r2, [r7, #4]
 80147ee:	1ad3      	subs	r3, r2, r3
 80147f0:	b29b      	uxth	r3, r3
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	370c      	adds	r7, #12
 80147f6:	46bd      	mov	sp, r7
 80147f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fc:	4770      	bx	lr
 80147fe:	bf00      	nop
 8014800:	2000c7b4 	.word	0x2000c7b4

08014804 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8014804:	b590      	push	{r4, r7, lr}
 8014806:	b085      	sub	sp, #20
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801480c:	4b45      	ldr	r3, [pc, #276]	; (8014924 <plug_holes+0x120>)
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	687a      	ldr	r2, [r7, #4]
 8014812:	429a      	cmp	r2, r3
 8014814:	d206      	bcs.n	8014824 <plug_holes+0x20>
 8014816:	4b44      	ldr	r3, [pc, #272]	; (8014928 <plug_holes+0x124>)
 8014818:	f240 12df 	movw	r2, #479	; 0x1df
 801481c:	4943      	ldr	r1, [pc, #268]	; (801492c <plug_holes+0x128>)
 801481e:	4844      	ldr	r0, [pc, #272]	; (8014930 <plug_holes+0x12c>)
 8014820:	f00a fda4 	bl	801f36c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014824:	4b43      	ldr	r3, [pc, #268]	; (8014934 <plug_holes+0x130>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	687a      	ldr	r2, [r7, #4]
 801482a:	429a      	cmp	r2, r3
 801482c:	d306      	bcc.n	801483c <plug_holes+0x38>
 801482e:	4b3e      	ldr	r3, [pc, #248]	; (8014928 <plug_holes+0x124>)
 8014830:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014834:	4940      	ldr	r1, [pc, #256]	; (8014938 <plug_holes+0x134>)
 8014836:	483e      	ldr	r0, [pc, #248]	; (8014930 <plug_holes+0x12c>)
 8014838:	f00a fd98 	bl	801f36c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	791b      	ldrb	r3, [r3, #4]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d006      	beq.n	8014852 <plug_holes+0x4e>
 8014844:	4b38      	ldr	r3, [pc, #224]	; (8014928 <plug_holes+0x124>)
 8014846:	f240 12e1 	movw	r2, #481	; 0x1e1
 801484a:	493c      	ldr	r1, [pc, #240]	; (801493c <plug_holes+0x138>)
 801484c:	4838      	ldr	r0, [pc, #224]	; (8014930 <plug_holes+0x12c>)
 801484e:	f00a fd8d 	bl	801f36c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	881b      	ldrh	r3, [r3, #0]
 8014856:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801485a:	d906      	bls.n	801486a <plug_holes+0x66>
 801485c:	4b32      	ldr	r3, [pc, #200]	; (8014928 <plug_holes+0x124>)
 801485e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8014862:	4937      	ldr	r1, [pc, #220]	; (8014940 <plug_holes+0x13c>)
 8014864:	4832      	ldr	r0, [pc, #200]	; (8014930 <plug_holes+0x12c>)
 8014866:	f00a fd81 	bl	801f36c <iprintf>

  nmem = ptr_to_mem(mem->next);
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	881b      	ldrh	r3, [r3, #0]
 801486e:	4618      	mov	r0, r3
 8014870:	f7ff ffa4 	bl	80147bc <ptr_to_mem>
 8014874:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	429a      	cmp	r2, r3
 801487c:	d024      	beq.n	80148c8 <plug_holes+0xc4>
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	791b      	ldrb	r3, [r3, #4]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d120      	bne.n	80148c8 <plug_holes+0xc4>
 8014886:	4b2b      	ldr	r3, [pc, #172]	; (8014934 <plug_holes+0x130>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	68fa      	ldr	r2, [r7, #12]
 801488c:	429a      	cmp	r2, r3
 801488e:	d01b      	beq.n	80148c8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8014890:	4b2c      	ldr	r3, [pc, #176]	; (8014944 <plug_holes+0x140>)
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	68fa      	ldr	r2, [r7, #12]
 8014896:	429a      	cmp	r2, r3
 8014898:	d102      	bne.n	80148a0 <plug_holes+0x9c>
      lfree = mem;
 801489a:	4a2a      	ldr	r2, [pc, #168]	; (8014944 <plug_holes+0x140>)
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	881a      	ldrh	r2, [r3, #0]
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	881b      	ldrh	r3, [r3, #0]
 80148ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80148b0:	d00a      	beq.n	80148c8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	881b      	ldrh	r3, [r3, #0]
 80148b6:	4618      	mov	r0, r3
 80148b8:	f7ff ff80 	bl	80147bc <ptr_to_mem>
 80148bc:	4604      	mov	r4, r0
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f7ff ff8e 	bl	80147e0 <mem_to_ptr>
 80148c4:	4603      	mov	r3, r0
 80148c6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	885b      	ldrh	r3, [r3, #2]
 80148cc:	4618      	mov	r0, r3
 80148ce:	f7ff ff75 	bl	80147bc <ptr_to_mem>
 80148d2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80148d4:	68ba      	ldr	r2, [r7, #8]
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	429a      	cmp	r2, r3
 80148da:	d01f      	beq.n	801491c <plug_holes+0x118>
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	791b      	ldrb	r3, [r3, #4]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d11b      	bne.n	801491c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80148e4:	4b17      	ldr	r3, [pc, #92]	; (8014944 <plug_holes+0x140>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	687a      	ldr	r2, [r7, #4]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d102      	bne.n	80148f4 <plug_holes+0xf0>
      lfree = pmem;
 80148ee:	4a15      	ldr	r2, [pc, #84]	; (8014944 <plug_holes+0x140>)
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	881a      	ldrh	r2, [r3, #0]
 80148f8:	68bb      	ldr	r3, [r7, #8]
 80148fa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	881b      	ldrh	r3, [r3, #0]
 8014900:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014904:	d00a      	beq.n	801491c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	881b      	ldrh	r3, [r3, #0]
 801490a:	4618      	mov	r0, r3
 801490c:	f7ff ff56 	bl	80147bc <ptr_to_mem>
 8014910:	4604      	mov	r4, r0
 8014912:	68b8      	ldr	r0, [r7, #8]
 8014914:	f7ff ff64 	bl	80147e0 <mem_to_ptr>
 8014918:	4603      	mov	r3, r0
 801491a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801491c:	bf00      	nop
 801491e:	3714      	adds	r7, #20
 8014920:	46bd      	mov	sp, r7
 8014922:	bd90      	pop	{r4, r7, pc}
 8014924:	2000c7b4 	.word	0x2000c7b4
 8014928:	08021910 	.word	0x08021910
 801492c:	08021940 	.word	0x08021940
 8014930:	08021958 	.word	0x08021958
 8014934:	2000c7b8 	.word	0x2000c7b8
 8014938:	08021980 	.word	0x08021980
 801493c:	0802199c 	.word	0x0802199c
 8014940:	080219b8 	.word	0x080219b8
 8014944:	2000c7c0 	.word	0x2000c7c0

08014948 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b082      	sub	sp, #8
 801494c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801494e:	4b1f      	ldr	r3, [pc, #124]	; (80149cc <mem_init+0x84>)
 8014950:	3303      	adds	r3, #3
 8014952:	f023 0303 	bic.w	r3, r3, #3
 8014956:	461a      	mov	r2, r3
 8014958:	4b1d      	ldr	r3, [pc, #116]	; (80149d0 <mem_init+0x88>)
 801495a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801495c:	4b1c      	ldr	r3, [pc, #112]	; (80149d0 <mem_init+0x88>)
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014968:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	2200      	movs	r2, #0
 801496e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2200      	movs	r2, #0
 8014974:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8014976:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801497a:	f7ff ff1f 	bl	80147bc <ptr_to_mem>
 801497e:	4603      	mov	r3, r0
 8014980:	4a14      	ldr	r2, [pc, #80]	; (80149d4 <mem_init+0x8c>)
 8014982:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8014984:	4b13      	ldr	r3, [pc, #76]	; (80149d4 <mem_init+0x8c>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	2201      	movs	r2, #1
 801498a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801498c:	4b11      	ldr	r3, [pc, #68]	; (80149d4 <mem_init+0x8c>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014994:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8014996:	4b0f      	ldr	r3, [pc, #60]	; (80149d4 <mem_init+0x8c>)
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801499e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80149a0:	4b0b      	ldr	r3, [pc, #44]	; (80149d0 <mem_init+0x88>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	4a0c      	ldr	r2, [pc, #48]	; (80149d8 <mem_init+0x90>)
 80149a6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80149a8:	480c      	ldr	r0, [pc, #48]	; (80149dc <mem_init+0x94>)
 80149aa:	f00a fbfd 	bl	801f1a8 <sys_mutex_new>
 80149ae:	4603      	mov	r3, r0
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d006      	beq.n	80149c2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80149b4:	4b0a      	ldr	r3, [pc, #40]	; (80149e0 <mem_init+0x98>)
 80149b6:	f240 221f 	movw	r2, #543	; 0x21f
 80149ba:	490a      	ldr	r1, [pc, #40]	; (80149e4 <mem_init+0x9c>)
 80149bc:	480a      	ldr	r0, [pc, #40]	; (80149e8 <mem_init+0xa0>)
 80149be:	f00a fcd5 	bl	801f36c <iprintf>
  }
}
 80149c2:	bf00      	nop
 80149c4:	3708      	adds	r7, #8
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd80      	pop	{r7, pc}
 80149ca:	bf00      	nop
 80149cc:	200114b8 	.word	0x200114b8
 80149d0:	2000c7b4 	.word	0x2000c7b4
 80149d4:	2000c7b8 	.word	0x2000c7b8
 80149d8:	2000c7c0 	.word	0x2000c7c0
 80149dc:	2000c7bc 	.word	0x2000c7bc
 80149e0:	08021910 	.word	0x08021910
 80149e4:	080219e4 	.word	0x080219e4
 80149e8:	08021958 	.word	0x08021958

080149ec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b086      	sub	sp, #24
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80149f4:	6878      	ldr	r0, [r7, #4]
 80149f6:	f7ff fef3 	bl	80147e0 <mem_to_ptr>
 80149fa:	4603      	mov	r3, r0
 80149fc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	881b      	ldrh	r3, [r3, #0]
 8014a02:	4618      	mov	r0, r3
 8014a04:	f7ff feda 	bl	80147bc <ptr_to_mem>
 8014a08:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	885b      	ldrh	r3, [r3, #2]
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f7ff fed4 	bl	80147bc <ptr_to_mem>
 8014a14:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	881b      	ldrh	r3, [r3, #0]
 8014a1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014a1e:	d818      	bhi.n	8014a52 <mem_link_valid+0x66>
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	885b      	ldrh	r3, [r3, #2]
 8014a24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014a28:	d813      	bhi.n	8014a52 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014a2e:	8afa      	ldrh	r2, [r7, #22]
 8014a30:	429a      	cmp	r2, r3
 8014a32:	d004      	beq.n	8014a3e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	881b      	ldrh	r3, [r3, #0]
 8014a38:	8afa      	ldrh	r2, [r7, #22]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d109      	bne.n	8014a52 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014a3e:	4b08      	ldr	r3, [pc, #32]	; (8014a60 <mem_link_valid+0x74>)
 8014a40:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014a42:	693a      	ldr	r2, [r7, #16]
 8014a44:	429a      	cmp	r2, r3
 8014a46:	d006      	beq.n	8014a56 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	885b      	ldrh	r3, [r3, #2]
 8014a4c:	8afa      	ldrh	r2, [r7, #22]
 8014a4e:	429a      	cmp	r2, r3
 8014a50:	d001      	beq.n	8014a56 <mem_link_valid+0x6a>
    return 0;
 8014a52:	2300      	movs	r3, #0
 8014a54:	e000      	b.n	8014a58 <mem_link_valid+0x6c>
  }
  return 1;
 8014a56:	2301      	movs	r3, #1
}
 8014a58:	4618      	mov	r0, r3
 8014a5a:	3718      	adds	r7, #24
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}
 8014a60:	2000c7b8 	.word	0x2000c7b8

08014a64 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b088      	sub	sp, #32
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d070      	beq.n	8014b54 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f003 0303 	and.w	r3, r3, #3
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d00d      	beq.n	8014a98 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8014a7c:	4b37      	ldr	r3, [pc, #220]	; (8014b5c <mem_free+0xf8>)
 8014a7e:	f240 2273 	movw	r2, #627	; 0x273
 8014a82:	4937      	ldr	r1, [pc, #220]	; (8014b60 <mem_free+0xfc>)
 8014a84:	4837      	ldr	r0, [pc, #220]	; (8014b64 <mem_free+0x100>)
 8014a86:	f00a fc71 	bl	801f36c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014a8a:	f00a fbeb 	bl	801f264 <sys_arch_protect>
 8014a8e:	60f8      	str	r0, [r7, #12]
 8014a90:	68f8      	ldr	r0, [r7, #12]
 8014a92:	f00a fbf5 	bl	801f280 <sys_arch_unprotect>
    return;
 8014a96:	e05e      	b.n	8014b56 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	3b08      	subs	r3, #8
 8014a9c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8014a9e:	4b32      	ldr	r3, [pc, #200]	; (8014b68 <mem_free+0x104>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	69fa      	ldr	r2, [r7, #28]
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	d306      	bcc.n	8014ab6 <mem_free+0x52>
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	f103 020c 	add.w	r2, r3, #12
 8014aae:	4b2f      	ldr	r3, [pc, #188]	; (8014b6c <mem_free+0x108>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d90d      	bls.n	8014ad2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8014ab6:	4b29      	ldr	r3, [pc, #164]	; (8014b5c <mem_free+0xf8>)
 8014ab8:	f240 227f 	movw	r2, #639	; 0x27f
 8014abc:	492c      	ldr	r1, [pc, #176]	; (8014b70 <mem_free+0x10c>)
 8014abe:	4829      	ldr	r0, [pc, #164]	; (8014b64 <mem_free+0x100>)
 8014ac0:	f00a fc54 	bl	801f36c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014ac4:	f00a fbce 	bl	801f264 <sys_arch_protect>
 8014ac8:	6138      	str	r0, [r7, #16]
 8014aca:	6938      	ldr	r0, [r7, #16]
 8014acc:	f00a fbd8 	bl	801f280 <sys_arch_unprotect>
    return;
 8014ad0:	e041      	b.n	8014b56 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014ad2:	4828      	ldr	r0, [pc, #160]	; (8014b74 <mem_free+0x110>)
 8014ad4:	f00a fb84 	bl	801f1e0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8014ad8:	69fb      	ldr	r3, [r7, #28]
 8014ada:	791b      	ldrb	r3, [r3, #4]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d110      	bne.n	8014b02 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8014ae0:	4b1e      	ldr	r3, [pc, #120]	; (8014b5c <mem_free+0xf8>)
 8014ae2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8014ae6:	4924      	ldr	r1, [pc, #144]	; (8014b78 <mem_free+0x114>)
 8014ae8:	481e      	ldr	r0, [pc, #120]	; (8014b64 <mem_free+0x100>)
 8014aea:	f00a fc3f 	bl	801f36c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014aee:	4821      	ldr	r0, [pc, #132]	; (8014b74 <mem_free+0x110>)
 8014af0:	f00a fb85 	bl	801f1fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014af4:	f00a fbb6 	bl	801f264 <sys_arch_protect>
 8014af8:	6178      	str	r0, [r7, #20]
 8014afa:	6978      	ldr	r0, [r7, #20]
 8014afc:	f00a fbc0 	bl	801f280 <sys_arch_unprotect>
    return;
 8014b00:	e029      	b.n	8014b56 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8014b02:	69f8      	ldr	r0, [r7, #28]
 8014b04:	f7ff ff72 	bl	80149ec <mem_link_valid>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d110      	bne.n	8014b30 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8014b0e:	4b13      	ldr	r3, [pc, #76]	; (8014b5c <mem_free+0xf8>)
 8014b10:	f240 2295 	movw	r2, #661	; 0x295
 8014b14:	4919      	ldr	r1, [pc, #100]	; (8014b7c <mem_free+0x118>)
 8014b16:	4813      	ldr	r0, [pc, #76]	; (8014b64 <mem_free+0x100>)
 8014b18:	f00a fc28 	bl	801f36c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014b1c:	4815      	ldr	r0, [pc, #84]	; (8014b74 <mem_free+0x110>)
 8014b1e:	f00a fb6e 	bl	801f1fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014b22:	f00a fb9f 	bl	801f264 <sys_arch_protect>
 8014b26:	61b8      	str	r0, [r7, #24]
 8014b28:	69b8      	ldr	r0, [r7, #24]
 8014b2a:	f00a fba9 	bl	801f280 <sys_arch_unprotect>
    return;
 8014b2e:	e012      	b.n	8014b56 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8014b30:	69fb      	ldr	r3, [r7, #28]
 8014b32:	2200      	movs	r2, #0
 8014b34:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8014b36:	4b12      	ldr	r3, [pc, #72]	; (8014b80 <mem_free+0x11c>)
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	69fa      	ldr	r2, [r7, #28]
 8014b3c:	429a      	cmp	r2, r3
 8014b3e:	d202      	bcs.n	8014b46 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8014b40:	4a0f      	ldr	r2, [pc, #60]	; (8014b80 <mem_free+0x11c>)
 8014b42:	69fb      	ldr	r3, [r7, #28]
 8014b44:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8014b46:	69f8      	ldr	r0, [r7, #28]
 8014b48:	f7ff fe5c 	bl	8014804 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014b4c:	4809      	ldr	r0, [pc, #36]	; (8014b74 <mem_free+0x110>)
 8014b4e:	f00a fb56 	bl	801f1fe <sys_mutex_unlock>
 8014b52:	e000      	b.n	8014b56 <mem_free+0xf2>
    return;
 8014b54:	bf00      	nop
}
 8014b56:	3720      	adds	r7, #32
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}
 8014b5c:	08021910 	.word	0x08021910
 8014b60:	08021a00 	.word	0x08021a00
 8014b64:	08021958 	.word	0x08021958
 8014b68:	2000c7b4 	.word	0x2000c7b4
 8014b6c:	2000c7b8 	.word	0x2000c7b8
 8014b70:	08021a24 	.word	0x08021a24
 8014b74:	2000c7bc 	.word	0x2000c7bc
 8014b78:	08021a40 	.word	0x08021a40
 8014b7c:	08021a68 	.word	0x08021a68
 8014b80:	2000c7c0 	.word	0x2000c7c0

08014b84 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b088      	sub	sp, #32
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
 8014b8c:	460b      	mov	r3, r1
 8014b8e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8014b90:	887b      	ldrh	r3, [r7, #2]
 8014b92:	3303      	adds	r3, #3
 8014b94:	b29b      	uxth	r3, r3
 8014b96:	f023 0303 	bic.w	r3, r3, #3
 8014b9a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8014b9c:	8bfb      	ldrh	r3, [r7, #30]
 8014b9e:	2b0b      	cmp	r3, #11
 8014ba0:	d801      	bhi.n	8014ba6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8014ba2:	230c      	movs	r3, #12
 8014ba4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8014ba6:	8bfb      	ldrh	r3, [r7, #30]
 8014ba8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014bac:	d803      	bhi.n	8014bb6 <mem_trim+0x32>
 8014bae:	8bfa      	ldrh	r2, [r7, #30]
 8014bb0:	887b      	ldrh	r3, [r7, #2]
 8014bb2:	429a      	cmp	r2, r3
 8014bb4:	d201      	bcs.n	8014bba <mem_trim+0x36>
    return NULL;
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	e0d8      	b.n	8014d6c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8014bba:	4b6e      	ldr	r3, [pc, #440]	; (8014d74 <mem_trim+0x1f0>)
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	687a      	ldr	r2, [r7, #4]
 8014bc0:	429a      	cmp	r2, r3
 8014bc2:	d304      	bcc.n	8014bce <mem_trim+0x4a>
 8014bc4:	4b6c      	ldr	r3, [pc, #432]	; (8014d78 <mem_trim+0x1f4>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	687a      	ldr	r2, [r7, #4]
 8014bca:	429a      	cmp	r2, r3
 8014bcc:	d306      	bcc.n	8014bdc <mem_trim+0x58>
 8014bce:	4b6b      	ldr	r3, [pc, #428]	; (8014d7c <mem_trim+0x1f8>)
 8014bd0:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014bd4:	496a      	ldr	r1, [pc, #424]	; (8014d80 <mem_trim+0x1fc>)
 8014bd6:	486b      	ldr	r0, [pc, #428]	; (8014d84 <mem_trim+0x200>)
 8014bd8:	f00a fbc8 	bl	801f36c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8014bdc:	4b65      	ldr	r3, [pc, #404]	; (8014d74 <mem_trim+0x1f0>)
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	687a      	ldr	r2, [r7, #4]
 8014be2:	429a      	cmp	r2, r3
 8014be4:	d304      	bcc.n	8014bf0 <mem_trim+0x6c>
 8014be6:	4b64      	ldr	r3, [pc, #400]	; (8014d78 <mem_trim+0x1f4>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	687a      	ldr	r2, [r7, #4]
 8014bec:	429a      	cmp	r2, r3
 8014bee:	d307      	bcc.n	8014c00 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014bf0:	f00a fb38 	bl	801f264 <sys_arch_protect>
 8014bf4:	60b8      	str	r0, [r7, #8]
 8014bf6:	68b8      	ldr	r0, [r7, #8]
 8014bf8:	f00a fb42 	bl	801f280 <sys_arch_unprotect>
    return rmem;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	e0b5      	b.n	8014d6c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	3b08      	subs	r3, #8
 8014c04:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8014c06:	69b8      	ldr	r0, [r7, #24]
 8014c08:	f7ff fdea 	bl	80147e0 <mem_to_ptr>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8014c10:	69bb      	ldr	r3, [r7, #24]
 8014c12:	881a      	ldrh	r2, [r3, #0]
 8014c14:	8afb      	ldrh	r3, [r7, #22]
 8014c16:	1ad3      	subs	r3, r2, r3
 8014c18:	b29b      	uxth	r3, r3
 8014c1a:	3b08      	subs	r3, #8
 8014c1c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8014c1e:	8bfa      	ldrh	r2, [r7, #30]
 8014c20:	8abb      	ldrh	r3, [r7, #20]
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d906      	bls.n	8014c34 <mem_trim+0xb0>
 8014c26:	4b55      	ldr	r3, [pc, #340]	; (8014d7c <mem_trim+0x1f8>)
 8014c28:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8014c2c:	4956      	ldr	r1, [pc, #344]	; (8014d88 <mem_trim+0x204>)
 8014c2e:	4855      	ldr	r0, [pc, #340]	; (8014d84 <mem_trim+0x200>)
 8014c30:	f00a fb9c 	bl	801f36c <iprintf>
  if (newsize > size) {
 8014c34:	8bfa      	ldrh	r2, [r7, #30]
 8014c36:	8abb      	ldrh	r3, [r7, #20]
 8014c38:	429a      	cmp	r2, r3
 8014c3a:	d901      	bls.n	8014c40 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	e095      	b.n	8014d6c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8014c40:	8bfa      	ldrh	r2, [r7, #30]
 8014c42:	8abb      	ldrh	r3, [r7, #20]
 8014c44:	429a      	cmp	r2, r3
 8014c46:	d101      	bne.n	8014c4c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	e08f      	b.n	8014d6c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014c4c:	484f      	ldr	r0, [pc, #316]	; (8014d8c <mem_trim+0x208>)
 8014c4e:	f00a fac7 	bl	801f1e0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8014c52:	69bb      	ldr	r3, [r7, #24]
 8014c54:	881b      	ldrh	r3, [r3, #0]
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7ff fdb0 	bl	80147bc <ptr_to_mem>
 8014c5c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	791b      	ldrb	r3, [r3, #4]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d13f      	bne.n	8014ce6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014c66:	69bb      	ldr	r3, [r7, #24]
 8014c68:	881b      	ldrh	r3, [r3, #0]
 8014c6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014c6e:	d106      	bne.n	8014c7e <mem_trim+0xfa>
 8014c70:	4b42      	ldr	r3, [pc, #264]	; (8014d7c <mem_trim+0x1f8>)
 8014c72:	f240 22f5 	movw	r2, #757	; 0x2f5
 8014c76:	4946      	ldr	r1, [pc, #280]	; (8014d90 <mem_trim+0x20c>)
 8014c78:	4842      	ldr	r0, [pc, #264]	; (8014d84 <mem_trim+0x200>)
 8014c7a:	f00a fb77 	bl	801f36c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8014c7e:	693b      	ldr	r3, [r7, #16]
 8014c80:	881b      	ldrh	r3, [r3, #0]
 8014c82:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014c84:	8afa      	ldrh	r2, [r7, #22]
 8014c86:	8bfb      	ldrh	r3, [r7, #30]
 8014c88:	4413      	add	r3, r2
 8014c8a:	b29b      	uxth	r3, r3
 8014c8c:	3308      	adds	r3, #8
 8014c8e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8014c90:	4b40      	ldr	r3, [pc, #256]	; (8014d94 <mem_trim+0x210>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	693a      	ldr	r2, [r7, #16]
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d106      	bne.n	8014ca8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8014c9a:	89fb      	ldrh	r3, [r7, #14]
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f7ff fd8d 	bl	80147bc <ptr_to_mem>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	4a3b      	ldr	r2, [pc, #236]	; (8014d94 <mem_trim+0x210>)
 8014ca6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8014ca8:	89fb      	ldrh	r3, [r7, #14]
 8014caa:	4618      	mov	r0, r3
 8014cac:	f7ff fd86 	bl	80147bc <ptr_to_mem>
 8014cb0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8014cb2:	693b      	ldr	r3, [r7, #16]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8014cb8:	693b      	ldr	r3, [r7, #16]
 8014cba:	89ba      	ldrh	r2, [r7, #12]
 8014cbc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	8afa      	ldrh	r2, [r7, #22]
 8014cc2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8014cc4:	69bb      	ldr	r3, [r7, #24]
 8014cc6:	89fa      	ldrh	r2, [r7, #14]
 8014cc8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	881b      	ldrh	r3, [r3, #0]
 8014cce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014cd2:	d047      	beq.n	8014d64 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	881b      	ldrh	r3, [r3, #0]
 8014cd8:	4618      	mov	r0, r3
 8014cda:	f7ff fd6f 	bl	80147bc <ptr_to_mem>
 8014cde:	4602      	mov	r2, r0
 8014ce0:	89fb      	ldrh	r3, [r7, #14]
 8014ce2:	8053      	strh	r3, [r2, #2]
 8014ce4:	e03e      	b.n	8014d64 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8014ce6:	8bfb      	ldrh	r3, [r7, #30]
 8014ce8:	f103 0214 	add.w	r2, r3, #20
 8014cec:	8abb      	ldrh	r3, [r7, #20]
 8014cee:	429a      	cmp	r2, r3
 8014cf0:	d838      	bhi.n	8014d64 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014cf2:	8afa      	ldrh	r2, [r7, #22]
 8014cf4:	8bfb      	ldrh	r3, [r7, #30]
 8014cf6:	4413      	add	r3, r2
 8014cf8:	b29b      	uxth	r3, r3
 8014cfa:	3308      	adds	r3, #8
 8014cfc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014cfe:	69bb      	ldr	r3, [r7, #24]
 8014d00:	881b      	ldrh	r3, [r3, #0]
 8014d02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014d06:	d106      	bne.n	8014d16 <mem_trim+0x192>
 8014d08:	4b1c      	ldr	r3, [pc, #112]	; (8014d7c <mem_trim+0x1f8>)
 8014d0a:	f240 3216 	movw	r2, #790	; 0x316
 8014d0e:	4920      	ldr	r1, [pc, #128]	; (8014d90 <mem_trim+0x20c>)
 8014d10:	481c      	ldr	r0, [pc, #112]	; (8014d84 <mem_trim+0x200>)
 8014d12:	f00a fb2b 	bl	801f36c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8014d16:	89fb      	ldrh	r3, [r7, #14]
 8014d18:	4618      	mov	r0, r3
 8014d1a:	f7ff fd4f 	bl	80147bc <ptr_to_mem>
 8014d1e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8014d20:	4b1c      	ldr	r3, [pc, #112]	; (8014d94 <mem_trim+0x210>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	693a      	ldr	r2, [r7, #16]
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d202      	bcs.n	8014d30 <mem_trim+0x1ac>
      lfree = mem2;
 8014d2a:	4a1a      	ldr	r2, [pc, #104]	; (8014d94 <mem_trim+0x210>)
 8014d2c:	693b      	ldr	r3, [r7, #16]
 8014d2e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8014d30:	693b      	ldr	r3, [r7, #16]
 8014d32:	2200      	movs	r2, #0
 8014d34:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8014d36:	69bb      	ldr	r3, [r7, #24]
 8014d38:	881a      	ldrh	r2, [r3, #0]
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8014d3e:	693b      	ldr	r3, [r7, #16]
 8014d40:	8afa      	ldrh	r2, [r7, #22]
 8014d42:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8014d44:	69bb      	ldr	r3, [r7, #24]
 8014d46:	89fa      	ldrh	r2, [r7, #14]
 8014d48:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014d4a:	693b      	ldr	r3, [r7, #16]
 8014d4c:	881b      	ldrh	r3, [r3, #0]
 8014d4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014d52:	d007      	beq.n	8014d64 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014d54:	693b      	ldr	r3, [r7, #16]
 8014d56:	881b      	ldrh	r3, [r3, #0]
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7ff fd2f 	bl	80147bc <ptr_to_mem>
 8014d5e:	4602      	mov	r2, r0
 8014d60:	89fb      	ldrh	r3, [r7, #14]
 8014d62:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014d64:	4809      	ldr	r0, [pc, #36]	; (8014d8c <mem_trim+0x208>)
 8014d66:	f00a fa4a 	bl	801f1fe <sys_mutex_unlock>
  return rmem;
 8014d6a:	687b      	ldr	r3, [r7, #4]
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3720      	adds	r7, #32
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}
 8014d74:	2000c7b4 	.word	0x2000c7b4
 8014d78:	2000c7b8 	.word	0x2000c7b8
 8014d7c:	08021910 	.word	0x08021910
 8014d80:	08021a9c 	.word	0x08021a9c
 8014d84:	08021958 	.word	0x08021958
 8014d88:	08021ab4 	.word	0x08021ab4
 8014d8c:	2000c7bc 	.word	0x2000c7bc
 8014d90:	08021ad4 	.word	0x08021ad4
 8014d94:	2000c7c0 	.word	0x2000c7c0

08014d98 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b088      	sub	sp, #32
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	4603      	mov	r3, r0
 8014da0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8014da2:	88fb      	ldrh	r3, [r7, #6]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d101      	bne.n	8014dac <mem_malloc+0x14>
    return NULL;
 8014da8:	2300      	movs	r3, #0
 8014daa:	e0e2      	b.n	8014f72 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8014dac:	88fb      	ldrh	r3, [r7, #6]
 8014dae:	3303      	adds	r3, #3
 8014db0:	b29b      	uxth	r3, r3
 8014db2:	f023 0303 	bic.w	r3, r3, #3
 8014db6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8014db8:	8bbb      	ldrh	r3, [r7, #28]
 8014dba:	2b0b      	cmp	r3, #11
 8014dbc:	d801      	bhi.n	8014dc2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8014dbe:	230c      	movs	r3, #12
 8014dc0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8014dc2:	8bbb      	ldrh	r3, [r7, #28]
 8014dc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014dc8:	d803      	bhi.n	8014dd2 <mem_malloc+0x3a>
 8014dca:	8bba      	ldrh	r2, [r7, #28]
 8014dcc:	88fb      	ldrh	r3, [r7, #6]
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	d201      	bcs.n	8014dd6 <mem_malloc+0x3e>
    return NULL;
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	e0cd      	b.n	8014f72 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8014dd6:	4869      	ldr	r0, [pc, #420]	; (8014f7c <mem_malloc+0x1e4>)
 8014dd8:	f00a fa02 	bl	801f1e0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014ddc:	4b68      	ldr	r3, [pc, #416]	; (8014f80 <mem_malloc+0x1e8>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	4618      	mov	r0, r3
 8014de2:	f7ff fcfd 	bl	80147e0 <mem_to_ptr>
 8014de6:	4603      	mov	r3, r0
 8014de8:	83fb      	strh	r3, [r7, #30]
 8014dea:	e0b7      	b.n	8014f5c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8014dec:	8bfb      	ldrh	r3, [r7, #30]
 8014dee:	4618      	mov	r0, r3
 8014df0:	f7ff fce4 	bl	80147bc <ptr_to_mem>
 8014df4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	791b      	ldrb	r3, [r3, #4]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	f040 80a7 	bne.w	8014f4e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	881b      	ldrh	r3, [r3, #0]
 8014e04:	461a      	mov	r2, r3
 8014e06:	8bfb      	ldrh	r3, [r7, #30]
 8014e08:	1ad3      	subs	r3, r2, r3
 8014e0a:	f1a3 0208 	sub.w	r2, r3, #8
 8014e0e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8014e10:	429a      	cmp	r2, r3
 8014e12:	f0c0 809c 	bcc.w	8014f4e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	881b      	ldrh	r3, [r3, #0]
 8014e1a:	461a      	mov	r2, r3
 8014e1c:	8bfb      	ldrh	r3, [r7, #30]
 8014e1e:	1ad3      	subs	r3, r2, r3
 8014e20:	f1a3 0208 	sub.w	r2, r3, #8
 8014e24:	8bbb      	ldrh	r3, [r7, #28]
 8014e26:	3314      	adds	r3, #20
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	d333      	bcc.n	8014e94 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014e2c:	8bfa      	ldrh	r2, [r7, #30]
 8014e2e:	8bbb      	ldrh	r3, [r7, #28]
 8014e30:	4413      	add	r3, r2
 8014e32:	b29b      	uxth	r3, r3
 8014e34:	3308      	adds	r3, #8
 8014e36:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014e38:	8a7b      	ldrh	r3, [r7, #18]
 8014e3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014e3e:	d106      	bne.n	8014e4e <mem_malloc+0xb6>
 8014e40:	4b50      	ldr	r3, [pc, #320]	; (8014f84 <mem_malloc+0x1ec>)
 8014e42:	f240 3287 	movw	r2, #903	; 0x387
 8014e46:	4950      	ldr	r1, [pc, #320]	; (8014f88 <mem_malloc+0x1f0>)
 8014e48:	4850      	ldr	r0, [pc, #320]	; (8014f8c <mem_malloc+0x1f4>)
 8014e4a:	f00a fa8f 	bl	801f36c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8014e4e:	8a7b      	ldrh	r3, [r7, #18]
 8014e50:	4618      	mov	r0, r3
 8014e52:	f7ff fcb3 	bl	80147bc <ptr_to_mem>
 8014e56:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014e5e:	697b      	ldr	r3, [r7, #20]
 8014e60:	881a      	ldrh	r2, [r3, #0]
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	8bfa      	ldrh	r2, [r7, #30]
 8014e6a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014e6c:	697b      	ldr	r3, [r7, #20]
 8014e6e:	8a7a      	ldrh	r2, [r7, #18]
 8014e70:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014e72:	697b      	ldr	r3, [r7, #20]
 8014e74:	2201      	movs	r2, #1
 8014e76:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	881b      	ldrh	r3, [r3, #0]
 8014e7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014e80:	d00b      	beq.n	8014e9a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	881b      	ldrh	r3, [r3, #0]
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7ff fc98 	bl	80147bc <ptr_to_mem>
 8014e8c:	4602      	mov	r2, r0
 8014e8e:	8a7b      	ldrh	r3, [r7, #18]
 8014e90:	8053      	strh	r3, [r2, #2]
 8014e92:	e002      	b.n	8014e9a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	2201      	movs	r2, #1
 8014e98:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014e9a:	4b39      	ldr	r3, [pc, #228]	; (8014f80 <mem_malloc+0x1e8>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	697a      	ldr	r2, [r7, #20]
 8014ea0:	429a      	cmp	r2, r3
 8014ea2:	d127      	bne.n	8014ef4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8014ea4:	4b36      	ldr	r3, [pc, #216]	; (8014f80 <mem_malloc+0x1e8>)
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014eaa:	e005      	b.n	8014eb8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014eac:	69bb      	ldr	r3, [r7, #24]
 8014eae:	881b      	ldrh	r3, [r3, #0]
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7ff fc83 	bl	80147bc <ptr_to_mem>
 8014eb6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014eb8:	69bb      	ldr	r3, [r7, #24]
 8014eba:	791b      	ldrb	r3, [r3, #4]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d004      	beq.n	8014eca <mem_malloc+0x132>
 8014ec0:	4b33      	ldr	r3, [pc, #204]	; (8014f90 <mem_malloc+0x1f8>)
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	69ba      	ldr	r2, [r7, #24]
 8014ec6:	429a      	cmp	r2, r3
 8014ec8:	d1f0      	bne.n	8014eac <mem_malloc+0x114>
          }
          lfree = cur;
 8014eca:	4a2d      	ldr	r2, [pc, #180]	; (8014f80 <mem_malloc+0x1e8>)
 8014ecc:	69bb      	ldr	r3, [r7, #24]
 8014ece:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8014ed0:	4b2b      	ldr	r3, [pc, #172]	; (8014f80 <mem_malloc+0x1e8>)
 8014ed2:	681a      	ldr	r2, [r3, #0]
 8014ed4:	4b2e      	ldr	r3, [pc, #184]	; (8014f90 <mem_malloc+0x1f8>)
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	429a      	cmp	r2, r3
 8014eda:	d00b      	beq.n	8014ef4 <mem_malloc+0x15c>
 8014edc:	4b28      	ldr	r3, [pc, #160]	; (8014f80 <mem_malloc+0x1e8>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	791b      	ldrb	r3, [r3, #4]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d006      	beq.n	8014ef4 <mem_malloc+0x15c>
 8014ee6:	4b27      	ldr	r3, [pc, #156]	; (8014f84 <mem_malloc+0x1ec>)
 8014ee8:	f240 32b5 	movw	r2, #949	; 0x3b5
 8014eec:	4929      	ldr	r1, [pc, #164]	; (8014f94 <mem_malloc+0x1fc>)
 8014eee:	4827      	ldr	r0, [pc, #156]	; (8014f8c <mem_malloc+0x1f4>)
 8014ef0:	f00a fa3c 	bl	801f36c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8014ef4:	4821      	ldr	r0, [pc, #132]	; (8014f7c <mem_malloc+0x1e4>)
 8014ef6:	f00a f982 	bl	801f1fe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8014efa:	8bba      	ldrh	r2, [r7, #28]
 8014efc:	697b      	ldr	r3, [r7, #20]
 8014efe:	4413      	add	r3, r2
 8014f00:	3308      	adds	r3, #8
 8014f02:	4a23      	ldr	r2, [pc, #140]	; (8014f90 <mem_malloc+0x1f8>)
 8014f04:	6812      	ldr	r2, [r2, #0]
 8014f06:	4293      	cmp	r3, r2
 8014f08:	d906      	bls.n	8014f18 <mem_malloc+0x180>
 8014f0a:	4b1e      	ldr	r3, [pc, #120]	; (8014f84 <mem_malloc+0x1ec>)
 8014f0c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8014f10:	4921      	ldr	r1, [pc, #132]	; (8014f98 <mem_malloc+0x200>)
 8014f12:	481e      	ldr	r0, [pc, #120]	; (8014f8c <mem_malloc+0x1f4>)
 8014f14:	f00a fa2a 	bl	801f36c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014f18:	697b      	ldr	r3, [r7, #20]
 8014f1a:	f003 0303 	and.w	r3, r3, #3
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d006      	beq.n	8014f30 <mem_malloc+0x198>
 8014f22:	4b18      	ldr	r3, [pc, #96]	; (8014f84 <mem_malloc+0x1ec>)
 8014f24:	f240 32bb 	movw	r2, #955	; 0x3bb
 8014f28:	491c      	ldr	r1, [pc, #112]	; (8014f9c <mem_malloc+0x204>)
 8014f2a:	4818      	ldr	r0, [pc, #96]	; (8014f8c <mem_malloc+0x1f4>)
 8014f2c:	f00a fa1e 	bl	801f36c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	f003 0303 	and.w	r3, r3, #3
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d006      	beq.n	8014f48 <mem_malloc+0x1b0>
 8014f3a:	4b12      	ldr	r3, [pc, #72]	; (8014f84 <mem_malloc+0x1ec>)
 8014f3c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8014f40:	4917      	ldr	r1, [pc, #92]	; (8014fa0 <mem_malloc+0x208>)
 8014f42:	4812      	ldr	r0, [pc, #72]	; (8014f8c <mem_malloc+0x1f4>)
 8014f44:	f00a fa12 	bl	801f36c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	3308      	adds	r3, #8
 8014f4c:	e011      	b.n	8014f72 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8014f4e:	8bfb      	ldrh	r3, [r7, #30]
 8014f50:	4618      	mov	r0, r3
 8014f52:	f7ff fc33 	bl	80147bc <ptr_to_mem>
 8014f56:	4603      	mov	r3, r0
 8014f58:	881b      	ldrh	r3, [r3, #0]
 8014f5a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014f5c:	8bfa      	ldrh	r2, [r7, #30]
 8014f5e:	8bbb      	ldrh	r3, [r7, #28]
 8014f60:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8014f64:	429a      	cmp	r2, r3
 8014f66:	f4ff af41 	bcc.w	8014dec <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8014f6a:	4804      	ldr	r0, [pc, #16]	; (8014f7c <mem_malloc+0x1e4>)
 8014f6c:	f00a f947 	bl	801f1fe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8014f70:	2300      	movs	r3, #0
}
 8014f72:	4618      	mov	r0, r3
 8014f74:	3720      	adds	r7, #32
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}
 8014f7a:	bf00      	nop
 8014f7c:	2000c7bc 	.word	0x2000c7bc
 8014f80:	2000c7c0 	.word	0x2000c7c0
 8014f84:	08021910 	.word	0x08021910
 8014f88:	08021ad4 	.word	0x08021ad4
 8014f8c:	08021958 	.word	0x08021958
 8014f90:	2000c7b8 	.word	0x2000c7b8
 8014f94:	08021ae8 	.word	0x08021ae8
 8014f98:	08021b04 	.word	0x08021b04
 8014f9c:	08021b34 	.word	0x08021b34
 8014fa0:	08021b64 	.word	0x08021b64

08014fa4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8014fa4:	b480      	push	{r7}
 8014fa6:	b085      	sub	sp, #20
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	689b      	ldr	r3, [r3, #8]
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	685b      	ldr	r3, [r3, #4]
 8014fb8:	3303      	adds	r3, #3
 8014fba:	f023 0303 	bic.w	r3, r3, #3
 8014fbe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	60fb      	str	r3, [r7, #12]
 8014fc4:	e011      	b.n	8014fea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	689b      	ldr	r3, [r3, #8]
 8014fca:	681a      	ldr	r2, [r3, #0]
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	689b      	ldr	r3, [r3, #8]
 8014fd4:	68ba      	ldr	r2, [r7, #8]
 8014fd6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	881b      	ldrh	r3, [r3, #0]
 8014fdc:	461a      	mov	r2, r3
 8014fde:	68bb      	ldr	r3, [r7, #8]
 8014fe0:	4413      	add	r3, r2
 8014fe2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	3301      	adds	r3, #1
 8014fe8:	60fb      	str	r3, [r7, #12]
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	885b      	ldrh	r3, [r3, #2]
 8014fee:	461a      	mov	r2, r3
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	4293      	cmp	r3, r2
 8014ff4:	dbe7      	blt.n	8014fc6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8014ff6:	bf00      	nop
 8014ff8:	bf00      	nop
 8014ffa:	3714      	adds	r7, #20
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015002:	4770      	bx	lr

08015004 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b082      	sub	sp, #8
 8015008:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801500a:	2300      	movs	r3, #0
 801500c:	80fb      	strh	r3, [r7, #6]
 801500e:	e009      	b.n	8015024 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8015010:	88fb      	ldrh	r3, [r7, #6]
 8015012:	4a08      	ldr	r2, [pc, #32]	; (8015034 <memp_init+0x30>)
 8015014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015018:	4618      	mov	r0, r3
 801501a:	f7ff ffc3 	bl	8014fa4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801501e:	88fb      	ldrh	r3, [r7, #6]
 8015020:	3301      	adds	r3, #1
 8015022:	80fb      	strh	r3, [r7, #6]
 8015024:	88fb      	ldrh	r3, [r7, #6]
 8015026:	2b0c      	cmp	r3, #12
 8015028:	d9f2      	bls.n	8015010 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801502a:	bf00      	nop
 801502c:	bf00      	nop
 801502e:	3708      	adds	r7, #8
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}
 8015034:	0807b084 	.word	0x0807b084

08015038 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b084      	sub	sp, #16
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8015040:	f00a f910 	bl	801f264 <sys_arch_protect>
 8015044:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	689b      	ldr	r3, [r3, #8]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d015      	beq.n	8015080 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	689b      	ldr	r3, [r3, #8]
 8015058:	68ba      	ldr	r2, [r7, #8]
 801505a:	6812      	ldr	r2, [r2, #0]
 801505c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801505e:	68bb      	ldr	r3, [r7, #8]
 8015060:	f003 0303 	and.w	r3, r3, #3
 8015064:	2b00      	cmp	r3, #0
 8015066:	d006      	beq.n	8015076 <do_memp_malloc_pool+0x3e>
 8015068:	4b09      	ldr	r3, [pc, #36]	; (8015090 <do_memp_malloc_pool+0x58>)
 801506a:	f44f 728c 	mov.w	r2, #280	; 0x118
 801506e:	4909      	ldr	r1, [pc, #36]	; (8015094 <do_memp_malloc_pool+0x5c>)
 8015070:	4809      	ldr	r0, [pc, #36]	; (8015098 <do_memp_malloc_pool+0x60>)
 8015072:	f00a f97b 	bl	801f36c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8015076:	68f8      	ldr	r0, [r7, #12]
 8015078:	f00a f902 	bl	801f280 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	e003      	b.n	8015088 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8015080:	68f8      	ldr	r0, [r7, #12]
 8015082:	f00a f8fd 	bl	801f280 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8015086:	2300      	movs	r3, #0
}
 8015088:	4618      	mov	r0, r3
 801508a:	3710      	adds	r7, #16
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}
 8015090:	08021b88 	.word	0x08021b88
 8015094:	08021bb8 	.word	0x08021bb8
 8015098:	08021bdc 	.word	0x08021bdc

0801509c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b084      	sub	sp, #16
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	4603      	mov	r3, r0
 80150a4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80150a6:	79fb      	ldrb	r3, [r7, #7]
 80150a8:	2b0c      	cmp	r3, #12
 80150aa:	d908      	bls.n	80150be <memp_malloc+0x22>
 80150ac:	4b0a      	ldr	r3, [pc, #40]	; (80150d8 <memp_malloc+0x3c>)
 80150ae:	f240 1257 	movw	r2, #343	; 0x157
 80150b2:	490a      	ldr	r1, [pc, #40]	; (80150dc <memp_malloc+0x40>)
 80150b4:	480a      	ldr	r0, [pc, #40]	; (80150e0 <memp_malloc+0x44>)
 80150b6:	f00a f959 	bl	801f36c <iprintf>
 80150ba:	2300      	movs	r3, #0
 80150bc:	e008      	b.n	80150d0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80150be:	79fb      	ldrb	r3, [r7, #7]
 80150c0:	4a08      	ldr	r2, [pc, #32]	; (80150e4 <memp_malloc+0x48>)
 80150c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80150c6:	4618      	mov	r0, r3
 80150c8:	f7ff ffb6 	bl	8015038 <do_memp_malloc_pool>
 80150cc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80150ce:	68fb      	ldr	r3, [r7, #12]
}
 80150d0:	4618      	mov	r0, r3
 80150d2:	3710      	adds	r7, #16
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}
 80150d8:	08021b88 	.word	0x08021b88
 80150dc:	08021c18 	.word	0x08021c18
 80150e0:	08021bdc 	.word	0x08021bdc
 80150e4:	0807b084 	.word	0x0807b084

080150e8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b084      	sub	sp, #16
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
 80150f0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80150f2:	683b      	ldr	r3, [r7, #0]
 80150f4:	f003 0303 	and.w	r3, r3, #3
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d006      	beq.n	801510a <do_memp_free_pool+0x22>
 80150fc:	4b0d      	ldr	r3, [pc, #52]	; (8015134 <do_memp_free_pool+0x4c>)
 80150fe:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8015102:	490d      	ldr	r1, [pc, #52]	; (8015138 <do_memp_free_pool+0x50>)
 8015104:	480d      	ldr	r0, [pc, #52]	; (801513c <do_memp_free_pool+0x54>)
 8015106:	f00a f931 	bl	801f36c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801510e:	f00a f8a9 	bl	801f264 <sys_arch_protect>
 8015112:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	689b      	ldr	r3, [r3, #8]
 8015118:	681a      	ldr	r2, [r3, #0]
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	689b      	ldr	r3, [r3, #8]
 8015122:	68fa      	ldr	r2, [r7, #12]
 8015124:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8015126:	68b8      	ldr	r0, [r7, #8]
 8015128:	f00a f8aa 	bl	801f280 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801512c:	bf00      	nop
 801512e:	3710      	adds	r7, #16
 8015130:	46bd      	mov	sp, r7
 8015132:	bd80      	pop	{r7, pc}
 8015134:	08021b88 	.word	0x08021b88
 8015138:	08021c38 	.word	0x08021c38
 801513c:	08021bdc 	.word	0x08021bdc

08015140 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b082      	sub	sp, #8
 8015144:	af00      	add	r7, sp, #0
 8015146:	4603      	mov	r3, r0
 8015148:	6039      	str	r1, [r7, #0]
 801514a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801514c:	79fb      	ldrb	r3, [r7, #7]
 801514e:	2b0c      	cmp	r3, #12
 8015150:	d907      	bls.n	8015162 <memp_free+0x22>
 8015152:	4b0c      	ldr	r3, [pc, #48]	; (8015184 <memp_free+0x44>)
 8015154:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8015158:	490b      	ldr	r1, [pc, #44]	; (8015188 <memp_free+0x48>)
 801515a:	480c      	ldr	r0, [pc, #48]	; (801518c <memp_free+0x4c>)
 801515c:	f00a f906 	bl	801f36c <iprintf>
 8015160:	e00c      	b.n	801517c <memp_free+0x3c>

  if (mem == NULL) {
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d008      	beq.n	801517a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8015168:	79fb      	ldrb	r3, [r7, #7]
 801516a:	4a09      	ldr	r2, [pc, #36]	; (8015190 <memp_free+0x50>)
 801516c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015170:	6839      	ldr	r1, [r7, #0]
 8015172:	4618      	mov	r0, r3
 8015174:	f7ff ffb8 	bl	80150e8 <do_memp_free_pool>
 8015178:	e000      	b.n	801517c <memp_free+0x3c>
    return;
 801517a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801517c:	3708      	adds	r7, #8
 801517e:	46bd      	mov	sp, r7
 8015180:	bd80      	pop	{r7, pc}
 8015182:	bf00      	nop
 8015184:	08021b88 	.word	0x08021b88
 8015188:	08021c58 	.word	0x08021c58
 801518c:	08021bdc 	.word	0x08021bdc
 8015190:	0807b084 	.word	0x0807b084

08015194 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015194:	b480      	push	{r7}
 8015196:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015198:	bf00      	nop
 801519a:	46bd      	mov	sp, r7
 801519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a0:	4770      	bx	lr
	...

080151a4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b086      	sub	sp, #24
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	60f8      	str	r0, [r7, #12]
 80151ac:	60b9      	str	r1, [r7, #8]
 80151ae:	607a      	str	r2, [r7, #4]
 80151b0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d108      	bne.n	80151ca <netif_add+0x26>
 80151b8:	4b57      	ldr	r3, [pc, #348]	; (8015318 <netif_add+0x174>)
 80151ba:	f240 1227 	movw	r2, #295	; 0x127
 80151be:	4957      	ldr	r1, [pc, #348]	; (801531c <netif_add+0x178>)
 80151c0:	4857      	ldr	r0, [pc, #348]	; (8015320 <netif_add+0x17c>)
 80151c2:	f00a f8d3 	bl	801f36c <iprintf>
 80151c6:	2300      	movs	r3, #0
 80151c8:	e0a2      	b.n	8015310 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80151ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d108      	bne.n	80151e2 <netif_add+0x3e>
 80151d0:	4b51      	ldr	r3, [pc, #324]	; (8015318 <netif_add+0x174>)
 80151d2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80151d6:	4953      	ldr	r1, [pc, #332]	; (8015324 <netif_add+0x180>)
 80151d8:	4851      	ldr	r0, [pc, #324]	; (8015320 <netif_add+0x17c>)
 80151da:	f00a f8c7 	bl	801f36c <iprintf>
 80151de:	2300      	movs	r3, #0
 80151e0:	e096      	b.n	8015310 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d101      	bne.n	80151ec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80151e8:	4b4f      	ldr	r3, [pc, #316]	; (8015328 <netif_add+0x184>)
 80151ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d101      	bne.n	80151f6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80151f2:	4b4d      	ldr	r3, [pc, #308]	; (8015328 <netif_add+0x184>)
 80151f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80151f6:	683b      	ldr	r3, [r7, #0]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d101      	bne.n	8015200 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80151fc:	4b4a      	ldr	r3, [pc, #296]	; (8015328 <netif_add+0x184>)
 80151fe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	2200      	movs	r2, #0
 8015204:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	2200      	movs	r2, #0
 801520a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	2200      	movs	r2, #0
 8015210:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	4a45      	ldr	r2, [pc, #276]	; (801532c <netif_add+0x188>)
 8015216:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2200      	movs	r2, #0
 801521c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	2200      	movs	r2, #0
 8015222:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	2200      	movs	r2, #0
 801522a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	6a3a      	ldr	r2, [r7, #32]
 8015230:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8015232:	4b3f      	ldr	r3, [pc, #252]	; (8015330 <netif_add+0x18c>)
 8015234:	781a      	ldrb	r2, [r3, #0]
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015240:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	687a      	ldr	r2, [r7, #4]
 8015246:	68b9      	ldr	r1, [r7, #8]
 8015248:	68f8      	ldr	r0, [r7, #12]
 801524a:	f000 f913 	bl	8015474 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015250:	68f8      	ldr	r0, [r7, #12]
 8015252:	4798      	blx	r3
 8015254:	4603      	mov	r3, r0
 8015256:	2b00      	cmp	r3, #0
 8015258:	d001      	beq.n	801525e <netif_add+0xba>
    return NULL;
 801525a:	2300      	movs	r3, #0
 801525c:	e058      	b.n	8015310 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015264:	2bff      	cmp	r3, #255	; 0xff
 8015266:	d103      	bne.n	8015270 <netif_add+0xcc>
        netif->num = 0;
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	2200      	movs	r2, #0
 801526c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8015270:	2300      	movs	r3, #0
 8015272:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015274:	4b2f      	ldr	r3, [pc, #188]	; (8015334 <netif_add+0x190>)
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	617b      	str	r3, [r7, #20]
 801527a:	e02b      	b.n	80152d4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801527c:	697a      	ldr	r2, [r7, #20]
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	429a      	cmp	r2, r3
 8015282:	d106      	bne.n	8015292 <netif_add+0xee>
 8015284:	4b24      	ldr	r3, [pc, #144]	; (8015318 <netif_add+0x174>)
 8015286:	f240 128b 	movw	r2, #395	; 0x18b
 801528a:	492b      	ldr	r1, [pc, #172]	; (8015338 <netif_add+0x194>)
 801528c:	4824      	ldr	r0, [pc, #144]	; (8015320 <netif_add+0x17c>)
 801528e:	f00a f86d 	bl	801f36c <iprintf>
        num_netifs++;
 8015292:	693b      	ldr	r3, [r7, #16]
 8015294:	3301      	adds	r3, #1
 8015296:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8015298:	693b      	ldr	r3, [r7, #16]
 801529a:	2bff      	cmp	r3, #255	; 0xff
 801529c:	dd06      	ble.n	80152ac <netif_add+0x108>
 801529e:	4b1e      	ldr	r3, [pc, #120]	; (8015318 <netif_add+0x174>)
 80152a0:	f240 128d 	movw	r2, #397	; 0x18d
 80152a4:	4925      	ldr	r1, [pc, #148]	; (801533c <netif_add+0x198>)
 80152a6:	481e      	ldr	r0, [pc, #120]	; (8015320 <netif_add+0x17c>)
 80152a8:	f00a f860 	bl	801f36c <iprintf>
        if (netif2->num == netif->num) {
 80152ac:	697b      	ldr	r3, [r7, #20]
 80152ae:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80152b8:	429a      	cmp	r2, r3
 80152ba:	d108      	bne.n	80152ce <netif_add+0x12a>
          netif->num++;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80152c2:	3301      	adds	r3, #1
 80152c4:	b2da      	uxtb	r2, r3
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80152cc:	e005      	b.n	80152da <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80152ce:	697b      	ldr	r3, [r7, #20]
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	617b      	str	r3, [r7, #20]
 80152d4:	697b      	ldr	r3, [r7, #20]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d1d0      	bne.n	801527c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d1be      	bne.n	801525e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80152e6:	2bfe      	cmp	r3, #254	; 0xfe
 80152e8:	d103      	bne.n	80152f2 <netif_add+0x14e>
    netif_num = 0;
 80152ea:	4b11      	ldr	r3, [pc, #68]	; (8015330 <netif_add+0x18c>)
 80152ec:	2200      	movs	r2, #0
 80152ee:	701a      	strb	r2, [r3, #0]
 80152f0:	e006      	b.n	8015300 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80152f8:	3301      	adds	r3, #1
 80152fa:	b2da      	uxtb	r2, r3
 80152fc:	4b0c      	ldr	r3, [pc, #48]	; (8015330 <netif_add+0x18c>)
 80152fe:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8015300:	4b0c      	ldr	r3, [pc, #48]	; (8015334 <netif_add+0x190>)
 8015302:	681a      	ldr	r2, [r3, #0]
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8015308:	4a0a      	ldr	r2, [pc, #40]	; (8015334 <netif_add+0x190>)
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801530e:	68fb      	ldr	r3, [r7, #12]
}
 8015310:	4618      	mov	r0, r3
 8015312:	3718      	adds	r7, #24
 8015314:	46bd      	mov	sp, r7
 8015316:	bd80      	pop	{r7, pc}
 8015318:	08021c74 	.word	0x08021c74
 801531c:	08021d08 	.word	0x08021d08
 8015320:	08021cc4 	.word	0x08021cc4
 8015324:	08021d24 	.word	0x08021d24
 8015328:	0807b0f8 	.word	0x0807b0f8
 801532c:	0801574f 	.word	0x0801574f
 8015330:	2000c7f8 	.word	0x2000c7f8
 8015334:	20014ba4 	.word	0x20014ba4
 8015338:	08021d48 	.word	0x08021d48
 801533c:	08021d5c 	.word	0x08021d5c

08015340 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b082      	sub	sp, #8
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
 8015348:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801534a:	6839      	ldr	r1, [r7, #0]
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f002 fe35 	bl	8017fbc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8015352:	6839      	ldr	r1, [r7, #0]
 8015354:	6878      	ldr	r0, [r7, #4]
 8015356:	f007 fb9d 	bl	801ca94 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801535a:	bf00      	nop
 801535c:	3708      	adds	r7, #8
 801535e:	46bd      	mov	sp, r7
 8015360:	bd80      	pop	{r7, pc}
	...

08015364 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b086      	sub	sp, #24
 8015368:	af00      	add	r7, sp, #0
 801536a:	60f8      	str	r0, [r7, #12]
 801536c:	60b9      	str	r1, [r7, #8]
 801536e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8015370:	68bb      	ldr	r3, [r7, #8]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d106      	bne.n	8015384 <netif_do_set_ipaddr+0x20>
 8015376:	4b1d      	ldr	r3, [pc, #116]	; (80153ec <netif_do_set_ipaddr+0x88>)
 8015378:	f240 12cb 	movw	r2, #459	; 0x1cb
 801537c:	491c      	ldr	r1, [pc, #112]	; (80153f0 <netif_do_set_ipaddr+0x8c>)
 801537e:	481d      	ldr	r0, [pc, #116]	; (80153f4 <netif_do_set_ipaddr+0x90>)
 8015380:	f009 fff4 	bl	801f36c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d106      	bne.n	8015398 <netif_do_set_ipaddr+0x34>
 801538a:	4b18      	ldr	r3, [pc, #96]	; (80153ec <netif_do_set_ipaddr+0x88>)
 801538c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8015390:	4917      	ldr	r1, [pc, #92]	; (80153f0 <netif_do_set_ipaddr+0x8c>)
 8015392:	4818      	ldr	r0, [pc, #96]	; (80153f4 <netif_do_set_ipaddr+0x90>)
 8015394:	f009 ffea 	bl	801f36c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	681a      	ldr	r2, [r3, #0]
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	3304      	adds	r3, #4
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	429a      	cmp	r2, r3
 80153a4:	d01c      	beq.n	80153e0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80153a6:	68bb      	ldr	r3, [r7, #8]
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	3304      	adds	r3, #4
 80153b0:	681a      	ldr	r2, [r3, #0]
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80153b6:	f107 0314 	add.w	r3, r7, #20
 80153ba:	4619      	mov	r1, r3
 80153bc:	6878      	ldr	r0, [r7, #4]
 80153be:	f7ff ffbf 	bl	8015340 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80153c2:	68bb      	ldr	r3, [r7, #8]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d002      	beq.n	80153ce <netif_do_set_ipaddr+0x6a>
 80153c8:	68bb      	ldr	r3, [r7, #8]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	e000      	b.n	80153d0 <netif_do_set_ipaddr+0x6c>
 80153ce:	2300      	movs	r3, #0
 80153d0:	68fa      	ldr	r2, [r7, #12]
 80153d2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80153d4:	2101      	movs	r1, #1
 80153d6:	68f8      	ldr	r0, [r7, #12]
 80153d8:	f000 f8d2 	bl	8015580 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80153dc:	2301      	movs	r3, #1
 80153de:	e000      	b.n	80153e2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80153e0:	2300      	movs	r3, #0
}
 80153e2:	4618      	mov	r0, r3
 80153e4:	3718      	adds	r7, #24
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
 80153ea:	bf00      	nop
 80153ec:	08021c74 	.word	0x08021c74
 80153f0:	08021d8c 	.word	0x08021d8c
 80153f4:	08021cc4 	.word	0x08021cc4

080153f8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80153f8:	b480      	push	{r7}
 80153fa:	b085      	sub	sp, #20
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	60f8      	str	r0, [r7, #12]
 8015400:	60b9      	str	r1, [r7, #8]
 8015402:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8015404:	68bb      	ldr	r3, [r7, #8]
 8015406:	681a      	ldr	r2, [r3, #0]
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	3308      	adds	r3, #8
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	429a      	cmp	r2, r3
 8015410:	d00a      	beq.n	8015428 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8015412:	68bb      	ldr	r3, [r7, #8]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d002      	beq.n	801541e <netif_do_set_netmask+0x26>
 8015418:	68bb      	ldr	r3, [r7, #8]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	e000      	b.n	8015420 <netif_do_set_netmask+0x28>
 801541e:	2300      	movs	r3, #0
 8015420:	68fa      	ldr	r2, [r7, #12]
 8015422:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8015424:	2301      	movs	r3, #1
 8015426:	e000      	b.n	801542a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8015428:	2300      	movs	r3, #0
}
 801542a:	4618      	mov	r0, r3
 801542c:	3714      	adds	r7, #20
 801542e:	46bd      	mov	sp, r7
 8015430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015434:	4770      	bx	lr

08015436 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8015436:	b480      	push	{r7}
 8015438:	b085      	sub	sp, #20
 801543a:	af00      	add	r7, sp, #0
 801543c:	60f8      	str	r0, [r7, #12]
 801543e:	60b9      	str	r1, [r7, #8]
 8015440:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8015442:	68bb      	ldr	r3, [r7, #8]
 8015444:	681a      	ldr	r2, [r3, #0]
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	330c      	adds	r3, #12
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	429a      	cmp	r2, r3
 801544e:	d00a      	beq.n	8015466 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8015450:	68bb      	ldr	r3, [r7, #8]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d002      	beq.n	801545c <netif_do_set_gw+0x26>
 8015456:	68bb      	ldr	r3, [r7, #8]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	e000      	b.n	801545e <netif_do_set_gw+0x28>
 801545c:	2300      	movs	r3, #0
 801545e:	68fa      	ldr	r2, [r7, #12]
 8015460:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8015462:	2301      	movs	r3, #1
 8015464:	e000      	b.n	8015468 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8015466:	2300      	movs	r3, #0
}
 8015468:	4618      	mov	r0, r3
 801546a:	3714      	adds	r7, #20
 801546c:	46bd      	mov	sp, r7
 801546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015472:	4770      	bx	lr

08015474 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b088      	sub	sp, #32
 8015478:	af00      	add	r7, sp, #0
 801547a:	60f8      	str	r0, [r7, #12]
 801547c:	60b9      	str	r1, [r7, #8]
 801547e:	607a      	str	r2, [r7, #4]
 8015480:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8015482:	2300      	movs	r3, #0
 8015484:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8015486:	2300      	movs	r3, #0
 8015488:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d101      	bne.n	8015494 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8015490:	4b1c      	ldr	r3, [pc, #112]	; (8015504 <netif_set_addr+0x90>)
 8015492:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d101      	bne.n	801549e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801549a:	4b1a      	ldr	r3, [pc, #104]	; (8015504 <netif_set_addr+0x90>)
 801549c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801549e:	683b      	ldr	r3, [r7, #0]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d101      	bne.n	80154a8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80154a4:	4b17      	ldr	r3, [pc, #92]	; (8015504 <netif_set_addr+0x90>)
 80154a6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d003      	beq.n	80154b6 <netif_set_addr+0x42>
 80154ae:	68bb      	ldr	r3, [r7, #8]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d101      	bne.n	80154ba <netif_set_addr+0x46>
 80154b6:	2301      	movs	r3, #1
 80154b8:	e000      	b.n	80154bc <netif_set_addr+0x48>
 80154ba:	2300      	movs	r3, #0
 80154bc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80154be:	697b      	ldr	r3, [r7, #20]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d006      	beq.n	80154d2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80154c4:	f107 0310 	add.w	r3, r7, #16
 80154c8:	461a      	mov	r2, r3
 80154ca:	68b9      	ldr	r1, [r7, #8]
 80154cc:	68f8      	ldr	r0, [r7, #12]
 80154ce:	f7ff ff49 	bl	8015364 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80154d2:	69fa      	ldr	r2, [r7, #28]
 80154d4:	6879      	ldr	r1, [r7, #4]
 80154d6:	68f8      	ldr	r0, [r7, #12]
 80154d8:	f7ff ff8e 	bl	80153f8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80154dc:	69ba      	ldr	r2, [r7, #24]
 80154de:	6839      	ldr	r1, [r7, #0]
 80154e0:	68f8      	ldr	r0, [r7, #12]
 80154e2:	f7ff ffa8 	bl	8015436 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80154e6:	697b      	ldr	r3, [r7, #20]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d106      	bne.n	80154fa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80154ec:	f107 0310 	add.w	r3, r7, #16
 80154f0:	461a      	mov	r2, r3
 80154f2:	68b9      	ldr	r1, [r7, #8]
 80154f4:	68f8      	ldr	r0, [r7, #12]
 80154f6:	f7ff ff35 	bl	8015364 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80154fa:	bf00      	nop
 80154fc:	3720      	adds	r7, #32
 80154fe:	46bd      	mov	sp, r7
 8015500:	bd80      	pop	{r7, pc}
 8015502:	bf00      	nop
 8015504:	0807b0f8 	.word	0x0807b0f8

08015508 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8015508:	b480      	push	{r7}
 801550a:	b083      	sub	sp, #12
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8015510:	4a04      	ldr	r2, [pc, #16]	; (8015524 <netif_set_default+0x1c>)
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8015516:	bf00      	nop
 8015518:	370c      	adds	r7, #12
 801551a:	46bd      	mov	sp, r7
 801551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015520:	4770      	bx	lr
 8015522:	bf00      	nop
 8015524:	20014ba8 	.word	0x20014ba8

08015528 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b082      	sub	sp, #8
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d107      	bne.n	8015546 <netif_set_up+0x1e>
 8015536:	4b0f      	ldr	r3, [pc, #60]	; (8015574 <netif_set_up+0x4c>)
 8015538:	f44f 7254 	mov.w	r2, #848	; 0x350
 801553c:	490e      	ldr	r1, [pc, #56]	; (8015578 <netif_set_up+0x50>)
 801553e:	480f      	ldr	r0, [pc, #60]	; (801557c <netif_set_up+0x54>)
 8015540:	f009 ff14 	bl	801f36c <iprintf>
 8015544:	e013      	b.n	801556e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801554c:	f003 0301 	and.w	r3, r3, #1
 8015550:	2b00      	cmp	r3, #0
 8015552:	d10c      	bne.n	801556e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801555a:	f043 0301 	orr.w	r3, r3, #1
 801555e:	b2da      	uxtb	r2, r3
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015566:	2103      	movs	r1, #3
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f000 f809 	bl	8015580 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801556e:	3708      	adds	r7, #8
 8015570:	46bd      	mov	sp, r7
 8015572:	bd80      	pop	{r7, pc}
 8015574:	08021c74 	.word	0x08021c74
 8015578:	08021dfc 	.word	0x08021dfc
 801557c:	08021cc4 	.word	0x08021cc4

08015580 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b082      	sub	sp, #8
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
 8015588:	460b      	mov	r3, r1
 801558a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d106      	bne.n	80155a0 <netif_issue_reports+0x20>
 8015592:	4b18      	ldr	r3, [pc, #96]	; (80155f4 <netif_issue_reports+0x74>)
 8015594:	f240 326d 	movw	r2, #877	; 0x36d
 8015598:	4917      	ldr	r1, [pc, #92]	; (80155f8 <netif_issue_reports+0x78>)
 801559a:	4818      	ldr	r0, [pc, #96]	; (80155fc <netif_issue_reports+0x7c>)
 801559c:	f009 fee6 	bl	801f36c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155a6:	f003 0304 	and.w	r3, r3, #4
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d01e      	beq.n	80155ec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155b4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d017      	beq.n	80155ec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80155bc:	78fb      	ldrb	r3, [r7, #3]
 80155be:	f003 0301 	and.w	r3, r3, #1
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d013      	beq.n	80155ee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	3304      	adds	r3, #4
 80155ca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d00e      	beq.n	80155ee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155d6:	f003 0308 	and.w	r3, r3, #8
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d007      	beq.n	80155ee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	3304      	adds	r3, #4
 80155e2:	4619      	mov	r1, r3
 80155e4:	6878      	ldr	r0, [r7, #4]
 80155e6:	f008 f9bf 	bl	801d968 <etharp_request>
 80155ea:	e000      	b.n	80155ee <netif_issue_reports+0x6e>
    return;
 80155ec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80155ee:	3708      	adds	r7, #8
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}
 80155f4:	08021c74 	.word	0x08021c74
 80155f8:	08021e18 	.word	0x08021e18
 80155fc:	08021cc4 	.word	0x08021cc4

08015600 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b082      	sub	sp, #8
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d107      	bne.n	801561e <netif_set_down+0x1e>
 801560e:	4b12      	ldr	r3, [pc, #72]	; (8015658 <netif_set_down+0x58>)
 8015610:	f240 329b 	movw	r2, #923	; 0x39b
 8015614:	4911      	ldr	r1, [pc, #68]	; (801565c <netif_set_down+0x5c>)
 8015616:	4812      	ldr	r0, [pc, #72]	; (8015660 <netif_set_down+0x60>)
 8015618:	f009 fea8 	bl	801f36c <iprintf>
 801561c:	e019      	b.n	8015652 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015624:	f003 0301 	and.w	r3, r3, #1
 8015628:	2b00      	cmp	r3, #0
 801562a:	d012      	beq.n	8015652 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015632:	f023 0301 	bic.w	r3, r3, #1
 8015636:	b2da      	uxtb	r2, r3
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015644:	f003 0308 	and.w	r3, r3, #8
 8015648:	2b00      	cmp	r3, #0
 801564a:	d002      	beq.n	8015652 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801564c:	6878      	ldr	r0, [r7, #4]
 801564e:	f007 fd49 	bl	801d0e4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8015652:	3708      	adds	r7, #8
 8015654:	46bd      	mov	sp, r7
 8015656:	bd80      	pop	{r7, pc}
 8015658:	08021c74 	.word	0x08021c74
 801565c:	08021e3c 	.word	0x08021e3c
 8015660:	08021cc4 	.word	0x08021cc4

08015664 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b082      	sub	sp, #8
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d107      	bne.n	8015682 <netif_set_link_up+0x1e>
 8015672:	4b13      	ldr	r3, [pc, #76]	; (80156c0 <netif_set_link_up+0x5c>)
 8015674:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8015678:	4912      	ldr	r1, [pc, #72]	; (80156c4 <netif_set_link_up+0x60>)
 801567a:	4813      	ldr	r0, [pc, #76]	; (80156c8 <netif_set_link_up+0x64>)
 801567c:	f009 fe76 	bl	801f36c <iprintf>
 8015680:	e01b      	b.n	80156ba <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015688:	f003 0304 	and.w	r3, r3, #4
 801568c:	2b00      	cmp	r3, #0
 801568e:	d114      	bne.n	80156ba <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015696:	f043 0304 	orr.w	r3, r3, #4
 801569a:	b2da      	uxtb	r2, r3
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80156a2:	2103      	movs	r1, #3
 80156a4:	6878      	ldr	r0, [r7, #4]
 80156a6:	f7ff ff6b 	bl	8015580 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	69db      	ldr	r3, [r3, #28]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d003      	beq.n	80156ba <netif_set_link_up+0x56>
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	69db      	ldr	r3, [r3, #28]
 80156b6:	6878      	ldr	r0, [r7, #4]
 80156b8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80156ba:	3708      	adds	r7, #8
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}
 80156c0:	08021c74 	.word	0x08021c74
 80156c4:	08021e5c 	.word	0x08021e5c
 80156c8:	08021cc4 	.word	0x08021cc4

080156cc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b082      	sub	sp, #8
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d107      	bne.n	80156ea <netif_set_link_down+0x1e>
 80156da:	4b11      	ldr	r3, [pc, #68]	; (8015720 <netif_set_link_down+0x54>)
 80156dc:	f240 4206 	movw	r2, #1030	; 0x406
 80156e0:	4910      	ldr	r1, [pc, #64]	; (8015724 <netif_set_link_down+0x58>)
 80156e2:	4811      	ldr	r0, [pc, #68]	; (8015728 <netif_set_link_down+0x5c>)
 80156e4:	f009 fe42 	bl	801f36c <iprintf>
 80156e8:	e017      	b.n	801571a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80156f0:	f003 0304 	and.w	r3, r3, #4
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d010      	beq.n	801571a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80156fe:	f023 0304 	bic.w	r3, r3, #4
 8015702:	b2da      	uxtb	r2, r3
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	69db      	ldr	r3, [r3, #28]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d003      	beq.n	801571a <netif_set_link_down+0x4e>
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	69db      	ldr	r3, [r3, #28]
 8015716:	6878      	ldr	r0, [r7, #4]
 8015718:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801571a:	3708      	adds	r7, #8
 801571c:	46bd      	mov	sp, r7
 801571e:	bd80      	pop	{r7, pc}
 8015720:	08021c74 	.word	0x08021c74
 8015724:	08021e80 	.word	0x08021e80
 8015728:	08021cc4 	.word	0x08021cc4

0801572c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801572c:	b480      	push	{r7}
 801572e:	b083      	sub	sp, #12
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
 8015734:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d002      	beq.n	8015742 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	683a      	ldr	r2, [r7, #0]
 8015740:	61da      	str	r2, [r3, #28]
  }
}
 8015742:	bf00      	nop
 8015744:	370c      	adds	r7, #12
 8015746:	46bd      	mov	sp, r7
 8015748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574c:	4770      	bx	lr

0801574e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801574e:	b480      	push	{r7}
 8015750:	b085      	sub	sp, #20
 8015752:	af00      	add	r7, sp, #0
 8015754:	60f8      	str	r0, [r7, #12]
 8015756:	60b9      	str	r1, [r7, #8]
 8015758:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801575a:	f06f 030b 	mvn.w	r3, #11
}
 801575e:	4618      	mov	r0, r3
 8015760:	3714      	adds	r7, #20
 8015762:	46bd      	mov	sp, r7
 8015764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015768:	4770      	bx	lr
	...

0801576c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801576c:	b480      	push	{r7}
 801576e:	b085      	sub	sp, #20
 8015770:	af00      	add	r7, sp, #0
 8015772:	4603      	mov	r3, r0
 8015774:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8015776:	79fb      	ldrb	r3, [r7, #7]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d013      	beq.n	80157a4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801577c:	4b0d      	ldr	r3, [pc, #52]	; (80157b4 <netif_get_by_index+0x48>)
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	60fb      	str	r3, [r7, #12]
 8015782:	e00c      	b.n	801579e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801578a:	3301      	adds	r3, #1
 801578c:	b2db      	uxtb	r3, r3
 801578e:	79fa      	ldrb	r2, [r7, #7]
 8015790:	429a      	cmp	r2, r3
 8015792:	d101      	bne.n	8015798 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	e006      	b.n	80157a6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	60fb      	str	r3, [r7, #12]
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d1ef      	bne.n	8015784 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80157a4:	2300      	movs	r3, #0
}
 80157a6:	4618      	mov	r0, r3
 80157a8:	3714      	adds	r7, #20
 80157aa:	46bd      	mov	sp, r7
 80157ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b0:	4770      	bx	lr
 80157b2:	bf00      	nop
 80157b4:	20014ba4 	.word	0x20014ba4

080157b8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80157be:	f009 fd51 	bl	801f264 <sys_arch_protect>
 80157c2:	6038      	str	r0, [r7, #0]
 80157c4:	4b0d      	ldr	r3, [pc, #52]	; (80157fc <pbuf_free_ooseq+0x44>)
 80157c6:	2200      	movs	r2, #0
 80157c8:	701a      	strb	r2, [r3, #0]
 80157ca:	6838      	ldr	r0, [r7, #0]
 80157cc:	f009 fd58 	bl	801f280 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80157d0:	4b0b      	ldr	r3, [pc, #44]	; (8015800 <pbuf_free_ooseq+0x48>)
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	607b      	str	r3, [r7, #4]
 80157d6:	e00a      	b.n	80157ee <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d003      	beq.n	80157e8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f002 fc29 	bl	8018038 <tcp_free_ooseq>
      return;
 80157e6:	e005      	b.n	80157f4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	68db      	ldr	r3, [r3, #12]
 80157ec:	607b      	str	r3, [r7, #4]
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d1f1      	bne.n	80157d8 <pbuf_free_ooseq+0x20>
    }
  }
}
 80157f4:	3708      	adds	r7, #8
 80157f6:	46bd      	mov	sp, r7
 80157f8:	bd80      	pop	{r7, pc}
 80157fa:	bf00      	nop
 80157fc:	20014bac 	.word	0x20014bac
 8015800:	20014bb4 	.word	0x20014bb4

08015804 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b082      	sub	sp, #8
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801580c:	f7ff ffd4 	bl	80157b8 <pbuf_free_ooseq>
}
 8015810:	bf00      	nop
 8015812:	3708      	adds	r7, #8
 8015814:	46bd      	mov	sp, r7
 8015816:	bd80      	pop	{r7, pc}

08015818 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8015818:	b580      	push	{r7, lr}
 801581a:	b082      	sub	sp, #8
 801581c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801581e:	f009 fd21 	bl	801f264 <sys_arch_protect>
 8015822:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8015824:	4b0f      	ldr	r3, [pc, #60]	; (8015864 <pbuf_pool_is_empty+0x4c>)
 8015826:	781b      	ldrb	r3, [r3, #0]
 8015828:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801582a:	4b0e      	ldr	r3, [pc, #56]	; (8015864 <pbuf_pool_is_empty+0x4c>)
 801582c:	2201      	movs	r2, #1
 801582e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f009 fd25 	bl	801f280 <sys_arch_unprotect>

  if (!queued) {
 8015836:	78fb      	ldrb	r3, [r7, #3]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d10f      	bne.n	801585c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801583c:	2100      	movs	r1, #0
 801583e:	480a      	ldr	r0, [pc, #40]	; (8015868 <pbuf_pool_is_empty+0x50>)
 8015840:	f7fd fb1c 	bl	8012e7c <tcpip_try_callback>
 8015844:	4603      	mov	r3, r0
 8015846:	2b00      	cmp	r3, #0
 8015848:	d008      	beq.n	801585c <pbuf_pool_is_empty+0x44>
 801584a:	f009 fd0b 	bl	801f264 <sys_arch_protect>
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	4b04      	ldr	r3, [pc, #16]	; (8015864 <pbuf_pool_is_empty+0x4c>)
 8015852:	2200      	movs	r2, #0
 8015854:	701a      	strb	r2, [r3, #0]
 8015856:	6878      	ldr	r0, [r7, #4]
 8015858:	f009 fd12 	bl	801f280 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801585c:	bf00      	nop
 801585e:	3708      	adds	r7, #8
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}
 8015864:	20014bac 	.word	0x20014bac
 8015868:	08015805 	.word	0x08015805

0801586c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801586c:	b480      	push	{r7}
 801586e:	b085      	sub	sp, #20
 8015870:	af00      	add	r7, sp, #0
 8015872:	60f8      	str	r0, [r7, #12]
 8015874:	60b9      	str	r1, [r7, #8]
 8015876:	4611      	mov	r1, r2
 8015878:	461a      	mov	r2, r3
 801587a:	460b      	mov	r3, r1
 801587c:	80fb      	strh	r3, [r7, #6]
 801587e:	4613      	mov	r3, r2
 8015880:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	2200      	movs	r2, #0
 8015886:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	68ba      	ldr	r2, [r7, #8]
 801588c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	88fa      	ldrh	r2, [r7, #6]
 8015892:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	88ba      	ldrh	r2, [r7, #4]
 8015898:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801589a:	8b3b      	ldrh	r3, [r7, #24]
 801589c:	b2da      	uxtb	r2, r3
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	7f3a      	ldrb	r2, [r7, #28]
 80158a6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	2201      	movs	r2, #1
 80158ac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	2200      	movs	r2, #0
 80158b2:	73da      	strb	r2, [r3, #15]
}
 80158b4:	bf00      	nop
 80158b6:	3714      	adds	r7, #20
 80158b8:	46bd      	mov	sp, r7
 80158ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158be:	4770      	bx	lr

080158c0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b08c      	sub	sp, #48	; 0x30
 80158c4:	af02      	add	r7, sp, #8
 80158c6:	4603      	mov	r3, r0
 80158c8:	71fb      	strb	r3, [r7, #7]
 80158ca:	460b      	mov	r3, r1
 80158cc:	80bb      	strh	r3, [r7, #4]
 80158ce:	4613      	mov	r3, r2
 80158d0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80158d2:	79fb      	ldrb	r3, [r7, #7]
 80158d4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80158d6:	887b      	ldrh	r3, [r7, #2]
 80158d8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80158dc:	d07f      	beq.n	80159de <pbuf_alloc+0x11e>
 80158de:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80158e2:	f300 80c8 	bgt.w	8015a76 <pbuf_alloc+0x1b6>
 80158e6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80158ea:	d010      	beq.n	801590e <pbuf_alloc+0x4e>
 80158ec:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80158f0:	f300 80c1 	bgt.w	8015a76 <pbuf_alloc+0x1b6>
 80158f4:	2b01      	cmp	r3, #1
 80158f6:	d002      	beq.n	80158fe <pbuf_alloc+0x3e>
 80158f8:	2b41      	cmp	r3, #65	; 0x41
 80158fa:	f040 80bc 	bne.w	8015a76 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80158fe:	887a      	ldrh	r2, [r7, #2]
 8015900:	88bb      	ldrh	r3, [r7, #4]
 8015902:	4619      	mov	r1, r3
 8015904:	2000      	movs	r0, #0
 8015906:	f000 f8d1 	bl	8015aac <pbuf_alloc_reference>
 801590a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801590c:	e0bd      	b.n	8015a8a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801590e:	2300      	movs	r3, #0
 8015910:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8015912:	2300      	movs	r3, #0
 8015914:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8015916:	88bb      	ldrh	r3, [r7, #4]
 8015918:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801591a:	200c      	movs	r0, #12
 801591c:	f7ff fbbe 	bl	801509c <memp_malloc>
 8015920:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8015922:	693b      	ldr	r3, [r7, #16]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d109      	bne.n	801593c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8015928:	f7ff ff76 	bl	8015818 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801592e:	2b00      	cmp	r3, #0
 8015930:	d002      	beq.n	8015938 <pbuf_alloc+0x78>
            pbuf_free(p);
 8015932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015934:	f000 faba 	bl	8015eac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8015938:	2300      	movs	r3, #0
 801593a:	e0a7      	b.n	8015a8c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801593c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801593e:	3303      	adds	r3, #3
 8015940:	b29b      	uxth	r3, r3
 8015942:	f023 0303 	bic.w	r3, r3, #3
 8015946:	b29b      	uxth	r3, r3
 8015948:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801594c:	b29b      	uxth	r3, r3
 801594e:	8b7a      	ldrh	r2, [r7, #26]
 8015950:	4293      	cmp	r3, r2
 8015952:	bf28      	it	cs
 8015954:	4613      	movcs	r3, r2
 8015956:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8015958:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801595a:	3310      	adds	r3, #16
 801595c:	693a      	ldr	r2, [r7, #16]
 801595e:	4413      	add	r3, r2
 8015960:	3303      	adds	r3, #3
 8015962:	f023 0303 	bic.w	r3, r3, #3
 8015966:	4618      	mov	r0, r3
 8015968:	89f9      	ldrh	r1, [r7, #14]
 801596a:	8b7a      	ldrh	r2, [r7, #26]
 801596c:	2300      	movs	r3, #0
 801596e:	9301      	str	r3, [sp, #4]
 8015970:	887b      	ldrh	r3, [r7, #2]
 8015972:	9300      	str	r3, [sp, #0]
 8015974:	460b      	mov	r3, r1
 8015976:	4601      	mov	r1, r0
 8015978:	6938      	ldr	r0, [r7, #16]
 801597a:	f7ff ff77 	bl	801586c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801597e:	693b      	ldr	r3, [r7, #16]
 8015980:	685b      	ldr	r3, [r3, #4]
 8015982:	f003 0303 	and.w	r3, r3, #3
 8015986:	2b00      	cmp	r3, #0
 8015988:	d006      	beq.n	8015998 <pbuf_alloc+0xd8>
 801598a:	4b42      	ldr	r3, [pc, #264]	; (8015a94 <pbuf_alloc+0x1d4>)
 801598c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015990:	4941      	ldr	r1, [pc, #260]	; (8015a98 <pbuf_alloc+0x1d8>)
 8015992:	4842      	ldr	r0, [pc, #264]	; (8015a9c <pbuf_alloc+0x1dc>)
 8015994:	f009 fcea 	bl	801f36c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015998:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801599a:	3303      	adds	r3, #3
 801599c:	f023 0303 	bic.w	r3, r3, #3
 80159a0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80159a4:	d106      	bne.n	80159b4 <pbuf_alloc+0xf4>
 80159a6:	4b3b      	ldr	r3, [pc, #236]	; (8015a94 <pbuf_alloc+0x1d4>)
 80159a8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80159ac:	493c      	ldr	r1, [pc, #240]	; (8015aa0 <pbuf_alloc+0x1e0>)
 80159ae:	483b      	ldr	r0, [pc, #236]	; (8015a9c <pbuf_alloc+0x1dc>)
 80159b0:	f009 fcdc 	bl	801f36c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80159b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d102      	bne.n	80159c0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80159ba:	693b      	ldr	r3, [r7, #16]
 80159bc:	627b      	str	r3, [r7, #36]	; 0x24
 80159be:	e002      	b.n	80159c6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80159c0:	69fb      	ldr	r3, [r7, #28]
 80159c2:	693a      	ldr	r2, [r7, #16]
 80159c4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80159ca:	8b7a      	ldrh	r2, [r7, #26]
 80159cc:	89fb      	ldrh	r3, [r7, #14]
 80159ce:	1ad3      	subs	r3, r2, r3
 80159d0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80159d2:	2300      	movs	r3, #0
 80159d4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80159d6:	8b7b      	ldrh	r3, [r7, #26]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d19e      	bne.n	801591a <pbuf_alloc+0x5a>
      break;
 80159dc:	e055      	b.n	8015a8a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80159de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159e0:	3303      	adds	r3, #3
 80159e2:	b29b      	uxth	r3, r3
 80159e4:	f023 0303 	bic.w	r3, r3, #3
 80159e8:	b29a      	uxth	r2, r3
 80159ea:	88bb      	ldrh	r3, [r7, #4]
 80159ec:	3303      	adds	r3, #3
 80159ee:	b29b      	uxth	r3, r3
 80159f0:	f023 0303 	bic.w	r3, r3, #3
 80159f4:	b29b      	uxth	r3, r3
 80159f6:	4413      	add	r3, r2
 80159f8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80159fa:	8b3b      	ldrh	r3, [r7, #24]
 80159fc:	3310      	adds	r3, #16
 80159fe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015a00:	8b3a      	ldrh	r2, [r7, #24]
 8015a02:	88bb      	ldrh	r3, [r7, #4]
 8015a04:	3303      	adds	r3, #3
 8015a06:	f023 0303 	bic.w	r3, r3, #3
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d306      	bcc.n	8015a1c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8015a0e:	8afa      	ldrh	r2, [r7, #22]
 8015a10:	88bb      	ldrh	r3, [r7, #4]
 8015a12:	3303      	adds	r3, #3
 8015a14:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	d201      	bcs.n	8015a20 <pbuf_alloc+0x160>
        return NULL;
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	e035      	b.n	8015a8c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8015a20:	8afb      	ldrh	r3, [r7, #22]
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7ff f9b8 	bl	8014d98 <mem_malloc>
 8015a28:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8015a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d101      	bne.n	8015a34 <pbuf_alloc+0x174>
        return NULL;
 8015a30:	2300      	movs	r3, #0
 8015a32:	e02b      	b.n	8015a8c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8015a34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a36:	3310      	adds	r3, #16
 8015a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a3a:	4413      	add	r3, r2
 8015a3c:	3303      	adds	r3, #3
 8015a3e:	f023 0303 	bic.w	r3, r3, #3
 8015a42:	4618      	mov	r0, r3
 8015a44:	88b9      	ldrh	r1, [r7, #4]
 8015a46:	88ba      	ldrh	r2, [r7, #4]
 8015a48:	2300      	movs	r3, #0
 8015a4a:	9301      	str	r3, [sp, #4]
 8015a4c:	887b      	ldrh	r3, [r7, #2]
 8015a4e:	9300      	str	r3, [sp, #0]
 8015a50:	460b      	mov	r3, r1
 8015a52:	4601      	mov	r1, r0
 8015a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a56:	f7ff ff09 	bl	801586c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8015a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a5c:	685b      	ldr	r3, [r3, #4]
 8015a5e:	f003 0303 	and.w	r3, r3, #3
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d010      	beq.n	8015a88 <pbuf_alloc+0x1c8>
 8015a66:	4b0b      	ldr	r3, [pc, #44]	; (8015a94 <pbuf_alloc+0x1d4>)
 8015a68:	f44f 7291 	mov.w	r2, #290	; 0x122
 8015a6c:	490d      	ldr	r1, [pc, #52]	; (8015aa4 <pbuf_alloc+0x1e4>)
 8015a6e:	480b      	ldr	r0, [pc, #44]	; (8015a9c <pbuf_alloc+0x1dc>)
 8015a70:	f009 fc7c 	bl	801f36c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8015a74:	e008      	b.n	8015a88 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8015a76:	4b07      	ldr	r3, [pc, #28]	; (8015a94 <pbuf_alloc+0x1d4>)
 8015a78:	f240 1227 	movw	r2, #295	; 0x127
 8015a7c:	490a      	ldr	r1, [pc, #40]	; (8015aa8 <pbuf_alloc+0x1e8>)
 8015a7e:	4807      	ldr	r0, [pc, #28]	; (8015a9c <pbuf_alloc+0x1dc>)
 8015a80:	f009 fc74 	bl	801f36c <iprintf>
      return NULL;
 8015a84:	2300      	movs	r3, #0
 8015a86:	e001      	b.n	8015a8c <pbuf_alloc+0x1cc>
      break;
 8015a88:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8015a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	3728      	adds	r7, #40	; 0x28
 8015a90:	46bd      	mov	sp, r7
 8015a92:	bd80      	pop	{r7, pc}
 8015a94:	08021ea4 	.word	0x08021ea4
 8015a98:	08021ed4 	.word	0x08021ed4
 8015a9c:	08021f04 	.word	0x08021f04
 8015aa0:	08021f2c 	.word	0x08021f2c
 8015aa4:	08021f60 	.word	0x08021f60
 8015aa8:	08021f8c 	.word	0x08021f8c

08015aac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b086      	sub	sp, #24
 8015ab0:	af02      	add	r7, sp, #8
 8015ab2:	6078      	str	r0, [r7, #4]
 8015ab4:	460b      	mov	r3, r1
 8015ab6:	807b      	strh	r3, [r7, #2]
 8015ab8:	4613      	mov	r3, r2
 8015aba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8015abc:	883b      	ldrh	r3, [r7, #0]
 8015abe:	2b41      	cmp	r3, #65	; 0x41
 8015ac0:	d009      	beq.n	8015ad6 <pbuf_alloc_reference+0x2a>
 8015ac2:	883b      	ldrh	r3, [r7, #0]
 8015ac4:	2b01      	cmp	r3, #1
 8015ac6:	d006      	beq.n	8015ad6 <pbuf_alloc_reference+0x2a>
 8015ac8:	4b0f      	ldr	r3, [pc, #60]	; (8015b08 <pbuf_alloc_reference+0x5c>)
 8015aca:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8015ace:	490f      	ldr	r1, [pc, #60]	; (8015b0c <pbuf_alloc_reference+0x60>)
 8015ad0:	480f      	ldr	r0, [pc, #60]	; (8015b10 <pbuf_alloc_reference+0x64>)
 8015ad2:	f009 fc4b 	bl	801f36c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015ad6:	200b      	movs	r0, #11
 8015ad8:	f7ff fae0 	bl	801509c <memp_malloc>
 8015adc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d101      	bne.n	8015ae8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	e00b      	b.n	8015b00 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8015ae8:	8879      	ldrh	r1, [r7, #2]
 8015aea:	887a      	ldrh	r2, [r7, #2]
 8015aec:	2300      	movs	r3, #0
 8015aee:	9301      	str	r3, [sp, #4]
 8015af0:	883b      	ldrh	r3, [r7, #0]
 8015af2:	9300      	str	r3, [sp, #0]
 8015af4:	460b      	mov	r3, r1
 8015af6:	6879      	ldr	r1, [r7, #4]
 8015af8:	68f8      	ldr	r0, [r7, #12]
 8015afa:	f7ff feb7 	bl	801586c <pbuf_init_alloced_pbuf>
  return p;
 8015afe:	68fb      	ldr	r3, [r7, #12]
}
 8015b00:	4618      	mov	r0, r3
 8015b02:	3710      	adds	r7, #16
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}
 8015b08:	08021ea4 	.word	0x08021ea4
 8015b0c:	08021fa8 	.word	0x08021fa8
 8015b10:	08021f04 	.word	0x08021f04

08015b14 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b088      	sub	sp, #32
 8015b18:	af02      	add	r7, sp, #8
 8015b1a:	607b      	str	r3, [r7, #4]
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	73fb      	strb	r3, [r7, #15]
 8015b20:	460b      	mov	r3, r1
 8015b22:	81bb      	strh	r3, [r7, #12]
 8015b24:	4613      	mov	r3, r2
 8015b26:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8015b28:	7bfb      	ldrb	r3, [r7, #15]
 8015b2a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8015b2c:	8a7b      	ldrh	r3, [r7, #18]
 8015b2e:	3303      	adds	r3, #3
 8015b30:	f023 0203 	bic.w	r2, r3, #3
 8015b34:	89bb      	ldrh	r3, [r7, #12]
 8015b36:	441a      	add	r2, r3
 8015b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d901      	bls.n	8015b42 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	e018      	b.n	8015b74 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8015b42:	6a3b      	ldr	r3, [r7, #32]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d007      	beq.n	8015b58 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015b48:	8a7b      	ldrh	r3, [r7, #18]
 8015b4a:	3303      	adds	r3, #3
 8015b4c:	f023 0303 	bic.w	r3, r3, #3
 8015b50:	6a3a      	ldr	r2, [r7, #32]
 8015b52:	4413      	add	r3, r2
 8015b54:	617b      	str	r3, [r7, #20]
 8015b56:	e001      	b.n	8015b5c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	89b9      	ldrh	r1, [r7, #12]
 8015b60:	89ba      	ldrh	r2, [r7, #12]
 8015b62:	2302      	movs	r3, #2
 8015b64:	9301      	str	r3, [sp, #4]
 8015b66:	897b      	ldrh	r3, [r7, #10]
 8015b68:	9300      	str	r3, [sp, #0]
 8015b6a:	460b      	mov	r3, r1
 8015b6c:	6979      	ldr	r1, [r7, #20]
 8015b6e:	f7ff fe7d 	bl	801586c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8015b72:	687b      	ldr	r3, [r7, #4]
}
 8015b74:	4618      	mov	r0, r3
 8015b76:	3718      	adds	r7, #24
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	bd80      	pop	{r7, pc}

08015b7c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b084      	sub	sp, #16
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
 8015b84:	460b      	mov	r3, r1
 8015b86:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d106      	bne.n	8015b9c <pbuf_realloc+0x20>
 8015b8e:	4b3a      	ldr	r3, [pc, #232]	; (8015c78 <pbuf_realloc+0xfc>)
 8015b90:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8015b94:	4939      	ldr	r1, [pc, #228]	; (8015c7c <pbuf_realloc+0x100>)
 8015b96:	483a      	ldr	r0, [pc, #232]	; (8015c80 <pbuf_realloc+0x104>)
 8015b98:	f009 fbe8 	bl	801f36c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	891b      	ldrh	r3, [r3, #8]
 8015ba0:	887a      	ldrh	r2, [r7, #2]
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	d263      	bcs.n	8015c6e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	891a      	ldrh	r2, [r3, #8]
 8015baa:	887b      	ldrh	r3, [r7, #2]
 8015bac:	1ad3      	subs	r3, r2, r3
 8015bae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015bb0:	887b      	ldrh	r3, [r7, #2]
 8015bb2:	817b      	strh	r3, [r7, #10]
  q = p;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015bb8:	e018      	b.n	8015bec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	895b      	ldrh	r3, [r3, #10]
 8015bbe:	897a      	ldrh	r2, [r7, #10]
 8015bc0:	1ad3      	subs	r3, r2, r3
 8015bc2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	891a      	ldrh	r2, [r3, #8]
 8015bc8:	893b      	ldrh	r3, [r7, #8]
 8015bca:	1ad3      	subs	r3, r2, r3
 8015bcc:	b29a      	uxth	r2, r3
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d106      	bne.n	8015bec <pbuf_realloc+0x70>
 8015bde:	4b26      	ldr	r3, [pc, #152]	; (8015c78 <pbuf_realloc+0xfc>)
 8015be0:	f240 12af 	movw	r2, #431	; 0x1af
 8015be4:	4927      	ldr	r1, [pc, #156]	; (8015c84 <pbuf_realloc+0x108>)
 8015be6:	4826      	ldr	r0, [pc, #152]	; (8015c80 <pbuf_realloc+0x104>)
 8015be8:	f009 fbc0 	bl	801f36c <iprintf>
  while (rem_len > q->len) {
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	895b      	ldrh	r3, [r3, #10]
 8015bf0:	897a      	ldrh	r2, [r7, #10]
 8015bf2:	429a      	cmp	r2, r3
 8015bf4:	d8e1      	bhi.n	8015bba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	7b1b      	ldrb	r3, [r3, #12]
 8015bfa:	f003 030f 	and.w	r3, r3, #15
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d121      	bne.n	8015c46 <pbuf_realloc+0xca>
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	895b      	ldrh	r3, [r3, #10]
 8015c06:	897a      	ldrh	r2, [r7, #10]
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	d01c      	beq.n	8015c46 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	7b5b      	ldrb	r3, [r3, #13]
 8015c10:	f003 0302 	and.w	r3, r3, #2
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d116      	bne.n	8015c46 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	685a      	ldr	r2, [r3, #4]
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	1ad3      	subs	r3, r2, r3
 8015c20:	b29a      	uxth	r2, r3
 8015c22:	897b      	ldrh	r3, [r7, #10]
 8015c24:	4413      	add	r3, r2
 8015c26:	b29b      	uxth	r3, r3
 8015c28:	4619      	mov	r1, r3
 8015c2a:	68f8      	ldr	r0, [r7, #12]
 8015c2c:	f7fe ffaa 	bl	8014b84 <mem_trim>
 8015c30:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d106      	bne.n	8015c46 <pbuf_realloc+0xca>
 8015c38:	4b0f      	ldr	r3, [pc, #60]	; (8015c78 <pbuf_realloc+0xfc>)
 8015c3a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8015c3e:	4912      	ldr	r1, [pc, #72]	; (8015c88 <pbuf_realloc+0x10c>)
 8015c40:	480f      	ldr	r0, [pc, #60]	; (8015c80 <pbuf_realloc+0x104>)
 8015c42:	f009 fb93 	bl	801f36c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	897a      	ldrh	r2, [r7, #10]
 8015c4a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	895a      	ldrh	r2, [r3, #10]
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d004      	beq.n	8015c66 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	4618      	mov	r0, r3
 8015c62:	f000 f923 	bl	8015eac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	2200      	movs	r2, #0
 8015c6a:	601a      	str	r2, [r3, #0]
 8015c6c:	e000      	b.n	8015c70 <pbuf_realloc+0xf4>
    return;
 8015c6e:	bf00      	nop

}
 8015c70:	3710      	adds	r7, #16
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}
 8015c76:	bf00      	nop
 8015c78:	08021ea4 	.word	0x08021ea4
 8015c7c:	08021fbc 	.word	0x08021fbc
 8015c80:	08021f04 	.word	0x08021f04
 8015c84:	08021fd4 	.word	0x08021fd4
 8015c88:	08021fec 	.word	0x08021fec

08015c8c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b086      	sub	sp, #24
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	60f8      	str	r0, [r7, #12]
 8015c94:	60b9      	str	r1, [r7, #8]
 8015c96:	4613      	mov	r3, r2
 8015c98:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d106      	bne.n	8015cae <pbuf_add_header_impl+0x22>
 8015ca0:	4b2b      	ldr	r3, [pc, #172]	; (8015d50 <pbuf_add_header_impl+0xc4>)
 8015ca2:	f240 12df 	movw	r2, #479	; 0x1df
 8015ca6:	492b      	ldr	r1, [pc, #172]	; (8015d54 <pbuf_add_header_impl+0xc8>)
 8015ca8:	482b      	ldr	r0, [pc, #172]	; (8015d58 <pbuf_add_header_impl+0xcc>)
 8015caa:	f009 fb5f 	bl	801f36c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d003      	beq.n	8015cbc <pbuf_add_header_impl+0x30>
 8015cb4:	68bb      	ldr	r3, [r7, #8]
 8015cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015cba:	d301      	bcc.n	8015cc0 <pbuf_add_header_impl+0x34>
    return 1;
 8015cbc:	2301      	movs	r3, #1
 8015cbe:	e043      	b.n	8015d48 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8015cc0:	68bb      	ldr	r3, [r7, #8]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d101      	bne.n	8015cca <pbuf_add_header_impl+0x3e>
    return 0;
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	e03e      	b.n	8015d48 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8015cca:	68bb      	ldr	r3, [r7, #8]
 8015ccc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	891a      	ldrh	r2, [r3, #8]
 8015cd2:	8a7b      	ldrh	r3, [r7, #18]
 8015cd4:	4413      	add	r3, r2
 8015cd6:	b29b      	uxth	r3, r3
 8015cd8:	8a7a      	ldrh	r2, [r7, #18]
 8015cda:	429a      	cmp	r2, r3
 8015cdc:	d901      	bls.n	8015ce2 <pbuf_add_header_impl+0x56>
    return 1;
 8015cde:	2301      	movs	r3, #1
 8015ce0:	e032      	b.n	8015d48 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	7b1b      	ldrb	r3, [r3, #12]
 8015ce6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015ce8:	8a3b      	ldrh	r3, [r7, #16]
 8015cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d00c      	beq.n	8015d0c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	685a      	ldr	r2, [r3, #4]
 8015cf6:	68bb      	ldr	r3, [r7, #8]
 8015cf8:	425b      	negs	r3, r3
 8015cfa:	4413      	add	r3, r2
 8015cfc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	3310      	adds	r3, #16
 8015d02:	697a      	ldr	r2, [r7, #20]
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d20d      	bcs.n	8015d24 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8015d08:	2301      	movs	r3, #1
 8015d0a:	e01d      	b.n	8015d48 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8015d0c:	79fb      	ldrb	r3, [r7, #7]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d006      	beq.n	8015d20 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	685a      	ldr	r2, [r3, #4]
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	425b      	negs	r3, r3
 8015d1a:	4413      	add	r3, r2
 8015d1c:	617b      	str	r3, [r7, #20]
 8015d1e:	e001      	b.n	8015d24 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8015d20:	2301      	movs	r3, #1
 8015d22:	e011      	b.n	8015d48 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	697a      	ldr	r2, [r7, #20]
 8015d28:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	895a      	ldrh	r2, [r3, #10]
 8015d2e:	8a7b      	ldrh	r3, [r7, #18]
 8015d30:	4413      	add	r3, r2
 8015d32:	b29a      	uxth	r2, r3
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	891a      	ldrh	r2, [r3, #8]
 8015d3c:	8a7b      	ldrh	r3, [r7, #18]
 8015d3e:	4413      	add	r3, r2
 8015d40:	b29a      	uxth	r2, r3
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	811a      	strh	r2, [r3, #8]


  return 0;
 8015d46:	2300      	movs	r3, #0
}
 8015d48:	4618      	mov	r0, r3
 8015d4a:	3718      	adds	r7, #24
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd80      	pop	{r7, pc}
 8015d50:	08021ea4 	.word	0x08021ea4
 8015d54:	08022008 	.word	0x08022008
 8015d58:	08021f04 	.word	0x08021f04

08015d5c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
 8015d64:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8015d66:	2200      	movs	r2, #0
 8015d68:	6839      	ldr	r1, [r7, #0]
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	f7ff ff8e 	bl	8015c8c <pbuf_add_header_impl>
 8015d70:	4603      	mov	r3, r0
}
 8015d72:	4618      	mov	r0, r3
 8015d74:	3708      	adds	r7, #8
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd80      	pop	{r7, pc}
	...

08015d7c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b084      	sub	sp, #16
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
 8015d84:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d106      	bne.n	8015d9a <pbuf_remove_header+0x1e>
 8015d8c:	4b20      	ldr	r3, [pc, #128]	; (8015e10 <pbuf_remove_header+0x94>)
 8015d8e:	f240 224b 	movw	r2, #587	; 0x24b
 8015d92:	4920      	ldr	r1, [pc, #128]	; (8015e14 <pbuf_remove_header+0x98>)
 8015d94:	4820      	ldr	r0, [pc, #128]	; (8015e18 <pbuf_remove_header+0x9c>)
 8015d96:	f009 fae9 	bl	801f36c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d003      	beq.n	8015da8 <pbuf_remove_header+0x2c>
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015da6:	d301      	bcc.n	8015dac <pbuf_remove_header+0x30>
    return 1;
 8015da8:	2301      	movs	r3, #1
 8015daa:	e02c      	b.n	8015e06 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d101      	bne.n	8015db6 <pbuf_remove_header+0x3a>
    return 0;
 8015db2:	2300      	movs	r3, #0
 8015db4:	e027      	b.n	8015e06 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015db6:	683b      	ldr	r3, [r7, #0]
 8015db8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	895b      	ldrh	r3, [r3, #10]
 8015dbe:	89fa      	ldrh	r2, [r7, #14]
 8015dc0:	429a      	cmp	r2, r3
 8015dc2:	d908      	bls.n	8015dd6 <pbuf_remove_header+0x5a>
 8015dc4:	4b12      	ldr	r3, [pc, #72]	; (8015e10 <pbuf_remove_header+0x94>)
 8015dc6:	f240 2255 	movw	r2, #597	; 0x255
 8015dca:	4914      	ldr	r1, [pc, #80]	; (8015e1c <pbuf_remove_header+0xa0>)
 8015dcc:	4812      	ldr	r0, [pc, #72]	; (8015e18 <pbuf_remove_header+0x9c>)
 8015dce:	f009 facd 	bl	801f36c <iprintf>
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	e017      	b.n	8015e06 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	685b      	ldr	r3, [r3, #4]
 8015dda:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	685a      	ldr	r2, [r3, #4]
 8015de0:	683b      	ldr	r3, [r7, #0]
 8015de2:	441a      	add	r2, r3
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	895a      	ldrh	r2, [r3, #10]
 8015dec:	89fb      	ldrh	r3, [r7, #14]
 8015dee:	1ad3      	subs	r3, r2, r3
 8015df0:	b29a      	uxth	r2, r3
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	891a      	ldrh	r2, [r3, #8]
 8015dfa:	89fb      	ldrh	r3, [r7, #14]
 8015dfc:	1ad3      	subs	r3, r2, r3
 8015dfe:	b29a      	uxth	r2, r3
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8015e04:	2300      	movs	r3, #0
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	3710      	adds	r7, #16
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}
 8015e0e:	bf00      	nop
 8015e10:	08021ea4 	.word	0x08021ea4
 8015e14:	08022008 	.word	0x08022008
 8015e18:	08021f04 	.word	0x08021f04
 8015e1c:	08022014 	.word	0x08022014

08015e20 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b082      	sub	sp, #8
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
 8015e28:	460b      	mov	r3, r1
 8015e2a:	807b      	strh	r3, [r7, #2]
 8015e2c:	4613      	mov	r3, r2
 8015e2e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8015e30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	da08      	bge.n	8015e4a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8015e38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015e3c:	425b      	negs	r3, r3
 8015e3e:	4619      	mov	r1, r3
 8015e40:	6878      	ldr	r0, [r7, #4]
 8015e42:	f7ff ff9b 	bl	8015d7c <pbuf_remove_header>
 8015e46:	4603      	mov	r3, r0
 8015e48:	e007      	b.n	8015e5a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8015e4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015e4e:	787a      	ldrb	r2, [r7, #1]
 8015e50:	4619      	mov	r1, r3
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	f7ff ff1a 	bl	8015c8c <pbuf_add_header_impl>
 8015e58:	4603      	mov	r3, r0
  }
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3708      	adds	r7, #8
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}

08015e62 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8015e62:	b580      	push	{r7, lr}
 8015e64:	b082      	sub	sp, #8
 8015e66:	af00      	add	r7, sp, #0
 8015e68:	6078      	str	r0, [r7, #4]
 8015e6a:	460b      	mov	r3, r1
 8015e6c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 0);
 8015e6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015e72:	2200      	movs	r2, #0
 8015e74:	4619      	mov	r1, r3
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	f7ff ffd2 	bl	8015e20 <pbuf_header_impl>
 8015e7c:	4603      	mov	r3, r0
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	3708      	adds	r7, #8
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}

08015e86 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015e86:	b580      	push	{r7, lr}
 8015e88:	b082      	sub	sp, #8
 8015e8a:	af00      	add	r7, sp, #0
 8015e8c:	6078      	str	r0, [r7, #4]
 8015e8e:	460b      	mov	r3, r1
 8015e90:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8015e92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015e96:	2201      	movs	r2, #1
 8015e98:	4619      	mov	r1, r3
 8015e9a:	6878      	ldr	r0, [r7, #4]
 8015e9c:	f7ff ffc0 	bl	8015e20 <pbuf_header_impl>
 8015ea0:	4603      	mov	r3, r0
}
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	3708      	adds	r7, #8
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	bd80      	pop	{r7, pc}
	...

08015eac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b088      	sub	sp, #32
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d10b      	bne.n	8015ed2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d106      	bne.n	8015ece <pbuf_free+0x22>
 8015ec0:	4b3b      	ldr	r3, [pc, #236]	; (8015fb0 <pbuf_free+0x104>)
 8015ec2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8015ec6:	493b      	ldr	r1, [pc, #236]	; (8015fb4 <pbuf_free+0x108>)
 8015ec8:	483b      	ldr	r0, [pc, #236]	; (8015fb8 <pbuf_free+0x10c>)
 8015eca:	f009 fa4f 	bl	801f36c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	e069      	b.n	8015fa6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015ed6:	e062      	b.n	8015f9e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8015ed8:	f009 f9c4 	bl	801f264 <sys_arch_protect>
 8015edc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	7b9b      	ldrb	r3, [r3, #14]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d106      	bne.n	8015ef4 <pbuf_free+0x48>
 8015ee6:	4b32      	ldr	r3, [pc, #200]	; (8015fb0 <pbuf_free+0x104>)
 8015ee8:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015eec:	4933      	ldr	r1, [pc, #204]	; (8015fbc <pbuf_free+0x110>)
 8015eee:	4832      	ldr	r0, [pc, #200]	; (8015fb8 <pbuf_free+0x10c>)
 8015ef0:	f009 fa3c 	bl	801f36c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	7b9b      	ldrb	r3, [r3, #14]
 8015ef8:	3b01      	subs	r3, #1
 8015efa:	b2da      	uxtb	r2, r3
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	739a      	strb	r2, [r3, #14]
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	7b9b      	ldrb	r3, [r3, #14]
 8015f04:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8015f06:	69b8      	ldr	r0, [r7, #24]
 8015f08:	f009 f9ba 	bl	801f280 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015f0c:	7dfb      	ldrb	r3, [r7, #23]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d143      	bne.n	8015f9a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	7b1b      	ldrb	r3, [r3, #12]
 8015f1c:	f003 030f 	and.w	r3, r3, #15
 8015f20:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	7b5b      	ldrb	r3, [r3, #13]
 8015f26:	f003 0302 	and.w	r3, r3, #2
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d011      	beq.n	8015f52 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015f32:	68bb      	ldr	r3, [r7, #8]
 8015f34:	691b      	ldr	r3, [r3, #16]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d106      	bne.n	8015f48 <pbuf_free+0x9c>
 8015f3a:	4b1d      	ldr	r3, [pc, #116]	; (8015fb0 <pbuf_free+0x104>)
 8015f3c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8015f40:	491f      	ldr	r1, [pc, #124]	; (8015fc0 <pbuf_free+0x114>)
 8015f42:	481d      	ldr	r0, [pc, #116]	; (8015fb8 <pbuf_free+0x10c>)
 8015f44:	f009 fa12 	bl	801f36c <iprintf>
        pc->custom_free_function(p);
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	691b      	ldr	r3, [r3, #16]
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	4798      	blx	r3
 8015f50:	e01d      	b.n	8015f8e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8015f52:	7bfb      	ldrb	r3, [r7, #15]
 8015f54:	2b02      	cmp	r3, #2
 8015f56:	d104      	bne.n	8015f62 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8015f58:	6879      	ldr	r1, [r7, #4]
 8015f5a:	200c      	movs	r0, #12
 8015f5c:	f7ff f8f0 	bl	8015140 <memp_free>
 8015f60:	e015      	b.n	8015f8e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8015f62:	7bfb      	ldrb	r3, [r7, #15]
 8015f64:	2b01      	cmp	r3, #1
 8015f66:	d104      	bne.n	8015f72 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8015f68:	6879      	ldr	r1, [r7, #4]
 8015f6a:	200b      	movs	r0, #11
 8015f6c:	f7ff f8e8 	bl	8015140 <memp_free>
 8015f70:	e00d      	b.n	8015f8e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8015f72:	7bfb      	ldrb	r3, [r7, #15]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d103      	bne.n	8015f80 <pbuf_free+0xd4>
          mem_free(p);
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f7fe fd73 	bl	8014a64 <mem_free>
 8015f7e:	e006      	b.n	8015f8e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8015f80:	4b0b      	ldr	r3, [pc, #44]	; (8015fb0 <pbuf_free+0x104>)
 8015f82:	f240 320f 	movw	r2, #783	; 0x30f
 8015f86:	490f      	ldr	r1, [pc, #60]	; (8015fc4 <pbuf_free+0x118>)
 8015f88:	480b      	ldr	r0, [pc, #44]	; (8015fb8 <pbuf_free+0x10c>)
 8015f8a:	f009 f9ef 	bl	801f36c <iprintf>
        }
      }
      count++;
 8015f8e:	7ffb      	ldrb	r3, [r7, #31]
 8015f90:	3301      	adds	r3, #1
 8015f92:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8015f94:	693b      	ldr	r3, [r7, #16]
 8015f96:	607b      	str	r3, [r7, #4]
 8015f98:	e001      	b.n	8015f9e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d199      	bne.n	8015ed8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8015fa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	3720      	adds	r7, #32
 8015faa:	46bd      	mov	sp, r7
 8015fac:	bd80      	pop	{r7, pc}
 8015fae:	bf00      	nop
 8015fb0:	08021ea4 	.word	0x08021ea4
 8015fb4:	08022008 	.word	0x08022008
 8015fb8:	08021f04 	.word	0x08021f04
 8015fbc:	08022034 	.word	0x08022034
 8015fc0:	0802204c 	.word	0x0802204c
 8015fc4:	08022070 	.word	0x08022070

08015fc8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8015fc8:	b480      	push	{r7}
 8015fca:	b085      	sub	sp, #20
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8015fd4:	e005      	b.n	8015fe2 <pbuf_clen+0x1a>
    ++len;
 8015fd6:	89fb      	ldrh	r3, [r7, #14]
 8015fd8:	3301      	adds	r3, #1
 8015fda:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d1f6      	bne.n	8015fd6 <pbuf_clen+0xe>
  }
  return len;
 8015fe8:	89fb      	ldrh	r3, [r7, #14]
}
 8015fea:	4618      	mov	r0, r3
 8015fec:	3714      	adds	r7, #20
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff4:	4770      	bx	lr
	...

08015ff8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d016      	beq.n	8016034 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8016006:	f009 f92d 	bl	801f264 <sys_arch_protect>
 801600a:	60f8      	str	r0, [r7, #12]
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	7b9b      	ldrb	r3, [r3, #14]
 8016010:	3301      	adds	r3, #1
 8016012:	b2da      	uxtb	r2, r3
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	739a      	strb	r2, [r3, #14]
 8016018:	68f8      	ldr	r0, [r7, #12]
 801601a:	f009 f931 	bl	801f280 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	7b9b      	ldrb	r3, [r3, #14]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d106      	bne.n	8016034 <pbuf_ref+0x3c>
 8016026:	4b05      	ldr	r3, [pc, #20]	; (801603c <pbuf_ref+0x44>)
 8016028:	f240 3242 	movw	r2, #834	; 0x342
 801602c:	4904      	ldr	r1, [pc, #16]	; (8016040 <pbuf_ref+0x48>)
 801602e:	4805      	ldr	r0, [pc, #20]	; (8016044 <pbuf_ref+0x4c>)
 8016030:	f009 f99c 	bl	801f36c <iprintf>
  }
}
 8016034:	bf00      	nop
 8016036:	3710      	adds	r7, #16
 8016038:	46bd      	mov	sp, r7
 801603a:	bd80      	pop	{r7, pc}
 801603c:	08021ea4 	.word	0x08021ea4
 8016040:	08022084 	.word	0x08022084
 8016044:	08021f04 	.word	0x08021f04

08016048 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b084      	sub	sp, #16
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
 8016050:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d002      	beq.n	801605e <pbuf_cat+0x16>
 8016058:	683b      	ldr	r3, [r7, #0]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d107      	bne.n	801606e <pbuf_cat+0x26>
 801605e:	4b20      	ldr	r3, [pc, #128]	; (80160e0 <pbuf_cat+0x98>)
 8016060:	f240 3259 	movw	r2, #857	; 0x359
 8016064:	491f      	ldr	r1, [pc, #124]	; (80160e4 <pbuf_cat+0x9c>)
 8016066:	4820      	ldr	r0, [pc, #128]	; (80160e8 <pbuf_cat+0xa0>)
 8016068:	f009 f980 	bl	801f36c <iprintf>
 801606c:	e034      	b.n	80160d8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	60fb      	str	r3, [r7, #12]
 8016072:	e00a      	b.n	801608a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	891a      	ldrh	r2, [r3, #8]
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	891b      	ldrh	r3, [r3, #8]
 801607c:	4413      	add	r3, r2
 801607e:	b29a      	uxth	r2, r3
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	60fb      	str	r3, [r7, #12]
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d1f0      	bne.n	8016074 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	891a      	ldrh	r2, [r3, #8]
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	895b      	ldrh	r3, [r3, #10]
 801609a:	429a      	cmp	r2, r3
 801609c:	d006      	beq.n	80160ac <pbuf_cat+0x64>
 801609e:	4b10      	ldr	r3, [pc, #64]	; (80160e0 <pbuf_cat+0x98>)
 80160a0:	f240 3262 	movw	r2, #866	; 0x362
 80160a4:	4911      	ldr	r1, [pc, #68]	; (80160ec <pbuf_cat+0xa4>)
 80160a6:	4810      	ldr	r0, [pc, #64]	; (80160e8 <pbuf_cat+0xa0>)
 80160a8:	f009 f960 	bl	801f36c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d006      	beq.n	80160c2 <pbuf_cat+0x7a>
 80160b4:	4b0a      	ldr	r3, [pc, #40]	; (80160e0 <pbuf_cat+0x98>)
 80160b6:	f240 3263 	movw	r2, #867	; 0x363
 80160ba:	490d      	ldr	r1, [pc, #52]	; (80160f0 <pbuf_cat+0xa8>)
 80160bc:	480a      	ldr	r0, [pc, #40]	; (80160e8 <pbuf_cat+0xa0>)
 80160be:	f009 f955 	bl	801f36c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	891a      	ldrh	r2, [r3, #8]
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	891b      	ldrh	r3, [r3, #8]
 80160ca:	4413      	add	r3, r2
 80160cc:	b29a      	uxth	r2, r3
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	683a      	ldr	r2, [r7, #0]
 80160d6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80160d8:	3710      	adds	r7, #16
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}
 80160de:	bf00      	nop
 80160e0:	08021ea4 	.word	0x08021ea4
 80160e4:	08022098 	.word	0x08022098
 80160e8:	08021f04 	.word	0x08021f04
 80160ec:	080220d0 	.word	0x080220d0
 80160f0:	08022100 	.word	0x08022100

080160f4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b086      	sub	sp, #24
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
 80160fc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80160fe:	2300      	movs	r3, #0
 8016100:	617b      	str	r3, [r7, #20]
 8016102:	2300      	movs	r3, #0
 8016104:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d008      	beq.n	801611e <pbuf_copy+0x2a>
 801610c:	683b      	ldr	r3, [r7, #0]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d005      	beq.n	801611e <pbuf_copy+0x2a>
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	891a      	ldrh	r2, [r3, #8]
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	891b      	ldrh	r3, [r3, #8]
 801611a:	429a      	cmp	r2, r3
 801611c:	d209      	bcs.n	8016132 <pbuf_copy+0x3e>
 801611e:	4b57      	ldr	r3, [pc, #348]	; (801627c <pbuf_copy+0x188>)
 8016120:	f240 32c9 	movw	r2, #969	; 0x3c9
 8016124:	4956      	ldr	r1, [pc, #344]	; (8016280 <pbuf_copy+0x18c>)
 8016126:	4857      	ldr	r0, [pc, #348]	; (8016284 <pbuf_copy+0x190>)
 8016128:	f009 f920 	bl	801f36c <iprintf>
 801612c:	f06f 030f 	mvn.w	r3, #15
 8016130:	e09f      	b.n	8016272 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	895b      	ldrh	r3, [r3, #10]
 8016136:	461a      	mov	r2, r3
 8016138:	697b      	ldr	r3, [r7, #20]
 801613a:	1ad2      	subs	r2, r2, r3
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	895b      	ldrh	r3, [r3, #10]
 8016140:	4619      	mov	r1, r3
 8016142:	693b      	ldr	r3, [r7, #16]
 8016144:	1acb      	subs	r3, r1, r3
 8016146:	429a      	cmp	r2, r3
 8016148:	d306      	bcc.n	8016158 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801614a:	683b      	ldr	r3, [r7, #0]
 801614c:	895b      	ldrh	r3, [r3, #10]
 801614e:	461a      	mov	r2, r3
 8016150:	693b      	ldr	r3, [r7, #16]
 8016152:	1ad3      	subs	r3, r2, r3
 8016154:	60fb      	str	r3, [r7, #12]
 8016156:	e005      	b.n	8016164 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	895b      	ldrh	r3, [r3, #10]
 801615c:	461a      	mov	r2, r3
 801615e:	697b      	ldr	r3, [r7, #20]
 8016160:	1ad3      	subs	r3, r2, r3
 8016162:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	685a      	ldr	r2, [r3, #4]
 8016168:	697b      	ldr	r3, [r7, #20]
 801616a:	18d0      	adds	r0, r2, r3
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	685a      	ldr	r2, [r3, #4]
 8016170:	693b      	ldr	r3, [r7, #16]
 8016172:	4413      	add	r3, r2
 8016174:	68fa      	ldr	r2, [r7, #12]
 8016176:	4619      	mov	r1, r3
 8016178:	f009 f8c8 	bl	801f30c <memcpy>
    offset_to += len;
 801617c:	697a      	ldr	r2, [r7, #20]
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	4413      	add	r3, r2
 8016182:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8016184:	693a      	ldr	r2, [r7, #16]
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	4413      	add	r3, r2
 801618a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	895b      	ldrh	r3, [r3, #10]
 8016190:	461a      	mov	r2, r3
 8016192:	697b      	ldr	r3, [r7, #20]
 8016194:	4293      	cmp	r3, r2
 8016196:	d906      	bls.n	80161a6 <pbuf_copy+0xb2>
 8016198:	4b38      	ldr	r3, [pc, #224]	; (801627c <pbuf_copy+0x188>)
 801619a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801619e:	493a      	ldr	r1, [pc, #232]	; (8016288 <pbuf_copy+0x194>)
 80161a0:	4838      	ldr	r0, [pc, #224]	; (8016284 <pbuf_copy+0x190>)
 80161a2:	f009 f8e3 	bl	801f36c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80161a6:	683b      	ldr	r3, [r7, #0]
 80161a8:	895b      	ldrh	r3, [r3, #10]
 80161aa:	461a      	mov	r2, r3
 80161ac:	693b      	ldr	r3, [r7, #16]
 80161ae:	4293      	cmp	r3, r2
 80161b0:	d906      	bls.n	80161c0 <pbuf_copy+0xcc>
 80161b2:	4b32      	ldr	r3, [pc, #200]	; (801627c <pbuf_copy+0x188>)
 80161b4:	f240 32da 	movw	r2, #986	; 0x3da
 80161b8:	4934      	ldr	r1, [pc, #208]	; (801628c <pbuf_copy+0x198>)
 80161ba:	4832      	ldr	r0, [pc, #200]	; (8016284 <pbuf_copy+0x190>)
 80161bc:	f009 f8d6 	bl	801f36c <iprintf>
    if (offset_from >= p_from->len) {
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	895b      	ldrh	r3, [r3, #10]
 80161c4:	461a      	mov	r2, r3
 80161c6:	693b      	ldr	r3, [r7, #16]
 80161c8:	4293      	cmp	r3, r2
 80161ca:	d304      	bcc.n	80161d6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80161cc:	2300      	movs	r3, #0
 80161ce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	895b      	ldrh	r3, [r3, #10]
 80161da:	461a      	mov	r2, r3
 80161dc:	697b      	ldr	r3, [r7, #20]
 80161de:	4293      	cmp	r3, r2
 80161e0:	d114      	bne.n	801620c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80161e2:	2300      	movs	r3, #0
 80161e4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d10c      	bne.n	801620c <pbuf_copy+0x118>
 80161f2:	683b      	ldr	r3, [r7, #0]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d009      	beq.n	801620c <pbuf_copy+0x118>
 80161f8:	4b20      	ldr	r3, [pc, #128]	; (801627c <pbuf_copy+0x188>)
 80161fa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80161fe:	4924      	ldr	r1, [pc, #144]	; (8016290 <pbuf_copy+0x19c>)
 8016200:	4820      	ldr	r0, [pc, #128]	; (8016284 <pbuf_copy+0x190>)
 8016202:	f009 f8b3 	bl	801f36c <iprintf>
 8016206:	f06f 030f 	mvn.w	r3, #15
 801620a:	e032      	b.n	8016272 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801620c:	683b      	ldr	r3, [r7, #0]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d013      	beq.n	801623a <pbuf_copy+0x146>
 8016212:	683b      	ldr	r3, [r7, #0]
 8016214:	895a      	ldrh	r2, [r3, #10]
 8016216:	683b      	ldr	r3, [r7, #0]
 8016218:	891b      	ldrh	r3, [r3, #8]
 801621a:	429a      	cmp	r2, r3
 801621c:	d10d      	bne.n	801623a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d009      	beq.n	801623a <pbuf_copy+0x146>
 8016226:	4b15      	ldr	r3, [pc, #84]	; (801627c <pbuf_copy+0x188>)
 8016228:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801622c:	4919      	ldr	r1, [pc, #100]	; (8016294 <pbuf_copy+0x1a0>)
 801622e:	4815      	ldr	r0, [pc, #84]	; (8016284 <pbuf_copy+0x190>)
 8016230:	f009 f89c 	bl	801f36c <iprintf>
 8016234:	f06f 0305 	mvn.w	r3, #5
 8016238:	e01b      	b.n	8016272 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d013      	beq.n	8016268 <pbuf_copy+0x174>
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	895a      	ldrh	r2, [r3, #10]
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	891b      	ldrh	r3, [r3, #8]
 8016248:	429a      	cmp	r2, r3
 801624a:	d10d      	bne.n	8016268 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d009      	beq.n	8016268 <pbuf_copy+0x174>
 8016254:	4b09      	ldr	r3, [pc, #36]	; (801627c <pbuf_copy+0x188>)
 8016256:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801625a:	490e      	ldr	r1, [pc, #56]	; (8016294 <pbuf_copy+0x1a0>)
 801625c:	4809      	ldr	r0, [pc, #36]	; (8016284 <pbuf_copy+0x190>)
 801625e:	f009 f885 	bl	801f36c <iprintf>
 8016262:	f06f 0305 	mvn.w	r3, #5
 8016266:	e004      	b.n	8016272 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016268:	683b      	ldr	r3, [r7, #0]
 801626a:	2b00      	cmp	r3, #0
 801626c:	f47f af61 	bne.w	8016132 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016270:	2300      	movs	r3, #0
}
 8016272:	4618      	mov	r0, r3
 8016274:	3718      	adds	r7, #24
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}
 801627a:	bf00      	nop
 801627c:	08021ea4 	.word	0x08021ea4
 8016280:	0802214c 	.word	0x0802214c
 8016284:	08021f04 	.word	0x08021f04
 8016288:	0802217c 	.word	0x0802217c
 801628c:	08022194 	.word	0x08022194
 8016290:	080221b0 	.word	0x080221b0
 8016294:	080221c0 	.word	0x080221c0

08016298 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b088      	sub	sp, #32
 801629c:	af00      	add	r7, sp, #0
 801629e:	60f8      	str	r0, [r7, #12]
 80162a0:	60b9      	str	r1, [r7, #8]
 80162a2:	4611      	mov	r1, r2
 80162a4:	461a      	mov	r2, r3
 80162a6:	460b      	mov	r3, r1
 80162a8:	80fb      	strh	r3, [r7, #6]
 80162aa:	4613      	mov	r3, r2
 80162ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80162ae:	2300      	movs	r3, #0
 80162b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80162b2:	2300      	movs	r3, #0
 80162b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d108      	bne.n	80162ce <pbuf_copy_partial+0x36>
 80162bc:	4b2b      	ldr	r3, [pc, #172]	; (801636c <pbuf_copy_partial+0xd4>)
 80162be:	f240 420a 	movw	r2, #1034	; 0x40a
 80162c2:	492b      	ldr	r1, [pc, #172]	; (8016370 <pbuf_copy_partial+0xd8>)
 80162c4:	482b      	ldr	r0, [pc, #172]	; (8016374 <pbuf_copy_partial+0xdc>)
 80162c6:	f009 f851 	bl	801f36c <iprintf>
 80162ca:	2300      	movs	r3, #0
 80162cc:	e04a      	b.n	8016364 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80162ce:	68bb      	ldr	r3, [r7, #8]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d108      	bne.n	80162e6 <pbuf_copy_partial+0x4e>
 80162d4:	4b25      	ldr	r3, [pc, #148]	; (801636c <pbuf_copy_partial+0xd4>)
 80162d6:	f240 420b 	movw	r2, #1035	; 0x40b
 80162da:	4927      	ldr	r1, [pc, #156]	; (8016378 <pbuf_copy_partial+0xe0>)
 80162dc:	4825      	ldr	r0, [pc, #148]	; (8016374 <pbuf_copy_partial+0xdc>)
 80162de:	f009 f845 	bl	801f36c <iprintf>
 80162e2:	2300      	movs	r3, #0
 80162e4:	e03e      	b.n	8016364 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	61fb      	str	r3, [r7, #28]
 80162ea:	e034      	b.n	8016356 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80162ec:	88bb      	ldrh	r3, [r7, #4]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d00a      	beq.n	8016308 <pbuf_copy_partial+0x70>
 80162f2:	69fb      	ldr	r3, [r7, #28]
 80162f4:	895b      	ldrh	r3, [r3, #10]
 80162f6:	88ba      	ldrh	r2, [r7, #4]
 80162f8:	429a      	cmp	r2, r3
 80162fa:	d305      	bcc.n	8016308 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80162fc:	69fb      	ldr	r3, [r7, #28]
 80162fe:	895b      	ldrh	r3, [r3, #10]
 8016300:	88ba      	ldrh	r2, [r7, #4]
 8016302:	1ad3      	subs	r3, r2, r3
 8016304:	80bb      	strh	r3, [r7, #4]
 8016306:	e023      	b.n	8016350 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8016308:	69fb      	ldr	r3, [r7, #28]
 801630a:	895a      	ldrh	r2, [r3, #10]
 801630c:	88bb      	ldrh	r3, [r7, #4]
 801630e:	1ad3      	subs	r3, r2, r3
 8016310:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8016312:	8b3a      	ldrh	r2, [r7, #24]
 8016314:	88fb      	ldrh	r3, [r7, #6]
 8016316:	429a      	cmp	r2, r3
 8016318:	d901      	bls.n	801631e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801631a:	88fb      	ldrh	r3, [r7, #6]
 801631c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801631e:	8b7b      	ldrh	r3, [r7, #26]
 8016320:	68ba      	ldr	r2, [r7, #8]
 8016322:	18d0      	adds	r0, r2, r3
 8016324:	69fb      	ldr	r3, [r7, #28]
 8016326:	685a      	ldr	r2, [r3, #4]
 8016328:	88bb      	ldrh	r3, [r7, #4]
 801632a:	4413      	add	r3, r2
 801632c:	8b3a      	ldrh	r2, [r7, #24]
 801632e:	4619      	mov	r1, r3
 8016330:	f008 ffec 	bl	801f30c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016334:	8afa      	ldrh	r2, [r7, #22]
 8016336:	8b3b      	ldrh	r3, [r7, #24]
 8016338:	4413      	add	r3, r2
 801633a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801633c:	8b7a      	ldrh	r2, [r7, #26]
 801633e:	8b3b      	ldrh	r3, [r7, #24]
 8016340:	4413      	add	r3, r2
 8016342:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8016344:	88fa      	ldrh	r2, [r7, #6]
 8016346:	8b3b      	ldrh	r3, [r7, #24]
 8016348:	1ad3      	subs	r3, r2, r3
 801634a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801634c:	2300      	movs	r3, #0
 801634e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016350:	69fb      	ldr	r3, [r7, #28]
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	61fb      	str	r3, [r7, #28]
 8016356:	88fb      	ldrh	r3, [r7, #6]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d002      	beq.n	8016362 <pbuf_copy_partial+0xca>
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d1c4      	bne.n	80162ec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8016362:	8afb      	ldrh	r3, [r7, #22]
}
 8016364:	4618      	mov	r0, r3
 8016366:	3720      	adds	r7, #32
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}
 801636c:	08021ea4 	.word	0x08021ea4
 8016370:	080221ec 	.word	0x080221ec
 8016374:	08021f04 	.word	0x08021f04
 8016378:	0802220c 	.word	0x0802220c

0801637c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b084      	sub	sp, #16
 8016380:	af00      	add	r7, sp, #0
 8016382:	4603      	mov	r3, r0
 8016384:	603a      	str	r2, [r7, #0]
 8016386:	71fb      	strb	r3, [r7, #7]
 8016388:	460b      	mov	r3, r1
 801638a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801638c:	683b      	ldr	r3, [r7, #0]
 801638e:	8919      	ldrh	r1, [r3, #8]
 8016390:	88ba      	ldrh	r2, [r7, #4]
 8016392:	79fb      	ldrb	r3, [r7, #7]
 8016394:	4618      	mov	r0, r3
 8016396:	f7ff fa93 	bl	80158c0 <pbuf_alloc>
 801639a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d101      	bne.n	80163a6 <pbuf_clone+0x2a>
    return NULL;
 80163a2:	2300      	movs	r3, #0
 80163a4:	e011      	b.n	80163ca <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80163a6:	6839      	ldr	r1, [r7, #0]
 80163a8:	68f8      	ldr	r0, [r7, #12]
 80163aa:	f7ff fea3 	bl	80160f4 <pbuf_copy>
 80163ae:	4603      	mov	r3, r0
 80163b0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80163b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d006      	beq.n	80163c8 <pbuf_clone+0x4c>
 80163ba:	4b06      	ldr	r3, [pc, #24]	; (80163d4 <pbuf_clone+0x58>)
 80163bc:	f240 5224 	movw	r2, #1316	; 0x524
 80163c0:	4905      	ldr	r1, [pc, #20]	; (80163d8 <pbuf_clone+0x5c>)
 80163c2:	4806      	ldr	r0, [pc, #24]	; (80163dc <pbuf_clone+0x60>)
 80163c4:	f008 ffd2 	bl	801f36c <iprintf>
  return q;
 80163c8:	68fb      	ldr	r3, [r7, #12]
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	3710      	adds	r7, #16
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}
 80163d2:	bf00      	nop
 80163d4:	08021ea4 	.word	0x08021ea4
 80163d8:	08022318 	.word	0x08022318
 80163dc:	08021f04 	.word	0x08021f04

080163e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80163e4:	f009 f850 	bl	801f488 <rand>
 80163e8:	4603      	mov	r3, r0
 80163ea:	b29b      	uxth	r3, r3
 80163ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80163f0:	b29b      	uxth	r3, r3
 80163f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80163f6:	b29a      	uxth	r2, r3
 80163f8:	4b01      	ldr	r3, [pc, #4]	; (8016400 <tcp_init+0x20>)
 80163fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80163fc:	bf00      	nop
 80163fe:	bd80      	pop	{r7, pc}
 8016400:	20000036 	.word	0x20000036

08016404 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b082      	sub	sp, #8
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	7d1b      	ldrb	r3, [r3, #20]
 8016410:	2b01      	cmp	r3, #1
 8016412:	d105      	bne.n	8016420 <tcp_free+0x1c>
 8016414:	4b06      	ldr	r3, [pc, #24]	; (8016430 <tcp_free+0x2c>)
 8016416:	22d4      	movs	r2, #212	; 0xd4
 8016418:	4906      	ldr	r1, [pc, #24]	; (8016434 <tcp_free+0x30>)
 801641a:	4807      	ldr	r0, [pc, #28]	; (8016438 <tcp_free+0x34>)
 801641c:	f008 ffa6 	bl	801f36c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016420:	6879      	ldr	r1, [r7, #4]
 8016422:	2001      	movs	r0, #1
 8016424:	f7fe fe8c 	bl	8015140 <memp_free>
}
 8016428:	bf00      	nop
 801642a:	3708      	adds	r7, #8
 801642c:	46bd      	mov	sp, r7
 801642e:	bd80      	pop	{r7, pc}
 8016430:	080223a4 	.word	0x080223a4
 8016434:	080223d4 	.word	0x080223d4
 8016438:	080223e8 	.word	0x080223e8

0801643c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b082      	sub	sp, #8
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	7d1b      	ldrb	r3, [r3, #20]
 8016448:	2b01      	cmp	r3, #1
 801644a:	d105      	bne.n	8016458 <tcp_free_listen+0x1c>
 801644c:	4b06      	ldr	r3, [pc, #24]	; (8016468 <tcp_free_listen+0x2c>)
 801644e:	22df      	movs	r2, #223	; 0xdf
 8016450:	4906      	ldr	r1, [pc, #24]	; (801646c <tcp_free_listen+0x30>)
 8016452:	4807      	ldr	r0, [pc, #28]	; (8016470 <tcp_free_listen+0x34>)
 8016454:	f008 ff8a 	bl	801f36c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016458:	6879      	ldr	r1, [r7, #4]
 801645a:	2002      	movs	r0, #2
 801645c:	f7fe fe70 	bl	8015140 <memp_free>
}
 8016460:	bf00      	nop
 8016462:	3708      	adds	r7, #8
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}
 8016468:	080223a4 	.word	0x080223a4
 801646c:	08022410 	.word	0x08022410
 8016470:	080223e8 	.word	0x080223e8

08016474 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8016478:	f001 f85c 	bl	8017534 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801647c:	4b07      	ldr	r3, [pc, #28]	; (801649c <tcp_tmr+0x28>)
 801647e:	781b      	ldrb	r3, [r3, #0]
 8016480:	3301      	adds	r3, #1
 8016482:	b2da      	uxtb	r2, r3
 8016484:	4b05      	ldr	r3, [pc, #20]	; (801649c <tcp_tmr+0x28>)
 8016486:	701a      	strb	r2, [r3, #0]
 8016488:	4b04      	ldr	r3, [pc, #16]	; (801649c <tcp_tmr+0x28>)
 801648a:	781b      	ldrb	r3, [r3, #0]
 801648c:	f003 0301 	and.w	r3, r3, #1
 8016490:	2b00      	cmp	r3, #0
 8016492:	d001      	beq.n	8016498 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8016494:	f000 fd0e 	bl	8016eb4 <tcp_slowtmr>
  }
}
 8016498:	bf00      	nop
 801649a:	bd80      	pop	{r7, pc}
 801649c:	2000c7f9 	.word	0x2000c7f9

080164a0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b084      	sub	sp, #16
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
 80164a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80164aa:	683b      	ldr	r3, [r7, #0]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d105      	bne.n	80164bc <tcp_remove_listener+0x1c>
 80164b0:	4b0d      	ldr	r3, [pc, #52]	; (80164e8 <tcp_remove_listener+0x48>)
 80164b2:	22ff      	movs	r2, #255	; 0xff
 80164b4:	490d      	ldr	r1, [pc, #52]	; (80164ec <tcp_remove_listener+0x4c>)
 80164b6:	480e      	ldr	r0, [pc, #56]	; (80164f0 <tcp_remove_listener+0x50>)
 80164b8:	f008 ff58 	bl	801f36c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	60fb      	str	r3, [r7, #12]
 80164c0:	e00a      	b.n	80164d8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80164c6:	683a      	ldr	r2, [r7, #0]
 80164c8:	429a      	cmp	r2, r3
 80164ca:	d102      	bne.n	80164d2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	2200      	movs	r2, #0
 80164d0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	68db      	ldr	r3, [r3, #12]
 80164d6:	60fb      	str	r3, [r7, #12]
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d1f1      	bne.n	80164c2 <tcp_remove_listener+0x22>
    }
  }
}
 80164de:	bf00      	nop
 80164e0:	bf00      	nop
 80164e2:	3710      	adds	r7, #16
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}
 80164e8:	080223a4 	.word	0x080223a4
 80164ec:	0802242c 	.word	0x0802242c
 80164f0:	080223e8 	.word	0x080223e8

080164f4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b084      	sub	sp, #16
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d106      	bne.n	8016510 <tcp_listen_closed+0x1c>
 8016502:	4b14      	ldr	r3, [pc, #80]	; (8016554 <tcp_listen_closed+0x60>)
 8016504:	f240 1211 	movw	r2, #273	; 0x111
 8016508:	4913      	ldr	r1, [pc, #76]	; (8016558 <tcp_listen_closed+0x64>)
 801650a:	4814      	ldr	r0, [pc, #80]	; (801655c <tcp_listen_closed+0x68>)
 801650c:	f008 ff2e 	bl	801f36c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	7d1b      	ldrb	r3, [r3, #20]
 8016514:	2b01      	cmp	r3, #1
 8016516:	d006      	beq.n	8016526 <tcp_listen_closed+0x32>
 8016518:	4b0e      	ldr	r3, [pc, #56]	; (8016554 <tcp_listen_closed+0x60>)
 801651a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801651e:	4910      	ldr	r1, [pc, #64]	; (8016560 <tcp_listen_closed+0x6c>)
 8016520:	480e      	ldr	r0, [pc, #56]	; (801655c <tcp_listen_closed+0x68>)
 8016522:	f008 ff23 	bl	801f36c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016526:	2301      	movs	r3, #1
 8016528:	60fb      	str	r3, [r7, #12]
 801652a:	e00b      	b.n	8016544 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801652c:	4a0d      	ldr	r2, [pc, #52]	; (8016564 <tcp_listen_closed+0x70>)
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	6879      	ldr	r1, [r7, #4]
 8016538:	4618      	mov	r0, r3
 801653a:	f7ff ffb1 	bl	80164a0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	3301      	adds	r3, #1
 8016542:	60fb      	str	r3, [r7, #12]
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	2b03      	cmp	r3, #3
 8016548:	d9f0      	bls.n	801652c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801654a:	bf00      	nop
 801654c:	bf00      	nop
 801654e:	3710      	adds	r7, #16
 8016550:	46bd      	mov	sp, r7
 8016552:	bd80      	pop	{r7, pc}
 8016554:	080223a4 	.word	0x080223a4
 8016558:	08022454 	.word	0x08022454
 801655c:	080223e8 	.word	0x080223e8
 8016560:	08022460 	.word	0x08022460
 8016564:	0807b0d0 	.word	0x0807b0d0

08016568 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8016568:	b5b0      	push	{r4, r5, r7, lr}
 801656a:	b088      	sub	sp, #32
 801656c:	af04      	add	r7, sp, #16
 801656e:	6078      	str	r0, [r7, #4]
 8016570:	460b      	mov	r3, r1
 8016572:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d106      	bne.n	8016588 <tcp_close_shutdown+0x20>
 801657a:	4b63      	ldr	r3, [pc, #396]	; (8016708 <tcp_close_shutdown+0x1a0>)
 801657c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8016580:	4962      	ldr	r1, [pc, #392]	; (801670c <tcp_close_shutdown+0x1a4>)
 8016582:	4863      	ldr	r0, [pc, #396]	; (8016710 <tcp_close_shutdown+0x1a8>)
 8016584:	f008 fef2 	bl	801f36c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8016588:	78fb      	ldrb	r3, [r7, #3]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d066      	beq.n	801665c <tcp_close_shutdown+0xf4>
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	7d1b      	ldrb	r3, [r3, #20]
 8016592:	2b04      	cmp	r3, #4
 8016594:	d003      	beq.n	801659e <tcp_close_shutdown+0x36>
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	7d1b      	ldrb	r3, [r3, #20]
 801659a:	2b07      	cmp	r3, #7
 801659c:	d15e      	bne.n	801665c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d104      	bne.n	80165b0 <tcp_close_shutdown+0x48>
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80165aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80165ae:	d055      	beq.n	801665c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	8b5b      	ldrh	r3, [r3, #26]
 80165b4:	f003 0310 	and.w	r3, r3, #16
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d106      	bne.n	80165ca <tcp_close_shutdown+0x62>
 80165bc:	4b52      	ldr	r3, [pc, #328]	; (8016708 <tcp_close_shutdown+0x1a0>)
 80165be:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80165c2:	4954      	ldr	r1, [pc, #336]	; (8016714 <tcp_close_shutdown+0x1ac>)
 80165c4:	4852      	ldr	r0, [pc, #328]	; (8016710 <tcp_close_shutdown+0x1a8>)
 80165c6:	f008 fed1 	bl	801f36c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80165d2:	687d      	ldr	r5, [r7, #4]
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	3304      	adds	r3, #4
 80165d8:	687a      	ldr	r2, [r7, #4]
 80165da:	8ad2      	ldrh	r2, [r2, #22]
 80165dc:	6879      	ldr	r1, [r7, #4]
 80165de:	8b09      	ldrh	r1, [r1, #24]
 80165e0:	9102      	str	r1, [sp, #8]
 80165e2:	9201      	str	r2, [sp, #4]
 80165e4:	9300      	str	r3, [sp, #0]
 80165e6:	462b      	mov	r3, r5
 80165e8:	4622      	mov	r2, r4
 80165ea:	4601      	mov	r1, r0
 80165ec:	6878      	ldr	r0, [r7, #4]
 80165ee:	f005 fd8b 	bl	801c108 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80165f2:	6878      	ldr	r0, [r7, #4]
 80165f4:	f001 fb6c 	bl	8017cd0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80165f8:	4b47      	ldr	r3, [pc, #284]	; (8016718 <tcp_close_shutdown+0x1b0>)
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	687a      	ldr	r2, [r7, #4]
 80165fe:	429a      	cmp	r2, r3
 8016600:	d105      	bne.n	801660e <tcp_close_shutdown+0xa6>
 8016602:	4b45      	ldr	r3, [pc, #276]	; (8016718 <tcp_close_shutdown+0x1b0>)
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	68db      	ldr	r3, [r3, #12]
 8016608:	4a43      	ldr	r2, [pc, #268]	; (8016718 <tcp_close_shutdown+0x1b0>)
 801660a:	6013      	str	r3, [r2, #0]
 801660c:	e013      	b.n	8016636 <tcp_close_shutdown+0xce>
 801660e:	4b42      	ldr	r3, [pc, #264]	; (8016718 <tcp_close_shutdown+0x1b0>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	60fb      	str	r3, [r7, #12]
 8016614:	e00c      	b.n	8016630 <tcp_close_shutdown+0xc8>
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	68db      	ldr	r3, [r3, #12]
 801661a:	687a      	ldr	r2, [r7, #4]
 801661c:	429a      	cmp	r2, r3
 801661e:	d104      	bne.n	801662a <tcp_close_shutdown+0xc2>
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	68da      	ldr	r2, [r3, #12]
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	60da      	str	r2, [r3, #12]
 8016628:	e005      	b.n	8016636 <tcp_close_shutdown+0xce>
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	68db      	ldr	r3, [r3, #12]
 801662e:	60fb      	str	r3, [r7, #12]
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d1ef      	bne.n	8016616 <tcp_close_shutdown+0xae>
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	2200      	movs	r2, #0
 801663a:	60da      	str	r2, [r3, #12]
 801663c:	4b37      	ldr	r3, [pc, #220]	; (801671c <tcp_close_shutdown+0x1b4>)
 801663e:	2201      	movs	r2, #1
 8016640:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8016642:	4b37      	ldr	r3, [pc, #220]	; (8016720 <tcp_close_shutdown+0x1b8>)
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	687a      	ldr	r2, [r7, #4]
 8016648:	429a      	cmp	r2, r3
 801664a:	d102      	bne.n	8016652 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801664c:	f004 f800 	bl	801a650 <tcp_trigger_input_pcb_close>
 8016650:	e002      	b.n	8016658 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8016652:	6878      	ldr	r0, [r7, #4]
 8016654:	f7ff fed6 	bl	8016404 <tcp_free>
      }
      return ERR_OK;
 8016658:	2300      	movs	r3, #0
 801665a:	e050      	b.n	80166fe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	7d1b      	ldrb	r3, [r3, #20]
 8016660:	2b02      	cmp	r3, #2
 8016662:	d03b      	beq.n	80166dc <tcp_close_shutdown+0x174>
 8016664:	2b02      	cmp	r3, #2
 8016666:	dc44      	bgt.n	80166f2 <tcp_close_shutdown+0x18a>
 8016668:	2b00      	cmp	r3, #0
 801666a:	d002      	beq.n	8016672 <tcp_close_shutdown+0x10a>
 801666c:	2b01      	cmp	r3, #1
 801666e:	d02a      	beq.n	80166c6 <tcp_close_shutdown+0x15e>
 8016670:	e03f      	b.n	80166f2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	8adb      	ldrh	r3, [r3, #22]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d021      	beq.n	80166be <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801667a:	4b2a      	ldr	r3, [pc, #168]	; (8016724 <tcp_close_shutdown+0x1bc>)
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	687a      	ldr	r2, [r7, #4]
 8016680:	429a      	cmp	r2, r3
 8016682:	d105      	bne.n	8016690 <tcp_close_shutdown+0x128>
 8016684:	4b27      	ldr	r3, [pc, #156]	; (8016724 <tcp_close_shutdown+0x1bc>)
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	68db      	ldr	r3, [r3, #12]
 801668a:	4a26      	ldr	r2, [pc, #152]	; (8016724 <tcp_close_shutdown+0x1bc>)
 801668c:	6013      	str	r3, [r2, #0]
 801668e:	e013      	b.n	80166b8 <tcp_close_shutdown+0x150>
 8016690:	4b24      	ldr	r3, [pc, #144]	; (8016724 <tcp_close_shutdown+0x1bc>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	60bb      	str	r3, [r7, #8]
 8016696:	e00c      	b.n	80166b2 <tcp_close_shutdown+0x14a>
 8016698:	68bb      	ldr	r3, [r7, #8]
 801669a:	68db      	ldr	r3, [r3, #12]
 801669c:	687a      	ldr	r2, [r7, #4]
 801669e:	429a      	cmp	r2, r3
 80166a0:	d104      	bne.n	80166ac <tcp_close_shutdown+0x144>
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	68da      	ldr	r2, [r3, #12]
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	60da      	str	r2, [r3, #12]
 80166aa:	e005      	b.n	80166b8 <tcp_close_shutdown+0x150>
 80166ac:	68bb      	ldr	r3, [r7, #8]
 80166ae:	68db      	ldr	r3, [r3, #12]
 80166b0:	60bb      	str	r3, [r7, #8]
 80166b2:	68bb      	ldr	r3, [r7, #8]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d1ef      	bne.n	8016698 <tcp_close_shutdown+0x130>
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	2200      	movs	r2, #0
 80166bc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80166be:	6878      	ldr	r0, [r7, #4]
 80166c0:	f7ff fea0 	bl	8016404 <tcp_free>
      break;
 80166c4:	e01a      	b.n	80166fc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80166c6:	6878      	ldr	r0, [r7, #4]
 80166c8:	f7ff ff14 	bl	80164f4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80166cc:	6879      	ldr	r1, [r7, #4]
 80166ce:	4816      	ldr	r0, [pc, #88]	; (8016728 <tcp_close_shutdown+0x1c0>)
 80166d0:	f001 fb4e 	bl	8017d70 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80166d4:	6878      	ldr	r0, [r7, #4]
 80166d6:	f7ff feb1 	bl	801643c <tcp_free_listen>
      break;
 80166da:	e00f      	b.n	80166fc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80166dc:	6879      	ldr	r1, [r7, #4]
 80166de:	480e      	ldr	r0, [pc, #56]	; (8016718 <tcp_close_shutdown+0x1b0>)
 80166e0:	f001 fb46 	bl	8017d70 <tcp_pcb_remove>
 80166e4:	4b0d      	ldr	r3, [pc, #52]	; (801671c <tcp_close_shutdown+0x1b4>)
 80166e6:	2201      	movs	r2, #1
 80166e8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80166ea:	6878      	ldr	r0, [r7, #4]
 80166ec:	f7ff fe8a 	bl	8016404 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80166f0:	e004      	b.n	80166fc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80166f2:	6878      	ldr	r0, [r7, #4]
 80166f4:	f000 f81a 	bl	801672c <tcp_close_shutdown_fin>
 80166f8:	4603      	mov	r3, r0
 80166fa:	e000      	b.n	80166fe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80166fc:	2300      	movs	r3, #0
}
 80166fe:	4618      	mov	r0, r3
 8016700:	3710      	adds	r7, #16
 8016702:	46bd      	mov	sp, r7
 8016704:	bdb0      	pop	{r4, r5, r7, pc}
 8016706:	bf00      	nop
 8016708:	080223a4 	.word	0x080223a4
 801670c:	08022478 	.word	0x08022478
 8016710:	080223e8 	.word	0x080223e8
 8016714:	08022498 	.word	0x08022498
 8016718:	20014bb4 	.word	0x20014bb4
 801671c:	20014bb0 	.word	0x20014bb0
 8016720:	20014bc8 	.word	0x20014bc8
 8016724:	20014bc0 	.word	0x20014bc0
 8016728:	20014bbc 	.word	0x20014bbc

0801672c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b084      	sub	sp, #16
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d106      	bne.n	8016748 <tcp_close_shutdown_fin+0x1c>
 801673a:	4b2e      	ldr	r3, [pc, #184]	; (80167f4 <tcp_close_shutdown_fin+0xc8>)
 801673c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8016740:	492d      	ldr	r1, [pc, #180]	; (80167f8 <tcp_close_shutdown_fin+0xcc>)
 8016742:	482e      	ldr	r0, [pc, #184]	; (80167fc <tcp_close_shutdown_fin+0xd0>)
 8016744:	f008 fe12 	bl	801f36c <iprintf>

  switch (pcb->state) {
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	7d1b      	ldrb	r3, [r3, #20]
 801674c:	2b07      	cmp	r3, #7
 801674e:	d020      	beq.n	8016792 <tcp_close_shutdown_fin+0x66>
 8016750:	2b07      	cmp	r3, #7
 8016752:	dc2b      	bgt.n	80167ac <tcp_close_shutdown_fin+0x80>
 8016754:	2b03      	cmp	r3, #3
 8016756:	d002      	beq.n	801675e <tcp_close_shutdown_fin+0x32>
 8016758:	2b04      	cmp	r3, #4
 801675a:	d00d      	beq.n	8016778 <tcp_close_shutdown_fin+0x4c>
 801675c:	e026      	b.n	80167ac <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801675e:	6878      	ldr	r0, [r7, #4]
 8016760:	f004 fde0 	bl	801b324 <tcp_send_fin>
 8016764:	4603      	mov	r3, r0
 8016766:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d11f      	bne.n	80167b0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2205      	movs	r2, #5
 8016774:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016776:	e01b      	b.n	80167b0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	f004 fdd3 	bl	801b324 <tcp_send_fin>
 801677e:	4603      	mov	r3, r0
 8016780:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d114      	bne.n	80167b4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	2205      	movs	r2, #5
 801678e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016790:	e010      	b.n	80167b4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f004 fdc6 	bl	801b324 <tcp_send_fin>
 8016798:	4603      	mov	r3, r0
 801679a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801679c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d109      	bne.n	80167b8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2209      	movs	r2, #9
 80167a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80167aa:	e005      	b.n	80167b8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80167ac:	2300      	movs	r3, #0
 80167ae:	e01c      	b.n	80167ea <tcp_close_shutdown_fin+0xbe>
      break;
 80167b0:	bf00      	nop
 80167b2:	e002      	b.n	80167ba <tcp_close_shutdown_fin+0x8e>
      break;
 80167b4:	bf00      	nop
 80167b6:	e000      	b.n	80167ba <tcp_close_shutdown_fin+0x8e>
      break;
 80167b8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80167ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d103      	bne.n	80167ca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80167c2:	6878      	ldr	r0, [r7, #4]
 80167c4:	f004 feec 	bl	801b5a0 <tcp_output>
 80167c8:	e00d      	b.n	80167e6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80167ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167d2:	d108      	bne.n	80167e6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	8b5b      	ldrh	r3, [r3, #26]
 80167d8:	f043 0308 	orr.w	r3, r3, #8
 80167dc:	b29a      	uxth	r2, r3
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80167e2:	2300      	movs	r3, #0
 80167e4:	e001      	b.n	80167ea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80167e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80167ea:	4618      	mov	r0, r3
 80167ec:	3710      	adds	r7, #16
 80167ee:	46bd      	mov	sp, r7
 80167f0:	bd80      	pop	{r7, pc}
 80167f2:	bf00      	nop
 80167f4:	080223a4 	.word	0x080223a4
 80167f8:	08022454 	.word	0x08022454
 80167fc:	080223e8 	.word	0x080223e8

08016800 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016800:	b580      	push	{r7, lr}
 8016802:	b082      	sub	sp, #8
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d109      	bne.n	8016822 <tcp_close+0x22>
 801680e:	4b0f      	ldr	r3, [pc, #60]	; (801684c <tcp_close+0x4c>)
 8016810:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8016814:	490e      	ldr	r1, [pc, #56]	; (8016850 <tcp_close+0x50>)
 8016816:	480f      	ldr	r0, [pc, #60]	; (8016854 <tcp_close+0x54>)
 8016818:	f008 fda8 	bl	801f36c <iprintf>
 801681c:	f06f 030f 	mvn.w	r3, #15
 8016820:	e00f      	b.n	8016842 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	7d1b      	ldrb	r3, [r3, #20]
 8016826:	2b01      	cmp	r3, #1
 8016828:	d006      	beq.n	8016838 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	8b5b      	ldrh	r3, [r3, #26]
 801682e:	f043 0310 	orr.w	r3, r3, #16
 8016832:	b29a      	uxth	r2, r3
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016838:	2101      	movs	r1, #1
 801683a:	6878      	ldr	r0, [r7, #4]
 801683c:	f7ff fe94 	bl	8016568 <tcp_close_shutdown>
 8016840:	4603      	mov	r3, r0
}
 8016842:	4618      	mov	r0, r3
 8016844:	3708      	adds	r7, #8
 8016846:	46bd      	mov	sp, r7
 8016848:	bd80      	pop	{r7, pc}
 801684a:	bf00      	nop
 801684c:	080223a4 	.word	0x080223a4
 8016850:	080224b4 	.word	0x080224b4
 8016854:	080223e8 	.word	0x080223e8

08016858 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b08e      	sub	sp, #56	; 0x38
 801685c:	af04      	add	r7, sp, #16
 801685e:	6078      	str	r0, [r7, #4]
 8016860:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d107      	bne.n	8016878 <tcp_abandon+0x20>
 8016868:	4b52      	ldr	r3, [pc, #328]	; (80169b4 <tcp_abandon+0x15c>)
 801686a:	f240 223d 	movw	r2, #573	; 0x23d
 801686e:	4952      	ldr	r1, [pc, #328]	; (80169b8 <tcp_abandon+0x160>)
 8016870:	4852      	ldr	r0, [pc, #328]	; (80169bc <tcp_abandon+0x164>)
 8016872:	f008 fd7b 	bl	801f36c <iprintf>
 8016876:	e099      	b.n	80169ac <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	7d1b      	ldrb	r3, [r3, #20]
 801687c:	2b01      	cmp	r3, #1
 801687e:	d106      	bne.n	801688e <tcp_abandon+0x36>
 8016880:	4b4c      	ldr	r3, [pc, #304]	; (80169b4 <tcp_abandon+0x15c>)
 8016882:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016886:	494e      	ldr	r1, [pc, #312]	; (80169c0 <tcp_abandon+0x168>)
 8016888:	484c      	ldr	r0, [pc, #304]	; (80169bc <tcp_abandon+0x164>)
 801688a:	f008 fd6f 	bl	801f36c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	7d1b      	ldrb	r3, [r3, #20]
 8016892:	2b0a      	cmp	r3, #10
 8016894:	d107      	bne.n	80168a6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016896:	6879      	ldr	r1, [r7, #4]
 8016898:	484a      	ldr	r0, [pc, #296]	; (80169c4 <tcp_abandon+0x16c>)
 801689a:	f001 fa69 	bl	8017d70 <tcp_pcb_remove>
    tcp_free(pcb);
 801689e:	6878      	ldr	r0, [r7, #4]
 80168a0:	f7ff fdb0 	bl	8016404 <tcp_free>
 80168a4:	e082      	b.n	80169ac <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80168a6:	2300      	movs	r3, #0
 80168a8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80168aa:	2300      	movs	r3, #0
 80168ac:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80168b2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168b8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80168c0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	691b      	ldr	r3, [r3, #16]
 80168c6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	7d1b      	ldrb	r3, [r3, #20]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d126      	bne.n	801691e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	8adb      	ldrh	r3, [r3, #22]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d02e      	beq.n	8016936 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80168d8:	4b3b      	ldr	r3, [pc, #236]	; (80169c8 <tcp_abandon+0x170>)
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	687a      	ldr	r2, [r7, #4]
 80168de:	429a      	cmp	r2, r3
 80168e0:	d105      	bne.n	80168ee <tcp_abandon+0x96>
 80168e2:	4b39      	ldr	r3, [pc, #228]	; (80169c8 <tcp_abandon+0x170>)
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	68db      	ldr	r3, [r3, #12]
 80168e8:	4a37      	ldr	r2, [pc, #220]	; (80169c8 <tcp_abandon+0x170>)
 80168ea:	6013      	str	r3, [r2, #0]
 80168ec:	e013      	b.n	8016916 <tcp_abandon+0xbe>
 80168ee:	4b36      	ldr	r3, [pc, #216]	; (80169c8 <tcp_abandon+0x170>)
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	61fb      	str	r3, [r7, #28]
 80168f4:	e00c      	b.n	8016910 <tcp_abandon+0xb8>
 80168f6:	69fb      	ldr	r3, [r7, #28]
 80168f8:	68db      	ldr	r3, [r3, #12]
 80168fa:	687a      	ldr	r2, [r7, #4]
 80168fc:	429a      	cmp	r2, r3
 80168fe:	d104      	bne.n	801690a <tcp_abandon+0xb2>
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	68da      	ldr	r2, [r3, #12]
 8016904:	69fb      	ldr	r3, [r7, #28]
 8016906:	60da      	str	r2, [r3, #12]
 8016908:	e005      	b.n	8016916 <tcp_abandon+0xbe>
 801690a:	69fb      	ldr	r3, [r7, #28]
 801690c:	68db      	ldr	r3, [r3, #12]
 801690e:	61fb      	str	r3, [r7, #28]
 8016910:	69fb      	ldr	r3, [r7, #28]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d1ef      	bne.n	80168f6 <tcp_abandon+0x9e>
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	2200      	movs	r2, #0
 801691a:	60da      	str	r2, [r3, #12]
 801691c:	e00b      	b.n	8016936 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	8adb      	ldrh	r3, [r3, #22]
 8016926:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016928:	6879      	ldr	r1, [r7, #4]
 801692a:	4828      	ldr	r0, [pc, #160]	; (80169cc <tcp_abandon+0x174>)
 801692c:	f001 fa20 	bl	8017d70 <tcp_pcb_remove>
 8016930:	4b27      	ldr	r3, [pc, #156]	; (80169d0 <tcp_abandon+0x178>)
 8016932:	2201      	movs	r2, #1
 8016934:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801693a:	2b00      	cmp	r3, #0
 801693c:	d004      	beq.n	8016948 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016942:	4618      	mov	r0, r3
 8016944:	f000 fed6 	bl	80176f4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801694c:	2b00      	cmp	r3, #0
 801694e:	d004      	beq.n	801695a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016954:	4618      	mov	r0, r3
 8016956:	f000 fecd 	bl	80176f4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801695e:	2b00      	cmp	r3, #0
 8016960:	d004      	beq.n	801696c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016966:	4618      	mov	r0, r3
 8016968:	f000 fec4 	bl	80176f4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801696e:	2b00      	cmp	r3, #0
 8016970:	d00e      	beq.n	8016990 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8016972:	6879      	ldr	r1, [r7, #4]
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	3304      	adds	r3, #4
 8016978:	687a      	ldr	r2, [r7, #4]
 801697a:	8b12      	ldrh	r2, [r2, #24]
 801697c:	9202      	str	r2, [sp, #8]
 801697e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016980:	9201      	str	r2, [sp, #4]
 8016982:	9300      	str	r3, [sp, #0]
 8016984:	460b      	mov	r3, r1
 8016986:	697a      	ldr	r2, [r7, #20]
 8016988:	69b9      	ldr	r1, [r7, #24]
 801698a:	6878      	ldr	r0, [r7, #4]
 801698c:	f005 fbbc 	bl	801c108 <tcp_rst>
    }
    last_state = pcb->state;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	7d1b      	ldrb	r3, [r3, #20]
 8016994:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8016996:	6878      	ldr	r0, [r7, #4]
 8016998:	f7ff fd34 	bl	8016404 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801699c:	693b      	ldr	r3, [r7, #16]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d004      	beq.n	80169ac <tcp_abandon+0x154>
 80169a2:	693b      	ldr	r3, [r7, #16]
 80169a4:	f06f 010c 	mvn.w	r1, #12
 80169a8:	68f8      	ldr	r0, [r7, #12]
 80169aa:	4798      	blx	r3
  }
}
 80169ac:	3728      	adds	r7, #40	; 0x28
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}
 80169b2:	bf00      	nop
 80169b4:	080223a4 	.word	0x080223a4
 80169b8:	080224e8 	.word	0x080224e8
 80169bc:	080223e8 	.word	0x080223e8
 80169c0:	08022504 	.word	0x08022504
 80169c4:	20014bc4 	.word	0x20014bc4
 80169c8:	20014bc0 	.word	0x20014bc0
 80169cc:	20014bb4 	.word	0x20014bb4
 80169d0:	20014bb0 	.word	0x20014bb0

080169d4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b082      	sub	sp, #8
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80169dc:	2101      	movs	r1, #1
 80169de:	6878      	ldr	r0, [r7, #4]
 80169e0:	f7ff ff3a 	bl	8016858 <tcp_abandon>
}
 80169e4:	bf00      	nop
 80169e6:	3708      	adds	r7, #8
 80169e8:	46bd      	mov	sp, r7
 80169ea:	bd80      	pop	{r7, pc}

080169ec <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b088      	sub	sp, #32
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	60f8      	str	r0, [r7, #12]
 80169f4:	60b9      	str	r1, [r7, #8]
 80169f6:	4613      	mov	r3, r2
 80169f8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80169fa:	2304      	movs	r3, #4
 80169fc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80169fe:	68bb      	ldr	r3, [r7, #8]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d101      	bne.n	8016a08 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8016a04:	4b3e      	ldr	r3, [pc, #248]	; (8016b00 <tcp_bind+0x114>)
 8016a06:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d109      	bne.n	8016a22 <tcp_bind+0x36>
 8016a0e:	4b3d      	ldr	r3, [pc, #244]	; (8016b04 <tcp_bind+0x118>)
 8016a10:	f240 22a9 	movw	r2, #681	; 0x2a9
 8016a14:	493c      	ldr	r1, [pc, #240]	; (8016b08 <tcp_bind+0x11c>)
 8016a16:	483d      	ldr	r0, [pc, #244]	; (8016b0c <tcp_bind+0x120>)
 8016a18:	f008 fca8 	bl	801f36c <iprintf>
 8016a1c:	f06f 030f 	mvn.w	r3, #15
 8016a20:	e06a      	b.n	8016af8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	7d1b      	ldrb	r3, [r3, #20]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d009      	beq.n	8016a3e <tcp_bind+0x52>
 8016a2a:	4b36      	ldr	r3, [pc, #216]	; (8016b04 <tcp_bind+0x118>)
 8016a2c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016a30:	4937      	ldr	r1, [pc, #220]	; (8016b10 <tcp_bind+0x124>)
 8016a32:	4836      	ldr	r0, [pc, #216]	; (8016b0c <tcp_bind+0x120>)
 8016a34:	f008 fc9a 	bl	801f36c <iprintf>
 8016a38:	f06f 0305 	mvn.w	r3, #5
 8016a3c:	e05c      	b.n	8016af8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8016a3e:	88fb      	ldrh	r3, [r7, #6]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d109      	bne.n	8016a58 <tcp_bind+0x6c>
    port = tcp_new_port();
 8016a44:	f000 f9f0 	bl	8016e28 <tcp_new_port>
 8016a48:	4603      	mov	r3, r0
 8016a4a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016a4c:	88fb      	ldrh	r3, [r7, #6]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d135      	bne.n	8016abe <tcp_bind+0xd2>
      return ERR_BUF;
 8016a52:	f06f 0301 	mvn.w	r3, #1
 8016a56:	e04f      	b.n	8016af8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8016a58:	2300      	movs	r3, #0
 8016a5a:	61fb      	str	r3, [r7, #28]
 8016a5c:	e02b      	b.n	8016ab6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016a5e:	4a2d      	ldr	r2, [pc, #180]	; (8016b14 <tcp_bind+0x128>)
 8016a60:	69fb      	ldr	r3, [r7, #28]
 8016a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	61bb      	str	r3, [r7, #24]
 8016a6a:	e01e      	b.n	8016aaa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8016a6c:	69bb      	ldr	r3, [r7, #24]
 8016a6e:	8adb      	ldrh	r3, [r3, #22]
 8016a70:	88fa      	ldrh	r2, [r7, #6]
 8016a72:	429a      	cmp	r2, r3
 8016a74:	d116      	bne.n	8016aa4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8016a76:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d010      	beq.n	8016a9e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8016a7c:	69bb      	ldr	r3, [r7, #24]
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d00c      	beq.n	8016a9e <tcp_bind+0xb2>
 8016a84:	68bb      	ldr	r3, [r7, #8]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d009      	beq.n	8016a9e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8016a8a:	68bb      	ldr	r3, [r7, #8]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d005      	beq.n	8016a9e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8016a92:	69bb      	ldr	r3, [r7, #24]
 8016a94:	681a      	ldr	r2, [r3, #0]
 8016a96:	68bb      	ldr	r3, [r7, #8]
 8016a98:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016a9a:	429a      	cmp	r2, r3
 8016a9c:	d102      	bne.n	8016aa4 <tcp_bind+0xb8>
              return ERR_USE;
 8016a9e:	f06f 0307 	mvn.w	r3, #7
 8016aa2:	e029      	b.n	8016af8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016aa4:	69bb      	ldr	r3, [r7, #24]
 8016aa6:	68db      	ldr	r3, [r3, #12]
 8016aa8:	61bb      	str	r3, [r7, #24]
 8016aaa:	69bb      	ldr	r3, [r7, #24]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d1dd      	bne.n	8016a6c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8016ab0:	69fb      	ldr	r3, [r7, #28]
 8016ab2:	3301      	adds	r3, #1
 8016ab4:	61fb      	str	r3, [r7, #28]
 8016ab6:	69fa      	ldr	r2, [r7, #28]
 8016ab8:	697b      	ldr	r3, [r7, #20]
 8016aba:	429a      	cmp	r2, r3
 8016abc:	dbcf      	blt.n	8016a5e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8016abe:	68bb      	ldr	r3, [r7, #8]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d00c      	beq.n	8016ade <tcp_bind+0xf2>
 8016ac4:	68bb      	ldr	r3, [r7, #8]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d008      	beq.n	8016ade <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8016acc:	68bb      	ldr	r3, [r7, #8]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d002      	beq.n	8016ad8 <tcp_bind+0xec>
 8016ad2:	68bb      	ldr	r3, [r7, #8]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	e000      	b.n	8016ada <tcp_bind+0xee>
 8016ad8:	2300      	movs	r3, #0
 8016ada:	68fa      	ldr	r2, [r7, #12]
 8016adc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	88fa      	ldrh	r2, [r7, #6]
 8016ae2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8016ae4:	4b0c      	ldr	r3, [pc, #48]	; (8016b18 <tcp_bind+0x12c>)
 8016ae6:	681a      	ldr	r2, [r3, #0]
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	60da      	str	r2, [r3, #12]
 8016aec:	4a0a      	ldr	r2, [pc, #40]	; (8016b18 <tcp_bind+0x12c>)
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	6013      	str	r3, [r2, #0]
 8016af2:	f005 fccb 	bl	801c48c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8016af6:	2300      	movs	r3, #0
}
 8016af8:	4618      	mov	r0, r3
 8016afa:	3720      	adds	r7, #32
 8016afc:	46bd      	mov	sp, r7
 8016afe:	bd80      	pop	{r7, pc}
 8016b00:	0807b0f8 	.word	0x0807b0f8
 8016b04:	080223a4 	.word	0x080223a4
 8016b08:	08022538 	.word	0x08022538
 8016b0c:	080223e8 	.word	0x080223e8
 8016b10:	08022550 	.word	0x08022550
 8016b14:	0807b0d0 	.word	0x0807b0d0
 8016b18:	20014bc0 	.word	0x20014bc0

08016b1c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b084      	sub	sp, #16
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	60f8      	str	r0, [r7, #12]
 8016b24:	60b9      	str	r1, [r7, #8]
 8016b26:	4613      	mov	r3, r2
 8016b28:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8016b2a:	68bb      	ldr	r3, [r7, #8]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d106      	bne.n	8016b3e <tcp_accept_null+0x22>
 8016b30:	4b07      	ldr	r3, [pc, #28]	; (8016b50 <tcp_accept_null+0x34>)
 8016b32:	f240 320f 	movw	r2, #783	; 0x30f
 8016b36:	4907      	ldr	r1, [pc, #28]	; (8016b54 <tcp_accept_null+0x38>)
 8016b38:	4807      	ldr	r0, [pc, #28]	; (8016b58 <tcp_accept_null+0x3c>)
 8016b3a:	f008 fc17 	bl	801f36c <iprintf>

  tcp_abort(pcb);
 8016b3e:	68b8      	ldr	r0, [r7, #8]
 8016b40:	f7ff ff48 	bl	80169d4 <tcp_abort>

  return ERR_ABRT;
 8016b44:	f06f 030c 	mvn.w	r3, #12
}
 8016b48:	4618      	mov	r0, r3
 8016b4a:	3710      	adds	r7, #16
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}
 8016b50:	080223a4 	.word	0x080223a4
 8016b54:	08022578 	.word	0x08022578
 8016b58:	080223e8 	.word	0x080223e8

08016b5c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b082      	sub	sp, #8
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
 8016b64:	460b      	mov	r3, r1
 8016b66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8016b68:	78fb      	ldrb	r3, [r7, #3]
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	4619      	mov	r1, r3
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	f000 f806 	bl	8016b80 <tcp_listen_with_backlog_and_err>
 8016b74:	4603      	mov	r3, r0
}
 8016b76:	4618      	mov	r0, r3
 8016b78:	3708      	adds	r7, #8
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	bd80      	pop	{r7, pc}
	...

08016b80 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b088      	sub	sp, #32
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	60f8      	str	r0, [r7, #12]
 8016b88:	460b      	mov	r3, r1
 8016b8a:	607a      	str	r2, [r7, #4]
 8016b8c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8016b8e:	2300      	movs	r3, #0
 8016b90:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d109      	bne.n	8016bac <tcp_listen_with_backlog_and_err+0x2c>
 8016b98:	4b47      	ldr	r3, [pc, #284]	; (8016cb8 <tcp_listen_with_backlog_and_err+0x138>)
 8016b9a:	f240 3259 	movw	r2, #857	; 0x359
 8016b9e:	4947      	ldr	r1, [pc, #284]	; (8016cbc <tcp_listen_with_backlog_and_err+0x13c>)
 8016ba0:	4847      	ldr	r0, [pc, #284]	; (8016cc0 <tcp_listen_with_backlog_and_err+0x140>)
 8016ba2:	f008 fbe3 	bl	801f36c <iprintf>
 8016ba6:	23f0      	movs	r3, #240	; 0xf0
 8016ba8:	76fb      	strb	r3, [r7, #27]
 8016baa:	e079      	b.n	8016ca0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	7d1b      	ldrb	r3, [r3, #20]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d009      	beq.n	8016bc8 <tcp_listen_with_backlog_and_err+0x48>
 8016bb4:	4b40      	ldr	r3, [pc, #256]	; (8016cb8 <tcp_listen_with_backlog_and_err+0x138>)
 8016bb6:	f240 325a 	movw	r2, #858	; 0x35a
 8016bba:	4942      	ldr	r1, [pc, #264]	; (8016cc4 <tcp_listen_with_backlog_and_err+0x144>)
 8016bbc:	4840      	ldr	r0, [pc, #256]	; (8016cc0 <tcp_listen_with_backlog_and_err+0x140>)
 8016bbe:	f008 fbd5 	bl	801f36c <iprintf>
 8016bc2:	23f1      	movs	r3, #241	; 0xf1
 8016bc4:	76fb      	strb	r3, [r7, #27]
 8016bc6:	e06b      	b.n	8016ca0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	7d1b      	ldrb	r3, [r3, #20]
 8016bcc:	2b01      	cmp	r3, #1
 8016bce:	d104      	bne.n	8016bda <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8016bd4:	23f7      	movs	r3, #247	; 0xf7
 8016bd6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016bd8:	e062      	b.n	8016ca0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8016bda:	2002      	movs	r0, #2
 8016bdc:	f7fe fa5e 	bl	801509c <memp_malloc>
 8016be0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8016be2:	69fb      	ldr	r3, [r7, #28]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d102      	bne.n	8016bee <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8016be8:	23ff      	movs	r3, #255	; 0xff
 8016bea:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016bec:	e058      	b.n	8016ca0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	691a      	ldr	r2, [r3, #16]
 8016bf2:	69fb      	ldr	r3, [r7, #28]
 8016bf4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	8ada      	ldrh	r2, [r3, #22]
 8016bfa:	69fb      	ldr	r3, [r7, #28]
 8016bfc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8016bfe:	69fb      	ldr	r3, [r7, #28]
 8016c00:	2201      	movs	r2, #1
 8016c02:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	7d5a      	ldrb	r2, [r3, #21]
 8016c08:	69fb      	ldr	r3, [r7, #28]
 8016c0a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	7a5a      	ldrb	r2, [r3, #9]
 8016c10:	69fb      	ldr	r3, [r7, #28]
 8016c12:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8016c14:	69fb      	ldr	r3, [r7, #28]
 8016c16:	2200      	movs	r2, #0
 8016c18:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	7ada      	ldrb	r2, [r3, #11]
 8016c1e:	69fb      	ldr	r3, [r7, #28]
 8016c20:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	7a9a      	ldrb	r2, [r3, #10]
 8016c26:	69fb      	ldr	r3, [r7, #28]
 8016c28:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	681a      	ldr	r2, [r3, #0]
 8016c2e:	69fb      	ldr	r3, [r7, #28]
 8016c30:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	8adb      	ldrh	r3, [r3, #22]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d021      	beq.n	8016c7e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8016c3a:	4b23      	ldr	r3, [pc, #140]	; (8016cc8 <tcp_listen_with_backlog_and_err+0x148>)
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	68fa      	ldr	r2, [r7, #12]
 8016c40:	429a      	cmp	r2, r3
 8016c42:	d105      	bne.n	8016c50 <tcp_listen_with_backlog_and_err+0xd0>
 8016c44:	4b20      	ldr	r3, [pc, #128]	; (8016cc8 <tcp_listen_with_backlog_and_err+0x148>)
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	68db      	ldr	r3, [r3, #12]
 8016c4a:	4a1f      	ldr	r2, [pc, #124]	; (8016cc8 <tcp_listen_with_backlog_and_err+0x148>)
 8016c4c:	6013      	str	r3, [r2, #0]
 8016c4e:	e013      	b.n	8016c78 <tcp_listen_with_backlog_and_err+0xf8>
 8016c50:	4b1d      	ldr	r3, [pc, #116]	; (8016cc8 <tcp_listen_with_backlog_and_err+0x148>)
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	617b      	str	r3, [r7, #20]
 8016c56:	e00c      	b.n	8016c72 <tcp_listen_with_backlog_and_err+0xf2>
 8016c58:	697b      	ldr	r3, [r7, #20]
 8016c5a:	68db      	ldr	r3, [r3, #12]
 8016c5c:	68fa      	ldr	r2, [r7, #12]
 8016c5e:	429a      	cmp	r2, r3
 8016c60:	d104      	bne.n	8016c6c <tcp_listen_with_backlog_and_err+0xec>
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	68da      	ldr	r2, [r3, #12]
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	60da      	str	r2, [r3, #12]
 8016c6a:	e005      	b.n	8016c78 <tcp_listen_with_backlog_and_err+0xf8>
 8016c6c:	697b      	ldr	r3, [r7, #20]
 8016c6e:	68db      	ldr	r3, [r3, #12]
 8016c70:	617b      	str	r3, [r7, #20]
 8016c72:	697b      	ldr	r3, [r7, #20]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d1ef      	bne.n	8016c58 <tcp_listen_with_backlog_and_err+0xd8>
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8016c7e:	68f8      	ldr	r0, [r7, #12]
 8016c80:	f7ff fbc0 	bl	8016404 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8016c84:	69fb      	ldr	r3, [r7, #28]
 8016c86:	4a11      	ldr	r2, [pc, #68]	; (8016ccc <tcp_listen_with_backlog_and_err+0x14c>)
 8016c88:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8016c8a:	4b11      	ldr	r3, [pc, #68]	; (8016cd0 <tcp_listen_with_backlog_and_err+0x150>)
 8016c8c:	681a      	ldr	r2, [r3, #0]
 8016c8e:	69fb      	ldr	r3, [r7, #28]
 8016c90:	60da      	str	r2, [r3, #12]
 8016c92:	4a0f      	ldr	r2, [pc, #60]	; (8016cd0 <tcp_listen_with_backlog_and_err+0x150>)
 8016c94:	69fb      	ldr	r3, [r7, #28]
 8016c96:	6013      	str	r3, [r2, #0]
 8016c98:	f005 fbf8 	bl	801c48c <tcp_timer_needed>
  res = ERR_OK;
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d002      	beq.n	8016cac <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	7efa      	ldrb	r2, [r7, #27]
 8016caa:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8016cac:	69fb      	ldr	r3, [r7, #28]
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	3720      	adds	r7, #32
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bd80      	pop	{r7, pc}
 8016cb6:	bf00      	nop
 8016cb8:	080223a4 	.word	0x080223a4
 8016cbc:	08022598 	.word	0x08022598
 8016cc0:	080223e8 	.word	0x080223e8
 8016cc4:	080225c8 	.word	0x080225c8
 8016cc8:	20014bc0 	.word	0x20014bc0
 8016ccc:	08016b1d 	.word	0x08016b1d
 8016cd0:	20014bbc 	.word	0x20014bbc

08016cd4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b084      	sub	sp, #16
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d106      	bne.n	8016cf0 <tcp_update_rcv_ann_wnd+0x1c>
 8016ce2:	4b25      	ldr	r3, [pc, #148]	; (8016d78 <tcp_update_rcv_ann_wnd+0xa4>)
 8016ce4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8016ce8:	4924      	ldr	r1, [pc, #144]	; (8016d7c <tcp_update_rcv_ann_wnd+0xa8>)
 8016cea:	4825      	ldr	r0, [pc, #148]	; (8016d80 <tcp_update_rcv_ann_wnd+0xac>)
 8016cec:	f008 fb3e 	bl	801f36c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cf4:	687a      	ldr	r2, [r7, #4]
 8016cf6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8016cf8:	4413      	add	r3, r2
 8016cfa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d00:	687a      	ldr	r2, [r7, #4]
 8016d02:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8016d04:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016d08:	bf28      	it	cs
 8016d0a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016d0e:	b292      	uxth	r2, r2
 8016d10:	4413      	add	r3, r2
 8016d12:	68fa      	ldr	r2, [r7, #12]
 8016d14:	1ad3      	subs	r3, r2, r3
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	db08      	blt.n	8016d2c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d26:	68fa      	ldr	r2, [r7, #12]
 8016d28:	1ad3      	subs	r3, r2, r3
 8016d2a:	e020      	b.n	8016d6e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d34:	1ad3      	subs	r3, r2, r3
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	dd03      	ble.n	8016d42 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016d40:	e014      	b.n	8016d6c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d4a:	1ad3      	subs	r3, r2, r3
 8016d4c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016d4e:	68bb      	ldr	r3, [r7, #8]
 8016d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016d54:	d306      	bcc.n	8016d64 <tcp_update_rcv_ann_wnd+0x90>
 8016d56:	4b08      	ldr	r3, [pc, #32]	; (8016d78 <tcp_update_rcv_ann_wnd+0xa4>)
 8016d58:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016d5c:	4909      	ldr	r1, [pc, #36]	; (8016d84 <tcp_update_rcv_ann_wnd+0xb0>)
 8016d5e:	4808      	ldr	r0, [pc, #32]	; (8016d80 <tcp_update_rcv_ann_wnd+0xac>)
 8016d60:	f008 fb04 	bl	801f36c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016d64:	68bb      	ldr	r3, [r7, #8]
 8016d66:	b29a      	uxth	r2, r3
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016d6c:	2300      	movs	r3, #0
  }
}
 8016d6e:	4618      	mov	r0, r3
 8016d70:	3710      	adds	r7, #16
 8016d72:	46bd      	mov	sp, r7
 8016d74:	bd80      	pop	{r7, pc}
 8016d76:	bf00      	nop
 8016d78:	080223a4 	.word	0x080223a4
 8016d7c:	08022600 	.word	0x08022600
 8016d80:	080223e8 	.word	0x080223e8
 8016d84:	08022624 	.word	0x08022624

08016d88 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	b084      	sub	sp, #16
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
 8016d90:	460b      	mov	r3, r1
 8016d92:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d107      	bne.n	8016daa <tcp_recved+0x22>
 8016d9a:	4b1f      	ldr	r3, [pc, #124]	; (8016e18 <tcp_recved+0x90>)
 8016d9c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016da0:	491e      	ldr	r1, [pc, #120]	; (8016e1c <tcp_recved+0x94>)
 8016da2:	481f      	ldr	r0, [pc, #124]	; (8016e20 <tcp_recved+0x98>)
 8016da4:	f008 fae2 	bl	801f36c <iprintf>
 8016da8:	e032      	b.n	8016e10 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	7d1b      	ldrb	r3, [r3, #20]
 8016dae:	2b01      	cmp	r3, #1
 8016db0:	d106      	bne.n	8016dc0 <tcp_recved+0x38>
 8016db2:	4b19      	ldr	r3, [pc, #100]	; (8016e18 <tcp_recved+0x90>)
 8016db4:	f240 32d2 	movw	r2, #978	; 0x3d2
 8016db8:	491a      	ldr	r1, [pc, #104]	; (8016e24 <tcp_recved+0x9c>)
 8016dba:	4819      	ldr	r0, [pc, #100]	; (8016e20 <tcp_recved+0x98>)
 8016dbc:	f008 fad6 	bl	801f36c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016dc4:	887b      	ldrh	r3, [r7, #2]
 8016dc6:	4413      	add	r3, r2
 8016dc8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016dca:	89fb      	ldrh	r3, [r7, #14]
 8016dcc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016dd0:	d804      	bhi.n	8016ddc <tcp_recved+0x54>
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016dd6:	89fa      	ldrh	r2, [r7, #14]
 8016dd8:	429a      	cmp	r2, r3
 8016dda:	d204      	bcs.n	8016de6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016de2:	851a      	strh	r2, [r3, #40]	; 0x28
 8016de4:	e002      	b.n	8016dec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	89fa      	ldrh	r2, [r7, #14]
 8016dea:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016dec:	6878      	ldr	r0, [r7, #4]
 8016dee:	f7ff ff71 	bl	8016cd4 <tcp_update_rcv_ann_wnd>
 8016df2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016dfa:	d309      	bcc.n	8016e10 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	8b5b      	ldrh	r3, [r3, #26]
 8016e00:	f043 0302 	orr.w	r3, r3, #2
 8016e04:	b29a      	uxth	r2, r3
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016e0a:	6878      	ldr	r0, [r7, #4]
 8016e0c:	f004 fbc8 	bl	801b5a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016e10:	3710      	adds	r7, #16
 8016e12:	46bd      	mov	sp, r7
 8016e14:	bd80      	pop	{r7, pc}
 8016e16:	bf00      	nop
 8016e18:	080223a4 	.word	0x080223a4
 8016e1c:	08022640 	.word	0x08022640
 8016e20:	080223e8 	.word	0x080223e8
 8016e24:	08022658 	.word	0x08022658

08016e28 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016e28:	b480      	push	{r7}
 8016e2a:	b083      	sub	sp, #12
 8016e2c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016e2e:	2300      	movs	r3, #0
 8016e30:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8016e32:	4b1e      	ldr	r3, [pc, #120]	; (8016eac <tcp_new_port+0x84>)
 8016e34:	881b      	ldrh	r3, [r3, #0]
 8016e36:	3301      	adds	r3, #1
 8016e38:	b29a      	uxth	r2, r3
 8016e3a:	4b1c      	ldr	r3, [pc, #112]	; (8016eac <tcp_new_port+0x84>)
 8016e3c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016e3e:	4b1b      	ldr	r3, [pc, #108]	; (8016eac <tcp_new_port+0x84>)
 8016e40:	881b      	ldrh	r3, [r3, #0]
 8016e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e46:	4293      	cmp	r3, r2
 8016e48:	d103      	bne.n	8016e52 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016e4a:	4b18      	ldr	r3, [pc, #96]	; (8016eac <tcp_new_port+0x84>)
 8016e4c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016e50:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016e52:	2300      	movs	r3, #0
 8016e54:	71fb      	strb	r3, [r7, #7]
 8016e56:	e01e      	b.n	8016e96 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016e58:	79fb      	ldrb	r3, [r7, #7]
 8016e5a:	4a15      	ldr	r2, [pc, #84]	; (8016eb0 <tcp_new_port+0x88>)
 8016e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	603b      	str	r3, [r7, #0]
 8016e64:	e011      	b.n	8016e8a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8016e66:	683b      	ldr	r3, [r7, #0]
 8016e68:	8ada      	ldrh	r2, [r3, #22]
 8016e6a:	4b10      	ldr	r3, [pc, #64]	; (8016eac <tcp_new_port+0x84>)
 8016e6c:	881b      	ldrh	r3, [r3, #0]
 8016e6e:	429a      	cmp	r2, r3
 8016e70:	d108      	bne.n	8016e84 <tcp_new_port+0x5c>
        n++;
 8016e72:	88bb      	ldrh	r3, [r7, #4]
 8016e74:	3301      	adds	r3, #1
 8016e76:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016e78:	88bb      	ldrh	r3, [r7, #4]
 8016e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016e7e:	d3d8      	bcc.n	8016e32 <tcp_new_port+0xa>
          return 0;
 8016e80:	2300      	movs	r3, #0
 8016e82:	e00d      	b.n	8016ea0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016e84:	683b      	ldr	r3, [r7, #0]
 8016e86:	68db      	ldr	r3, [r3, #12]
 8016e88:	603b      	str	r3, [r7, #0]
 8016e8a:	683b      	ldr	r3, [r7, #0]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d1ea      	bne.n	8016e66 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016e90:	79fb      	ldrb	r3, [r7, #7]
 8016e92:	3301      	adds	r3, #1
 8016e94:	71fb      	strb	r3, [r7, #7]
 8016e96:	79fb      	ldrb	r3, [r7, #7]
 8016e98:	2b03      	cmp	r3, #3
 8016e9a:	d9dd      	bls.n	8016e58 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016e9c:	4b03      	ldr	r3, [pc, #12]	; (8016eac <tcp_new_port+0x84>)
 8016e9e:	881b      	ldrh	r3, [r3, #0]
}
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	370c      	adds	r7, #12
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eaa:	4770      	bx	lr
 8016eac:	20000036 	.word	0x20000036
 8016eb0:	0807b0d0 	.word	0x0807b0d0

08016eb4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016eb4:	b5b0      	push	{r4, r5, r7, lr}
 8016eb6:	b090      	sub	sp, #64	; 0x40
 8016eb8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016eba:	2300      	movs	r3, #0
 8016ebc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8016ec0:	4b94      	ldr	r3, [pc, #592]	; (8017114 <tcp_slowtmr+0x260>)
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	3301      	adds	r3, #1
 8016ec6:	4a93      	ldr	r2, [pc, #588]	; (8017114 <tcp_slowtmr+0x260>)
 8016ec8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016eca:	4b93      	ldr	r3, [pc, #588]	; (8017118 <tcp_slowtmr+0x264>)
 8016ecc:	781b      	ldrb	r3, [r3, #0]
 8016ece:	3301      	adds	r3, #1
 8016ed0:	b2da      	uxtb	r2, r3
 8016ed2:	4b91      	ldr	r3, [pc, #580]	; (8017118 <tcp_slowtmr+0x264>)
 8016ed4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8016eda:	4b90      	ldr	r3, [pc, #576]	; (801711c <tcp_slowtmr+0x268>)
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8016ee0:	e29f      	b.n	8017422 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ee4:	7d1b      	ldrb	r3, [r3, #20]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d106      	bne.n	8016ef8 <tcp_slowtmr+0x44>
 8016eea:	4b8d      	ldr	r3, [pc, #564]	; (8017120 <tcp_slowtmr+0x26c>)
 8016eec:	f240 42be 	movw	r2, #1214	; 0x4be
 8016ef0:	498c      	ldr	r1, [pc, #560]	; (8017124 <tcp_slowtmr+0x270>)
 8016ef2:	488d      	ldr	r0, [pc, #564]	; (8017128 <tcp_slowtmr+0x274>)
 8016ef4:	f008 fa3a 	bl	801f36c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016efa:	7d1b      	ldrb	r3, [r3, #20]
 8016efc:	2b01      	cmp	r3, #1
 8016efe:	d106      	bne.n	8016f0e <tcp_slowtmr+0x5a>
 8016f00:	4b87      	ldr	r3, [pc, #540]	; (8017120 <tcp_slowtmr+0x26c>)
 8016f02:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8016f06:	4989      	ldr	r1, [pc, #548]	; (801712c <tcp_slowtmr+0x278>)
 8016f08:	4887      	ldr	r0, [pc, #540]	; (8017128 <tcp_slowtmr+0x274>)
 8016f0a:	f008 fa2f 	bl	801f36c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f10:	7d1b      	ldrb	r3, [r3, #20]
 8016f12:	2b0a      	cmp	r3, #10
 8016f14:	d106      	bne.n	8016f24 <tcp_slowtmr+0x70>
 8016f16:	4b82      	ldr	r3, [pc, #520]	; (8017120 <tcp_slowtmr+0x26c>)
 8016f18:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016f1c:	4984      	ldr	r1, [pc, #528]	; (8017130 <tcp_slowtmr+0x27c>)
 8016f1e:	4882      	ldr	r0, [pc, #520]	; (8017128 <tcp_slowtmr+0x274>)
 8016f20:	f008 fa24 	bl	801f36c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f26:	7f9a      	ldrb	r2, [r3, #30]
 8016f28:	4b7b      	ldr	r3, [pc, #492]	; (8017118 <tcp_slowtmr+0x264>)
 8016f2a:	781b      	ldrb	r3, [r3, #0]
 8016f2c:	429a      	cmp	r2, r3
 8016f2e:	d105      	bne.n	8016f3c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8016f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f32:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f36:	68db      	ldr	r3, [r3, #12]
 8016f38:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8016f3a:	e272      	b.n	8017422 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016f3c:	4b76      	ldr	r3, [pc, #472]	; (8017118 <tcp_slowtmr+0x264>)
 8016f3e:	781a      	ldrb	r2, [r3, #0]
 8016f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f42:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8016f44:	2300      	movs	r3, #0
 8016f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f52:	7d1b      	ldrb	r3, [r3, #20]
 8016f54:	2b02      	cmp	r3, #2
 8016f56:	d10a      	bne.n	8016f6e <tcp_slowtmr+0xba>
 8016f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016f5e:	2b05      	cmp	r3, #5
 8016f60:	d905      	bls.n	8016f6e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8016f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f66:	3301      	adds	r3, #1
 8016f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016f6c:	e11e      	b.n	80171ac <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016f74:	2b0b      	cmp	r3, #11
 8016f76:	d905      	bls.n	8016f84 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8016f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f7c:	3301      	adds	r3, #1
 8016f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016f82:	e113      	b.n	80171ac <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8016f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d075      	beq.n	801707a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8016f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d006      	beq.n	8016fa4 <tcp_slowtmr+0xf0>
 8016f96:	4b62      	ldr	r3, [pc, #392]	; (8017120 <tcp_slowtmr+0x26c>)
 8016f98:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8016f9c:	4965      	ldr	r1, [pc, #404]	; (8017134 <tcp_slowtmr+0x280>)
 8016f9e:	4862      	ldr	r0, [pc, #392]	; (8017128 <tcp_slowtmr+0x274>)
 8016fa0:	f008 f9e4 	bl	801f36c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8016fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d106      	bne.n	8016fba <tcp_slowtmr+0x106>
 8016fac:	4b5c      	ldr	r3, [pc, #368]	; (8017120 <tcp_slowtmr+0x26c>)
 8016fae:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8016fb2:	4961      	ldr	r1, [pc, #388]	; (8017138 <tcp_slowtmr+0x284>)
 8016fb4:	485c      	ldr	r0, [pc, #368]	; (8017128 <tcp_slowtmr+0x274>)
 8016fb6:	f008 f9d9 	bl	801f36c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8016fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fbc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016fc0:	2b0b      	cmp	r3, #11
 8016fc2:	d905      	bls.n	8016fd0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8016fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fc8:	3301      	adds	r3, #1
 8016fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016fce:	e0ed      	b.n	80171ac <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8016fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fd2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016fd6:	3b01      	subs	r3, #1
 8016fd8:	4a58      	ldr	r2, [pc, #352]	; (801713c <tcp_slowtmr+0x288>)
 8016fda:	5cd3      	ldrb	r3, [r2, r3]
 8016fdc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8016fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016fe4:	7c7a      	ldrb	r2, [r7, #17]
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d907      	bls.n	8016ffa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8016fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016ff0:	3301      	adds	r3, #1
 8016ff2:	b2da      	uxtb	r2, r3
 8016ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ff6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8016ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ffc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017000:	7c7a      	ldrb	r2, [r7, #17]
 8017002:	429a      	cmp	r2, r3
 8017004:	f200 80d2 	bhi.w	80171ac <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8017008:	2301      	movs	r3, #1
 801700a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801700e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017012:	2b00      	cmp	r3, #0
 8017014:	d108      	bne.n	8017028 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8017016:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017018:	f005 f96a 	bl	801c2f0 <tcp_zero_window_probe>
 801701c:	4603      	mov	r3, r0
 801701e:	2b00      	cmp	r3, #0
 8017020:	d014      	beq.n	801704c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8017022:	2300      	movs	r3, #0
 8017024:	623b      	str	r3, [r7, #32]
 8017026:	e011      	b.n	801704c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8017028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801702a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801702e:	4619      	mov	r1, r3
 8017030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017032:	f004 f82f 	bl	801b094 <tcp_split_unsent_seg>
 8017036:	4603      	mov	r3, r0
 8017038:	2b00      	cmp	r3, #0
 801703a:	d107      	bne.n	801704c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801703c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801703e:	f004 faaf 	bl	801b5a0 <tcp_output>
 8017042:	4603      	mov	r3, r0
 8017044:	2b00      	cmp	r3, #0
 8017046:	d101      	bne.n	801704c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8017048:	2300      	movs	r3, #0
 801704a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801704c:	6a3b      	ldr	r3, [r7, #32]
 801704e:	2b00      	cmp	r3, #0
 8017050:	f000 80ac 	beq.w	80171ac <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8017054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017056:	2200      	movs	r2, #0
 8017058:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801705e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017062:	2b06      	cmp	r3, #6
 8017064:	f200 80a2 	bhi.w	80171ac <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8017068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801706a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801706e:	3301      	adds	r3, #1
 8017070:	b2da      	uxtb	r2, r3
 8017072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017074:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8017078:	e098      	b.n	80171ac <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801707c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017080:	2b00      	cmp	r3, #0
 8017082:	db0f      	blt.n	80170a4 <tcp_slowtmr+0x1f0>
 8017084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017086:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801708a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801708e:	4293      	cmp	r3, r2
 8017090:	d008      	beq.n	80170a4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8017092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017094:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017098:	b29b      	uxth	r3, r3
 801709a:	3301      	adds	r3, #1
 801709c:	b29b      	uxth	r3, r3
 801709e:	b21a      	sxth	r2, r3
 80170a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170a2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80170a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170a6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80170aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ac:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80170b0:	429a      	cmp	r2, r3
 80170b2:	db7b      	blt.n	80171ac <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80170b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80170b6:	f004 fd65 	bl	801bb84 <tcp_rexmit_rto_prepare>
 80170ba:	4603      	mov	r3, r0
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d007      	beq.n	80170d0 <tcp_slowtmr+0x21c>
 80170c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d171      	bne.n	80171ac <tcp_slowtmr+0x2f8>
 80170c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d06d      	beq.n	80171ac <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80170d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d2:	7d1b      	ldrb	r3, [r3, #20]
 80170d4:	2b02      	cmp	r3, #2
 80170d6:	d03a      	beq.n	801714e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80170d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80170de:	2b0c      	cmp	r3, #12
 80170e0:	bf28      	it	cs
 80170e2:	230c      	movcs	r3, #12
 80170e4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80170e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80170ec:	10db      	asrs	r3, r3, #3
 80170ee:	b21b      	sxth	r3, r3
 80170f0:	461a      	mov	r2, r3
 80170f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80170f8:	4413      	add	r3, r2
 80170fa:	7efa      	ldrb	r2, [r7, #27]
 80170fc:	4910      	ldr	r1, [pc, #64]	; (8017140 <tcp_slowtmr+0x28c>)
 80170fe:	5c8a      	ldrb	r2, [r1, r2]
 8017100:	4093      	lsls	r3, r2
 8017102:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801710a:	4293      	cmp	r3, r2
 801710c:	dc1a      	bgt.n	8017144 <tcp_slowtmr+0x290>
 801710e:	697b      	ldr	r3, [r7, #20]
 8017110:	b21a      	sxth	r2, r3
 8017112:	e019      	b.n	8017148 <tcp_slowtmr+0x294>
 8017114:	20014bb8 	.word	0x20014bb8
 8017118:	2000c7fa 	.word	0x2000c7fa
 801711c:	20014bb4 	.word	0x20014bb4
 8017120:	080223a4 	.word	0x080223a4
 8017124:	080226e8 	.word	0x080226e8
 8017128:	080223e8 	.word	0x080223e8
 801712c:	08022714 	.word	0x08022714
 8017130:	08022740 	.word	0x08022740
 8017134:	08022770 	.word	0x08022770
 8017138:	080227a4 	.word	0x080227a4
 801713c:	0807b0c8 	.word	0x0807b0c8
 8017140:	0807b0b8 	.word	0x0807b0b8
 8017144:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801714a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017150:	2200      	movs	r2, #0
 8017152:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8017154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017156:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801715a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801715c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017160:	4293      	cmp	r3, r2
 8017162:	bf28      	it	cs
 8017164:	4613      	movcs	r3, r2
 8017166:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8017168:	8a7b      	ldrh	r3, [r7, #18]
 801716a:	085b      	lsrs	r3, r3, #1
 801716c:	b29a      	uxth	r2, r3
 801716e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017170:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017176:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801717c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801717e:	005b      	lsls	r3, r3, #1
 8017180:	b29b      	uxth	r3, r3
 8017182:	429a      	cmp	r2, r3
 8017184:	d206      	bcs.n	8017194 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8017186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801718a:	005b      	lsls	r3, r3, #1
 801718c:	b29a      	uxth	r2, r3
 801718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017190:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8017194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017196:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8017198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801719a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171a0:	2200      	movs	r2, #0
 80171a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80171a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171a8:	f004 fd5c 	bl	801bc64 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80171ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ae:	7d1b      	ldrb	r3, [r3, #20]
 80171b0:	2b06      	cmp	r3, #6
 80171b2:	d111      	bne.n	80171d8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80171b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171b6:	8b5b      	ldrh	r3, [r3, #26]
 80171b8:	f003 0310 	and.w	r3, r3, #16
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d00b      	beq.n	80171d8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80171c0:	4b9d      	ldr	r3, [pc, #628]	; (8017438 <tcp_slowtmr+0x584>)
 80171c2:	681a      	ldr	r2, [r3, #0]
 80171c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171c6:	6a1b      	ldr	r3, [r3, #32]
 80171c8:	1ad3      	subs	r3, r2, r3
 80171ca:	2b28      	cmp	r3, #40	; 0x28
 80171cc:	d904      	bls.n	80171d8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80171ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171d2:	3301      	adds	r3, #1
 80171d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80171d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171da:	7a5b      	ldrb	r3, [r3, #9]
 80171dc:	f003 0308 	and.w	r3, r3, #8
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d04c      	beq.n	801727e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80171e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171e6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80171e8:	2b04      	cmp	r3, #4
 80171ea:	d003      	beq.n	80171f4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80171ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ee:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80171f0:	2b07      	cmp	r3, #7
 80171f2:	d144      	bne.n	801727e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80171f4:	4b90      	ldr	r3, [pc, #576]	; (8017438 <tcp_slowtmr+0x584>)
 80171f6:	681a      	ldr	r2, [r3, #0]
 80171f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171fa:	6a1b      	ldr	r3, [r3, #32]
 80171fc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80171fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017204:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8017208:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801720c:	498b      	ldr	r1, [pc, #556]	; (801743c <tcp_slowtmr+0x588>)
 801720e:	fba1 1303 	umull	r1, r3, r1, r3
 8017212:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017214:	429a      	cmp	r2, r3
 8017216:	d90a      	bls.n	801722e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8017218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801721c:	3301      	adds	r3, #1
 801721e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8017222:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017226:	3301      	adds	r3, #1
 8017228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801722c:	e027      	b.n	801727e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801722e:	4b82      	ldr	r3, [pc, #520]	; (8017438 <tcp_slowtmr+0x584>)
 8017230:	681a      	ldr	r2, [r3, #0]
 8017232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017234:	6a1b      	ldr	r3, [r3, #32]
 8017236:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8017238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801723a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017240:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017244:	4618      	mov	r0, r3
 8017246:	4b7e      	ldr	r3, [pc, #504]	; (8017440 <tcp_slowtmr+0x58c>)
 8017248:	fb03 f300 	mul.w	r3, r3, r0
 801724c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801724e:	497b      	ldr	r1, [pc, #492]	; (801743c <tcp_slowtmr+0x588>)
 8017250:	fba1 1303 	umull	r1, r3, r1, r3
 8017254:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017256:	429a      	cmp	r2, r3
 8017258:	d911      	bls.n	801727e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801725a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801725c:	f005 f808 	bl	801c270 <tcp_keepalive>
 8017260:	4603      	mov	r3, r0
 8017262:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8017266:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801726a:	2b00      	cmp	r3, #0
 801726c:	d107      	bne.n	801727e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017270:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017274:	3301      	adds	r3, #1
 8017276:	b2da      	uxtb	r2, r3
 8017278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801727a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017282:	2b00      	cmp	r3, #0
 8017284:	d011      	beq.n	80172aa <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8017286:	4b6c      	ldr	r3, [pc, #432]	; (8017438 <tcp_slowtmr+0x584>)
 8017288:	681a      	ldr	r2, [r3, #0]
 801728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801728c:	6a1b      	ldr	r3, [r3, #32]
 801728e:	1ad2      	subs	r2, r2, r3
 8017290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017292:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017296:	4619      	mov	r1, r3
 8017298:	460b      	mov	r3, r1
 801729a:	005b      	lsls	r3, r3, #1
 801729c:	440b      	add	r3, r1
 801729e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d302      	bcc.n	80172aa <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80172a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80172a6:	f000 fec7 	bl	8018038 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80172aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ac:	7d1b      	ldrb	r3, [r3, #20]
 80172ae:	2b03      	cmp	r3, #3
 80172b0:	d10b      	bne.n	80172ca <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80172b2:	4b61      	ldr	r3, [pc, #388]	; (8017438 <tcp_slowtmr+0x584>)
 80172b4:	681a      	ldr	r2, [r3, #0]
 80172b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172b8:	6a1b      	ldr	r3, [r3, #32]
 80172ba:	1ad3      	subs	r3, r2, r3
 80172bc:	2b28      	cmp	r3, #40	; 0x28
 80172be:	d904      	bls.n	80172ca <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80172c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172c4:	3301      	adds	r3, #1
 80172c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80172ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172cc:	7d1b      	ldrb	r3, [r3, #20]
 80172ce:	2b09      	cmp	r3, #9
 80172d0:	d10b      	bne.n	80172ea <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80172d2:	4b59      	ldr	r3, [pc, #356]	; (8017438 <tcp_slowtmr+0x584>)
 80172d4:	681a      	ldr	r2, [r3, #0]
 80172d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172d8:	6a1b      	ldr	r3, [r3, #32]
 80172da:	1ad3      	subs	r3, r2, r3
 80172dc:	2bf0      	cmp	r3, #240	; 0xf0
 80172de:	d904      	bls.n	80172ea <tcp_slowtmr+0x436>
        ++pcb_remove;
 80172e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172e4:	3301      	adds	r3, #1
 80172e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80172ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d060      	beq.n	80173b4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80172f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80172f8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80172fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80172fc:	f000 fce8 	bl	8017cd0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8017300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017302:	2b00      	cmp	r3, #0
 8017304:	d010      	beq.n	8017328 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8017306:	4b4f      	ldr	r3, [pc, #316]	; (8017444 <tcp_slowtmr+0x590>)
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801730c:	429a      	cmp	r2, r3
 801730e:	d106      	bne.n	801731e <tcp_slowtmr+0x46a>
 8017310:	4b4d      	ldr	r3, [pc, #308]	; (8017448 <tcp_slowtmr+0x594>)
 8017312:	f240 526d 	movw	r2, #1389	; 0x56d
 8017316:	494d      	ldr	r1, [pc, #308]	; (801744c <tcp_slowtmr+0x598>)
 8017318:	484d      	ldr	r0, [pc, #308]	; (8017450 <tcp_slowtmr+0x59c>)
 801731a:	f008 f827 	bl	801f36c <iprintf>
        prev->next = pcb->next;
 801731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017320:	68da      	ldr	r2, [r3, #12]
 8017322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017324:	60da      	str	r2, [r3, #12]
 8017326:	e00f      	b.n	8017348 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8017328:	4b46      	ldr	r3, [pc, #280]	; (8017444 <tcp_slowtmr+0x590>)
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801732e:	429a      	cmp	r2, r3
 8017330:	d006      	beq.n	8017340 <tcp_slowtmr+0x48c>
 8017332:	4b45      	ldr	r3, [pc, #276]	; (8017448 <tcp_slowtmr+0x594>)
 8017334:	f240 5271 	movw	r2, #1393	; 0x571
 8017338:	4946      	ldr	r1, [pc, #280]	; (8017454 <tcp_slowtmr+0x5a0>)
 801733a:	4845      	ldr	r0, [pc, #276]	; (8017450 <tcp_slowtmr+0x59c>)
 801733c:	f008 f816 	bl	801f36c <iprintf>
        tcp_active_pcbs = pcb->next;
 8017340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017342:	68db      	ldr	r3, [r3, #12]
 8017344:	4a3f      	ldr	r2, [pc, #252]	; (8017444 <tcp_slowtmr+0x590>)
 8017346:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8017348:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801734c:	2b00      	cmp	r3, #0
 801734e:	d013      	beq.n	8017378 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017352:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8017354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017356:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017358:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801735c:	3304      	adds	r3, #4
 801735e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017360:	8ad2      	ldrh	r2, [r2, #22]
 8017362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017364:	8b09      	ldrh	r1, [r1, #24]
 8017366:	9102      	str	r1, [sp, #8]
 8017368:	9201      	str	r2, [sp, #4]
 801736a:	9300      	str	r3, [sp, #0]
 801736c:	462b      	mov	r3, r5
 801736e:	4622      	mov	r2, r4
 8017370:	4601      	mov	r1, r0
 8017372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017374:	f004 fec8 	bl	801c108 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8017378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801737a:	691b      	ldr	r3, [r3, #16]
 801737c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801737e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017380:	7d1b      	ldrb	r3, [r3, #20]
 8017382:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8017384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017386:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8017388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801738a:	68db      	ldr	r3, [r3, #12]
 801738c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801738e:	6838      	ldr	r0, [r7, #0]
 8017390:	f7ff f838 	bl	8016404 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8017394:	4b30      	ldr	r3, [pc, #192]	; (8017458 <tcp_slowtmr+0x5a4>)
 8017396:	2200      	movs	r2, #0
 8017398:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d004      	beq.n	80173aa <tcp_slowtmr+0x4f6>
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	f06f 010c 	mvn.w	r1, #12
 80173a6:	68b8      	ldr	r0, [r7, #8]
 80173a8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80173aa:	4b2b      	ldr	r3, [pc, #172]	; (8017458 <tcp_slowtmr+0x5a4>)
 80173ac:	781b      	ldrb	r3, [r3, #0]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d037      	beq.n	8017422 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80173b2:	e590      	b.n	8016ed6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80173b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80173b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ba:	68db      	ldr	r3, [r3, #12]
 80173bc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80173be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173c0:	7f1b      	ldrb	r3, [r3, #28]
 80173c2:	3301      	adds	r3, #1
 80173c4:	b2da      	uxtb	r2, r3
 80173c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173c8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80173ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173cc:	7f1a      	ldrb	r2, [r3, #28]
 80173ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d0:	7f5b      	ldrb	r3, [r3, #29]
 80173d2:	429a      	cmp	r2, r3
 80173d4:	d325      	bcc.n	8017422 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80173d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d8:	2200      	movs	r2, #0
 80173da:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80173dc:	4b1e      	ldr	r3, [pc, #120]	; (8017458 <tcp_slowtmr+0x5a4>)
 80173de:	2200      	movs	r2, #0
 80173e0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80173e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d00b      	beq.n	8017404 <tcp_slowtmr+0x550>
 80173ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80173f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80173f4:	6912      	ldr	r2, [r2, #16]
 80173f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80173f8:	4610      	mov	r0, r2
 80173fa:	4798      	blx	r3
 80173fc:	4603      	mov	r3, r0
 80173fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8017402:	e002      	b.n	801740a <tcp_slowtmr+0x556>
 8017404:	2300      	movs	r3, #0
 8017406:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801740a:	4b13      	ldr	r3, [pc, #76]	; (8017458 <tcp_slowtmr+0x5a4>)
 801740c:	781b      	ldrb	r3, [r3, #0]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d000      	beq.n	8017414 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8017412:	e560      	b.n	8016ed6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8017414:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017418:	2b00      	cmp	r3, #0
 801741a:	d102      	bne.n	8017422 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801741c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801741e:	f004 f8bf 	bl	801b5a0 <tcp_output>
  while (pcb != NULL) {
 8017422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017424:	2b00      	cmp	r3, #0
 8017426:	f47f ad5c 	bne.w	8016ee2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801742a:	2300      	movs	r3, #0
 801742c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801742e:	4b0b      	ldr	r3, [pc, #44]	; (801745c <tcp_slowtmr+0x5a8>)
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017434:	e067      	b.n	8017506 <tcp_slowtmr+0x652>
 8017436:	bf00      	nop
 8017438:	20014bb8 	.word	0x20014bb8
 801743c:	10624dd3 	.word	0x10624dd3
 8017440:	000124f8 	.word	0x000124f8
 8017444:	20014bb4 	.word	0x20014bb4
 8017448:	080223a4 	.word	0x080223a4
 801744c:	080227dc 	.word	0x080227dc
 8017450:	080223e8 	.word	0x080223e8
 8017454:	08022808 	.word	0x08022808
 8017458:	20014bb0 	.word	0x20014bb0
 801745c:	20014bc4 	.word	0x20014bc4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017462:	7d1b      	ldrb	r3, [r3, #20]
 8017464:	2b0a      	cmp	r3, #10
 8017466:	d006      	beq.n	8017476 <tcp_slowtmr+0x5c2>
 8017468:	4b2b      	ldr	r3, [pc, #172]	; (8017518 <tcp_slowtmr+0x664>)
 801746a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801746e:	492b      	ldr	r1, [pc, #172]	; (801751c <tcp_slowtmr+0x668>)
 8017470:	482b      	ldr	r0, [pc, #172]	; (8017520 <tcp_slowtmr+0x66c>)
 8017472:	f007 ff7b 	bl	801f36c <iprintf>
    pcb_remove = 0;
 8017476:	2300      	movs	r3, #0
 8017478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801747c:	4b29      	ldr	r3, [pc, #164]	; (8017524 <tcp_slowtmr+0x670>)
 801747e:	681a      	ldr	r2, [r3, #0]
 8017480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017482:	6a1b      	ldr	r3, [r3, #32]
 8017484:	1ad3      	subs	r3, r2, r3
 8017486:	2bf0      	cmp	r3, #240	; 0xf0
 8017488:	d904      	bls.n	8017494 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801748a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801748e:	3301      	adds	r3, #1
 8017490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017498:	2b00      	cmp	r3, #0
 801749a:	d02f      	beq.n	80174fc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801749c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801749e:	f000 fc17 	bl	8017cd0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80174a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d010      	beq.n	80174ca <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80174a8:	4b1f      	ldr	r3, [pc, #124]	; (8017528 <tcp_slowtmr+0x674>)
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174ae:	429a      	cmp	r2, r3
 80174b0:	d106      	bne.n	80174c0 <tcp_slowtmr+0x60c>
 80174b2:	4b19      	ldr	r3, [pc, #100]	; (8017518 <tcp_slowtmr+0x664>)
 80174b4:	f240 52af 	movw	r2, #1455	; 0x5af
 80174b8:	491c      	ldr	r1, [pc, #112]	; (801752c <tcp_slowtmr+0x678>)
 80174ba:	4819      	ldr	r0, [pc, #100]	; (8017520 <tcp_slowtmr+0x66c>)
 80174bc:	f007 ff56 	bl	801f36c <iprintf>
        prev->next = pcb->next;
 80174c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174c2:	68da      	ldr	r2, [r3, #12]
 80174c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c6:	60da      	str	r2, [r3, #12]
 80174c8:	e00f      	b.n	80174ea <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80174ca:	4b17      	ldr	r3, [pc, #92]	; (8017528 <tcp_slowtmr+0x674>)
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174d0:	429a      	cmp	r2, r3
 80174d2:	d006      	beq.n	80174e2 <tcp_slowtmr+0x62e>
 80174d4:	4b10      	ldr	r3, [pc, #64]	; (8017518 <tcp_slowtmr+0x664>)
 80174d6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80174da:	4915      	ldr	r1, [pc, #84]	; (8017530 <tcp_slowtmr+0x67c>)
 80174dc:	4810      	ldr	r0, [pc, #64]	; (8017520 <tcp_slowtmr+0x66c>)
 80174de:	f007 ff45 	bl	801f36c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80174e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e4:	68db      	ldr	r3, [r3, #12]
 80174e6:	4a10      	ldr	r2, [pc, #64]	; (8017528 <tcp_slowtmr+0x674>)
 80174e8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80174ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ec:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80174ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f0:	68db      	ldr	r3, [r3, #12]
 80174f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80174f4:	69f8      	ldr	r0, [r7, #28]
 80174f6:	f7fe ff85 	bl	8016404 <tcp_free>
 80174fa:	e004      	b.n	8017506 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80174fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017502:	68db      	ldr	r3, [r3, #12]
 8017504:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017508:	2b00      	cmp	r3, #0
 801750a:	d1a9      	bne.n	8017460 <tcp_slowtmr+0x5ac>
    }
  }
}
 801750c:	bf00      	nop
 801750e:	bf00      	nop
 8017510:	3730      	adds	r7, #48	; 0x30
 8017512:	46bd      	mov	sp, r7
 8017514:	bdb0      	pop	{r4, r5, r7, pc}
 8017516:	bf00      	nop
 8017518:	080223a4 	.word	0x080223a4
 801751c:	08022834 	.word	0x08022834
 8017520:	080223e8 	.word	0x080223e8
 8017524:	20014bb8 	.word	0x20014bb8
 8017528:	20014bc4 	.word	0x20014bc4
 801752c:	08022864 	.word	0x08022864
 8017530:	0802288c 	.word	0x0802288c

08017534 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b082      	sub	sp, #8
 8017538:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801753a:	4b2d      	ldr	r3, [pc, #180]	; (80175f0 <tcp_fasttmr+0xbc>)
 801753c:	781b      	ldrb	r3, [r3, #0]
 801753e:	3301      	adds	r3, #1
 8017540:	b2da      	uxtb	r2, r3
 8017542:	4b2b      	ldr	r3, [pc, #172]	; (80175f0 <tcp_fasttmr+0xbc>)
 8017544:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8017546:	4b2b      	ldr	r3, [pc, #172]	; (80175f4 <tcp_fasttmr+0xc0>)
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801754c:	e048      	b.n	80175e0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	7f9a      	ldrb	r2, [r3, #30]
 8017552:	4b27      	ldr	r3, [pc, #156]	; (80175f0 <tcp_fasttmr+0xbc>)
 8017554:	781b      	ldrb	r3, [r3, #0]
 8017556:	429a      	cmp	r2, r3
 8017558:	d03f      	beq.n	80175da <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801755a:	4b25      	ldr	r3, [pc, #148]	; (80175f0 <tcp_fasttmr+0xbc>)
 801755c:	781a      	ldrb	r2, [r3, #0]
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	8b5b      	ldrh	r3, [r3, #26]
 8017566:	f003 0301 	and.w	r3, r3, #1
 801756a:	2b00      	cmp	r3, #0
 801756c:	d010      	beq.n	8017590 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	8b5b      	ldrh	r3, [r3, #26]
 8017572:	f043 0302 	orr.w	r3, r3, #2
 8017576:	b29a      	uxth	r2, r3
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801757c:	6878      	ldr	r0, [r7, #4]
 801757e:	f004 f80f 	bl	801b5a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	8b5b      	ldrh	r3, [r3, #26]
 8017586:	f023 0303 	bic.w	r3, r3, #3
 801758a:	b29a      	uxth	r2, r3
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	8b5b      	ldrh	r3, [r3, #26]
 8017594:	f003 0308 	and.w	r3, r3, #8
 8017598:	2b00      	cmp	r3, #0
 801759a:	d009      	beq.n	80175b0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	8b5b      	ldrh	r3, [r3, #26]
 80175a0:	f023 0308 	bic.w	r3, r3, #8
 80175a4:	b29a      	uxth	r2, r3
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80175aa:	6878      	ldr	r0, [r7, #4]
 80175ac:	f7ff f8be 	bl	801672c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	68db      	ldr	r3, [r3, #12]
 80175b4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d00a      	beq.n	80175d4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80175be:	4b0e      	ldr	r3, [pc, #56]	; (80175f8 <tcp_fasttmr+0xc4>)
 80175c0:	2200      	movs	r2, #0
 80175c2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80175c4:	6878      	ldr	r0, [r7, #4]
 80175c6:	f000 f819 	bl	80175fc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80175ca:	4b0b      	ldr	r3, [pc, #44]	; (80175f8 <tcp_fasttmr+0xc4>)
 80175cc:	781b      	ldrb	r3, [r3, #0]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d000      	beq.n	80175d4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80175d2:	e7b8      	b.n	8017546 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80175d4:	683b      	ldr	r3, [r7, #0]
 80175d6:	607b      	str	r3, [r7, #4]
 80175d8:	e002      	b.n	80175e0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	68db      	ldr	r3, [r3, #12]
 80175de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d1b3      	bne.n	801754e <tcp_fasttmr+0x1a>
    }
  }
}
 80175e6:	bf00      	nop
 80175e8:	bf00      	nop
 80175ea:	3708      	adds	r7, #8
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}
 80175f0:	2000c7fa 	.word	0x2000c7fa
 80175f4:	20014bb4 	.word	0x20014bb4
 80175f8:	20014bb0 	.word	0x20014bb0

080175fc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80175fc:	b590      	push	{r4, r7, lr}
 80175fe:	b085      	sub	sp, #20
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d109      	bne.n	801761e <tcp_process_refused_data+0x22>
 801760a:	4b37      	ldr	r3, [pc, #220]	; (80176e8 <tcp_process_refused_data+0xec>)
 801760c:	f240 6209 	movw	r2, #1545	; 0x609
 8017610:	4936      	ldr	r1, [pc, #216]	; (80176ec <tcp_process_refused_data+0xf0>)
 8017612:	4837      	ldr	r0, [pc, #220]	; (80176f0 <tcp_process_refused_data+0xf4>)
 8017614:	f007 feaa 	bl	801f36c <iprintf>
 8017618:	f06f 030f 	mvn.w	r3, #15
 801761c:	e060      	b.n	80176e0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017622:	7b5b      	ldrb	r3, [r3, #13]
 8017624:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801762a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	2200      	movs	r2, #0
 8017630:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017638:	2b00      	cmp	r3, #0
 801763a:	d00b      	beq.n	8017654 <tcp_process_refused_data+0x58>
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	6918      	ldr	r0, [r3, #16]
 8017646:	2300      	movs	r3, #0
 8017648:	68ba      	ldr	r2, [r7, #8]
 801764a:	6879      	ldr	r1, [r7, #4]
 801764c:	47a0      	blx	r4
 801764e:	4603      	mov	r3, r0
 8017650:	73fb      	strb	r3, [r7, #15]
 8017652:	e007      	b.n	8017664 <tcp_process_refused_data+0x68>
 8017654:	2300      	movs	r3, #0
 8017656:	68ba      	ldr	r2, [r7, #8]
 8017658:	6879      	ldr	r1, [r7, #4]
 801765a:	2000      	movs	r0, #0
 801765c:	f000 f8c2 	bl	80177e4 <tcp_recv_null>
 8017660:	4603      	mov	r3, r0
 8017662:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8017664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d12a      	bne.n	80176c2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801766c:	7bbb      	ldrb	r3, [r7, #14]
 801766e:	f003 0320 	and.w	r3, r3, #32
 8017672:	2b00      	cmp	r3, #0
 8017674:	d033      	beq.n	80176de <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801767a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801767e:	d005      	beq.n	801768c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017684:	3301      	adds	r3, #1
 8017686:	b29a      	uxth	r2, r3
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017692:	2b00      	cmp	r3, #0
 8017694:	d00b      	beq.n	80176ae <tcp_process_refused_data+0xb2>
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	6918      	ldr	r0, [r3, #16]
 80176a0:	2300      	movs	r3, #0
 80176a2:	2200      	movs	r2, #0
 80176a4:	6879      	ldr	r1, [r7, #4]
 80176a6:	47a0      	blx	r4
 80176a8:	4603      	mov	r3, r0
 80176aa:	73fb      	strb	r3, [r7, #15]
 80176ac:	e001      	b.n	80176b2 <tcp_process_refused_data+0xb6>
 80176ae:	2300      	movs	r3, #0
 80176b0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80176b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176b6:	f113 0f0d 	cmn.w	r3, #13
 80176ba:	d110      	bne.n	80176de <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80176bc:	f06f 030c 	mvn.w	r3, #12
 80176c0:	e00e      	b.n	80176e0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80176c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176c6:	f113 0f0d 	cmn.w	r3, #13
 80176ca:	d102      	bne.n	80176d2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80176cc:	f06f 030c 	mvn.w	r3, #12
 80176d0:	e006      	b.n	80176e0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	68ba      	ldr	r2, [r7, #8]
 80176d6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80176d8:	f06f 0304 	mvn.w	r3, #4
 80176dc:	e000      	b.n	80176e0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80176de:	2300      	movs	r3, #0
}
 80176e0:	4618      	mov	r0, r3
 80176e2:	3714      	adds	r7, #20
 80176e4:	46bd      	mov	sp, r7
 80176e6:	bd90      	pop	{r4, r7, pc}
 80176e8:	080223a4 	.word	0x080223a4
 80176ec:	080228b4 	.word	0x080228b4
 80176f0:	080223e8 	.word	0x080223e8

080176f4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b084      	sub	sp, #16
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80176fc:	e007      	b.n	801770e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8017704:	6878      	ldr	r0, [r7, #4]
 8017706:	f000 f80a 	bl	801771e <tcp_seg_free>
    seg = next;
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d1f4      	bne.n	80176fe <tcp_segs_free+0xa>
  }
}
 8017714:	bf00      	nop
 8017716:	bf00      	nop
 8017718:	3710      	adds	r7, #16
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}

0801771e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801771e:	b580      	push	{r7, lr}
 8017720:	b082      	sub	sp, #8
 8017722:	af00      	add	r7, sp, #0
 8017724:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d00c      	beq.n	8017746 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	685b      	ldr	r3, [r3, #4]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d004      	beq.n	801773e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	685b      	ldr	r3, [r3, #4]
 8017738:	4618      	mov	r0, r3
 801773a:	f7fe fbb7 	bl	8015eac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801773e:	6879      	ldr	r1, [r7, #4]
 8017740:	2003      	movs	r0, #3
 8017742:	f7fd fcfd 	bl	8015140 <memp_free>
  }
}
 8017746:	bf00      	nop
 8017748:	3708      	adds	r7, #8
 801774a:	46bd      	mov	sp, r7
 801774c:	bd80      	pop	{r7, pc}
	...

08017750 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b082      	sub	sp, #8
 8017754:	af00      	add	r7, sp, #0
 8017756:	6078      	str	r0, [r7, #4]
 8017758:	460b      	mov	r3, r1
 801775a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d107      	bne.n	8017772 <tcp_setprio+0x22>
 8017762:	4b07      	ldr	r3, [pc, #28]	; (8017780 <tcp_setprio+0x30>)
 8017764:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8017768:	4906      	ldr	r1, [pc, #24]	; (8017784 <tcp_setprio+0x34>)
 801776a:	4807      	ldr	r0, [pc, #28]	; (8017788 <tcp_setprio+0x38>)
 801776c:	f007 fdfe 	bl	801f36c <iprintf>
 8017770:	e002      	b.n	8017778 <tcp_setprio+0x28>

  pcb->prio = prio;
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	78fa      	ldrb	r2, [r7, #3]
 8017776:	755a      	strb	r2, [r3, #21]
}
 8017778:	3708      	adds	r7, #8
 801777a:	46bd      	mov	sp, r7
 801777c:	bd80      	pop	{r7, pc}
 801777e:	bf00      	nop
 8017780:	080223a4 	.word	0x080223a4
 8017784:	080228dc 	.word	0x080228dc
 8017788:	080223e8 	.word	0x080223e8

0801778c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b084      	sub	sp, #16
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d106      	bne.n	80177a8 <tcp_seg_copy+0x1c>
 801779a:	4b0f      	ldr	r3, [pc, #60]	; (80177d8 <tcp_seg_copy+0x4c>)
 801779c:	f240 6282 	movw	r2, #1666	; 0x682
 80177a0:	490e      	ldr	r1, [pc, #56]	; (80177dc <tcp_seg_copy+0x50>)
 80177a2:	480f      	ldr	r0, [pc, #60]	; (80177e0 <tcp_seg_copy+0x54>)
 80177a4:	f007 fde2 	bl	801f36c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80177a8:	2003      	movs	r0, #3
 80177aa:	f7fd fc77 	bl	801509c <memp_malloc>
 80177ae:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d101      	bne.n	80177ba <tcp_seg_copy+0x2e>
    return NULL;
 80177b6:	2300      	movs	r3, #0
 80177b8:	e00a      	b.n	80177d0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80177ba:	2210      	movs	r2, #16
 80177bc:	6879      	ldr	r1, [r7, #4]
 80177be:	68f8      	ldr	r0, [r7, #12]
 80177c0:	f007 fda4 	bl	801f30c <memcpy>
  pbuf_ref(cseg->p);
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	685b      	ldr	r3, [r3, #4]
 80177c8:	4618      	mov	r0, r3
 80177ca:	f7fe fc15 	bl	8015ff8 <pbuf_ref>
  return cseg;
 80177ce:	68fb      	ldr	r3, [r7, #12]
}
 80177d0:	4618      	mov	r0, r3
 80177d2:	3710      	adds	r7, #16
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}
 80177d8:	080223a4 	.word	0x080223a4
 80177dc:	080228f8 	.word	0x080228f8
 80177e0:	080223e8 	.word	0x080223e8

080177e4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b084      	sub	sp, #16
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	60f8      	str	r0, [r7, #12]
 80177ec:	60b9      	str	r1, [r7, #8]
 80177ee:	607a      	str	r2, [r7, #4]
 80177f0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80177f2:	68bb      	ldr	r3, [r7, #8]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d109      	bne.n	801780c <tcp_recv_null+0x28>
 80177f8:	4b12      	ldr	r3, [pc, #72]	; (8017844 <tcp_recv_null+0x60>)
 80177fa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80177fe:	4912      	ldr	r1, [pc, #72]	; (8017848 <tcp_recv_null+0x64>)
 8017800:	4812      	ldr	r0, [pc, #72]	; (801784c <tcp_recv_null+0x68>)
 8017802:	f007 fdb3 	bl	801f36c <iprintf>
 8017806:	f06f 030f 	mvn.w	r3, #15
 801780a:	e016      	b.n	801783a <tcp_recv_null+0x56>

  if (p != NULL) {
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d009      	beq.n	8017826 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	891b      	ldrh	r3, [r3, #8]
 8017816:	4619      	mov	r1, r3
 8017818:	68b8      	ldr	r0, [r7, #8]
 801781a:	f7ff fab5 	bl	8016d88 <tcp_recved>
    pbuf_free(p);
 801781e:	6878      	ldr	r0, [r7, #4]
 8017820:	f7fe fb44 	bl	8015eac <pbuf_free>
 8017824:	e008      	b.n	8017838 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8017826:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d104      	bne.n	8017838 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801782e:	68b8      	ldr	r0, [r7, #8]
 8017830:	f7fe ffe6 	bl	8016800 <tcp_close>
 8017834:	4603      	mov	r3, r0
 8017836:	e000      	b.n	801783a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8017838:	2300      	movs	r3, #0
}
 801783a:	4618      	mov	r0, r3
 801783c:	3710      	adds	r7, #16
 801783e:	46bd      	mov	sp, r7
 8017840:	bd80      	pop	{r7, pc}
 8017842:	bf00      	nop
 8017844:	080223a4 	.word	0x080223a4
 8017848:	08022914 	.word	0x08022914
 801784c:	080223e8 	.word	0x080223e8

08017850 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8017850:	b580      	push	{r7, lr}
 8017852:	b086      	sub	sp, #24
 8017854:	af00      	add	r7, sp, #0
 8017856:	4603      	mov	r3, r0
 8017858:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801785a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801785e:	2b00      	cmp	r3, #0
 8017860:	db01      	blt.n	8017866 <tcp_kill_prio+0x16>
 8017862:	79fb      	ldrb	r3, [r7, #7]
 8017864:	e000      	b.n	8017868 <tcp_kill_prio+0x18>
 8017866:	237f      	movs	r3, #127	; 0x7f
 8017868:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801786a:	7afb      	ldrb	r3, [r7, #11]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d034      	beq.n	80178da <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8017870:	7afb      	ldrb	r3, [r7, #11]
 8017872:	3b01      	subs	r3, #1
 8017874:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8017876:	2300      	movs	r3, #0
 8017878:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801787a:	2300      	movs	r3, #0
 801787c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801787e:	4b19      	ldr	r3, [pc, #100]	; (80178e4 <tcp_kill_prio+0x94>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	617b      	str	r3, [r7, #20]
 8017884:	e01f      	b.n	80178c6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8017886:	697b      	ldr	r3, [r7, #20]
 8017888:	7d5b      	ldrb	r3, [r3, #21]
 801788a:	7afa      	ldrb	r2, [r7, #11]
 801788c:	429a      	cmp	r2, r3
 801788e:	d80c      	bhi.n	80178aa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017890:	697b      	ldr	r3, [r7, #20]
 8017892:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8017894:	7afa      	ldrb	r2, [r7, #11]
 8017896:	429a      	cmp	r2, r3
 8017898:	d112      	bne.n	80178c0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801789a:	4b13      	ldr	r3, [pc, #76]	; (80178e8 <tcp_kill_prio+0x98>)
 801789c:	681a      	ldr	r2, [r3, #0]
 801789e:	697b      	ldr	r3, [r7, #20]
 80178a0:	6a1b      	ldr	r3, [r3, #32]
 80178a2:	1ad3      	subs	r3, r2, r3
 80178a4:	68fa      	ldr	r2, [r7, #12]
 80178a6:	429a      	cmp	r2, r3
 80178a8:	d80a      	bhi.n	80178c0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80178aa:	4b0f      	ldr	r3, [pc, #60]	; (80178e8 <tcp_kill_prio+0x98>)
 80178ac:	681a      	ldr	r2, [r3, #0]
 80178ae:	697b      	ldr	r3, [r7, #20]
 80178b0:	6a1b      	ldr	r3, [r3, #32]
 80178b2:	1ad3      	subs	r3, r2, r3
 80178b4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80178b6:	697b      	ldr	r3, [r7, #20]
 80178b8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80178ba:	697b      	ldr	r3, [r7, #20]
 80178bc:	7d5b      	ldrb	r3, [r3, #21]
 80178be:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80178c0:	697b      	ldr	r3, [r7, #20]
 80178c2:	68db      	ldr	r3, [r3, #12]
 80178c4:	617b      	str	r3, [r7, #20]
 80178c6:	697b      	ldr	r3, [r7, #20]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d1dc      	bne.n	8017886 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80178cc:	693b      	ldr	r3, [r7, #16]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d004      	beq.n	80178dc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80178d2:	6938      	ldr	r0, [r7, #16]
 80178d4:	f7ff f87e 	bl	80169d4 <tcp_abort>
 80178d8:	e000      	b.n	80178dc <tcp_kill_prio+0x8c>
    return;
 80178da:	bf00      	nop
  }
}
 80178dc:	3718      	adds	r7, #24
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}
 80178e2:	bf00      	nop
 80178e4:	20014bb4 	.word	0x20014bb4
 80178e8:	20014bb8 	.word	0x20014bb8

080178ec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b086      	sub	sp, #24
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	4603      	mov	r3, r0
 80178f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80178f6:	79fb      	ldrb	r3, [r7, #7]
 80178f8:	2b08      	cmp	r3, #8
 80178fa:	d009      	beq.n	8017910 <tcp_kill_state+0x24>
 80178fc:	79fb      	ldrb	r3, [r7, #7]
 80178fe:	2b09      	cmp	r3, #9
 8017900:	d006      	beq.n	8017910 <tcp_kill_state+0x24>
 8017902:	4b1a      	ldr	r3, [pc, #104]	; (801796c <tcp_kill_state+0x80>)
 8017904:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8017908:	4919      	ldr	r1, [pc, #100]	; (8017970 <tcp_kill_state+0x84>)
 801790a:	481a      	ldr	r0, [pc, #104]	; (8017974 <tcp_kill_state+0x88>)
 801790c:	f007 fd2e 	bl	801f36c <iprintf>

  inactivity = 0;
 8017910:	2300      	movs	r3, #0
 8017912:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017914:	2300      	movs	r3, #0
 8017916:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017918:	4b17      	ldr	r3, [pc, #92]	; (8017978 <tcp_kill_state+0x8c>)
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	617b      	str	r3, [r7, #20]
 801791e:	e017      	b.n	8017950 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017920:	697b      	ldr	r3, [r7, #20]
 8017922:	7d1b      	ldrb	r3, [r3, #20]
 8017924:	79fa      	ldrb	r2, [r7, #7]
 8017926:	429a      	cmp	r2, r3
 8017928:	d10f      	bne.n	801794a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801792a:	4b14      	ldr	r3, [pc, #80]	; (801797c <tcp_kill_state+0x90>)
 801792c:	681a      	ldr	r2, [r3, #0]
 801792e:	697b      	ldr	r3, [r7, #20]
 8017930:	6a1b      	ldr	r3, [r3, #32]
 8017932:	1ad3      	subs	r3, r2, r3
 8017934:	68fa      	ldr	r2, [r7, #12]
 8017936:	429a      	cmp	r2, r3
 8017938:	d807      	bhi.n	801794a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801793a:	4b10      	ldr	r3, [pc, #64]	; (801797c <tcp_kill_state+0x90>)
 801793c:	681a      	ldr	r2, [r3, #0]
 801793e:	697b      	ldr	r3, [r7, #20]
 8017940:	6a1b      	ldr	r3, [r3, #32]
 8017942:	1ad3      	subs	r3, r2, r3
 8017944:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017946:	697b      	ldr	r3, [r7, #20]
 8017948:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801794a:	697b      	ldr	r3, [r7, #20]
 801794c:	68db      	ldr	r3, [r3, #12]
 801794e:	617b      	str	r3, [r7, #20]
 8017950:	697b      	ldr	r3, [r7, #20]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d1e4      	bne.n	8017920 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017956:	693b      	ldr	r3, [r7, #16]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d003      	beq.n	8017964 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801795c:	2100      	movs	r1, #0
 801795e:	6938      	ldr	r0, [r7, #16]
 8017960:	f7fe ff7a 	bl	8016858 <tcp_abandon>
  }
}
 8017964:	bf00      	nop
 8017966:	3718      	adds	r7, #24
 8017968:	46bd      	mov	sp, r7
 801796a:	bd80      	pop	{r7, pc}
 801796c:	080223a4 	.word	0x080223a4
 8017970:	08022930 	.word	0x08022930
 8017974:	080223e8 	.word	0x080223e8
 8017978:	20014bb4 	.word	0x20014bb4
 801797c:	20014bb8 	.word	0x20014bb8

08017980 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8017980:	b580      	push	{r7, lr}
 8017982:	b084      	sub	sp, #16
 8017984:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8017986:	2300      	movs	r3, #0
 8017988:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801798a:	2300      	movs	r3, #0
 801798c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801798e:	4b12      	ldr	r3, [pc, #72]	; (80179d8 <tcp_kill_timewait+0x58>)
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	60fb      	str	r3, [r7, #12]
 8017994:	e012      	b.n	80179bc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017996:	4b11      	ldr	r3, [pc, #68]	; (80179dc <tcp_kill_timewait+0x5c>)
 8017998:	681a      	ldr	r2, [r3, #0]
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	6a1b      	ldr	r3, [r3, #32]
 801799e:	1ad3      	subs	r3, r2, r3
 80179a0:	687a      	ldr	r2, [r7, #4]
 80179a2:	429a      	cmp	r2, r3
 80179a4:	d807      	bhi.n	80179b6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80179a6:	4b0d      	ldr	r3, [pc, #52]	; (80179dc <tcp_kill_timewait+0x5c>)
 80179a8:	681a      	ldr	r2, [r3, #0]
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	6a1b      	ldr	r3, [r3, #32]
 80179ae:	1ad3      	subs	r3, r2, r3
 80179b0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	68db      	ldr	r3, [r3, #12]
 80179ba:	60fb      	str	r3, [r7, #12]
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d1e9      	bne.n	8017996 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80179c2:	68bb      	ldr	r3, [r7, #8]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d002      	beq.n	80179ce <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80179c8:	68b8      	ldr	r0, [r7, #8]
 80179ca:	f7ff f803 	bl	80169d4 <tcp_abort>
  }
}
 80179ce:	bf00      	nop
 80179d0:	3710      	adds	r7, #16
 80179d2:	46bd      	mov	sp, r7
 80179d4:	bd80      	pop	{r7, pc}
 80179d6:	bf00      	nop
 80179d8:	20014bc4 	.word	0x20014bc4
 80179dc:	20014bb8 	.word	0x20014bb8

080179e0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b082      	sub	sp, #8
 80179e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80179e6:	4b10      	ldr	r3, [pc, #64]	; (8017a28 <tcp_handle_closepend+0x48>)
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80179ec:	e014      	b.n	8017a18 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	68db      	ldr	r3, [r3, #12]
 80179f2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	8b5b      	ldrh	r3, [r3, #26]
 80179f8:	f003 0308 	and.w	r3, r3, #8
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d009      	beq.n	8017a14 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	8b5b      	ldrh	r3, [r3, #26]
 8017a04:	f023 0308 	bic.w	r3, r3, #8
 8017a08:	b29a      	uxth	r2, r3
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8017a0e:	6878      	ldr	r0, [r7, #4]
 8017a10:	f7fe fe8c 	bl	801672c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8017a14:	683b      	ldr	r3, [r7, #0]
 8017a16:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d1e7      	bne.n	80179ee <tcp_handle_closepend+0xe>
  }
}
 8017a1e:	bf00      	nop
 8017a20:	bf00      	nop
 8017a22:	3708      	adds	r7, #8
 8017a24:	46bd      	mov	sp, r7
 8017a26:	bd80      	pop	{r7, pc}
 8017a28:	20014bb4 	.word	0x20014bb4

08017a2c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b084      	sub	sp, #16
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	4603      	mov	r3, r0
 8017a34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a36:	2001      	movs	r0, #1
 8017a38:	f7fd fb30 	bl	801509c <memp_malloc>
 8017a3c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d126      	bne.n	8017a92 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017a44:	f7ff ffcc 	bl	80179e0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017a48:	f7ff ff9a 	bl	8017980 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a4c:	2001      	movs	r0, #1
 8017a4e:	f7fd fb25 	bl	801509c <memp_malloc>
 8017a52:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d11b      	bne.n	8017a92 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017a5a:	2009      	movs	r0, #9
 8017a5c:	f7ff ff46 	bl	80178ec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a60:	2001      	movs	r0, #1
 8017a62:	f7fd fb1b 	bl	801509c <memp_malloc>
 8017a66:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d111      	bne.n	8017a92 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017a6e:	2008      	movs	r0, #8
 8017a70:	f7ff ff3c 	bl	80178ec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a74:	2001      	movs	r0, #1
 8017a76:	f7fd fb11 	bl	801509c <memp_malloc>
 8017a7a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d107      	bne.n	8017a92 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8017a82:	79fb      	ldrb	r3, [r7, #7]
 8017a84:	4618      	mov	r0, r3
 8017a86:	f7ff fee3 	bl	8017850 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a8a:	2001      	movs	r0, #1
 8017a8c:	f7fd fb06 	bl	801509c <memp_malloc>
 8017a90:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d03f      	beq.n	8017b18 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017a98:	229c      	movs	r2, #156	; 0x9c
 8017a9a:	2100      	movs	r1, #0
 8017a9c:	68f8      	ldr	r0, [r7, #12]
 8017a9e:	f007 fc5d 	bl	801f35c <memset>
    pcb->prio = prio;
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	79fa      	ldrb	r2, [r7, #7]
 8017aa6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017aae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	22ff      	movs	r2, #255	; 0xff
 8017ac6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017ace:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	2206      	movs	r2, #6
 8017ad4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	2206      	movs	r2, #6
 8017adc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ae4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	2201      	movs	r2, #1
 8017aea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8017aee:	4b0d      	ldr	r3, [pc, #52]	; (8017b24 <tcp_alloc+0xf8>)
 8017af0:	681a      	ldr	r2, [r3, #0]
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017af6:	4b0c      	ldr	r3, [pc, #48]	; (8017b28 <tcp_alloc+0xfc>)
 8017af8:	781a      	ldrb	r2, [r3, #0]
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017b04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	4a08      	ldr	r2, [pc, #32]	; (8017b2c <tcp_alloc+0x100>)
 8017b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	4a07      	ldr	r2, [pc, #28]	; (8017b30 <tcp_alloc+0x104>)
 8017b14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017b18:	68fb      	ldr	r3, [r7, #12]
}
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	3710      	adds	r7, #16
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}
 8017b22:	bf00      	nop
 8017b24:	20014bb8 	.word	0x20014bb8
 8017b28:	2000c7fa 	.word	0x2000c7fa
 8017b2c:	080177e5 	.word	0x080177e5
 8017b30:	006ddd00 	.word	0x006ddd00

08017b34 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	b084      	sub	sp, #16
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8017b3e:	2040      	movs	r0, #64	; 0x40
 8017b40:	f7ff ff74 	bl	8017a2c <tcp_alloc>
 8017b44:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017b46:	68fb      	ldr	r3, [r7, #12]
}
 8017b48:	4618      	mov	r0, r3
 8017b4a:	3710      	adds	r7, #16
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd80      	pop	{r7, pc}

08017b50 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8017b50:	b480      	push	{r7}
 8017b52:	b083      	sub	sp, #12
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
 8017b58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d002      	beq.n	8017b66 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	683a      	ldr	r2, [r7, #0]
 8017b64:	611a      	str	r2, [r3, #16]
  }
}
 8017b66:	bf00      	nop
 8017b68:	370c      	adds	r7, #12
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b70:	4770      	bx	lr
	...

08017b74 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b082      	sub	sp, #8
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
 8017b7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d00e      	beq.n	8017ba2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	7d1b      	ldrb	r3, [r3, #20]
 8017b88:	2b01      	cmp	r3, #1
 8017b8a:	d106      	bne.n	8017b9a <tcp_recv+0x26>
 8017b8c:	4b07      	ldr	r3, [pc, #28]	; (8017bac <tcp_recv+0x38>)
 8017b8e:	f240 72df 	movw	r2, #2015	; 0x7df
 8017b92:	4907      	ldr	r1, [pc, #28]	; (8017bb0 <tcp_recv+0x3c>)
 8017b94:	4807      	ldr	r0, [pc, #28]	; (8017bb4 <tcp_recv+0x40>)
 8017b96:	f007 fbe9 	bl	801f36c <iprintf>
    pcb->recv = recv;
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	683a      	ldr	r2, [r7, #0]
 8017b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8017ba2:	bf00      	nop
 8017ba4:	3708      	adds	r7, #8
 8017ba6:	46bd      	mov	sp, r7
 8017ba8:	bd80      	pop	{r7, pc}
 8017baa:	bf00      	nop
 8017bac:	080223a4 	.word	0x080223a4
 8017bb0:	08022940 	.word	0x08022940
 8017bb4:	080223e8 	.word	0x080223e8

08017bb8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b082      	sub	sp, #8
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
 8017bc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d00e      	beq.n	8017be6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	7d1b      	ldrb	r3, [r3, #20]
 8017bcc:	2b01      	cmp	r3, #1
 8017bce:	d106      	bne.n	8017bde <tcp_sent+0x26>
 8017bd0:	4b07      	ldr	r3, [pc, #28]	; (8017bf0 <tcp_sent+0x38>)
 8017bd2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8017bd6:	4907      	ldr	r1, [pc, #28]	; (8017bf4 <tcp_sent+0x3c>)
 8017bd8:	4807      	ldr	r0, [pc, #28]	; (8017bf8 <tcp_sent+0x40>)
 8017bda:	f007 fbc7 	bl	801f36c <iprintf>
    pcb->sent = sent;
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	683a      	ldr	r2, [r7, #0]
 8017be2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8017be6:	bf00      	nop
 8017be8:	3708      	adds	r7, #8
 8017bea:	46bd      	mov	sp, r7
 8017bec:	bd80      	pop	{r7, pc}
 8017bee:	bf00      	nop
 8017bf0:	080223a4 	.word	0x080223a4
 8017bf4:	08022968 	.word	0x08022968
 8017bf8:	080223e8 	.word	0x080223e8

08017bfc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017bfc:	b580      	push	{r7, lr}
 8017bfe:	b082      	sub	sp, #8
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	6078      	str	r0, [r7, #4]
 8017c04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d00e      	beq.n	8017c2a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	7d1b      	ldrb	r3, [r3, #20]
 8017c10:	2b01      	cmp	r3, #1
 8017c12:	d106      	bne.n	8017c22 <tcp_err+0x26>
 8017c14:	4b07      	ldr	r3, [pc, #28]	; (8017c34 <tcp_err+0x38>)
 8017c16:	f640 020d 	movw	r2, #2061	; 0x80d
 8017c1a:	4907      	ldr	r1, [pc, #28]	; (8017c38 <tcp_err+0x3c>)
 8017c1c:	4807      	ldr	r0, [pc, #28]	; (8017c3c <tcp_err+0x40>)
 8017c1e:	f007 fba5 	bl	801f36c <iprintf>
    pcb->errf = err;
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	683a      	ldr	r2, [r7, #0]
 8017c26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8017c2a:	bf00      	nop
 8017c2c:	3708      	adds	r7, #8
 8017c2e:	46bd      	mov	sp, r7
 8017c30:	bd80      	pop	{r7, pc}
 8017c32:	bf00      	nop
 8017c34:	080223a4 	.word	0x080223a4
 8017c38:	08022990 	.word	0x08022990
 8017c3c:	080223e8 	.word	0x080223e8

08017c40 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8017c40:	b480      	push	{r7}
 8017c42:	b085      	sub	sp, #20
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
 8017c48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d008      	beq.n	8017c62 <tcp_accept+0x22>
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	7d1b      	ldrb	r3, [r3, #20]
 8017c54:	2b01      	cmp	r3, #1
 8017c56:	d104      	bne.n	8017c62 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	683a      	ldr	r2, [r7, #0]
 8017c60:	619a      	str	r2, [r3, #24]
  }
}
 8017c62:	bf00      	nop
 8017c64:	3714      	adds	r7, #20
 8017c66:	46bd      	mov	sp, r7
 8017c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c6c:	4770      	bx	lr
	...

08017c70 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b084      	sub	sp, #16
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	60f8      	str	r0, [r7, #12]
 8017c78:	60b9      	str	r1, [r7, #8]
 8017c7a:	4613      	mov	r3, r2
 8017c7c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d107      	bne.n	8017c94 <tcp_poll+0x24>
 8017c84:	4b0e      	ldr	r3, [pc, #56]	; (8017cc0 <tcp_poll+0x50>)
 8017c86:	f640 023d 	movw	r2, #2109	; 0x83d
 8017c8a:	490e      	ldr	r1, [pc, #56]	; (8017cc4 <tcp_poll+0x54>)
 8017c8c:	480e      	ldr	r0, [pc, #56]	; (8017cc8 <tcp_poll+0x58>)
 8017c8e:	f007 fb6d 	bl	801f36c <iprintf>
 8017c92:	e011      	b.n	8017cb8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	7d1b      	ldrb	r3, [r3, #20]
 8017c98:	2b01      	cmp	r3, #1
 8017c9a:	d106      	bne.n	8017caa <tcp_poll+0x3a>
 8017c9c:	4b08      	ldr	r3, [pc, #32]	; (8017cc0 <tcp_poll+0x50>)
 8017c9e:	f640 023e 	movw	r2, #2110	; 0x83e
 8017ca2:	490a      	ldr	r1, [pc, #40]	; (8017ccc <tcp_poll+0x5c>)
 8017ca4:	4808      	ldr	r0, [pc, #32]	; (8017cc8 <tcp_poll+0x58>)
 8017ca6:	f007 fb61 	bl	801f36c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	68ba      	ldr	r2, [r7, #8]
 8017cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	79fa      	ldrb	r2, [r7, #7]
 8017cb6:	775a      	strb	r2, [r3, #29]
}
 8017cb8:	3710      	adds	r7, #16
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	bd80      	pop	{r7, pc}
 8017cbe:	bf00      	nop
 8017cc0:	080223a4 	.word	0x080223a4
 8017cc4:	080229b8 	.word	0x080229b8
 8017cc8:	080223e8 	.word	0x080223e8
 8017ccc:	080229d0 	.word	0x080229d0

08017cd0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b082      	sub	sp, #8
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d107      	bne.n	8017cee <tcp_pcb_purge+0x1e>
 8017cde:	4b21      	ldr	r3, [pc, #132]	; (8017d64 <tcp_pcb_purge+0x94>)
 8017ce0:	f640 0251 	movw	r2, #2129	; 0x851
 8017ce4:	4920      	ldr	r1, [pc, #128]	; (8017d68 <tcp_pcb_purge+0x98>)
 8017ce6:	4821      	ldr	r0, [pc, #132]	; (8017d6c <tcp_pcb_purge+0x9c>)
 8017ce8:	f007 fb40 	bl	801f36c <iprintf>
 8017cec:	e037      	b.n	8017d5e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	7d1b      	ldrb	r3, [r3, #20]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d033      	beq.n	8017d5e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017cfa:	2b0a      	cmp	r3, #10
 8017cfc:	d02f      	beq.n	8017d5e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8017d02:	2b01      	cmp	r3, #1
 8017d04:	d02b      	beq.n	8017d5e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d007      	beq.n	8017d1e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017d12:	4618      	mov	r0, r3
 8017d14:	f7fe f8ca 	bl	8015eac <pbuf_free>
      pcb->refused_data = NULL;
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	2200      	movs	r2, #0
 8017d1c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d002      	beq.n	8017d2c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017d26:	6878      	ldr	r0, [r7, #4]
 8017d28:	f000 f986 	bl	8018038 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d32:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d38:	4618      	mov	r0, r3
 8017d3a:	f7ff fcdb 	bl	80176f4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d42:	4618      	mov	r0, r3
 8017d44:	f7ff fcd6 	bl	80176f4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	66da      	str	r2, [r3, #108]	; 0x6c
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	2200      	movs	r2, #0
 8017d5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8017d5e:	3708      	adds	r7, #8
 8017d60:	46bd      	mov	sp, r7
 8017d62:	bd80      	pop	{r7, pc}
 8017d64:	080223a4 	.word	0x080223a4
 8017d68:	080229f0 	.word	0x080229f0
 8017d6c:	080223e8 	.word	0x080223e8

08017d70 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b084      	sub	sp, #16
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
 8017d78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017d7a:	683b      	ldr	r3, [r7, #0]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d106      	bne.n	8017d8e <tcp_pcb_remove+0x1e>
 8017d80:	4b3e      	ldr	r3, [pc, #248]	; (8017e7c <tcp_pcb_remove+0x10c>)
 8017d82:	f640 0283 	movw	r2, #2179	; 0x883
 8017d86:	493e      	ldr	r1, [pc, #248]	; (8017e80 <tcp_pcb_remove+0x110>)
 8017d88:	483e      	ldr	r0, [pc, #248]	; (8017e84 <tcp_pcb_remove+0x114>)
 8017d8a:	f007 faef 	bl	801f36c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d106      	bne.n	8017da2 <tcp_pcb_remove+0x32>
 8017d94:	4b39      	ldr	r3, [pc, #228]	; (8017e7c <tcp_pcb_remove+0x10c>)
 8017d96:	f640 0284 	movw	r2, #2180	; 0x884
 8017d9a:	493b      	ldr	r1, [pc, #236]	; (8017e88 <tcp_pcb_remove+0x118>)
 8017d9c:	4839      	ldr	r0, [pc, #228]	; (8017e84 <tcp_pcb_remove+0x114>)
 8017d9e:	f007 fae5 	bl	801f36c <iprintf>

  TCP_RMV(pcblist, pcb);
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	683a      	ldr	r2, [r7, #0]
 8017da8:	429a      	cmp	r2, r3
 8017daa:	d105      	bne.n	8017db8 <tcp_pcb_remove+0x48>
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	68da      	ldr	r2, [r3, #12]
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	601a      	str	r2, [r3, #0]
 8017db6:	e013      	b.n	8017de0 <tcp_pcb_remove+0x70>
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	60fb      	str	r3, [r7, #12]
 8017dbe:	e00c      	b.n	8017dda <tcp_pcb_remove+0x6a>
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	68db      	ldr	r3, [r3, #12]
 8017dc4:	683a      	ldr	r2, [r7, #0]
 8017dc6:	429a      	cmp	r2, r3
 8017dc8:	d104      	bne.n	8017dd4 <tcp_pcb_remove+0x64>
 8017dca:	683b      	ldr	r3, [r7, #0]
 8017dcc:	68da      	ldr	r2, [r3, #12]
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	60da      	str	r2, [r3, #12]
 8017dd2:	e005      	b.n	8017de0 <tcp_pcb_remove+0x70>
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	68db      	ldr	r3, [r3, #12]
 8017dd8:	60fb      	str	r3, [r7, #12]
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d1ef      	bne.n	8017dc0 <tcp_pcb_remove+0x50>
 8017de0:	683b      	ldr	r3, [r7, #0]
 8017de2:	2200      	movs	r2, #0
 8017de4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017de6:	6838      	ldr	r0, [r7, #0]
 8017de8:	f7ff ff72 	bl	8017cd0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017dec:	683b      	ldr	r3, [r7, #0]
 8017dee:	7d1b      	ldrb	r3, [r3, #20]
 8017df0:	2b0a      	cmp	r3, #10
 8017df2:	d013      	beq.n	8017e1c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017df4:	683b      	ldr	r3, [r7, #0]
 8017df6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017df8:	2b01      	cmp	r3, #1
 8017dfa:	d00f      	beq.n	8017e1c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017dfc:	683b      	ldr	r3, [r7, #0]
 8017dfe:	8b5b      	ldrh	r3, [r3, #26]
 8017e00:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d009      	beq.n	8017e1c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017e08:	683b      	ldr	r3, [r7, #0]
 8017e0a:	8b5b      	ldrh	r3, [r3, #26]
 8017e0c:	f043 0302 	orr.w	r3, r3, #2
 8017e10:	b29a      	uxth	r2, r3
 8017e12:	683b      	ldr	r3, [r7, #0]
 8017e14:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017e16:	6838      	ldr	r0, [r7, #0]
 8017e18:	f003 fbc2 	bl	801b5a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017e1c:	683b      	ldr	r3, [r7, #0]
 8017e1e:	7d1b      	ldrb	r3, [r3, #20]
 8017e20:	2b01      	cmp	r3, #1
 8017e22:	d020      	beq.n	8017e66 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017e24:	683b      	ldr	r3, [r7, #0]
 8017e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d006      	beq.n	8017e3a <tcp_pcb_remove+0xca>
 8017e2c:	4b13      	ldr	r3, [pc, #76]	; (8017e7c <tcp_pcb_remove+0x10c>)
 8017e2e:	f640 0293 	movw	r2, #2195	; 0x893
 8017e32:	4916      	ldr	r1, [pc, #88]	; (8017e8c <tcp_pcb_remove+0x11c>)
 8017e34:	4813      	ldr	r0, [pc, #76]	; (8017e84 <tcp_pcb_remove+0x114>)
 8017e36:	f007 fa99 	bl	801f36c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017e3a:	683b      	ldr	r3, [r7, #0]
 8017e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d006      	beq.n	8017e50 <tcp_pcb_remove+0xe0>
 8017e42:	4b0e      	ldr	r3, [pc, #56]	; (8017e7c <tcp_pcb_remove+0x10c>)
 8017e44:	f640 0294 	movw	r2, #2196	; 0x894
 8017e48:	4911      	ldr	r1, [pc, #68]	; (8017e90 <tcp_pcb_remove+0x120>)
 8017e4a:	480e      	ldr	r0, [pc, #56]	; (8017e84 <tcp_pcb_remove+0x114>)
 8017e4c:	f007 fa8e 	bl	801f36c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017e50:	683b      	ldr	r3, [r7, #0]
 8017e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d006      	beq.n	8017e66 <tcp_pcb_remove+0xf6>
 8017e58:	4b08      	ldr	r3, [pc, #32]	; (8017e7c <tcp_pcb_remove+0x10c>)
 8017e5a:	f640 0296 	movw	r2, #2198	; 0x896
 8017e5e:	490d      	ldr	r1, [pc, #52]	; (8017e94 <tcp_pcb_remove+0x124>)
 8017e60:	4808      	ldr	r0, [pc, #32]	; (8017e84 <tcp_pcb_remove+0x114>)
 8017e62:	f007 fa83 	bl	801f36c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017e66:	683b      	ldr	r3, [r7, #0]
 8017e68:	2200      	movs	r2, #0
 8017e6a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017e6c:	683b      	ldr	r3, [r7, #0]
 8017e6e:	2200      	movs	r2, #0
 8017e70:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8017e72:	bf00      	nop
 8017e74:	3710      	adds	r7, #16
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd80      	pop	{r7, pc}
 8017e7a:	bf00      	nop
 8017e7c:	080223a4 	.word	0x080223a4
 8017e80:	08022a0c 	.word	0x08022a0c
 8017e84:	080223e8 	.word	0x080223e8
 8017e88:	08022a28 	.word	0x08022a28
 8017e8c:	08022a48 	.word	0x08022a48
 8017e90:	08022a60 	.word	0x08022a60
 8017e94:	08022a7c 	.word	0x08022a7c

08017e98 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017e98:	b580      	push	{r7, lr}
 8017e9a:	b082      	sub	sp, #8
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d106      	bne.n	8017eb4 <tcp_next_iss+0x1c>
 8017ea6:	4b0a      	ldr	r3, [pc, #40]	; (8017ed0 <tcp_next_iss+0x38>)
 8017ea8:	f640 02af 	movw	r2, #2223	; 0x8af
 8017eac:	4909      	ldr	r1, [pc, #36]	; (8017ed4 <tcp_next_iss+0x3c>)
 8017eae:	480a      	ldr	r0, [pc, #40]	; (8017ed8 <tcp_next_iss+0x40>)
 8017eb0:	f007 fa5c 	bl	801f36c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017eb4:	4b09      	ldr	r3, [pc, #36]	; (8017edc <tcp_next_iss+0x44>)
 8017eb6:	681a      	ldr	r2, [r3, #0]
 8017eb8:	4b09      	ldr	r3, [pc, #36]	; (8017ee0 <tcp_next_iss+0x48>)
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	4413      	add	r3, r2
 8017ebe:	4a07      	ldr	r2, [pc, #28]	; (8017edc <tcp_next_iss+0x44>)
 8017ec0:	6013      	str	r3, [r2, #0]
  return iss;
 8017ec2:	4b06      	ldr	r3, [pc, #24]	; (8017edc <tcp_next_iss+0x44>)
 8017ec4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	3708      	adds	r7, #8
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	bd80      	pop	{r7, pc}
 8017ece:	bf00      	nop
 8017ed0:	080223a4 	.word	0x080223a4
 8017ed4:	08022a94 	.word	0x08022a94
 8017ed8:	080223e8 	.word	0x080223e8
 8017edc:	20000038 	.word	0x20000038
 8017ee0:	20014bb8 	.word	0x20014bb8

08017ee4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b086      	sub	sp, #24
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	4603      	mov	r3, r0
 8017eec:	60b9      	str	r1, [r7, #8]
 8017eee:	607a      	str	r2, [r7, #4]
 8017ef0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d106      	bne.n	8017f06 <tcp_eff_send_mss_netif+0x22>
 8017ef8:	4b14      	ldr	r3, [pc, #80]	; (8017f4c <tcp_eff_send_mss_netif+0x68>)
 8017efa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8017efe:	4914      	ldr	r1, [pc, #80]	; (8017f50 <tcp_eff_send_mss_netif+0x6c>)
 8017f00:	4814      	ldr	r0, [pc, #80]	; (8017f54 <tcp_eff_send_mss_netif+0x70>)
 8017f02:	f007 fa33 	bl	801f36c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017f06:	68bb      	ldr	r3, [r7, #8]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d101      	bne.n	8017f10 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8017f0c:	89fb      	ldrh	r3, [r7, #14]
 8017f0e:	e019      	b.n	8017f44 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017f10:	68bb      	ldr	r3, [r7, #8]
 8017f12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017f14:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017f16:	8afb      	ldrh	r3, [r7, #22]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d012      	beq.n	8017f42 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8017f1c:	2328      	movs	r3, #40	; 0x28
 8017f1e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017f20:	8afa      	ldrh	r2, [r7, #22]
 8017f22:	8abb      	ldrh	r3, [r7, #20]
 8017f24:	429a      	cmp	r2, r3
 8017f26:	d904      	bls.n	8017f32 <tcp_eff_send_mss_netif+0x4e>
 8017f28:	8afa      	ldrh	r2, [r7, #22]
 8017f2a:	8abb      	ldrh	r3, [r7, #20]
 8017f2c:	1ad3      	subs	r3, r2, r3
 8017f2e:	b29b      	uxth	r3, r3
 8017f30:	e000      	b.n	8017f34 <tcp_eff_send_mss_netif+0x50>
 8017f32:	2300      	movs	r3, #0
 8017f34:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017f36:	8a7a      	ldrh	r2, [r7, #18]
 8017f38:	89fb      	ldrh	r3, [r7, #14]
 8017f3a:	4293      	cmp	r3, r2
 8017f3c:	bf28      	it	cs
 8017f3e:	4613      	movcs	r3, r2
 8017f40:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8017f42:	89fb      	ldrh	r3, [r7, #14]
}
 8017f44:	4618      	mov	r0, r3
 8017f46:	3718      	adds	r7, #24
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	bd80      	pop	{r7, pc}
 8017f4c:	080223a4 	.word	0x080223a4
 8017f50:	08022ab0 	.word	0x08022ab0
 8017f54:	080223e8 	.word	0x080223e8

08017f58 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017f58:	b580      	push	{r7, lr}
 8017f5a:	b084      	sub	sp, #16
 8017f5c:	af00      	add	r7, sp, #0
 8017f5e:	6078      	str	r0, [r7, #4]
 8017f60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8017f62:	683b      	ldr	r3, [r7, #0]
 8017f64:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d119      	bne.n	8017fa0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8017f6c:	4b10      	ldr	r3, [pc, #64]	; (8017fb0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8017f6e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8017f72:	4910      	ldr	r1, [pc, #64]	; (8017fb4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8017f74:	4810      	ldr	r0, [pc, #64]	; (8017fb8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017f76:	f007 f9f9 	bl	801f36c <iprintf>

  while (pcb != NULL) {
 8017f7a:	e011      	b.n	8017fa0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	681a      	ldr	r2, [r3, #0]
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	429a      	cmp	r2, r3
 8017f86:	d108      	bne.n	8017f9a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	68db      	ldr	r3, [r3, #12]
 8017f8c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8017f8e:	68f8      	ldr	r0, [r7, #12]
 8017f90:	f7fe fd20 	bl	80169d4 <tcp_abort>
      pcb = next;
 8017f94:	68bb      	ldr	r3, [r7, #8]
 8017f96:	60fb      	str	r3, [r7, #12]
 8017f98:	e002      	b.n	8017fa0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	68db      	ldr	r3, [r3, #12]
 8017f9e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d1ea      	bne.n	8017f7c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8017fa6:	bf00      	nop
 8017fa8:	bf00      	nop
 8017faa:	3710      	adds	r7, #16
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd80      	pop	{r7, pc}
 8017fb0:	080223a4 	.word	0x080223a4
 8017fb4:	08022ad8 	.word	0x08022ad8
 8017fb8:	080223e8 	.word	0x080223e8

08017fbc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b084      	sub	sp, #16
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
 8017fc4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d02a      	beq.n	8018022 <tcp_netif_ip_addr_changed+0x66>
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d026      	beq.n	8018022 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017fd4:	4b15      	ldr	r3, [pc, #84]	; (801802c <tcp_netif_ip_addr_changed+0x70>)
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	4619      	mov	r1, r3
 8017fda:	6878      	ldr	r0, [r7, #4]
 8017fdc:	f7ff ffbc 	bl	8017f58 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017fe0:	4b13      	ldr	r3, [pc, #76]	; (8018030 <tcp_netif_ip_addr_changed+0x74>)
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	4619      	mov	r1, r3
 8017fe6:	6878      	ldr	r0, [r7, #4]
 8017fe8:	f7ff ffb6 	bl	8017f58 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017fec:	683b      	ldr	r3, [r7, #0]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d017      	beq.n	8018022 <tcp_netif_ip_addr_changed+0x66>
 8017ff2:	683b      	ldr	r3, [r7, #0]
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d013      	beq.n	8018022 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017ffa:	4b0e      	ldr	r3, [pc, #56]	; (8018034 <tcp_netif_ip_addr_changed+0x78>)
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	60fb      	str	r3, [r7, #12]
 8018000:	e00c      	b.n	801801c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	681a      	ldr	r2, [r3, #0]
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	429a      	cmp	r2, r3
 801800c:	d103      	bne.n	8018016 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801800e:	683b      	ldr	r3, [r7, #0]
 8018010:	681a      	ldr	r2, [r3, #0]
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	68db      	ldr	r3, [r3, #12]
 801801a:	60fb      	str	r3, [r7, #12]
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	2b00      	cmp	r3, #0
 8018020:	d1ef      	bne.n	8018002 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8018022:	bf00      	nop
 8018024:	3710      	adds	r7, #16
 8018026:	46bd      	mov	sp, r7
 8018028:	bd80      	pop	{r7, pc}
 801802a:	bf00      	nop
 801802c:	20014bb4 	.word	0x20014bb4
 8018030:	20014bc0 	.word	0x20014bc0
 8018034:	20014bbc 	.word	0x20014bbc

08018038 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8018038:	b580      	push	{r7, lr}
 801803a:	b082      	sub	sp, #8
 801803c:	af00      	add	r7, sp, #0
 801803e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018044:	2b00      	cmp	r3, #0
 8018046:	d007      	beq.n	8018058 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801804c:	4618      	mov	r0, r3
 801804e:	f7ff fb51 	bl	80176f4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	2200      	movs	r2, #0
 8018056:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8018058:	bf00      	nop
 801805a:	3708      	adds	r7, #8
 801805c:	46bd      	mov	sp, r7
 801805e:	bd80      	pop	{r7, pc}

08018060 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8018060:	b590      	push	{r4, r7, lr}
 8018062:	b08d      	sub	sp, #52	; 0x34
 8018064:	af04      	add	r7, sp, #16
 8018066:	6078      	str	r0, [r7, #4]
 8018068:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d105      	bne.n	801807c <tcp_input+0x1c>
 8018070:	4b9b      	ldr	r3, [pc, #620]	; (80182e0 <tcp_input+0x280>)
 8018072:	2283      	movs	r2, #131	; 0x83
 8018074:	499b      	ldr	r1, [pc, #620]	; (80182e4 <tcp_input+0x284>)
 8018076:	489c      	ldr	r0, [pc, #624]	; (80182e8 <tcp_input+0x288>)
 8018078:	f007 f978 	bl	801f36c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	685b      	ldr	r3, [r3, #4]
 8018080:	4a9a      	ldr	r2, [pc, #616]	; (80182ec <tcp_input+0x28c>)
 8018082:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	895b      	ldrh	r3, [r3, #10]
 8018088:	2b13      	cmp	r3, #19
 801808a:	f240 83c4 	bls.w	8018816 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801808e:	4b98      	ldr	r3, [pc, #608]	; (80182f0 <tcp_input+0x290>)
 8018090:	695b      	ldr	r3, [r3, #20]
 8018092:	4a97      	ldr	r2, [pc, #604]	; (80182f0 <tcp_input+0x290>)
 8018094:	6812      	ldr	r2, [r2, #0]
 8018096:	4611      	mov	r1, r2
 8018098:	4618      	mov	r0, r3
 801809a:	f006 f89b 	bl	801e1d4 <ip4_addr_isbroadcast_u32>
 801809e:	4603      	mov	r3, r0
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	f040 83ba 	bne.w	801881a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80180a6:	4b92      	ldr	r3, [pc, #584]	; (80182f0 <tcp_input+0x290>)
 80180a8:	695b      	ldr	r3, [r3, #20]
 80180aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80180ae:	2be0      	cmp	r3, #224	; 0xe0
 80180b0:	f000 83b3 	beq.w	801881a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80180b4:	4b8d      	ldr	r3, [pc, #564]	; (80182ec <tcp_input+0x28c>)
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	899b      	ldrh	r3, [r3, #12]
 80180ba:	b29b      	uxth	r3, r3
 80180bc:	4618      	mov	r0, r3
 80180be:	f7fc fb01 	bl	80146c4 <lwip_htons>
 80180c2:	4603      	mov	r3, r0
 80180c4:	0b1b      	lsrs	r3, r3, #12
 80180c6:	b29b      	uxth	r3, r3
 80180c8:	b2db      	uxtb	r3, r3
 80180ca:	009b      	lsls	r3, r3, #2
 80180cc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80180ce:	7cbb      	ldrb	r3, [r7, #18]
 80180d0:	2b13      	cmp	r3, #19
 80180d2:	f240 83a4 	bls.w	801881e <tcp_input+0x7be>
 80180d6:	7cbb      	ldrb	r3, [r7, #18]
 80180d8:	b29a      	uxth	r2, r3
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	891b      	ldrh	r3, [r3, #8]
 80180de:	429a      	cmp	r2, r3
 80180e0:	f200 839d 	bhi.w	801881e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80180e4:	7cbb      	ldrb	r3, [r7, #18]
 80180e6:	b29b      	uxth	r3, r3
 80180e8:	3b14      	subs	r3, #20
 80180ea:	b29a      	uxth	r2, r3
 80180ec:	4b81      	ldr	r3, [pc, #516]	; (80182f4 <tcp_input+0x294>)
 80180ee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80180f0:	4b81      	ldr	r3, [pc, #516]	; (80182f8 <tcp_input+0x298>)
 80180f2:	2200      	movs	r2, #0
 80180f4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	895a      	ldrh	r2, [r3, #10]
 80180fa:	7cbb      	ldrb	r3, [r7, #18]
 80180fc:	b29b      	uxth	r3, r3
 80180fe:	429a      	cmp	r2, r3
 8018100:	d309      	bcc.n	8018116 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8018102:	4b7c      	ldr	r3, [pc, #496]	; (80182f4 <tcp_input+0x294>)
 8018104:	881a      	ldrh	r2, [r3, #0]
 8018106:	4b7d      	ldr	r3, [pc, #500]	; (80182fc <tcp_input+0x29c>)
 8018108:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801810a:	7cbb      	ldrb	r3, [r7, #18]
 801810c:	4619      	mov	r1, r3
 801810e:	6878      	ldr	r0, [r7, #4]
 8018110:	f7fd fe34 	bl	8015d7c <pbuf_remove_header>
 8018114:	e04e      	b.n	80181b4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d105      	bne.n	801812a <tcp_input+0xca>
 801811e:	4b70      	ldr	r3, [pc, #448]	; (80182e0 <tcp_input+0x280>)
 8018120:	22c2      	movs	r2, #194	; 0xc2
 8018122:	4977      	ldr	r1, [pc, #476]	; (8018300 <tcp_input+0x2a0>)
 8018124:	4870      	ldr	r0, [pc, #448]	; (80182e8 <tcp_input+0x288>)
 8018126:	f007 f921 	bl	801f36c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801812a:	2114      	movs	r1, #20
 801812c:	6878      	ldr	r0, [r7, #4]
 801812e:	f7fd fe25 	bl	8015d7c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	895a      	ldrh	r2, [r3, #10]
 8018136:	4b71      	ldr	r3, [pc, #452]	; (80182fc <tcp_input+0x29c>)
 8018138:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801813a:	4b6e      	ldr	r3, [pc, #440]	; (80182f4 <tcp_input+0x294>)
 801813c:	881a      	ldrh	r2, [r3, #0]
 801813e:	4b6f      	ldr	r3, [pc, #444]	; (80182fc <tcp_input+0x29c>)
 8018140:	881b      	ldrh	r3, [r3, #0]
 8018142:	1ad3      	subs	r3, r2, r3
 8018144:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8018146:	4b6d      	ldr	r3, [pc, #436]	; (80182fc <tcp_input+0x29c>)
 8018148:	881b      	ldrh	r3, [r3, #0]
 801814a:	4619      	mov	r1, r3
 801814c:	6878      	ldr	r0, [r7, #4]
 801814e:	f7fd fe15 	bl	8015d7c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	895b      	ldrh	r3, [r3, #10]
 8018158:	8a3a      	ldrh	r2, [r7, #16]
 801815a:	429a      	cmp	r2, r3
 801815c:	f200 8361 	bhi.w	8018822 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	685b      	ldr	r3, [r3, #4]
 8018166:	4a64      	ldr	r2, [pc, #400]	; (80182f8 <tcp_input+0x298>)
 8018168:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	8a3a      	ldrh	r2, [r7, #16]
 8018170:	4611      	mov	r1, r2
 8018172:	4618      	mov	r0, r3
 8018174:	f7fd fe02 	bl	8015d7c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	891a      	ldrh	r2, [r3, #8]
 801817c:	8a3b      	ldrh	r3, [r7, #16]
 801817e:	1ad3      	subs	r3, r2, r3
 8018180:	b29a      	uxth	r2, r3
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	895b      	ldrh	r3, [r3, #10]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d005      	beq.n	801819a <tcp_input+0x13a>
 801818e:	4b54      	ldr	r3, [pc, #336]	; (80182e0 <tcp_input+0x280>)
 8018190:	22df      	movs	r2, #223	; 0xdf
 8018192:	495c      	ldr	r1, [pc, #368]	; (8018304 <tcp_input+0x2a4>)
 8018194:	4854      	ldr	r0, [pc, #336]	; (80182e8 <tcp_input+0x288>)
 8018196:	f007 f8e9 	bl	801f36c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	891a      	ldrh	r2, [r3, #8]
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	891b      	ldrh	r3, [r3, #8]
 80181a4:	429a      	cmp	r2, r3
 80181a6:	d005      	beq.n	80181b4 <tcp_input+0x154>
 80181a8:	4b4d      	ldr	r3, [pc, #308]	; (80182e0 <tcp_input+0x280>)
 80181aa:	22e0      	movs	r2, #224	; 0xe0
 80181ac:	4956      	ldr	r1, [pc, #344]	; (8018308 <tcp_input+0x2a8>)
 80181ae:	484e      	ldr	r0, [pc, #312]	; (80182e8 <tcp_input+0x288>)
 80181b0:	f007 f8dc 	bl	801f36c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80181b4:	4b4d      	ldr	r3, [pc, #308]	; (80182ec <tcp_input+0x28c>)
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	881b      	ldrh	r3, [r3, #0]
 80181ba:	b29b      	uxth	r3, r3
 80181bc:	4a4b      	ldr	r2, [pc, #300]	; (80182ec <tcp_input+0x28c>)
 80181be:	6814      	ldr	r4, [r2, #0]
 80181c0:	4618      	mov	r0, r3
 80181c2:	f7fc fa7f 	bl	80146c4 <lwip_htons>
 80181c6:	4603      	mov	r3, r0
 80181c8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80181ca:	4b48      	ldr	r3, [pc, #288]	; (80182ec <tcp_input+0x28c>)
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	885b      	ldrh	r3, [r3, #2]
 80181d0:	b29b      	uxth	r3, r3
 80181d2:	4a46      	ldr	r2, [pc, #280]	; (80182ec <tcp_input+0x28c>)
 80181d4:	6814      	ldr	r4, [r2, #0]
 80181d6:	4618      	mov	r0, r3
 80181d8:	f7fc fa74 	bl	80146c4 <lwip_htons>
 80181dc:	4603      	mov	r3, r0
 80181de:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80181e0:	4b42      	ldr	r3, [pc, #264]	; (80182ec <tcp_input+0x28c>)
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	685b      	ldr	r3, [r3, #4]
 80181e6:	4a41      	ldr	r2, [pc, #260]	; (80182ec <tcp_input+0x28c>)
 80181e8:	6814      	ldr	r4, [r2, #0]
 80181ea:	4618      	mov	r0, r3
 80181ec:	f7fc fa7f 	bl	80146ee <lwip_htonl>
 80181f0:	4603      	mov	r3, r0
 80181f2:	6063      	str	r3, [r4, #4]
 80181f4:	6863      	ldr	r3, [r4, #4]
 80181f6:	4a45      	ldr	r2, [pc, #276]	; (801830c <tcp_input+0x2ac>)
 80181f8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80181fa:	4b3c      	ldr	r3, [pc, #240]	; (80182ec <tcp_input+0x28c>)
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	689b      	ldr	r3, [r3, #8]
 8018200:	4a3a      	ldr	r2, [pc, #232]	; (80182ec <tcp_input+0x28c>)
 8018202:	6814      	ldr	r4, [r2, #0]
 8018204:	4618      	mov	r0, r3
 8018206:	f7fc fa72 	bl	80146ee <lwip_htonl>
 801820a:	4603      	mov	r3, r0
 801820c:	60a3      	str	r3, [r4, #8]
 801820e:	68a3      	ldr	r3, [r4, #8]
 8018210:	4a3f      	ldr	r2, [pc, #252]	; (8018310 <tcp_input+0x2b0>)
 8018212:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8018214:	4b35      	ldr	r3, [pc, #212]	; (80182ec <tcp_input+0x28c>)
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	89db      	ldrh	r3, [r3, #14]
 801821a:	b29b      	uxth	r3, r3
 801821c:	4a33      	ldr	r2, [pc, #204]	; (80182ec <tcp_input+0x28c>)
 801821e:	6814      	ldr	r4, [r2, #0]
 8018220:	4618      	mov	r0, r3
 8018222:	f7fc fa4f 	bl	80146c4 <lwip_htons>
 8018226:	4603      	mov	r3, r0
 8018228:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801822a:	4b30      	ldr	r3, [pc, #192]	; (80182ec <tcp_input+0x28c>)
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	899b      	ldrh	r3, [r3, #12]
 8018230:	b29b      	uxth	r3, r3
 8018232:	4618      	mov	r0, r3
 8018234:	f7fc fa46 	bl	80146c4 <lwip_htons>
 8018238:	4603      	mov	r3, r0
 801823a:	b2db      	uxtb	r3, r3
 801823c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018240:	b2da      	uxtb	r2, r3
 8018242:	4b34      	ldr	r3, [pc, #208]	; (8018314 <tcp_input+0x2b4>)
 8018244:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	891a      	ldrh	r2, [r3, #8]
 801824a:	4b33      	ldr	r3, [pc, #204]	; (8018318 <tcp_input+0x2b8>)
 801824c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801824e:	4b31      	ldr	r3, [pc, #196]	; (8018314 <tcp_input+0x2b4>)
 8018250:	781b      	ldrb	r3, [r3, #0]
 8018252:	f003 0303 	and.w	r3, r3, #3
 8018256:	2b00      	cmp	r3, #0
 8018258:	d00c      	beq.n	8018274 <tcp_input+0x214>
    tcplen++;
 801825a:	4b2f      	ldr	r3, [pc, #188]	; (8018318 <tcp_input+0x2b8>)
 801825c:	881b      	ldrh	r3, [r3, #0]
 801825e:	3301      	adds	r3, #1
 8018260:	b29a      	uxth	r2, r3
 8018262:	4b2d      	ldr	r3, [pc, #180]	; (8018318 <tcp_input+0x2b8>)
 8018264:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	891a      	ldrh	r2, [r3, #8]
 801826a:	4b2b      	ldr	r3, [pc, #172]	; (8018318 <tcp_input+0x2b8>)
 801826c:	881b      	ldrh	r3, [r3, #0]
 801826e:	429a      	cmp	r2, r3
 8018270:	f200 82d9 	bhi.w	8018826 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8018274:	2300      	movs	r3, #0
 8018276:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018278:	4b28      	ldr	r3, [pc, #160]	; (801831c <tcp_input+0x2bc>)
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	61fb      	str	r3, [r7, #28]
 801827e:	e09d      	b.n	80183bc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8018280:	69fb      	ldr	r3, [r7, #28]
 8018282:	7d1b      	ldrb	r3, [r3, #20]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d105      	bne.n	8018294 <tcp_input+0x234>
 8018288:	4b15      	ldr	r3, [pc, #84]	; (80182e0 <tcp_input+0x280>)
 801828a:	22fb      	movs	r2, #251	; 0xfb
 801828c:	4924      	ldr	r1, [pc, #144]	; (8018320 <tcp_input+0x2c0>)
 801828e:	4816      	ldr	r0, [pc, #88]	; (80182e8 <tcp_input+0x288>)
 8018290:	f007 f86c 	bl	801f36c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8018294:	69fb      	ldr	r3, [r7, #28]
 8018296:	7d1b      	ldrb	r3, [r3, #20]
 8018298:	2b0a      	cmp	r3, #10
 801829a:	d105      	bne.n	80182a8 <tcp_input+0x248>
 801829c:	4b10      	ldr	r3, [pc, #64]	; (80182e0 <tcp_input+0x280>)
 801829e:	22fc      	movs	r2, #252	; 0xfc
 80182a0:	4920      	ldr	r1, [pc, #128]	; (8018324 <tcp_input+0x2c4>)
 80182a2:	4811      	ldr	r0, [pc, #68]	; (80182e8 <tcp_input+0x288>)
 80182a4:	f007 f862 	bl	801f36c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80182a8:	69fb      	ldr	r3, [r7, #28]
 80182aa:	7d1b      	ldrb	r3, [r3, #20]
 80182ac:	2b01      	cmp	r3, #1
 80182ae:	d105      	bne.n	80182bc <tcp_input+0x25c>
 80182b0:	4b0b      	ldr	r3, [pc, #44]	; (80182e0 <tcp_input+0x280>)
 80182b2:	22fd      	movs	r2, #253	; 0xfd
 80182b4:	491c      	ldr	r1, [pc, #112]	; (8018328 <tcp_input+0x2c8>)
 80182b6:	480c      	ldr	r0, [pc, #48]	; (80182e8 <tcp_input+0x288>)
 80182b8:	f007 f858 	bl	801f36c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80182bc:	69fb      	ldr	r3, [r7, #28]
 80182be:	7a1b      	ldrb	r3, [r3, #8]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d033      	beq.n	801832c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80182c4:	69fb      	ldr	r3, [r7, #28]
 80182c6:	7a1a      	ldrb	r2, [r3, #8]
 80182c8:	4b09      	ldr	r3, [pc, #36]	; (80182f0 <tcp_input+0x290>)
 80182ca:	685b      	ldr	r3, [r3, #4]
 80182cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80182d0:	3301      	adds	r3, #1
 80182d2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80182d4:	429a      	cmp	r2, r3
 80182d6:	d029      	beq.n	801832c <tcp_input+0x2cc>
      prev = pcb;
 80182d8:	69fb      	ldr	r3, [r7, #28]
 80182da:	61bb      	str	r3, [r7, #24]
      continue;
 80182dc:	e06b      	b.n	80183b6 <tcp_input+0x356>
 80182de:	bf00      	nop
 80182e0:	08022b0c 	.word	0x08022b0c
 80182e4:	08022b40 	.word	0x08022b40
 80182e8:	08022b58 	.word	0x08022b58
 80182ec:	2000c80c 	.word	0x2000c80c
 80182f0:	200114a0 	.word	0x200114a0
 80182f4:	2000c810 	.word	0x2000c810
 80182f8:	2000c814 	.word	0x2000c814
 80182fc:	2000c812 	.word	0x2000c812
 8018300:	08022b80 	.word	0x08022b80
 8018304:	08022b90 	.word	0x08022b90
 8018308:	08022b9c 	.word	0x08022b9c
 801830c:	2000c81c 	.word	0x2000c81c
 8018310:	2000c820 	.word	0x2000c820
 8018314:	2000c828 	.word	0x2000c828
 8018318:	2000c826 	.word	0x2000c826
 801831c:	20014bb4 	.word	0x20014bb4
 8018320:	08022bbc 	.word	0x08022bbc
 8018324:	08022be4 	.word	0x08022be4
 8018328:	08022c10 	.word	0x08022c10
    }

    if (pcb->remote_port == tcphdr->src &&
 801832c:	69fb      	ldr	r3, [r7, #28]
 801832e:	8b1a      	ldrh	r2, [r3, #24]
 8018330:	4b94      	ldr	r3, [pc, #592]	; (8018584 <tcp_input+0x524>)
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	881b      	ldrh	r3, [r3, #0]
 8018336:	b29b      	uxth	r3, r3
 8018338:	429a      	cmp	r2, r3
 801833a:	d13a      	bne.n	80183b2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801833c:	69fb      	ldr	r3, [r7, #28]
 801833e:	8ada      	ldrh	r2, [r3, #22]
 8018340:	4b90      	ldr	r3, [pc, #576]	; (8018584 <tcp_input+0x524>)
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	885b      	ldrh	r3, [r3, #2]
 8018346:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8018348:	429a      	cmp	r2, r3
 801834a:	d132      	bne.n	80183b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801834c:	69fb      	ldr	r3, [r7, #28]
 801834e:	685a      	ldr	r2, [r3, #4]
 8018350:	4b8d      	ldr	r3, [pc, #564]	; (8018588 <tcp_input+0x528>)
 8018352:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8018354:	429a      	cmp	r2, r3
 8018356:	d12c      	bne.n	80183b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018358:	69fb      	ldr	r3, [r7, #28]
 801835a:	681a      	ldr	r2, [r3, #0]
 801835c:	4b8a      	ldr	r3, [pc, #552]	; (8018588 <tcp_input+0x528>)
 801835e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018360:	429a      	cmp	r2, r3
 8018362:	d126      	bne.n	80183b2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8018364:	69fb      	ldr	r3, [r7, #28]
 8018366:	68db      	ldr	r3, [r3, #12]
 8018368:	69fa      	ldr	r2, [r7, #28]
 801836a:	429a      	cmp	r2, r3
 801836c:	d106      	bne.n	801837c <tcp_input+0x31c>
 801836e:	4b87      	ldr	r3, [pc, #540]	; (801858c <tcp_input+0x52c>)
 8018370:	f240 120d 	movw	r2, #269	; 0x10d
 8018374:	4986      	ldr	r1, [pc, #536]	; (8018590 <tcp_input+0x530>)
 8018376:	4887      	ldr	r0, [pc, #540]	; (8018594 <tcp_input+0x534>)
 8018378:	f006 fff8 	bl	801f36c <iprintf>
      if (prev != NULL) {
 801837c:	69bb      	ldr	r3, [r7, #24]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d00a      	beq.n	8018398 <tcp_input+0x338>
        prev->next = pcb->next;
 8018382:	69fb      	ldr	r3, [r7, #28]
 8018384:	68da      	ldr	r2, [r3, #12]
 8018386:	69bb      	ldr	r3, [r7, #24]
 8018388:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801838a:	4b83      	ldr	r3, [pc, #524]	; (8018598 <tcp_input+0x538>)
 801838c:	681a      	ldr	r2, [r3, #0]
 801838e:	69fb      	ldr	r3, [r7, #28]
 8018390:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8018392:	4a81      	ldr	r2, [pc, #516]	; (8018598 <tcp_input+0x538>)
 8018394:	69fb      	ldr	r3, [r7, #28]
 8018396:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018398:	69fb      	ldr	r3, [r7, #28]
 801839a:	68db      	ldr	r3, [r3, #12]
 801839c:	69fa      	ldr	r2, [r7, #28]
 801839e:	429a      	cmp	r2, r3
 80183a0:	d111      	bne.n	80183c6 <tcp_input+0x366>
 80183a2:	4b7a      	ldr	r3, [pc, #488]	; (801858c <tcp_input+0x52c>)
 80183a4:	f240 1215 	movw	r2, #277	; 0x115
 80183a8:	497c      	ldr	r1, [pc, #496]	; (801859c <tcp_input+0x53c>)
 80183aa:	487a      	ldr	r0, [pc, #488]	; (8018594 <tcp_input+0x534>)
 80183ac:	f006 ffde 	bl	801f36c <iprintf>
      break;
 80183b0:	e009      	b.n	80183c6 <tcp_input+0x366>
    }
    prev = pcb;
 80183b2:	69fb      	ldr	r3, [r7, #28]
 80183b4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80183b6:	69fb      	ldr	r3, [r7, #28]
 80183b8:	68db      	ldr	r3, [r3, #12]
 80183ba:	61fb      	str	r3, [r7, #28]
 80183bc:	69fb      	ldr	r3, [r7, #28]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	f47f af5e 	bne.w	8018280 <tcp_input+0x220>
 80183c4:	e000      	b.n	80183c8 <tcp_input+0x368>
      break;
 80183c6:	bf00      	nop
  }

  if (pcb == NULL) {
 80183c8:	69fb      	ldr	r3, [r7, #28]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	f040 8095 	bne.w	80184fa <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80183d0:	4b73      	ldr	r3, [pc, #460]	; (80185a0 <tcp_input+0x540>)
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	61fb      	str	r3, [r7, #28]
 80183d6:	e03f      	b.n	8018458 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80183d8:	69fb      	ldr	r3, [r7, #28]
 80183da:	7d1b      	ldrb	r3, [r3, #20]
 80183dc:	2b0a      	cmp	r3, #10
 80183de:	d006      	beq.n	80183ee <tcp_input+0x38e>
 80183e0:	4b6a      	ldr	r3, [pc, #424]	; (801858c <tcp_input+0x52c>)
 80183e2:	f240 121f 	movw	r2, #287	; 0x11f
 80183e6:	496f      	ldr	r1, [pc, #444]	; (80185a4 <tcp_input+0x544>)
 80183e8:	486a      	ldr	r0, [pc, #424]	; (8018594 <tcp_input+0x534>)
 80183ea:	f006 ffbf 	bl	801f36c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80183ee:	69fb      	ldr	r3, [r7, #28]
 80183f0:	7a1b      	ldrb	r3, [r3, #8]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d009      	beq.n	801840a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80183f6:	69fb      	ldr	r3, [r7, #28]
 80183f8:	7a1a      	ldrb	r2, [r3, #8]
 80183fa:	4b63      	ldr	r3, [pc, #396]	; (8018588 <tcp_input+0x528>)
 80183fc:	685b      	ldr	r3, [r3, #4]
 80183fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018402:	3301      	adds	r3, #1
 8018404:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018406:	429a      	cmp	r2, r3
 8018408:	d122      	bne.n	8018450 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801840a:	69fb      	ldr	r3, [r7, #28]
 801840c:	8b1a      	ldrh	r2, [r3, #24]
 801840e:	4b5d      	ldr	r3, [pc, #372]	; (8018584 <tcp_input+0x524>)
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	881b      	ldrh	r3, [r3, #0]
 8018414:	b29b      	uxth	r3, r3
 8018416:	429a      	cmp	r2, r3
 8018418:	d11b      	bne.n	8018452 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801841a:	69fb      	ldr	r3, [r7, #28]
 801841c:	8ada      	ldrh	r2, [r3, #22]
 801841e:	4b59      	ldr	r3, [pc, #356]	; (8018584 <tcp_input+0x524>)
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	885b      	ldrh	r3, [r3, #2]
 8018424:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8018426:	429a      	cmp	r2, r3
 8018428:	d113      	bne.n	8018452 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801842a:	69fb      	ldr	r3, [r7, #28]
 801842c:	685a      	ldr	r2, [r3, #4]
 801842e:	4b56      	ldr	r3, [pc, #344]	; (8018588 <tcp_input+0x528>)
 8018430:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8018432:	429a      	cmp	r2, r3
 8018434:	d10d      	bne.n	8018452 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018436:	69fb      	ldr	r3, [r7, #28]
 8018438:	681a      	ldr	r2, [r3, #0]
 801843a:	4b53      	ldr	r3, [pc, #332]	; (8018588 <tcp_input+0x528>)
 801843c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801843e:	429a      	cmp	r2, r3
 8018440:	d107      	bne.n	8018452 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8018442:	69f8      	ldr	r0, [r7, #28]
 8018444:	f000 fb54 	bl	8018af0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8018448:	6878      	ldr	r0, [r7, #4]
 801844a:	f7fd fd2f 	bl	8015eac <pbuf_free>
        return;
 801844e:	e1f0      	b.n	8018832 <tcp_input+0x7d2>
        continue;
 8018450:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018452:	69fb      	ldr	r3, [r7, #28]
 8018454:	68db      	ldr	r3, [r3, #12]
 8018456:	61fb      	str	r3, [r7, #28]
 8018458:	69fb      	ldr	r3, [r7, #28]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d1bc      	bne.n	80183d8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801845e:	2300      	movs	r3, #0
 8018460:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018462:	4b51      	ldr	r3, [pc, #324]	; (80185a8 <tcp_input+0x548>)
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	617b      	str	r3, [r7, #20]
 8018468:	e02a      	b.n	80184c0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801846a:	697b      	ldr	r3, [r7, #20]
 801846c:	7a1b      	ldrb	r3, [r3, #8]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d00c      	beq.n	801848c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018472:	697b      	ldr	r3, [r7, #20]
 8018474:	7a1a      	ldrb	r2, [r3, #8]
 8018476:	4b44      	ldr	r3, [pc, #272]	; (8018588 <tcp_input+0x528>)
 8018478:	685b      	ldr	r3, [r3, #4]
 801847a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801847e:	3301      	adds	r3, #1
 8018480:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8018482:	429a      	cmp	r2, r3
 8018484:	d002      	beq.n	801848c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8018486:	697b      	ldr	r3, [r7, #20]
 8018488:	61bb      	str	r3, [r7, #24]
        continue;
 801848a:	e016      	b.n	80184ba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801848c:	697b      	ldr	r3, [r7, #20]
 801848e:	8ada      	ldrh	r2, [r3, #22]
 8018490:	4b3c      	ldr	r3, [pc, #240]	; (8018584 <tcp_input+0x524>)
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	885b      	ldrh	r3, [r3, #2]
 8018496:	b29b      	uxth	r3, r3
 8018498:	429a      	cmp	r2, r3
 801849a:	d10c      	bne.n	80184b6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801849c:	697b      	ldr	r3, [r7, #20]
 801849e:	681a      	ldr	r2, [r3, #0]
 80184a0:	4b39      	ldr	r3, [pc, #228]	; (8018588 <tcp_input+0x528>)
 80184a2:	695b      	ldr	r3, [r3, #20]
 80184a4:	429a      	cmp	r2, r3
 80184a6:	d00f      	beq.n	80184c8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80184a8:	697b      	ldr	r3, [r7, #20]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d00d      	beq.n	80184ca <tcp_input+0x46a>
 80184ae:	697b      	ldr	r3, [r7, #20]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d009      	beq.n	80184ca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80184b6:	697b      	ldr	r3, [r7, #20]
 80184b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80184ba:	697b      	ldr	r3, [r7, #20]
 80184bc:	68db      	ldr	r3, [r3, #12]
 80184be:	617b      	str	r3, [r7, #20]
 80184c0:	697b      	ldr	r3, [r7, #20]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d1d1      	bne.n	801846a <tcp_input+0x40a>
 80184c6:	e000      	b.n	80184ca <tcp_input+0x46a>
            break;
 80184c8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80184ca:	697b      	ldr	r3, [r7, #20]
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d014      	beq.n	80184fa <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80184d0:	69bb      	ldr	r3, [r7, #24]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d00a      	beq.n	80184ec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80184d6:	697b      	ldr	r3, [r7, #20]
 80184d8:	68da      	ldr	r2, [r3, #12]
 80184da:	69bb      	ldr	r3, [r7, #24]
 80184dc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80184de:	4b32      	ldr	r3, [pc, #200]	; (80185a8 <tcp_input+0x548>)
 80184e0:	681a      	ldr	r2, [r3, #0]
 80184e2:	697b      	ldr	r3, [r7, #20]
 80184e4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80184e6:	4a30      	ldr	r2, [pc, #192]	; (80185a8 <tcp_input+0x548>)
 80184e8:	697b      	ldr	r3, [r7, #20]
 80184ea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80184ec:	6978      	ldr	r0, [r7, #20]
 80184ee:	f000 fa01 	bl	80188f4 <tcp_listen_input>
      }
      pbuf_free(p);
 80184f2:	6878      	ldr	r0, [r7, #4]
 80184f4:	f7fd fcda 	bl	8015eac <pbuf_free>
      return;
 80184f8:	e19b      	b.n	8018832 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80184fa:	69fb      	ldr	r3, [r7, #28]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	f000 8160 	beq.w	80187c2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8018502:	4b2a      	ldr	r3, [pc, #168]	; (80185ac <tcp_input+0x54c>)
 8018504:	2200      	movs	r2, #0
 8018506:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	891a      	ldrh	r2, [r3, #8]
 801850c:	4b27      	ldr	r3, [pc, #156]	; (80185ac <tcp_input+0x54c>)
 801850e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8018510:	4a26      	ldr	r2, [pc, #152]	; (80185ac <tcp_input+0x54c>)
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8018516:	4b1b      	ldr	r3, [pc, #108]	; (8018584 <tcp_input+0x524>)
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	4a24      	ldr	r2, [pc, #144]	; (80185ac <tcp_input+0x54c>)
 801851c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801851e:	4b24      	ldr	r3, [pc, #144]	; (80185b0 <tcp_input+0x550>)
 8018520:	2200      	movs	r2, #0
 8018522:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8018524:	4b23      	ldr	r3, [pc, #140]	; (80185b4 <tcp_input+0x554>)
 8018526:	2200      	movs	r2, #0
 8018528:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801852a:	4b23      	ldr	r3, [pc, #140]	; (80185b8 <tcp_input+0x558>)
 801852c:	2200      	movs	r2, #0
 801852e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8018530:	4b22      	ldr	r3, [pc, #136]	; (80185bc <tcp_input+0x55c>)
 8018532:	781b      	ldrb	r3, [r3, #0]
 8018534:	f003 0308 	and.w	r3, r3, #8
 8018538:	2b00      	cmp	r3, #0
 801853a:	d006      	beq.n	801854a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	7b5b      	ldrb	r3, [r3, #13]
 8018540:	f043 0301 	orr.w	r3, r3, #1
 8018544:	b2da      	uxtb	r2, r3
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801854a:	69fb      	ldr	r3, [r7, #28]
 801854c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801854e:	2b00      	cmp	r3, #0
 8018550:	d038      	beq.n	80185c4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018552:	69f8      	ldr	r0, [r7, #28]
 8018554:	f7ff f852 	bl	80175fc <tcp_process_refused_data>
 8018558:	4603      	mov	r3, r0
 801855a:	f113 0f0d 	cmn.w	r3, #13
 801855e:	d007      	beq.n	8018570 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018560:	69fb      	ldr	r3, [r7, #28]
 8018562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018564:	2b00      	cmp	r3, #0
 8018566:	d02d      	beq.n	80185c4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018568:	4b15      	ldr	r3, [pc, #84]	; (80185c0 <tcp_input+0x560>)
 801856a:	881b      	ldrh	r3, [r3, #0]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d029      	beq.n	80185c4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8018570:	69fb      	ldr	r3, [r7, #28]
 8018572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018574:	2b00      	cmp	r3, #0
 8018576:	f040 8104 	bne.w	8018782 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801857a:	69f8      	ldr	r0, [r7, #28]
 801857c:	f003 fe16 	bl	801c1ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8018580:	e0ff      	b.n	8018782 <tcp_input+0x722>
 8018582:	bf00      	nop
 8018584:	2000c80c 	.word	0x2000c80c
 8018588:	200114a0 	.word	0x200114a0
 801858c:	08022b0c 	.word	0x08022b0c
 8018590:	08022c38 	.word	0x08022c38
 8018594:	08022b58 	.word	0x08022b58
 8018598:	20014bb4 	.word	0x20014bb4
 801859c:	08022c64 	.word	0x08022c64
 80185a0:	20014bc4 	.word	0x20014bc4
 80185a4:	08022c90 	.word	0x08022c90
 80185a8:	20014bbc 	.word	0x20014bbc
 80185ac:	2000c7fc 	.word	0x2000c7fc
 80185b0:	2000c82c 	.word	0x2000c82c
 80185b4:	2000c829 	.word	0x2000c829
 80185b8:	2000c824 	.word	0x2000c824
 80185bc:	2000c828 	.word	0x2000c828
 80185c0:	2000c826 	.word	0x2000c826
      }
    }
    tcp_input_pcb = pcb;
 80185c4:	4a9c      	ldr	r2, [pc, #624]	; (8018838 <tcp_input+0x7d8>)
 80185c6:	69fb      	ldr	r3, [r7, #28]
 80185c8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80185ca:	69f8      	ldr	r0, [r7, #28]
 80185cc:	f000 fb0a 	bl	8018be4 <tcp_process>
 80185d0:	4603      	mov	r3, r0
 80185d2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80185d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80185d8:	f113 0f0d 	cmn.w	r3, #13
 80185dc:	f000 80d3 	beq.w	8018786 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80185e0:	4b96      	ldr	r3, [pc, #600]	; (801883c <tcp_input+0x7dc>)
 80185e2:	781b      	ldrb	r3, [r3, #0]
 80185e4:	f003 0308 	and.w	r3, r3, #8
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d015      	beq.n	8018618 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80185ec:	69fb      	ldr	r3, [r7, #28]
 80185ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d008      	beq.n	8018608 <tcp_input+0x5a8>
 80185f6:	69fb      	ldr	r3, [r7, #28]
 80185f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80185fc:	69fa      	ldr	r2, [r7, #28]
 80185fe:	6912      	ldr	r2, [r2, #16]
 8018600:	f06f 010d 	mvn.w	r1, #13
 8018604:	4610      	mov	r0, r2
 8018606:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018608:	69f9      	ldr	r1, [r7, #28]
 801860a:	488d      	ldr	r0, [pc, #564]	; (8018840 <tcp_input+0x7e0>)
 801860c:	f7ff fbb0 	bl	8017d70 <tcp_pcb_remove>
        tcp_free(pcb);
 8018610:	69f8      	ldr	r0, [r7, #28]
 8018612:	f7fd fef7 	bl	8016404 <tcp_free>
 8018616:	e0c1      	b.n	801879c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8018618:	2300      	movs	r3, #0
 801861a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801861c:	4b89      	ldr	r3, [pc, #548]	; (8018844 <tcp_input+0x7e4>)
 801861e:	881b      	ldrh	r3, [r3, #0]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d01d      	beq.n	8018660 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8018624:	4b87      	ldr	r3, [pc, #540]	; (8018844 <tcp_input+0x7e4>)
 8018626:	881b      	ldrh	r3, [r3, #0]
 8018628:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801862a:	69fb      	ldr	r3, [r7, #28]
 801862c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018630:	2b00      	cmp	r3, #0
 8018632:	d00a      	beq.n	801864a <tcp_input+0x5ea>
 8018634:	69fb      	ldr	r3, [r7, #28]
 8018636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801863a:	69fa      	ldr	r2, [r7, #28]
 801863c:	6910      	ldr	r0, [r2, #16]
 801863e:	89fa      	ldrh	r2, [r7, #14]
 8018640:	69f9      	ldr	r1, [r7, #28]
 8018642:	4798      	blx	r3
 8018644:	4603      	mov	r3, r0
 8018646:	74fb      	strb	r3, [r7, #19]
 8018648:	e001      	b.n	801864e <tcp_input+0x5ee>
 801864a:	2300      	movs	r3, #0
 801864c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801864e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018652:	f113 0f0d 	cmn.w	r3, #13
 8018656:	f000 8098 	beq.w	801878a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801865a:	4b7a      	ldr	r3, [pc, #488]	; (8018844 <tcp_input+0x7e4>)
 801865c:	2200      	movs	r2, #0
 801865e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8018660:	69f8      	ldr	r0, [r7, #28]
 8018662:	f000 f907 	bl	8018874 <tcp_input_delayed_close>
 8018666:	4603      	mov	r3, r0
 8018668:	2b00      	cmp	r3, #0
 801866a:	f040 8090 	bne.w	801878e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801866e:	4b76      	ldr	r3, [pc, #472]	; (8018848 <tcp_input+0x7e8>)
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d041      	beq.n	80186fa <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8018676:	69fb      	ldr	r3, [r7, #28]
 8018678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801867a:	2b00      	cmp	r3, #0
 801867c:	d006      	beq.n	801868c <tcp_input+0x62c>
 801867e:	4b73      	ldr	r3, [pc, #460]	; (801884c <tcp_input+0x7ec>)
 8018680:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8018684:	4972      	ldr	r1, [pc, #456]	; (8018850 <tcp_input+0x7f0>)
 8018686:	4873      	ldr	r0, [pc, #460]	; (8018854 <tcp_input+0x7f4>)
 8018688:	f006 fe70 	bl	801f36c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801868c:	69fb      	ldr	r3, [r7, #28]
 801868e:	8b5b      	ldrh	r3, [r3, #26]
 8018690:	f003 0310 	and.w	r3, r3, #16
 8018694:	2b00      	cmp	r3, #0
 8018696:	d008      	beq.n	80186aa <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018698:	4b6b      	ldr	r3, [pc, #428]	; (8018848 <tcp_input+0x7e8>)
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	4618      	mov	r0, r3
 801869e:	f7fd fc05 	bl	8015eac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80186a2:	69f8      	ldr	r0, [r7, #28]
 80186a4:	f7fe f996 	bl	80169d4 <tcp_abort>
            goto aborted;
 80186a8:	e078      	b.n	801879c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80186aa:	69fb      	ldr	r3, [r7, #28]
 80186ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d00c      	beq.n	80186ce <tcp_input+0x66e>
 80186b4:	69fb      	ldr	r3, [r7, #28]
 80186b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80186ba:	69fb      	ldr	r3, [r7, #28]
 80186bc:	6918      	ldr	r0, [r3, #16]
 80186be:	4b62      	ldr	r3, [pc, #392]	; (8018848 <tcp_input+0x7e8>)
 80186c0:	681a      	ldr	r2, [r3, #0]
 80186c2:	2300      	movs	r3, #0
 80186c4:	69f9      	ldr	r1, [r7, #28]
 80186c6:	47a0      	blx	r4
 80186c8:	4603      	mov	r3, r0
 80186ca:	74fb      	strb	r3, [r7, #19]
 80186cc:	e008      	b.n	80186e0 <tcp_input+0x680>
 80186ce:	4b5e      	ldr	r3, [pc, #376]	; (8018848 <tcp_input+0x7e8>)
 80186d0:	681a      	ldr	r2, [r3, #0]
 80186d2:	2300      	movs	r3, #0
 80186d4:	69f9      	ldr	r1, [r7, #28]
 80186d6:	2000      	movs	r0, #0
 80186d8:	f7ff f884 	bl	80177e4 <tcp_recv_null>
 80186dc:	4603      	mov	r3, r0
 80186de:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80186e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80186e4:	f113 0f0d 	cmn.w	r3, #13
 80186e8:	d053      	beq.n	8018792 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80186ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d003      	beq.n	80186fa <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80186f2:	4b55      	ldr	r3, [pc, #340]	; (8018848 <tcp_input+0x7e8>)
 80186f4:	681a      	ldr	r2, [r3, #0]
 80186f6:	69fb      	ldr	r3, [r7, #28]
 80186f8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80186fa:	4b50      	ldr	r3, [pc, #320]	; (801883c <tcp_input+0x7dc>)
 80186fc:	781b      	ldrb	r3, [r3, #0]
 80186fe:	f003 0320 	and.w	r3, r3, #32
 8018702:	2b00      	cmp	r3, #0
 8018704:	d030      	beq.n	8018768 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8018706:	69fb      	ldr	r3, [r7, #28]
 8018708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801870a:	2b00      	cmp	r3, #0
 801870c:	d009      	beq.n	8018722 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801870e:	69fb      	ldr	r3, [r7, #28]
 8018710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018712:	7b5a      	ldrb	r2, [r3, #13]
 8018714:	69fb      	ldr	r3, [r7, #28]
 8018716:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018718:	f042 0220 	orr.w	r2, r2, #32
 801871c:	b2d2      	uxtb	r2, r2
 801871e:	735a      	strb	r2, [r3, #13]
 8018720:	e022      	b.n	8018768 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8018722:	69fb      	ldr	r3, [r7, #28]
 8018724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018726:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801872a:	d005      	beq.n	8018738 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801872c:	69fb      	ldr	r3, [r7, #28]
 801872e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018730:	3301      	adds	r3, #1
 8018732:	b29a      	uxth	r2, r3
 8018734:	69fb      	ldr	r3, [r7, #28]
 8018736:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8018738:	69fb      	ldr	r3, [r7, #28]
 801873a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801873e:	2b00      	cmp	r3, #0
 8018740:	d00b      	beq.n	801875a <tcp_input+0x6fa>
 8018742:	69fb      	ldr	r3, [r7, #28]
 8018744:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018748:	69fb      	ldr	r3, [r7, #28]
 801874a:	6918      	ldr	r0, [r3, #16]
 801874c:	2300      	movs	r3, #0
 801874e:	2200      	movs	r2, #0
 8018750:	69f9      	ldr	r1, [r7, #28]
 8018752:	47a0      	blx	r4
 8018754:	4603      	mov	r3, r0
 8018756:	74fb      	strb	r3, [r7, #19]
 8018758:	e001      	b.n	801875e <tcp_input+0x6fe>
 801875a:	2300      	movs	r3, #0
 801875c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801875e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018762:	f113 0f0d 	cmn.w	r3, #13
 8018766:	d016      	beq.n	8018796 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8018768:	4b33      	ldr	r3, [pc, #204]	; (8018838 <tcp_input+0x7d8>)
 801876a:	2200      	movs	r2, #0
 801876c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801876e:	69f8      	ldr	r0, [r7, #28]
 8018770:	f000 f880 	bl	8018874 <tcp_input_delayed_close>
 8018774:	4603      	mov	r3, r0
 8018776:	2b00      	cmp	r3, #0
 8018778:	d10f      	bne.n	801879a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801877a:	69f8      	ldr	r0, [r7, #28]
 801877c:	f002 ff10 	bl	801b5a0 <tcp_output>
 8018780:	e00c      	b.n	801879c <tcp_input+0x73c>
        goto aborted;
 8018782:	bf00      	nop
 8018784:	e00a      	b.n	801879c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8018786:	bf00      	nop
 8018788:	e008      	b.n	801879c <tcp_input+0x73c>
              goto aborted;
 801878a:	bf00      	nop
 801878c:	e006      	b.n	801879c <tcp_input+0x73c>
          goto aborted;
 801878e:	bf00      	nop
 8018790:	e004      	b.n	801879c <tcp_input+0x73c>
            goto aborted;
 8018792:	bf00      	nop
 8018794:	e002      	b.n	801879c <tcp_input+0x73c>
              goto aborted;
 8018796:	bf00      	nop
 8018798:	e000      	b.n	801879c <tcp_input+0x73c>
          goto aborted;
 801879a:	bf00      	nop
    tcp_input_pcb = NULL;
 801879c:	4b26      	ldr	r3, [pc, #152]	; (8018838 <tcp_input+0x7d8>)
 801879e:	2200      	movs	r2, #0
 80187a0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80187a2:	4b29      	ldr	r3, [pc, #164]	; (8018848 <tcp_input+0x7e8>)
 80187a4:	2200      	movs	r2, #0
 80187a6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80187a8:	4b2b      	ldr	r3, [pc, #172]	; (8018858 <tcp_input+0x7f8>)
 80187aa:	685b      	ldr	r3, [r3, #4]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d03f      	beq.n	8018830 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80187b0:	4b29      	ldr	r3, [pc, #164]	; (8018858 <tcp_input+0x7f8>)
 80187b2:	685b      	ldr	r3, [r3, #4]
 80187b4:	4618      	mov	r0, r3
 80187b6:	f7fd fb79 	bl	8015eac <pbuf_free>
      inseg.p = NULL;
 80187ba:	4b27      	ldr	r3, [pc, #156]	; (8018858 <tcp_input+0x7f8>)
 80187bc:	2200      	movs	r2, #0
 80187be:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80187c0:	e036      	b.n	8018830 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80187c2:	4b26      	ldr	r3, [pc, #152]	; (801885c <tcp_input+0x7fc>)
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	899b      	ldrh	r3, [r3, #12]
 80187c8:	b29b      	uxth	r3, r3
 80187ca:	4618      	mov	r0, r3
 80187cc:	f7fb ff7a 	bl	80146c4 <lwip_htons>
 80187d0:	4603      	mov	r3, r0
 80187d2:	b2db      	uxtb	r3, r3
 80187d4:	f003 0304 	and.w	r3, r3, #4
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d118      	bne.n	801880e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80187dc:	4b20      	ldr	r3, [pc, #128]	; (8018860 <tcp_input+0x800>)
 80187de:	6819      	ldr	r1, [r3, #0]
 80187e0:	4b20      	ldr	r3, [pc, #128]	; (8018864 <tcp_input+0x804>)
 80187e2:	881b      	ldrh	r3, [r3, #0]
 80187e4:	461a      	mov	r2, r3
 80187e6:	4b20      	ldr	r3, [pc, #128]	; (8018868 <tcp_input+0x808>)
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80187ec:	4b1b      	ldr	r3, [pc, #108]	; (801885c <tcp_input+0x7fc>)
 80187ee:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80187f0:	885b      	ldrh	r3, [r3, #2]
 80187f2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80187f4:	4a19      	ldr	r2, [pc, #100]	; (801885c <tcp_input+0x7fc>)
 80187f6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80187f8:	8812      	ldrh	r2, [r2, #0]
 80187fa:	b292      	uxth	r2, r2
 80187fc:	9202      	str	r2, [sp, #8]
 80187fe:	9301      	str	r3, [sp, #4]
 8018800:	4b1a      	ldr	r3, [pc, #104]	; (801886c <tcp_input+0x80c>)
 8018802:	9300      	str	r3, [sp, #0]
 8018804:	4b1a      	ldr	r3, [pc, #104]	; (8018870 <tcp_input+0x810>)
 8018806:	4602      	mov	r2, r0
 8018808:	2000      	movs	r0, #0
 801880a:	f003 fc7d 	bl	801c108 <tcp_rst>
    pbuf_free(p);
 801880e:	6878      	ldr	r0, [r7, #4]
 8018810:	f7fd fb4c 	bl	8015eac <pbuf_free>
  return;
 8018814:	e00c      	b.n	8018830 <tcp_input+0x7d0>
    goto dropped;
 8018816:	bf00      	nop
 8018818:	e006      	b.n	8018828 <tcp_input+0x7c8>
    goto dropped;
 801881a:	bf00      	nop
 801881c:	e004      	b.n	8018828 <tcp_input+0x7c8>
    goto dropped;
 801881e:	bf00      	nop
 8018820:	e002      	b.n	8018828 <tcp_input+0x7c8>
      goto dropped;
 8018822:	bf00      	nop
 8018824:	e000      	b.n	8018828 <tcp_input+0x7c8>
      goto dropped;
 8018826:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8018828:	6878      	ldr	r0, [r7, #4]
 801882a:	f7fd fb3f 	bl	8015eac <pbuf_free>
 801882e:	e000      	b.n	8018832 <tcp_input+0x7d2>
  return;
 8018830:	bf00      	nop
}
 8018832:	3724      	adds	r7, #36	; 0x24
 8018834:	46bd      	mov	sp, r7
 8018836:	bd90      	pop	{r4, r7, pc}
 8018838:	20014bc8 	.word	0x20014bc8
 801883c:	2000c829 	.word	0x2000c829
 8018840:	20014bb4 	.word	0x20014bb4
 8018844:	2000c824 	.word	0x2000c824
 8018848:	2000c82c 	.word	0x2000c82c
 801884c:	08022b0c 	.word	0x08022b0c
 8018850:	08022cc0 	.word	0x08022cc0
 8018854:	08022b58 	.word	0x08022b58
 8018858:	2000c7fc 	.word	0x2000c7fc
 801885c:	2000c80c 	.word	0x2000c80c
 8018860:	2000c820 	.word	0x2000c820
 8018864:	2000c826 	.word	0x2000c826
 8018868:	2000c81c 	.word	0x2000c81c
 801886c:	200114b0 	.word	0x200114b0
 8018870:	200114b4 	.word	0x200114b4

08018874 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8018874:	b580      	push	{r7, lr}
 8018876:	b082      	sub	sp, #8
 8018878:	af00      	add	r7, sp, #0
 801887a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	2b00      	cmp	r3, #0
 8018880:	d106      	bne.n	8018890 <tcp_input_delayed_close+0x1c>
 8018882:	4b17      	ldr	r3, [pc, #92]	; (80188e0 <tcp_input_delayed_close+0x6c>)
 8018884:	f240 225a 	movw	r2, #602	; 0x25a
 8018888:	4916      	ldr	r1, [pc, #88]	; (80188e4 <tcp_input_delayed_close+0x70>)
 801888a:	4817      	ldr	r0, [pc, #92]	; (80188e8 <tcp_input_delayed_close+0x74>)
 801888c:	f006 fd6e 	bl	801f36c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8018890:	4b16      	ldr	r3, [pc, #88]	; (80188ec <tcp_input_delayed_close+0x78>)
 8018892:	781b      	ldrb	r3, [r3, #0]
 8018894:	f003 0310 	and.w	r3, r3, #16
 8018898:	2b00      	cmp	r3, #0
 801889a:	d01c      	beq.n	80188d6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	8b5b      	ldrh	r3, [r3, #26]
 80188a0:	f003 0310 	and.w	r3, r3, #16
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d10d      	bne.n	80188c4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d008      	beq.n	80188c4 <tcp_input_delayed_close+0x50>
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80188b8:	687a      	ldr	r2, [r7, #4]
 80188ba:	6912      	ldr	r2, [r2, #16]
 80188bc:	f06f 010e 	mvn.w	r1, #14
 80188c0:	4610      	mov	r0, r2
 80188c2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80188c4:	6879      	ldr	r1, [r7, #4]
 80188c6:	480a      	ldr	r0, [pc, #40]	; (80188f0 <tcp_input_delayed_close+0x7c>)
 80188c8:	f7ff fa52 	bl	8017d70 <tcp_pcb_remove>
    tcp_free(pcb);
 80188cc:	6878      	ldr	r0, [r7, #4]
 80188ce:	f7fd fd99 	bl	8016404 <tcp_free>
    return 1;
 80188d2:	2301      	movs	r3, #1
 80188d4:	e000      	b.n	80188d8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80188d6:	2300      	movs	r3, #0
}
 80188d8:	4618      	mov	r0, r3
 80188da:	3708      	adds	r7, #8
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}
 80188e0:	08022b0c 	.word	0x08022b0c
 80188e4:	08022cdc 	.word	0x08022cdc
 80188e8:	08022b58 	.word	0x08022b58
 80188ec:	2000c829 	.word	0x2000c829
 80188f0:	20014bb4 	.word	0x20014bb4

080188f4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80188f4:	b590      	push	{r4, r7, lr}
 80188f6:	b08b      	sub	sp, #44	; 0x2c
 80188f8:	af04      	add	r7, sp, #16
 80188fa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80188fc:	4b6f      	ldr	r3, [pc, #444]	; (8018abc <tcp_listen_input+0x1c8>)
 80188fe:	781b      	ldrb	r3, [r3, #0]
 8018900:	f003 0304 	and.w	r3, r3, #4
 8018904:	2b00      	cmp	r3, #0
 8018906:	f040 80d2 	bne.w	8018aae <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d106      	bne.n	801891e <tcp_listen_input+0x2a>
 8018910:	4b6b      	ldr	r3, [pc, #428]	; (8018ac0 <tcp_listen_input+0x1cc>)
 8018912:	f240 2281 	movw	r2, #641	; 0x281
 8018916:	496b      	ldr	r1, [pc, #428]	; (8018ac4 <tcp_listen_input+0x1d0>)
 8018918:	486b      	ldr	r0, [pc, #428]	; (8018ac8 <tcp_listen_input+0x1d4>)
 801891a:	f006 fd27 	bl	801f36c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801891e:	4b67      	ldr	r3, [pc, #412]	; (8018abc <tcp_listen_input+0x1c8>)
 8018920:	781b      	ldrb	r3, [r3, #0]
 8018922:	f003 0310 	and.w	r3, r3, #16
 8018926:	2b00      	cmp	r3, #0
 8018928:	d019      	beq.n	801895e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801892a:	4b68      	ldr	r3, [pc, #416]	; (8018acc <tcp_listen_input+0x1d8>)
 801892c:	6819      	ldr	r1, [r3, #0]
 801892e:	4b68      	ldr	r3, [pc, #416]	; (8018ad0 <tcp_listen_input+0x1dc>)
 8018930:	881b      	ldrh	r3, [r3, #0]
 8018932:	461a      	mov	r2, r3
 8018934:	4b67      	ldr	r3, [pc, #412]	; (8018ad4 <tcp_listen_input+0x1e0>)
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801893a:	4b67      	ldr	r3, [pc, #412]	; (8018ad8 <tcp_listen_input+0x1e4>)
 801893c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801893e:	885b      	ldrh	r3, [r3, #2]
 8018940:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018942:	4a65      	ldr	r2, [pc, #404]	; (8018ad8 <tcp_listen_input+0x1e4>)
 8018944:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018946:	8812      	ldrh	r2, [r2, #0]
 8018948:	b292      	uxth	r2, r2
 801894a:	9202      	str	r2, [sp, #8]
 801894c:	9301      	str	r3, [sp, #4]
 801894e:	4b63      	ldr	r3, [pc, #396]	; (8018adc <tcp_listen_input+0x1e8>)
 8018950:	9300      	str	r3, [sp, #0]
 8018952:	4b63      	ldr	r3, [pc, #396]	; (8018ae0 <tcp_listen_input+0x1ec>)
 8018954:	4602      	mov	r2, r0
 8018956:	6878      	ldr	r0, [r7, #4]
 8018958:	f003 fbd6 	bl	801c108 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801895c:	e0a9      	b.n	8018ab2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801895e:	4b57      	ldr	r3, [pc, #348]	; (8018abc <tcp_listen_input+0x1c8>)
 8018960:	781b      	ldrb	r3, [r3, #0]
 8018962:	f003 0302 	and.w	r3, r3, #2
 8018966:	2b00      	cmp	r3, #0
 8018968:	f000 80a3 	beq.w	8018ab2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	7d5b      	ldrb	r3, [r3, #21]
 8018970:	4618      	mov	r0, r3
 8018972:	f7ff f85b 	bl	8017a2c <tcp_alloc>
 8018976:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018978:	697b      	ldr	r3, [r7, #20]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d111      	bne.n	80189a2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	699b      	ldr	r3, [r3, #24]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d00a      	beq.n	801899c <tcp_listen_input+0xa8>
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	699b      	ldr	r3, [r3, #24]
 801898a:	687a      	ldr	r2, [r7, #4]
 801898c:	6910      	ldr	r0, [r2, #16]
 801898e:	f04f 32ff 	mov.w	r2, #4294967295
 8018992:	2100      	movs	r1, #0
 8018994:	4798      	blx	r3
 8018996:	4603      	mov	r3, r0
 8018998:	73bb      	strb	r3, [r7, #14]
      return;
 801899a:	e08b      	b.n	8018ab4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801899c:	23f0      	movs	r3, #240	; 0xf0
 801899e:	73bb      	strb	r3, [r7, #14]
      return;
 80189a0:	e088      	b.n	8018ab4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80189a2:	4b50      	ldr	r3, [pc, #320]	; (8018ae4 <tcp_listen_input+0x1f0>)
 80189a4:	695a      	ldr	r2, [r3, #20]
 80189a6:	697b      	ldr	r3, [r7, #20]
 80189a8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80189aa:	4b4e      	ldr	r3, [pc, #312]	; (8018ae4 <tcp_listen_input+0x1f0>)
 80189ac:	691a      	ldr	r2, [r3, #16]
 80189ae:	697b      	ldr	r3, [r7, #20]
 80189b0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	8ada      	ldrh	r2, [r3, #22]
 80189b6:	697b      	ldr	r3, [r7, #20]
 80189b8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80189ba:	4b47      	ldr	r3, [pc, #284]	; (8018ad8 <tcp_listen_input+0x1e4>)
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	881b      	ldrh	r3, [r3, #0]
 80189c0:	b29a      	uxth	r2, r3
 80189c2:	697b      	ldr	r3, [r7, #20]
 80189c4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80189c6:	697b      	ldr	r3, [r7, #20]
 80189c8:	2203      	movs	r2, #3
 80189ca:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80189cc:	4b41      	ldr	r3, [pc, #260]	; (8018ad4 <tcp_listen_input+0x1e0>)
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	1c5a      	adds	r2, r3, #1
 80189d2:	697b      	ldr	r3, [r7, #20]
 80189d4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80189d6:	697b      	ldr	r3, [r7, #20]
 80189d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80189da:	697b      	ldr	r3, [r7, #20]
 80189dc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80189de:	6978      	ldr	r0, [r7, #20]
 80189e0:	f7ff fa5a 	bl	8017e98 <tcp_next_iss>
 80189e4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80189e6:	697b      	ldr	r3, [r7, #20]
 80189e8:	693a      	ldr	r2, [r7, #16]
 80189ea:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80189ec:	697b      	ldr	r3, [r7, #20]
 80189ee:	693a      	ldr	r2, [r7, #16]
 80189f0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80189f2:	697b      	ldr	r3, [r7, #20]
 80189f4:	693a      	ldr	r2, [r7, #16]
 80189f6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80189f8:	697b      	ldr	r3, [r7, #20]
 80189fa:	693a      	ldr	r2, [r7, #16]
 80189fc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80189fe:	4b35      	ldr	r3, [pc, #212]	; (8018ad4 <tcp_listen_input+0x1e0>)
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	1e5a      	subs	r2, r3, #1
 8018a04:	697b      	ldr	r3, [r7, #20]
 8018a06:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	691a      	ldr	r2, [r3, #16]
 8018a0c:	697b      	ldr	r3, [r7, #20]
 8018a0e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018a10:	697b      	ldr	r3, [r7, #20]
 8018a12:	687a      	ldr	r2, [r7, #4]
 8018a14:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	7a5b      	ldrb	r3, [r3, #9]
 8018a1a:	f003 030c 	and.w	r3, r3, #12
 8018a1e:	b2da      	uxtb	r2, r3
 8018a20:	697b      	ldr	r3, [r7, #20]
 8018a22:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	7a1a      	ldrb	r2, [r3, #8]
 8018a28:	697b      	ldr	r3, [r7, #20]
 8018a2a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018a2c:	4b2e      	ldr	r3, [pc, #184]	; (8018ae8 <tcp_listen_input+0x1f4>)
 8018a2e:	681a      	ldr	r2, [r3, #0]
 8018a30:	697b      	ldr	r3, [r7, #20]
 8018a32:	60da      	str	r2, [r3, #12]
 8018a34:	4a2c      	ldr	r2, [pc, #176]	; (8018ae8 <tcp_listen_input+0x1f4>)
 8018a36:	697b      	ldr	r3, [r7, #20]
 8018a38:	6013      	str	r3, [r2, #0]
 8018a3a:	f003 fd27 	bl	801c48c <tcp_timer_needed>
 8018a3e:	4b2b      	ldr	r3, [pc, #172]	; (8018aec <tcp_listen_input+0x1f8>)
 8018a40:	2201      	movs	r2, #1
 8018a42:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018a44:	6978      	ldr	r0, [r7, #20]
 8018a46:	f001 fd8d 	bl	801a564 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8018a4a:	4b23      	ldr	r3, [pc, #140]	; (8018ad8 <tcp_listen_input+0x1e4>)
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	89db      	ldrh	r3, [r3, #14]
 8018a50:	b29a      	uxth	r2, r3
 8018a52:	697b      	ldr	r3, [r7, #20]
 8018a54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018a58:	697b      	ldr	r3, [r7, #20]
 8018a5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018a5e:	697b      	ldr	r3, [r7, #20]
 8018a60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018a64:	697b      	ldr	r3, [r7, #20]
 8018a66:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018a68:	697b      	ldr	r3, [r7, #20]
 8018a6a:	3304      	adds	r3, #4
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f005 f91b 	bl	801dca8 <ip4_route>
 8018a72:	4601      	mov	r1, r0
 8018a74:	697b      	ldr	r3, [r7, #20]
 8018a76:	3304      	adds	r3, #4
 8018a78:	461a      	mov	r2, r3
 8018a7a:	4620      	mov	r0, r4
 8018a7c:	f7ff fa32 	bl	8017ee4 <tcp_eff_send_mss_netif>
 8018a80:	4603      	mov	r3, r0
 8018a82:	461a      	mov	r2, r3
 8018a84:	697b      	ldr	r3, [r7, #20]
 8018a86:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018a88:	2112      	movs	r1, #18
 8018a8a:	6978      	ldr	r0, [r7, #20]
 8018a8c:	f002 fc9a 	bl	801b3c4 <tcp_enqueue_flags>
 8018a90:	4603      	mov	r3, r0
 8018a92:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d004      	beq.n	8018aa6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8018a9c:	2100      	movs	r1, #0
 8018a9e:	6978      	ldr	r0, [r7, #20]
 8018aa0:	f7fd feda 	bl	8016858 <tcp_abandon>
      return;
 8018aa4:	e006      	b.n	8018ab4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8018aa6:	6978      	ldr	r0, [r7, #20]
 8018aa8:	f002 fd7a 	bl	801b5a0 <tcp_output>
  return;
 8018aac:	e001      	b.n	8018ab2 <tcp_listen_input+0x1be>
    return;
 8018aae:	bf00      	nop
 8018ab0:	e000      	b.n	8018ab4 <tcp_listen_input+0x1c0>
  return;
 8018ab2:	bf00      	nop
}
 8018ab4:	371c      	adds	r7, #28
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	bd90      	pop	{r4, r7, pc}
 8018aba:	bf00      	nop
 8018abc:	2000c828 	.word	0x2000c828
 8018ac0:	08022b0c 	.word	0x08022b0c
 8018ac4:	08022d04 	.word	0x08022d04
 8018ac8:	08022b58 	.word	0x08022b58
 8018acc:	2000c820 	.word	0x2000c820
 8018ad0:	2000c826 	.word	0x2000c826
 8018ad4:	2000c81c 	.word	0x2000c81c
 8018ad8:	2000c80c 	.word	0x2000c80c
 8018adc:	200114b0 	.word	0x200114b0
 8018ae0:	200114b4 	.word	0x200114b4
 8018ae4:	200114a0 	.word	0x200114a0
 8018ae8:	20014bb4 	.word	0x20014bb4
 8018aec:	20014bb0 	.word	0x20014bb0

08018af0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b086      	sub	sp, #24
 8018af4:	af04      	add	r7, sp, #16
 8018af6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018af8:	4b2f      	ldr	r3, [pc, #188]	; (8018bb8 <tcp_timewait_input+0xc8>)
 8018afa:	781b      	ldrb	r3, [r3, #0]
 8018afc:	f003 0304 	and.w	r3, r3, #4
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d153      	bne.n	8018bac <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d106      	bne.n	8018b18 <tcp_timewait_input+0x28>
 8018b0a:	4b2c      	ldr	r3, [pc, #176]	; (8018bbc <tcp_timewait_input+0xcc>)
 8018b0c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018b10:	492b      	ldr	r1, [pc, #172]	; (8018bc0 <tcp_timewait_input+0xd0>)
 8018b12:	482c      	ldr	r0, [pc, #176]	; (8018bc4 <tcp_timewait_input+0xd4>)
 8018b14:	f006 fc2a 	bl	801f36c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018b18:	4b27      	ldr	r3, [pc, #156]	; (8018bb8 <tcp_timewait_input+0xc8>)
 8018b1a:	781b      	ldrb	r3, [r3, #0]
 8018b1c:	f003 0302 	and.w	r3, r3, #2
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d02a      	beq.n	8018b7a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018b24:	4b28      	ldr	r3, [pc, #160]	; (8018bc8 <tcp_timewait_input+0xd8>)
 8018b26:	681a      	ldr	r2, [r3, #0]
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b2c:	1ad3      	subs	r3, r2, r3
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	db2d      	blt.n	8018b8e <tcp_timewait_input+0x9e>
 8018b32:	4b25      	ldr	r3, [pc, #148]	; (8018bc8 <tcp_timewait_input+0xd8>)
 8018b34:	681a      	ldr	r2, [r3, #0]
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b3a:	6879      	ldr	r1, [r7, #4]
 8018b3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018b3e:	440b      	add	r3, r1
 8018b40:	1ad3      	subs	r3, r2, r3
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	dc23      	bgt.n	8018b8e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b46:	4b21      	ldr	r3, [pc, #132]	; (8018bcc <tcp_timewait_input+0xdc>)
 8018b48:	6819      	ldr	r1, [r3, #0]
 8018b4a:	4b21      	ldr	r3, [pc, #132]	; (8018bd0 <tcp_timewait_input+0xe0>)
 8018b4c:	881b      	ldrh	r3, [r3, #0]
 8018b4e:	461a      	mov	r2, r3
 8018b50:	4b1d      	ldr	r3, [pc, #116]	; (8018bc8 <tcp_timewait_input+0xd8>)
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b56:	4b1f      	ldr	r3, [pc, #124]	; (8018bd4 <tcp_timewait_input+0xe4>)
 8018b58:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b5a:	885b      	ldrh	r3, [r3, #2]
 8018b5c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b5e:	4a1d      	ldr	r2, [pc, #116]	; (8018bd4 <tcp_timewait_input+0xe4>)
 8018b60:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b62:	8812      	ldrh	r2, [r2, #0]
 8018b64:	b292      	uxth	r2, r2
 8018b66:	9202      	str	r2, [sp, #8]
 8018b68:	9301      	str	r3, [sp, #4]
 8018b6a:	4b1b      	ldr	r3, [pc, #108]	; (8018bd8 <tcp_timewait_input+0xe8>)
 8018b6c:	9300      	str	r3, [sp, #0]
 8018b6e:	4b1b      	ldr	r3, [pc, #108]	; (8018bdc <tcp_timewait_input+0xec>)
 8018b70:	4602      	mov	r2, r0
 8018b72:	6878      	ldr	r0, [r7, #4]
 8018b74:	f003 fac8 	bl	801c108 <tcp_rst>
      return;
 8018b78:	e01b      	b.n	8018bb2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8018b7a:	4b0f      	ldr	r3, [pc, #60]	; (8018bb8 <tcp_timewait_input+0xc8>)
 8018b7c:	781b      	ldrb	r3, [r3, #0]
 8018b7e:	f003 0301 	and.w	r3, r3, #1
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d003      	beq.n	8018b8e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018b86:	4b16      	ldr	r3, [pc, #88]	; (8018be0 <tcp_timewait_input+0xf0>)
 8018b88:	681a      	ldr	r2, [r3, #0]
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018b8e:	4b10      	ldr	r3, [pc, #64]	; (8018bd0 <tcp_timewait_input+0xe0>)
 8018b90:	881b      	ldrh	r3, [r3, #0]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d00c      	beq.n	8018bb0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	8b5b      	ldrh	r3, [r3, #26]
 8018b9a:	f043 0302 	orr.w	r3, r3, #2
 8018b9e:	b29a      	uxth	r2, r3
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018ba4:	6878      	ldr	r0, [r7, #4]
 8018ba6:	f002 fcfb 	bl	801b5a0 <tcp_output>
  }
  return;
 8018baa:	e001      	b.n	8018bb0 <tcp_timewait_input+0xc0>
    return;
 8018bac:	bf00      	nop
 8018bae:	e000      	b.n	8018bb2 <tcp_timewait_input+0xc2>
  return;
 8018bb0:	bf00      	nop
}
 8018bb2:	3708      	adds	r7, #8
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	bd80      	pop	{r7, pc}
 8018bb8:	2000c828 	.word	0x2000c828
 8018bbc:	08022b0c 	.word	0x08022b0c
 8018bc0:	08022d24 	.word	0x08022d24
 8018bc4:	08022b58 	.word	0x08022b58
 8018bc8:	2000c81c 	.word	0x2000c81c
 8018bcc:	2000c820 	.word	0x2000c820
 8018bd0:	2000c826 	.word	0x2000c826
 8018bd4:	2000c80c 	.word	0x2000c80c
 8018bd8:	200114b0 	.word	0x200114b0
 8018bdc:	200114b4 	.word	0x200114b4
 8018be0:	20014bb8 	.word	0x20014bb8

08018be4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018be4:	b590      	push	{r4, r7, lr}
 8018be6:	b08d      	sub	sp, #52	; 0x34
 8018be8:	af04      	add	r7, sp, #16
 8018bea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018bec:	2300      	movs	r3, #0
 8018bee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d106      	bne.n	8018c08 <tcp_process+0x24>
 8018bfa:	4ba5      	ldr	r3, [pc, #660]	; (8018e90 <tcp_process+0x2ac>)
 8018bfc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8018c00:	49a4      	ldr	r1, [pc, #656]	; (8018e94 <tcp_process+0x2b0>)
 8018c02:	48a5      	ldr	r0, [pc, #660]	; (8018e98 <tcp_process+0x2b4>)
 8018c04:	f006 fbb2 	bl	801f36c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018c08:	4ba4      	ldr	r3, [pc, #656]	; (8018e9c <tcp_process+0x2b8>)
 8018c0a:	781b      	ldrb	r3, [r3, #0]
 8018c0c:	f003 0304 	and.w	r3, r3, #4
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d04e      	beq.n	8018cb2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	7d1b      	ldrb	r3, [r3, #20]
 8018c18:	2b02      	cmp	r3, #2
 8018c1a:	d108      	bne.n	8018c2e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018c20:	4b9f      	ldr	r3, [pc, #636]	; (8018ea0 <tcp_process+0x2bc>)
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	429a      	cmp	r2, r3
 8018c26:	d123      	bne.n	8018c70 <tcp_process+0x8c>
        acceptable = 1;
 8018c28:	2301      	movs	r3, #1
 8018c2a:	76fb      	strb	r3, [r7, #27]
 8018c2c:	e020      	b.n	8018c70 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018c32:	4b9c      	ldr	r3, [pc, #624]	; (8018ea4 <tcp_process+0x2c0>)
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	429a      	cmp	r2, r3
 8018c38:	d102      	bne.n	8018c40 <tcp_process+0x5c>
        acceptable = 1;
 8018c3a:	2301      	movs	r3, #1
 8018c3c:	76fb      	strb	r3, [r7, #27]
 8018c3e:	e017      	b.n	8018c70 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018c40:	4b98      	ldr	r3, [pc, #608]	; (8018ea4 <tcp_process+0x2c0>)
 8018c42:	681a      	ldr	r2, [r3, #0]
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c48:	1ad3      	subs	r3, r2, r3
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	db10      	blt.n	8018c70 <tcp_process+0x8c>
 8018c4e:	4b95      	ldr	r3, [pc, #596]	; (8018ea4 <tcp_process+0x2c0>)
 8018c50:	681a      	ldr	r2, [r3, #0]
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c56:	6879      	ldr	r1, [r7, #4]
 8018c58:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018c5a:	440b      	add	r3, r1
 8018c5c:	1ad3      	subs	r3, r2, r3
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	dc06      	bgt.n	8018c70 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	8b5b      	ldrh	r3, [r3, #26]
 8018c66:	f043 0302 	orr.w	r3, r3, #2
 8018c6a:	b29a      	uxth	r2, r3
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018c70:	7efb      	ldrb	r3, [r7, #27]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d01b      	beq.n	8018cae <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	7d1b      	ldrb	r3, [r3, #20]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d106      	bne.n	8018c8c <tcp_process+0xa8>
 8018c7e:	4b84      	ldr	r3, [pc, #528]	; (8018e90 <tcp_process+0x2ac>)
 8018c80:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018c84:	4988      	ldr	r1, [pc, #544]	; (8018ea8 <tcp_process+0x2c4>)
 8018c86:	4884      	ldr	r0, [pc, #528]	; (8018e98 <tcp_process+0x2b4>)
 8018c88:	f006 fb70 	bl	801f36c <iprintf>
      recv_flags |= TF_RESET;
 8018c8c:	4b87      	ldr	r3, [pc, #540]	; (8018eac <tcp_process+0x2c8>)
 8018c8e:	781b      	ldrb	r3, [r3, #0]
 8018c90:	f043 0308 	orr.w	r3, r3, #8
 8018c94:	b2da      	uxtb	r2, r3
 8018c96:	4b85      	ldr	r3, [pc, #532]	; (8018eac <tcp_process+0x2c8>)
 8018c98:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	8b5b      	ldrh	r3, [r3, #26]
 8018c9e:	f023 0301 	bic.w	r3, r3, #1
 8018ca2:	b29a      	uxth	r2, r3
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018ca8:	f06f 030d 	mvn.w	r3, #13
 8018cac:	e37a      	b.n	80193a4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018cae:	2300      	movs	r3, #0
 8018cb0:	e378      	b.n	80193a4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018cb2:	4b7a      	ldr	r3, [pc, #488]	; (8018e9c <tcp_process+0x2b8>)
 8018cb4:	781b      	ldrb	r3, [r3, #0]
 8018cb6:	f003 0302 	and.w	r3, r3, #2
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d010      	beq.n	8018ce0 <tcp_process+0xfc>
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	7d1b      	ldrb	r3, [r3, #20]
 8018cc2:	2b02      	cmp	r3, #2
 8018cc4:	d00c      	beq.n	8018ce0 <tcp_process+0xfc>
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	7d1b      	ldrb	r3, [r3, #20]
 8018cca:	2b03      	cmp	r3, #3
 8018ccc:	d008      	beq.n	8018ce0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	8b5b      	ldrh	r3, [r3, #26]
 8018cd2:	f043 0302 	orr.w	r3, r3, #2
 8018cd6:	b29a      	uxth	r2, r3
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018cdc:	2300      	movs	r3, #0
 8018cde:	e361      	b.n	80193a4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	8b5b      	ldrh	r3, [r3, #26]
 8018ce4:	f003 0310 	and.w	r3, r3, #16
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d103      	bne.n	8018cf4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018cec:	4b70      	ldr	r3, [pc, #448]	; (8018eb0 <tcp_process+0x2cc>)
 8018cee:	681a      	ldr	r2, [r3, #0]
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	2200      	movs	r2, #0
 8018cf8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	2200      	movs	r2, #0
 8018d00:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8018d04:	6878      	ldr	r0, [r7, #4]
 8018d06:	f001 fc2d 	bl	801a564 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	7d1b      	ldrb	r3, [r3, #20]
 8018d0e:	3b02      	subs	r3, #2
 8018d10:	2b07      	cmp	r3, #7
 8018d12:	f200 8337 	bhi.w	8019384 <tcp_process+0x7a0>
 8018d16:	a201      	add	r2, pc, #4	; (adr r2, 8018d1c <tcp_process+0x138>)
 8018d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d1c:	08018d3d 	.word	0x08018d3d
 8018d20:	08018f6d 	.word	0x08018f6d
 8018d24:	080190e5 	.word	0x080190e5
 8018d28:	0801910f 	.word	0x0801910f
 8018d2c:	08019233 	.word	0x08019233
 8018d30:	080190e5 	.word	0x080190e5
 8018d34:	080192bf 	.word	0x080192bf
 8018d38:	0801934f 	.word	0x0801934f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018d3c:	4b57      	ldr	r3, [pc, #348]	; (8018e9c <tcp_process+0x2b8>)
 8018d3e:	781b      	ldrb	r3, [r3, #0]
 8018d40:	f003 0310 	and.w	r3, r3, #16
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	f000 80e4 	beq.w	8018f12 <tcp_process+0x32e>
 8018d4a:	4b54      	ldr	r3, [pc, #336]	; (8018e9c <tcp_process+0x2b8>)
 8018d4c:	781b      	ldrb	r3, [r3, #0]
 8018d4e:	f003 0302 	and.w	r3, r3, #2
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	f000 80dd 	beq.w	8018f12 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d5c:	1c5a      	adds	r2, r3, #1
 8018d5e:	4b50      	ldr	r3, [pc, #320]	; (8018ea0 <tcp_process+0x2bc>)
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	429a      	cmp	r2, r3
 8018d64:	f040 80d5 	bne.w	8018f12 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018d68:	4b4e      	ldr	r3, [pc, #312]	; (8018ea4 <tcp_process+0x2c0>)
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	1c5a      	adds	r2, r3, #1
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8018d7a:	4b49      	ldr	r3, [pc, #292]	; (8018ea0 <tcp_process+0x2bc>)
 8018d7c:	681a      	ldr	r2, [r3, #0]
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018d82:	4b4c      	ldr	r3, [pc, #304]	; (8018eb4 <tcp_process+0x2d0>)
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	89db      	ldrh	r3, [r3, #14]
 8018d88:	b29a      	uxth	r2, r3
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018d9c:	4b41      	ldr	r3, [pc, #260]	; (8018ea4 <tcp_process+0x2c0>)
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	1e5a      	subs	r2, r3, #1
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	2204      	movs	r2, #4
 8018daa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	3304      	adds	r3, #4
 8018db4:	4618      	mov	r0, r3
 8018db6:	f004 ff77 	bl	801dca8 <ip4_route>
 8018dba:	4601      	mov	r1, r0
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	3304      	adds	r3, #4
 8018dc0:	461a      	mov	r2, r3
 8018dc2:	4620      	mov	r0, r4
 8018dc4:	f7ff f88e 	bl	8017ee4 <tcp_eff_send_mss_netif>
 8018dc8:	4603      	mov	r3, r0
 8018dca:	461a      	mov	r2, r3
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018dd4:	009a      	lsls	r2, r3, #2
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018dda:	005b      	lsls	r3, r3, #1
 8018ddc:	f241 111c 	movw	r1, #4380	; 0x111c
 8018de0:	428b      	cmp	r3, r1
 8018de2:	bf38      	it	cc
 8018de4:	460b      	movcc	r3, r1
 8018de6:	429a      	cmp	r2, r3
 8018de8:	d204      	bcs.n	8018df4 <tcp_process+0x210>
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018dee:	009b      	lsls	r3, r3, #2
 8018df0:	b29b      	uxth	r3, r3
 8018df2:	e00d      	b.n	8018e10 <tcp_process+0x22c>
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018df8:	005b      	lsls	r3, r3, #1
 8018dfa:	f241 121c 	movw	r2, #4380	; 0x111c
 8018dfe:	4293      	cmp	r3, r2
 8018e00:	d904      	bls.n	8018e0c <tcp_process+0x228>
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e06:	005b      	lsls	r3, r3, #1
 8018e08:	b29b      	uxth	r3, r3
 8018e0a:	e001      	b.n	8018e10 <tcp_process+0x22c>
 8018e0c:	f241 131c 	movw	r3, #4380	; 0x111c
 8018e10:	687a      	ldr	r2, [r7, #4]
 8018e12:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d106      	bne.n	8018e2e <tcp_process+0x24a>
 8018e20:	4b1b      	ldr	r3, [pc, #108]	; (8018e90 <tcp_process+0x2ac>)
 8018e22:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018e26:	4924      	ldr	r1, [pc, #144]	; (8018eb8 <tcp_process+0x2d4>)
 8018e28:	481b      	ldr	r0, [pc, #108]	; (8018e98 <tcp_process+0x2b4>)
 8018e2a:	f006 fa9f 	bl	801f36c <iprintf>
        --pcb->snd_queuelen;
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018e34:	3b01      	subs	r3, #1
 8018e36:	b29a      	uxth	r2, r3
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e42:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018e44:	69fb      	ldr	r3, [r7, #28]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d111      	bne.n	8018e6e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018e4e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018e50:	69fb      	ldr	r3, [r7, #28]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d106      	bne.n	8018e64 <tcp_process+0x280>
 8018e56:	4b0e      	ldr	r3, [pc, #56]	; (8018e90 <tcp_process+0x2ac>)
 8018e58:	f44f 725d 	mov.w	r2, #884	; 0x374
 8018e5c:	4917      	ldr	r1, [pc, #92]	; (8018ebc <tcp_process+0x2d8>)
 8018e5e:	480e      	ldr	r0, [pc, #56]	; (8018e98 <tcp_process+0x2b4>)
 8018e60:	f006 fa84 	bl	801f36c <iprintf>
          pcb->unsent = rseg->next;
 8018e64:	69fb      	ldr	r3, [r7, #28]
 8018e66:	681a      	ldr	r2, [r3, #0]
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	66da      	str	r2, [r3, #108]	; 0x6c
 8018e6c:	e003      	b.n	8018e76 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8018e6e:	69fb      	ldr	r3, [r7, #28]
 8018e70:	681a      	ldr	r2, [r3, #0]
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8018e76:	69f8      	ldr	r0, [r7, #28]
 8018e78:	f7fe fc51 	bl	801771e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d11d      	bne.n	8018ec0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018e8a:	861a      	strh	r2, [r3, #48]	; 0x30
 8018e8c:	e01f      	b.n	8018ece <tcp_process+0x2ea>
 8018e8e:	bf00      	nop
 8018e90:	08022b0c 	.word	0x08022b0c
 8018e94:	08022d44 	.word	0x08022d44
 8018e98:	08022b58 	.word	0x08022b58
 8018e9c:	2000c828 	.word	0x2000c828
 8018ea0:	2000c820 	.word	0x2000c820
 8018ea4:	2000c81c 	.word	0x2000c81c
 8018ea8:	08022d60 	.word	0x08022d60
 8018eac:	2000c829 	.word	0x2000c829
 8018eb0:	20014bb8 	.word	0x20014bb8
 8018eb4:	2000c80c 	.word	0x2000c80c
 8018eb8:	08022d80 	.word	0x08022d80
 8018ebc:	08022d98 	.word	0x08022d98
        } else {
          pcb->rtime = 0;
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	2200      	movs	r2, #0
 8018ec4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	2200      	movs	r2, #0
 8018eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d00a      	beq.n	8018eee <tcp_process+0x30a>
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018ede:	687a      	ldr	r2, [r7, #4]
 8018ee0:	6910      	ldr	r0, [r2, #16]
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	6879      	ldr	r1, [r7, #4]
 8018ee6:	4798      	blx	r3
 8018ee8:	4603      	mov	r3, r0
 8018eea:	76bb      	strb	r3, [r7, #26]
 8018eec:	e001      	b.n	8018ef2 <tcp_process+0x30e>
 8018eee:	2300      	movs	r3, #0
 8018ef0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8018ef2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018ef6:	f113 0f0d 	cmn.w	r3, #13
 8018efa:	d102      	bne.n	8018f02 <tcp_process+0x31e>
          return ERR_ABRT;
 8018efc:	f06f 030c 	mvn.w	r3, #12
 8018f00:	e250      	b.n	80193a4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	8b5b      	ldrh	r3, [r3, #26]
 8018f06:	f043 0302 	orr.w	r3, r3, #2
 8018f0a:	b29a      	uxth	r2, r3
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018f10:	e23a      	b.n	8019388 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018f12:	4b9d      	ldr	r3, [pc, #628]	; (8019188 <tcp_process+0x5a4>)
 8018f14:	781b      	ldrb	r3, [r3, #0]
 8018f16:	f003 0310 	and.w	r3, r3, #16
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	f000 8234 	beq.w	8019388 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018f20:	4b9a      	ldr	r3, [pc, #616]	; (801918c <tcp_process+0x5a8>)
 8018f22:	6819      	ldr	r1, [r3, #0]
 8018f24:	4b9a      	ldr	r3, [pc, #616]	; (8019190 <tcp_process+0x5ac>)
 8018f26:	881b      	ldrh	r3, [r3, #0]
 8018f28:	461a      	mov	r2, r3
 8018f2a:	4b9a      	ldr	r3, [pc, #616]	; (8019194 <tcp_process+0x5b0>)
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018f30:	4b99      	ldr	r3, [pc, #612]	; (8019198 <tcp_process+0x5b4>)
 8018f32:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018f34:	885b      	ldrh	r3, [r3, #2]
 8018f36:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018f38:	4a97      	ldr	r2, [pc, #604]	; (8019198 <tcp_process+0x5b4>)
 8018f3a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018f3c:	8812      	ldrh	r2, [r2, #0]
 8018f3e:	b292      	uxth	r2, r2
 8018f40:	9202      	str	r2, [sp, #8]
 8018f42:	9301      	str	r3, [sp, #4]
 8018f44:	4b95      	ldr	r3, [pc, #596]	; (801919c <tcp_process+0x5b8>)
 8018f46:	9300      	str	r3, [sp, #0]
 8018f48:	4b95      	ldr	r3, [pc, #596]	; (80191a0 <tcp_process+0x5bc>)
 8018f4a:	4602      	mov	r2, r0
 8018f4c:	6878      	ldr	r0, [r7, #4]
 8018f4e:	f003 f8db 	bl	801c108 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018f58:	2b05      	cmp	r3, #5
 8018f5a:	f200 8215 	bhi.w	8019388 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	2200      	movs	r2, #0
 8018f62:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018f64:	6878      	ldr	r0, [r7, #4]
 8018f66:	f002 fea5 	bl	801bcb4 <tcp_rexmit_rto>
      break;
 8018f6a:	e20d      	b.n	8019388 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8018f6c:	4b86      	ldr	r3, [pc, #536]	; (8019188 <tcp_process+0x5a4>)
 8018f6e:	781b      	ldrb	r3, [r3, #0]
 8018f70:	f003 0310 	and.w	r3, r3, #16
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	f000 80a1 	beq.w	80190bc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018f7a:	4b84      	ldr	r3, [pc, #528]	; (801918c <tcp_process+0x5a8>)
 8018f7c:	681a      	ldr	r2, [r3, #0]
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f82:	1ad3      	subs	r3, r2, r3
 8018f84:	3b01      	subs	r3, #1
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	db7e      	blt.n	8019088 <tcp_process+0x4a4>
 8018f8a:	4b80      	ldr	r3, [pc, #512]	; (801918c <tcp_process+0x5a8>)
 8018f8c:	681a      	ldr	r2, [r3, #0]
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f92:	1ad3      	subs	r3, r2, r3
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	dc77      	bgt.n	8019088 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	2204      	movs	r2, #4
 8018f9c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d102      	bne.n	8018fac <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018fa6:	23fa      	movs	r3, #250	; 0xfa
 8018fa8:	76bb      	strb	r3, [r7, #26]
 8018faa:	e01d      	b.n	8018fe8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018fb0:	699b      	ldr	r3, [r3, #24]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d106      	bne.n	8018fc4 <tcp_process+0x3e0>
 8018fb6:	4b7b      	ldr	r3, [pc, #492]	; (80191a4 <tcp_process+0x5c0>)
 8018fb8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8018fbc:	497a      	ldr	r1, [pc, #488]	; (80191a8 <tcp_process+0x5c4>)
 8018fbe:	487b      	ldr	r0, [pc, #492]	; (80191ac <tcp_process+0x5c8>)
 8018fc0:	f006 f9d4 	bl	801f36c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018fc8:	699b      	ldr	r3, [r3, #24]
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d00a      	beq.n	8018fe4 <tcp_process+0x400>
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018fd2:	699b      	ldr	r3, [r3, #24]
 8018fd4:	687a      	ldr	r2, [r7, #4]
 8018fd6:	6910      	ldr	r0, [r2, #16]
 8018fd8:	2200      	movs	r2, #0
 8018fda:	6879      	ldr	r1, [r7, #4]
 8018fdc:	4798      	blx	r3
 8018fde:	4603      	mov	r3, r0
 8018fe0:	76bb      	strb	r3, [r7, #26]
 8018fe2:	e001      	b.n	8018fe8 <tcp_process+0x404>
 8018fe4:	23f0      	movs	r3, #240	; 0xf0
 8018fe6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8018fe8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d00a      	beq.n	8019006 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8018ff0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018ff4:	f113 0f0d 	cmn.w	r3, #13
 8018ff8:	d002      	beq.n	8019000 <tcp_process+0x41c>
              tcp_abort(pcb);
 8018ffa:	6878      	ldr	r0, [r7, #4]
 8018ffc:	f7fd fcea 	bl	80169d4 <tcp_abort>
            }
            return ERR_ABRT;
 8019000:	f06f 030c 	mvn.w	r3, #12
 8019004:	e1ce      	b.n	80193a4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8019006:	6878      	ldr	r0, [r7, #4]
 8019008:	f000 fae0 	bl	80195cc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801900c:	4b68      	ldr	r3, [pc, #416]	; (80191b0 <tcp_process+0x5cc>)
 801900e:	881b      	ldrh	r3, [r3, #0]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d005      	beq.n	8019020 <tcp_process+0x43c>
            recv_acked--;
 8019014:	4b66      	ldr	r3, [pc, #408]	; (80191b0 <tcp_process+0x5cc>)
 8019016:	881b      	ldrh	r3, [r3, #0]
 8019018:	3b01      	subs	r3, #1
 801901a:	b29a      	uxth	r2, r3
 801901c:	4b64      	ldr	r3, [pc, #400]	; (80191b0 <tcp_process+0x5cc>)
 801901e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019024:	009a      	lsls	r2, r3, #2
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801902a:	005b      	lsls	r3, r3, #1
 801902c:	f241 111c 	movw	r1, #4380	; 0x111c
 8019030:	428b      	cmp	r3, r1
 8019032:	bf38      	it	cc
 8019034:	460b      	movcc	r3, r1
 8019036:	429a      	cmp	r2, r3
 8019038:	d204      	bcs.n	8019044 <tcp_process+0x460>
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801903e:	009b      	lsls	r3, r3, #2
 8019040:	b29b      	uxth	r3, r3
 8019042:	e00d      	b.n	8019060 <tcp_process+0x47c>
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019048:	005b      	lsls	r3, r3, #1
 801904a:	f241 121c 	movw	r2, #4380	; 0x111c
 801904e:	4293      	cmp	r3, r2
 8019050:	d904      	bls.n	801905c <tcp_process+0x478>
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019056:	005b      	lsls	r3, r3, #1
 8019058:	b29b      	uxth	r3, r3
 801905a:	e001      	b.n	8019060 <tcp_process+0x47c>
 801905c:	f241 131c 	movw	r3, #4380	; 0x111c
 8019060:	687a      	ldr	r2, [r7, #4]
 8019062:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8019066:	4b53      	ldr	r3, [pc, #332]	; (80191b4 <tcp_process+0x5d0>)
 8019068:	781b      	ldrb	r3, [r3, #0]
 801906a:	f003 0320 	and.w	r3, r3, #32
 801906e:	2b00      	cmp	r3, #0
 8019070:	d037      	beq.n	80190e2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	8b5b      	ldrh	r3, [r3, #26]
 8019076:	f043 0302 	orr.w	r3, r3, #2
 801907a:	b29a      	uxth	r2, r3
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	2207      	movs	r2, #7
 8019084:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8019086:	e02c      	b.n	80190e2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019088:	4b40      	ldr	r3, [pc, #256]	; (801918c <tcp_process+0x5a8>)
 801908a:	6819      	ldr	r1, [r3, #0]
 801908c:	4b40      	ldr	r3, [pc, #256]	; (8019190 <tcp_process+0x5ac>)
 801908e:	881b      	ldrh	r3, [r3, #0]
 8019090:	461a      	mov	r2, r3
 8019092:	4b40      	ldr	r3, [pc, #256]	; (8019194 <tcp_process+0x5b0>)
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019098:	4b3f      	ldr	r3, [pc, #252]	; (8019198 <tcp_process+0x5b4>)
 801909a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801909c:	885b      	ldrh	r3, [r3, #2]
 801909e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80190a0:	4a3d      	ldr	r2, [pc, #244]	; (8019198 <tcp_process+0x5b4>)
 80190a2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80190a4:	8812      	ldrh	r2, [r2, #0]
 80190a6:	b292      	uxth	r2, r2
 80190a8:	9202      	str	r2, [sp, #8]
 80190aa:	9301      	str	r3, [sp, #4]
 80190ac:	4b3b      	ldr	r3, [pc, #236]	; (801919c <tcp_process+0x5b8>)
 80190ae:	9300      	str	r3, [sp, #0]
 80190b0:	4b3b      	ldr	r3, [pc, #236]	; (80191a0 <tcp_process+0x5bc>)
 80190b2:	4602      	mov	r2, r0
 80190b4:	6878      	ldr	r0, [r7, #4]
 80190b6:	f003 f827 	bl	801c108 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80190ba:	e167      	b.n	801938c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80190bc:	4b32      	ldr	r3, [pc, #200]	; (8019188 <tcp_process+0x5a4>)
 80190be:	781b      	ldrb	r3, [r3, #0]
 80190c0:	f003 0302 	and.w	r3, r3, #2
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	f000 8161 	beq.w	801938c <tcp_process+0x7a8>
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190ce:	1e5a      	subs	r2, r3, #1
 80190d0:	4b30      	ldr	r3, [pc, #192]	; (8019194 <tcp_process+0x5b0>)
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	429a      	cmp	r2, r3
 80190d6:	f040 8159 	bne.w	801938c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80190da:	6878      	ldr	r0, [r7, #4]
 80190dc:	f002 fe0c 	bl	801bcf8 <tcp_rexmit>
      break;
 80190e0:	e154      	b.n	801938c <tcp_process+0x7a8>
 80190e2:	e153      	b.n	801938c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80190e4:	6878      	ldr	r0, [r7, #4]
 80190e6:	f000 fa71 	bl	80195cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80190ea:	4b32      	ldr	r3, [pc, #200]	; (80191b4 <tcp_process+0x5d0>)
 80190ec:	781b      	ldrb	r3, [r3, #0]
 80190ee:	f003 0320 	and.w	r3, r3, #32
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	f000 814c 	beq.w	8019390 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	8b5b      	ldrh	r3, [r3, #26]
 80190fc:	f043 0302 	orr.w	r3, r3, #2
 8019100:	b29a      	uxth	r2, r3
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	2207      	movs	r2, #7
 801910a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801910c:	e140      	b.n	8019390 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801910e:	6878      	ldr	r0, [r7, #4]
 8019110:	f000 fa5c 	bl	80195cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019114:	4b27      	ldr	r3, [pc, #156]	; (80191b4 <tcp_process+0x5d0>)
 8019116:	781b      	ldrb	r3, [r3, #0]
 8019118:	f003 0320 	and.w	r3, r3, #32
 801911c:	2b00      	cmp	r3, #0
 801911e:	d071      	beq.n	8019204 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019120:	4b19      	ldr	r3, [pc, #100]	; (8019188 <tcp_process+0x5a4>)
 8019122:	781b      	ldrb	r3, [r3, #0]
 8019124:	f003 0310 	and.w	r3, r3, #16
 8019128:	2b00      	cmp	r3, #0
 801912a:	d060      	beq.n	80191ee <tcp_process+0x60a>
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019130:	4b16      	ldr	r3, [pc, #88]	; (801918c <tcp_process+0x5a8>)
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	429a      	cmp	r2, r3
 8019136:	d15a      	bne.n	80191ee <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801913c:	2b00      	cmp	r3, #0
 801913e:	d156      	bne.n	80191ee <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	8b5b      	ldrh	r3, [r3, #26]
 8019144:	f043 0302 	orr.w	r3, r3, #2
 8019148:	b29a      	uxth	r2, r3
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801914e:	6878      	ldr	r0, [r7, #4]
 8019150:	f7fe fdbe 	bl	8017cd0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8019154:	4b18      	ldr	r3, [pc, #96]	; (80191b8 <tcp_process+0x5d4>)
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	687a      	ldr	r2, [r7, #4]
 801915a:	429a      	cmp	r2, r3
 801915c:	d105      	bne.n	801916a <tcp_process+0x586>
 801915e:	4b16      	ldr	r3, [pc, #88]	; (80191b8 <tcp_process+0x5d4>)
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	68db      	ldr	r3, [r3, #12]
 8019164:	4a14      	ldr	r2, [pc, #80]	; (80191b8 <tcp_process+0x5d4>)
 8019166:	6013      	str	r3, [r2, #0]
 8019168:	e02e      	b.n	80191c8 <tcp_process+0x5e4>
 801916a:	4b13      	ldr	r3, [pc, #76]	; (80191b8 <tcp_process+0x5d4>)
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	617b      	str	r3, [r7, #20]
 8019170:	e027      	b.n	80191c2 <tcp_process+0x5de>
 8019172:	697b      	ldr	r3, [r7, #20]
 8019174:	68db      	ldr	r3, [r3, #12]
 8019176:	687a      	ldr	r2, [r7, #4]
 8019178:	429a      	cmp	r2, r3
 801917a:	d11f      	bne.n	80191bc <tcp_process+0x5d8>
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	68da      	ldr	r2, [r3, #12]
 8019180:	697b      	ldr	r3, [r7, #20]
 8019182:	60da      	str	r2, [r3, #12]
 8019184:	e020      	b.n	80191c8 <tcp_process+0x5e4>
 8019186:	bf00      	nop
 8019188:	2000c828 	.word	0x2000c828
 801918c:	2000c820 	.word	0x2000c820
 8019190:	2000c826 	.word	0x2000c826
 8019194:	2000c81c 	.word	0x2000c81c
 8019198:	2000c80c 	.word	0x2000c80c
 801919c:	200114b0 	.word	0x200114b0
 80191a0:	200114b4 	.word	0x200114b4
 80191a4:	08022b0c 	.word	0x08022b0c
 80191a8:	08022dac 	.word	0x08022dac
 80191ac:	08022b58 	.word	0x08022b58
 80191b0:	2000c824 	.word	0x2000c824
 80191b4:	2000c829 	.word	0x2000c829
 80191b8:	20014bb4 	.word	0x20014bb4
 80191bc:	697b      	ldr	r3, [r7, #20]
 80191be:	68db      	ldr	r3, [r3, #12]
 80191c0:	617b      	str	r3, [r7, #20]
 80191c2:	697b      	ldr	r3, [r7, #20]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d1d4      	bne.n	8019172 <tcp_process+0x58e>
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	2200      	movs	r2, #0
 80191cc:	60da      	str	r2, [r3, #12]
 80191ce:	4b77      	ldr	r3, [pc, #476]	; (80193ac <tcp_process+0x7c8>)
 80191d0:	2201      	movs	r2, #1
 80191d2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	220a      	movs	r2, #10
 80191d8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80191da:	4b75      	ldr	r3, [pc, #468]	; (80193b0 <tcp_process+0x7cc>)
 80191dc:	681a      	ldr	r2, [r3, #0]
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	60da      	str	r2, [r3, #12]
 80191e2:	4a73      	ldr	r2, [pc, #460]	; (80193b0 <tcp_process+0x7cc>)
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	6013      	str	r3, [r2, #0]
 80191e8:	f003 f950 	bl	801c48c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80191ec:	e0d2      	b.n	8019394 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	8b5b      	ldrh	r3, [r3, #26]
 80191f2:	f043 0302 	orr.w	r3, r3, #2
 80191f6:	b29a      	uxth	r2, r3
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	2208      	movs	r2, #8
 8019200:	751a      	strb	r2, [r3, #20]
      break;
 8019202:	e0c7      	b.n	8019394 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019204:	4b6b      	ldr	r3, [pc, #428]	; (80193b4 <tcp_process+0x7d0>)
 8019206:	781b      	ldrb	r3, [r3, #0]
 8019208:	f003 0310 	and.w	r3, r3, #16
 801920c:	2b00      	cmp	r3, #0
 801920e:	f000 80c1 	beq.w	8019394 <tcp_process+0x7b0>
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019216:	4b68      	ldr	r3, [pc, #416]	; (80193b8 <tcp_process+0x7d4>)
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	429a      	cmp	r2, r3
 801921c:	f040 80ba 	bne.w	8019394 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019224:	2b00      	cmp	r3, #0
 8019226:	f040 80b5 	bne.w	8019394 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	2206      	movs	r2, #6
 801922e:	751a      	strb	r2, [r3, #20]
      break;
 8019230:	e0b0      	b.n	8019394 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8019232:	6878      	ldr	r0, [r7, #4]
 8019234:	f000 f9ca 	bl	80195cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019238:	4b60      	ldr	r3, [pc, #384]	; (80193bc <tcp_process+0x7d8>)
 801923a:	781b      	ldrb	r3, [r3, #0]
 801923c:	f003 0320 	and.w	r3, r3, #32
 8019240:	2b00      	cmp	r3, #0
 8019242:	f000 80a9 	beq.w	8019398 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	8b5b      	ldrh	r3, [r3, #26]
 801924a:	f043 0302 	orr.w	r3, r3, #2
 801924e:	b29a      	uxth	r2, r3
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8019254:	6878      	ldr	r0, [r7, #4]
 8019256:	f7fe fd3b 	bl	8017cd0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801925a:	4b59      	ldr	r3, [pc, #356]	; (80193c0 <tcp_process+0x7dc>)
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	687a      	ldr	r2, [r7, #4]
 8019260:	429a      	cmp	r2, r3
 8019262:	d105      	bne.n	8019270 <tcp_process+0x68c>
 8019264:	4b56      	ldr	r3, [pc, #344]	; (80193c0 <tcp_process+0x7dc>)
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	68db      	ldr	r3, [r3, #12]
 801926a:	4a55      	ldr	r2, [pc, #340]	; (80193c0 <tcp_process+0x7dc>)
 801926c:	6013      	str	r3, [r2, #0]
 801926e:	e013      	b.n	8019298 <tcp_process+0x6b4>
 8019270:	4b53      	ldr	r3, [pc, #332]	; (80193c0 <tcp_process+0x7dc>)
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	613b      	str	r3, [r7, #16]
 8019276:	e00c      	b.n	8019292 <tcp_process+0x6ae>
 8019278:	693b      	ldr	r3, [r7, #16]
 801927a:	68db      	ldr	r3, [r3, #12]
 801927c:	687a      	ldr	r2, [r7, #4]
 801927e:	429a      	cmp	r2, r3
 8019280:	d104      	bne.n	801928c <tcp_process+0x6a8>
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	68da      	ldr	r2, [r3, #12]
 8019286:	693b      	ldr	r3, [r7, #16]
 8019288:	60da      	str	r2, [r3, #12]
 801928a:	e005      	b.n	8019298 <tcp_process+0x6b4>
 801928c:	693b      	ldr	r3, [r7, #16]
 801928e:	68db      	ldr	r3, [r3, #12]
 8019290:	613b      	str	r3, [r7, #16]
 8019292:	693b      	ldr	r3, [r7, #16]
 8019294:	2b00      	cmp	r3, #0
 8019296:	d1ef      	bne.n	8019278 <tcp_process+0x694>
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	2200      	movs	r2, #0
 801929c:	60da      	str	r2, [r3, #12]
 801929e:	4b43      	ldr	r3, [pc, #268]	; (80193ac <tcp_process+0x7c8>)
 80192a0:	2201      	movs	r2, #1
 80192a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	220a      	movs	r2, #10
 80192a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80192aa:	4b41      	ldr	r3, [pc, #260]	; (80193b0 <tcp_process+0x7cc>)
 80192ac:	681a      	ldr	r2, [r3, #0]
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	60da      	str	r2, [r3, #12]
 80192b2:	4a3f      	ldr	r2, [pc, #252]	; (80193b0 <tcp_process+0x7cc>)
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	6013      	str	r3, [r2, #0]
 80192b8:	f003 f8e8 	bl	801c48c <tcp_timer_needed>
      }
      break;
 80192bc:	e06c      	b.n	8019398 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80192be:	6878      	ldr	r0, [r7, #4]
 80192c0:	f000 f984 	bl	80195cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80192c4:	4b3b      	ldr	r3, [pc, #236]	; (80193b4 <tcp_process+0x7d0>)
 80192c6:	781b      	ldrb	r3, [r3, #0]
 80192c8:	f003 0310 	and.w	r3, r3, #16
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d065      	beq.n	801939c <tcp_process+0x7b8>
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80192d4:	4b38      	ldr	r3, [pc, #224]	; (80193b8 <tcp_process+0x7d4>)
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	429a      	cmp	r2, r3
 80192da:	d15f      	bne.n	801939c <tcp_process+0x7b8>
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d15b      	bne.n	801939c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80192e4:	6878      	ldr	r0, [r7, #4]
 80192e6:	f7fe fcf3 	bl	8017cd0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80192ea:	4b35      	ldr	r3, [pc, #212]	; (80193c0 <tcp_process+0x7dc>)
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	687a      	ldr	r2, [r7, #4]
 80192f0:	429a      	cmp	r2, r3
 80192f2:	d105      	bne.n	8019300 <tcp_process+0x71c>
 80192f4:	4b32      	ldr	r3, [pc, #200]	; (80193c0 <tcp_process+0x7dc>)
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	68db      	ldr	r3, [r3, #12]
 80192fa:	4a31      	ldr	r2, [pc, #196]	; (80193c0 <tcp_process+0x7dc>)
 80192fc:	6013      	str	r3, [r2, #0]
 80192fe:	e013      	b.n	8019328 <tcp_process+0x744>
 8019300:	4b2f      	ldr	r3, [pc, #188]	; (80193c0 <tcp_process+0x7dc>)
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	60fb      	str	r3, [r7, #12]
 8019306:	e00c      	b.n	8019322 <tcp_process+0x73e>
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	68db      	ldr	r3, [r3, #12]
 801930c:	687a      	ldr	r2, [r7, #4]
 801930e:	429a      	cmp	r2, r3
 8019310:	d104      	bne.n	801931c <tcp_process+0x738>
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	68da      	ldr	r2, [r3, #12]
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	60da      	str	r2, [r3, #12]
 801931a:	e005      	b.n	8019328 <tcp_process+0x744>
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	68db      	ldr	r3, [r3, #12]
 8019320:	60fb      	str	r3, [r7, #12]
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d1ef      	bne.n	8019308 <tcp_process+0x724>
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	2200      	movs	r2, #0
 801932c:	60da      	str	r2, [r3, #12]
 801932e:	4b1f      	ldr	r3, [pc, #124]	; (80193ac <tcp_process+0x7c8>)
 8019330:	2201      	movs	r2, #1
 8019332:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	220a      	movs	r2, #10
 8019338:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801933a:	4b1d      	ldr	r3, [pc, #116]	; (80193b0 <tcp_process+0x7cc>)
 801933c:	681a      	ldr	r2, [r3, #0]
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	60da      	str	r2, [r3, #12]
 8019342:	4a1b      	ldr	r2, [pc, #108]	; (80193b0 <tcp_process+0x7cc>)
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	6013      	str	r3, [r2, #0]
 8019348:	f003 f8a0 	bl	801c48c <tcp_timer_needed>
      }
      break;
 801934c:	e026      	b.n	801939c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801934e:	6878      	ldr	r0, [r7, #4]
 8019350:	f000 f93c 	bl	80195cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019354:	4b17      	ldr	r3, [pc, #92]	; (80193b4 <tcp_process+0x7d0>)
 8019356:	781b      	ldrb	r3, [r3, #0]
 8019358:	f003 0310 	and.w	r3, r3, #16
 801935c:	2b00      	cmp	r3, #0
 801935e:	d01f      	beq.n	80193a0 <tcp_process+0x7bc>
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019364:	4b14      	ldr	r3, [pc, #80]	; (80193b8 <tcp_process+0x7d4>)
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	429a      	cmp	r2, r3
 801936a:	d119      	bne.n	80193a0 <tcp_process+0x7bc>
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019370:	2b00      	cmp	r3, #0
 8019372:	d115      	bne.n	80193a0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8019374:	4b11      	ldr	r3, [pc, #68]	; (80193bc <tcp_process+0x7d8>)
 8019376:	781b      	ldrb	r3, [r3, #0]
 8019378:	f043 0310 	orr.w	r3, r3, #16
 801937c:	b2da      	uxtb	r2, r3
 801937e:	4b0f      	ldr	r3, [pc, #60]	; (80193bc <tcp_process+0x7d8>)
 8019380:	701a      	strb	r2, [r3, #0]
      }
      break;
 8019382:	e00d      	b.n	80193a0 <tcp_process+0x7bc>
    default:
      break;
 8019384:	bf00      	nop
 8019386:	e00c      	b.n	80193a2 <tcp_process+0x7be>
      break;
 8019388:	bf00      	nop
 801938a:	e00a      	b.n	80193a2 <tcp_process+0x7be>
      break;
 801938c:	bf00      	nop
 801938e:	e008      	b.n	80193a2 <tcp_process+0x7be>
      break;
 8019390:	bf00      	nop
 8019392:	e006      	b.n	80193a2 <tcp_process+0x7be>
      break;
 8019394:	bf00      	nop
 8019396:	e004      	b.n	80193a2 <tcp_process+0x7be>
      break;
 8019398:	bf00      	nop
 801939a:	e002      	b.n	80193a2 <tcp_process+0x7be>
      break;
 801939c:	bf00      	nop
 801939e:	e000      	b.n	80193a2 <tcp_process+0x7be>
      break;
 80193a0:	bf00      	nop
  }
  return ERR_OK;
 80193a2:	2300      	movs	r3, #0
}
 80193a4:	4618      	mov	r0, r3
 80193a6:	3724      	adds	r7, #36	; 0x24
 80193a8:	46bd      	mov	sp, r7
 80193aa:	bd90      	pop	{r4, r7, pc}
 80193ac:	20014bb0 	.word	0x20014bb0
 80193b0:	20014bc4 	.word	0x20014bc4
 80193b4:	2000c828 	.word	0x2000c828
 80193b8:	2000c820 	.word	0x2000c820
 80193bc:	2000c829 	.word	0x2000c829
 80193c0:	20014bb4 	.word	0x20014bb4

080193c4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80193c4:	b590      	push	{r4, r7, lr}
 80193c6:	b085      	sub	sp, #20
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
 80193cc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d106      	bne.n	80193e2 <tcp_oos_insert_segment+0x1e>
 80193d4:	4b3b      	ldr	r3, [pc, #236]	; (80194c4 <tcp_oos_insert_segment+0x100>)
 80193d6:	f240 421f 	movw	r2, #1055	; 0x41f
 80193da:	493b      	ldr	r1, [pc, #236]	; (80194c8 <tcp_oos_insert_segment+0x104>)
 80193dc:	483b      	ldr	r0, [pc, #236]	; (80194cc <tcp_oos_insert_segment+0x108>)
 80193de:	f005 ffc5 	bl	801f36c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	68db      	ldr	r3, [r3, #12]
 80193e6:	899b      	ldrh	r3, [r3, #12]
 80193e8:	b29b      	uxth	r3, r3
 80193ea:	4618      	mov	r0, r3
 80193ec:	f7fb f96a 	bl	80146c4 <lwip_htons>
 80193f0:	4603      	mov	r3, r0
 80193f2:	b2db      	uxtb	r3, r3
 80193f4:	f003 0301 	and.w	r3, r3, #1
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d028      	beq.n	801944e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80193fc:	6838      	ldr	r0, [r7, #0]
 80193fe:	f7fe f979 	bl	80176f4 <tcp_segs_free>
    next = NULL;
 8019402:	2300      	movs	r3, #0
 8019404:	603b      	str	r3, [r7, #0]
 8019406:	e056      	b.n	80194b6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019408:	683b      	ldr	r3, [r7, #0]
 801940a:	68db      	ldr	r3, [r3, #12]
 801940c:	899b      	ldrh	r3, [r3, #12]
 801940e:	b29b      	uxth	r3, r3
 8019410:	4618      	mov	r0, r3
 8019412:	f7fb f957 	bl	80146c4 <lwip_htons>
 8019416:	4603      	mov	r3, r0
 8019418:	b2db      	uxtb	r3, r3
 801941a:	f003 0301 	and.w	r3, r3, #1
 801941e:	2b00      	cmp	r3, #0
 8019420:	d00d      	beq.n	801943e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	68db      	ldr	r3, [r3, #12]
 8019426:	899b      	ldrh	r3, [r3, #12]
 8019428:	b29c      	uxth	r4, r3
 801942a:	2001      	movs	r0, #1
 801942c:	f7fb f94a 	bl	80146c4 <lwip_htons>
 8019430:	4603      	mov	r3, r0
 8019432:	461a      	mov	r2, r3
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	68db      	ldr	r3, [r3, #12]
 8019438:	4322      	orrs	r2, r4
 801943a:	b292      	uxth	r2, r2
 801943c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801943e:	683b      	ldr	r3, [r7, #0]
 8019440:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8019442:	683b      	ldr	r3, [r7, #0]
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8019448:	68f8      	ldr	r0, [r7, #12]
 801944a:	f7fe f968 	bl	801771e <tcp_seg_free>
    while (next &&
 801944e:	683b      	ldr	r3, [r7, #0]
 8019450:	2b00      	cmp	r3, #0
 8019452:	d00e      	beq.n	8019472 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	891b      	ldrh	r3, [r3, #8]
 8019458:	461a      	mov	r2, r3
 801945a:	4b1d      	ldr	r3, [pc, #116]	; (80194d0 <tcp_oos_insert_segment+0x10c>)
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	441a      	add	r2, r3
 8019460:	683b      	ldr	r3, [r7, #0]
 8019462:	68db      	ldr	r3, [r3, #12]
 8019464:	685b      	ldr	r3, [r3, #4]
 8019466:	6839      	ldr	r1, [r7, #0]
 8019468:	8909      	ldrh	r1, [r1, #8]
 801946a:	440b      	add	r3, r1
 801946c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801946e:	2b00      	cmp	r3, #0
 8019470:	daca      	bge.n	8019408 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8019472:	683b      	ldr	r3, [r7, #0]
 8019474:	2b00      	cmp	r3, #0
 8019476:	d01e      	beq.n	80194b6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	891b      	ldrh	r3, [r3, #8]
 801947c:	461a      	mov	r2, r3
 801947e:	4b14      	ldr	r3, [pc, #80]	; (80194d0 <tcp_oos_insert_segment+0x10c>)
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	441a      	add	r2, r3
 8019484:	683b      	ldr	r3, [r7, #0]
 8019486:	68db      	ldr	r3, [r3, #12]
 8019488:	685b      	ldr	r3, [r3, #4]
 801948a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801948c:	2b00      	cmp	r3, #0
 801948e:	dd12      	ble.n	80194b6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019490:	683b      	ldr	r3, [r7, #0]
 8019492:	68db      	ldr	r3, [r3, #12]
 8019494:	685b      	ldr	r3, [r3, #4]
 8019496:	b29a      	uxth	r2, r3
 8019498:	4b0d      	ldr	r3, [pc, #52]	; (80194d0 <tcp_oos_insert_segment+0x10c>)
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	b29b      	uxth	r3, r3
 801949e:	1ad3      	subs	r3, r2, r3
 80194a0:	b29a      	uxth	r2, r3
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	685a      	ldr	r2, [r3, #4]
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	891b      	ldrh	r3, [r3, #8]
 80194ae:	4619      	mov	r1, r3
 80194b0:	4610      	mov	r0, r2
 80194b2:	f7fc fb63 	bl	8015b7c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	683a      	ldr	r2, [r7, #0]
 80194ba:	601a      	str	r2, [r3, #0]
}
 80194bc:	bf00      	nop
 80194be:	3714      	adds	r7, #20
 80194c0:	46bd      	mov	sp, r7
 80194c2:	bd90      	pop	{r4, r7, pc}
 80194c4:	08022b0c 	.word	0x08022b0c
 80194c8:	08022dcc 	.word	0x08022dcc
 80194cc:	08022b58 	.word	0x08022b58
 80194d0:	2000c81c 	.word	0x2000c81c

080194d4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80194d4:	b5b0      	push	{r4, r5, r7, lr}
 80194d6:	b086      	sub	sp, #24
 80194d8:	af00      	add	r7, sp, #0
 80194da:	60f8      	str	r0, [r7, #12]
 80194dc:	60b9      	str	r1, [r7, #8]
 80194de:	607a      	str	r2, [r7, #4]
 80194e0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80194e2:	e03e      	b.n	8019562 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80194e4:	68bb      	ldr	r3, [r7, #8]
 80194e6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80194e8:	68bb      	ldr	r3, [r7, #8]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80194ee:	697b      	ldr	r3, [r7, #20]
 80194f0:	685b      	ldr	r3, [r3, #4]
 80194f2:	4618      	mov	r0, r3
 80194f4:	f7fc fd68 	bl	8015fc8 <pbuf_clen>
 80194f8:	4603      	mov	r3, r0
 80194fa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019502:	8a7a      	ldrh	r2, [r7, #18]
 8019504:	429a      	cmp	r2, r3
 8019506:	d906      	bls.n	8019516 <tcp_free_acked_segments+0x42>
 8019508:	4b2a      	ldr	r3, [pc, #168]	; (80195b4 <tcp_free_acked_segments+0xe0>)
 801950a:	f240 4257 	movw	r2, #1111	; 0x457
 801950e:	492a      	ldr	r1, [pc, #168]	; (80195b8 <tcp_free_acked_segments+0xe4>)
 8019510:	482a      	ldr	r0, [pc, #168]	; (80195bc <tcp_free_acked_segments+0xe8>)
 8019512:	f005 ff2b 	bl	801f36c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801951c:	8a7b      	ldrh	r3, [r7, #18]
 801951e:	1ad3      	subs	r3, r2, r3
 8019520:	b29a      	uxth	r2, r3
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8019528:	697b      	ldr	r3, [r7, #20]
 801952a:	891a      	ldrh	r2, [r3, #8]
 801952c:	4b24      	ldr	r3, [pc, #144]	; (80195c0 <tcp_free_acked_segments+0xec>)
 801952e:	881b      	ldrh	r3, [r3, #0]
 8019530:	4413      	add	r3, r2
 8019532:	b29a      	uxth	r2, r3
 8019534:	4b22      	ldr	r3, [pc, #136]	; (80195c0 <tcp_free_acked_segments+0xec>)
 8019536:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8019538:	6978      	ldr	r0, [r7, #20]
 801953a:	f7fe f8f0 	bl	801771e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019544:	2b00      	cmp	r3, #0
 8019546:	d00c      	beq.n	8019562 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8019548:	68bb      	ldr	r3, [r7, #8]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d109      	bne.n	8019562 <tcp_free_acked_segments+0x8e>
 801954e:	683b      	ldr	r3, [r7, #0]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d106      	bne.n	8019562 <tcp_free_acked_segments+0x8e>
 8019554:	4b17      	ldr	r3, [pc, #92]	; (80195b4 <tcp_free_acked_segments+0xe0>)
 8019556:	f240 4261 	movw	r2, #1121	; 0x461
 801955a:	491a      	ldr	r1, [pc, #104]	; (80195c4 <tcp_free_acked_segments+0xf0>)
 801955c:	4817      	ldr	r0, [pc, #92]	; (80195bc <tcp_free_acked_segments+0xe8>)
 801955e:	f005 ff05 	bl	801f36c <iprintf>
  while (seg_list != NULL &&
 8019562:	68bb      	ldr	r3, [r7, #8]
 8019564:	2b00      	cmp	r3, #0
 8019566:	d020      	beq.n	80195aa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8019568:	68bb      	ldr	r3, [r7, #8]
 801956a:	68db      	ldr	r3, [r3, #12]
 801956c:	685b      	ldr	r3, [r3, #4]
 801956e:	4618      	mov	r0, r3
 8019570:	f7fb f8bd 	bl	80146ee <lwip_htonl>
 8019574:	4604      	mov	r4, r0
 8019576:	68bb      	ldr	r3, [r7, #8]
 8019578:	891b      	ldrh	r3, [r3, #8]
 801957a:	461d      	mov	r5, r3
 801957c:	68bb      	ldr	r3, [r7, #8]
 801957e:	68db      	ldr	r3, [r3, #12]
 8019580:	899b      	ldrh	r3, [r3, #12]
 8019582:	b29b      	uxth	r3, r3
 8019584:	4618      	mov	r0, r3
 8019586:	f7fb f89d 	bl	80146c4 <lwip_htons>
 801958a:	4603      	mov	r3, r0
 801958c:	b2db      	uxtb	r3, r3
 801958e:	f003 0303 	and.w	r3, r3, #3
 8019592:	2b00      	cmp	r3, #0
 8019594:	d001      	beq.n	801959a <tcp_free_acked_segments+0xc6>
 8019596:	2301      	movs	r3, #1
 8019598:	e000      	b.n	801959c <tcp_free_acked_segments+0xc8>
 801959a:	2300      	movs	r3, #0
 801959c:	442b      	add	r3, r5
 801959e:	18e2      	adds	r2, r4, r3
 80195a0:	4b09      	ldr	r3, [pc, #36]	; (80195c8 <tcp_free_acked_segments+0xf4>)
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	dd9c      	ble.n	80194e4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80195aa:	68bb      	ldr	r3, [r7, #8]
}
 80195ac:	4618      	mov	r0, r3
 80195ae:	3718      	adds	r7, #24
 80195b0:	46bd      	mov	sp, r7
 80195b2:	bdb0      	pop	{r4, r5, r7, pc}
 80195b4:	08022b0c 	.word	0x08022b0c
 80195b8:	08022df4 	.word	0x08022df4
 80195bc:	08022b58 	.word	0x08022b58
 80195c0:	2000c824 	.word	0x2000c824
 80195c4:	08022e1c 	.word	0x08022e1c
 80195c8:	2000c820 	.word	0x2000c820

080195cc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80195cc:	b5b0      	push	{r4, r5, r7, lr}
 80195ce:	b094      	sub	sp, #80	; 0x50
 80195d0:	af00      	add	r7, sp, #0
 80195d2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80195d4:	2300      	movs	r3, #0
 80195d6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d106      	bne.n	80195ec <tcp_receive+0x20>
 80195de:	4ba6      	ldr	r3, [pc, #664]	; (8019878 <tcp_receive+0x2ac>)
 80195e0:	f240 427b 	movw	r2, #1147	; 0x47b
 80195e4:	49a5      	ldr	r1, [pc, #660]	; (801987c <tcp_receive+0x2b0>)
 80195e6:	48a6      	ldr	r0, [pc, #664]	; (8019880 <tcp_receive+0x2b4>)
 80195e8:	f005 fec0 	bl	801f36c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	7d1b      	ldrb	r3, [r3, #20]
 80195f0:	2b03      	cmp	r3, #3
 80195f2:	d806      	bhi.n	8019602 <tcp_receive+0x36>
 80195f4:	4ba0      	ldr	r3, [pc, #640]	; (8019878 <tcp_receive+0x2ac>)
 80195f6:	f240 427c 	movw	r2, #1148	; 0x47c
 80195fa:	49a2      	ldr	r1, [pc, #648]	; (8019884 <tcp_receive+0x2b8>)
 80195fc:	48a0      	ldr	r0, [pc, #640]	; (8019880 <tcp_receive+0x2b4>)
 80195fe:	f005 feb5 	bl	801f36c <iprintf>

  if (flags & TCP_ACK) {
 8019602:	4ba1      	ldr	r3, [pc, #644]	; (8019888 <tcp_receive+0x2bc>)
 8019604:	781b      	ldrb	r3, [r3, #0]
 8019606:	f003 0310 	and.w	r3, r3, #16
 801960a:	2b00      	cmp	r3, #0
 801960c:	f000 8263 	beq.w	8019ad6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019616:	461a      	mov	r2, r3
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801961c:	4413      	add	r3, r2
 801961e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019624:	4b99      	ldr	r3, [pc, #612]	; (801988c <tcp_receive+0x2c0>)
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	1ad3      	subs	r3, r2, r3
 801962a:	2b00      	cmp	r3, #0
 801962c:	db1b      	blt.n	8019666 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019632:	4b96      	ldr	r3, [pc, #600]	; (801988c <tcp_receive+0x2c0>)
 8019634:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019636:	429a      	cmp	r2, r3
 8019638:	d106      	bne.n	8019648 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801963e:	4b94      	ldr	r3, [pc, #592]	; (8019890 <tcp_receive+0x2c4>)
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	1ad3      	subs	r3, r2, r3
 8019644:	2b00      	cmp	r3, #0
 8019646:	db0e      	blt.n	8019666 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801964c:	4b90      	ldr	r3, [pc, #576]	; (8019890 <tcp_receive+0x2c4>)
 801964e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019650:	429a      	cmp	r2, r3
 8019652:	d125      	bne.n	80196a0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019654:	4b8f      	ldr	r3, [pc, #572]	; (8019894 <tcp_receive+0x2c8>)
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	89db      	ldrh	r3, [r3, #14]
 801965a:	b29a      	uxth	r2, r3
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019662:	429a      	cmp	r2, r3
 8019664:	d91c      	bls.n	80196a0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8019666:	4b8b      	ldr	r3, [pc, #556]	; (8019894 <tcp_receive+0x2c8>)
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	89db      	ldrh	r3, [r3, #14]
 801966c:	b29a      	uxth	r2, r3
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019680:	429a      	cmp	r2, r3
 8019682:	d205      	bcs.n	8019690 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8019690:	4b7e      	ldr	r3, [pc, #504]	; (801988c <tcp_receive+0x2c0>)
 8019692:	681a      	ldr	r2, [r3, #0]
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8019698:	4b7d      	ldr	r3, [pc, #500]	; (8019890 <tcp_receive+0x2c4>)
 801969a:	681a      	ldr	r2, [r3, #0]
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80196a0:	4b7b      	ldr	r3, [pc, #492]	; (8019890 <tcp_receive+0x2c4>)
 80196a2:	681a      	ldr	r2, [r3, #0]
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196a8:	1ad3      	subs	r3, r2, r3
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	dc58      	bgt.n	8019760 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80196ae:	4b7a      	ldr	r3, [pc, #488]	; (8019898 <tcp_receive+0x2cc>)
 80196b0:	881b      	ldrh	r3, [r3, #0]
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d14b      	bne.n	801974e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196ba:	687a      	ldr	r2, [r7, #4]
 80196bc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80196c0:	4413      	add	r3, r2
 80196c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80196c4:	429a      	cmp	r2, r3
 80196c6:	d142      	bne.n	801974e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	db3d      	blt.n	801974e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80196d6:	4b6e      	ldr	r3, [pc, #440]	; (8019890 <tcp_receive+0x2c4>)
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	429a      	cmp	r2, r3
 80196dc:	d137      	bne.n	801974e <tcp_receive+0x182>
              found_dupack = 1;
 80196de:	2301      	movs	r3, #1
 80196e0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80196e8:	2bff      	cmp	r3, #255	; 0xff
 80196ea:	d007      	beq.n	80196fc <tcp_receive+0x130>
                ++pcb->dupacks;
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80196f2:	3301      	adds	r3, #1
 80196f4:	b2da      	uxtb	r2, r3
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019702:	2b03      	cmp	r3, #3
 8019704:	d91b      	bls.n	801973e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019710:	4413      	add	r3, r2
 8019712:	b29a      	uxth	r2, r3
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801971a:	429a      	cmp	r2, r3
 801971c:	d30a      	bcc.n	8019734 <tcp_receive+0x168>
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019728:	4413      	add	r3, r2
 801972a:	b29a      	uxth	r2, r3
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019732:	e004      	b.n	801973e <tcp_receive+0x172>
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801973a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019744:	2b02      	cmp	r3, #2
 8019746:	d902      	bls.n	801974e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8019748:	6878      	ldr	r0, [r7, #4]
 801974a:	f002 fb41 	bl	801bdd0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801974e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019750:	2b00      	cmp	r3, #0
 8019752:	f040 8160 	bne.w	8019a16 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	2200      	movs	r2, #0
 801975a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801975e:	e15a      	b.n	8019a16 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019760:	4b4b      	ldr	r3, [pc, #300]	; (8019890 <tcp_receive+0x2c4>)
 8019762:	681a      	ldr	r2, [r3, #0]
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019768:	1ad3      	subs	r3, r2, r3
 801976a:	3b01      	subs	r3, #1
 801976c:	2b00      	cmp	r3, #0
 801976e:	f2c0 814d 	blt.w	8019a0c <tcp_receive+0x440>
 8019772:	4b47      	ldr	r3, [pc, #284]	; (8019890 <tcp_receive+0x2c4>)
 8019774:	681a      	ldr	r2, [r3, #0]
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801977a:	1ad3      	subs	r3, r2, r3
 801977c:	2b00      	cmp	r3, #0
 801977e:	f300 8145 	bgt.w	8019a0c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	8b5b      	ldrh	r3, [r3, #26]
 8019786:	f003 0304 	and.w	r3, r3, #4
 801978a:	2b00      	cmp	r3, #0
 801978c:	d010      	beq.n	80197b0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	8b5b      	ldrh	r3, [r3, #26]
 8019792:	f023 0304 	bic.w	r3, r3, #4
 8019796:	b29a      	uxth	r2, r3
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	2200      	movs	r2, #0
 80197ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	2200      	movs	r2, #0
 80197b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80197be:	10db      	asrs	r3, r3, #3
 80197c0:	b21b      	sxth	r3, r3
 80197c2:	b29a      	uxth	r2, r3
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80197ca:	b29b      	uxth	r3, r3
 80197cc:	4413      	add	r3, r2
 80197ce:	b29b      	uxth	r3, r3
 80197d0:	b21a      	sxth	r2, r3
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80197d8:	4b2d      	ldr	r3, [pc, #180]	; (8019890 <tcp_receive+0x2c4>)
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	b29a      	uxth	r2, r3
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80197e2:	b29b      	uxth	r3, r3
 80197e4:	1ad3      	subs	r3, r2, r3
 80197e6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	2200      	movs	r2, #0
 80197ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80197f0:	4b27      	ldr	r3, [pc, #156]	; (8019890 <tcp_receive+0x2c4>)
 80197f2:	681a      	ldr	r2, [r3, #0]
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	7d1b      	ldrb	r3, [r3, #20]
 80197fc:	2b03      	cmp	r3, #3
 80197fe:	f240 8096 	bls.w	801992e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801980e:	429a      	cmp	r2, r3
 8019810:	d244      	bcs.n	801989c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	8b5b      	ldrh	r3, [r3, #26]
 8019816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801981a:	2b00      	cmp	r3, #0
 801981c:	d001      	beq.n	8019822 <tcp_receive+0x256>
 801981e:	2301      	movs	r3, #1
 8019820:	e000      	b.n	8019824 <tcp_receive+0x258>
 8019822:	2302      	movs	r3, #2
 8019824:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8019828:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801982c:	b29a      	uxth	r2, r3
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019832:	fb12 f303 	smulbb	r3, r2, r3
 8019836:	b29b      	uxth	r3, r3
 8019838:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801983a:	4293      	cmp	r3, r2
 801983c:	bf28      	it	cs
 801983e:	4613      	movcs	r3, r2
 8019840:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019848:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801984a:	4413      	add	r3, r2
 801984c:	b29a      	uxth	r2, r3
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019854:	429a      	cmp	r2, r3
 8019856:	d309      	bcc.n	801986c <tcp_receive+0x2a0>
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801985e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019860:	4413      	add	r3, r2
 8019862:	b29a      	uxth	r2, r3
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801986a:	e060      	b.n	801992e <tcp_receive+0x362>
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019872:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019876:	e05a      	b.n	801992e <tcp_receive+0x362>
 8019878:	08022b0c 	.word	0x08022b0c
 801987c:	08022e3c 	.word	0x08022e3c
 8019880:	08022b58 	.word	0x08022b58
 8019884:	08022e58 	.word	0x08022e58
 8019888:	2000c828 	.word	0x2000c828
 801988c:	2000c81c 	.word	0x2000c81c
 8019890:	2000c820 	.word	0x2000c820
 8019894:	2000c80c 	.word	0x2000c80c
 8019898:	2000c826 	.word	0x2000c826
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80198a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80198a4:	4413      	add	r3, r2
 80198a6:	b29a      	uxth	r2, r3
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80198ae:	429a      	cmp	r2, r3
 80198b0:	d309      	bcc.n	80198c6 <tcp_receive+0x2fa>
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80198b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80198ba:	4413      	add	r3, r2
 80198bc:	b29a      	uxth	r2, r3
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80198c4:	e004      	b.n	80198d0 <tcp_receive+0x304>
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80198cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80198dc:	429a      	cmp	r2, r3
 80198de:	d326      	bcc.n	801992e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80198ec:	1ad3      	subs	r3, r2, r3
 80198ee:	b29a      	uxth	r2, r3
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019900:	4413      	add	r3, r2
 8019902:	b29a      	uxth	r2, r3
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801990a:	429a      	cmp	r2, r3
 801990c:	d30a      	bcc.n	8019924 <tcp_receive+0x358>
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019918:	4413      	add	r3, r2
 801991a:	b29a      	uxth	r2, r3
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019922:	e004      	b.n	801992e <tcp_receive+0x362>
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801992a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019936:	4a98      	ldr	r2, [pc, #608]	; (8019b98 <tcp_receive+0x5cc>)
 8019938:	6878      	ldr	r0, [r7, #4]
 801993a:	f7ff fdcb 	bl	80194d4 <tcp_free_acked_segments>
 801993e:	4602      	mov	r2, r0
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801994c:	4a93      	ldr	r2, [pc, #588]	; (8019b9c <tcp_receive+0x5d0>)
 801994e:	6878      	ldr	r0, [r7, #4]
 8019950:	f7ff fdc0 	bl	80194d4 <tcp_free_acked_segments>
 8019954:	4602      	mov	r2, r0
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801995e:	2b00      	cmp	r3, #0
 8019960:	d104      	bne.n	801996c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019968:	861a      	strh	r2, [r3, #48]	; 0x30
 801996a:	e002      	b.n	8019972 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	2200      	movs	r2, #0
 8019970:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	2200      	movs	r2, #0
 8019976:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801997c:	2b00      	cmp	r3, #0
 801997e:	d103      	bne.n	8019988 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	2200      	movs	r2, #0
 8019984:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801998e:	4b84      	ldr	r3, [pc, #528]	; (8019ba0 <tcp_receive+0x5d4>)
 8019990:	881b      	ldrh	r3, [r3, #0]
 8019992:	4413      	add	r3, r2
 8019994:	b29a      	uxth	r2, r3
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	8b5b      	ldrh	r3, [r3, #26]
 80199a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d035      	beq.n	8019a14 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d118      	bne.n	80199e2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d00c      	beq.n	80199d2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80199c0:	68db      	ldr	r3, [r3, #12]
 80199c2:	685b      	ldr	r3, [r3, #4]
 80199c4:	4618      	mov	r0, r3
 80199c6:	f7fa fe92 	bl	80146ee <lwip_htonl>
 80199ca:	4603      	mov	r3, r0
 80199cc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	dc20      	bgt.n	8019a14 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	8b5b      	ldrh	r3, [r3, #26]
 80199d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80199da:	b29a      	uxth	r2, r3
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80199e0:	e018      	b.n	8019a14 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80199ea:	68db      	ldr	r3, [r3, #12]
 80199ec:	685b      	ldr	r3, [r3, #4]
 80199ee:	4618      	mov	r0, r3
 80199f0:	f7fa fe7d 	bl	80146ee <lwip_htonl>
 80199f4:	4603      	mov	r3, r0
 80199f6:	1ae3      	subs	r3, r4, r3
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	dc0b      	bgt.n	8019a14 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	8b5b      	ldrh	r3, [r3, #26]
 8019a00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019a04:	b29a      	uxth	r2, r3
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019a0a:	e003      	b.n	8019a14 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8019a0c:	6878      	ldr	r0, [r7, #4]
 8019a0e:	f002 fbcd 	bl	801c1ac <tcp_send_empty_ack>
 8019a12:	e000      	b.n	8019a16 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019a14:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d05b      	beq.n	8019ad6 <tcp_receive+0x50a>
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019a22:	4b60      	ldr	r3, [pc, #384]	; (8019ba4 <tcp_receive+0x5d8>)
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	1ad3      	subs	r3, r2, r3
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	da54      	bge.n	8019ad6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019a2c:	4b5e      	ldr	r3, [pc, #376]	; (8019ba8 <tcp_receive+0x5dc>)
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	b29a      	uxth	r2, r3
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a36:	b29b      	uxth	r3, r3
 8019a38:	1ad3      	subs	r3, r2, r3
 8019a3a:	b29b      	uxth	r3, r3
 8019a3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8019a40:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019a4a:	10db      	asrs	r3, r3, #3
 8019a4c:	b21b      	sxth	r3, r3
 8019a4e:	b29b      	uxth	r3, r3
 8019a50:	1ad3      	subs	r3, r2, r3
 8019a52:	b29b      	uxth	r3, r3
 8019a54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019a5e:	b29a      	uxth	r2, r3
 8019a60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019a64:	4413      	add	r3, r2
 8019a66:	b29b      	uxth	r3, r3
 8019a68:	b21a      	sxth	r2, r3
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8019a6e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	da05      	bge.n	8019a82 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8019a76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019a7a:	425b      	negs	r3, r3
 8019a7c:	b29b      	uxth	r3, r3
 8019a7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8019a82:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019a8c:	109b      	asrs	r3, r3, #2
 8019a8e:	b21b      	sxth	r3, r3
 8019a90:	b29b      	uxth	r3, r3
 8019a92:	1ad3      	subs	r3, r2, r3
 8019a94:	b29b      	uxth	r3, r3
 8019a96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019aa0:	b29a      	uxth	r2, r3
 8019aa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019aa6:	4413      	add	r3, r2
 8019aa8:	b29b      	uxth	r3, r3
 8019aaa:	b21a      	sxth	r2, r3
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019ab6:	10db      	asrs	r3, r3, #3
 8019ab8:	b21b      	sxth	r3, r3
 8019aba:	b29a      	uxth	r2, r3
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019ac2:	b29b      	uxth	r3, r3
 8019ac4:	4413      	add	r3, r2
 8019ac6:	b29b      	uxth	r3, r3
 8019ac8:	b21a      	sxth	r2, r3
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	2200      	movs	r2, #0
 8019ad4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019ad6:	4b35      	ldr	r3, [pc, #212]	; (8019bac <tcp_receive+0x5e0>)
 8019ad8:	881b      	ldrh	r3, [r3, #0]
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	f000 84e1 	beq.w	801a4a2 <tcp_receive+0xed6>
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	7d1b      	ldrb	r3, [r3, #20]
 8019ae4:	2b06      	cmp	r3, #6
 8019ae6:	f200 84dc 	bhi.w	801a4a2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019aee:	4b30      	ldr	r3, [pc, #192]	; (8019bb0 <tcp_receive+0x5e4>)
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	1ad3      	subs	r3, r2, r3
 8019af4:	3b01      	subs	r3, #1
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	f2c0 808e 	blt.w	8019c18 <tcp_receive+0x64c>
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019b00:	4b2a      	ldr	r3, [pc, #168]	; (8019bac <tcp_receive+0x5e0>)
 8019b02:	881b      	ldrh	r3, [r3, #0]
 8019b04:	4619      	mov	r1, r3
 8019b06:	4b2a      	ldr	r3, [pc, #168]	; (8019bb0 <tcp_receive+0x5e4>)
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	440b      	add	r3, r1
 8019b0c:	1ad3      	subs	r3, r2, r3
 8019b0e:	3301      	adds	r3, #1
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	f300 8081 	bgt.w	8019c18 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019b16:	4b27      	ldr	r3, [pc, #156]	; (8019bb4 <tcp_receive+0x5e8>)
 8019b18:	685b      	ldr	r3, [r3, #4]
 8019b1a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019b20:	4b23      	ldr	r3, [pc, #140]	; (8019bb0 <tcp_receive+0x5e4>)
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	1ad3      	subs	r3, r2, r3
 8019b26:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019b28:	4b22      	ldr	r3, [pc, #136]	; (8019bb4 <tcp_receive+0x5e8>)
 8019b2a:	685b      	ldr	r3, [r3, #4]
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d106      	bne.n	8019b3e <tcp_receive+0x572>
 8019b30:	4b21      	ldr	r3, [pc, #132]	; (8019bb8 <tcp_receive+0x5ec>)
 8019b32:	f240 5294 	movw	r2, #1428	; 0x594
 8019b36:	4921      	ldr	r1, [pc, #132]	; (8019bbc <tcp_receive+0x5f0>)
 8019b38:	4821      	ldr	r0, [pc, #132]	; (8019bc0 <tcp_receive+0x5f4>)
 8019b3a:	f005 fc17 	bl	801f36c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019b44:	4293      	cmp	r3, r2
 8019b46:	d906      	bls.n	8019b56 <tcp_receive+0x58a>
 8019b48:	4b1b      	ldr	r3, [pc, #108]	; (8019bb8 <tcp_receive+0x5ec>)
 8019b4a:	f240 5295 	movw	r2, #1429	; 0x595
 8019b4e:	491d      	ldr	r1, [pc, #116]	; (8019bc4 <tcp_receive+0x5f8>)
 8019b50:	481b      	ldr	r0, [pc, #108]	; (8019bc0 <tcp_receive+0x5f4>)
 8019b52:	f005 fc0b 	bl	801f36c <iprintf>
      off = (u16_t)off32;
 8019b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019b5c:	4b15      	ldr	r3, [pc, #84]	; (8019bb4 <tcp_receive+0x5e8>)
 8019b5e:	685b      	ldr	r3, [r3, #4]
 8019b60:	891b      	ldrh	r3, [r3, #8]
 8019b62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019b66:	429a      	cmp	r2, r3
 8019b68:	d906      	bls.n	8019b78 <tcp_receive+0x5ac>
 8019b6a:	4b13      	ldr	r3, [pc, #76]	; (8019bb8 <tcp_receive+0x5ec>)
 8019b6c:	f240 5297 	movw	r2, #1431	; 0x597
 8019b70:	4915      	ldr	r1, [pc, #84]	; (8019bc8 <tcp_receive+0x5fc>)
 8019b72:	4813      	ldr	r0, [pc, #76]	; (8019bc0 <tcp_receive+0x5f4>)
 8019b74:	f005 fbfa 	bl	801f36c <iprintf>
      inseg.len -= off;
 8019b78:	4b0e      	ldr	r3, [pc, #56]	; (8019bb4 <tcp_receive+0x5e8>)
 8019b7a:	891a      	ldrh	r2, [r3, #8]
 8019b7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019b80:	1ad3      	subs	r3, r2, r3
 8019b82:	b29a      	uxth	r2, r3
 8019b84:	4b0b      	ldr	r3, [pc, #44]	; (8019bb4 <tcp_receive+0x5e8>)
 8019b86:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019b88:	4b0a      	ldr	r3, [pc, #40]	; (8019bb4 <tcp_receive+0x5e8>)
 8019b8a:	685b      	ldr	r3, [r3, #4]
 8019b8c:	891a      	ldrh	r2, [r3, #8]
 8019b8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019b92:	1ad3      	subs	r3, r2, r3
 8019b94:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019b96:	e029      	b.n	8019bec <tcp_receive+0x620>
 8019b98:	08022e74 	.word	0x08022e74
 8019b9c:	08022e7c 	.word	0x08022e7c
 8019ba0:	2000c824 	.word	0x2000c824
 8019ba4:	2000c820 	.word	0x2000c820
 8019ba8:	20014bb8 	.word	0x20014bb8
 8019bac:	2000c826 	.word	0x2000c826
 8019bb0:	2000c81c 	.word	0x2000c81c
 8019bb4:	2000c7fc 	.word	0x2000c7fc
 8019bb8:	08022b0c 	.word	0x08022b0c
 8019bbc:	08022e84 	.word	0x08022e84
 8019bc0:	08022b58 	.word	0x08022b58
 8019bc4:	08022e94 	.word	0x08022e94
 8019bc8:	08022ea4 	.word	0x08022ea4
        off -= p->len;
 8019bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bce:	895b      	ldrh	r3, [r3, #10]
 8019bd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019bd4:	1ad3      	subs	r3, r2, r3
 8019bd6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8019bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bdc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019bde:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8019be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019be2:	2200      	movs	r2, #0
 8019be4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8019be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8019bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bee:	895b      	ldrh	r3, [r3, #10]
 8019bf0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019bf4:	429a      	cmp	r2, r3
 8019bf6:	d8e9      	bhi.n	8019bcc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019bf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019bfc:	4619      	mov	r1, r3
 8019bfe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019c00:	f7fc f8bc 	bl	8015d7c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c08:	4a91      	ldr	r2, [pc, #580]	; (8019e50 <tcp_receive+0x884>)
 8019c0a:	6013      	str	r3, [r2, #0]
 8019c0c:	4b91      	ldr	r3, [pc, #580]	; (8019e54 <tcp_receive+0x888>)
 8019c0e:	68db      	ldr	r3, [r3, #12]
 8019c10:	4a8f      	ldr	r2, [pc, #572]	; (8019e50 <tcp_receive+0x884>)
 8019c12:	6812      	ldr	r2, [r2, #0]
 8019c14:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019c16:	e00d      	b.n	8019c34 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019c18:	4b8d      	ldr	r3, [pc, #564]	; (8019e50 <tcp_receive+0x884>)
 8019c1a:	681a      	ldr	r2, [r3, #0]
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c20:	1ad3      	subs	r3, r2, r3
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	da06      	bge.n	8019c34 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	8b5b      	ldrh	r3, [r3, #26]
 8019c2a:	f043 0302 	orr.w	r3, r3, #2
 8019c2e:	b29a      	uxth	r2, r3
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019c34:	4b86      	ldr	r3, [pc, #536]	; (8019e50 <tcp_receive+0x884>)
 8019c36:	681a      	ldr	r2, [r3, #0]
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c3c:	1ad3      	subs	r3, r2, r3
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	f2c0 842a 	blt.w	801a498 <tcp_receive+0xecc>
 8019c44:	4b82      	ldr	r3, [pc, #520]	; (8019e50 <tcp_receive+0x884>)
 8019c46:	681a      	ldr	r2, [r3, #0]
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c4c:	6879      	ldr	r1, [r7, #4]
 8019c4e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019c50:	440b      	add	r3, r1
 8019c52:	1ad3      	subs	r3, r2, r3
 8019c54:	3301      	adds	r3, #1
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	f300 841e 	bgt.w	801a498 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019c60:	4b7b      	ldr	r3, [pc, #492]	; (8019e50 <tcp_receive+0x884>)
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	429a      	cmp	r2, r3
 8019c66:	f040 829a 	bne.w	801a19e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8019c6a:	4b7a      	ldr	r3, [pc, #488]	; (8019e54 <tcp_receive+0x888>)
 8019c6c:	891c      	ldrh	r4, [r3, #8]
 8019c6e:	4b79      	ldr	r3, [pc, #484]	; (8019e54 <tcp_receive+0x888>)
 8019c70:	68db      	ldr	r3, [r3, #12]
 8019c72:	899b      	ldrh	r3, [r3, #12]
 8019c74:	b29b      	uxth	r3, r3
 8019c76:	4618      	mov	r0, r3
 8019c78:	f7fa fd24 	bl	80146c4 <lwip_htons>
 8019c7c:	4603      	mov	r3, r0
 8019c7e:	b2db      	uxtb	r3, r3
 8019c80:	f003 0303 	and.w	r3, r3, #3
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d001      	beq.n	8019c8c <tcp_receive+0x6c0>
 8019c88:	2301      	movs	r3, #1
 8019c8a:	e000      	b.n	8019c8e <tcp_receive+0x6c2>
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	4423      	add	r3, r4
 8019c90:	b29a      	uxth	r2, r3
 8019c92:	4b71      	ldr	r3, [pc, #452]	; (8019e58 <tcp_receive+0x88c>)
 8019c94:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019c9a:	4b6f      	ldr	r3, [pc, #444]	; (8019e58 <tcp_receive+0x88c>)
 8019c9c:	881b      	ldrh	r3, [r3, #0]
 8019c9e:	429a      	cmp	r2, r3
 8019ca0:	d275      	bcs.n	8019d8e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019ca2:	4b6c      	ldr	r3, [pc, #432]	; (8019e54 <tcp_receive+0x888>)
 8019ca4:	68db      	ldr	r3, [r3, #12]
 8019ca6:	899b      	ldrh	r3, [r3, #12]
 8019ca8:	b29b      	uxth	r3, r3
 8019caa:	4618      	mov	r0, r3
 8019cac:	f7fa fd0a 	bl	80146c4 <lwip_htons>
 8019cb0:	4603      	mov	r3, r0
 8019cb2:	b2db      	uxtb	r3, r3
 8019cb4:	f003 0301 	and.w	r3, r3, #1
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d01f      	beq.n	8019cfc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019cbc:	4b65      	ldr	r3, [pc, #404]	; (8019e54 <tcp_receive+0x888>)
 8019cbe:	68db      	ldr	r3, [r3, #12]
 8019cc0:	899b      	ldrh	r3, [r3, #12]
 8019cc2:	b29b      	uxth	r3, r3
 8019cc4:	b21b      	sxth	r3, r3
 8019cc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019cca:	b21c      	sxth	r4, r3
 8019ccc:	4b61      	ldr	r3, [pc, #388]	; (8019e54 <tcp_receive+0x888>)
 8019cce:	68db      	ldr	r3, [r3, #12]
 8019cd0:	899b      	ldrh	r3, [r3, #12]
 8019cd2:	b29b      	uxth	r3, r3
 8019cd4:	4618      	mov	r0, r3
 8019cd6:	f7fa fcf5 	bl	80146c4 <lwip_htons>
 8019cda:	4603      	mov	r3, r0
 8019cdc:	b2db      	uxtb	r3, r3
 8019cde:	b29b      	uxth	r3, r3
 8019ce0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019ce4:	b29b      	uxth	r3, r3
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	f7fa fcec 	bl	80146c4 <lwip_htons>
 8019cec:	4603      	mov	r3, r0
 8019cee:	b21b      	sxth	r3, r3
 8019cf0:	4323      	orrs	r3, r4
 8019cf2:	b21a      	sxth	r2, r3
 8019cf4:	4b57      	ldr	r3, [pc, #348]	; (8019e54 <tcp_receive+0x888>)
 8019cf6:	68db      	ldr	r3, [r3, #12]
 8019cf8:	b292      	uxth	r2, r2
 8019cfa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019d00:	4b54      	ldr	r3, [pc, #336]	; (8019e54 <tcp_receive+0x888>)
 8019d02:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019d04:	4b53      	ldr	r3, [pc, #332]	; (8019e54 <tcp_receive+0x888>)
 8019d06:	68db      	ldr	r3, [r3, #12]
 8019d08:	899b      	ldrh	r3, [r3, #12]
 8019d0a:	b29b      	uxth	r3, r3
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	f7fa fcd9 	bl	80146c4 <lwip_htons>
 8019d12:	4603      	mov	r3, r0
 8019d14:	b2db      	uxtb	r3, r3
 8019d16:	f003 0302 	and.w	r3, r3, #2
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d005      	beq.n	8019d2a <tcp_receive+0x75e>
            inseg.len -= 1;
 8019d1e:	4b4d      	ldr	r3, [pc, #308]	; (8019e54 <tcp_receive+0x888>)
 8019d20:	891b      	ldrh	r3, [r3, #8]
 8019d22:	3b01      	subs	r3, #1
 8019d24:	b29a      	uxth	r2, r3
 8019d26:	4b4b      	ldr	r3, [pc, #300]	; (8019e54 <tcp_receive+0x888>)
 8019d28:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019d2a:	4b4a      	ldr	r3, [pc, #296]	; (8019e54 <tcp_receive+0x888>)
 8019d2c:	685b      	ldr	r3, [r3, #4]
 8019d2e:	4a49      	ldr	r2, [pc, #292]	; (8019e54 <tcp_receive+0x888>)
 8019d30:	8912      	ldrh	r2, [r2, #8]
 8019d32:	4611      	mov	r1, r2
 8019d34:	4618      	mov	r0, r3
 8019d36:	f7fb ff21 	bl	8015b7c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019d3a:	4b46      	ldr	r3, [pc, #280]	; (8019e54 <tcp_receive+0x888>)
 8019d3c:	891c      	ldrh	r4, [r3, #8]
 8019d3e:	4b45      	ldr	r3, [pc, #276]	; (8019e54 <tcp_receive+0x888>)
 8019d40:	68db      	ldr	r3, [r3, #12]
 8019d42:	899b      	ldrh	r3, [r3, #12]
 8019d44:	b29b      	uxth	r3, r3
 8019d46:	4618      	mov	r0, r3
 8019d48:	f7fa fcbc 	bl	80146c4 <lwip_htons>
 8019d4c:	4603      	mov	r3, r0
 8019d4e:	b2db      	uxtb	r3, r3
 8019d50:	f003 0303 	and.w	r3, r3, #3
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d001      	beq.n	8019d5c <tcp_receive+0x790>
 8019d58:	2301      	movs	r3, #1
 8019d5a:	e000      	b.n	8019d5e <tcp_receive+0x792>
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	4423      	add	r3, r4
 8019d60:	b29a      	uxth	r2, r3
 8019d62:	4b3d      	ldr	r3, [pc, #244]	; (8019e58 <tcp_receive+0x88c>)
 8019d64:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019d66:	4b3c      	ldr	r3, [pc, #240]	; (8019e58 <tcp_receive+0x88c>)
 8019d68:	881b      	ldrh	r3, [r3, #0]
 8019d6a:	461a      	mov	r2, r3
 8019d6c:	4b38      	ldr	r3, [pc, #224]	; (8019e50 <tcp_receive+0x884>)
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	441a      	add	r2, r3
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d76:	6879      	ldr	r1, [r7, #4]
 8019d78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019d7a:	440b      	add	r3, r1
 8019d7c:	429a      	cmp	r2, r3
 8019d7e:	d006      	beq.n	8019d8e <tcp_receive+0x7c2>
 8019d80:	4b36      	ldr	r3, [pc, #216]	; (8019e5c <tcp_receive+0x890>)
 8019d82:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8019d86:	4936      	ldr	r1, [pc, #216]	; (8019e60 <tcp_receive+0x894>)
 8019d88:	4836      	ldr	r0, [pc, #216]	; (8019e64 <tcp_receive+0x898>)
 8019d8a:	f005 faef 	bl	801f36c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	f000 80e7 	beq.w	8019f66 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019d98:	4b2e      	ldr	r3, [pc, #184]	; (8019e54 <tcp_receive+0x888>)
 8019d9a:	68db      	ldr	r3, [r3, #12]
 8019d9c:	899b      	ldrh	r3, [r3, #12]
 8019d9e:	b29b      	uxth	r3, r3
 8019da0:	4618      	mov	r0, r3
 8019da2:	f7fa fc8f 	bl	80146c4 <lwip_htons>
 8019da6:	4603      	mov	r3, r0
 8019da8:	b2db      	uxtb	r3, r3
 8019daa:	f003 0301 	and.w	r3, r3, #1
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d010      	beq.n	8019dd4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019db2:	e00a      	b.n	8019dca <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019db8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019dbe:	681a      	ldr	r2, [r3, #0]
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019dc4:	68f8      	ldr	r0, [r7, #12]
 8019dc6:	f7fd fcaa 	bl	801771e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d1f0      	bne.n	8019db4 <tcp_receive+0x7e8>
 8019dd2:	e0c8      	b.n	8019f66 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019dda:	e052      	b.n	8019e82 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019dde:	68db      	ldr	r3, [r3, #12]
 8019de0:	899b      	ldrh	r3, [r3, #12]
 8019de2:	b29b      	uxth	r3, r3
 8019de4:	4618      	mov	r0, r3
 8019de6:	f7fa fc6d 	bl	80146c4 <lwip_htons>
 8019dea:	4603      	mov	r3, r0
 8019dec:	b2db      	uxtb	r3, r3
 8019dee:	f003 0301 	and.w	r3, r3, #1
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d03d      	beq.n	8019e72 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019df6:	4b17      	ldr	r3, [pc, #92]	; (8019e54 <tcp_receive+0x888>)
 8019df8:	68db      	ldr	r3, [r3, #12]
 8019dfa:	899b      	ldrh	r3, [r3, #12]
 8019dfc:	b29b      	uxth	r3, r3
 8019dfe:	4618      	mov	r0, r3
 8019e00:	f7fa fc60 	bl	80146c4 <lwip_htons>
 8019e04:	4603      	mov	r3, r0
 8019e06:	b2db      	uxtb	r3, r3
 8019e08:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d130      	bne.n	8019e72 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019e10:	4b10      	ldr	r3, [pc, #64]	; (8019e54 <tcp_receive+0x888>)
 8019e12:	68db      	ldr	r3, [r3, #12]
 8019e14:	899b      	ldrh	r3, [r3, #12]
 8019e16:	b29c      	uxth	r4, r3
 8019e18:	2001      	movs	r0, #1
 8019e1a:	f7fa fc53 	bl	80146c4 <lwip_htons>
 8019e1e:	4603      	mov	r3, r0
 8019e20:	461a      	mov	r2, r3
 8019e22:	4b0c      	ldr	r3, [pc, #48]	; (8019e54 <tcp_receive+0x888>)
 8019e24:	68db      	ldr	r3, [r3, #12]
 8019e26:	4322      	orrs	r2, r4
 8019e28:	b292      	uxth	r2, r2
 8019e2a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019e2c:	4b09      	ldr	r3, [pc, #36]	; (8019e54 <tcp_receive+0x888>)
 8019e2e:	891c      	ldrh	r4, [r3, #8]
 8019e30:	4b08      	ldr	r3, [pc, #32]	; (8019e54 <tcp_receive+0x888>)
 8019e32:	68db      	ldr	r3, [r3, #12]
 8019e34:	899b      	ldrh	r3, [r3, #12]
 8019e36:	b29b      	uxth	r3, r3
 8019e38:	4618      	mov	r0, r3
 8019e3a:	f7fa fc43 	bl	80146c4 <lwip_htons>
 8019e3e:	4603      	mov	r3, r0
 8019e40:	b2db      	uxtb	r3, r3
 8019e42:	f003 0303 	and.w	r3, r3, #3
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d00e      	beq.n	8019e68 <tcp_receive+0x89c>
 8019e4a:	2301      	movs	r3, #1
 8019e4c:	e00d      	b.n	8019e6a <tcp_receive+0x89e>
 8019e4e:	bf00      	nop
 8019e50:	2000c81c 	.word	0x2000c81c
 8019e54:	2000c7fc 	.word	0x2000c7fc
 8019e58:	2000c826 	.word	0x2000c826
 8019e5c:	08022b0c 	.word	0x08022b0c
 8019e60:	08022eb4 	.word	0x08022eb4
 8019e64:	08022b58 	.word	0x08022b58
 8019e68:	2300      	movs	r3, #0
 8019e6a:	4423      	add	r3, r4
 8019e6c:	b29a      	uxth	r2, r3
 8019e6e:	4b98      	ldr	r3, [pc, #608]	; (801a0d0 <tcp_receive+0xb04>)
 8019e70:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8019e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e74:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8019e7c:	6938      	ldr	r0, [r7, #16]
 8019e7e:	f7fd fc4e 	bl	801771e <tcp_seg_free>
            while (next &&
 8019e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d00e      	beq.n	8019ea6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019e88:	4b91      	ldr	r3, [pc, #580]	; (801a0d0 <tcp_receive+0xb04>)
 8019e8a:	881b      	ldrh	r3, [r3, #0]
 8019e8c:	461a      	mov	r2, r3
 8019e8e:	4b91      	ldr	r3, [pc, #580]	; (801a0d4 <tcp_receive+0xb08>)
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	441a      	add	r2, r3
 8019e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e96:	68db      	ldr	r3, [r3, #12]
 8019e98:	685b      	ldr	r3, [r3, #4]
 8019e9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019e9c:	8909      	ldrh	r1, [r1, #8]
 8019e9e:	440b      	add	r3, r1
 8019ea0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	da9a      	bge.n	8019ddc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d059      	beq.n	8019f60 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019eac:	4b88      	ldr	r3, [pc, #544]	; (801a0d0 <tcp_receive+0xb04>)
 8019eae:	881b      	ldrh	r3, [r3, #0]
 8019eb0:	461a      	mov	r2, r3
 8019eb2:	4b88      	ldr	r3, [pc, #544]	; (801a0d4 <tcp_receive+0xb08>)
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	441a      	add	r2, r3
 8019eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019eba:	68db      	ldr	r3, [r3, #12]
 8019ebc:	685b      	ldr	r3, [r3, #4]
 8019ebe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	dd4d      	ble.n	8019f60 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ec6:	68db      	ldr	r3, [r3, #12]
 8019ec8:	685b      	ldr	r3, [r3, #4]
 8019eca:	b29a      	uxth	r2, r3
 8019ecc:	4b81      	ldr	r3, [pc, #516]	; (801a0d4 <tcp_receive+0xb08>)
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	b29b      	uxth	r3, r3
 8019ed2:	1ad3      	subs	r3, r2, r3
 8019ed4:	b29a      	uxth	r2, r3
 8019ed6:	4b80      	ldr	r3, [pc, #512]	; (801a0d8 <tcp_receive+0xb0c>)
 8019ed8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019eda:	4b7f      	ldr	r3, [pc, #508]	; (801a0d8 <tcp_receive+0xb0c>)
 8019edc:	68db      	ldr	r3, [r3, #12]
 8019ede:	899b      	ldrh	r3, [r3, #12]
 8019ee0:	b29b      	uxth	r3, r3
 8019ee2:	4618      	mov	r0, r3
 8019ee4:	f7fa fbee 	bl	80146c4 <lwip_htons>
 8019ee8:	4603      	mov	r3, r0
 8019eea:	b2db      	uxtb	r3, r3
 8019eec:	f003 0302 	and.w	r3, r3, #2
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d005      	beq.n	8019f00 <tcp_receive+0x934>
                inseg.len -= 1;
 8019ef4:	4b78      	ldr	r3, [pc, #480]	; (801a0d8 <tcp_receive+0xb0c>)
 8019ef6:	891b      	ldrh	r3, [r3, #8]
 8019ef8:	3b01      	subs	r3, #1
 8019efa:	b29a      	uxth	r2, r3
 8019efc:	4b76      	ldr	r3, [pc, #472]	; (801a0d8 <tcp_receive+0xb0c>)
 8019efe:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019f00:	4b75      	ldr	r3, [pc, #468]	; (801a0d8 <tcp_receive+0xb0c>)
 8019f02:	685b      	ldr	r3, [r3, #4]
 8019f04:	4a74      	ldr	r2, [pc, #464]	; (801a0d8 <tcp_receive+0xb0c>)
 8019f06:	8912      	ldrh	r2, [r2, #8]
 8019f08:	4611      	mov	r1, r2
 8019f0a:	4618      	mov	r0, r3
 8019f0c:	f7fb fe36 	bl	8015b7c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019f10:	4b71      	ldr	r3, [pc, #452]	; (801a0d8 <tcp_receive+0xb0c>)
 8019f12:	891c      	ldrh	r4, [r3, #8]
 8019f14:	4b70      	ldr	r3, [pc, #448]	; (801a0d8 <tcp_receive+0xb0c>)
 8019f16:	68db      	ldr	r3, [r3, #12]
 8019f18:	899b      	ldrh	r3, [r3, #12]
 8019f1a:	b29b      	uxth	r3, r3
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	f7fa fbd1 	bl	80146c4 <lwip_htons>
 8019f22:	4603      	mov	r3, r0
 8019f24:	b2db      	uxtb	r3, r3
 8019f26:	f003 0303 	and.w	r3, r3, #3
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d001      	beq.n	8019f32 <tcp_receive+0x966>
 8019f2e:	2301      	movs	r3, #1
 8019f30:	e000      	b.n	8019f34 <tcp_receive+0x968>
 8019f32:	2300      	movs	r3, #0
 8019f34:	4423      	add	r3, r4
 8019f36:	b29a      	uxth	r2, r3
 8019f38:	4b65      	ldr	r3, [pc, #404]	; (801a0d0 <tcp_receive+0xb04>)
 8019f3a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019f3c:	4b64      	ldr	r3, [pc, #400]	; (801a0d0 <tcp_receive+0xb04>)
 8019f3e:	881b      	ldrh	r3, [r3, #0]
 8019f40:	461a      	mov	r2, r3
 8019f42:	4b64      	ldr	r3, [pc, #400]	; (801a0d4 <tcp_receive+0xb08>)
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	441a      	add	r2, r3
 8019f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f4a:	68db      	ldr	r3, [r3, #12]
 8019f4c:	685b      	ldr	r3, [r3, #4]
 8019f4e:	429a      	cmp	r2, r3
 8019f50:	d006      	beq.n	8019f60 <tcp_receive+0x994>
 8019f52:	4b62      	ldr	r3, [pc, #392]	; (801a0dc <tcp_receive+0xb10>)
 8019f54:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8019f58:	4961      	ldr	r1, [pc, #388]	; (801a0e0 <tcp_receive+0xb14>)
 8019f5a:	4862      	ldr	r0, [pc, #392]	; (801a0e4 <tcp_receive+0xb18>)
 8019f5c:	f005 fa06 	bl	801f36c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019f64:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019f66:	4b5a      	ldr	r3, [pc, #360]	; (801a0d0 <tcp_receive+0xb04>)
 8019f68:	881b      	ldrh	r3, [r3, #0]
 8019f6a:	461a      	mov	r2, r3
 8019f6c:	4b59      	ldr	r3, [pc, #356]	; (801a0d4 <tcp_receive+0xb08>)
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	441a      	add	r2, r3
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019f7a:	4b55      	ldr	r3, [pc, #340]	; (801a0d0 <tcp_receive+0xb04>)
 8019f7c:	881b      	ldrh	r3, [r3, #0]
 8019f7e:	429a      	cmp	r2, r3
 8019f80:	d206      	bcs.n	8019f90 <tcp_receive+0x9c4>
 8019f82:	4b56      	ldr	r3, [pc, #344]	; (801a0dc <tcp_receive+0xb10>)
 8019f84:	f240 6207 	movw	r2, #1543	; 0x607
 8019f88:	4957      	ldr	r1, [pc, #348]	; (801a0e8 <tcp_receive+0xb1c>)
 8019f8a:	4856      	ldr	r0, [pc, #344]	; (801a0e4 <tcp_receive+0xb18>)
 8019f8c:	f005 f9ee 	bl	801f36c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019f94:	4b4e      	ldr	r3, [pc, #312]	; (801a0d0 <tcp_receive+0xb04>)
 8019f96:	881b      	ldrh	r3, [r3, #0]
 8019f98:	1ad3      	subs	r3, r2, r3
 8019f9a:	b29a      	uxth	r2, r3
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8019fa0:	6878      	ldr	r0, [r7, #4]
 8019fa2:	f7fc fe97 	bl	8016cd4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019fa6:	4b4c      	ldr	r3, [pc, #304]	; (801a0d8 <tcp_receive+0xb0c>)
 8019fa8:	685b      	ldr	r3, [r3, #4]
 8019faa:	891b      	ldrh	r3, [r3, #8]
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d006      	beq.n	8019fbe <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8019fb0:	4b49      	ldr	r3, [pc, #292]	; (801a0d8 <tcp_receive+0xb0c>)
 8019fb2:	685b      	ldr	r3, [r3, #4]
 8019fb4:	4a4d      	ldr	r2, [pc, #308]	; (801a0ec <tcp_receive+0xb20>)
 8019fb6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019fb8:	4b47      	ldr	r3, [pc, #284]	; (801a0d8 <tcp_receive+0xb0c>)
 8019fba:	2200      	movs	r2, #0
 8019fbc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019fbe:	4b46      	ldr	r3, [pc, #280]	; (801a0d8 <tcp_receive+0xb0c>)
 8019fc0:	68db      	ldr	r3, [r3, #12]
 8019fc2:	899b      	ldrh	r3, [r3, #12]
 8019fc4:	b29b      	uxth	r3, r3
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	f7fa fb7c 	bl	80146c4 <lwip_htons>
 8019fcc:	4603      	mov	r3, r0
 8019fce:	b2db      	uxtb	r3, r3
 8019fd0:	f003 0301 	and.w	r3, r3, #1
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	f000 80b8 	beq.w	801a14a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8019fda:	4b45      	ldr	r3, [pc, #276]	; (801a0f0 <tcp_receive+0xb24>)
 8019fdc:	781b      	ldrb	r3, [r3, #0]
 8019fde:	f043 0320 	orr.w	r3, r3, #32
 8019fe2:	b2da      	uxtb	r2, r3
 8019fe4:	4b42      	ldr	r3, [pc, #264]	; (801a0f0 <tcp_receive+0xb24>)
 8019fe6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019fe8:	e0af      	b.n	801a14a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019fee:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019ff4:	68db      	ldr	r3, [r3, #12]
 8019ff6:	685b      	ldr	r3, [r3, #4]
 8019ff8:	4a36      	ldr	r2, [pc, #216]	; (801a0d4 <tcp_receive+0xb08>)
 8019ffa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019ffc:	68bb      	ldr	r3, [r7, #8]
 8019ffe:	891b      	ldrh	r3, [r3, #8]
 801a000:	461c      	mov	r4, r3
 801a002:	68bb      	ldr	r3, [r7, #8]
 801a004:	68db      	ldr	r3, [r3, #12]
 801a006:	899b      	ldrh	r3, [r3, #12]
 801a008:	b29b      	uxth	r3, r3
 801a00a:	4618      	mov	r0, r3
 801a00c:	f7fa fb5a 	bl	80146c4 <lwip_htons>
 801a010:	4603      	mov	r3, r0
 801a012:	b2db      	uxtb	r3, r3
 801a014:	f003 0303 	and.w	r3, r3, #3
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d001      	beq.n	801a020 <tcp_receive+0xa54>
 801a01c:	2301      	movs	r3, #1
 801a01e:	e000      	b.n	801a022 <tcp_receive+0xa56>
 801a020:	2300      	movs	r3, #0
 801a022:	191a      	adds	r2, r3, r4
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a028:	441a      	add	r2, r3
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a032:	461c      	mov	r4, r3
 801a034:	68bb      	ldr	r3, [r7, #8]
 801a036:	891b      	ldrh	r3, [r3, #8]
 801a038:	461d      	mov	r5, r3
 801a03a:	68bb      	ldr	r3, [r7, #8]
 801a03c:	68db      	ldr	r3, [r3, #12]
 801a03e:	899b      	ldrh	r3, [r3, #12]
 801a040:	b29b      	uxth	r3, r3
 801a042:	4618      	mov	r0, r3
 801a044:	f7fa fb3e 	bl	80146c4 <lwip_htons>
 801a048:	4603      	mov	r3, r0
 801a04a:	b2db      	uxtb	r3, r3
 801a04c:	f003 0303 	and.w	r3, r3, #3
 801a050:	2b00      	cmp	r3, #0
 801a052:	d001      	beq.n	801a058 <tcp_receive+0xa8c>
 801a054:	2301      	movs	r3, #1
 801a056:	e000      	b.n	801a05a <tcp_receive+0xa8e>
 801a058:	2300      	movs	r3, #0
 801a05a:	442b      	add	r3, r5
 801a05c:	429c      	cmp	r4, r3
 801a05e:	d206      	bcs.n	801a06e <tcp_receive+0xaa2>
 801a060:	4b1e      	ldr	r3, [pc, #120]	; (801a0dc <tcp_receive+0xb10>)
 801a062:	f240 622b 	movw	r2, #1579	; 0x62b
 801a066:	4923      	ldr	r1, [pc, #140]	; (801a0f4 <tcp_receive+0xb28>)
 801a068:	481e      	ldr	r0, [pc, #120]	; (801a0e4 <tcp_receive+0xb18>)
 801a06a:	f005 f97f 	bl	801f36c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a06e:	68bb      	ldr	r3, [r7, #8]
 801a070:	891b      	ldrh	r3, [r3, #8]
 801a072:	461c      	mov	r4, r3
 801a074:	68bb      	ldr	r3, [r7, #8]
 801a076:	68db      	ldr	r3, [r3, #12]
 801a078:	899b      	ldrh	r3, [r3, #12]
 801a07a:	b29b      	uxth	r3, r3
 801a07c:	4618      	mov	r0, r3
 801a07e:	f7fa fb21 	bl	80146c4 <lwip_htons>
 801a082:	4603      	mov	r3, r0
 801a084:	b2db      	uxtb	r3, r3
 801a086:	f003 0303 	and.w	r3, r3, #3
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d001      	beq.n	801a092 <tcp_receive+0xac6>
 801a08e:	2301      	movs	r3, #1
 801a090:	e000      	b.n	801a094 <tcp_receive+0xac8>
 801a092:	2300      	movs	r3, #0
 801a094:	1919      	adds	r1, r3, r4
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a09a:	b28b      	uxth	r3, r1
 801a09c:	1ad3      	subs	r3, r2, r3
 801a09e:	b29a      	uxth	r2, r3
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801a0a4:	6878      	ldr	r0, [r7, #4]
 801a0a6:	f7fc fe15 	bl	8016cd4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801a0aa:	68bb      	ldr	r3, [r7, #8]
 801a0ac:	685b      	ldr	r3, [r3, #4]
 801a0ae:	891b      	ldrh	r3, [r3, #8]
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d028      	beq.n	801a106 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801a0b4:	4b0d      	ldr	r3, [pc, #52]	; (801a0ec <tcp_receive+0xb20>)
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d01d      	beq.n	801a0f8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801a0bc:	4b0b      	ldr	r3, [pc, #44]	; (801a0ec <tcp_receive+0xb20>)
 801a0be:	681a      	ldr	r2, [r3, #0]
 801a0c0:	68bb      	ldr	r3, [r7, #8]
 801a0c2:	685b      	ldr	r3, [r3, #4]
 801a0c4:	4619      	mov	r1, r3
 801a0c6:	4610      	mov	r0, r2
 801a0c8:	f7fb ffbe 	bl	8016048 <pbuf_cat>
 801a0cc:	e018      	b.n	801a100 <tcp_receive+0xb34>
 801a0ce:	bf00      	nop
 801a0d0:	2000c826 	.word	0x2000c826
 801a0d4:	2000c81c 	.word	0x2000c81c
 801a0d8:	2000c7fc 	.word	0x2000c7fc
 801a0dc:	08022b0c 	.word	0x08022b0c
 801a0e0:	08022eec 	.word	0x08022eec
 801a0e4:	08022b58 	.word	0x08022b58
 801a0e8:	08022f28 	.word	0x08022f28
 801a0ec:	2000c82c 	.word	0x2000c82c
 801a0f0:	2000c829 	.word	0x2000c829
 801a0f4:	08022f48 	.word	0x08022f48
            } else {
              recv_data = cseg->p;
 801a0f8:	68bb      	ldr	r3, [r7, #8]
 801a0fa:	685b      	ldr	r3, [r3, #4]
 801a0fc:	4a70      	ldr	r2, [pc, #448]	; (801a2c0 <tcp_receive+0xcf4>)
 801a0fe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801a100:	68bb      	ldr	r3, [r7, #8]
 801a102:	2200      	movs	r2, #0
 801a104:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a106:	68bb      	ldr	r3, [r7, #8]
 801a108:	68db      	ldr	r3, [r3, #12]
 801a10a:	899b      	ldrh	r3, [r3, #12]
 801a10c:	b29b      	uxth	r3, r3
 801a10e:	4618      	mov	r0, r3
 801a110:	f7fa fad8 	bl	80146c4 <lwip_htons>
 801a114:	4603      	mov	r3, r0
 801a116:	b2db      	uxtb	r3, r3
 801a118:	f003 0301 	and.w	r3, r3, #1
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d00d      	beq.n	801a13c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801a120:	4b68      	ldr	r3, [pc, #416]	; (801a2c4 <tcp_receive+0xcf8>)
 801a122:	781b      	ldrb	r3, [r3, #0]
 801a124:	f043 0320 	orr.w	r3, r3, #32
 801a128:	b2da      	uxtb	r2, r3
 801a12a:	4b66      	ldr	r3, [pc, #408]	; (801a2c4 <tcp_receive+0xcf8>)
 801a12c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	7d1b      	ldrb	r3, [r3, #20]
 801a132:	2b04      	cmp	r3, #4
 801a134:	d102      	bne.n	801a13c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	2207      	movs	r2, #7
 801a13a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801a13c:	68bb      	ldr	r3, [r7, #8]
 801a13e:	681a      	ldr	r2, [r3, #0]
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801a144:	68b8      	ldr	r0, [r7, #8]
 801a146:	f7fd faea 	bl	801771e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d008      	beq.n	801a164 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a156:	68db      	ldr	r3, [r3, #12]
 801a158:	685a      	ldr	r2, [r3, #4]
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801a15e:	429a      	cmp	r2, r3
 801a160:	f43f af43 	beq.w	8019fea <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	8b5b      	ldrh	r3, [r3, #26]
 801a168:	f003 0301 	and.w	r3, r3, #1
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d00e      	beq.n	801a18e <tcp_receive+0xbc2>
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	8b5b      	ldrh	r3, [r3, #26]
 801a174:	f023 0301 	bic.w	r3, r3, #1
 801a178:	b29a      	uxth	r2, r3
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	835a      	strh	r2, [r3, #26]
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	8b5b      	ldrh	r3, [r3, #26]
 801a182:	f043 0302 	orr.w	r3, r3, #2
 801a186:	b29a      	uxth	r2, r3
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a18c:	e188      	b.n	801a4a0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	8b5b      	ldrh	r3, [r3, #26]
 801a192:	f043 0301 	orr.w	r3, r3, #1
 801a196:	b29a      	uxth	r2, r3
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a19c:	e180      	b.n	801a4a0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d106      	bne.n	801a1b4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a1a6:	4848      	ldr	r0, [pc, #288]	; (801a2c8 <tcp_receive+0xcfc>)
 801a1a8:	f7fd faf0 	bl	801778c <tcp_seg_copy>
 801a1ac:	4602      	mov	r2, r0
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	675a      	str	r2, [r3, #116]	; 0x74
 801a1b2:	e16d      	b.n	801a490 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a1bc:	63bb      	str	r3, [r7, #56]	; 0x38
 801a1be:	e157      	b.n	801a470 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801a1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1c2:	68db      	ldr	r3, [r3, #12]
 801a1c4:	685a      	ldr	r2, [r3, #4]
 801a1c6:	4b41      	ldr	r3, [pc, #260]	; (801a2cc <tcp_receive+0xd00>)
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	429a      	cmp	r2, r3
 801a1cc:	d11d      	bne.n	801a20a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801a1ce:	4b3e      	ldr	r3, [pc, #248]	; (801a2c8 <tcp_receive+0xcfc>)
 801a1d0:	891a      	ldrh	r2, [r3, #8]
 801a1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1d4:	891b      	ldrh	r3, [r3, #8]
 801a1d6:	429a      	cmp	r2, r3
 801a1d8:	f240 814f 	bls.w	801a47a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a1dc:	483a      	ldr	r0, [pc, #232]	; (801a2c8 <tcp_receive+0xcfc>)
 801a1de:	f7fd fad5 	bl	801778c <tcp_seg_copy>
 801a1e2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801a1e4:	697b      	ldr	r3, [r7, #20]
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	f000 8149 	beq.w	801a47e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801a1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d003      	beq.n	801a1fa <tcp_receive+0xc2e>
                    prev->next = cseg;
 801a1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1f4:	697a      	ldr	r2, [r7, #20]
 801a1f6:	601a      	str	r2, [r3, #0]
 801a1f8:	e002      	b.n	801a200 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	697a      	ldr	r2, [r7, #20]
 801a1fe:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801a200:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a202:	6978      	ldr	r0, [r7, #20]
 801a204:	f7ff f8de 	bl	80193c4 <tcp_oos_insert_segment>
                }
                break;
 801a208:	e139      	b.n	801a47e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801a20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d117      	bne.n	801a240 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a210:	4b2e      	ldr	r3, [pc, #184]	; (801a2cc <tcp_receive+0xd00>)
 801a212:	681a      	ldr	r2, [r3, #0]
 801a214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a216:	68db      	ldr	r3, [r3, #12]
 801a218:	685b      	ldr	r3, [r3, #4]
 801a21a:	1ad3      	subs	r3, r2, r3
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	da57      	bge.n	801a2d0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a220:	4829      	ldr	r0, [pc, #164]	; (801a2c8 <tcp_receive+0xcfc>)
 801a222:	f7fd fab3 	bl	801778c <tcp_seg_copy>
 801a226:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801a228:	69bb      	ldr	r3, [r7, #24]
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	f000 8129 	beq.w	801a482 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	69ba      	ldr	r2, [r7, #24]
 801a234:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801a236:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a238:	69b8      	ldr	r0, [r7, #24]
 801a23a:	f7ff f8c3 	bl	80193c4 <tcp_oos_insert_segment>
                  }
                  break;
 801a23e:	e120      	b.n	801a482 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a240:	4b22      	ldr	r3, [pc, #136]	; (801a2cc <tcp_receive+0xd00>)
 801a242:	681a      	ldr	r2, [r3, #0]
 801a244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a246:	68db      	ldr	r3, [r3, #12]
 801a248:	685b      	ldr	r3, [r3, #4]
 801a24a:	1ad3      	subs	r3, r2, r3
 801a24c:	3b01      	subs	r3, #1
 801a24e:	2b00      	cmp	r3, #0
 801a250:	db3e      	blt.n	801a2d0 <tcp_receive+0xd04>
 801a252:	4b1e      	ldr	r3, [pc, #120]	; (801a2cc <tcp_receive+0xd00>)
 801a254:	681a      	ldr	r2, [r3, #0]
 801a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a258:	68db      	ldr	r3, [r3, #12]
 801a25a:	685b      	ldr	r3, [r3, #4]
 801a25c:	1ad3      	subs	r3, r2, r3
 801a25e:	3301      	adds	r3, #1
 801a260:	2b00      	cmp	r3, #0
 801a262:	dc35      	bgt.n	801a2d0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a264:	4818      	ldr	r0, [pc, #96]	; (801a2c8 <tcp_receive+0xcfc>)
 801a266:	f7fd fa91 	bl	801778c <tcp_seg_copy>
 801a26a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801a26c:	69fb      	ldr	r3, [r7, #28]
 801a26e:	2b00      	cmp	r3, #0
 801a270:	f000 8109 	beq.w	801a486 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a276:	68db      	ldr	r3, [r3, #12]
 801a278:	685b      	ldr	r3, [r3, #4]
 801a27a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a27c:	8912      	ldrh	r2, [r2, #8]
 801a27e:	441a      	add	r2, r3
 801a280:	4b12      	ldr	r3, [pc, #72]	; (801a2cc <tcp_receive+0xd00>)
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	1ad3      	subs	r3, r2, r3
 801a286:	2b00      	cmp	r3, #0
 801a288:	dd12      	ble.n	801a2b0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a28a:	4b10      	ldr	r3, [pc, #64]	; (801a2cc <tcp_receive+0xd00>)
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	b29a      	uxth	r2, r3
 801a290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a292:	68db      	ldr	r3, [r3, #12]
 801a294:	685b      	ldr	r3, [r3, #4]
 801a296:	b29b      	uxth	r3, r3
 801a298:	1ad3      	subs	r3, r2, r3
 801a29a:	b29a      	uxth	r2, r3
 801a29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a29e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2a2:	685a      	ldr	r2, [r3, #4]
 801a2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2a6:	891b      	ldrh	r3, [r3, #8]
 801a2a8:	4619      	mov	r1, r3
 801a2aa:	4610      	mov	r0, r2
 801a2ac:	f7fb fc66 	bl	8015b7c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801a2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2b2:	69fa      	ldr	r2, [r7, #28]
 801a2b4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a2b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a2b8:	69f8      	ldr	r0, [r7, #28]
 801a2ba:	f7ff f883 	bl	80193c4 <tcp_oos_insert_segment>
                  }
                  break;
 801a2be:	e0e2      	b.n	801a486 <tcp_receive+0xeba>
 801a2c0:	2000c82c 	.word	0x2000c82c
 801a2c4:	2000c829 	.word	0x2000c829
 801a2c8:	2000c7fc 	.word	0x2000c7fc
 801a2cc:	2000c81c 	.word	0x2000c81c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801a2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2d2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	f040 80c6 	bne.w	801a46a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a2de:	4b80      	ldr	r3, [pc, #512]	; (801a4e0 <tcp_receive+0xf14>)
 801a2e0:	681a      	ldr	r2, [r3, #0]
 801a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2e4:	68db      	ldr	r3, [r3, #12]
 801a2e6:	685b      	ldr	r3, [r3, #4]
 801a2e8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	f340 80bd 	ble.w	801a46a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2f2:	68db      	ldr	r3, [r3, #12]
 801a2f4:	899b      	ldrh	r3, [r3, #12]
 801a2f6:	b29b      	uxth	r3, r3
 801a2f8:	4618      	mov	r0, r3
 801a2fa:	f7fa f9e3 	bl	80146c4 <lwip_htons>
 801a2fe:	4603      	mov	r3, r0
 801a300:	b2db      	uxtb	r3, r3
 801a302:	f003 0301 	and.w	r3, r3, #1
 801a306:	2b00      	cmp	r3, #0
 801a308:	f040 80bf 	bne.w	801a48a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801a30c:	4875      	ldr	r0, [pc, #468]	; (801a4e4 <tcp_receive+0xf18>)
 801a30e:	f7fd fa3d 	bl	801778c <tcp_seg_copy>
 801a312:	4602      	mov	r2, r0
 801a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a316:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801a318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	f000 80b6 	beq.w	801a48e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a324:	68db      	ldr	r3, [r3, #12]
 801a326:	685b      	ldr	r3, [r3, #4]
 801a328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a32a:	8912      	ldrh	r2, [r2, #8]
 801a32c:	441a      	add	r2, r3
 801a32e:	4b6c      	ldr	r3, [pc, #432]	; (801a4e0 <tcp_receive+0xf14>)
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	1ad3      	subs	r3, r2, r3
 801a334:	2b00      	cmp	r3, #0
 801a336:	dd12      	ble.n	801a35e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a338:	4b69      	ldr	r3, [pc, #420]	; (801a4e0 <tcp_receive+0xf14>)
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	b29a      	uxth	r2, r3
 801a33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a340:	68db      	ldr	r3, [r3, #12]
 801a342:	685b      	ldr	r3, [r3, #4]
 801a344:	b29b      	uxth	r3, r3
 801a346:	1ad3      	subs	r3, r2, r3
 801a348:	b29a      	uxth	r2, r3
 801a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a34c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801a34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a350:	685a      	ldr	r2, [r3, #4]
 801a352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a354:	891b      	ldrh	r3, [r3, #8]
 801a356:	4619      	mov	r1, r3
 801a358:	4610      	mov	r0, r2
 801a35a:	f7fb fc0f 	bl	8015b7c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a35e:	4b62      	ldr	r3, [pc, #392]	; (801a4e8 <tcp_receive+0xf1c>)
 801a360:	881b      	ldrh	r3, [r3, #0]
 801a362:	461a      	mov	r2, r3
 801a364:	4b5e      	ldr	r3, [pc, #376]	; (801a4e0 <tcp_receive+0xf14>)
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	441a      	add	r2, r3
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a36e:	6879      	ldr	r1, [r7, #4]
 801a370:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a372:	440b      	add	r3, r1
 801a374:	1ad3      	subs	r3, r2, r3
 801a376:	2b00      	cmp	r3, #0
 801a378:	f340 8089 	ble.w	801a48e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	68db      	ldr	r3, [r3, #12]
 801a382:	899b      	ldrh	r3, [r3, #12]
 801a384:	b29b      	uxth	r3, r3
 801a386:	4618      	mov	r0, r3
 801a388:	f7fa f99c 	bl	80146c4 <lwip_htons>
 801a38c:	4603      	mov	r3, r0
 801a38e:	b2db      	uxtb	r3, r3
 801a390:	f003 0301 	and.w	r3, r3, #1
 801a394:	2b00      	cmp	r3, #0
 801a396:	d022      	beq.n	801a3de <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	68db      	ldr	r3, [r3, #12]
 801a39e:	899b      	ldrh	r3, [r3, #12]
 801a3a0:	b29b      	uxth	r3, r3
 801a3a2:	b21b      	sxth	r3, r3
 801a3a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a3a8:	b21c      	sxth	r4, r3
 801a3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	68db      	ldr	r3, [r3, #12]
 801a3b0:	899b      	ldrh	r3, [r3, #12]
 801a3b2:	b29b      	uxth	r3, r3
 801a3b4:	4618      	mov	r0, r3
 801a3b6:	f7fa f985 	bl	80146c4 <lwip_htons>
 801a3ba:	4603      	mov	r3, r0
 801a3bc:	b2db      	uxtb	r3, r3
 801a3be:	b29b      	uxth	r3, r3
 801a3c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a3c4:	b29b      	uxth	r3, r3
 801a3c6:	4618      	mov	r0, r3
 801a3c8:	f7fa f97c 	bl	80146c4 <lwip_htons>
 801a3cc:	4603      	mov	r3, r0
 801a3ce:	b21b      	sxth	r3, r3
 801a3d0:	4323      	orrs	r3, r4
 801a3d2:	b21a      	sxth	r2, r3
 801a3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	68db      	ldr	r3, [r3, #12]
 801a3da:	b292      	uxth	r2, r2
 801a3dc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3e2:	b29a      	uxth	r2, r3
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a3e8:	4413      	add	r3, r2
 801a3ea:	b299      	uxth	r1, r3
 801a3ec:	4b3c      	ldr	r3, [pc, #240]	; (801a4e0 <tcp_receive+0xf14>)
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	b29a      	uxth	r2, r3
 801a3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	1a8a      	subs	r2, r1, r2
 801a3f8:	b292      	uxth	r2, r2
 801a3fa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	685a      	ldr	r2, [r3, #4]
 801a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	891b      	ldrh	r3, [r3, #8]
 801a408:	4619      	mov	r1, r3
 801a40a:	4610      	mov	r0, r2
 801a40c:	f7fb fbb6 	bl	8015b7c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	891c      	ldrh	r4, [r3, #8]
 801a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	68db      	ldr	r3, [r3, #12]
 801a41c:	899b      	ldrh	r3, [r3, #12]
 801a41e:	b29b      	uxth	r3, r3
 801a420:	4618      	mov	r0, r3
 801a422:	f7fa f94f 	bl	80146c4 <lwip_htons>
 801a426:	4603      	mov	r3, r0
 801a428:	b2db      	uxtb	r3, r3
 801a42a:	f003 0303 	and.w	r3, r3, #3
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d001      	beq.n	801a436 <tcp_receive+0xe6a>
 801a432:	2301      	movs	r3, #1
 801a434:	e000      	b.n	801a438 <tcp_receive+0xe6c>
 801a436:	2300      	movs	r3, #0
 801a438:	4423      	add	r3, r4
 801a43a:	b29a      	uxth	r2, r3
 801a43c:	4b2a      	ldr	r3, [pc, #168]	; (801a4e8 <tcp_receive+0xf1c>)
 801a43e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a440:	4b29      	ldr	r3, [pc, #164]	; (801a4e8 <tcp_receive+0xf1c>)
 801a442:	881b      	ldrh	r3, [r3, #0]
 801a444:	461a      	mov	r2, r3
 801a446:	4b26      	ldr	r3, [pc, #152]	; (801a4e0 <tcp_receive+0xf14>)
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	441a      	add	r2, r3
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a450:	6879      	ldr	r1, [r7, #4]
 801a452:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a454:	440b      	add	r3, r1
 801a456:	429a      	cmp	r2, r3
 801a458:	d019      	beq.n	801a48e <tcp_receive+0xec2>
 801a45a:	4b24      	ldr	r3, [pc, #144]	; (801a4ec <tcp_receive+0xf20>)
 801a45c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801a460:	4923      	ldr	r1, [pc, #140]	; (801a4f0 <tcp_receive+0xf24>)
 801a462:	4824      	ldr	r0, [pc, #144]	; (801a4f4 <tcp_receive+0xf28>)
 801a464:	f004 ff82 	bl	801f36c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a468:	e011      	b.n	801a48e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	63bb      	str	r3, [r7, #56]	; 0x38
 801a470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a472:	2b00      	cmp	r3, #0
 801a474:	f47f aea4 	bne.w	801a1c0 <tcp_receive+0xbf4>
 801a478:	e00a      	b.n	801a490 <tcp_receive+0xec4>
                break;
 801a47a:	bf00      	nop
 801a47c:	e008      	b.n	801a490 <tcp_receive+0xec4>
                break;
 801a47e:	bf00      	nop
 801a480:	e006      	b.n	801a490 <tcp_receive+0xec4>
                  break;
 801a482:	bf00      	nop
 801a484:	e004      	b.n	801a490 <tcp_receive+0xec4>
                  break;
 801a486:	bf00      	nop
 801a488:	e002      	b.n	801a490 <tcp_receive+0xec4>
                  break;
 801a48a:	bf00      	nop
 801a48c:	e000      	b.n	801a490 <tcp_receive+0xec4>
                break;
 801a48e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a490:	6878      	ldr	r0, [r7, #4]
 801a492:	f001 fe8b 	bl	801c1ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a496:	e003      	b.n	801a4a0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a498:	6878      	ldr	r0, [r7, #4]
 801a49a:	f001 fe87 	bl	801c1ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a49e:	e01a      	b.n	801a4d6 <tcp_receive+0xf0a>
 801a4a0:	e019      	b.n	801a4d6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a4a2:	4b0f      	ldr	r3, [pc, #60]	; (801a4e0 <tcp_receive+0xf14>)
 801a4a4:	681a      	ldr	r2, [r3, #0]
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4aa:	1ad3      	subs	r3, r2, r3
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	db0a      	blt.n	801a4c6 <tcp_receive+0xefa>
 801a4b0:	4b0b      	ldr	r3, [pc, #44]	; (801a4e0 <tcp_receive+0xf14>)
 801a4b2:	681a      	ldr	r2, [r3, #0]
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4b8:	6879      	ldr	r1, [r7, #4]
 801a4ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a4bc:	440b      	add	r3, r1
 801a4be:	1ad3      	subs	r3, r2, r3
 801a4c0:	3301      	adds	r3, #1
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	dd07      	ble.n	801a4d6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	8b5b      	ldrh	r3, [r3, #26]
 801a4ca:	f043 0302 	orr.w	r3, r3, #2
 801a4ce:	b29a      	uxth	r2, r3
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a4d4:	e7ff      	b.n	801a4d6 <tcp_receive+0xf0a>
 801a4d6:	bf00      	nop
 801a4d8:	3750      	adds	r7, #80	; 0x50
 801a4da:	46bd      	mov	sp, r7
 801a4dc:	bdb0      	pop	{r4, r5, r7, pc}
 801a4de:	bf00      	nop
 801a4e0:	2000c81c 	.word	0x2000c81c
 801a4e4:	2000c7fc 	.word	0x2000c7fc
 801a4e8:	2000c826 	.word	0x2000c826
 801a4ec:	08022b0c 	.word	0x08022b0c
 801a4f0:	08022eb4 	.word	0x08022eb4
 801a4f4:	08022b58 	.word	0x08022b58

0801a4f8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a4f8:	b480      	push	{r7}
 801a4fa:	b083      	sub	sp, #12
 801a4fc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a4fe:	4b15      	ldr	r3, [pc, #84]	; (801a554 <tcp_get_next_optbyte+0x5c>)
 801a500:	881b      	ldrh	r3, [r3, #0]
 801a502:	1c5a      	adds	r2, r3, #1
 801a504:	b291      	uxth	r1, r2
 801a506:	4a13      	ldr	r2, [pc, #76]	; (801a554 <tcp_get_next_optbyte+0x5c>)
 801a508:	8011      	strh	r1, [r2, #0]
 801a50a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a50c:	4b12      	ldr	r3, [pc, #72]	; (801a558 <tcp_get_next_optbyte+0x60>)
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	2b00      	cmp	r3, #0
 801a512:	d004      	beq.n	801a51e <tcp_get_next_optbyte+0x26>
 801a514:	4b11      	ldr	r3, [pc, #68]	; (801a55c <tcp_get_next_optbyte+0x64>)
 801a516:	881b      	ldrh	r3, [r3, #0]
 801a518:	88fa      	ldrh	r2, [r7, #6]
 801a51a:	429a      	cmp	r2, r3
 801a51c:	d208      	bcs.n	801a530 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a51e:	4b10      	ldr	r3, [pc, #64]	; (801a560 <tcp_get_next_optbyte+0x68>)
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	3314      	adds	r3, #20
 801a524:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a526:	88fb      	ldrh	r3, [r7, #6]
 801a528:	683a      	ldr	r2, [r7, #0]
 801a52a:	4413      	add	r3, r2
 801a52c:	781b      	ldrb	r3, [r3, #0]
 801a52e:	e00b      	b.n	801a548 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a530:	88fb      	ldrh	r3, [r7, #6]
 801a532:	b2da      	uxtb	r2, r3
 801a534:	4b09      	ldr	r3, [pc, #36]	; (801a55c <tcp_get_next_optbyte+0x64>)
 801a536:	881b      	ldrh	r3, [r3, #0]
 801a538:	b2db      	uxtb	r3, r3
 801a53a:	1ad3      	subs	r3, r2, r3
 801a53c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a53e:	4b06      	ldr	r3, [pc, #24]	; (801a558 <tcp_get_next_optbyte+0x60>)
 801a540:	681a      	ldr	r2, [r3, #0]
 801a542:	797b      	ldrb	r3, [r7, #5]
 801a544:	4413      	add	r3, r2
 801a546:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a548:	4618      	mov	r0, r3
 801a54a:	370c      	adds	r7, #12
 801a54c:	46bd      	mov	sp, r7
 801a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a552:	4770      	bx	lr
 801a554:	2000c818 	.word	0x2000c818
 801a558:	2000c814 	.word	0x2000c814
 801a55c:	2000c812 	.word	0x2000c812
 801a560:	2000c80c 	.word	0x2000c80c

0801a564 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a564:	b580      	push	{r7, lr}
 801a566:	b084      	sub	sp, #16
 801a568:	af00      	add	r7, sp, #0
 801a56a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d106      	bne.n	801a580 <tcp_parseopt+0x1c>
 801a572:	4b32      	ldr	r3, [pc, #200]	; (801a63c <tcp_parseopt+0xd8>)
 801a574:	f240 727d 	movw	r2, #1917	; 0x77d
 801a578:	4931      	ldr	r1, [pc, #196]	; (801a640 <tcp_parseopt+0xdc>)
 801a57a:	4832      	ldr	r0, [pc, #200]	; (801a644 <tcp_parseopt+0xe0>)
 801a57c:	f004 fef6 	bl	801f36c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a580:	4b31      	ldr	r3, [pc, #196]	; (801a648 <tcp_parseopt+0xe4>)
 801a582:	881b      	ldrh	r3, [r3, #0]
 801a584:	2b00      	cmp	r3, #0
 801a586:	d055      	beq.n	801a634 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a588:	4b30      	ldr	r3, [pc, #192]	; (801a64c <tcp_parseopt+0xe8>)
 801a58a:	2200      	movs	r2, #0
 801a58c:	801a      	strh	r2, [r3, #0]
 801a58e:	e045      	b.n	801a61c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801a590:	f7ff ffb2 	bl	801a4f8 <tcp_get_next_optbyte>
 801a594:	4603      	mov	r3, r0
 801a596:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a598:	7bfb      	ldrb	r3, [r7, #15]
 801a59a:	2b02      	cmp	r3, #2
 801a59c:	d006      	beq.n	801a5ac <tcp_parseopt+0x48>
 801a59e:	2b02      	cmp	r3, #2
 801a5a0:	dc2b      	bgt.n	801a5fa <tcp_parseopt+0x96>
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d041      	beq.n	801a62a <tcp_parseopt+0xc6>
 801a5a6:	2b01      	cmp	r3, #1
 801a5a8:	d127      	bne.n	801a5fa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801a5aa:	e037      	b.n	801a61c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a5ac:	f7ff ffa4 	bl	801a4f8 <tcp_get_next_optbyte>
 801a5b0:	4603      	mov	r3, r0
 801a5b2:	2b04      	cmp	r3, #4
 801a5b4:	d13b      	bne.n	801a62e <tcp_parseopt+0xca>
 801a5b6:	4b25      	ldr	r3, [pc, #148]	; (801a64c <tcp_parseopt+0xe8>)
 801a5b8:	881b      	ldrh	r3, [r3, #0]
 801a5ba:	3301      	adds	r3, #1
 801a5bc:	4a22      	ldr	r2, [pc, #136]	; (801a648 <tcp_parseopt+0xe4>)
 801a5be:	8812      	ldrh	r2, [r2, #0]
 801a5c0:	4293      	cmp	r3, r2
 801a5c2:	da34      	bge.n	801a62e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a5c4:	f7ff ff98 	bl	801a4f8 <tcp_get_next_optbyte>
 801a5c8:	4603      	mov	r3, r0
 801a5ca:	b29b      	uxth	r3, r3
 801a5cc:	021b      	lsls	r3, r3, #8
 801a5ce:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a5d0:	f7ff ff92 	bl	801a4f8 <tcp_get_next_optbyte>
 801a5d4:	4603      	mov	r3, r0
 801a5d6:	b29a      	uxth	r2, r3
 801a5d8:	89bb      	ldrh	r3, [r7, #12]
 801a5da:	4313      	orrs	r3, r2
 801a5dc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a5de:	89bb      	ldrh	r3, [r7, #12]
 801a5e0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a5e4:	d804      	bhi.n	801a5f0 <tcp_parseopt+0x8c>
 801a5e6:	89bb      	ldrh	r3, [r7, #12]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d001      	beq.n	801a5f0 <tcp_parseopt+0x8c>
 801a5ec:	89ba      	ldrh	r2, [r7, #12]
 801a5ee:	e001      	b.n	801a5f4 <tcp_parseopt+0x90>
 801a5f0:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801a5f8:	e010      	b.n	801a61c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a5fa:	f7ff ff7d 	bl	801a4f8 <tcp_get_next_optbyte>
 801a5fe:	4603      	mov	r3, r0
 801a600:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a602:	7afb      	ldrb	r3, [r7, #11]
 801a604:	2b01      	cmp	r3, #1
 801a606:	d914      	bls.n	801a632 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a608:	7afb      	ldrb	r3, [r7, #11]
 801a60a:	b29a      	uxth	r2, r3
 801a60c:	4b0f      	ldr	r3, [pc, #60]	; (801a64c <tcp_parseopt+0xe8>)
 801a60e:	881b      	ldrh	r3, [r3, #0]
 801a610:	4413      	add	r3, r2
 801a612:	b29b      	uxth	r3, r3
 801a614:	3b02      	subs	r3, #2
 801a616:	b29a      	uxth	r2, r3
 801a618:	4b0c      	ldr	r3, [pc, #48]	; (801a64c <tcp_parseopt+0xe8>)
 801a61a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a61c:	4b0b      	ldr	r3, [pc, #44]	; (801a64c <tcp_parseopt+0xe8>)
 801a61e:	881a      	ldrh	r2, [r3, #0]
 801a620:	4b09      	ldr	r3, [pc, #36]	; (801a648 <tcp_parseopt+0xe4>)
 801a622:	881b      	ldrh	r3, [r3, #0]
 801a624:	429a      	cmp	r2, r3
 801a626:	d3b3      	bcc.n	801a590 <tcp_parseopt+0x2c>
 801a628:	e004      	b.n	801a634 <tcp_parseopt+0xd0>
          return;
 801a62a:	bf00      	nop
 801a62c:	e002      	b.n	801a634 <tcp_parseopt+0xd0>
            return;
 801a62e:	bf00      	nop
 801a630:	e000      	b.n	801a634 <tcp_parseopt+0xd0>
            return;
 801a632:	bf00      	nop
      }
    }
  }
}
 801a634:	3710      	adds	r7, #16
 801a636:	46bd      	mov	sp, r7
 801a638:	bd80      	pop	{r7, pc}
 801a63a:	bf00      	nop
 801a63c:	08022b0c 	.word	0x08022b0c
 801a640:	08022f70 	.word	0x08022f70
 801a644:	08022b58 	.word	0x08022b58
 801a648:	2000c810 	.word	0x2000c810
 801a64c:	2000c818 	.word	0x2000c818

0801a650 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a650:	b480      	push	{r7}
 801a652:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a654:	4b05      	ldr	r3, [pc, #20]	; (801a66c <tcp_trigger_input_pcb_close+0x1c>)
 801a656:	781b      	ldrb	r3, [r3, #0]
 801a658:	f043 0310 	orr.w	r3, r3, #16
 801a65c:	b2da      	uxtb	r2, r3
 801a65e:	4b03      	ldr	r3, [pc, #12]	; (801a66c <tcp_trigger_input_pcb_close+0x1c>)
 801a660:	701a      	strb	r2, [r3, #0]
}
 801a662:	bf00      	nop
 801a664:	46bd      	mov	sp, r7
 801a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a66a:	4770      	bx	lr
 801a66c:	2000c829 	.word	0x2000c829

0801a670 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a670:	b580      	push	{r7, lr}
 801a672:	b084      	sub	sp, #16
 801a674:	af00      	add	r7, sp, #0
 801a676:	60f8      	str	r0, [r7, #12]
 801a678:	60b9      	str	r1, [r7, #8]
 801a67a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a67c:	68fb      	ldr	r3, [r7, #12]
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d00a      	beq.n	801a698 <tcp_route+0x28>
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	7a1b      	ldrb	r3, [r3, #8]
 801a686:	2b00      	cmp	r3, #0
 801a688:	d006      	beq.n	801a698 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a68a:	68fb      	ldr	r3, [r7, #12]
 801a68c:	7a1b      	ldrb	r3, [r3, #8]
 801a68e:	4618      	mov	r0, r3
 801a690:	f7fb f86c 	bl	801576c <netif_get_by_index>
 801a694:	4603      	mov	r3, r0
 801a696:	e003      	b.n	801a6a0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a698:	6878      	ldr	r0, [r7, #4]
 801a69a:	f003 fb05 	bl	801dca8 <ip4_route>
 801a69e:	4603      	mov	r3, r0
  }
}
 801a6a0:	4618      	mov	r0, r3
 801a6a2:	3710      	adds	r7, #16
 801a6a4:	46bd      	mov	sp, r7
 801a6a6:	bd80      	pop	{r7, pc}

0801a6a8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a6a8:	b590      	push	{r4, r7, lr}
 801a6aa:	b087      	sub	sp, #28
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	60f8      	str	r0, [r7, #12]
 801a6b0:	60b9      	str	r1, [r7, #8]
 801a6b2:	603b      	str	r3, [r7, #0]
 801a6b4:	4613      	mov	r3, r2
 801a6b6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d105      	bne.n	801a6ca <tcp_create_segment+0x22>
 801a6be:	4b44      	ldr	r3, [pc, #272]	; (801a7d0 <tcp_create_segment+0x128>)
 801a6c0:	22a3      	movs	r2, #163	; 0xa3
 801a6c2:	4944      	ldr	r1, [pc, #272]	; (801a7d4 <tcp_create_segment+0x12c>)
 801a6c4:	4844      	ldr	r0, [pc, #272]	; (801a7d8 <tcp_create_segment+0x130>)
 801a6c6:	f004 fe51 	bl	801f36c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a6ca:	68bb      	ldr	r3, [r7, #8]
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d105      	bne.n	801a6dc <tcp_create_segment+0x34>
 801a6d0:	4b3f      	ldr	r3, [pc, #252]	; (801a7d0 <tcp_create_segment+0x128>)
 801a6d2:	22a4      	movs	r2, #164	; 0xa4
 801a6d4:	4941      	ldr	r1, [pc, #260]	; (801a7dc <tcp_create_segment+0x134>)
 801a6d6:	4840      	ldr	r0, [pc, #256]	; (801a7d8 <tcp_create_segment+0x130>)
 801a6d8:	f004 fe48 	bl	801f36c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a6dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a6e0:	009b      	lsls	r3, r3, #2
 801a6e2:	b2db      	uxtb	r3, r3
 801a6e4:	f003 0304 	and.w	r3, r3, #4
 801a6e8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a6ea:	2003      	movs	r0, #3
 801a6ec:	f7fa fcd6 	bl	801509c <memp_malloc>
 801a6f0:	6138      	str	r0, [r7, #16]
 801a6f2:	693b      	ldr	r3, [r7, #16]
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d104      	bne.n	801a702 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a6f8:	68b8      	ldr	r0, [r7, #8]
 801a6fa:	f7fb fbd7 	bl	8015eac <pbuf_free>
    return NULL;
 801a6fe:	2300      	movs	r3, #0
 801a700:	e061      	b.n	801a7c6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801a702:	693b      	ldr	r3, [r7, #16]
 801a704:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a708:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a70a:	693b      	ldr	r3, [r7, #16]
 801a70c:	2200      	movs	r2, #0
 801a70e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a710:	693b      	ldr	r3, [r7, #16]
 801a712:	68ba      	ldr	r2, [r7, #8]
 801a714:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a716:	68bb      	ldr	r3, [r7, #8]
 801a718:	891a      	ldrh	r2, [r3, #8]
 801a71a:	7dfb      	ldrb	r3, [r7, #23]
 801a71c:	b29b      	uxth	r3, r3
 801a71e:	429a      	cmp	r2, r3
 801a720:	d205      	bcs.n	801a72e <tcp_create_segment+0x86>
 801a722:	4b2b      	ldr	r3, [pc, #172]	; (801a7d0 <tcp_create_segment+0x128>)
 801a724:	22b0      	movs	r2, #176	; 0xb0
 801a726:	492e      	ldr	r1, [pc, #184]	; (801a7e0 <tcp_create_segment+0x138>)
 801a728:	482b      	ldr	r0, [pc, #172]	; (801a7d8 <tcp_create_segment+0x130>)
 801a72a:	f004 fe1f 	bl	801f36c <iprintf>
  seg->len = p->tot_len - optlen;
 801a72e:	68bb      	ldr	r3, [r7, #8]
 801a730:	891a      	ldrh	r2, [r3, #8]
 801a732:	7dfb      	ldrb	r3, [r7, #23]
 801a734:	b29b      	uxth	r3, r3
 801a736:	1ad3      	subs	r3, r2, r3
 801a738:	b29a      	uxth	r2, r3
 801a73a:	693b      	ldr	r3, [r7, #16]
 801a73c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a73e:	2114      	movs	r1, #20
 801a740:	68b8      	ldr	r0, [r7, #8]
 801a742:	f7fb fb0b 	bl	8015d5c <pbuf_add_header>
 801a746:	4603      	mov	r3, r0
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d004      	beq.n	801a756 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a74c:	6938      	ldr	r0, [r7, #16]
 801a74e:	f7fc ffe6 	bl	801771e <tcp_seg_free>
    return NULL;
 801a752:	2300      	movs	r3, #0
 801a754:	e037      	b.n	801a7c6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a756:	693b      	ldr	r3, [r7, #16]
 801a758:	685b      	ldr	r3, [r3, #4]
 801a75a:	685a      	ldr	r2, [r3, #4]
 801a75c:	693b      	ldr	r3, [r7, #16]
 801a75e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	8ada      	ldrh	r2, [r3, #22]
 801a764:	693b      	ldr	r3, [r7, #16]
 801a766:	68dc      	ldr	r4, [r3, #12]
 801a768:	4610      	mov	r0, r2
 801a76a:	f7f9 ffab 	bl	80146c4 <lwip_htons>
 801a76e:	4603      	mov	r3, r0
 801a770:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	8b1a      	ldrh	r2, [r3, #24]
 801a776:	693b      	ldr	r3, [r7, #16]
 801a778:	68dc      	ldr	r4, [r3, #12]
 801a77a:	4610      	mov	r0, r2
 801a77c:	f7f9 ffa2 	bl	80146c4 <lwip_htons>
 801a780:	4603      	mov	r3, r0
 801a782:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a784:	693b      	ldr	r3, [r7, #16]
 801a786:	68dc      	ldr	r4, [r3, #12]
 801a788:	6838      	ldr	r0, [r7, #0]
 801a78a:	f7f9 ffb0 	bl	80146ee <lwip_htonl>
 801a78e:	4603      	mov	r3, r0
 801a790:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a792:	7dfb      	ldrb	r3, [r7, #23]
 801a794:	089b      	lsrs	r3, r3, #2
 801a796:	b2db      	uxtb	r3, r3
 801a798:	b29b      	uxth	r3, r3
 801a79a:	3305      	adds	r3, #5
 801a79c:	b29b      	uxth	r3, r3
 801a79e:	031b      	lsls	r3, r3, #12
 801a7a0:	b29a      	uxth	r2, r3
 801a7a2:	79fb      	ldrb	r3, [r7, #7]
 801a7a4:	b29b      	uxth	r3, r3
 801a7a6:	4313      	orrs	r3, r2
 801a7a8:	b29a      	uxth	r2, r3
 801a7aa:	693b      	ldr	r3, [r7, #16]
 801a7ac:	68dc      	ldr	r4, [r3, #12]
 801a7ae:	4610      	mov	r0, r2
 801a7b0:	f7f9 ff88 	bl	80146c4 <lwip_htons>
 801a7b4:	4603      	mov	r3, r0
 801a7b6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a7b8:	693b      	ldr	r3, [r7, #16]
 801a7ba:	68db      	ldr	r3, [r3, #12]
 801a7bc:	2200      	movs	r2, #0
 801a7be:	749a      	strb	r2, [r3, #18]
 801a7c0:	2200      	movs	r2, #0
 801a7c2:	74da      	strb	r2, [r3, #19]
  return seg;
 801a7c4:	693b      	ldr	r3, [r7, #16]
}
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	371c      	adds	r7, #28
 801a7ca:	46bd      	mov	sp, r7
 801a7cc:	bd90      	pop	{r4, r7, pc}
 801a7ce:	bf00      	nop
 801a7d0:	08022f8c 	.word	0x08022f8c
 801a7d4:	08022fc0 	.word	0x08022fc0
 801a7d8:	08022fe0 	.word	0x08022fe0
 801a7dc:	08023008 	.word	0x08023008
 801a7e0:	0802302c 	.word	0x0802302c

0801a7e4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a7e4:	b580      	push	{r7, lr}
 801a7e6:	b086      	sub	sp, #24
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	607b      	str	r3, [r7, #4]
 801a7ec:	4603      	mov	r3, r0
 801a7ee:	73fb      	strb	r3, [r7, #15]
 801a7f0:	460b      	mov	r3, r1
 801a7f2:	81bb      	strh	r3, [r7, #12]
 801a7f4:	4613      	mov	r3, r2
 801a7f6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a7f8:	89bb      	ldrh	r3, [r7, #12]
 801a7fa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d105      	bne.n	801a80e <tcp_pbuf_prealloc+0x2a>
 801a802:	4b30      	ldr	r3, [pc, #192]	; (801a8c4 <tcp_pbuf_prealloc+0xe0>)
 801a804:	22e8      	movs	r2, #232	; 0xe8
 801a806:	4930      	ldr	r1, [pc, #192]	; (801a8c8 <tcp_pbuf_prealloc+0xe4>)
 801a808:	4830      	ldr	r0, [pc, #192]	; (801a8cc <tcp_pbuf_prealloc+0xe8>)
 801a80a:	f004 fdaf 	bl	801f36c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a80e:	6a3b      	ldr	r3, [r7, #32]
 801a810:	2b00      	cmp	r3, #0
 801a812:	d105      	bne.n	801a820 <tcp_pbuf_prealloc+0x3c>
 801a814:	4b2b      	ldr	r3, [pc, #172]	; (801a8c4 <tcp_pbuf_prealloc+0xe0>)
 801a816:	22e9      	movs	r2, #233	; 0xe9
 801a818:	492d      	ldr	r1, [pc, #180]	; (801a8d0 <tcp_pbuf_prealloc+0xec>)
 801a81a:	482c      	ldr	r0, [pc, #176]	; (801a8cc <tcp_pbuf_prealloc+0xe8>)
 801a81c:	f004 fda6 	bl	801f36c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801a820:	89ba      	ldrh	r2, [r7, #12]
 801a822:	897b      	ldrh	r3, [r7, #10]
 801a824:	429a      	cmp	r2, r3
 801a826:	d221      	bcs.n	801a86c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a828:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a82c:	f003 0302 	and.w	r3, r3, #2
 801a830:	2b00      	cmp	r3, #0
 801a832:	d111      	bne.n	801a858 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801a834:	6a3b      	ldr	r3, [r7, #32]
 801a836:	8b5b      	ldrh	r3, [r3, #26]
 801a838:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d115      	bne.n	801a86c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801a840:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a844:	2b00      	cmp	r3, #0
 801a846:	d007      	beq.n	801a858 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a848:	6a3b      	ldr	r3, [r7, #32]
 801a84a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d103      	bne.n	801a858 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801a850:	6a3b      	ldr	r3, [r7, #32]
 801a852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801a854:	2b00      	cmp	r3, #0
 801a856:	d009      	beq.n	801a86c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a858:	89bb      	ldrh	r3, [r7, #12]
 801a85a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801a85e:	f023 0203 	bic.w	r2, r3, #3
 801a862:	897b      	ldrh	r3, [r7, #10]
 801a864:	4293      	cmp	r3, r2
 801a866:	bf28      	it	cs
 801a868:	4613      	movcs	r3, r2
 801a86a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801a86c:	8af9      	ldrh	r1, [r7, #22]
 801a86e:	7bfb      	ldrb	r3, [r7, #15]
 801a870:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a874:	4618      	mov	r0, r3
 801a876:	f7fb f823 	bl	80158c0 <pbuf_alloc>
 801a87a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a87c:	693b      	ldr	r3, [r7, #16]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d101      	bne.n	801a886 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801a882:	2300      	movs	r3, #0
 801a884:	e019      	b.n	801a8ba <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801a886:	693b      	ldr	r3, [r7, #16]
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d006      	beq.n	801a89c <tcp_pbuf_prealloc+0xb8>
 801a88e:	4b0d      	ldr	r3, [pc, #52]	; (801a8c4 <tcp_pbuf_prealloc+0xe0>)
 801a890:	f240 120b 	movw	r2, #267	; 0x10b
 801a894:	490f      	ldr	r1, [pc, #60]	; (801a8d4 <tcp_pbuf_prealloc+0xf0>)
 801a896:	480d      	ldr	r0, [pc, #52]	; (801a8cc <tcp_pbuf_prealloc+0xe8>)
 801a898:	f004 fd68 	bl	801f36c <iprintf>
  *oversize = p->len - length;
 801a89c:	693b      	ldr	r3, [r7, #16]
 801a89e:	895a      	ldrh	r2, [r3, #10]
 801a8a0:	89bb      	ldrh	r3, [r7, #12]
 801a8a2:	1ad3      	subs	r3, r2, r3
 801a8a4:	b29a      	uxth	r2, r3
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801a8aa:	693b      	ldr	r3, [r7, #16]
 801a8ac:	89ba      	ldrh	r2, [r7, #12]
 801a8ae:	811a      	strh	r2, [r3, #8]
 801a8b0:	693b      	ldr	r3, [r7, #16]
 801a8b2:	891a      	ldrh	r2, [r3, #8]
 801a8b4:	693b      	ldr	r3, [r7, #16]
 801a8b6:	815a      	strh	r2, [r3, #10]
  return p;
 801a8b8:	693b      	ldr	r3, [r7, #16]
}
 801a8ba:	4618      	mov	r0, r3
 801a8bc:	3718      	adds	r7, #24
 801a8be:	46bd      	mov	sp, r7
 801a8c0:	bd80      	pop	{r7, pc}
 801a8c2:	bf00      	nop
 801a8c4:	08022f8c 	.word	0x08022f8c
 801a8c8:	08023044 	.word	0x08023044
 801a8cc:	08022fe0 	.word	0x08022fe0
 801a8d0:	08023068 	.word	0x08023068
 801a8d4:	08023088 	.word	0x08023088

0801a8d8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801a8d8:	b580      	push	{r7, lr}
 801a8da:	b082      	sub	sp, #8
 801a8dc:	af00      	add	r7, sp, #0
 801a8de:	6078      	str	r0, [r7, #4]
 801a8e0:	460b      	mov	r3, r1
 801a8e2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d106      	bne.n	801a8f8 <tcp_write_checks+0x20>
 801a8ea:	4b33      	ldr	r3, [pc, #204]	; (801a9b8 <tcp_write_checks+0xe0>)
 801a8ec:	f240 1233 	movw	r2, #307	; 0x133
 801a8f0:	4932      	ldr	r1, [pc, #200]	; (801a9bc <tcp_write_checks+0xe4>)
 801a8f2:	4833      	ldr	r0, [pc, #204]	; (801a9c0 <tcp_write_checks+0xe8>)
 801a8f4:	f004 fd3a 	bl	801f36c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	7d1b      	ldrb	r3, [r3, #20]
 801a8fc:	2b04      	cmp	r3, #4
 801a8fe:	d00e      	beq.n	801a91e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801a904:	2b07      	cmp	r3, #7
 801a906:	d00a      	beq.n	801a91e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801a90c:	2b02      	cmp	r3, #2
 801a90e:	d006      	beq.n	801a91e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801a914:	2b03      	cmp	r3, #3
 801a916:	d002      	beq.n	801a91e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801a918:	f06f 030a 	mvn.w	r3, #10
 801a91c:	e048      	b.n	801a9b0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801a91e:	887b      	ldrh	r3, [r7, #2]
 801a920:	2b00      	cmp	r3, #0
 801a922:	d101      	bne.n	801a928 <tcp_write_checks+0x50>
    return ERR_OK;
 801a924:	2300      	movs	r3, #0
 801a926:	e043      	b.n	801a9b0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a92e:	887a      	ldrh	r2, [r7, #2]
 801a930:	429a      	cmp	r2, r3
 801a932:	d909      	bls.n	801a948 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	8b5b      	ldrh	r3, [r3, #26]
 801a938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a93c:	b29a      	uxth	r2, r3
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a942:	f04f 33ff 	mov.w	r3, #4294967295
 801a946:	e033      	b.n	801a9b0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a94e:	2b08      	cmp	r3, #8
 801a950:	d909      	bls.n	801a966 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	8b5b      	ldrh	r3, [r3, #26]
 801a956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a95a:	b29a      	uxth	r2, r3
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a960:	f04f 33ff 	mov.w	r3, #4294967295
 801a964:	e024      	b.n	801a9b0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d00f      	beq.n	801a990 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a974:	2b00      	cmp	r3, #0
 801a976:	d11a      	bne.n	801a9ae <tcp_write_checks+0xd6>
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d116      	bne.n	801a9ae <tcp_write_checks+0xd6>
 801a980:	4b0d      	ldr	r3, [pc, #52]	; (801a9b8 <tcp_write_checks+0xe0>)
 801a982:	f240 1255 	movw	r2, #341	; 0x155
 801a986:	490f      	ldr	r1, [pc, #60]	; (801a9c4 <tcp_write_checks+0xec>)
 801a988:	480d      	ldr	r0, [pc, #52]	; (801a9c0 <tcp_write_checks+0xe8>)
 801a98a:	f004 fcef 	bl	801f36c <iprintf>
 801a98e:	e00e      	b.n	801a9ae <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a994:	2b00      	cmp	r3, #0
 801a996:	d103      	bne.n	801a9a0 <tcp_write_checks+0xc8>
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d006      	beq.n	801a9ae <tcp_write_checks+0xd6>
 801a9a0:	4b05      	ldr	r3, [pc, #20]	; (801a9b8 <tcp_write_checks+0xe0>)
 801a9a2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801a9a6:	4908      	ldr	r1, [pc, #32]	; (801a9c8 <tcp_write_checks+0xf0>)
 801a9a8:	4805      	ldr	r0, [pc, #20]	; (801a9c0 <tcp_write_checks+0xe8>)
 801a9aa:	f004 fcdf 	bl	801f36c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801a9ae:	2300      	movs	r3, #0
}
 801a9b0:	4618      	mov	r0, r3
 801a9b2:	3708      	adds	r7, #8
 801a9b4:	46bd      	mov	sp, r7
 801a9b6:	bd80      	pop	{r7, pc}
 801a9b8:	08022f8c 	.word	0x08022f8c
 801a9bc:	0802309c 	.word	0x0802309c
 801a9c0:	08022fe0 	.word	0x08022fe0
 801a9c4:	080230bc 	.word	0x080230bc
 801a9c8:	080230f8 	.word	0x080230f8

0801a9cc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801a9cc:	b590      	push	{r4, r7, lr}
 801a9ce:	b09b      	sub	sp, #108	; 0x6c
 801a9d0:	af04      	add	r7, sp, #16
 801a9d2:	60f8      	str	r0, [r7, #12]
 801a9d4:	60b9      	str	r1, [r7, #8]
 801a9d6:	4611      	mov	r1, r2
 801a9d8:	461a      	mov	r2, r3
 801a9da:	460b      	mov	r3, r1
 801a9dc:	80fb      	strh	r3, [r7, #6]
 801a9de:	4613      	mov	r3, r2
 801a9e0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a9e6:	2300      	movs	r3, #0
 801a9e8:	653b      	str	r3, [r7, #80]	; 0x50
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	64bb      	str	r3, [r7, #72]	; 0x48
 801a9f2:	2300      	movs	r3, #0
 801a9f4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801a9fc:	2300      	movs	r3, #0
 801a9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801aa02:	2300      	movs	r3, #0
 801aa04:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801aa06:	2300      	movs	r3, #0
 801aa08:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801aa0a:	2300      	movs	r3, #0
 801aa0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d109      	bne.n	801aa28 <tcp_write+0x5c>
 801aa14:	4ba4      	ldr	r3, [pc, #656]	; (801aca8 <tcp_write+0x2dc>)
 801aa16:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801aa1a:	49a4      	ldr	r1, [pc, #656]	; (801acac <tcp_write+0x2e0>)
 801aa1c:	48a4      	ldr	r0, [pc, #656]	; (801acb0 <tcp_write+0x2e4>)
 801aa1e:	f004 fca5 	bl	801f36c <iprintf>
 801aa22:	f06f 030f 	mvn.w	r3, #15
 801aa26:	e32a      	b.n	801b07e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801aa28:	68fb      	ldr	r3, [r7, #12]
 801aa2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801aa2e:	085b      	lsrs	r3, r3, #1
 801aa30:	b29a      	uxth	r2, r3
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aa36:	4293      	cmp	r3, r2
 801aa38:	bf28      	it	cs
 801aa3a:	4613      	movcs	r3, r2
 801aa3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801aa3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d102      	bne.n	801aa4a <tcp_write+0x7e>
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aa48:	e000      	b.n	801aa4c <tcp_write+0x80>
 801aa4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aa4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801aa4e:	68bb      	ldr	r3, [r7, #8]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d109      	bne.n	801aa68 <tcp_write+0x9c>
 801aa54:	4b94      	ldr	r3, [pc, #592]	; (801aca8 <tcp_write+0x2dc>)
 801aa56:	f240 12ad 	movw	r2, #429	; 0x1ad
 801aa5a:	4996      	ldr	r1, [pc, #600]	; (801acb4 <tcp_write+0x2e8>)
 801aa5c:	4894      	ldr	r0, [pc, #592]	; (801acb0 <tcp_write+0x2e4>)
 801aa5e:	f004 fc85 	bl	801f36c <iprintf>
 801aa62:	f06f 030f 	mvn.w	r3, #15
 801aa66:	e30a      	b.n	801b07e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801aa68:	88fb      	ldrh	r3, [r7, #6]
 801aa6a:	4619      	mov	r1, r3
 801aa6c:	68f8      	ldr	r0, [r7, #12]
 801aa6e:	f7ff ff33 	bl	801a8d8 <tcp_write_checks>
 801aa72:	4603      	mov	r3, r0
 801aa74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801aa78:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d002      	beq.n	801aa86 <tcp_write+0xba>
    return err;
 801aa80:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801aa84:	e2fb      	b.n	801b07e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801aa86:	68fb      	ldr	r3, [r7, #12]
 801aa88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aa8c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801aa90:	2300      	movs	r3, #0
 801aa92:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	f000 80f6 	beq.w	801ac8c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aaa4:	653b      	str	r3, [r7, #80]	; 0x50
 801aaa6:	e002      	b.n	801aaae <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801aaa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801aaae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d1f8      	bne.n	801aaa8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801aab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aab8:	7a9b      	ldrb	r3, [r3, #10]
 801aaba:	009b      	lsls	r3, r3, #2
 801aabc:	b29b      	uxth	r3, r3
 801aabe:	f003 0304 	and.w	r3, r3, #4
 801aac2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801aac4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801aac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aac8:	891b      	ldrh	r3, [r3, #8]
 801aaca:	4619      	mov	r1, r3
 801aacc:	8c3b      	ldrh	r3, [r7, #32]
 801aace:	440b      	add	r3, r1
 801aad0:	429a      	cmp	r2, r3
 801aad2:	da06      	bge.n	801aae2 <tcp_write+0x116>
 801aad4:	4b74      	ldr	r3, [pc, #464]	; (801aca8 <tcp_write+0x2dc>)
 801aad6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801aada:	4977      	ldr	r1, [pc, #476]	; (801acb8 <tcp_write+0x2ec>)
 801aadc:	4874      	ldr	r0, [pc, #464]	; (801acb0 <tcp_write+0x2e4>)
 801aade:	f004 fc45 	bl	801f36c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801aae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aae4:	891a      	ldrh	r2, [r3, #8]
 801aae6:	8c3b      	ldrh	r3, [r7, #32]
 801aae8:	4413      	add	r3, r2
 801aaea:	b29b      	uxth	r3, r3
 801aaec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801aaee:	1ad3      	subs	r3, r2, r3
 801aaf0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801aaf2:	68fb      	ldr	r3, [r7, #12]
 801aaf4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801aaf8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801aafa:	8a7b      	ldrh	r3, [r7, #18]
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d026      	beq.n	801ab4e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801ab00:	8a7b      	ldrh	r3, [r7, #18]
 801ab02:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ab04:	429a      	cmp	r2, r3
 801ab06:	d206      	bcs.n	801ab16 <tcp_write+0x14a>
 801ab08:	4b67      	ldr	r3, [pc, #412]	; (801aca8 <tcp_write+0x2dc>)
 801ab0a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801ab0e:	496b      	ldr	r1, [pc, #428]	; (801acbc <tcp_write+0x2f0>)
 801ab10:	4867      	ldr	r0, [pc, #412]	; (801acb0 <tcp_write+0x2e4>)
 801ab12:	f004 fc2b 	bl	801f36c <iprintf>
      seg = last_unsent;
 801ab16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab18:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801ab1a:	8a7b      	ldrh	r3, [r7, #18]
 801ab1c:	88fa      	ldrh	r2, [r7, #6]
 801ab1e:	4293      	cmp	r3, r2
 801ab20:	bf28      	it	cs
 801ab22:	4613      	movcs	r3, r2
 801ab24:	b29b      	uxth	r3, r3
 801ab26:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ab28:	4293      	cmp	r3, r2
 801ab2a:	bf28      	it	cs
 801ab2c:	4613      	movcs	r3, r2
 801ab2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801ab30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ab34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ab36:	4413      	add	r3, r2
 801ab38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801ab3c:	8a7a      	ldrh	r2, [r7, #18]
 801ab3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ab40:	1ad3      	subs	r3, r2, r3
 801ab42:	b29b      	uxth	r3, r3
 801ab44:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801ab46:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ab48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ab4a:	1ad3      	subs	r3, r2, r3
 801ab4c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ab4e:	8a7b      	ldrh	r3, [r7, #18]
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d00b      	beq.n	801ab6c <tcp_write+0x1a0>
 801ab54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ab58:	88fb      	ldrh	r3, [r7, #6]
 801ab5a:	429a      	cmp	r2, r3
 801ab5c:	d006      	beq.n	801ab6c <tcp_write+0x1a0>
 801ab5e:	4b52      	ldr	r3, [pc, #328]	; (801aca8 <tcp_write+0x2dc>)
 801ab60:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ab64:	4956      	ldr	r1, [pc, #344]	; (801acc0 <tcp_write+0x2f4>)
 801ab66:	4852      	ldr	r0, [pc, #328]	; (801acb0 <tcp_write+0x2e4>)
 801ab68:	f004 fc00 	bl	801f36c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801ab6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ab70:	88fb      	ldrh	r3, [r7, #6]
 801ab72:	429a      	cmp	r2, r3
 801ab74:	f080 8167 	bcs.w	801ae46 <tcp_write+0x47a>
 801ab78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	f000 8163 	beq.w	801ae46 <tcp_write+0x47a>
 801ab80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab82:	891b      	ldrh	r3, [r3, #8]
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	f000 815e 	beq.w	801ae46 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ab8a:	88fa      	ldrh	r2, [r7, #6]
 801ab8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ab90:	1ad2      	subs	r2, r2, r3
 801ab92:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ab94:	4293      	cmp	r3, r2
 801ab96:	bfa8      	it	ge
 801ab98:	4613      	movge	r3, r2
 801ab9a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801ab9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab9e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801aba0:	797b      	ldrb	r3, [r7, #5]
 801aba2:	f003 0301 	and.w	r3, r3, #1
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d027      	beq.n	801abfa <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801abaa:	f107 0012 	add.w	r0, r7, #18
 801abae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801abb0:	8bf9      	ldrh	r1, [r7, #30]
 801abb2:	2301      	movs	r3, #1
 801abb4:	9302      	str	r3, [sp, #8]
 801abb6:	797b      	ldrb	r3, [r7, #5]
 801abb8:	9301      	str	r3, [sp, #4]
 801abba:	68fb      	ldr	r3, [r7, #12]
 801abbc:	9300      	str	r3, [sp, #0]
 801abbe:	4603      	mov	r3, r0
 801abc0:	2000      	movs	r0, #0
 801abc2:	f7ff fe0f 	bl	801a7e4 <tcp_pbuf_prealloc>
 801abc6:	6578      	str	r0, [r7, #84]	; 0x54
 801abc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801abca:	2b00      	cmp	r3, #0
 801abcc:	f000 8225 	beq.w	801b01a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801abd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801abd2:	6858      	ldr	r0, [r3, #4]
 801abd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801abd8:	68ba      	ldr	r2, [r7, #8]
 801abda:	4413      	add	r3, r2
 801abdc:	8bfa      	ldrh	r2, [r7, #30]
 801abde:	4619      	mov	r1, r3
 801abe0:	f004 fb94 	bl	801f30c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801abe4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801abe6:	f7fb f9ef 	bl	8015fc8 <pbuf_clen>
 801abea:	4603      	mov	r3, r0
 801abec:	461a      	mov	r2, r3
 801abee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801abf2:	4413      	add	r3, r2
 801abf4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801abf8:	e041      	b.n	801ac7e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801abfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801abfc:	685b      	ldr	r3, [r3, #4]
 801abfe:	637b      	str	r3, [r7, #52]	; 0x34
 801ac00:	e002      	b.n	801ac08 <tcp_write+0x23c>
 801ac02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	637b      	str	r3, [r7, #52]	; 0x34
 801ac08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d1f8      	bne.n	801ac02 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ac10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac12:	7b1b      	ldrb	r3, [r3, #12]
 801ac14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d115      	bne.n	801ac48 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801ac1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac1e:	685b      	ldr	r3, [r3, #4]
 801ac20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ac22:	8952      	ldrh	r2, [r2, #10]
 801ac24:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ac26:	68ba      	ldr	r2, [r7, #8]
 801ac28:	429a      	cmp	r2, r3
 801ac2a:	d10d      	bne.n	801ac48 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801ac2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d006      	beq.n	801ac42 <tcp_write+0x276>
 801ac34:	4b1c      	ldr	r3, [pc, #112]	; (801aca8 <tcp_write+0x2dc>)
 801ac36:	f240 2231 	movw	r2, #561	; 0x231
 801ac3a:	4922      	ldr	r1, [pc, #136]	; (801acc4 <tcp_write+0x2f8>)
 801ac3c:	481c      	ldr	r0, [pc, #112]	; (801acb0 <tcp_write+0x2e4>)
 801ac3e:	f004 fb95 	bl	801f36c <iprintf>
          extendlen = seglen;
 801ac42:	8bfb      	ldrh	r3, [r7, #30]
 801ac44:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801ac46:	e01a      	b.n	801ac7e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ac48:	8bfb      	ldrh	r3, [r7, #30]
 801ac4a:	2201      	movs	r2, #1
 801ac4c:	4619      	mov	r1, r3
 801ac4e:	2000      	movs	r0, #0
 801ac50:	f7fa fe36 	bl	80158c0 <pbuf_alloc>
 801ac54:	6578      	str	r0, [r7, #84]	; 0x54
 801ac56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	f000 81e0 	beq.w	801b01e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801ac5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ac62:	68ba      	ldr	r2, [r7, #8]
 801ac64:	441a      	add	r2, r3
 801ac66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ac68:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801ac6a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ac6c:	f7fb f9ac 	bl	8015fc8 <pbuf_clen>
 801ac70:	4603      	mov	r3, r0
 801ac72:	461a      	mov	r2, r3
 801ac74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ac78:	4413      	add	r3, r2
 801ac7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801ac7e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ac82:	8bfb      	ldrh	r3, [r7, #30]
 801ac84:	4413      	add	r3, r2
 801ac86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801ac8a:	e0dc      	b.n	801ae46 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801ac8c:	68fb      	ldr	r3, [r7, #12]
 801ac8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	f000 80d7 	beq.w	801ae46 <tcp_write+0x47a>
 801ac98:	4b03      	ldr	r3, [pc, #12]	; (801aca8 <tcp_write+0x2dc>)
 801ac9a:	f240 224a 	movw	r2, #586	; 0x24a
 801ac9e:	490a      	ldr	r1, [pc, #40]	; (801acc8 <tcp_write+0x2fc>)
 801aca0:	4803      	ldr	r0, [pc, #12]	; (801acb0 <tcp_write+0x2e4>)
 801aca2:	f004 fb63 	bl	801f36c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801aca6:	e0ce      	b.n	801ae46 <tcp_write+0x47a>
 801aca8:	08022f8c 	.word	0x08022f8c
 801acac:	0802312c 	.word	0x0802312c
 801acb0:	08022fe0 	.word	0x08022fe0
 801acb4:	08023144 	.word	0x08023144
 801acb8:	08023178 	.word	0x08023178
 801acbc:	08023190 	.word	0x08023190
 801acc0:	080231b0 	.word	0x080231b0
 801acc4:	080231d0 	.word	0x080231d0
 801acc8:	080231fc 	.word	0x080231fc
    struct pbuf *p;
    u16_t left = len - pos;
 801accc:	88fa      	ldrh	r2, [r7, #6]
 801acce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801acd2:	1ad3      	subs	r3, r2, r3
 801acd4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801acd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801acda:	b29b      	uxth	r3, r3
 801acdc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801acde:	1ad3      	subs	r3, r2, r3
 801ace0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801ace2:	8b7a      	ldrh	r2, [r7, #26]
 801ace4:	8bbb      	ldrh	r3, [r7, #28]
 801ace6:	4293      	cmp	r3, r2
 801ace8:	bf28      	it	cs
 801acea:	4613      	movcs	r3, r2
 801acec:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801acee:	797b      	ldrb	r3, [r7, #5]
 801acf0:	f003 0301 	and.w	r3, r3, #1
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d036      	beq.n	801ad66 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801acf8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801acfc:	b29a      	uxth	r2, r3
 801acfe:	8b3b      	ldrh	r3, [r7, #24]
 801ad00:	4413      	add	r3, r2
 801ad02:	b299      	uxth	r1, r3
 801ad04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	bf0c      	ite	eq
 801ad0a:	2301      	moveq	r3, #1
 801ad0c:	2300      	movne	r3, #0
 801ad0e:	b2db      	uxtb	r3, r3
 801ad10:	f107 0012 	add.w	r0, r7, #18
 801ad14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ad16:	9302      	str	r3, [sp, #8]
 801ad18:	797b      	ldrb	r3, [r7, #5]
 801ad1a:	9301      	str	r3, [sp, #4]
 801ad1c:	68fb      	ldr	r3, [r7, #12]
 801ad1e:	9300      	str	r3, [sp, #0]
 801ad20:	4603      	mov	r3, r0
 801ad22:	2036      	movs	r0, #54	; 0x36
 801ad24:	f7ff fd5e 	bl	801a7e4 <tcp_pbuf_prealloc>
 801ad28:	6338      	str	r0, [r7, #48]	; 0x30
 801ad2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	f000 8178 	beq.w	801b022 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801ad32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad34:	895b      	ldrh	r3, [r3, #10]
 801ad36:	8b3a      	ldrh	r2, [r7, #24]
 801ad38:	429a      	cmp	r2, r3
 801ad3a:	d906      	bls.n	801ad4a <tcp_write+0x37e>
 801ad3c:	4b8c      	ldr	r3, [pc, #560]	; (801af70 <tcp_write+0x5a4>)
 801ad3e:	f240 2266 	movw	r2, #614	; 0x266
 801ad42:	498c      	ldr	r1, [pc, #560]	; (801af74 <tcp_write+0x5a8>)
 801ad44:	488c      	ldr	r0, [pc, #560]	; (801af78 <tcp_write+0x5ac>)
 801ad46:	f004 fb11 	bl	801f36c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801ad4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad4c:	685a      	ldr	r2, [r3, #4]
 801ad4e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ad52:	18d0      	adds	r0, r2, r3
 801ad54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ad58:	68ba      	ldr	r2, [r7, #8]
 801ad5a:	4413      	add	r3, r2
 801ad5c:	8b3a      	ldrh	r2, [r7, #24]
 801ad5e:	4619      	mov	r1, r3
 801ad60:	f004 fad4 	bl	801f30c <memcpy>
 801ad64:	e02f      	b.n	801adc6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801ad66:	8a7b      	ldrh	r3, [r7, #18]
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	d006      	beq.n	801ad7a <tcp_write+0x3ae>
 801ad6c:	4b80      	ldr	r3, [pc, #512]	; (801af70 <tcp_write+0x5a4>)
 801ad6e:	f240 2271 	movw	r2, #625	; 0x271
 801ad72:	4982      	ldr	r1, [pc, #520]	; (801af7c <tcp_write+0x5b0>)
 801ad74:	4880      	ldr	r0, [pc, #512]	; (801af78 <tcp_write+0x5ac>)
 801ad76:	f004 faf9 	bl	801f36c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801ad7a:	8b3b      	ldrh	r3, [r7, #24]
 801ad7c:	2201      	movs	r2, #1
 801ad7e:	4619      	mov	r1, r3
 801ad80:	2036      	movs	r0, #54	; 0x36
 801ad82:	f7fa fd9d 	bl	80158c0 <pbuf_alloc>
 801ad86:	6178      	str	r0, [r7, #20]
 801ad88:	697b      	ldr	r3, [r7, #20]
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	f000 814b 	beq.w	801b026 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801ad90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ad94:	68ba      	ldr	r2, [r7, #8]
 801ad96:	441a      	add	r2, r3
 801ad98:	697b      	ldr	r3, [r7, #20]
 801ad9a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ad9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ada0:	b29b      	uxth	r3, r3
 801ada2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ada6:	4619      	mov	r1, r3
 801ada8:	2036      	movs	r0, #54	; 0x36
 801adaa:	f7fa fd89 	bl	80158c0 <pbuf_alloc>
 801adae:	6338      	str	r0, [r7, #48]	; 0x30
 801adb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d103      	bne.n	801adbe <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801adb6:	6978      	ldr	r0, [r7, #20]
 801adb8:	f7fb f878 	bl	8015eac <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801adbc:	e136      	b.n	801b02c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801adbe:	6979      	ldr	r1, [r7, #20]
 801adc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801adc2:	f7fb f941 	bl	8016048 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801adc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801adc8:	f7fb f8fe 	bl	8015fc8 <pbuf_clen>
 801adcc:	4603      	mov	r3, r0
 801adce:	461a      	mov	r2, r3
 801add0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801add4:	4413      	add	r3, r2
 801add6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801adda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801adde:	2b09      	cmp	r3, #9
 801ade0:	d903      	bls.n	801adea <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801ade2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ade4:	f7fb f862 	bl	8015eac <pbuf_free>
      goto memerr;
 801ade8:	e120      	b.n	801b02c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801adee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801adf2:	441a      	add	r2, r3
 801adf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801adf8:	9300      	str	r3, [sp, #0]
 801adfa:	4613      	mov	r3, r2
 801adfc:	2200      	movs	r2, #0
 801adfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ae00:	68f8      	ldr	r0, [r7, #12]
 801ae02:	f7ff fc51 	bl	801a6a8 <tcp_create_segment>
 801ae06:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ae08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	f000 810d 	beq.w	801b02a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801ae10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d102      	bne.n	801ae1c <tcp_write+0x450>
      queue = seg;
 801ae16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae18:	647b      	str	r3, [r7, #68]	; 0x44
 801ae1a:	e00c      	b.n	801ae36 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801ae1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d106      	bne.n	801ae30 <tcp_write+0x464>
 801ae22:	4b53      	ldr	r3, [pc, #332]	; (801af70 <tcp_write+0x5a4>)
 801ae24:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ae28:	4955      	ldr	r1, [pc, #340]	; (801af80 <tcp_write+0x5b4>)
 801ae2a:	4853      	ldr	r0, [pc, #332]	; (801af78 <tcp_write+0x5ac>)
 801ae2c:	f004 fa9e 	bl	801f36c <iprintf>
      prev_seg->next = seg;
 801ae30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ae32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ae34:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801ae36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae38:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801ae3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ae3e:	8b3b      	ldrh	r3, [r7, #24]
 801ae40:	4413      	add	r3, r2
 801ae42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801ae46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ae4a:	88fb      	ldrh	r3, [r7, #6]
 801ae4c:	429a      	cmp	r2, r3
 801ae4e:	f4ff af3d 	bcc.w	801accc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801ae52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d02c      	beq.n	801aeb2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801ae58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ae5a:	685b      	ldr	r3, [r3, #4]
 801ae5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae5e:	e01e      	b.n	801ae9e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801ae60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae62:	891a      	ldrh	r2, [r3, #8]
 801ae64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ae66:	4413      	add	r3, r2
 801ae68:	b29a      	uxth	r2, r3
 801ae6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae6c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801ae6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae70:	681b      	ldr	r3, [r3, #0]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d110      	bne.n	801ae98 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801ae76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae78:	685b      	ldr	r3, [r3, #4]
 801ae7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ae7c:	8952      	ldrh	r2, [r2, #10]
 801ae7e:	4413      	add	r3, r2
 801ae80:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ae82:	68b9      	ldr	r1, [r7, #8]
 801ae84:	4618      	mov	r0, r3
 801ae86:	f004 fa41 	bl	801f30c <memcpy>
        p->len += oversize_used;
 801ae8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae8c:	895a      	ldrh	r2, [r3, #10]
 801ae8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ae90:	4413      	add	r3, r2
 801ae92:	b29a      	uxth	r2, r3
 801ae94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae96:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801ae98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	d1dd      	bne.n	801ae60 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801aea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aea6:	891a      	ldrh	r2, [r3, #8]
 801aea8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aeaa:	4413      	add	r3, r2
 801aeac:	b29a      	uxth	r2, r3
 801aeae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aeb0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801aeb2:	8a7a      	ldrh	r2, [r7, #18]
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801aeba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	d018      	beq.n	801aef2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801aec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d106      	bne.n	801aed4 <tcp_write+0x508>
 801aec6:	4b2a      	ldr	r3, [pc, #168]	; (801af70 <tcp_write+0x5a4>)
 801aec8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801aecc:	492d      	ldr	r1, [pc, #180]	; (801af84 <tcp_write+0x5b8>)
 801aece:	482a      	ldr	r0, [pc, #168]	; (801af78 <tcp_write+0x5ac>)
 801aed0:	f004 fa4c 	bl	801f36c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801aed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aed6:	685b      	ldr	r3, [r3, #4]
 801aed8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801aeda:	4618      	mov	r0, r3
 801aedc:	f7fb f8b4 	bl	8016048 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801aee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aee2:	891a      	ldrh	r2, [r3, #8]
 801aee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aee6:	891b      	ldrh	r3, [r3, #8]
 801aee8:	4413      	add	r3, r2
 801aeea:	b29a      	uxth	r2, r3
 801aeec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aeee:	811a      	strh	r2, [r3, #8]
 801aef0:	e037      	b.n	801af62 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801aef2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d034      	beq.n	801af62 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801aef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d003      	beq.n	801af06 <tcp_write+0x53a>
 801aefe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af00:	685b      	ldr	r3, [r3, #4]
 801af02:	2b00      	cmp	r3, #0
 801af04:	d106      	bne.n	801af14 <tcp_write+0x548>
 801af06:	4b1a      	ldr	r3, [pc, #104]	; (801af70 <tcp_write+0x5a4>)
 801af08:	f240 22e6 	movw	r2, #742	; 0x2e6
 801af0c:	491e      	ldr	r1, [pc, #120]	; (801af88 <tcp_write+0x5bc>)
 801af0e:	481a      	ldr	r0, [pc, #104]	; (801af78 <tcp_write+0x5ac>)
 801af10:	f004 fa2c 	bl	801f36c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801af14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af16:	685b      	ldr	r3, [r3, #4]
 801af18:	62bb      	str	r3, [r7, #40]	; 0x28
 801af1a:	e009      	b.n	801af30 <tcp_write+0x564>
      p->tot_len += extendlen;
 801af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af1e:	891a      	ldrh	r2, [r3, #8]
 801af20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801af22:	4413      	add	r3, r2
 801af24:	b29a      	uxth	r2, r3
 801af26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af28:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801af2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af2c:	681b      	ldr	r3, [r3, #0]
 801af2e:	62bb      	str	r3, [r7, #40]	; 0x28
 801af30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	2b00      	cmp	r3, #0
 801af36:	d1f1      	bne.n	801af1c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af3a:	891a      	ldrh	r2, [r3, #8]
 801af3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801af3e:	4413      	add	r3, r2
 801af40:	b29a      	uxth	r2, r3
 801af42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af44:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801af46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af48:	895a      	ldrh	r2, [r3, #10]
 801af4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801af4c:	4413      	add	r3, r2
 801af4e:	b29a      	uxth	r2, r3
 801af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af52:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801af54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af56:	891a      	ldrh	r2, [r3, #8]
 801af58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801af5a:	4413      	add	r3, r2
 801af5c:	b29a      	uxth	r2, r3
 801af5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af60:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801af62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af64:	2b00      	cmp	r3, #0
 801af66:	d111      	bne.n	801af8c <tcp_write+0x5c0>
    pcb->unsent = queue;
 801af68:	68fb      	ldr	r3, [r7, #12]
 801af6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801af6c:	66da      	str	r2, [r3, #108]	; 0x6c
 801af6e:	e010      	b.n	801af92 <tcp_write+0x5c6>
 801af70:	08022f8c 	.word	0x08022f8c
 801af74:	0802322c 	.word	0x0802322c
 801af78:	08022fe0 	.word	0x08022fe0
 801af7c:	0802326c 	.word	0x0802326c
 801af80:	0802327c 	.word	0x0802327c
 801af84:	08023290 	.word	0x08023290
 801af88:	080232c8 	.word	0x080232c8
  } else {
    last_unsent->next = queue;
 801af8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801af90:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801af96:	88fb      	ldrh	r3, [r7, #6]
 801af98:	441a      	add	r2, r3
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801af9e:	68fb      	ldr	r3, [r7, #12]
 801afa0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801afa4:	88fb      	ldrh	r3, [r7, #6]
 801afa6:	1ad3      	subs	r3, r2, r3
 801afa8:	b29a      	uxth	r2, r3
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801afb0:	68fb      	ldr	r3, [r7, #12]
 801afb2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801afb6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d00e      	beq.n	801afe2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d10a      	bne.n	801afe2 <tcp_write+0x616>
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	d106      	bne.n	801afe2 <tcp_write+0x616>
 801afd4:	4b2c      	ldr	r3, [pc, #176]	; (801b088 <tcp_write+0x6bc>)
 801afd6:	f240 3212 	movw	r2, #786	; 0x312
 801afda:	492c      	ldr	r1, [pc, #176]	; (801b08c <tcp_write+0x6c0>)
 801afdc:	482c      	ldr	r0, [pc, #176]	; (801b090 <tcp_write+0x6c4>)
 801afde:	f004 f9c5 	bl	801f36c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801afe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d016      	beq.n	801b016 <tcp_write+0x64a>
 801afe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afea:	68db      	ldr	r3, [r3, #12]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d012      	beq.n	801b016 <tcp_write+0x64a>
 801aff0:	797b      	ldrb	r3, [r7, #5]
 801aff2:	f003 0302 	and.w	r3, r3, #2
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d10d      	bne.n	801b016 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801affa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801affc:	68db      	ldr	r3, [r3, #12]
 801affe:	899b      	ldrh	r3, [r3, #12]
 801b000:	b29c      	uxth	r4, r3
 801b002:	2008      	movs	r0, #8
 801b004:	f7f9 fb5e 	bl	80146c4 <lwip_htons>
 801b008:	4603      	mov	r3, r0
 801b00a:	461a      	mov	r2, r3
 801b00c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b00e:	68db      	ldr	r3, [r3, #12]
 801b010:	4322      	orrs	r2, r4
 801b012:	b292      	uxth	r2, r2
 801b014:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801b016:	2300      	movs	r3, #0
 801b018:	e031      	b.n	801b07e <tcp_write+0x6b2>
          goto memerr;
 801b01a:	bf00      	nop
 801b01c:	e006      	b.n	801b02c <tcp_write+0x660>
            goto memerr;
 801b01e:	bf00      	nop
 801b020:	e004      	b.n	801b02c <tcp_write+0x660>
        goto memerr;
 801b022:	bf00      	nop
 801b024:	e002      	b.n	801b02c <tcp_write+0x660>
        goto memerr;
 801b026:	bf00      	nop
 801b028:	e000      	b.n	801b02c <tcp_write+0x660>
      goto memerr;
 801b02a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	8b5b      	ldrh	r3, [r3, #26]
 801b030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b034:	b29a      	uxth	r2, r3
 801b036:	68fb      	ldr	r3, [r7, #12]
 801b038:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801b03a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d002      	beq.n	801b046 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801b040:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b042:	f7fa ff33 	bl	8015eac <pbuf_free>
  }
  if (queue != NULL) {
 801b046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d002      	beq.n	801b052 <tcp_write+0x686>
    tcp_segs_free(queue);
 801b04c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801b04e:	f7fc fb51 	bl	80176f4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801b052:	68fb      	ldr	r3, [r7, #12]
 801b054:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d00e      	beq.n	801b07a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b060:	2b00      	cmp	r3, #0
 801b062:	d10a      	bne.n	801b07a <tcp_write+0x6ae>
 801b064:	68fb      	ldr	r3, [r7, #12]
 801b066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b068:	2b00      	cmp	r3, #0
 801b06a:	d106      	bne.n	801b07a <tcp_write+0x6ae>
 801b06c:	4b06      	ldr	r3, [pc, #24]	; (801b088 <tcp_write+0x6bc>)
 801b06e:	f240 3227 	movw	r2, #807	; 0x327
 801b072:	4906      	ldr	r1, [pc, #24]	; (801b08c <tcp_write+0x6c0>)
 801b074:	4806      	ldr	r0, [pc, #24]	; (801b090 <tcp_write+0x6c4>)
 801b076:	f004 f979 	bl	801f36c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801b07a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b07e:	4618      	mov	r0, r3
 801b080:	375c      	adds	r7, #92	; 0x5c
 801b082:	46bd      	mov	sp, r7
 801b084:	bd90      	pop	{r4, r7, pc}
 801b086:	bf00      	nop
 801b088:	08022f8c 	.word	0x08022f8c
 801b08c:	08023300 	.word	0x08023300
 801b090:	08022fe0 	.word	0x08022fe0

0801b094 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801b094:	b590      	push	{r4, r7, lr}
 801b096:	b08b      	sub	sp, #44	; 0x2c
 801b098:	af02      	add	r7, sp, #8
 801b09a:	6078      	str	r0, [r7, #4]
 801b09c:	460b      	mov	r3, r1
 801b09e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801b0a0:	2300      	movs	r3, #0
 801b0a2:	61fb      	str	r3, [r7, #28]
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801b0a8:	2300      	movs	r3, #0
 801b0aa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d106      	bne.n	801b0c0 <tcp_split_unsent_seg+0x2c>
 801b0b2:	4b95      	ldr	r3, [pc, #596]	; (801b308 <tcp_split_unsent_seg+0x274>)
 801b0b4:	f240 324b 	movw	r2, #843	; 0x34b
 801b0b8:	4994      	ldr	r1, [pc, #592]	; (801b30c <tcp_split_unsent_seg+0x278>)
 801b0ba:	4895      	ldr	r0, [pc, #596]	; (801b310 <tcp_split_unsent_seg+0x27c>)
 801b0bc:	f004 f956 	bl	801f36c <iprintf>

  useg = pcb->unsent;
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b0c4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801b0c6:	697b      	ldr	r3, [r7, #20]
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d102      	bne.n	801b0d2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801b0cc:	f04f 33ff 	mov.w	r3, #4294967295
 801b0d0:	e116      	b.n	801b300 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801b0d2:	887b      	ldrh	r3, [r7, #2]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d109      	bne.n	801b0ec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801b0d8:	4b8b      	ldr	r3, [pc, #556]	; (801b308 <tcp_split_unsent_seg+0x274>)
 801b0da:	f240 3253 	movw	r2, #851	; 0x353
 801b0de:	498d      	ldr	r1, [pc, #564]	; (801b314 <tcp_split_unsent_seg+0x280>)
 801b0e0:	488b      	ldr	r0, [pc, #556]	; (801b310 <tcp_split_unsent_seg+0x27c>)
 801b0e2:	f004 f943 	bl	801f36c <iprintf>
    return ERR_VAL;
 801b0e6:	f06f 0305 	mvn.w	r3, #5
 801b0ea:	e109      	b.n	801b300 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801b0ec:	697b      	ldr	r3, [r7, #20]
 801b0ee:	891b      	ldrh	r3, [r3, #8]
 801b0f0:	887a      	ldrh	r2, [r7, #2]
 801b0f2:	429a      	cmp	r2, r3
 801b0f4:	d301      	bcc.n	801b0fa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	e102      	b.n	801b300 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b0fe:	887a      	ldrh	r2, [r7, #2]
 801b100:	429a      	cmp	r2, r3
 801b102:	d906      	bls.n	801b112 <tcp_split_unsent_seg+0x7e>
 801b104:	4b80      	ldr	r3, [pc, #512]	; (801b308 <tcp_split_unsent_seg+0x274>)
 801b106:	f240 325b 	movw	r2, #859	; 0x35b
 801b10a:	4983      	ldr	r1, [pc, #524]	; (801b318 <tcp_split_unsent_seg+0x284>)
 801b10c:	4880      	ldr	r0, [pc, #512]	; (801b310 <tcp_split_unsent_seg+0x27c>)
 801b10e:	f004 f92d 	bl	801f36c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801b112:	697b      	ldr	r3, [r7, #20]
 801b114:	891b      	ldrh	r3, [r3, #8]
 801b116:	2b00      	cmp	r3, #0
 801b118:	d106      	bne.n	801b128 <tcp_split_unsent_seg+0x94>
 801b11a:	4b7b      	ldr	r3, [pc, #492]	; (801b308 <tcp_split_unsent_seg+0x274>)
 801b11c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801b120:	497e      	ldr	r1, [pc, #504]	; (801b31c <tcp_split_unsent_seg+0x288>)
 801b122:	487b      	ldr	r0, [pc, #492]	; (801b310 <tcp_split_unsent_seg+0x27c>)
 801b124:	f004 f922 	bl	801f36c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801b128:	697b      	ldr	r3, [r7, #20]
 801b12a:	7a9b      	ldrb	r3, [r3, #10]
 801b12c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b12e:	7bfb      	ldrb	r3, [r7, #15]
 801b130:	009b      	lsls	r3, r3, #2
 801b132:	b2db      	uxtb	r3, r3
 801b134:	f003 0304 	and.w	r3, r3, #4
 801b138:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801b13a:	697b      	ldr	r3, [r7, #20]
 801b13c:	891a      	ldrh	r2, [r3, #8]
 801b13e:	887b      	ldrh	r3, [r7, #2]
 801b140:	1ad3      	subs	r3, r2, r3
 801b142:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801b144:	7bbb      	ldrb	r3, [r7, #14]
 801b146:	b29a      	uxth	r2, r3
 801b148:	89bb      	ldrh	r3, [r7, #12]
 801b14a:	4413      	add	r3, r2
 801b14c:	b29b      	uxth	r3, r3
 801b14e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b152:	4619      	mov	r1, r3
 801b154:	2036      	movs	r0, #54	; 0x36
 801b156:	f7fa fbb3 	bl	80158c0 <pbuf_alloc>
 801b15a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b15c:	693b      	ldr	r3, [r7, #16]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	f000 80b7 	beq.w	801b2d2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801b164:	697b      	ldr	r3, [r7, #20]
 801b166:	685b      	ldr	r3, [r3, #4]
 801b168:	891a      	ldrh	r2, [r3, #8]
 801b16a:	697b      	ldr	r3, [r7, #20]
 801b16c:	891b      	ldrh	r3, [r3, #8]
 801b16e:	1ad3      	subs	r3, r2, r3
 801b170:	b29a      	uxth	r2, r3
 801b172:	887b      	ldrh	r3, [r7, #2]
 801b174:	4413      	add	r3, r2
 801b176:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801b178:	697b      	ldr	r3, [r7, #20]
 801b17a:	6858      	ldr	r0, [r3, #4]
 801b17c:	693b      	ldr	r3, [r7, #16]
 801b17e:	685a      	ldr	r2, [r3, #4]
 801b180:	7bbb      	ldrb	r3, [r7, #14]
 801b182:	18d1      	adds	r1, r2, r3
 801b184:	897b      	ldrh	r3, [r7, #10]
 801b186:	89ba      	ldrh	r2, [r7, #12]
 801b188:	f7fb f886 	bl	8016298 <pbuf_copy_partial>
 801b18c:	4603      	mov	r3, r0
 801b18e:	461a      	mov	r2, r3
 801b190:	89bb      	ldrh	r3, [r7, #12]
 801b192:	4293      	cmp	r3, r2
 801b194:	f040 809f 	bne.w	801b2d6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801b198:	697b      	ldr	r3, [r7, #20]
 801b19a:	68db      	ldr	r3, [r3, #12]
 801b19c:	899b      	ldrh	r3, [r3, #12]
 801b19e:	b29b      	uxth	r3, r3
 801b1a0:	4618      	mov	r0, r3
 801b1a2:	f7f9 fa8f 	bl	80146c4 <lwip_htons>
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	b2db      	uxtb	r3, r3
 801b1aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b1ae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801b1b4:	7efb      	ldrb	r3, [r7, #27]
 801b1b6:	f003 0308 	and.w	r3, r3, #8
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d007      	beq.n	801b1ce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801b1be:	7efb      	ldrb	r3, [r7, #27]
 801b1c0:	f023 0308 	bic.w	r3, r3, #8
 801b1c4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801b1c6:	7ebb      	ldrb	r3, [r7, #26]
 801b1c8:	f043 0308 	orr.w	r3, r3, #8
 801b1cc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801b1ce:	7efb      	ldrb	r3, [r7, #27]
 801b1d0:	f003 0301 	and.w	r3, r3, #1
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d007      	beq.n	801b1e8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801b1d8:	7efb      	ldrb	r3, [r7, #27]
 801b1da:	f023 0301 	bic.w	r3, r3, #1
 801b1de:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801b1e0:	7ebb      	ldrb	r3, [r7, #26]
 801b1e2:	f043 0301 	orr.w	r3, r3, #1
 801b1e6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801b1e8:	697b      	ldr	r3, [r7, #20]
 801b1ea:	68db      	ldr	r3, [r3, #12]
 801b1ec:	685b      	ldr	r3, [r3, #4]
 801b1ee:	4618      	mov	r0, r3
 801b1f0:	f7f9 fa7d 	bl	80146ee <lwip_htonl>
 801b1f4:	4602      	mov	r2, r0
 801b1f6:	887b      	ldrh	r3, [r7, #2]
 801b1f8:	18d1      	adds	r1, r2, r3
 801b1fa:	7eba      	ldrb	r2, [r7, #26]
 801b1fc:	7bfb      	ldrb	r3, [r7, #15]
 801b1fe:	9300      	str	r3, [sp, #0]
 801b200:	460b      	mov	r3, r1
 801b202:	6939      	ldr	r1, [r7, #16]
 801b204:	6878      	ldr	r0, [r7, #4]
 801b206:	f7ff fa4f 	bl	801a6a8 <tcp_create_segment>
 801b20a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801b20c:	69fb      	ldr	r3, [r7, #28]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d063      	beq.n	801b2da <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801b212:	697b      	ldr	r3, [r7, #20]
 801b214:	685b      	ldr	r3, [r3, #4]
 801b216:	4618      	mov	r0, r3
 801b218:	f7fa fed6 	bl	8015fc8 <pbuf_clen>
 801b21c:	4603      	mov	r3, r0
 801b21e:	461a      	mov	r2, r3
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b226:	1a9b      	subs	r3, r3, r2
 801b228:	b29a      	uxth	r2, r3
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801b230:	697b      	ldr	r3, [r7, #20]
 801b232:	6858      	ldr	r0, [r3, #4]
 801b234:	697b      	ldr	r3, [r7, #20]
 801b236:	685b      	ldr	r3, [r3, #4]
 801b238:	891a      	ldrh	r2, [r3, #8]
 801b23a:	89bb      	ldrh	r3, [r7, #12]
 801b23c:	1ad3      	subs	r3, r2, r3
 801b23e:	b29b      	uxth	r3, r3
 801b240:	4619      	mov	r1, r3
 801b242:	f7fa fc9b 	bl	8015b7c <pbuf_realloc>
  useg->len -= remainder;
 801b246:	697b      	ldr	r3, [r7, #20]
 801b248:	891a      	ldrh	r2, [r3, #8]
 801b24a:	89bb      	ldrh	r3, [r7, #12]
 801b24c:	1ad3      	subs	r3, r2, r3
 801b24e:	b29a      	uxth	r2, r3
 801b250:	697b      	ldr	r3, [r7, #20]
 801b252:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801b254:	697b      	ldr	r3, [r7, #20]
 801b256:	68db      	ldr	r3, [r3, #12]
 801b258:	899b      	ldrh	r3, [r3, #12]
 801b25a:	b29c      	uxth	r4, r3
 801b25c:	7efb      	ldrb	r3, [r7, #27]
 801b25e:	b29b      	uxth	r3, r3
 801b260:	4618      	mov	r0, r3
 801b262:	f7f9 fa2f 	bl	80146c4 <lwip_htons>
 801b266:	4603      	mov	r3, r0
 801b268:	461a      	mov	r2, r3
 801b26a:	697b      	ldr	r3, [r7, #20]
 801b26c:	68db      	ldr	r3, [r3, #12]
 801b26e:	4322      	orrs	r2, r4
 801b270:	b292      	uxth	r2, r2
 801b272:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801b274:	697b      	ldr	r3, [r7, #20]
 801b276:	685b      	ldr	r3, [r3, #4]
 801b278:	4618      	mov	r0, r3
 801b27a:	f7fa fea5 	bl	8015fc8 <pbuf_clen>
 801b27e:	4603      	mov	r3, r0
 801b280:	461a      	mov	r2, r3
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b288:	4413      	add	r3, r2
 801b28a:	b29a      	uxth	r2, r3
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b292:	69fb      	ldr	r3, [r7, #28]
 801b294:	685b      	ldr	r3, [r3, #4]
 801b296:	4618      	mov	r0, r3
 801b298:	f7fa fe96 	bl	8015fc8 <pbuf_clen>
 801b29c:	4603      	mov	r3, r0
 801b29e:	461a      	mov	r2, r3
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b2a6:	4413      	add	r3, r2
 801b2a8:	b29a      	uxth	r2, r3
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801b2b0:	697b      	ldr	r3, [r7, #20]
 801b2b2:	681a      	ldr	r2, [r3, #0]
 801b2b4:	69fb      	ldr	r3, [r7, #28]
 801b2b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801b2b8:	697b      	ldr	r3, [r7, #20]
 801b2ba:	69fa      	ldr	r2, [r7, #28]
 801b2bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801b2be:	69fb      	ldr	r3, [r7, #28]
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d103      	bne.n	801b2ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	2200      	movs	r2, #0
 801b2ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	e016      	b.n	801b300 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801b2d2:	bf00      	nop
 801b2d4:	e002      	b.n	801b2dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b2d6:	bf00      	nop
 801b2d8:	e000      	b.n	801b2dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b2da:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801b2dc:	69fb      	ldr	r3, [r7, #28]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d006      	beq.n	801b2f0 <tcp_split_unsent_seg+0x25c>
 801b2e2:	4b09      	ldr	r3, [pc, #36]	; (801b308 <tcp_split_unsent_seg+0x274>)
 801b2e4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801b2e8:	490d      	ldr	r1, [pc, #52]	; (801b320 <tcp_split_unsent_seg+0x28c>)
 801b2ea:	4809      	ldr	r0, [pc, #36]	; (801b310 <tcp_split_unsent_seg+0x27c>)
 801b2ec:	f004 f83e 	bl	801f36c <iprintf>
  if (p != NULL) {
 801b2f0:	693b      	ldr	r3, [r7, #16]
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d002      	beq.n	801b2fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801b2f6:	6938      	ldr	r0, [r7, #16]
 801b2f8:	f7fa fdd8 	bl	8015eac <pbuf_free>
  }

  return ERR_MEM;
 801b2fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b300:	4618      	mov	r0, r3
 801b302:	3724      	adds	r7, #36	; 0x24
 801b304:	46bd      	mov	sp, r7
 801b306:	bd90      	pop	{r4, r7, pc}
 801b308:	08022f8c 	.word	0x08022f8c
 801b30c:	08023320 	.word	0x08023320
 801b310:	08022fe0 	.word	0x08022fe0
 801b314:	08023344 	.word	0x08023344
 801b318:	08023368 	.word	0x08023368
 801b31c:	08023378 	.word	0x08023378
 801b320:	08023388 	.word	0x08023388

0801b324 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801b324:	b590      	push	{r4, r7, lr}
 801b326:	b085      	sub	sp, #20
 801b328:	af00      	add	r7, sp, #0
 801b32a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d106      	bne.n	801b340 <tcp_send_fin+0x1c>
 801b332:	4b21      	ldr	r3, [pc, #132]	; (801b3b8 <tcp_send_fin+0x94>)
 801b334:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801b338:	4920      	ldr	r1, [pc, #128]	; (801b3bc <tcp_send_fin+0x98>)
 801b33a:	4821      	ldr	r0, [pc, #132]	; (801b3c0 <tcp_send_fin+0x9c>)
 801b33c:	f004 f816 	bl	801f36c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b344:	2b00      	cmp	r3, #0
 801b346:	d02e      	beq.n	801b3a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b34c:	60fb      	str	r3, [r7, #12]
 801b34e:	e002      	b.n	801b356 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801b350:	68fb      	ldr	r3, [r7, #12]
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b356:	68fb      	ldr	r3, [r7, #12]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d1f8      	bne.n	801b350 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	68db      	ldr	r3, [r3, #12]
 801b362:	899b      	ldrh	r3, [r3, #12]
 801b364:	b29b      	uxth	r3, r3
 801b366:	4618      	mov	r0, r3
 801b368:	f7f9 f9ac 	bl	80146c4 <lwip_htons>
 801b36c:	4603      	mov	r3, r0
 801b36e:	b2db      	uxtb	r3, r3
 801b370:	f003 0307 	and.w	r3, r3, #7
 801b374:	2b00      	cmp	r3, #0
 801b376:	d116      	bne.n	801b3a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801b378:	68fb      	ldr	r3, [r7, #12]
 801b37a:	68db      	ldr	r3, [r3, #12]
 801b37c:	899b      	ldrh	r3, [r3, #12]
 801b37e:	b29c      	uxth	r4, r3
 801b380:	2001      	movs	r0, #1
 801b382:	f7f9 f99f 	bl	80146c4 <lwip_htons>
 801b386:	4603      	mov	r3, r0
 801b388:	461a      	mov	r2, r3
 801b38a:	68fb      	ldr	r3, [r7, #12]
 801b38c:	68db      	ldr	r3, [r3, #12]
 801b38e:	4322      	orrs	r2, r4
 801b390:	b292      	uxth	r2, r2
 801b392:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	8b5b      	ldrh	r3, [r3, #26]
 801b398:	f043 0320 	orr.w	r3, r3, #32
 801b39c:	b29a      	uxth	r2, r3
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801b3a2:	2300      	movs	r3, #0
 801b3a4:	e004      	b.n	801b3b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801b3a6:	2101      	movs	r1, #1
 801b3a8:	6878      	ldr	r0, [r7, #4]
 801b3aa:	f000 f80b 	bl	801b3c4 <tcp_enqueue_flags>
 801b3ae:	4603      	mov	r3, r0
}
 801b3b0:	4618      	mov	r0, r3
 801b3b2:	3714      	adds	r7, #20
 801b3b4:	46bd      	mov	sp, r7
 801b3b6:	bd90      	pop	{r4, r7, pc}
 801b3b8:	08022f8c 	.word	0x08022f8c
 801b3bc:	08023394 	.word	0x08023394
 801b3c0:	08022fe0 	.word	0x08022fe0

0801b3c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801b3c4:	b580      	push	{r7, lr}
 801b3c6:	b08a      	sub	sp, #40	; 0x28
 801b3c8:	af02      	add	r7, sp, #8
 801b3ca:	6078      	str	r0, [r7, #4]
 801b3cc:	460b      	mov	r3, r1
 801b3ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801b3d0:	2300      	movs	r3, #0
 801b3d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801b3d4:	2300      	movs	r3, #0
 801b3d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b3d8:	78fb      	ldrb	r3, [r7, #3]
 801b3da:	f003 0303 	and.w	r3, r3, #3
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d106      	bne.n	801b3f0 <tcp_enqueue_flags+0x2c>
 801b3e2:	4b67      	ldr	r3, [pc, #412]	; (801b580 <tcp_enqueue_flags+0x1bc>)
 801b3e4:	f240 4211 	movw	r2, #1041	; 0x411
 801b3e8:	4966      	ldr	r1, [pc, #408]	; (801b584 <tcp_enqueue_flags+0x1c0>)
 801b3ea:	4867      	ldr	r0, [pc, #412]	; (801b588 <tcp_enqueue_flags+0x1c4>)
 801b3ec:	f003 ffbe 	bl	801f36c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	2b00      	cmp	r3, #0
 801b3f4:	d106      	bne.n	801b404 <tcp_enqueue_flags+0x40>
 801b3f6:	4b62      	ldr	r3, [pc, #392]	; (801b580 <tcp_enqueue_flags+0x1bc>)
 801b3f8:	f240 4213 	movw	r2, #1043	; 0x413
 801b3fc:	4963      	ldr	r1, [pc, #396]	; (801b58c <tcp_enqueue_flags+0x1c8>)
 801b3fe:	4862      	ldr	r0, [pc, #392]	; (801b588 <tcp_enqueue_flags+0x1c4>)
 801b400:	f003 ffb4 	bl	801f36c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801b404:	78fb      	ldrb	r3, [r7, #3]
 801b406:	f003 0302 	and.w	r3, r3, #2
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d001      	beq.n	801b412 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801b40e:	2301      	movs	r3, #1
 801b410:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b412:	7ffb      	ldrb	r3, [r7, #31]
 801b414:	009b      	lsls	r3, r3, #2
 801b416:	b2db      	uxtb	r3, r3
 801b418:	f003 0304 	and.w	r3, r3, #4
 801b41c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b41e:	7dfb      	ldrb	r3, [r7, #23]
 801b420:	b29b      	uxth	r3, r3
 801b422:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b426:	4619      	mov	r1, r3
 801b428:	2036      	movs	r0, #54	; 0x36
 801b42a:	f7fa fa49 	bl	80158c0 <pbuf_alloc>
 801b42e:	6138      	str	r0, [r7, #16]
 801b430:	693b      	ldr	r3, [r7, #16]
 801b432:	2b00      	cmp	r3, #0
 801b434:	d109      	bne.n	801b44a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	8b5b      	ldrh	r3, [r3, #26]
 801b43a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b43e:	b29a      	uxth	r2, r3
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b444:	f04f 33ff 	mov.w	r3, #4294967295
 801b448:	e095      	b.n	801b576 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b44a:	693b      	ldr	r3, [r7, #16]
 801b44c:	895a      	ldrh	r2, [r3, #10]
 801b44e:	7dfb      	ldrb	r3, [r7, #23]
 801b450:	b29b      	uxth	r3, r3
 801b452:	429a      	cmp	r2, r3
 801b454:	d206      	bcs.n	801b464 <tcp_enqueue_flags+0xa0>
 801b456:	4b4a      	ldr	r3, [pc, #296]	; (801b580 <tcp_enqueue_flags+0x1bc>)
 801b458:	f240 4239 	movw	r2, #1081	; 0x439
 801b45c:	494c      	ldr	r1, [pc, #304]	; (801b590 <tcp_enqueue_flags+0x1cc>)
 801b45e:	484a      	ldr	r0, [pc, #296]	; (801b588 <tcp_enqueue_flags+0x1c4>)
 801b460:	f003 ff84 	bl	801f36c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801b468:	78fa      	ldrb	r2, [r7, #3]
 801b46a:	7ffb      	ldrb	r3, [r7, #31]
 801b46c:	9300      	str	r3, [sp, #0]
 801b46e:	460b      	mov	r3, r1
 801b470:	6939      	ldr	r1, [r7, #16]
 801b472:	6878      	ldr	r0, [r7, #4]
 801b474:	f7ff f918 	bl	801a6a8 <tcp_create_segment>
 801b478:	60f8      	str	r0, [r7, #12]
 801b47a:	68fb      	ldr	r3, [r7, #12]
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d109      	bne.n	801b494 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	8b5b      	ldrh	r3, [r3, #26]
 801b484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b488:	b29a      	uxth	r2, r3
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b48e:	f04f 33ff 	mov.w	r3, #4294967295
 801b492:	e070      	b.n	801b576 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b494:	68fb      	ldr	r3, [r7, #12]
 801b496:	68db      	ldr	r3, [r3, #12]
 801b498:	f003 0303 	and.w	r3, r3, #3
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d006      	beq.n	801b4ae <tcp_enqueue_flags+0xea>
 801b4a0:	4b37      	ldr	r3, [pc, #220]	; (801b580 <tcp_enqueue_flags+0x1bc>)
 801b4a2:	f240 4242 	movw	r2, #1090	; 0x442
 801b4a6:	493b      	ldr	r1, [pc, #236]	; (801b594 <tcp_enqueue_flags+0x1d0>)
 801b4a8:	4837      	ldr	r0, [pc, #220]	; (801b588 <tcp_enqueue_flags+0x1c4>)
 801b4aa:	f003 ff5f 	bl	801f36c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	891b      	ldrh	r3, [r3, #8]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d006      	beq.n	801b4c4 <tcp_enqueue_flags+0x100>
 801b4b6:	4b32      	ldr	r3, [pc, #200]	; (801b580 <tcp_enqueue_flags+0x1bc>)
 801b4b8:	f240 4243 	movw	r2, #1091	; 0x443
 801b4bc:	4936      	ldr	r1, [pc, #216]	; (801b598 <tcp_enqueue_flags+0x1d4>)
 801b4be:	4832      	ldr	r0, [pc, #200]	; (801b588 <tcp_enqueue_flags+0x1c4>)
 801b4c0:	f003 ff54 	bl	801f36c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d103      	bne.n	801b4d4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	68fa      	ldr	r2, [r7, #12]
 801b4d0:	66da      	str	r2, [r3, #108]	; 0x6c
 801b4d2:	e00d      	b.n	801b4f0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4d8:	61bb      	str	r3, [r7, #24]
 801b4da:	e002      	b.n	801b4e2 <tcp_enqueue_flags+0x11e>
 801b4dc:	69bb      	ldr	r3, [r7, #24]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	61bb      	str	r3, [r7, #24]
 801b4e2:	69bb      	ldr	r3, [r7, #24]
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d1f8      	bne.n	801b4dc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801b4ea:	69bb      	ldr	r3, [r7, #24]
 801b4ec:	68fa      	ldr	r2, [r7, #12]
 801b4ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	2200      	movs	r2, #0
 801b4f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b4f8:	78fb      	ldrb	r3, [r7, #3]
 801b4fa:	f003 0302 	and.w	r3, r3, #2
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d104      	bne.n	801b50c <tcp_enqueue_flags+0x148>
 801b502:	78fb      	ldrb	r3, [r7, #3]
 801b504:	f003 0301 	and.w	r3, r3, #1
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d004      	beq.n	801b516 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b510:	1c5a      	adds	r2, r3, #1
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801b516:	78fb      	ldrb	r3, [r7, #3]
 801b518:	f003 0301 	and.w	r3, r3, #1
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d006      	beq.n	801b52e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	8b5b      	ldrh	r3, [r3, #26]
 801b524:	f043 0320 	orr.w	r3, r3, #32
 801b528:	b29a      	uxth	r2, r3
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b52e:	68fb      	ldr	r3, [r7, #12]
 801b530:	685b      	ldr	r3, [r3, #4]
 801b532:	4618      	mov	r0, r3
 801b534:	f7fa fd48 	bl	8015fc8 <pbuf_clen>
 801b538:	4603      	mov	r3, r0
 801b53a:	461a      	mov	r2, r3
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b542:	4413      	add	r3, r2
 801b544:	b29a      	uxth	r2, r3
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b552:	2b00      	cmp	r3, #0
 801b554:	d00e      	beq.n	801b574 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d10a      	bne.n	801b574 <tcp_enqueue_flags+0x1b0>
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b562:	2b00      	cmp	r3, #0
 801b564:	d106      	bne.n	801b574 <tcp_enqueue_flags+0x1b0>
 801b566:	4b06      	ldr	r3, [pc, #24]	; (801b580 <tcp_enqueue_flags+0x1bc>)
 801b568:	f240 4265 	movw	r2, #1125	; 0x465
 801b56c:	490b      	ldr	r1, [pc, #44]	; (801b59c <tcp_enqueue_flags+0x1d8>)
 801b56e:	4806      	ldr	r0, [pc, #24]	; (801b588 <tcp_enqueue_flags+0x1c4>)
 801b570:	f003 fefc 	bl	801f36c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801b574:	2300      	movs	r3, #0
}
 801b576:	4618      	mov	r0, r3
 801b578:	3720      	adds	r7, #32
 801b57a:	46bd      	mov	sp, r7
 801b57c:	bd80      	pop	{r7, pc}
 801b57e:	bf00      	nop
 801b580:	08022f8c 	.word	0x08022f8c
 801b584:	080233b0 	.word	0x080233b0
 801b588:	08022fe0 	.word	0x08022fe0
 801b58c:	08023408 	.word	0x08023408
 801b590:	08023428 	.word	0x08023428
 801b594:	08023464 	.word	0x08023464
 801b598:	0802347c 	.word	0x0802347c
 801b59c:	080234a8 	.word	0x080234a8

0801b5a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801b5a0:	b5b0      	push	{r4, r5, r7, lr}
 801b5a2:	b08a      	sub	sp, #40	; 0x28
 801b5a4:	af00      	add	r7, sp, #0
 801b5a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d106      	bne.n	801b5bc <tcp_output+0x1c>
 801b5ae:	4b9e      	ldr	r3, [pc, #632]	; (801b828 <tcp_output+0x288>)
 801b5b0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801b5b4:	499d      	ldr	r1, [pc, #628]	; (801b82c <tcp_output+0x28c>)
 801b5b6:	489e      	ldr	r0, [pc, #632]	; (801b830 <tcp_output+0x290>)
 801b5b8:	f003 fed8 	bl	801f36c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	7d1b      	ldrb	r3, [r3, #20]
 801b5c0:	2b01      	cmp	r3, #1
 801b5c2:	d106      	bne.n	801b5d2 <tcp_output+0x32>
 801b5c4:	4b98      	ldr	r3, [pc, #608]	; (801b828 <tcp_output+0x288>)
 801b5c6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801b5ca:	499a      	ldr	r1, [pc, #616]	; (801b834 <tcp_output+0x294>)
 801b5cc:	4898      	ldr	r0, [pc, #608]	; (801b830 <tcp_output+0x290>)
 801b5ce:	f003 fecd 	bl	801f36c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b5d2:	4b99      	ldr	r3, [pc, #612]	; (801b838 <tcp_output+0x298>)
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	687a      	ldr	r2, [r7, #4]
 801b5d8:	429a      	cmp	r2, r3
 801b5da:	d101      	bne.n	801b5e0 <tcp_output+0x40>
    return ERR_OK;
 801b5dc:	2300      	movs	r3, #0
 801b5de:	e1ce      	b.n	801b97e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b5ec:	4293      	cmp	r3, r2
 801b5ee:	bf28      	it	cs
 801b5f0:	4613      	movcs	r3, r2
 801b5f2:	b29b      	uxth	r3, r3
 801b5f4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b5fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801b5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d10b      	bne.n	801b61a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	8b5b      	ldrh	r3, [r3, #26]
 801b606:	f003 0302 	and.w	r3, r3, #2
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	f000 81aa 	beq.w	801b964 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801b610:	6878      	ldr	r0, [r7, #4]
 801b612:	f000 fdcb 	bl	801c1ac <tcp_send_empty_ack>
 801b616:	4603      	mov	r3, r0
 801b618:	e1b1      	b.n	801b97e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801b61a:	6879      	ldr	r1, [r7, #4]
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	3304      	adds	r3, #4
 801b620:	461a      	mov	r2, r3
 801b622:	6878      	ldr	r0, [r7, #4]
 801b624:	f7ff f824 	bl	801a670 <tcp_route>
 801b628:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b62a:	697b      	ldr	r3, [r7, #20]
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d102      	bne.n	801b636 <tcp_output+0x96>
    return ERR_RTE;
 801b630:	f06f 0303 	mvn.w	r3, #3
 801b634:	e1a3      	b.n	801b97e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d003      	beq.n	801b644 <tcp_output+0xa4>
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	2b00      	cmp	r3, #0
 801b642:	d111      	bne.n	801b668 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b644:	697b      	ldr	r3, [r7, #20]
 801b646:	2b00      	cmp	r3, #0
 801b648:	d002      	beq.n	801b650 <tcp_output+0xb0>
 801b64a:	697b      	ldr	r3, [r7, #20]
 801b64c:	3304      	adds	r3, #4
 801b64e:	e000      	b.n	801b652 <tcp_output+0xb2>
 801b650:	2300      	movs	r3, #0
 801b652:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b654:	693b      	ldr	r3, [r7, #16]
 801b656:	2b00      	cmp	r3, #0
 801b658:	d102      	bne.n	801b660 <tcp_output+0xc0>
      return ERR_RTE;
 801b65a:	f06f 0303 	mvn.w	r3, #3
 801b65e:	e18e      	b.n	801b97e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b660:	693b      	ldr	r3, [r7, #16]
 801b662:	681a      	ldr	r2, [r3, #0]
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b66a:	68db      	ldr	r3, [r3, #12]
 801b66c:	685b      	ldr	r3, [r3, #4]
 801b66e:	4618      	mov	r0, r3
 801b670:	f7f9 f83d 	bl	80146ee <lwip_htonl>
 801b674:	4602      	mov	r2, r0
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b67a:	1ad3      	subs	r3, r2, r3
 801b67c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b67e:	8912      	ldrh	r2, [r2, #8]
 801b680:	4413      	add	r3, r2
 801b682:	69ba      	ldr	r2, [r7, #24]
 801b684:	429a      	cmp	r2, r3
 801b686:	d227      	bcs.n	801b6d8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b68e:	461a      	mov	r2, r3
 801b690:	69bb      	ldr	r3, [r7, #24]
 801b692:	4293      	cmp	r3, r2
 801b694:	d114      	bne.n	801b6c0 <tcp_output+0x120>
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d110      	bne.n	801b6c0 <tcp_output+0x120>
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d10b      	bne.n	801b6c0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	2200      	movs	r2, #0
 801b6ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	2201      	movs	r2, #1
 801b6b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	2200      	movs	r2, #0
 801b6bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	8b5b      	ldrh	r3, [r3, #26]
 801b6c4:	f003 0302 	and.w	r3, r3, #2
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	f000 814d 	beq.w	801b968 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801b6ce:	6878      	ldr	r0, [r7, #4]
 801b6d0:	f000 fd6c 	bl	801c1ac <tcp_send_empty_ack>
 801b6d4:	4603      	mov	r3, r0
 801b6d6:	e152      	b.n	801b97e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	2200      	movs	r2, #0
 801b6dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b6e4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b6e6:	6a3b      	ldr	r3, [r7, #32]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	f000 811c 	beq.w	801b926 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801b6ee:	e002      	b.n	801b6f6 <tcp_output+0x156>
 801b6f0:	6a3b      	ldr	r3, [r7, #32]
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	623b      	str	r3, [r7, #32]
 801b6f6:	6a3b      	ldr	r3, [r7, #32]
 801b6f8:	681b      	ldr	r3, [r3, #0]
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d1f8      	bne.n	801b6f0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801b6fe:	e112      	b.n	801b926 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b702:	68db      	ldr	r3, [r3, #12]
 801b704:	899b      	ldrh	r3, [r3, #12]
 801b706:	b29b      	uxth	r3, r3
 801b708:	4618      	mov	r0, r3
 801b70a:	f7f8 ffdb 	bl	80146c4 <lwip_htons>
 801b70e:	4603      	mov	r3, r0
 801b710:	b2db      	uxtb	r3, r3
 801b712:	f003 0304 	and.w	r3, r3, #4
 801b716:	2b00      	cmp	r3, #0
 801b718:	d006      	beq.n	801b728 <tcp_output+0x188>
 801b71a:	4b43      	ldr	r3, [pc, #268]	; (801b828 <tcp_output+0x288>)
 801b71c:	f240 5236 	movw	r2, #1334	; 0x536
 801b720:	4946      	ldr	r1, [pc, #280]	; (801b83c <tcp_output+0x29c>)
 801b722:	4843      	ldr	r0, [pc, #268]	; (801b830 <tcp_output+0x290>)
 801b724:	f003 fe22 	bl	801f36c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	d01f      	beq.n	801b770 <tcp_output+0x1d0>
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	8b5b      	ldrh	r3, [r3, #26]
 801b734:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d119      	bne.n	801b770 <tcp_output+0x1d0>
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b740:	2b00      	cmp	r3, #0
 801b742:	d00b      	beq.n	801b75c <tcp_output+0x1bc>
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d110      	bne.n	801b770 <tcp_output+0x1d0>
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b752:	891a      	ldrh	r2, [r3, #8]
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b758:	429a      	cmp	r2, r3
 801b75a:	d209      	bcs.n	801b770 <tcp_output+0x1d0>
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b762:	2b00      	cmp	r3, #0
 801b764:	d004      	beq.n	801b770 <tcp_output+0x1d0>
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b76c:	2b08      	cmp	r3, #8
 801b76e:	d901      	bls.n	801b774 <tcp_output+0x1d4>
 801b770:	2301      	movs	r3, #1
 801b772:	e000      	b.n	801b776 <tcp_output+0x1d6>
 801b774:	2300      	movs	r3, #0
 801b776:	2b00      	cmp	r3, #0
 801b778:	d106      	bne.n	801b788 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	8b5b      	ldrh	r3, [r3, #26]
 801b77e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b782:	2b00      	cmp	r3, #0
 801b784:	f000 80e4 	beq.w	801b950 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	7d1b      	ldrb	r3, [r3, #20]
 801b78c:	2b02      	cmp	r3, #2
 801b78e:	d00d      	beq.n	801b7ac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b792:	68db      	ldr	r3, [r3, #12]
 801b794:	899b      	ldrh	r3, [r3, #12]
 801b796:	b29c      	uxth	r4, r3
 801b798:	2010      	movs	r0, #16
 801b79a:	f7f8 ff93 	bl	80146c4 <lwip_htons>
 801b79e:	4603      	mov	r3, r0
 801b7a0:	461a      	mov	r2, r3
 801b7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7a4:	68db      	ldr	r3, [r3, #12]
 801b7a6:	4322      	orrs	r2, r4
 801b7a8:	b292      	uxth	r2, r2
 801b7aa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b7ac:	697a      	ldr	r2, [r7, #20]
 801b7ae:	6879      	ldr	r1, [r7, #4]
 801b7b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b7b2:	f000 f909 	bl	801b9c8 <tcp_output_segment>
 801b7b6:	4603      	mov	r3, r0
 801b7b8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b7ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d009      	beq.n	801b7d6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	8b5b      	ldrh	r3, [r3, #26]
 801b7c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b7ca:	b29a      	uxth	r2, r3
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	835a      	strh	r2, [r3, #26]
      return err;
 801b7d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b7d4:	e0d3      	b.n	801b97e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7d8:	681a      	ldr	r2, [r3, #0]
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	7d1b      	ldrb	r3, [r3, #20]
 801b7e2:	2b02      	cmp	r3, #2
 801b7e4:	d006      	beq.n	801b7f4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	8b5b      	ldrh	r3, [r3, #26]
 801b7ea:	f023 0303 	bic.w	r3, r3, #3
 801b7ee:	b29a      	uxth	r2, r3
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7f6:	68db      	ldr	r3, [r3, #12]
 801b7f8:	685b      	ldr	r3, [r3, #4]
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	f7f8 ff77 	bl	80146ee <lwip_htonl>
 801b800:	4604      	mov	r4, r0
 801b802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b804:	891b      	ldrh	r3, [r3, #8]
 801b806:	461d      	mov	r5, r3
 801b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b80a:	68db      	ldr	r3, [r3, #12]
 801b80c:	899b      	ldrh	r3, [r3, #12]
 801b80e:	b29b      	uxth	r3, r3
 801b810:	4618      	mov	r0, r3
 801b812:	f7f8 ff57 	bl	80146c4 <lwip_htons>
 801b816:	4603      	mov	r3, r0
 801b818:	b2db      	uxtb	r3, r3
 801b81a:	f003 0303 	and.w	r3, r3, #3
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d00e      	beq.n	801b840 <tcp_output+0x2a0>
 801b822:	2301      	movs	r3, #1
 801b824:	e00d      	b.n	801b842 <tcp_output+0x2a2>
 801b826:	bf00      	nop
 801b828:	08022f8c 	.word	0x08022f8c
 801b82c:	080234d0 	.word	0x080234d0
 801b830:	08022fe0 	.word	0x08022fe0
 801b834:	080234e8 	.word	0x080234e8
 801b838:	20014bc8 	.word	0x20014bc8
 801b83c:	08023510 	.word	0x08023510
 801b840:	2300      	movs	r3, #0
 801b842:	442b      	add	r3, r5
 801b844:	4423      	add	r3, r4
 801b846:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b84c:	68bb      	ldr	r3, [r7, #8]
 801b84e:	1ad3      	subs	r3, r2, r3
 801b850:	2b00      	cmp	r3, #0
 801b852:	da02      	bge.n	801b85a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	68ba      	ldr	r2, [r7, #8]
 801b858:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b85c:	891b      	ldrh	r3, [r3, #8]
 801b85e:	461c      	mov	r4, r3
 801b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b862:	68db      	ldr	r3, [r3, #12]
 801b864:	899b      	ldrh	r3, [r3, #12]
 801b866:	b29b      	uxth	r3, r3
 801b868:	4618      	mov	r0, r3
 801b86a:	f7f8 ff2b 	bl	80146c4 <lwip_htons>
 801b86e:	4603      	mov	r3, r0
 801b870:	b2db      	uxtb	r3, r3
 801b872:	f003 0303 	and.w	r3, r3, #3
 801b876:	2b00      	cmp	r3, #0
 801b878:	d001      	beq.n	801b87e <tcp_output+0x2de>
 801b87a:	2301      	movs	r3, #1
 801b87c:	e000      	b.n	801b880 <tcp_output+0x2e0>
 801b87e:	2300      	movs	r3, #0
 801b880:	4423      	add	r3, r4
 801b882:	2b00      	cmp	r3, #0
 801b884:	d049      	beq.n	801b91a <tcp_output+0x37a>
      seg->next = NULL;
 801b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b888:	2200      	movs	r2, #0
 801b88a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b890:	2b00      	cmp	r3, #0
 801b892:	d105      	bne.n	801b8a0 <tcp_output+0x300>
        pcb->unacked = seg;
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b898:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801b89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b89c:	623b      	str	r3, [r7, #32]
 801b89e:	e03f      	b.n	801b920 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8a2:	68db      	ldr	r3, [r3, #12]
 801b8a4:	685b      	ldr	r3, [r3, #4]
 801b8a6:	4618      	mov	r0, r3
 801b8a8:	f7f8 ff21 	bl	80146ee <lwip_htonl>
 801b8ac:	4604      	mov	r4, r0
 801b8ae:	6a3b      	ldr	r3, [r7, #32]
 801b8b0:	68db      	ldr	r3, [r3, #12]
 801b8b2:	685b      	ldr	r3, [r3, #4]
 801b8b4:	4618      	mov	r0, r3
 801b8b6:	f7f8 ff1a 	bl	80146ee <lwip_htonl>
 801b8ba:	4603      	mov	r3, r0
 801b8bc:	1ae3      	subs	r3, r4, r3
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	da24      	bge.n	801b90c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	3370      	adds	r3, #112	; 0x70
 801b8c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b8c8:	e002      	b.n	801b8d0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801b8ca:	69fb      	ldr	r3, [r7, #28]
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b8d0:	69fb      	ldr	r3, [r7, #28]
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d011      	beq.n	801b8fc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b8d8:	69fb      	ldr	r3, [r7, #28]
 801b8da:	681b      	ldr	r3, [r3, #0]
 801b8dc:	68db      	ldr	r3, [r3, #12]
 801b8de:	685b      	ldr	r3, [r3, #4]
 801b8e0:	4618      	mov	r0, r3
 801b8e2:	f7f8 ff04 	bl	80146ee <lwip_htonl>
 801b8e6:	4604      	mov	r4, r0
 801b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8ea:	68db      	ldr	r3, [r3, #12]
 801b8ec:	685b      	ldr	r3, [r3, #4]
 801b8ee:	4618      	mov	r0, r3
 801b8f0:	f7f8 fefd 	bl	80146ee <lwip_htonl>
 801b8f4:	4603      	mov	r3, r0
 801b8f6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	dbe6      	blt.n	801b8ca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801b8fc:	69fb      	ldr	r3, [r7, #28]
 801b8fe:	681a      	ldr	r2, [r3, #0]
 801b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b902:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b904:	69fb      	ldr	r3, [r7, #28]
 801b906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b908:	601a      	str	r2, [r3, #0]
 801b90a:	e009      	b.n	801b920 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b90c:	6a3b      	ldr	r3, [r7, #32]
 801b90e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b910:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b912:	6a3b      	ldr	r3, [r7, #32]
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	623b      	str	r3, [r7, #32]
 801b918:	e002      	b.n	801b920 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b91a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b91c:	f7fb feff 	bl	801771e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b924:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801b926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b928:	2b00      	cmp	r3, #0
 801b92a:	d012      	beq.n	801b952 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b92e:	68db      	ldr	r3, [r3, #12]
 801b930:	685b      	ldr	r3, [r3, #4]
 801b932:	4618      	mov	r0, r3
 801b934:	f7f8 fedb 	bl	80146ee <lwip_htonl>
 801b938:	4602      	mov	r2, r0
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b93e:	1ad3      	subs	r3, r2, r3
 801b940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b942:	8912      	ldrh	r2, [r2, #8]
 801b944:	4413      	add	r3, r2
  while (seg != NULL &&
 801b946:	69ba      	ldr	r2, [r7, #24]
 801b948:	429a      	cmp	r2, r3
 801b94a:	f4bf aed9 	bcs.w	801b700 <tcp_output+0x160>
 801b94e:	e000      	b.n	801b952 <tcp_output+0x3b2>
      break;
 801b950:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b956:	2b00      	cmp	r3, #0
 801b958:	d108      	bne.n	801b96c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	2200      	movs	r2, #0
 801b95e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801b962:	e004      	b.n	801b96e <tcp_output+0x3ce>
    goto output_done;
 801b964:	bf00      	nop
 801b966:	e002      	b.n	801b96e <tcp_output+0x3ce>
    goto output_done;
 801b968:	bf00      	nop
 801b96a:	e000      	b.n	801b96e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801b96c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	8b5b      	ldrh	r3, [r3, #26]
 801b972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b976:	b29a      	uxth	r2, r3
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801b97c:	2300      	movs	r3, #0
}
 801b97e:	4618      	mov	r0, r3
 801b980:	3728      	adds	r7, #40	; 0x28
 801b982:	46bd      	mov	sp, r7
 801b984:	bdb0      	pop	{r4, r5, r7, pc}
 801b986:	bf00      	nop

0801b988 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b988:	b580      	push	{r7, lr}
 801b98a:	b082      	sub	sp, #8
 801b98c:	af00      	add	r7, sp, #0
 801b98e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	2b00      	cmp	r3, #0
 801b994:	d106      	bne.n	801b9a4 <tcp_output_segment_busy+0x1c>
 801b996:	4b09      	ldr	r3, [pc, #36]	; (801b9bc <tcp_output_segment_busy+0x34>)
 801b998:	f240 529a 	movw	r2, #1434	; 0x59a
 801b99c:	4908      	ldr	r1, [pc, #32]	; (801b9c0 <tcp_output_segment_busy+0x38>)
 801b99e:	4809      	ldr	r0, [pc, #36]	; (801b9c4 <tcp_output_segment_busy+0x3c>)
 801b9a0:	f003 fce4 	bl	801f36c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	685b      	ldr	r3, [r3, #4]
 801b9a8:	7b9b      	ldrb	r3, [r3, #14]
 801b9aa:	2b01      	cmp	r3, #1
 801b9ac:	d001      	beq.n	801b9b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801b9ae:	2301      	movs	r3, #1
 801b9b0:	e000      	b.n	801b9b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801b9b2:	2300      	movs	r3, #0
}
 801b9b4:	4618      	mov	r0, r3
 801b9b6:	3708      	adds	r7, #8
 801b9b8:	46bd      	mov	sp, r7
 801b9ba:	bd80      	pop	{r7, pc}
 801b9bc:	08022f8c 	.word	0x08022f8c
 801b9c0:	08023528 	.word	0x08023528
 801b9c4:	08022fe0 	.word	0x08022fe0

0801b9c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b9c8:	b5b0      	push	{r4, r5, r7, lr}
 801b9ca:	b08c      	sub	sp, #48	; 0x30
 801b9cc:	af04      	add	r7, sp, #16
 801b9ce:	60f8      	str	r0, [r7, #12]
 801b9d0:	60b9      	str	r1, [r7, #8]
 801b9d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801b9d4:	68fb      	ldr	r3, [r7, #12]
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	d106      	bne.n	801b9e8 <tcp_output_segment+0x20>
 801b9da:	4b63      	ldr	r3, [pc, #396]	; (801bb68 <tcp_output_segment+0x1a0>)
 801b9dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801b9e0:	4962      	ldr	r1, [pc, #392]	; (801bb6c <tcp_output_segment+0x1a4>)
 801b9e2:	4863      	ldr	r0, [pc, #396]	; (801bb70 <tcp_output_segment+0x1a8>)
 801b9e4:	f003 fcc2 	bl	801f36c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801b9e8:	68bb      	ldr	r3, [r7, #8]
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d106      	bne.n	801b9fc <tcp_output_segment+0x34>
 801b9ee:	4b5e      	ldr	r3, [pc, #376]	; (801bb68 <tcp_output_segment+0x1a0>)
 801b9f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801b9f4:	495f      	ldr	r1, [pc, #380]	; (801bb74 <tcp_output_segment+0x1ac>)
 801b9f6:	485e      	ldr	r0, [pc, #376]	; (801bb70 <tcp_output_segment+0x1a8>)
 801b9f8:	f003 fcb8 	bl	801f36c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d106      	bne.n	801ba10 <tcp_output_segment+0x48>
 801ba02:	4b59      	ldr	r3, [pc, #356]	; (801bb68 <tcp_output_segment+0x1a0>)
 801ba04:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801ba08:	495b      	ldr	r1, [pc, #364]	; (801bb78 <tcp_output_segment+0x1b0>)
 801ba0a:	4859      	ldr	r0, [pc, #356]	; (801bb70 <tcp_output_segment+0x1a8>)
 801ba0c:	f003 fcae 	bl	801f36c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801ba10:	68f8      	ldr	r0, [r7, #12]
 801ba12:	f7ff ffb9 	bl	801b988 <tcp_output_segment_busy>
 801ba16:	4603      	mov	r3, r0
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d001      	beq.n	801ba20 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801ba1c:	2300      	movs	r3, #0
 801ba1e:	e09f      	b.n	801bb60 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ba20:	68bb      	ldr	r3, [r7, #8]
 801ba22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ba24:	68fb      	ldr	r3, [r7, #12]
 801ba26:	68dc      	ldr	r4, [r3, #12]
 801ba28:	4610      	mov	r0, r2
 801ba2a:	f7f8 fe60 	bl	80146ee <lwip_htonl>
 801ba2e:	4603      	mov	r3, r0
 801ba30:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801ba32:	68bb      	ldr	r3, [r7, #8]
 801ba34:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801ba36:	68fb      	ldr	r3, [r7, #12]
 801ba38:	68dc      	ldr	r4, [r3, #12]
 801ba3a:	4610      	mov	r0, r2
 801ba3c:	f7f8 fe42 	bl	80146c4 <lwip_htons>
 801ba40:	4603      	mov	r3, r0
 801ba42:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ba44:	68bb      	ldr	r3, [r7, #8]
 801ba46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba48:	68ba      	ldr	r2, [r7, #8]
 801ba4a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ba4c:	441a      	add	r2, r3
 801ba4e:	68bb      	ldr	r3, [r7, #8]
 801ba50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801ba52:	68fb      	ldr	r3, [r7, #12]
 801ba54:	68db      	ldr	r3, [r3, #12]
 801ba56:	3314      	adds	r3, #20
 801ba58:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801ba5a:	68fb      	ldr	r3, [r7, #12]
 801ba5c:	7a9b      	ldrb	r3, [r3, #10]
 801ba5e:	f003 0301 	and.w	r3, r3, #1
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d015      	beq.n	801ba92 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801ba66:	68bb      	ldr	r3, [r7, #8]
 801ba68:	3304      	adds	r3, #4
 801ba6a:	461a      	mov	r2, r3
 801ba6c:	6879      	ldr	r1, [r7, #4]
 801ba6e:	f44f 7006 	mov.w	r0, #536	; 0x218
 801ba72:	f7fc fa37 	bl	8017ee4 <tcp_eff_send_mss_netif>
 801ba76:	4603      	mov	r3, r0
 801ba78:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801ba7a:	8b7b      	ldrh	r3, [r7, #26]
 801ba7c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801ba80:	4618      	mov	r0, r3
 801ba82:	f7f8 fe34 	bl	80146ee <lwip_htonl>
 801ba86:	4602      	mov	r2, r0
 801ba88:	69fb      	ldr	r3, [r7, #28]
 801ba8a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801ba8c:	69fb      	ldr	r3, [r7, #28]
 801ba8e:	3304      	adds	r3, #4
 801ba90:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801ba92:	68bb      	ldr	r3, [r7, #8]
 801ba94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	da02      	bge.n	801baa2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801ba9c:	68bb      	ldr	r3, [r7, #8]
 801ba9e:	2200      	movs	r2, #0
 801baa0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801baa2:	68bb      	ldr	r3, [r7, #8]
 801baa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d10c      	bne.n	801bac4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801baaa:	4b34      	ldr	r3, [pc, #208]	; (801bb7c <tcp_output_segment+0x1b4>)
 801baac:	681a      	ldr	r2, [r3, #0]
 801baae:	68bb      	ldr	r3, [r7, #8]
 801bab0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801bab2:	68fb      	ldr	r3, [r7, #12]
 801bab4:	68db      	ldr	r3, [r3, #12]
 801bab6:	685b      	ldr	r3, [r3, #4]
 801bab8:	4618      	mov	r0, r3
 801baba:	f7f8 fe18 	bl	80146ee <lwip_htonl>
 801babe:	4602      	mov	r2, r0
 801bac0:	68bb      	ldr	r3, [r7, #8]
 801bac2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	68da      	ldr	r2, [r3, #12]
 801bac8:	68fb      	ldr	r3, [r7, #12]
 801baca:	685b      	ldr	r3, [r3, #4]
 801bacc:	685b      	ldr	r3, [r3, #4]
 801bace:	1ad3      	subs	r3, r2, r3
 801bad0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	685b      	ldr	r3, [r3, #4]
 801bad6:	8959      	ldrh	r1, [r3, #10]
 801bad8:	68fb      	ldr	r3, [r7, #12]
 801bada:	685b      	ldr	r3, [r3, #4]
 801badc:	8b3a      	ldrh	r2, [r7, #24]
 801bade:	1a8a      	subs	r2, r1, r2
 801bae0:	b292      	uxth	r2, r2
 801bae2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	685b      	ldr	r3, [r3, #4]
 801bae8:	8919      	ldrh	r1, [r3, #8]
 801baea:	68fb      	ldr	r3, [r7, #12]
 801baec:	685b      	ldr	r3, [r3, #4]
 801baee:	8b3a      	ldrh	r2, [r7, #24]
 801baf0:	1a8a      	subs	r2, r1, r2
 801baf2:	b292      	uxth	r2, r2
 801baf4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	685b      	ldr	r3, [r3, #4]
 801bafa:	68fa      	ldr	r2, [r7, #12]
 801bafc:	68d2      	ldr	r2, [r2, #12]
 801bafe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801bb00:	68fb      	ldr	r3, [r7, #12]
 801bb02:	68db      	ldr	r3, [r3, #12]
 801bb04:	2200      	movs	r2, #0
 801bb06:	741a      	strb	r2, [r3, #16]
 801bb08:	2200      	movs	r2, #0
 801bb0a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	68db      	ldr	r3, [r3, #12]
 801bb10:	f103 0214 	add.w	r2, r3, #20
 801bb14:	68fb      	ldr	r3, [r7, #12]
 801bb16:	7a9b      	ldrb	r3, [r3, #10]
 801bb18:	009b      	lsls	r3, r3, #2
 801bb1a:	f003 0304 	and.w	r3, r3, #4
 801bb1e:	4413      	add	r3, r2
 801bb20:	69fa      	ldr	r2, [r7, #28]
 801bb22:	429a      	cmp	r2, r3
 801bb24:	d006      	beq.n	801bb34 <tcp_output_segment+0x16c>
 801bb26:	4b10      	ldr	r3, [pc, #64]	; (801bb68 <tcp_output_segment+0x1a0>)
 801bb28:	f240 621c 	movw	r2, #1564	; 0x61c
 801bb2c:	4914      	ldr	r1, [pc, #80]	; (801bb80 <tcp_output_segment+0x1b8>)
 801bb2e:	4810      	ldr	r0, [pc, #64]	; (801bb70 <tcp_output_segment+0x1a8>)
 801bb30:	f003 fc1c 	bl	801f36c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801bb34:	68fb      	ldr	r3, [r7, #12]
 801bb36:	6858      	ldr	r0, [r3, #4]
 801bb38:	68b9      	ldr	r1, [r7, #8]
 801bb3a:	68bb      	ldr	r3, [r7, #8]
 801bb3c:	1d1c      	adds	r4, r3, #4
 801bb3e:	68bb      	ldr	r3, [r7, #8]
 801bb40:	7add      	ldrb	r5, [r3, #11]
 801bb42:	68bb      	ldr	r3, [r7, #8]
 801bb44:	7a9b      	ldrb	r3, [r3, #10]
 801bb46:	687a      	ldr	r2, [r7, #4]
 801bb48:	9202      	str	r2, [sp, #8]
 801bb4a:	2206      	movs	r2, #6
 801bb4c:	9201      	str	r2, [sp, #4]
 801bb4e:	9300      	str	r3, [sp, #0]
 801bb50:	462b      	mov	r3, r5
 801bb52:	4622      	mov	r2, r4
 801bb54:	f002 fa66 	bl	801e024 <ip4_output_if>
 801bb58:	4603      	mov	r3, r0
 801bb5a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801bb5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bb60:	4618      	mov	r0, r3
 801bb62:	3720      	adds	r7, #32
 801bb64:	46bd      	mov	sp, r7
 801bb66:	bdb0      	pop	{r4, r5, r7, pc}
 801bb68:	08022f8c 	.word	0x08022f8c
 801bb6c:	08023550 	.word	0x08023550
 801bb70:	08022fe0 	.word	0x08022fe0
 801bb74:	08023570 	.word	0x08023570
 801bb78:	08023590 	.word	0x08023590
 801bb7c:	20014bb8 	.word	0x20014bb8
 801bb80:	080235b4 	.word	0x080235b4

0801bb84 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801bb84:	b5b0      	push	{r4, r5, r7, lr}
 801bb86:	b084      	sub	sp, #16
 801bb88:	af00      	add	r7, sp, #0
 801bb8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d106      	bne.n	801bba0 <tcp_rexmit_rto_prepare+0x1c>
 801bb92:	4b31      	ldr	r3, [pc, #196]	; (801bc58 <tcp_rexmit_rto_prepare+0xd4>)
 801bb94:	f240 6263 	movw	r2, #1635	; 0x663
 801bb98:	4930      	ldr	r1, [pc, #192]	; (801bc5c <tcp_rexmit_rto_prepare+0xd8>)
 801bb9a:	4831      	ldr	r0, [pc, #196]	; (801bc60 <tcp_rexmit_rto_prepare+0xdc>)
 801bb9c:	f003 fbe6 	bl	801f36c <iprintf>

  if (pcb->unacked == NULL) {
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d102      	bne.n	801bbae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801bba8:	f06f 0305 	mvn.w	r3, #5
 801bbac:	e050      	b.n	801bc50 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bbb2:	60fb      	str	r3, [r7, #12]
 801bbb4:	e00b      	b.n	801bbce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801bbb6:	68f8      	ldr	r0, [r7, #12]
 801bbb8:	f7ff fee6 	bl	801b988 <tcp_output_segment_busy>
 801bbbc:	4603      	mov	r3, r0
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	d002      	beq.n	801bbc8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801bbc2:	f06f 0305 	mvn.w	r3, #5
 801bbc6:	e043      	b.n	801bc50 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	681b      	ldr	r3, [r3, #0]
 801bbcc:	60fb      	str	r3, [r7, #12]
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d1ef      	bne.n	801bbb6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801bbd6:	68f8      	ldr	r0, [r7, #12]
 801bbd8:	f7ff fed6 	bl	801b988 <tcp_output_segment_busy>
 801bbdc:	4603      	mov	r3, r0
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d002      	beq.n	801bbe8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801bbe2:	f06f 0305 	mvn.w	r3, #5
 801bbe6:	e033      	b.n	801bc50 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801bbec:	68fb      	ldr	r3, [r7, #12]
 801bbee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	2200      	movs	r2, #0
 801bbfc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	8b5b      	ldrh	r3, [r3, #26]
 801bc02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bc06:	b29a      	uxth	r2, r3
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	68db      	ldr	r3, [r3, #12]
 801bc10:	685b      	ldr	r3, [r3, #4]
 801bc12:	4618      	mov	r0, r3
 801bc14:	f7f8 fd6b 	bl	80146ee <lwip_htonl>
 801bc18:	4604      	mov	r4, r0
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	891b      	ldrh	r3, [r3, #8]
 801bc1e:	461d      	mov	r5, r3
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	68db      	ldr	r3, [r3, #12]
 801bc24:	899b      	ldrh	r3, [r3, #12]
 801bc26:	b29b      	uxth	r3, r3
 801bc28:	4618      	mov	r0, r3
 801bc2a:	f7f8 fd4b 	bl	80146c4 <lwip_htons>
 801bc2e:	4603      	mov	r3, r0
 801bc30:	b2db      	uxtb	r3, r3
 801bc32:	f003 0303 	and.w	r3, r3, #3
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d001      	beq.n	801bc3e <tcp_rexmit_rto_prepare+0xba>
 801bc3a:	2301      	movs	r3, #1
 801bc3c:	e000      	b.n	801bc40 <tcp_rexmit_rto_prepare+0xbc>
 801bc3e:	2300      	movs	r3, #0
 801bc40:	442b      	add	r3, r5
 801bc42:	18e2      	adds	r2, r4, r3
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801bc48:	687b      	ldr	r3, [r7, #4]
 801bc4a:	2200      	movs	r2, #0
 801bc4c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801bc4e:	2300      	movs	r3, #0
}
 801bc50:	4618      	mov	r0, r3
 801bc52:	3710      	adds	r7, #16
 801bc54:	46bd      	mov	sp, r7
 801bc56:	bdb0      	pop	{r4, r5, r7, pc}
 801bc58:	08022f8c 	.word	0x08022f8c
 801bc5c:	080235c8 	.word	0x080235c8
 801bc60:	08022fe0 	.word	0x08022fe0

0801bc64 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801bc64:	b580      	push	{r7, lr}
 801bc66:	b082      	sub	sp, #8
 801bc68:	af00      	add	r7, sp, #0
 801bc6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d106      	bne.n	801bc80 <tcp_rexmit_rto_commit+0x1c>
 801bc72:	4b0d      	ldr	r3, [pc, #52]	; (801bca8 <tcp_rexmit_rto_commit+0x44>)
 801bc74:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801bc78:	490c      	ldr	r1, [pc, #48]	; (801bcac <tcp_rexmit_rto_commit+0x48>)
 801bc7a:	480d      	ldr	r0, [pc, #52]	; (801bcb0 <tcp_rexmit_rto_commit+0x4c>)
 801bc7c:	f003 fb76 	bl	801f36c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bc86:	2bff      	cmp	r3, #255	; 0xff
 801bc88:	d007      	beq.n	801bc9a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bc90:	3301      	adds	r3, #1
 801bc92:	b2da      	uxtb	r2, r3
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801bc9a:	6878      	ldr	r0, [r7, #4]
 801bc9c:	f7ff fc80 	bl	801b5a0 <tcp_output>
}
 801bca0:	bf00      	nop
 801bca2:	3708      	adds	r7, #8
 801bca4:	46bd      	mov	sp, r7
 801bca6:	bd80      	pop	{r7, pc}
 801bca8:	08022f8c 	.word	0x08022f8c
 801bcac:	080235ec 	.word	0x080235ec
 801bcb0:	08022fe0 	.word	0x08022fe0

0801bcb4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801bcb4:	b580      	push	{r7, lr}
 801bcb6:	b082      	sub	sp, #8
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d106      	bne.n	801bcd0 <tcp_rexmit_rto+0x1c>
 801bcc2:	4b0a      	ldr	r3, [pc, #40]	; (801bcec <tcp_rexmit_rto+0x38>)
 801bcc4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801bcc8:	4909      	ldr	r1, [pc, #36]	; (801bcf0 <tcp_rexmit_rto+0x3c>)
 801bcca:	480a      	ldr	r0, [pc, #40]	; (801bcf4 <tcp_rexmit_rto+0x40>)
 801bccc:	f003 fb4e 	bl	801f36c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801bcd0:	6878      	ldr	r0, [r7, #4]
 801bcd2:	f7ff ff57 	bl	801bb84 <tcp_rexmit_rto_prepare>
 801bcd6:	4603      	mov	r3, r0
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	d102      	bne.n	801bce2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801bcdc:	6878      	ldr	r0, [r7, #4]
 801bcde:	f7ff ffc1 	bl	801bc64 <tcp_rexmit_rto_commit>
  }
}
 801bce2:	bf00      	nop
 801bce4:	3708      	adds	r7, #8
 801bce6:	46bd      	mov	sp, r7
 801bce8:	bd80      	pop	{r7, pc}
 801bcea:	bf00      	nop
 801bcec:	08022f8c 	.word	0x08022f8c
 801bcf0:	08023610 	.word	0x08023610
 801bcf4:	08022fe0 	.word	0x08022fe0

0801bcf8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801bcf8:	b590      	push	{r4, r7, lr}
 801bcfa:	b085      	sub	sp, #20
 801bcfc:	af00      	add	r7, sp, #0
 801bcfe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d106      	bne.n	801bd14 <tcp_rexmit+0x1c>
 801bd06:	4b2f      	ldr	r3, [pc, #188]	; (801bdc4 <tcp_rexmit+0xcc>)
 801bd08:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801bd0c:	492e      	ldr	r1, [pc, #184]	; (801bdc8 <tcp_rexmit+0xd0>)
 801bd0e:	482f      	ldr	r0, [pc, #188]	; (801bdcc <tcp_rexmit+0xd4>)
 801bd10:	f003 fb2c 	bl	801f36c <iprintf>

  if (pcb->unacked == NULL) {
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d102      	bne.n	801bd22 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801bd1c:	f06f 0305 	mvn.w	r3, #5
 801bd20:	e04c      	b.n	801bdbc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd26:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801bd28:	68b8      	ldr	r0, [r7, #8]
 801bd2a:	f7ff fe2d 	bl	801b988 <tcp_output_segment_busy>
 801bd2e:	4603      	mov	r3, r0
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d002      	beq.n	801bd3a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801bd34:	f06f 0305 	mvn.w	r3, #5
 801bd38:	e040      	b.n	801bdbc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801bd3a:	68bb      	ldr	r3, [r7, #8]
 801bd3c:	681a      	ldr	r2, [r3, #0]
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	336c      	adds	r3, #108	; 0x6c
 801bd46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bd48:	e002      	b.n	801bd50 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	681b      	ldr	r3, [r3, #0]
 801bd4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bd50:	68fb      	ldr	r3, [r7, #12]
 801bd52:	681b      	ldr	r3, [r3, #0]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d011      	beq.n	801bd7c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801bd58:	68fb      	ldr	r3, [r7, #12]
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	68db      	ldr	r3, [r3, #12]
 801bd5e:	685b      	ldr	r3, [r3, #4]
 801bd60:	4618      	mov	r0, r3
 801bd62:	f7f8 fcc4 	bl	80146ee <lwip_htonl>
 801bd66:	4604      	mov	r4, r0
 801bd68:	68bb      	ldr	r3, [r7, #8]
 801bd6a:	68db      	ldr	r3, [r3, #12]
 801bd6c:	685b      	ldr	r3, [r3, #4]
 801bd6e:	4618      	mov	r0, r3
 801bd70:	f7f8 fcbd 	bl	80146ee <lwip_htonl>
 801bd74:	4603      	mov	r3, r0
 801bd76:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	dbe6      	blt.n	801bd4a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801bd7c:	68fb      	ldr	r3, [r7, #12]
 801bd7e:	681a      	ldr	r2, [r3, #0]
 801bd80:	68bb      	ldr	r3, [r7, #8]
 801bd82:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	68ba      	ldr	r2, [r7, #8]
 801bd88:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801bd8a:	68bb      	ldr	r3, [r7, #8]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d103      	bne.n	801bd9a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	2200      	movs	r2, #0
 801bd96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bda0:	2bff      	cmp	r3, #255	; 0xff
 801bda2:	d007      	beq.n	801bdb4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bdaa:	3301      	adds	r3, #1
 801bdac:	b2da      	uxtb	r2, r3
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	2200      	movs	r2, #0
 801bdb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801bdba:	2300      	movs	r3, #0
}
 801bdbc:	4618      	mov	r0, r3
 801bdbe:	3714      	adds	r7, #20
 801bdc0:	46bd      	mov	sp, r7
 801bdc2:	bd90      	pop	{r4, r7, pc}
 801bdc4:	08022f8c 	.word	0x08022f8c
 801bdc8:	0802362c 	.word	0x0802362c
 801bdcc:	08022fe0 	.word	0x08022fe0

0801bdd0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b082      	sub	sp, #8
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d106      	bne.n	801bdec <tcp_rexmit_fast+0x1c>
 801bdde:	4b2a      	ldr	r3, [pc, #168]	; (801be88 <tcp_rexmit_fast+0xb8>)
 801bde0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801bde4:	4929      	ldr	r1, [pc, #164]	; (801be8c <tcp_rexmit_fast+0xbc>)
 801bde6:	482a      	ldr	r0, [pc, #168]	; (801be90 <tcp_rexmit_fast+0xc0>)
 801bde8:	f003 fac0 	bl	801f36c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d044      	beq.n	801be7e <tcp_rexmit_fast+0xae>
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	8b5b      	ldrh	r3, [r3, #26]
 801bdf8:	f003 0304 	and.w	r3, r3, #4
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d13e      	bne.n	801be7e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801be00:	6878      	ldr	r0, [r7, #4]
 801be02:	f7ff ff79 	bl	801bcf8 <tcp_rexmit>
 801be06:	4603      	mov	r3, r0
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d138      	bne.n	801be7e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801be18:	4293      	cmp	r3, r2
 801be1a:	bf28      	it	cs
 801be1c:	4613      	movcs	r3, r2
 801be1e:	b29b      	uxth	r3, r3
 801be20:	0fda      	lsrs	r2, r3, #31
 801be22:	4413      	add	r3, r2
 801be24:	105b      	asrs	r3, r3, #1
 801be26:	b29a      	uxth	r2, r3
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801be34:	461a      	mov	r2, r3
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801be3a:	005b      	lsls	r3, r3, #1
 801be3c:	429a      	cmp	r2, r3
 801be3e:	d206      	bcs.n	801be4e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801be44:	005b      	lsls	r3, r3, #1
 801be46:	b29a      	uxth	r2, r3
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801be58:	4619      	mov	r1, r3
 801be5a:	0049      	lsls	r1, r1, #1
 801be5c:	440b      	add	r3, r1
 801be5e:	b29b      	uxth	r3, r3
 801be60:	4413      	add	r3, r2
 801be62:	b29a      	uxth	r2, r3
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	8b5b      	ldrh	r3, [r3, #26]
 801be6e:	f043 0304 	orr.w	r3, r3, #4
 801be72:	b29a      	uxth	r2, r3
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	2200      	movs	r2, #0
 801be7c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801be7e:	bf00      	nop
 801be80:	3708      	adds	r7, #8
 801be82:	46bd      	mov	sp, r7
 801be84:	bd80      	pop	{r7, pc}
 801be86:	bf00      	nop
 801be88:	08022f8c 	.word	0x08022f8c
 801be8c:	08023644 	.word	0x08023644
 801be90:	08022fe0 	.word	0x08022fe0

0801be94 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801be94:	b580      	push	{r7, lr}
 801be96:	b086      	sub	sp, #24
 801be98:	af00      	add	r7, sp, #0
 801be9a:	60f8      	str	r0, [r7, #12]
 801be9c:	607b      	str	r3, [r7, #4]
 801be9e:	460b      	mov	r3, r1
 801bea0:	817b      	strh	r3, [r7, #10]
 801bea2:	4613      	mov	r3, r2
 801bea4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801bea6:	897a      	ldrh	r2, [r7, #10]
 801bea8:	893b      	ldrh	r3, [r7, #8]
 801beaa:	4413      	add	r3, r2
 801beac:	b29b      	uxth	r3, r3
 801beae:	3314      	adds	r3, #20
 801beb0:	b29b      	uxth	r3, r3
 801beb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801beb6:	4619      	mov	r1, r3
 801beb8:	2022      	movs	r0, #34	; 0x22
 801beba:	f7f9 fd01 	bl	80158c0 <pbuf_alloc>
 801bebe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801bec0:	697b      	ldr	r3, [r7, #20]
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	d04d      	beq.n	801bf62 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801bec6:	897b      	ldrh	r3, [r7, #10]
 801bec8:	3313      	adds	r3, #19
 801beca:	697a      	ldr	r2, [r7, #20]
 801becc:	8952      	ldrh	r2, [r2, #10]
 801bece:	4293      	cmp	r3, r2
 801bed0:	db06      	blt.n	801bee0 <tcp_output_alloc_header_common+0x4c>
 801bed2:	4b26      	ldr	r3, [pc, #152]	; (801bf6c <tcp_output_alloc_header_common+0xd8>)
 801bed4:	f240 7223 	movw	r2, #1827	; 0x723
 801bed8:	4925      	ldr	r1, [pc, #148]	; (801bf70 <tcp_output_alloc_header_common+0xdc>)
 801beda:	4826      	ldr	r0, [pc, #152]	; (801bf74 <tcp_output_alloc_header_common+0xe0>)
 801bedc:	f003 fa46 	bl	801f36c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801bee0:	697b      	ldr	r3, [r7, #20]
 801bee2:	685b      	ldr	r3, [r3, #4]
 801bee4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801bee6:	8c3b      	ldrh	r3, [r7, #32]
 801bee8:	4618      	mov	r0, r3
 801beea:	f7f8 fbeb 	bl	80146c4 <lwip_htons>
 801beee:	4603      	mov	r3, r0
 801bef0:	461a      	mov	r2, r3
 801bef2:	693b      	ldr	r3, [r7, #16]
 801bef4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801bef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bef8:	4618      	mov	r0, r3
 801befa:	f7f8 fbe3 	bl	80146c4 <lwip_htons>
 801befe:	4603      	mov	r3, r0
 801bf00:	461a      	mov	r2, r3
 801bf02:	693b      	ldr	r3, [r7, #16]
 801bf04:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801bf06:	693b      	ldr	r3, [r7, #16]
 801bf08:	687a      	ldr	r2, [r7, #4]
 801bf0a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801bf0c:	68f8      	ldr	r0, [r7, #12]
 801bf0e:	f7f8 fbee 	bl	80146ee <lwip_htonl>
 801bf12:	4602      	mov	r2, r0
 801bf14:	693b      	ldr	r3, [r7, #16]
 801bf16:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801bf18:	897b      	ldrh	r3, [r7, #10]
 801bf1a:	089b      	lsrs	r3, r3, #2
 801bf1c:	b29b      	uxth	r3, r3
 801bf1e:	3305      	adds	r3, #5
 801bf20:	b29b      	uxth	r3, r3
 801bf22:	031b      	lsls	r3, r3, #12
 801bf24:	b29a      	uxth	r2, r3
 801bf26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bf2a:	b29b      	uxth	r3, r3
 801bf2c:	4313      	orrs	r3, r2
 801bf2e:	b29b      	uxth	r3, r3
 801bf30:	4618      	mov	r0, r3
 801bf32:	f7f8 fbc7 	bl	80146c4 <lwip_htons>
 801bf36:	4603      	mov	r3, r0
 801bf38:	461a      	mov	r2, r3
 801bf3a:	693b      	ldr	r3, [r7, #16]
 801bf3c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801bf3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801bf40:	4618      	mov	r0, r3
 801bf42:	f7f8 fbbf 	bl	80146c4 <lwip_htons>
 801bf46:	4603      	mov	r3, r0
 801bf48:	461a      	mov	r2, r3
 801bf4a:	693b      	ldr	r3, [r7, #16]
 801bf4c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801bf4e:	693b      	ldr	r3, [r7, #16]
 801bf50:	2200      	movs	r2, #0
 801bf52:	741a      	strb	r2, [r3, #16]
 801bf54:	2200      	movs	r2, #0
 801bf56:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801bf58:	693b      	ldr	r3, [r7, #16]
 801bf5a:	2200      	movs	r2, #0
 801bf5c:	749a      	strb	r2, [r3, #18]
 801bf5e:	2200      	movs	r2, #0
 801bf60:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801bf62:	697b      	ldr	r3, [r7, #20]
}
 801bf64:	4618      	mov	r0, r3
 801bf66:	3718      	adds	r7, #24
 801bf68:	46bd      	mov	sp, r7
 801bf6a:	bd80      	pop	{r7, pc}
 801bf6c:	08022f8c 	.word	0x08022f8c
 801bf70:	08023664 	.word	0x08023664
 801bf74:	08022fe0 	.word	0x08022fe0

0801bf78 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801bf78:	b5b0      	push	{r4, r5, r7, lr}
 801bf7a:	b08a      	sub	sp, #40	; 0x28
 801bf7c:	af04      	add	r7, sp, #16
 801bf7e:	60f8      	str	r0, [r7, #12]
 801bf80:	607b      	str	r3, [r7, #4]
 801bf82:	460b      	mov	r3, r1
 801bf84:	817b      	strh	r3, [r7, #10]
 801bf86:	4613      	mov	r3, r2
 801bf88:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d106      	bne.n	801bf9e <tcp_output_alloc_header+0x26>
 801bf90:	4b15      	ldr	r3, [pc, #84]	; (801bfe8 <tcp_output_alloc_header+0x70>)
 801bf92:	f240 7242 	movw	r2, #1858	; 0x742
 801bf96:	4915      	ldr	r1, [pc, #84]	; (801bfec <tcp_output_alloc_header+0x74>)
 801bf98:	4815      	ldr	r0, [pc, #84]	; (801bff0 <tcp_output_alloc_header+0x78>)
 801bf9a:	f003 f9e7 	bl	801f36c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801bf9e:	68fb      	ldr	r3, [r7, #12]
 801bfa0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801bfa2:	68fb      	ldr	r3, [r7, #12]
 801bfa4:	8adb      	ldrh	r3, [r3, #22]
 801bfa6:	68fa      	ldr	r2, [r7, #12]
 801bfa8:	8b12      	ldrh	r2, [r2, #24]
 801bfaa:	68f9      	ldr	r1, [r7, #12]
 801bfac:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801bfae:	893d      	ldrh	r5, [r7, #8]
 801bfb0:	897c      	ldrh	r4, [r7, #10]
 801bfb2:	9103      	str	r1, [sp, #12]
 801bfb4:	2110      	movs	r1, #16
 801bfb6:	9102      	str	r1, [sp, #8]
 801bfb8:	9201      	str	r2, [sp, #4]
 801bfba:	9300      	str	r3, [sp, #0]
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	462a      	mov	r2, r5
 801bfc0:	4621      	mov	r1, r4
 801bfc2:	f7ff ff67 	bl	801be94 <tcp_output_alloc_header_common>
 801bfc6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801bfc8:	697b      	ldr	r3, [r7, #20]
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d006      	beq.n	801bfdc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bfce:	68fb      	ldr	r3, [r7, #12]
 801bfd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bfd2:	68fa      	ldr	r2, [r7, #12]
 801bfd4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801bfd6:	441a      	add	r2, r3
 801bfd8:	68fb      	ldr	r3, [r7, #12]
 801bfda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801bfdc:	697b      	ldr	r3, [r7, #20]
}
 801bfde:	4618      	mov	r0, r3
 801bfe0:	3718      	adds	r7, #24
 801bfe2:	46bd      	mov	sp, r7
 801bfe4:	bdb0      	pop	{r4, r5, r7, pc}
 801bfe6:	bf00      	nop
 801bfe8:	08022f8c 	.word	0x08022f8c
 801bfec:	08023694 	.word	0x08023694
 801bff0:	08022fe0 	.word	0x08022fe0

0801bff4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801bff4:	b580      	push	{r7, lr}
 801bff6:	b088      	sub	sp, #32
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	60f8      	str	r0, [r7, #12]
 801bffc:	60b9      	str	r1, [r7, #8]
 801bffe:	4611      	mov	r1, r2
 801c000:	461a      	mov	r2, r3
 801c002:	460b      	mov	r3, r1
 801c004:	71fb      	strb	r3, [r7, #7]
 801c006:	4613      	mov	r3, r2
 801c008:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801c00a:	2300      	movs	r3, #0
 801c00c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801c00e:	68bb      	ldr	r3, [r7, #8]
 801c010:	2b00      	cmp	r3, #0
 801c012:	d106      	bne.n	801c022 <tcp_output_fill_options+0x2e>
 801c014:	4b13      	ldr	r3, [pc, #76]	; (801c064 <tcp_output_fill_options+0x70>)
 801c016:	f240 7256 	movw	r2, #1878	; 0x756
 801c01a:	4913      	ldr	r1, [pc, #76]	; (801c068 <tcp_output_fill_options+0x74>)
 801c01c:	4813      	ldr	r0, [pc, #76]	; (801c06c <tcp_output_fill_options+0x78>)
 801c01e:	f003 f9a5 	bl	801f36c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801c022:	68bb      	ldr	r3, [r7, #8]
 801c024:	685b      	ldr	r3, [r3, #4]
 801c026:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801c028:	69bb      	ldr	r3, [r7, #24]
 801c02a:	3314      	adds	r3, #20
 801c02c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801c02e:	69bb      	ldr	r3, [r7, #24]
 801c030:	f103 0214 	add.w	r2, r3, #20
 801c034:	8bfb      	ldrh	r3, [r7, #30]
 801c036:	009b      	lsls	r3, r3, #2
 801c038:	4619      	mov	r1, r3
 801c03a:	79fb      	ldrb	r3, [r7, #7]
 801c03c:	009b      	lsls	r3, r3, #2
 801c03e:	f003 0304 	and.w	r3, r3, #4
 801c042:	440b      	add	r3, r1
 801c044:	4413      	add	r3, r2
 801c046:	697a      	ldr	r2, [r7, #20]
 801c048:	429a      	cmp	r2, r3
 801c04a:	d006      	beq.n	801c05a <tcp_output_fill_options+0x66>
 801c04c:	4b05      	ldr	r3, [pc, #20]	; (801c064 <tcp_output_fill_options+0x70>)
 801c04e:	f240 7275 	movw	r2, #1909	; 0x775
 801c052:	4907      	ldr	r1, [pc, #28]	; (801c070 <tcp_output_fill_options+0x7c>)
 801c054:	4805      	ldr	r0, [pc, #20]	; (801c06c <tcp_output_fill_options+0x78>)
 801c056:	f003 f989 	bl	801f36c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801c05a:	bf00      	nop
 801c05c:	3720      	adds	r7, #32
 801c05e:	46bd      	mov	sp, r7
 801c060:	bd80      	pop	{r7, pc}
 801c062:	bf00      	nop
 801c064:	08022f8c 	.word	0x08022f8c
 801c068:	080236bc 	.word	0x080236bc
 801c06c:	08022fe0 	.word	0x08022fe0
 801c070:	080235b4 	.word	0x080235b4

0801c074 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801c074:	b580      	push	{r7, lr}
 801c076:	b08a      	sub	sp, #40	; 0x28
 801c078:	af04      	add	r7, sp, #16
 801c07a:	60f8      	str	r0, [r7, #12]
 801c07c:	60b9      	str	r1, [r7, #8]
 801c07e:	607a      	str	r2, [r7, #4]
 801c080:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801c082:	68bb      	ldr	r3, [r7, #8]
 801c084:	2b00      	cmp	r3, #0
 801c086:	d106      	bne.n	801c096 <tcp_output_control_segment+0x22>
 801c088:	4b1c      	ldr	r3, [pc, #112]	; (801c0fc <tcp_output_control_segment+0x88>)
 801c08a:	f240 7287 	movw	r2, #1927	; 0x787
 801c08e:	491c      	ldr	r1, [pc, #112]	; (801c100 <tcp_output_control_segment+0x8c>)
 801c090:	481c      	ldr	r0, [pc, #112]	; (801c104 <tcp_output_control_segment+0x90>)
 801c092:	f003 f96b 	bl	801f36c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801c096:	683a      	ldr	r2, [r7, #0]
 801c098:	6879      	ldr	r1, [r7, #4]
 801c09a:	68f8      	ldr	r0, [r7, #12]
 801c09c:	f7fe fae8 	bl	801a670 <tcp_route>
 801c0a0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801c0a2:	693b      	ldr	r3, [r7, #16]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d102      	bne.n	801c0ae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801c0a8:	23fc      	movs	r3, #252	; 0xfc
 801c0aa:	75fb      	strb	r3, [r7, #23]
 801c0ac:	e01c      	b.n	801c0e8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801c0ae:	68fb      	ldr	r3, [r7, #12]
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d006      	beq.n	801c0c2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801c0b4:	68fb      	ldr	r3, [r7, #12]
 801c0b6:	7adb      	ldrb	r3, [r3, #11]
 801c0b8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801c0ba:	68fb      	ldr	r3, [r7, #12]
 801c0bc:	7a9b      	ldrb	r3, [r3, #10]
 801c0be:	757b      	strb	r3, [r7, #21]
 801c0c0:	e003      	b.n	801c0ca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801c0c2:	23ff      	movs	r3, #255	; 0xff
 801c0c4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801c0c6:	2300      	movs	r3, #0
 801c0c8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801c0ca:	7dba      	ldrb	r2, [r7, #22]
 801c0cc:	693b      	ldr	r3, [r7, #16]
 801c0ce:	9302      	str	r3, [sp, #8]
 801c0d0:	2306      	movs	r3, #6
 801c0d2:	9301      	str	r3, [sp, #4]
 801c0d4:	7d7b      	ldrb	r3, [r7, #21]
 801c0d6:	9300      	str	r3, [sp, #0]
 801c0d8:	4613      	mov	r3, r2
 801c0da:	683a      	ldr	r2, [r7, #0]
 801c0dc:	6879      	ldr	r1, [r7, #4]
 801c0de:	68b8      	ldr	r0, [r7, #8]
 801c0e0:	f001 ffa0 	bl	801e024 <ip4_output_if>
 801c0e4:	4603      	mov	r3, r0
 801c0e6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801c0e8:	68b8      	ldr	r0, [r7, #8]
 801c0ea:	f7f9 fedf 	bl	8015eac <pbuf_free>
  return err;
 801c0ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	3718      	adds	r7, #24
 801c0f6:	46bd      	mov	sp, r7
 801c0f8:	bd80      	pop	{r7, pc}
 801c0fa:	bf00      	nop
 801c0fc:	08022f8c 	.word	0x08022f8c
 801c100:	080236e4 	.word	0x080236e4
 801c104:	08022fe0 	.word	0x08022fe0

0801c108 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801c108:	b590      	push	{r4, r7, lr}
 801c10a:	b08b      	sub	sp, #44	; 0x2c
 801c10c:	af04      	add	r7, sp, #16
 801c10e:	60f8      	str	r0, [r7, #12]
 801c110:	60b9      	str	r1, [r7, #8]
 801c112:	607a      	str	r2, [r7, #4]
 801c114:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801c116:	683b      	ldr	r3, [r7, #0]
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d106      	bne.n	801c12a <tcp_rst+0x22>
 801c11c:	4b1f      	ldr	r3, [pc, #124]	; (801c19c <tcp_rst+0x94>)
 801c11e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801c122:	491f      	ldr	r1, [pc, #124]	; (801c1a0 <tcp_rst+0x98>)
 801c124:	481f      	ldr	r0, [pc, #124]	; (801c1a4 <tcp_rst+0x9c>)
 801c126:	f003 f921 	bl	801f36c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d106      	bne.n	801c13e <tcp_rst+0x36>
 801c130:	4b1a      	ldr	r3, [pc, #104]	; (801c19c <tcp_rst+0x94>)
 801c132:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801c136:	491c      	ldr	r1, [pc, #112]	; (801c1a8 <tcp_rst+0xa0>)
 801c138:	481a      	ldr	r0, [pc, #104]	; (801c1a4 <tcp_rst+0x9c>)
 801c13a:	f003 f917 	bl	801f36c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c13e:	2300      	movs	r3, #0
 801c140:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801c142:	f246 0308 	movw	r3, #24584	; 0x6008
 801c146:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801c148:	7dfb      	ldrb	r3, [r7, #23]
 801c14a:	b29c      	uxth	r4, r3
 801c14c:	68b8      	ldr	r0, [r7, #8]
 801c14e:	f7f8 face 	bl	80146ee <lwip_htonl>
 801c152:	4602      	mov	r2, r0
 801c154:	8abb      	ldrh	r3, [r7, #20]
 801c156:	9303      	str	r3, [sp, #12]
 801c158:	2314      	movs	r3, #20
 801c15a:	9302      	str	r3, [sp, #8]
 801c15c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c15e:	9301      	str	r3, [sp, #4]
 801c160:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c162:	9300      	str	r3, [sp, #0]
 801c164:	4613      	mov	r3, r2
 801c166:	2200      	movs	r2, #0
 801c168:	4621      	mov	r1, r4
 801c16a:	6878      	ldr	r0, [r7, #4]
 801c16c:	f7ff fe92 	bl	801be94 <tcp_output_alloc_header_common>
 801c170:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801c172:	693b      	ldr	r3, [r7, #16]
 801c174:	2b00      	cmp	r3, #0
 801c176:	d00c      	beq.n	801c192 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c178:	7dfb      	ldrb	r3, [r7, #23]
 801c17a:	2200      	movs	r2, #0
 801c17c:	6939      	ldr	r1, [r7, #16]
 801c17e:	68f8      	ldr	r0, [r7, #12]
 801c180:	f7ff ff38 	bl	801bff4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801c184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c186:	683a      	ldr	r2, [r7, #0]
 801c188:	6939      	ldr	r1, [r7, #16]
 801c18a:	68f8      	ldr	r0, [r7, #12]
 801c18c:	f7ff ff72 	bl	801c074 <tcp_output_control_segment>
 801c190:	e000      	b.n	801c194 <tcp_rst+0x8c>
    return;
 801c192:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801c194:	371c      	adds	r7, #28
 801c196:	46bd      	mov	sp, r7
 801c198:	bd90      	pop	{r4, r7, pc}
 801c19a:	bf00      	nop
 801c19c:	08022f8c 	.word	0x08022f8c
 801c1a0:	08023710 	.word	0x08023710
 801c1a4:	08022fe0 	.word	0x08022fe0
 801c1a8:	0802372c 	.word	0x0802372c

0801c1ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801c1ac:	b590      	push	{r4, r7, lr}
 801c1ae:	b087      	sub	sp, #28
 801c1b0:	af00      	add	r7, sp, #0
 801c1b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801c1b4:	2300      	movs	r3, #0
 801c1b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801c1b8:	2300      	movs	r3, #0
 801c1ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d106      	bne.n	801c1d0 <tcp_send_empty_ack+0x24>
 801c1c2:	4b28      	ldr	r3, [pc, #160]	; (801c264 <tcp_send_empty_ack+0xb8>)
 801c1c4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801c1c8:	4927      	ldr	r1, [pc, #156]	; (801c268 <tcp_send_empty_ack+0xbc>)
 801c1ca:	4828      	ldr	r0, [pc, #160]	; (801c26c <tcp_send_empty_ack+0xc0>)
 801c1cc:	f003 f8ce 	bl	801f36c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c1d0:	7dfb      	ldrb	r3, [r7, #23]
 801c1d2:	009b      	lsls	r3, r3, #2
 801c1d4:	b2db      	uxtb	r3, r3
 801c1d6:	f003 0304 	and.w	r3, r3, #4
 801c1da:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801c1dc:	7d7b      	ldrb	r3, [r7, #21]
 801c1de:	b29c      	uxth	r4, r3
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c1e4:	4618      	mov	r0, r3
 801c1e6:	f7f8 fa82 	bl	80146ee <lwip_htonl>
 801c1ea:	4603      	mov	r3, r0
 801c1ec:	2200      	movs	r2, #0
 801c1ee:	4621      	mov	r1, r4
 801c1f0:	6878      	ldr	r0, [r7, #4]
 801c1f2:	f7ff fec1 	bl	801bf78 <tcp_output_alloc_header>
 801c1f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c1f8:	693b      	ldr	r3, [r7, #16]
 801c1fa:	2b00      	cmp	r3, #0
 801c1fc:	d109      	bne.n	801c212 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	8b5b      	ldrh	r3, [r3, #26]
 801c202:	f043 0303 	orr.w	r3, r3, #3
 801c206:	b29a      	uxth	r2, r3
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801c20c:	f06f 0301 	mvn.w	r3, #1
 801c210:	e023      	b.n	801c25a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801c212:	7dbb      	ldrb	r3, [r7, #22]
 801c214:	7dfa      	ldrb	r2, [r7, #23]
 801c216:	6939      	ldr	r1, [r7, #16]
 801c218:	6878      	ldr	r0, [r7, #4]
 801c21a:	f7ff feeb 	bl	801bff4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c21e:	687a      	ldr	r2, [r7, #4]
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	3304      	adds	r3, #4
 801c224:	6939      	ldr	r1, [r7, #16]
 801c226:	6878      	ldr	r0, [r7, #4]
 801c228:	f7ff ff24 	bl	801c074 <tcp_output_control_segment>
 801c22c:	4603      	mov	r3, r0
 801c22e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801c230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c234:	2b00      	cmp	r3, #0
 801c236:	d007      	beq.n	801c248 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	8b5b      	ldrh	r3, [r3, #26]
 801c23c:	f043 0303 	orr.w	r3, r3, #3
 801c240:	b29a      	uxth	r2, r3
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	835a      	strh	r2, [r3, #26]
 801c246:	e006      	b.n	801c256 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	8b5b      	ldrh	r3, [r3, #26]
 801c24c:	f023 0303 	bic.w	r3, r3, #3
 801c250:	b29a      	uxth	r2, r3
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801c256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c25a:	4618      	mov	r0, r3
 801c25c:	371c      	adds	r7, #28
 801c25e:	46bd      	mov	sp, r7
 801c260:	bd90      	pop	{r4, r7, pc}
 801c262:	bf00      	nop
 801c264:	08022f8c 	.word	0x08022f8c
 801c268:	08023748 	.word	0x08023748
 801c26c:	08022fe0 	.word	0x08022fe0

0801c270 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801c270:	b590      	push	{r4, r7, lr}
 801c272:	b087      	sub	sp, #28
 801c274:	af00      	add	r7, sp, #0
 801c276:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c278:	2300      	movs	r3, #0
 801c27a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	2b00      	cmp	r3, #0
 801c280:	d106      	bne.n	801c290 <tcp_keepalive+0x20>
 801c282:	4b18      	ldr	r3, [pc, #96]	; (801c2e4 <tcp_keepalive+0x74>)
 801c284:	f640 0224 	movw	r2, #2084	; 0x824
 801c288:	4917      	ldr	r1, [pc, #92]	; (801c2e8 <tcp_keepalive+0x78>)
 801c28a:	4818      	ldr	r0, [pc, #96]	; (801c2ec <tcp_keepalive+0x7c>)
 801c28c:	f003 f86e 	bl	801f36c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801c290:	7dfb      	ldrb	r3, [r7, #23]
 801c292:	b29c      	uxth	r4, r3
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c298:	3b01      	subs	r3, #1
 801c29a:	4618      	mov	r0, r3
 801c29c:	f7f8 fa27 	bl	80146ee <lwip_htonl>
 801c2a0:	4603      	mov	r3, r0
 801c2a2:	2200      	movs	r2, #0
 801c2a4:	4621      	mov	r1, r4
 801c2a6:	6878      	ldr	r0, [r7, #4]
 801c2a8:	f7ff fe66 	bl	801bf78 <tcp_output_alloc_header>
 801c2ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c2ae:	693b      	ldr	r3, [r7, #16]
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d102      	bne.n	801c2ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801c2b4:	f04f 33ff 	mov.w	r3, #4294967295
 801c2b8:	e010      	b.n	801c2dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c2ba:	7dfb      	ldrb	r3, [r7, #23]
 801c2bc:	2200      	movs	r2, #0
 801c2be:	6939      	ldr	r1, [r7, #16]
 801c2c0:	6878      	ldr	r0, [r7, #4]
 801c2c2:	f7ff fe97 	bl	801bff4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c2c6:	687a      	ldr	r2, [r7, #4]
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	3304      	adds	r3, #4
 801c2cc:	6939      	ldr	r1, [r7, #16]
 801c2ce:	6878      	ldr	r0, [r7, #4]
 801c2d0:	f7ff fed0 	bl	801c074 <tcp_output_control_segment>
 801c2d4:	4603      	mov	r3, r0
 801c2d6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c2d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c2dc:	4618      	mov	r0, r3
 801c2de:	371c      	adds	r7, #28
 801c2e0:	46bd      	mov	sp, r7
 801c2e2:	bd90      	pop	{r4, r7, pc}
 801c2e4:	08022f8c 	.word	0x08022f8c
 801c2e8:	08023768 	.word	0x08023768
 801c2ec:	08022fe0 	.word	0x08022fe0

0801c2f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801c2f0:	b590      	push	{r4, r7, lr}
 801c2f2:	b08b      	sub	sp, #44	; 0x2c
 801c2f4:	af00      	add	r7, sp, #0
 801c2f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c2f8:	2300      	movs	r3, #0
 801c2fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d106      	bne.n	801c312 <tcp_zero_window_probe+0x22>
 801c304:	4b4c      	ldr	r3, [pc, #304]	; (801c438 <tcp_zero_window_probe+0x148>)
 801c306:	f640 024f 	movw	r2, #2127	; 0x84f
 801c30a:	494c      	ldr	r1, [pc, #304]	; (801c43c <tcp_zero_window_probe+0x14c>)
 801c30c:	484c      	ldr	r0, [pc, #304]	; (801c440 <tcp_zero_window_probe+0x150>)
 801c30e:	f003 f82d 	bl	801f36c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c316:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801c318:	6a3b      	ldr	r3, [r7, #32]
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d101      	bne.n	801c322 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801c31e:	2300      	movs	r3, #0
 801c320:	e086      	b.n	801c430 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c328:	2bff      	cmp	r3, #255	; 0xff
 801c32a:	d007      	beq.n	801c33c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c332:	3301      	adds	r3, #1
 801c334:	b2da      	uxtb	r2, r3
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c33c:	6a3b      	ldr	r3, [r7, #32]
 801c33e:	68db      	ldr	r3, [r3, #12]
 801c340:	899b      	ldrh	r3, [r3, #12]
 801c342:	b29b      	uxth	r3, r3
 801c344:	4618      	mov	r0, r3
 801c346:	f7f8 f9bd 	bl	80146c4 <lwip_htons>
 801c34a:	4603      	mov	r3, r0
 801c34c:	b2db      	uxtb	r3, r3
 801c34e:	f003 0301 	and.w	r3, r3, #1
 801c352:	2b00      	cmp	r3, #0
 801c354:	d005      	beq.n	801c362 <tcp_zero_window_probe+0x72>
 801c356:	6a3b      	ldr	r3, [r7, #32]
 801c358:	891b      	ldrh	r3, [r3, #8]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d101      	bne.n	801c362 <tcp_zero_window_probe+0x72>
 801c35e:	2301      	movs	r3, #1
 801c360:	e000      	b.n	801c364 <tcp_zero_window_probe+0x74>
 801c362:	2300      	movs	r3, #0
 801c364:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801c366:	7ffb      	ldrb	r3, [r7, #31]
 801c368:	2b00      	cmp	r3, #0
 801c36a:	bf0c      	ite	eq
 801c36c:	2301      	moveq	r3, #1
 801c36e:	2300      	movne	r3, #0
 801c370:	b2db      	uxtb	r3, r3
 801c372:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801c374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c378:	b299      	uxth	r1, r3
 801c37a:	6a3b      	ldr	r3, [r7, #32]
 801c37c:	68db      	ldr	r3, [r3, #12]
 801c37e:	685b      	ldr	r3, [r3, #4]
 801c380:	8bba      	ldrh	r2, [r7, #28]
 801c382:	6878      	ldr	r0, [r7, #4]
 801c384:	f7ff fdf8 	bl	801bf78 <tcp_output_alloc_header>
 801c388:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801c38a:	69bb      	ldr	r3, [r7, #24]
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d102      	bne.n	801c396 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801c390:	f04f 33ff 	mov.w	r3, #4294967295
 801c394:	e04c      	b.n	801c430 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801c396:	69bb      	ldr	r3, [r7, #24]
 801c398:	685b      	ldr	r3, [r3, #4]
 801c39a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801c39c:	7ffb      	ldrb	r3, [r7, #31]
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d011      	beq.n	801c3c6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c3a2:	697b      	ldr	r3, [r7, #20]
 801c3a4:	899b      	ldrh	r3, [r3, #12]
 801c3a6:	b29b      	uxth	r3, r3
 801c3a8:	b21b      	sxth	r3, r3
 801c3aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c3ae:	b21c      	sxth	r4, r3
 801c3b0:	2011      	movs	r0, #17
 801c3b2:	f7f8 f987 	bl	80146c4 <lwip_htons>
 801c3b6:	4603      	mov	r3, r0
 801c3b8:	b21b      	sxth	r3, r3
 801c3ba:	4323      	orrs	r3, r4
 801c3bc:	b21b      	sxth	r3, r3
 801c3be:	b29a      	uxth	r2, r3
 801c3c0:	697b      	ldr	r3, [r7, #20]
 801c3c2:	819a      	strh	r2, [r3, #12]
 801c3c4:	e010      	b.n	801c3e8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801c3c6:	69bb      	ldr	r3, [r7, #24]
 801c3c8:	685b      	ldr	r3, [r3, #4]
 801c3ca:	3314      	adds	r3, #20
 801c3cc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c3ce:	6a3b      	ldr	r3, [r7, #32]
 801c3d0:	6858      	ldr	r0, [r3, #4]
 801c3d2:	6a3b      	ldr	r3, [r7, #32]
 801c3d4:	685b      	ldr	r3, [r3, #4]
 801c3d6:	891a      	ldrh	r2, [r3, #8]
 801c3d8:	6a3b      	ldr	r3, [r7, #32]
 801c3da:	891b      	ldrh	r3, [r3, #8]
 801c3dc:	1ad3      	subs	r3, r2, r3
 801c3de:	b29b      	uxth	r3, r3
 801c3e0:	2201      	movs	r2, #1
 801c3e2:	6939      	ldr	r1, [r7, #16]
 801c3e4:	f7f9 ff58 	bl	8016298 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c3e8:	6a3b      	ldr	r3, [r7, #32]
 801c3ea:	68db      	ldr	r3, [r3, #12]
 801c3ec:	685b      	ldr	r3, [r3, #4]
 801c3ee:	4618      	mov	r0, r3
 801c3f0:	f7f8 f97d 	bl	80146ee <lwip_htonl>
 801c3f4:	4603      	mov	r3, r0
 801c3f6:	3301      	adds	r3, #1
 801c3f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c3fe:	68fb      	ldr	r3, [r7, #12]
 801c400:	1ad3      	subs	r3, r2, r3
 801c402:	2b00      	cmp	r3, #0
 801c404:	da02      	bge.n	801c40c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801c406:	687b      	ldr	r3, [r7, #4]
 801c408:	68fa      	ldr	r2, [r7, #12]
 801c40a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c410:	2200      	movs	r2, #0
 801c412:	69b9      	ldr	r1, [r7, #24]
 801c414:	6878      	ldr	r0, [r7, #4]
 801c416:	f7ff fded 	bl	801bff4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c41a:	687a      	ldr	r2, [r7, #4]
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	3304      	adds	r3, #4
 801c420:	69b9      	ldr	r1, [r7, #24]
 801c422:	6878      	ldr	r0, [r7, #4]
 801c424:	f7ff fe26 	bl	801c074 <tcp_output_control_segment>
 801c428:	4603      	mov	r3, r0
 801c42a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c42c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c430:	4618      	mov	r0, r3
 801c432:	372c      	adds	r7, #44	; 0x2c
 801c434:	46bd      	mov	sp, r7
 801c436:	bd90      	pop	{r4, r7, pc}
 801c438:	08022f8c 	.word	0x08022f8c
 801c43c:	08023784 	.word	0x08023784
 801c440:	08022fe0 	.word	0x08022fe0

0801c444 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801c444:	b580      	push	{r7, lr}
 801c446:	b082      	sub	sp, #8
 801c448:	af00      	add	r7, sp, #0
 801c44a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801c44c:	f7fa f812 	bl	8016474 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c450:	4b0a      	ldr	r3, [pc, #40]	; (801c47c <tcpip_tcp_timer+0x38>)
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	2b00      	cmp	r3, #0
 801c456:	d103      	bne.n	801c460 <tcpip_tcp_timer+0x1c>
 801c458:	4b09      	ldr	r3, [pc, #36]	; (801c480 <tcpip_tcp_timer+0x3c>)
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d005      	beq.n	801c46c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c460:	2200      	movs	r2, #0
 801c462:	4908      	ldr	r1, [pc, #32]	; (801c484 <tcpip_tcp_timer+0x40>)
 801c464:	20fa      	movs	r0, #250	; 0xfa
 801c466:	f000 f8f3 	bl	801c650 <sys_timeout>
 801c46a:	e003      	b.n	801c474 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801c46c:	4b06      	ldr	r3, [pc, #24]	; (801c488 <tcpip_tcp_timer+0x44>)
 801c46e:	2200      	movs	r2, #0
 801c470:	601a      	str	r2, [r3, #0]
  }
}
 801c472:	bf00      	nop
 801c474:	bf00      	nop
 801c476:	3708      	adds	r7, #8
 801c478:	46bd      	mov	sp, r7
 801c47a:	bd80      	pop	{r7, pc}
 801c47c:	20014bb4 	.word	0x20014bb4
 801c480:	20014bc4 	.word	0x20014bc4
 801c484:	0801c445 	.word	0x0801c445
 801c488:	2000c838 	.word	0x2000c838

0801c48c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801c48c:	b580      	push	{r7, lr}
 801c48e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c490:	4b0a      	ldr	r3, [pc, #40]	; (801c4bc <tcp_timer_needed+0x30>)
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	2b00      	cmp	r3, #0
 801c496:	d10f      	bne.n	801c4b8 <tcp_timer_needed+0x2c>
 801c498:	4b09      	ldr	r3, [pc, #36]	; (801c4c0 <tcp_timer_needed+0x34>)
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d103      	bne.n	801c4a8 <tcp_timer_needed+0x1c>
 801c4a0:	4b08      	ldr	r3, [pc, #32]	; (801c4c4 <tcp_timer_needed+0x38>)
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	d007      	beq.n	801c4b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801c4a8:	4b04      	ldr	r3, [pc, #16]	; (801c4bc <tcp_timer_needed+0x30>)
 801c4aa:	2201      	movs	r2, #1
 801c4ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c4ae:	2200      	movs	r2, #0
 801c4b0:	4905      	ldr	r1, [pc, #20]	; (801c4c8 <tcp_timer_needed+0x3c>)
 801c4b2:	20fa      	movs	r0, #250	; 0xfa
 801c4b4:	f000 f8cc 	bl	801c650 <sys_timeout>
  }
}
 801c4b8:	bf00      	nop
 801c4ba:	bd80      	pop	{r7, pc}
 801c4bc:	2000c838 	.word	0x2000c838
 801c4c0:	20014bb4 	.word	0x20014bb4
 801c4c4:	20014bc4 	.word	0x20014bc4
 801c4c8:	0801c445 	.word	0x0801c445

0801c4cc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801c4cc:	b580      	push	{r7, lr}
 801c4ce:	b086      	sub	sp, #24
 801c4d0:	af00      	add	r7, sp, #0
 801c4d2:	60f8      	str	r0, [r7, #12]
 801c4d4:	60b9      	str	r1, [r7, #8]
 801c4d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c4d8:	200a      	movs	r0, #10
 801c4da:	f7f8 fddf 	bl	801509c <memp_malloc>
 801c4de:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801c4e0:	693b      	ldr	r3, [r7, #16]
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d109      	bne.n	801c4fa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c4e6:	693b      	ldr	r3, [r7, #16]
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	d151      	bne.n	801c590 <sys_timeout_abs+0xc4>
 801c4ec:	4b2a      	ldr	r3, [pc, #168]	; (801c598 <sys_timeout_abs+0xcc>)
 801c4ee:	22be      	movs	r2, #190	; 0xbe
 801c4f0:	492a      	ldr	r1, [pc, #168]	; (801c59c <sys_timeout_abs+0xd0>)
 801c4f2:	482b      	ldr	r0, [pc, #172]	; (801c5a0 <sys_timeout_abs+0xd4>)
 801c4f4:	f002 ff3a 	bl	801f36c <iprintf>
    return;
 801c4f8:	e04a      	b.n	801c590 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801c4fa:	693b      	ldr	r3, [r7, #16]
 801c4fc:	2200      	movs	r2, #0
 801c4fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c500:	693b      	ldr	r3, [r7, #16]
 801c502:	68ba      	ldr	r2, [r7, #8]
 801c504:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c506:	693b      	ldr	r3, [r7, #16]
 801c508:	687a      	ldr	r2, [r7, #4]
 801c50a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801c50c:	693b      	ldr	r3, [r7, #16]
 801c50e:	68fa      	ldr	r2, [r7, #12]
 801c510:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c512:	4b24      	ldr	r3, [pc, #144]	; (801c5a4 <sys_timeout_abs+0xd8>)
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	2b00      	cmp	r3, #0
 801c518:	d103      	bne.n	801c522 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801c51a:	4a22      	ldr	r2, [pc, #136]	; (801c5a4 <sys_timeout_abs+0xd8>)
 801c51c:	693b      	ldr	r3, [r7, #16]
 801c51e:	6013      	str	r3, [r2, #0]
    return;
 801c520:	e037      	b.n	801c592 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801c522:	693b      	ldr	r3, [r7, #16]
 801c524:	685a      	ldr	r2, [r3, #4]
 801c526:	4b1f      	ldr	r3, [pc, #124]	; (801c5a4 <sys_timeout_abs+0xd8>)
 801c528:	681b      	ldr	r3, [r3, #0]
 801c52a:	685b      	ldr	r3, [r3, #4]
 801c52c:	1ad3      	subs	r3, r2, r3
 801c52e:	0fdb      	lsrs	r3, r3, #31
 801c530:	f003 0301 	and.w	r3, r3, #1
 801c534:	b2db      	uxtb	r3, r3
 801c536:	2b00      	cmp	r3, #0
 801c538:	d007      	beq.n	801c54a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801c53a:	4b1a      	ldr	r3, [pc, #104]	; (801c5a4 <sys_timeout_abs+0xd8>)
 801c53c:	681a      	ldr	r2, [r3, #0]
 801c53e:	693b      	ldr	r3, [r7, #16]
 801c540:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c542:	4a18      	ldr	r2, [pc, #96]	; (801c5a4 <sys_timeout_abs+0xd8>)
 801c544:	693b      	ldr	r3, [r7, #16]
 801c546:	6013      	str	r3, [r2, #0]
 801c548:	e023      	b.n	801c592 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c54a:	4b16      	ldr	r3, [pc, #88]	; (801c5a4 <sys_timeout_abs+0xd8>)
 801c54c:	681b      	ldr	r3, [r3, #0]
 801c54e:	617b      	str	r3, [r7, #20]
 801c550:	e01a      	b.n	801c588 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801c552:	697b      	ldr	r3, [r7, #20]
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	2b00      	cmp	r3, #0
 801c558:	d00b      	beq.n	801c572 <sys_timeout_abs+0xa6>
 801c55a:	693b      	ldr	r3, [r7, #16]
 801c55c:	685a      	ldr	r2, [r3, #4]
 801c55e:	697b      	ldr	r3, [r7, #20]
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	685b      	ldr	r3, [r3, #4]
 801c564:	1ad3      	subs	r3, r2, r3
 801c566:	0fdb      	lsrs	r3, r3, #31
 801c568:	f003 0301 	and.w	r3, r3, #1
 801c56c:	b2db      	uxtb	r3, r3
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d007      	beq.n	801c582 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801c572:	697b      	ldr	r3, [r7, #20]
 801c574:	681a      	ldr	r2, [r3, #0]
 801c576:	693b      	ldr	r3, [r7, #16]
 801c578:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c57a:	697b      	ldr	r3, [r7, #20]
 801c57c:	693a      	ldr	r2, [r7, #16]
 801c57e:	601a      	str	r2, [r3, #0]
        break;
 801c580:	e007      	b.n	801c592 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c582:	697b      	ldr	r3, [r7, #20]
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	617b      	str	r3, [r7, #20]
 801c588:	697b      	ldr	r3, [r7, #20]
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d1e1      	bne.n	801c552 <sys_timeout_abs+0x86>
 801c58e:	e000      	b.n	801c592 <sys_timeout_abs+0xc6>
    return;
 801c590:	bf00      	nop
      }
    }
  }
}
 801c592:	3718      	adds	r7, #24
 801c594:	46bd      	mov	sp, r7
 801c596:	bd80      	pop	{r7, pc}
 801c598:	080237a8 	.word	0x080237a8
 801c59c:	080237dc 	.word	0x080237dc
 801c5a0:	0802381c 	.word	0x0802381c
 801c5a4:	2000c830 	.word	0x2000c830

0801c5a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	b086      	sub	sp, #24
 801c5ac:	af00      	add	r7, sp, #0
 801c5ae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c5b4:	697b      	ldr	r3, [r7, #20]
 801c5b6:	685b      	ldr	r3, [r3, #4]
 801c5b8:	4798      	blx	r3

  now = sys_now();
 801c5ba:	f7ef fa75 	bl	800baa8 <sys_now>
 801c5be:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c5c0:	697b      	ldr	r3, [r7, #20]
 801c5c2:	681a      	ldr	r2, [r3, #0]
 801c5c4:	4b0f      	ldr	r3, [pc, #60]	; (801c604 <lwip_cyclic_timer+0x5c>)
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	4413      	add	r3, r2
 801c5ca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c5cc:	68fa      	ldr	r2, [r7, #12]
 801c5ce:	693b      	ldr	r3, [r7, #16]
 801c5d0:	1ad3      	subs	r3, r2, r3
 801c5d2:	0fdb      	lsrs	r3, r3, #31
 801c5d4:	f003 0301 	and.w	r3, r3, #1
 801c5d8:	b2db      	uxtb	r3, r3
 801c5da:	2b00      	cmp	r3, #0
 801c5dc:	d009      	beq.n	801c5f2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c5de:	697b      	ldr	r3, [r7, #20]
 801c5e0:	681a      	ldr	r2, [r3, #0]
 801c5e2:	693b      	ldr	r3, [r7, #16]
 801c5e4:	4413      	add	r3, r2
 801c5e6:	687a      	ldr	r2, [r7, #4]
 801c5e8:	4907      	ldr	r1, [pc, #28]	; (801c608 <lwip_cyclic_timer+0x60>)
 801c5ea:	4618      	mov	r0, r3
 801c5ec:	f7ff ff6e 	bl	801c4cc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c5f0:	e004      	b.n	801c5fc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c5f2:	687a      	ldr	r2, [r7, #4]
 801c5f4:	4904      	ldr	r1, [pc, #16]	; (801c608 <lwip_cyclic_timer+0x60>)
 801c5f6:	68f8      	ldr	r0, [r7, #12]
 801c5f8:	f7ff ff68 	bl	801c4cc <sys_timeout_abs>
}
 801c5fc:	bf00      	nop
 801c5fe:	3718      	adds	r7, #24
 801c600:	46bd      	mov	sp, r7
 801c602:	bd80      	pop	{r7, pc}
 801c604:	2000c834 	.word	0x2000c834
 801c608:	0801c5a9 	.word	0x0801c5a9

0801c60c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801c60c:	b580      	push	{r7, lr}
 801c60e:	b082      	sub	sp, #8
 801c610:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c612:	2301      	movs	r3, #1
 801c614:	607b      	str	r3, [r7, #4]
 801c616:	e00e      	b.n	801c636 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c618:	4a0b      	ldr	r2, [pc, #44]	; (801c648 <sys_timeouts_init+0x3c>)
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	00db      	lsls	r3, r3, #3
 801c624:	4a08      	ldr	r2, [pc, #32]	; (801c648 <sys_timeouts_init+0x3c>)
 801c626:	4413      	add	r3, r2
 801c628:	461a      	mov	r2, r3
 801c62a:	4908      	ldr	r1, [pc, #32]	; (801c64c <sys_timeouts_init+0x40>)
 801c62c:	f000 f810 	bl	801c650 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	3301      	adds	r3, #1
 801c634:	607b      	str	r3, [r7, #4]
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	2b02      	cmp	r3, #2
 801c63a:	d9ed      	bls.n	801c618 <sys_timeouts_init+0xc>
  }
}
 801c63c:	bf00      	nop
 801c63e:	bf00      	nop
 801c640:	3708      	adds	r7, #8
 801c642:	46bd      	mov	sp, r7
 801c644:	bd80      	pop	{r7, pc}
 801c646:	bf00      	nop
 801c648:	0807b0e0 	.word	0x0807b0e0
 801c64c:	0801c5a9 	.word	0x0801c5a9

0801c650 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c650:	b580      	push	{r7, lr}
 801c652:	b086      	sub	sp, #24
 801c654:	af00      	add	r7, sp, #0
 801c656:	60f8      	str	r0, [r7, #12]
 801c658:	60b9      	str	r1, [r7, #8]
 801c65a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c662:	d306      	bcc.n	801c672 <sys_timeout+0x22>
 801c664:	4b0a      	ldr	r3, [pc, #40]	; (801c690 <sys_timeout+0x40>)
 801c666:	f240 1229 	movw	r2, #297	; 0x129
 801c66a:	490a      	ldr	r1, [pc, #40]	; (801c694 <sys_timeout+0x44>)
 801c66c:	480a      	ldr	r0, [pc, #40]	; (801c698 <sys_timeout+0x48>)
 801c66e:	f002 fe7d 	bl	801f36c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c672:	f7ef fa19 	bl	800baa8 <sys_now>
 801c676:	4602      	mov	r2, r0
 801c678:	68fb      	ldr	r3, [r7, #12]
 801c67a:	4413      	add	r3, r2
 801c67c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c67e:	687a      	ldr	r2, [r7, #4]
 801c680:	68b9      	ldr	r1, [r7, #8]
 801c682:	6978      	ldr	r0, [r7, #20]
 801c684:	f7ff ff22 	bl	801c4cc <sys_timeout_abs>
#endif
}
 801c688:	bf00      	nop
 801c68a:	3718      	adds	r7, #24
 801c68c:	46bd      	mov	sp, r7
 801c68e:	bd80      	pop	{r7, pc}
 801c690:	080237a8 	.word	0x080237a8
 801c694:	08023844 	.word	0x08023844
 801c698:	0802381c 	.word	0x0802381c

0801c69c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c69c:	b580      	push	{r7, lr}
 801c69e:	b084      	sub	sp, #16
 801c6a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c6a2:	f7ef fa01 	bl	800baa8 <sys_now>
 801c6a6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801c6a8:	4b17      	ldr	r3, [pc, #92]	; (801c708 <sys_check_timeouts+0x6c>)
 801c6aa:	681b      	ldr	r3, [r3, #0]
 801c6ac:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c6ae:	68bb      	ldr	r3, [r7, #8]
 801c6b0:	2b00      	cmp	r3, #0
 801c6b2:	d022      	beq.n	801c6fa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c6b4:	68bb      	ldr	r3, [r7, #8]
 801c6b6:	685b      	ldr	r3, [r3, #4]
 801c6b8:	68fa      	ldr	r2, [r7, #12]
 801c6ba:	1ad3      	subs	r3, r2, r3
 801c6bc:	0fdb      	lsrs	r3, r3, #31
 801c6be:	f003 0301 	and.w	r3, r3, #1
 801c6c2:	b2db      	uxtb	r3, r3
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d11a      	bne.n	801c6fe <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c6c8:	68bb      	ldr	r3, [r7, #8]
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	4a0e      	ldr	r2, [pc, #56]	; (801c708 <sys_check_timeouts+0x6c>)
 801c6ce:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c6d0:	68bb      	ldr	r3, [r7, #8]
 801c6d2:	689b      	ldr	r3, [r3, #8]
 801c6d4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c6d6:	68bb      	ldr	r3, [r7, #8]
 801c6d8:	68db      	ldr	r3, [r3, #12]
 801c6da:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c6dc:	68bb      	ldr	r3, [r7, #8]
 801c6de:	685b      	ldr	r3, [r3, #4]
 801c6e0:	4a0a      	ldr	r2, [pc, #40]	; (801c70c <sys_check_timeouts+0x70>)
 801c6e2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c6e4:	68b9      	ldr	r1, [r7, #8]
 801c6e6:	200a      	movs	r0, #10
 801c6e8:	f7f8 fd2a 	bl	8015140 <memp_free>
    if (handler != NULL) {
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d0da      	beq.n	801c6a8 <sys_check_timeouts+0xc>
      handler(arg);
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	6838      	ldr	r0, [r7, #0]
 801c6f6:	4798      	blx	r3
  do {
 801c6f8:	e7d6      	b.n	801c6a8 <sys_check_timeouts+0xc>
      return;
 801c6fa:	bf00      	nop
 801c6fc:	e000      	b.n	801c700 <sys_check_timeouts+0x64>
      return;
 801c6fe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c700:	3710      	adds	r7, #16
 801c702:	46bd      	mov	sp, r7
 801c704:	bd80      	pop	{r7, pc}
 801c706:	bf00      	nop
 801c708:	2000c830 	.word	0x2000c830
 801c70c:	2000c834 	.word	0x2000c834

0801c710 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801c710:	b580      	push	{r7, lr}
 801c712:	b082      	sub	sp, #8
 801c714:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c716:	4b16      	ldr	r3, [pc, #88]	; (801c770 <sys_timeouts_sleeptime+0x60>)
 801c718:	681b      	ldr	r3, [r3, #0]
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d102      	bne.n	801c724 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801c71e:	f04f 33ff 	mov.w	r3, #4294967295
 801c722:	e020      	b.n	801c766 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801c724:	f7ef f9c0 	bl	800baa8 <sys_now>
 801c728:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801c72a:	4b11      	ldr	r3, [pc, #68]	; (801c770 <sys_timeouts_sleeptime+0x60>)
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	685a      	ldr	r2, [r3, #4]
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	1ad3      	subs	r3, r2, r3
 801c734:	0fdb      	lsrs	r3, r3, #31
 801c736:	f003 0301 	and.w	r3, r3, #1
 801c73a:	b2db      	uxtb	r3, r3
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d001      	beq.n	801c744 <sys_timeouts_sleeptime+0x34>
    return 0;
 801c740:	2300      	movs	r3, #0
 801c742:	e010      	b.n	801c766 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801c744:	4b0a      	ldr	r3, [pc, #40]	; (801c770 <sys_timeouts_sleeptime+0x60>)
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	685a      	ldr	r2, [r3, #4]
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	1ad3      	subs	r3, r2, r3
 801c74e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801c750:	683b      	ldr	r3, [r7, #0]
 801c752:	2b00      	cmp	r3, #0
 801c754:	da06      	bge.n	801c764 <sys_timeouts_sleeptime+0x54>
 801c756:	4b07      	ldr	r3, [pc, #28]	; (801c774 <sys_timeouts_sleeptime+0x64>)
 801c758:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801c75c:	4906      	ldr	r1, [pc, #24]	; (801c778 <sys_timeouts_sleeptime+0x68>)
 801c75e:	4807      	ldr	r0, [pc, #28]	; (801c77c <sys_timeouts_sleeptime+0x6c>)
 801c760:	f002 fe04 	bl	801f36c <iprintf>
    return ret;
 801c764:	683b      	ldr	r3, [r7, #0]
  }
}
 801c766:	4618      	mov	r0, r3
 801c768:	3708      	adds	r7, #8
 801c76a:	46bd      	mov	sp, r7
 801c76c:	bd80      	pop	{r7, pc}
 801c76e:	bf00      	nop
 801c770:	2000c830 	.word	0x2000c830
 801c774:	080237a8 	.word	0x080237a8
 801c778:	0802387c 	.word	0x0802387c
 801c77c:	0802381c 	.word	0x0802381c

0801c780 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c780:	b580      	push	{r7, lr}
 801c782:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c784:	f002 fe80 	bl	801f488 <rand>
 801c788:	4603      	mov	r3, r0
 801c78a:	b29b      	uxth	r3, r3
 801c78c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c790:	b29b      	uxth	r3, r3
 801c792:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801c796:	b29a      	uxth	r2, r3
 801c798:	4b01      	ldr	r3, [pc, #4]	; (801c7a0 <udp_init+0x20>)
 801c79a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c79c:	bf00      	nop
 801c79e:	bd80      	pop	{r7, pc}
 801c7a0:	2000003c 	.word	0x2000003c

0801c7a4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c7a4:	b580      	push	{r7, lr}
 801c7a6:	b084      	sub	sp, #16
 801c7a8:	af00      	add	r7, sp, #0
 801c7aa:	60f8      	str	r0, [r7, #12]
 801c7ac:	60b9      	str	r1, [r7, #8]
 801c7ae:	4613      	mov	r3, r2
 801c7b0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	d105      	bne.n	801c7c4 <udp_input_local_match+0x20>
 801c7b8:	4b27      	ldr	r3, [pc, #156]	; (801c858 <udp_input_local_match+0xb4>)
 801c7ba:	2287      	movs	r2, #135	; 0x87
 801c7bc:	4927      	ldr	r1, [pc, #156]	; (801c85c <udp_input_local_match+0xb8>)
 801c7be:	4828      	ldr	r0, [pc, #160]	; (801c860 <udp_input_local_match+0xbc>)
 801c7c0:	f002 fdd4 	bl	801f36c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c7c4:	68bb      	ldr	r3, [r7, #8]
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d105      	bne.n	801c7d6 <udp_input_local_match+0x32>
 801c7ca:	4b23      	ldr	r3, [pc, #140]	; (801c858 <udp_input_local_match+0xb4>)
 801c7cc:	2288      	movs	r2, #136	; 0x88
 801c7ce:	4925      	ldr	r1, [pc, #148]	; (801c864 <udp_input_local_match+0xc0>)
 801c7d0:	4823      	ldr	r0, [pc, #140]	; (801c860 <udp_input_local_match+0xbc>)
 801c7d2:	f002 fdcb 	bl	801f36c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	7a1b      	ldrb	r3, [r3, #8]
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d00b      	beq.n	801c7f6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	7a1a      	ldrb	r2, [r3, #8]
 801c7e2:	4b21      	ldr	r3, [pc, #132]	; (801c868 <udp_input_local_match+0xc4>)
 801c7e4:	685b      	ldr	r3, [r3, #4]
 801c7e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c7ea:	3301      	adds	r3, #1
 801c7ec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c7ee:	429a      	cmp	r2, r3
 801c7f0:	d001      	beq.n	801c7f6 <udp_input_local_match+0x52>
    return 0;
 801c7f2:	2300      	movs	r3, #0
 801c7f4:	e02b      	b.n	801c84e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c7f6:	79fb      	ldrb	r3, [r7, #7]
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	d018      	beq.n	801c82e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d013      	beq.n	801c82a <udp_input_local_match+0x86>
 801c802:	68fb      	ldr	r3, [r7, #12]
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	2b00      	cmp	r3, #0
 801c808:	d00f      	beq.n	801c82a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c80a:	4b17      	ldr	r3, [pc, #92]	; (801c868 <udp_input_local_match+0xc4>)
 801c80c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c812:	d00a      	beq.n	801c82a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	681a      	ldr	r2, [r3, #0]
 801c818:	4b13      	ldr	r3, [pc, #76]	; (801c868 <udp_input_local_match+0xc4>)
 801c81a:	695b      	ldr	r3, [r3, #20]
 801c81c:	405a      	eors	r2, r3
 801c81e:	68bb      	ldr	r3, [r7, #8]
 801c820:	3308      	adds	r3, #8
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c826:	2b00      	cmp	r3, #0
 801c828:	d110      	bne.n	801c84c <udp_input_local_match+0xa8>
          return 1;
 801c82a:	2301      	movs	r3, #1
 801c82c:	e00f      	b.n	801c84e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	2b00      	cmp	r3, #0
 801c832:	d009      	beq.n	801c848 <udp_input_local_match+0xa4>
 801c834:	68fb      	ldr	r3, [r7, #12]
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d005      	beq.n	801c848 <udp_input_local_match+0xa4>
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	681a      	ldr	r2, [r3, #0]
 801c840:	4b09      	ldr	r3, [pc, #36]	; (801c868 <udp_input_local_match+0xc4>)
 801c842:	695b      	ldr	r3, [r3, #20]
 801c844:	429a      	cmp	r2, r3
 801c846:	d101      	bne.n	801c84c <udp_input_local_match+0xa8>
        return 1;
 801c848:	2301      	movs	r3, #1
 801c84a:	e000      	b.n	801c84e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c84c:	2300      	movs	r3, #0
}
 801c84e:	4618      	mov	r0, r3
 801c850:	3710      	adds	r7, #16
 801c852:	46bd      	mov	sp, r7
 801c854:	bd80      	pop	{r7, pc}
 801c856:	bf00      	nop
 801c858:	08023890 	.word	0x08023890
 801c85c:	080238c0 	.word	0x080238c0
 801c860:	080238e4 	.word	0x080238e4
 801c864:	0802390c 	.word	0x0802390c
 801c868:	200114a0 	.word	0x200114a0

0801c86c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c86c:	b590      	push	{r4, r7, lr}
 801c86e:	b08d      	sub	sp, #52	; 0x34
 801c870:	af02      	add	r7, sp, #8
 801c872:	6078      	str	r0, [r7, #4]
 801c874:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c876:	2300      	movs	r3, #0
 801c878:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d105      	bne.n	801c88c <udp_input+0x20>
 801c880:	4b7c      	ldr	r3, [pc, #496]	; (801ca74 <udp_input+0x208>)
 801c882:	22cf      	movs	r2, #207	; 0xcf
 801c884:	497c      	ldr	r1, [pc, #496]	; (801ca78 <udp_input+0x20c>)
 801c886:	487d      	ldr	r0, [pc, #500]	; (801ca7c <udp_input+0x210>)
 801c888:	f002 fd70 	bl	801f36c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c88c:	683b      	ldr	r3, [r7, #0]
 801c88e:	2b00      	cmp	r3, #0
 801c890:	d105      	bne.n	801c89e <udp_input+0x32>
 801c892:	4b78      	ldr	r3, [pc, #480]	; (801ca74 <udp_input+0x208>)
 801c894:	22d0      	movs	r2, #208	; 0xd0
 801c896:	497a      	ldr	r1, [pc, #488]	; (801ca80 <udp_input+0x214>)
 801c898:	4878      	ldr	r0, [pc, #480]	; (801ca7c <udp_input+0x210>)
 801c89a:	f002 fd67 	bl	801f36c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	895b      	ldrh	r3, [r3, #10]
 801c8a2:	2b07      	cmp	r3, #7
 801c8a4:	d803      	bhi.n	801c8ae <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c8a6:	6878      	ldr	r0, [r7, #4]
 801c8a8:	f7f9 fb00 	bl	8015eac <pbuf_free>
    goto end;
 801c8ac:	e0de      	b.n	801ca6c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	685b      	ldr	r3, [r3, #4]
 801c8b2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c8b4:	4b73      	ldr	r3, [pc, #460]	; (801ca84 <udp_input+0x218>)
 801c8b6:	695b      	ldr	r3, [r3, #20]
 801c8b8:	4a72      	ldr	r2, [pc, #456]	; (801ca84 <udp_input+0x218>)
 801c8ba:	6812      	ldr	r2, [r2, #0]
 801c8bc:	4611      	mov	r1, r2
 801c8be:	4618      	mov	r0, r3
 801c8c0:	f001 fc88 	bl	801e1d4 <ip4_addr_isbroadcast_u32>
 801c8c4:	4603      	mov	r3, r0
 801c8c6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c8c8:	697b      	ldr	r3, [r7, #20]
 801c8ca:	881b      	ldrh	r3, [r3, #0]
 801c8cc:	b29b      	uxth	r3, r3
 801c8ce:	4618      	mov	r0, r3
 801c8d0:	f7f7 fef8 	bl	80146c4 <lwip_htons>
 801c8d4:	4603      	mov	r3, r0
 801c8d6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c8d8:	697b      	ldr	r3, [r7, #20]
 801c8da:	885b      	ldrh	r3, [r3, #2]
 801c8dc:	b29b      	uxth	r3, r3
 801c8de:	4618      	mov	r0, r3
 801c8e0:	f7f7 fef0 	bl	80146c4 <lwip_htons>
 801c8e4:	4603      	mov	r3, r0
 801c8e6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c8e8:	2300      	movs	r3, #0
 801c8ea:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801c8ec:	2300      	movs	r3, #0
 801c8ee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c8f0:	2300      	movs	r3, #0
 801c8f2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c8f4:	4b64      	ldr	r3, [pc, #400]	; (801ca88 <udp_input+0x21c>)
 801c8f6:	681b      	ldr	r3, [r3, #0]
 801c8f8:	627b      	str	r3, [r7, #36]	; 0x24
 801c8fa:	e054      	b.n	801c9a6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8fe:	8a5b      	ldrh	r3, [r3, #18]
 801c900:	89fa      	ldrh	r2, [r7, #14]
 801c902:	429a      	cmp	r2, r3
 801c904:	d14a      	bne.n	801c99c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c906:	7cfb      	ldrb	r3, [r7, #19]
 801c908:	461a      	mov	r2, r3
 801c90a:	6839      	ldr	r1, [r7, #0]
 801c90c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c90e:	f7ff ff49 	bl	801c7a4 <udp_input_local_match>
 801c912:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c914:	2b00      	cmp	r3, #0
 801c916:	d041      	beq.n	801c99c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c91a:	7c1b      	ldrb	r3, [r3, #16]
 801c91c:	f003 0304 	and.w	r3, r3, #4
 801c920:	2b00      	cmp	r3, #0
 801c922:	d11d      	bne.n	801c960 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801c924:	69fb      	ldr	r3, [r7, #28]
 801c926:	2b00      	cmp	r3, #0
 801c928:	d102      	bne.n	801c930 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c92c:	61fb      	str	r3, [r7, #28]
 801c92e:	e017      	b.n	801c960 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c930:	7cfb      	ldrb	r3, [r7, #19]
 801c932:	2b00      	cmp	r3, #0
 801c934:	d014      	beq.n	801c960 <udp_input+0xf4>
 801c936:	4b53      	ldr	r3, [pc, #332]	; (801ca84 <udp_input+0x218>)
 801c938:	695b      	ldr	r3, [r3, #20]
 801c93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c93e:	d10f      	bne.n	801c960 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c940:	69fb      	ldr	r3, [r7, #28]
 801c942:	681a      	ldr	r2, [r3, #0]
 801c944:	683b      	ldr	r3, [r7, #0]
 801c946:	3304      	adds	r3, #4
 801c948:	681b      	ldr	r3, [r3, #0]
 801c94a:	429a      	cmp	r2, r3
 801c94c:	d008      	beq.n	801c960 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c950:	681a      	ldr	r2, [r3, #0]
 801c952:	683b      	ldr	r3, [r7, #0]
 801c954:	3304      	adds	r3, #4
 801c956:	681b      	ldr	r3, [r3, #0]
 801c958:	429a      	cmp	r2, r3
 801c95a:	d101      	bne.n	801c960 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c95e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c962:	8a9b      	ldrh	r3, [r3, #20]
 801c964:	8a3a      	ldrh	r2, [r7, #16]
 801c966:	429a      	cmp	r2, r3
 801c968:	d118      	bne.n	801c99c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c96c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d005      	beq.n	801c97e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c974:	685a      	ldr	r2, [r3, #4]
 801c976:	4b43      	ldr	r3, [pc, #268]	; (801ca84 <udp_input+0x218>)
 801c978:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c97a:	429a      	cmp	r2, r3
 801c97c:	d10e      	bne.n	801c99c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c97e:	6a3b      	ldr	r3, [r7, #32]
 801c980:	2b00      	cmp	r3, #0
 801c982:	d014      	beq.n	801c9ae <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c986:	68da      	ldr	r2, [r3, #12]
 801c988:	6a3b      	ldr	r3, [r7, #32]
 801c98a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c98c:	4b3e      	ldr	r3, [pc, #248]	; (801ca88 <udp_input+0x21c>)
 801c98e:	681a      	ldr	r2, [r3, #0]
 801c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c992:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c994:	4a3c      	ldr	r2, [pc, #240]	; (801ca88 <udp_input+0x21c>)
 801c996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c998:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c99a:	e008      	b.n	801c9ae <udp_input+0x142>
      }
    }

    prev = pcb;
 801c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c99e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9a2:	68db      	ldr	r3, [r3, #12]
 801c9a4:	627b      	str	r3, [r7, #36]	; 0x24
 801c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d1a7      	bne.n	801c8fc <udp_input+0x90>
 801c9ac:	e000      	b.n	801c9b0 <udp_input+0x144>
        break;
 801c9ae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9b2:	2b00      	cmp	r3, #0
 801c9b4:	d101      	bne.n	801c9ba <udp_input+0x14e>
    pcb = uncon_pcb;
 801c9b6:	69fb      	ldr	r3, [r7, #28]
 801c9b8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d002      	beq.n	801c9c6 <udp_input+0x15a>
    for_us = 1;
 801c9c0:	2301      	movs	r3, #1
 801c9c2:	76fb      	strb	r3, [r7, #27]
 801c9c4:	e00a      	b.n	801c9dc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c9c6:	683b      	ldr	r3, [r7, #0]
 801c9c8:	3304      	adds	r3, #4
 801c9ca:	681a      	ldr	r2, [r3, #0]
 801c9cc:	4b2d      	ldr	r3, [pc, #180]	; (801ca84 <udp_input+0x218>)
 801c9ce:	695b      	ldr	r3, [r3, #20]
 801c9d0:	429a      	cmp	r2, r3
 801c9d2:	bf0c      	ite	eq
 801c9d4:	2301      	moveq	r3, #1
 801c9d6:	2300      	movne	r3, #0
 801c9d8:	b2db      	uxtb	r3, r3
 801c9da:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c9dc:	7efb      	ldrb	r3, [r7, #27]
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d041      	beq.n	801ca66 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c9e2:	2108      	movs	r1, #8
 801c9e4:	6878      	ldr	r0, [r7, #4]
 801c9e6:	f7f9 f9c9 	bl	8015d7c <pbuf_remove_header>
 801c9ea:	4603      	mov	r3, r0
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	d00a      	beq.n	801ca06 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c9f0:	4b20      	ldr	r3, [pc, #128]	; (801ca74 <udp_input+0x208>)
 801c9f2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801c9f6:	4925      	ldr	r1, [pc, #148]	; (801ca8c <udp_input+0x220>)
 801c9f8:	4820      	ldr	r0, [pc, #128]	; (801ca7c <udp_input+0x210>)
 801c9fa:	f002 fcb7 	bl	801f36c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c9fe:	6878      	ldr	r0, [r7, #4]
 801ca00:	f7f9 fa54 	bl	8015eac <pbuf_free>
      goto end;
 801ca04:	e032      	b.n	801ca6c <udp_input+0x200>
    }

    if (pcb != NULL) {
 801ca06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d012      	beq.n	801ca32 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca0e:	699b      	ldr	r3, [r3, #24]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d00a      	beq.n	801ca2a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ca14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca16:	699c      	ldr	r4, [r3, #24]
 801ca18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca1a:	69d8      	ldr	r0, [r3, #28]
 801ca1c:	8a3b      	ldrh	r3, [r7, #16]
 801ca1e:	9300      	str	r3, [sp, #0]
 801ca20:	4b1b      	ldr	r3, [pc, #108]	; (801ca90 <udp_input+0x224>)
 801ca22:	687a      	ldr	r2, [r7, #4]
 801ca24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ca26:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ca28:	e021      	b.n	801ca6e <udp_input+0x202>
        pbuf_free(p);
 801ca2a:	6878      	ldr	r0, [r7, #4]
 801ca2c:	f7f9 fa3e 	bl	8015eac <pbuf_free>
        goto end;
 801ca30:	e01c      	b.n	801ca6c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ca32:	7cfb      	ldrb	r3, [r7, #19]
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d112      	bne.n	801ca5e <udp_input+0x1f2>
 801ca38:	4b12      	ldr	r3, [pc, #72]	; (801ca84 <udp_input+0x218>)
 801ca3a:	695b      	ldr	r3, [r3, #20]
 801ca3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ca40:	2be0      	cmp	r3, #224	; 0xe0
 801ca42:	d00c      	beq.n	801ca5e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ca44:	4b0f      	ldr	r3, [pc, #60]	; (801ca84 <udp_input+0x218>)
 801ca46:	899b      	ldrh	r3, [r3, #12]
 801ca48:	3308      	adds	r3, #8
 801ca4a:	b29b      	uxth	r3, r3
 801ca4c:	b21b      	sxth	r3, r3
 801ca4e:	4619      	mov	r1, r3
 801ca50:	6878      	ldr	r0, [r7, #4]
 801ca52:	f7f9 fa18 	bl	8015e86 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ca56:	2103      	movs	r1, #3
 801ca58:	6878      	ldr	r0, [r7, #4]
 801ca5a:	f001 f89b 	bl	801db94 <icmp_dest_unreach>
      pbuf_free(p);
 801ca5e:	6878      	ldr	r0, [r7, #4]
 801ca60:	f7f9 fa24 	bl	8015eac <pbuf_free>
  return;
 801ca64:	e003      	b.n	801ca6e <udp_input+0x202>
    pbuf_free(p);
 801ca66:	6878      	ldr	r0, [r7, #4]
 801ca68:	f7f9 fa20 	bl	8015eac <pbuf_free>
  return;
 801ca6c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ca6e:	372c      	adds	r7, #44	; 0x2c
 801ca70:	46bd      	mov	sp, r7
 801ca72:	bd90      	pop	{r4, r7, pc}
 801ca74:	08023890 	.word	0x08023890
 801ca78:	08023934 	.word	0x08023934
 801ca7c:	080238e4 	.word	0x080238e4
 801ca80:	0802394c 	.word	0x0802394c
 801ca84:	200114a0 	.word	0x200114a0
 801ca88:	20014bcc 	.word	0x20014bcc
 801ca8c:	08023968 	.word	0x08023968
 801ca90:	200114b0 	.word	0x200114b0

0801ca94 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ca94:	b480      	push	{r7}
 801ca96:	b085      	sub	sp, #20
 801ca98:	af00      	add	r7, sp, #0
 801ca9a:	6078      	str	r0, [r7, #4]
 801ca9c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d01e      	beq.n	801cae2 <udp_netif_ip_addr_changed+0x4e>
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	d01a      	beq.n	801cae2 <udp_netif_ip_addr_changed+0x4e>
 801caac:	683b      	ldr	r3, [r7, #0]
 801caae:	2b00      	cmp	r3, #0
 801cab0:	d017      	beq.n	801cae2 <udp_netif_ip_addr_changed+0x4e>
 801cab2:	683b      	ldr	r3, [r7, #0]
 801cab4:	681b      	ldr	r3, [r3, #0]
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d013      	beq.n	801cae2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801caba:	4b0d      	ldr	r3, [pc, #52]	; (801caf0 <udp_netif_ip_addr_changed+0x5c>)
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	60fb      	str	r3, [r7, #12]
 801cac0:	e00c      	b.n	801cadc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801cac2:	68fb      	ldr	r3, [r7, #12]
 801cac4:	681a      	ldr	r2, [r3, #0]
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	429a      	cmp	r2, r3
 801cacc:	d103      	bne.n	801cad6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801cace:	683b      	ldr	r3, [r7, #0]
 801cad0:	681a      	ldr	r2, [r3, #0]
 801cad2:	68fb      	ldr	r3, [r7, #12]
 801cad4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801cad6:	68fb      	ldr	r3, [r7, #12]
 801cad8:	68db      	ldr	r3, [r3, #12]
 801cada:	60fb      	str	r3, [r7, #12]
 801cadc:	68fb      	ldr	r3, [r7, #12]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d1ef      	bne.n	801cac2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801cae2:	bf00      	nop
 801cae4:	3714      	adds	r7, #20
 801cae6:	46bd      	mov	sp, r7
 801cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caec:	4770      	bx	lr
 801caee:	bf00      	nop
 801caf0:	20014bcc 	.word	0x20014bcc

0801caf4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801caf4:	b580      	push	{r7, lr}
 801caf6:	b082      	sub	sp, #8
 801caf8:	af00      	add	r7, sp, #0
 801cafa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801cafc:	4915      	ldr	r1, [pc, #84]	; (801cb54 <etharp_free_entry+0x60>)
 801cafe:	687a      	ldr	r2, [r7, #4]
 801cb00:	4613      	mov	r3, r2
 801cb02:	005b      	lsls	r3, r3, #1
 801cb04:	4413      	add	r3, r2
 801cb06:	00db      	lsls	r3, r3, #3
 801cb08:	440b      	add	r3, r1
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	d013      	beq.n	801cb38 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801cb10:	4910      	ldr	r1, [pc, #64]	; (801cb54 <etharp_free_entry+0x60>)
 801cb12:	687a      	ldr	r2, [r7, #4]
 801cb14:	4613      	mov	r3, r2
 801cb16:	005b      	lsls	r3, r3, #1
 801cb18:	4413      	add	r3, r2
 801cb1a:	00db      	lsls	r3, r3, #3
 801cb1c:	440b      	add	r3, r1
 801cb1e:	681b      	ldr	r3, [r3, #0]
 801cb20:	4618      	mov	r0, r3
 801cb22:	f7f9 f9c3 	bl	8015eac <pbuf_free>
    arp_table[i].q = NULL;
 801cb26:	490b      	ldr	r1, [pc, #44]	; (801cb54 <etharp_free_entry+0x60>)
 801cb28:	687a      	ldr	r2, [r7, #4]
 801cb2a:	4613      	mov	r3, r2
 801cb2c:	005b      	lsls	r3, r3, #1
 801cb2e:	4413      	add	r3, r2
 801cb30:	00db      	lsls	r3, r3, #3
 801cb32:	440b      	add	r3, r1
 801cb34:	2200      	movs	r2, #0
 801cb36:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801cb38:	4906      	ldr	r1, [pc, #24]	; (801cb54 <etharp_free_entry+0x60>)
 801cb3a:	687a      	ldr	r2, [r7, #4]
 801cb3c:	4613      	mov	r3, r2
 801cb3e:	005b      	lsls	r3, r3, #1
 801cb40:	4413      	add	r3, r2
 801cb42:	00db      	lsls	r3, r3, #3
 801cb44:	440b      	add	r3, r1
 801cb46:	3314      	adds	r3, #20
 801cb48:	2200      	movs	r2, #0
 801cb4a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801cb4c:	bf00      	nop
 801cb4e:	3708      	adds	r7, #8
 801cb50:	46bd      	mov	sp, r7
 801cb52:	bd80      	pop	{r7, pc}
 801cb54:	2000c83c 	.word	0x2000c83c

0801cb58 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801cb58:	b580      	push	{r7, lr}
 801cb5a:	b082      	sub	sp, #8
 801cb5c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cb5e:	2300      	movs	r3, #0
 801cb60:	607b      	str	r3, [r7, #4]
 801cb62:	e096      	b.n	801cc92 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801cb64:	494f      	ldr	r1, [pc, #316]	; (801cca4 <etharp_tmr+0x14c>)
 801cb66:	687a      	ldr	r2, [r7, #4]
 801cb68:	4613      	mov	r3, r2
 801cb6a:	005b      	lsls	r3, r3, #1
 801cb6c:	4413      	add	r3, r2
 801cb6e:	00db      	lsls	r3, r3, #3
 801cb70:	440b      	add	r3, r1
 801cb72:	3314      	adds	r3, #20
 801cb74:	781b      	ldrb	r3, [r3, #0]
 801cb76:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801cb78:	78fb      	ldrb	r3, [r7, #3]
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	f000 8086 	beq.w	801cc8c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801cb80:	4948      	ldr	r1, [pc, #288]	; (801cca4 <etharp_tmr+0x14c>)
 801cb82:	687a      	ldr	r2, [r7, #4]
 801cb84:	4613      	mov	r3, r2
 801cb86:	005b      	lsls	r3, r3, #1
 801cb88:	4413      	add	r3, r2
 801cb8a:	00db      	lsls	r3, r3, #3
 801cb8c:	440b      	add	r3, r1
 801cb8e:	3312      	adds	r3, #18
 801cb90:	881b      	ldrh	r3, [r3, #0]
 801cb92:	3301      	adds	r3, #1
 801cb94:	b298      	uxth	r0, r3
 801cb96:	4943      	ldr	r1, [pc, #268]	; (801cca4 <etharp_tmr+0x14c>)
 801cb98:	687a      	ldr	r2, [r7, #4]
 801cb9a:	4613      	mov	r3, r2
 801cb9c:	005b      	lsls	r3, r3, #1
 801cb9e:	4413      	add	r3, r2
 801cba0:	00db      	lsls	r3, r3, #3
 801cba2:	440b      	add	r3, r1
 801cba4:	3312      	adds	r3, #18
 801cba6:	4602      	mov	r2, r0
 801cba8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801cbaa:	493e      	ldr	r1, [pc, #248]	; (801cca4 <etharp_tmr+0x14c>)
 801cbac:	687a      	ldr	r2, [r7, #4]
 801cbae:	4613      	mov	r3, r2
 801cbb0:	005b      	lsls	r3, r3, #1
 801cbb2:	4413      	add	r3, r2
 801cbb4:	00db      	lsls	r3, r3, #3
 801cbb6:	440b      	add	r3, r1
 801cbb8:	3312      	adds	r3, #18
 801cbba:	881b      	ldrh	r3, [r3, #0]
 801cbbc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801cbc0:	d215      	bcs.n	801cbee <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801cbc2:	4938      	ldr	r1, [pc, #224]	; (801cca4 <etharp_tmr+0x14c>)
 801cbc4:	687a      	ldr	r2, [r7, #4]
 801cbc6:	4613      	mov	r3, r2
 801cbc8:	005b      	lsls	r3, r3, #1
 801cbca:	4413      	add	r3, r2
 801cbcc:	00db      	lsls	r3, r3, #3
 801cbce:	440b      	add	r3, r1
 801cbd0:	3314      	adds	r3, #20
 801cbd2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801cbd4:	2b01      	cmp	r3, #1
 801cbd6:	d10e      	bne.n	801cbf6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801cbd8:	4932      	ldr	r1, [pc, #200]	; (801cca4 <etharp_tmr+0x14c>)
 801cbda:	687a      	ldr	r2, [r7, #4]
 801cbdc:	4613      	mov	r3, r2
 801cbde:	005b      	lsls	r3, r3, #1
 801cbe0:	4413      	add	r3, r2
 801cbe2:	00db      	lsls	r3, r3, #3
 801cbe4:	440b      	add	r3, r1
 801cbe6:	3312      	adds	r3, #18
 801cbe8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801cbea:	2b04      	cmp	r3, #4
 801cbec:	d903      	bls.n	801cbf6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801cbee:	6878      	ldr	r0, [r7, #4]
 801cbf0:	f7ff ff80 	bl	801caf4 <etharp_free_entry>
 801cbf4:	e04a      	b.n	801cc8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801cbf6:	492b      	ldr	r1, [pc, #172]	; (801cca4 <etharp_tmr+0x14c>)
 801cbf8:	687a      	ldr	r2, [r7, #4]
 801cbfa:	4613      	mov	r3, r2
 801cbfc:	005b      	lsls	r3, r3, #1
 801cbfe:	4413      	add	r3, r2
 801cc00:	00db      	lsls	r3, r3, #3
 801cc02:	440b      	add	r3, r1
 801cc04:	3314      	adds	r3, #20
 801cc06:	781b      	ldrb	r3, [r3, #0]
 801cc08:	2b03      	cmp	r3, #3
 801cc0a:	d10a      	bne.n	801cc22 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801cc0c:	4925      	ldr	r1, [pc, #148]	; (801cca4 <etharp_tmr+0x14c>)
 801cc0e:	687a      	ldr	r2, [r7, #4]
 801cc10:	4613      	mov	r3, r2
 801cc12:	005b      	lsls	r3, r3, #1
 801cc14:	4413      	add	r3, r2
 801cc16:	00db      	lsls	r3, r3, #3
 801cc18:	440b      	add	r3, r1
 801cc1a:	3314      	adds	r3, #20
 801cc1c:	2204      	movs	r2, #4
 801cc1e:	701a      	strb	r2, [r3, #0]
 801cc20:	e034      	b.n	801cc8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801cc22:	4920      	ldr	r1, [pc, #128]	; (801cca4 <etharp_tmr+0x14c>)
 801cc24:	687a      	ldr	r2, [r7, #4]
 801cc26:	4613      	mov	r3, r2
 801cc28:	005b      	lsls	r3, r3, #1
 801cc2a:	4413      	add	r3, r2
 801cc2c:	00db      	lsls	r3, r3, #3
 801cc2e:	440b      	add	r3, r1
 801cc30:	3314      	adds	r3, #20
 801cc32:	781b      	ldrb	r3, [r3, #0]
 801cc34:	2b04      	cmp	r3, #4
 801cc36:	d10a      	bne.n	801cc4e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801cc38:	491a      	ldr	r1, [pc, #104]	; (801cca4 <etharp_tmr+0x14c>)
 801cc3a:	687a      	ldr	r2, [r7, #4]
 801cc3c:	4613      	mov	r3, r2
 801cc3e:	005b      	lsls	r3, r3, #1
 801cc40:	4413      	add	r3, r2
 801cc42:	00db      	lsls	r3, r3, #3
 801cc44:	440b      	add	r3, r1
 801cc46:	3314      	adds	r3, #20
 801cc48:	2202      	movs	r2, #2
 801cc4a:	701a      	strb	r2, [r3, #0]
 801cc4c:	e01e      	b.n	801cc8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801cc4e:	4915      	ldr	r1, [pc, #84]	; (801cca4 <etharp_tmr+0x14c>)
 801cc50:	687a      	ldr	r2, [r7, #4]
 801cc52:	4613      	mov	r3, r2
 801cc54:	005b      	lsls	r3, r3, #1
 801cc56:	4413      	add	r3, r2
 801cc58:	00db      	lsls	r3, r3, #3
 801cc5a:	440b      	add	r3, r1
 801cc5c:	3314      	adds	r3, #20
 801cc5e:	781b      	ldrb	r3, [r3, #0]
 801cc60:	2b01      	cmp	r3, #1
 801cc62:	d113      	bne.n	801cc8c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801cc64:	490f      	ldr	r1, [pc, #60]	; (801cca4 <etharp_tmr+0x14c>)
 801cc66:	687a      	ldr	r2, [r7, #4]
 801cc68:	4613      	mov	r3, r2
 801cc6a:	005b      	lsls	r3, r3, #1
 801cc6c:	4413      	add	r3, r2
 801cc6e:	00db      	lsls	r3, r3, #3
 801cc70:	440b      	add	r3, r1
 801cc72:	3308      	adds	r3, #8
 801cc74:	6818      	ldr	r0, [r3, #0]
 801cc76:	687a      	ldr	r2, [r7, #4]
 801cc78:	4613      	mov	r3, r2
 801cc7a:	005b      	lsls	r3, r3, #1
 801cc7c:	4413      	add	r3, r2
 801cc7e:	00db      	lsls	r3, r3, #3
 801cc80:	4a08      	ldr	r2, [pc, #32]	; (801cca4 <etharp_tmr+0x14c>)
 801cc82:	4413      	add	r3, r2
 801cc84:	3304      	adds	r3, #4
 801cc86:	4619      	mov	r1, r3
 801cc88:	f000 fe6e 	bl	801d968 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	3301      	adds	r3, #1
 801cc90:	607b      	str	r3, [r7, #4]
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	2b09      	cmp	r3, #9
 801cc96:	f77f af65 	ble.w	801cb64 <etharp_tmr+0xc>
      }
    }
  }
}
 801cc9a:	bf00      	nop
 801cc9c:	bf00      	nop
 801cc9e:	3708      	adds	r7, #8
 801cca0:	46bd      	mov	sp, r7
 801cca2:	bd80      	pop	{r7, pc}
 801cca4:	2000c83c 	.word	0x2000c83c

0801cca8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801cca8:	b580      	push	{r7, lr}
 801ccaa:	b08a      	sub	sp, #40	; 0x28
 801ccac:	af00      	add	r7, sp, #0
 801ccae:	60f8      	str	r0, [r7, #12]
 801ccb0:	460b      	mov	r3, r1
 801ccb2:	607a      	str	r2, [r7, #4]
 801ccb4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ccb6:	230a      	movs	r3, #10
 801ccb8:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ccba:	230a      	movs	r3, #10
 801ccbc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801ccbe:	230a      	movs	r3, #10
 801ccc0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801ccc2:	2300      	movs	r3, #0
 801ccc4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801ccc6:	230a      	movs	r3, #10
 801ccc8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801ccca:	2300      	movs	r3, #0
 801cccc:	83bb      	strh	r3, [r7, #28]
 801ccce:	2300      	movs	r3, #0
 801ccd0:	837b      	strh	r3, [r7, #26]
 801ccd2:	2300      	movs	r3, #0
 801ccd4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ccd6:	2300      	movs	r3, #0
 801ccd8:	843b      	strh	r3, [r7, #32]
 801ccda:	e0ae      	b.n	801ce3a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801ccdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cce0:	49a6      	ldr	r1, [pc, #664]	; (801cf7c <etharp_find_entry+0x2d4>)
 801cce2:	4613      	mov	r3, r2
 801cce4:	005b      	lsls	r3, r3, #1
 801cce6:	4413      	add	r3, r2
 801cce8:	00db      	lsls	r3, r3, #3
 801ccea:	440b      	add	r3, r1
 801ccec:	3314      	adds	r3, #20
 801ccee:	781b      	ldrb	r3, [r3, #0]
 801ccf0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ccf2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ccf6:	2b0a      	cmp	r3, #10
 801ccf8:	d105      	bne.n	801cd06 <etharp_find_entry+0x5e>
 801ccfa:	7dfb      	ldrb	r3, [r7, #23]
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	d102      	bne.n	801cd06 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801cd00:	8c3b      	ldrh	r3, [r7, #32]
 801cd02:	847b      	strh	r3, [r7, #34]	; 0x22
 801cd04:	e095      	b.n	801ce32 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801cd06:	7dfb      	ldrb	r3, [r7, #23]
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	f000 8092 	beq.w	801ce32 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801cd0e:	7dfb      	ldrb	r3, [r7, #23]
 801cd10:	2b01      	cmp	r3, #1
 801cd12:	d009      	beq.n	801cd28 <etharp_find_entry+0x80>
 801cd14:	7dfb      	ldrb	r3, [r7, #23]
 801cd16:	2b01      	cmp	r3, #1
 801cd18:	d806      	bhi.n	801cd28 <etharp_find_entry+0x80>
 801cd1a:	4b99      	ldr	r3, [pc, #612]	; (801cf80 <etharp_find_entry+0x2d8>)
 801cd1c:	f240 1223 	movw	r2, #291	; 0x123
 801cd20:	4998      	ldr	r1, [pc, #608]	; (801cf84 <etharp_find_entry+0x2dc>)
 801cd22:	4899      	ldr	r0, [pc, #612]	; (801cf88 <etharp_find_entry+0x2e0>)
 801cd24:	f002 fb22 	bl	801f36c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801cd28:	68fb      	ldr	r3, [r7, #12]
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	d020      	beq.n	801cd70 <etharp_find_entry+0xc8>
 801cd2e:	68fb      	ldr	r3, [r7, #12]
 801cd30:	6819      	ldr	r1, [r3, #0]
 801cd32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cd36:	4891      	ldr	r0, [pc, #580]	; (801cf7c <etharp_find_entry+0x2d4>)
 801cd38:	4613      	mov	r3, r2
 801cd3a:	005b      	lsls	r3, r3, #1
 801cd3c:	4413      	add	r3, r2
 801cd3e:	00db      	lsls	r3, r3, #3
 801cd40:	4403      	add	r3, r0
 801cd42:	3304      	adds	r3, #4
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	4299      	cmp	r1, r3
 801cd48:	d112      	bne.n	801cd70 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	d00c      	beq.n	801cd6a <etharp_find_entry+0xc2>
 801cd50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cd54:	4989      	ldr	r1, [pc, #548]	; (801cf7c <etharp_find_entry+0x2d4>)
 801cd56:	4613      	mov	r3, r2
 801cd58:	005b      	lsls	r3, r3, #1
 801cd5a:	4413      	add	r3, r2
 801cd5c:	00db      	lsls	r3, r3, #3
 801cd5e:	440b      	add	r3, r1
 801cd60:	3308      	adds	r3, #8
 801cd62:	681b      	ldr	r3, [r3, #0]
 801cd64:	687a      	ldr	r2, [r7, #4]
 801cd66:	429a      	cmp	r2, r3
 801cd68:	d102      	bne.n	801cd70 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801cd6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cd6e:	e100      	b.n	801cf72 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801cd70:	7dfb      	ldrb	r3, [r7, #23]
 801cd72:	2b01      	cmp	r3, #1
 801cd74:	d140      	bne.n	801cdf8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801cd76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cd7a:	4980      	ldr	r1, [pc, #512]	; (801cf7c <etharp_find_entry+0x2d4>)
 801cd7c:	4613      	mov	r3, r2
 801cd7e:	005b      	lsls	r3, r3, #1
 801cd80:	4413      	add	r3, r2
 801cd82:	00db      	lsls	r3, r3, #3
 801cd84:	440b      	add	r3, r1
 801cd86:	681b      	ldr	r3, [r3, #0]
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d01a      	beq.n	801cdc2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801cd8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cd90:	497a      	ldr	r1, [pc, #488]	; (801cf7c <etharp_find_entry+0x2d4>)
 801cd92:	4613      	mov	r3, r2
 801cd94:	005b      	lsls	r3, r3, #1
 801cd96:	4413      	add	r3, r2
 801cd98:	00db      	lsls	r3, r3, #3
 801cd9a:	440b      	add	r3, r1
 801cd9c:	3312      	adds	r3, #18
 801cd9e:	881b      	ldrh	r3, [r3, #0]
 801cda0:	8bba      	ldrh	r2, [r7, #28]
 801cda2:	429a      	cmp	r2, r3
 801cda4:	d845      	bhi.n	801ce32 <etharp_find_entry+0x18a>
            old_queue = i;
 801cda6:	8c3b      	ldrh	r3, [r7, #32]
 801cda8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801cdaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cdae:	4973      	ldr	r1, [pc, #460]	; (801cf7c <etharp_find_entry+0x2d4>)
 801cdb0:	4613      	mov	r3, r2
 801cdb2:	005b      	lsls	r3, r3, #1
 801cdb4:	4413      	add	r3, r2
 801cdb6:	00db      	lsls	r3, r3, #3
 801cdb8:	440b      	add	r3, r1
 801cdba:	3312      	adds	r3, #18
 801cdbc:	881b      	ldrh	r3, [r3, #0]
 801cdbe:	83bb      	strh	r3, [r7, #28]
 801cdc0:	e037      	b.n	801ce32 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801cdc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cdc6:	496d      	ldr	r1, [pc, #436]	; (801cf7c <etharp_find_entry+0x2d4>)
 801cdc8:	4613      	mov	r3, r2
 801cdca:	005b      	lsls	r3, r3, #1
 801cdcc:	4413      	add	r3, r2
 801cdce:	00db      	lsls	r3, r3, #3
 801cdd0:	440b      	add	r3, r1
 801cdd2:	3312      	adds	r3, #18
 801cdd4:	881b      	ldrh	r3, [r3, #0]
 801cdd6:	8b7a      	ldrh	r2, [r7, #26]
 801cdd8:	429a      	cmp	r2, r3
 801cdda:	d82a      	bhi.n	801ce32 <etharp_find_entry+0x18a>
            old_pending = i;
 801cddc:	8c3b      	ldrh	r3, [r7, #32]
 801cdde:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801cde0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cde4:	4965      	ldr	r1, [pc, #404]	; (801cf7c <etharp_find_entry+0x2d4>)
 801cde6:	4613      	mov	r3, r2
 801cde8:	005b      	lsls	r3, r3, #1
 801cdea:	4413      	add	r3, r2
 801cdec:	00db      	lsls	r3, r3, #3
 801cdee:	440b      	add	r3, r1
 801cdf0:	3312      	adds	r3, #18
 801cdf2:	881b      	ldrh	r3, [r3, #0]
 801cdf4:	837b      	strh	r3, [r7, #26]
 801cdf6:	e01c      	b.n	801ce32 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801cdf8:	7dfb      	ldrb	r3, [r7, #23]
 801cdfa:	2b01      	cmp	r3, #1
 801cdfc:	d919      	bls.n	801ce32 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801cdfe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ce02:	495e      	ldr	r1, [pc, #376]	; (801cf7c <etharp_find_entry+0x2d4>)
 801ce04:	4613      	mov	r3, r2
 801ce06:	005b      	lsls	r3, r3, #1
 801ce08:	4413      	add	r3, r2
 801ce0a:	00db      	lsls	r3, r3, #3
 801ce0c:	440b      	add	r3, r1
 801ce0e:	3312      	adds	r3, #18
 801ce10:	881b      	ldrh	r3, [r3, #0]
 801ce12:	8b3a      	ldrh	r2, [r7, #24]
 801ce14:	429a      	cmp	r2, r3
 801ce16:	d80c      	bhi.n	801ce32 <etharp_find_entry+0x18a>
            old_stable = i;
 801ce18:	8c3b      	ldrh	r3, [r7, #32]
 801ce1a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801ce1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ce20:	4956      	ldr	r1, [pc, #344]	; (801cf7c <etharp_find_entry+0x2d4>)
 801ce22:	4613      	mov	r3, r2
 801ce24:	005b      	lsls	r3, r3, #1
 801ce26:	4413      	add	r3, r2
 801ce28:	00db      	lsls	r3, r3, #3
 801ce2a:	440b      	add	r3, r1
 801ce2c:	3312      	adds	r3, #18
 801ce2e:	881b      	ldrh	r3, [r3, #0]
 801ce30:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ce32:	8c3b      	ldrh	r3, [r7, #32]
 801ce34:	3301      	adds	r3, #1
 801ce36:	b29b      	uxth	r3, r3
 801ce38:	843b      	strh	r3, [r7, #32]
 801ce3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ce3e:	2b09      	cmp	r3, #9
 801ce40:	f77f af4c 	ble.w	801ccdc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801ce44:	7afb      	ldrb	r3, [r7, #11]
 801ce46:	f003 0302 	and.w	r3, r3, #2
 801ce4a:	2b00      	cmp	r3, #0
 801ce4c:	d108      	bne.n	801ce60 <etharp_find_entry+0x1b8>
 801ce4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ce52:	2b0a      	cmp	r3, #10
 801ce54:	d107      	bne.n	801ce66 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801ce56:	7afb      	ldrb	r3, [r7, #11]
 801ce58:	f003 0301 	and.w	r3, r3, #1
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	d102      	bne.n	801ce66 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801ce60:	f04f 33ff 	mov.w	r3, #4294967295
 801ce64:	e085      	b.n	801cf72 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801ce66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ce6a:	2b09      	cmp	r3, #9
 801ce6c:	dc02      	bgt.n	801ce74 <etharp_find_entry+0x1cc>
    i = empty;
 801ce6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ce70:	843b      	strh	r3, [r7, #32]
 801ce72:	e039      	b.n	801cee8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801ce74:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801ce78:	2b09      	cmp	r3, #9
 801ce7a:	dc14      	bgt.n	801cea6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801ce7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ce7e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801ce80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ce84:	493d      	ldr	r1, [pc, #244]	; (801cf7c <etharp_find_entry+0x2d4>)
 801ce86:	4613      	mov	r3, r2
 801ce88:	005b      	lsls	r3, r3, #1
 801ce8a:	4413      	add	r3, r2
 801ce8c:	00db      	lsls	r3, r3, #3
 801ce8e:	440b      	add	r3, r1
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d018      	beq.n	801cec8 <etharp_find_entry+0x220>
 801ce96:	4b3a      	ldr	r3, [pc, #232]	; (801cf80 <etharp_find_entry+0x2d8>)
 801ce98:	f240 126d 	movw	r2, #365	; 0x16d
 801ce9c:	493b      	ldr	r1, [pc, #236]	; (801cf8c <etharp_find_entry+0x2e4>)
 801ce9e:	483a      	ldr	r0, [pc, #232]	; (801cf88 <etharp_find_entry+0x2e0>)
 801cea0:	f002 fa64 	bl	801f36c <iprintf>
 801cea4:	e010      	b.n	801cec8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801cea6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ceaa:	2b09      	cmp	r3, #9
 801ceac:	dc02      	bgt.n	801ceb4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801ceae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ceb0:	843b      	strh	r3, [r7, #32]
 801ceb2:	e009      	b.n	801cec8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ceb4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ceb8:	2b09      	cmp	r3, #9
 801ceba:	dc02      	bgt.n	801cec2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801cebc:	8bfb      	ldrh	r3, [r7, #30]
 801cebe:	843b      	strh	r3, [r7, #32]
 801cec0:	e002      	b.n	801cec8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801cec2:	f04f 33ff 	mov.w	r3, #4294967295
 801cec6:	e054      	b.n	801cf72 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801cec8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cecc:	2b09      	cmp	r3, #9
 801cece:	dd06      	ble.n	801cede <etharp_find_entry+0x236>
 801ced0:	4b2b      	ldr	r3, [pc, #172]	; (801cf80 <etharp_find_entry+0x2d8>)
 801ced2:	f240 127f 	movw	r2, #383	; 0x17f
 801ced6:	492e      	ldr	r1, [pc, #184]	; (801cf90 <etharp_find_entry+0x2e8>)
 801ced8:	482b      	ldr	r0, [pc, #172]	; (801cf88 <etharp_find_entry+0x2e0>)
 801ceda:	f002 fa47 	bl	801f36c <iprintf>
    etharp_free_entry(i);
 801cede:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cee2:	4618      	mov	r0, r3
 801cee4:	f7ff fe06 	bl	801caf4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801cee8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ceec:	2b09      	cmp	r3, #9
 801ceee:	dd06      	ble.n	801cefe <etharp_find_entry+0x256>
 801cef0:	4b23      	ldr	r3, [pc, #140]	; (801cf80 <etharp_find_entry+0x2d8>)
 801cef2:	f240 1283 	movw	r2, #387	; 0x183
 801cef6:	4926      	ldr	r1, [pc, #152]	; (801cf90 <etharp_find_entry+0x2e8>)
 801cef8:	4823      	ldr	r0, [pc, #140]	; (801cf88 <etharp_find_entry+0x2e0>)
 801cefa:	f002 fa37 	bl	801f36c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801cefe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cf02:	491e      	ldr	r1, [pc, #120]	; (801cf7c <etharp_find_entry+0x2d4>)
 801cf04:	4613      	mov	r3, r2
 801cf06:	005b      	lsls	r3, r3, #1
 801cf08:	4413      	add	r3, r2
 801cf0a:	00db      	lsls	r3, r3, #3
 801cf0c:	440b      	add	r3, r1
 801cf0e:	3314      	adds	r3, #20
 801cf10:	781b      	ldrb	r3, [r3, #0]
 801cf12:	2b00      	cmp	r3, #0
 801cf14:	d006      	beq.n	801cf24 <etharp_find_entry+0x27c>
 801cf16:	4b1a      	ldr	r3, [pc, #104]	; (801cf80 <etharp_find_entry+0x2d8>)
 801cf18:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801cf1c:	491d      	ldr	r1, [pc, #116]	; (801cf94 <etharp_find_entry+0x2ec>)
 801cf1e:	481a      	ldr	r0, [pc, #104]	; (801cf88 <etharp_find_entry+0x2e0>)
 801cf20:	f002 fa24 	bl	801f36c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801cf24:	68fb      	ldr	r3, [r7, #12]
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d00b      	beq.n	801cf42 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801cf2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	6819      	ldr	r1, [r3, #0]
 801cf32:	4812      	ldr	r0, [pc, #72]	; (801cf7c <etharp_find_entry+0x2d4>)
 801cf34:	4613      	mov	r3, r2
 801cf36:	005b      	lsls	r3, r3, #1
 801cf38:	4413      	add	r3, r2
 801cf3a:	00db      	lsls	r3, r3, #3
 801cf3c:	4403      	add	r3, r0
 801cf3e:	3304      	adds	r3, #4
 801cf40:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801cf42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cf46:	490d      	ldr	r1, [pc, #52]	; (801cf7c <etharp_find_entry+0x2d4>)
 801cf48:	4613      	mov	r3, r2
 801cf4a:	005b      	lsls	r3, r3, #1
 801cf4c:	4413      	add	r3, r2
 801cf4e:	00db      	lsls	r3, r3, #3
 801cf50:	440b      	add	r3, r1
 801cf52:	3312      	adds	r3, #18
 801cf54:	2200      	movs	r2, #0
 801cf56:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801cf58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cf5c:	4907      	ldr	r1, [pc, #28]	; (801cf7c <etharp_find_entry+0x2d4>)
 801cf5e:	4613      	mov	r3, r2
 801cf60:	005b      	lsls	r3, r3, #1
 801cf62:	4413      	add	r3, r2
 801cf64:	00db      	lsls	r3, r3, #3
 801cf66:	440b      	add	r3, r1
 801cf68:	3308      	adds	r3, #8
 801cf6a:	687a      	ldr	r2, [r7, #4]
 801cf6c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801cf6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801cf72:	4618      	mov	r0, r3
 801cf74:	3728      	adds	r7, #40	; 0x28
 801cf76:	46bd      	mov	sp, r7
 801cf78:	bd80      	pop	{r7, pc}
 801cf7a:	bf00      	nop
 801cf7c:	2000c83c 	.word	0x2000c83c
 801cf80:	08023bf4 	.word	0x08023bf4
 801cf84:	08023c2c 	.word	0x08023c2c
 801cf88:	08023c6c 	.word	0x08023c6c
 801cf8c:	08023c94 	.word	0x08023c94
 801cf90:	08023cac 	.word	0x08023cac
 801cf94:	08023cc0 	.word	0x08023cc0

0801cf98 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801cf98:	b580      	push	{r7, lr}
 801cf9a:	b088      	sub	sp, #32
 801cf9c:	af02      	add	r7, sp, #8
 801cf9e:	60f8      	str	r0, [r7, #12]
 801cfa0:	60b9      	str	r1, [r7, #8]
 801cfa2:	607a      	str	r2, [r7, #4]
 801cfa4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801cfa6:	68fb      	ldr	r3, [r7, #12]
 801cfa8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801cfac:	2b06      	cmp	r3, #6
 801cfae:	d006      	beq.n	801cfbe <etharp_update_arp_entry+0x26>
 801cfb0:	4b48      	ldr	r3, [pc, #288]	; (801d0d4 <etharp_update_arp_entry+0x13c>)
 801cfb2:	f240 12a9 	movw	r2, #425	; 0x1a9
 801cfb6:	4948      	ldr	r1, [pc, #288]	; (801d0d8 <etharp_update_arp_entry+0x140>)
 801cfb8:	4848      	ldr	r0, [pc, #288]	; (801d0dc <etharp_update_arp_entry+0x144>)
 801cfba:	f002 f9d7 	bl	801f36c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801cfbe:	68bb      	ldr	r3, [r7, #8]
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d012      	beq.n	801cfea <etharp_update_arp_entry+0x52>
 801cfc4:	68bb      	ldr	r3, [r7, #8]
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d00e      	beq.n	801cfea <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801cfcc:	68bb      	ldr	r3, [r7, #8]
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	68f9      	ldr	r1, [r7, #12]
 801cfd2:	4618      	mov	r0, r3
 801cfd4:	f001 f8fe 	bl	801e1d4 <ip4_addr_isbroadcast_u32>
 801cfd8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d105      	bne.n	801cfea <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801cfde:	68bb      	ldr	r3, [r7, #8]
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801cfe6:	2be0      	cmp	r3, #224	; 0xe0
 801cfe8:	d102      	bne.n	801cff0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801cfea:	f06f 030f 	mvn.w	r3, #15
 801cfee:	e06c      	b.n	801d0ca <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801cff0:	78fb      	ldrb	r3, [r7, #3]
 801cff2:	68fa      	ldr	r2, [r7, #12]
 801cff4:	4619      	mov	r1, r3
 801cff6:	68b8      	ldr	r0, [r7, #8]
 801cff8:	f7ff fe56 	bl	801cca8 <etharp_find_entry>
 801cffc:	4603      	mov	r3, r0
 801cffe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801d000:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d004:	2b00      	cmp	r3, #0
 801d006:	da02      	bge.n	801d00e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801d008:	8afb      	ldrh	r3, [r7, #22]
 801d00a:	b25b      	sxtb	r3, r3
 801d00c:	e05d      	b.n	801d0ca <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d00e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d012:	4933      	ldr	r1, [pc, #204]	; (801d0e0 <etharp_update_arp_entry+0x148>)
 801d014:	4613      	mov	r3, r2
 801d016:	005b      	lsls	r3, r3, #1
 801d018:	4413      	add	r3, r2
 801d01a:	00db      	lsls	r3, r3, #3
 801d01c:	440b      	add	r3, r1
 801d01e:	3314      	adds	r3, #20
 801d020:	2202      	movs	r2, #2
 801d022:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801d024:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d028:	492d      	ldr	r1, [pc, #180]	; (801d0e0 <etharp_update_arp_entry+0x148>)
 801d02a:	4613      	mov	r3, r2
 801d02c:	005b      	lsls	r3, r3, #1
 801d02e:	4413      	add	r3, r2
 801d030:	00db      	lsls	r3, r3, #3
 801d032:	440b      	add	r3, r1
 801d034:	3308      	adds	r3, #8
 801d036:	68fa      	ldr	r2, [r7, #12]
 801d038:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d03a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d03e:	4613      	mov	r3, r2
 801d040:	005b      	lsls	r3, r3, #1
 801d042:	4413      	add	r3, r2
 801d044:	00db      	lsls	r3, r3, #3
 801d046:	3308      	adds	r3, #8
 801d048:	4a25      	ldr	r2, [pc, #148]	; (801d0e0 <etharp_update_arp_entry+0x148>)
 801d04a:	4413      	add	r3, r2
 801d04c:	3304      	adds	r3, #4
 801d04e:	2206      	movs	r2, #6
 801d050:	6879      	ldr	r1, [r7, #4]
 801d052:	4618      	mov	r0, r3
 801d054:	f002 f95a 	bl	801f30c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801d058:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d05c:	4920      	ldr	r1, [pc, #128]	; (801d0e0 <etharp_update_arp_entry+0x148>)
 801d05e:	4613      	mov	r3, r2
 801d060:	005b      	lsls	r3, r3, #1
 801d062:	4413      	add	r3, r2
 801d064:	00db      	lsls	r3, r3, #3
 801d066:	440b      	add	r3, r1
 801d068:	3312      	adds	r3, #18
 801d06a:	2200      	movs	r2, #0
 801d06c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801d06e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d072:	491b      	ldr	r1, [pc, #108]	; (801d0e0 <etharp_update_arp_entry+0x148>)
 801d074:	4613      	mov	r3, r2
 801d076:	005b      	lsls	r3, r3, #1
 801d078:	4413      	add	r3, r2
 801d07a:	00db      	lsls	r3, r3, #3
 801d07c:	440b      	add	r3, r1
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	2b00      	cmp	r3, #0
 801d082:	d021      	beq.n	801d0c8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801d084:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d088:	4915      	ldr	r1, [pc, #84]	; (801d0e0 <etharp_update_arp_entry+0x148>)
 801d08a:	4613      	mov	r3, r2
 801d08c:	005b      	lsls	r3, r3, #1
 801d08e:	4413      	add	r3, r2
 801d090:	00db      	lsls	r3, r3, #3
 801d092:	440b      	add	r3, r1
 801d094:	681b      	ldr	r3, [r3, #0]
 801d096:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801d098:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d09c:	4910      	ldr	r1, [pc, #64]	; (801d0e0 <etharp_update_arp_entry+0x148>)
 801d09e:	4613      	mov	r3, r2
 801d0a0:	005b      	lsls	r3, r3, #1
 801d0a2:	4413      	add	r3, r2
 801d0a4:	00db      	lsls	r3, r3, #3
 801d0a6:	440b      	add	r3, r1
 801d0a8:	2200      	movs	r2, #0
 801d0aa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801d0ac:	68fb      	ldr	r3, [r7, #12]
 801d0ae:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801d0b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d0b6:	9300      	str	r3, [sp, #0]
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	6939      	ldr	r1, [r7, #16]
 801d0bc:	68f8      	ldr	r0, [r7, #12]
 801d0be:	f001 ff91 	bl	801efe4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801d0c2:	6938      	ldr	r0, [r7, #16]
 801d0c4:	f7f8 fef2 	bl	8015eac <pbuf_free>
  }
  return ERR_OK;
 801d0c8:	2300      	movs	r3, #0
}
 801d0ca:	4618      	mov	r0, r3
 801d0cc:	3718      	adds	r7, #24
 801d0ce:	46bd      	mov	sp, r7
 801d0d0:	bd80      	pop	{r7, pc}
 801d0d2:	bf00      	nop
 801d0d4:	08023bf4 	.word	0x08023bf4
 801d0d8:	08023cec 	.word	0x08023cec
 801d0dc:	08023c6c 	.word	0x08023c6c
 801d0e0:	2000c83c 	.word	0x2000c83c

0801d0e4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801d0e4:	b580      	push	{r7, lr}
 801d0e6:	b084      	sub	sp, #16
 801d0e8:	af00      	add	r7, sp, #0
 801d0ea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d0ec:	2300      	movs	r3, #0
 801d0ee:	60fb      	str	r3, [r7, #12]
 801d0f0:	e01e      	b.n	801d130 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801d0f2:	4913      	ldr	r1, [pc, #76]	; (801d140 <etharp_cleanup_netif+0x5c>)
 801d0f4:	68fa      	ldr	r2, [r7, #12]
 801d0f6:	4613      	mov	r3, r2
 801d0f8:	005b      	lsls	r3, r3, #1
 801d0fa:	4413      	add	r3, r2
 801d0fc:	00db      	lsls	r3, r3, #3
 801d0fe:	440b      	add	r3, r1
 801d100:	3314      	adds	r3, #20
 801d102:	781b      	ldrb	r3, [r3, #0]
 801d104:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801d106:	7afb      	ldrb	r3, [r7, #11]
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d00e      	beq.n	801d12a <etharp_cleanup_netif+0x46>
 801d10c:	490c      	ldr	r1, [pc, #48]	; (801d140 <etharp_cleanup_netif+0x5c>)
 801d10e:	68fa      	ldr	r2, [r7, #12]
 801d110:	4613      	mov	r3, r2
 801d112:	005b      	lsls	r3, r3, #1
 801d114:	4413      	add	r3, r2
 801d116:	00db      	lsls	r3, r3, #3
 801d118:	440b      	add	r3, r1
 801d11a:	3308      	adds	r3, #8
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	687a      	ldr	r2, [r7, #4]
 801d120:	429a      	cmp	r2, r3
 801d122:	d102      	bne.n	801d12a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801d124:	68f8      	ldr	r0, [r7, #12]
 801d126:	f7ff fce5 	bl	801caf4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d12a:	68fb      	ldr	r3, [r7, #12]
 801d12c:	3301      	adds	r3, #1
 801d12e:	60fb      	str	r3, [r7, #12]
 801d130:	68fb      	ldr	r3, [r7, #12]
 801d132:	2b09      	cmp	r3, #9
 801d134:	dddd      	ble.n	801d0f2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801d136:	bf00      	nop
 801d138:	bf00      	nop
 801d13a:	3710      	adds	r7, #16
 801d13c:	46bd      	mov	sp, r7
 801d13e:	bd80      	pop	{r7, pc}
 801d140:	2000c83c 	.word	0x2000c83c

0801d144 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801d144:	b5b0      	push	{r4, r5, r7, lr}
 801d146:	b08a      	sub	sp, #40	; 0x28
 801d148:	af04      	add	r7, sp, #16
 801d14a:	6078      	str	r0, [r7, #4]
 801d14c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d14e:	683b      	ldr	r3, [r7, #0]
 801d150:	2b00      	cmp	r3, #0
 801d152:	d107      	bne.n	801d164 <etharp_input+0x20>
 801d154:	4b3d      	ldr	r3, [pc, #244]	; (801d24c <etharp_input+0x108>)
 801d156:	f240 228a 	movw	r2, #650	; 0x28a
 801d15a:	493d      	ldr	r1, [pc, #244]	; (801d250 <etharp_input+0x10c>)
 801d15c:	483d      	ldr	r0, [pc, #244]	; (801d254 <etharp_input+0x110>)
 801d15e:	f002 f905 	bl	801f36c <iprintf>
 801d162:	e06f      	b.n	801d244 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	685b      	ldr	r3, [r3, #4]
 801d168:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d16a:	693b      	ldr	r3, [r7, #16]
 801d16c:	881b      	ldrh	r3, [r3, #0]
 801d16e:	b29b      	uxth	r3, r3
 801d170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d174:	d10c      	bne.n	801d190 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d176:	693b      	ldr	r3, [r7, #16]
 801d178:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d17a:	2b06      	cmp	r3, #6
 801d17c:	d108      	bne.n	801d190 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d17e:	693b      	ldr	r3, [r7, #16]
 801d180:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d182:	2b04      	cmp	r3, #4
 801d184:	d104      	bne.n	801d190 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801d186:	693b      	ldr	r3, [r7, #16]
 801d188:	885b      	ldrh	r3, [r3, #2]
 801d18a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d18c:	2b08      	cmp	r3, #8
 801d18e:	d003      	beq.n	801d198 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801d190:	6878      	ldr	r0, [r7, #4]
 801d192:	f7f8 fe8b 	bl	8015eac <pbuf_free>
    return;
 801d196:	e055      	b.n	801d244 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801d198:	693b      	ldr	r3, [r7, #16]
 801d19a:	330e      	adds	r3, #14
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801d1a0:	693b      	ldr	r3, [r7, #16]
 801d1a2:	3318      	adds	r3, #24
 801d1a4:	681b      	ldr	r3, [r3, #0]
 801d1a6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d1a8:	683b      	ldr	r3, [r7, #0]
 801d1aa:	3304      	adds	r3, #4
 801d1ac:	681b      	ldr	r3, [r3, #0]
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	d102      	bne.n	801d1b8 <etharp_input+0x74>
    for_us = 0;
 801d1b2:	2300      	movs	r3, #0
 801d1b4:	75fb      	strb	r3, [r7, #23]
 801d1b6:	e009      	b.n	801d1cc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801d1b8:	68ba      	ldr	r2, [r7, #8]
 801d1ba:	683b      	ldr	r3, [r7, #0]
 801d1bc:	3304      	adds	r3, #4
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	429a      	cmp	r2, r3
 801d1c2:	bf0c      	ite	eq
 801d1c4:	2301      	moveq	r3, #1
 801d1c6:	2300      	movne	r3, #0
 801d1c8:	b2db      	uxtb	r3, r3
 801d1ca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d1cc:	693b      	ldr	r3, [r7, #16]
 801d1ce:	f103 0208 	add.w	r2, r3, #8
 801d1d2:	7dfb      	ldrb	r3, [r7, #23]
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d001      	beq.n	801d1dc <etharp_input+0x98>
 801d1d8:	2301      	movs	r3, #1
 801d1da:	e000      	b.n	801d1de <etharp_input+0x9a>
 801d1dc:	2302      	movs	r3, #2
 801d1de:	f107 010c 	add.w	r1, r7, #12
 801d1e2:	6838      	ldr	r0, [r7, #0]
 801d1e4:	f7ff fed8 	bl	801cf98 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801d1e8:	693b      	ldr	r3, [r7, #16]
 801d1ea:	88db      	ldrh	r3, [r3, #6]
 801d1ec:	b29b      	uxth	r3, r3
 801d1ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d1f2:	d003      	beq.n	801d1fc <etharp_input+0xb8>
 801d1f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d1f8:	d01e      	beq.n	801d238 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801d1fa:	e020      	b.n	801d23e <etharp_input+0xfa>
      if (for_us) {
 801d1fc:	7dfb      	ldrb	r3, [r7, #23]
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	d01c      	beq.n	801d23c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801d202:	683b      	ldr	r3, [r7, #0]
 801d204:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801d208:	693b      	ldr	r3, [r7, #16]
 801d20a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801d20e:	683b      	ldr	r3, [r7, #0]
 801d210:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801d214:	683b      	ldr	r3, [r7, #0]
 801d216:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801d218:	693a      	ldr	r2, [r7, #16]
 801d21a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801d21c:	2102      	movs	r1, #2
 801d21e:	9103      	str	r1, [sp, #12]
 801d220:	f107 010c 	add.w	r1, r7, #12
 801d224:	9102      	str	r1, [sp, #8]
 801d226:	9201      	str	r2, [sp, #4]
 801d228:	9300      	str	r3, [sp, #0]
 801d22a:	462b      	mov	r3, r5
 801d22c:	4622      	mov	r2, r4
 801d22e:	4601      	mov	r1, r0
 801d230:	6838      	ldr	r0, [r7, #0]
 801d232:	f000 faeb 	bl	801d80c <etharp_raw>
      break;
 801d236:	e001      	b.n	801d23c <etharp_input+0xf8>
      break;
 801d238:	bf00      	nop
 801d23a:	e000      	b.n	801d23e <etharp_input+0xfa>
      break;
 801d23c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801d23e:	6878      	ldr	r0, [r7, #4]
 801d240:	f7f8 fe34 	bl	8015eac <pbuf_free>
}
 801d244:	3718      	adds	r7, #24
 801d246:	46bd      	mov	sp, r7
 801d248:	bdb0      	pop	{r4, r5, r7, pc}
 801d24a:	bf00      	nop
 801d24c:	08023bf4 	.word	0x08023bf4
 801d250:	08023d44 	.word	0x08023d44
 801d254:	08023c6c 	.word	0x08023c6c

0801d258 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801d258:	b580      	push	{r7, lr}
 801d25a:	b086      	sub	sp, #24
 801d25c:	af02      	add	r7, sp, #8
 801d25e:	60f8      	str	r0, [r7, #12]
 801d260:	60b9      	str	r1, [r7, #8]
 801d262:	4613      	mov	r3, r2
 801d264:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d266:	79fa      	ldrb	r2, [r7, #7]
 801d268:	4944      	ldr	r1, [pc, #272]	; (801d37c <etharp_output_to_arp_index+0x124>)
 801d26a:	4613      	mov	r3, r2
 801d26c:	005b      	lsls	r3, r3, #1
 801d26e:	4413      	add	r3, r2
 801d270:	00db      	lsls	r3, r3, #3
 801d272:	440b      	add	r3, r1
 801d274:	3314      	adds	r3, #20
 801d276:	781b      	ldrb	r3, [r3, #0]
 801d278:	2b01      	cmp	r3, #1
 801d27a:	d806      	bhi.n	801d28a <etharp_output_to_arp_index+0x32>
 801d27c:	4b40      	ldr	r3, [pc, #256]	; (801d380 <etharp_output_to_arp_index+0x128>)
 801d27e:	f240 22ee 	movw	r2, #750	; 0x2ee
 801d282:	4940      	ldr	r1, [pc, #256]	; (801d384 <etharp_output_to_arp_index+0x12c>)
 801d284:	4840      	ldr	r0, [pc, #256]	; (801d388 <etharp_output_to_arp_index+0x130>)
 801d286:	f002 f871 	bl	801f36c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801d28a:	79fa      	ldrb	r2, [r7, #7]
 801d28c:	493b      	ldr	r1, [pc, #236]	; (801d37c <etharp_output_to_arp_index+0x124>)
 801d28e:	4613      	mov	r3, r2
 801d290:	005b      	lsls	r3, r3, #1
 801d292:	4413      	add	r3, r2
 801d294:	00db      	lsls	r3, r3, #3
 801d296:	440b      	add	r3, r1
 801d298:	3314      	adds	r3, #20
 801d29a:	781b      	ldrb	r3, [r3, #0]
 801d29c:	2b02      	cmp	r3, #2
 801d29e:	d153      	bne.n	801d348 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801d2a0:	79fa      	ldrb	r2, [r7, #7]
 801d2a2:	4936      	ldr	r1, [pc, #216]	; (801d37c <etharp_output_to_arp_index+0x124>)
 801d2a4:	4613      	mov	r3, r2
 801d2a6:	005b      	lsls	r3, r3, #1
 801d2a8:	4413      	add	r3, r2
 801d2aa:	00db      	lsls	r3, r3, #3
 801d2ac:	440b      	add	r3, r1
 801d2ae:	3312      	adds	r3, #18
 801d2b0:	881b      	ldrh	r3, [r3, #0]
 801d2b2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801d2b6:	d919      	bls.n	801d2ec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d2b8:	79fa      	ldrb	r2, [r7, #7]
 801d2ba:	4613      	mov	r3, r2
 801d2bc:	005b      	lsls	r3, r3, #1
 801d2be:	4413      	add	r3, r2
 801d2c0:	00db      	lsls	r3, r3, #3
 801d2c2:	4a2e      	ldr	r2, [pc, #184]	; (801d37c <etharp_output_to_arp_index+0x124>)
 801d2c4:	4413      	add	r3, r2
 801d2c6:	3304      	adds	r3, #4
 801d2c8:	4619      	mov	r1, r3
 801d2ca:	68f8      	ldr	r0, [r7, #12]
 801d2cc:	f000 fb4c 	bl	801d968 <etharp_request>
 801d2d0:	4603      	mov	r3, r0
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d138      	bne.n	801d348 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d2d6:	79fa      	ldrb	r2, [r7, #7]
 801d2d8:	4928      	ldr	r1, [pc, #160]	; (801d37c <etharp_output_to_arp_index+0x124>)
 801d2da:	4613      	mov	r3, r2
 801d2dc:	005b      	lsls	r3, r3, #1
 801d2de:	4413      	add	r3, r2
 801d2e0:	00db      	lsls	r3, r3, #3
 801d2e2:	440b      	add	r3, r1
 801d2e4:	3314      	adds	r3, #20
 801d2e6:	2203      	movs	r2, #3
 801d2e8:	701a      	strb	r2, [r3, #0]
 801d2ea:	e02d      	b.n	801d348 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801d2ec:	79fa      	ldrb	r2, [r7, #7]
 801d2ee:	4923      	ldr	r1, [pc, #140]	; (801d37c <etharp_output_to_arp_index+0x124>)
 801d2f0:	4613      	mov	r3, r2
 801d2f2:	005b      	lsls	r3, r3, #1
 801d2f4:	4413      	add	r3, r2
 801d2f6:	00db      	lsls	r3, r3, #3
 801d2f8:	440b      	add	r3, r1
 801d2fa:	3312      	adds	r3, #18
 801d2fc:	881b      	ldrh	r3, [r3, #0]
 801d2fe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801d302:	d321      	bcc.n	801d348 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d304:	79fa      	ldrb	r2, [r7, #7]
 801d306:	4613      	mov	r3, r2
 801d308:	005b      	lsls	r3, r3, #1
 801d30a:	4413      	add	r3, r2
 801d30c:	00db      	lsls	r3, r3, #3
 801d30e:	4a1b      	ldr	r2, [pc, #108]	; (801d37c <etharp_output_to_arp_index+0x124>)
 801d310:	4413      	add	r3, r2
 801d312:	1d19      	adds	r1, r3, #4
 801d314:	79fa      	ldrb	r2, [r7, #7]
 801d316:	4613      	mov	r3, r2
 801d318:	005b      	lsls	r3, r3, #1
 801d31a:	4413      	add	r3, r2
 801d31c:	00db      	lsls	r3, r3, #3
 801d31e:	3308      	adds	r3, #8
 801d320:	4a16      	ldr	r2, [pc, #88]	; (801d37c <etharp_output_to_arp_index+0x124>)
 801d322:	4413      	add	r3, r2
 801d324:	3304      	adds	r3, #4
 801d326:	461a      	mov	r2, r3
 801d328:	68f8      	ldr	r0, [r7, #12]
 801d32a:	f000 fafb 	bl	801d924 <etharp_request_dst>
 801d32e:	4603      	mov	r3, r0
 801d330:	2b00      	cmp	r3, #0
 801d332:	d109      	bne.n	801d348 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d334:	79fa      	ldrb	r2, [r7, #7]
 801d336:	4911      	ldr	r1, [pc, #68]	; (801d37c <etharp_output_to_arp_index+0x124>)
 801d338:	4613      	mov	r3, r2
 801d33a:	005b      	lsls	r3, r3, #1
 801d33c:	4413      	add	r3, r2
 801d33e:	00db      	lsls	r3, r3, #3
 801d340:	440b      	add	r3, r1
 801d342:	3314      	adds	r3, #20
 801d344:	2203      	movs	r2, #3
 801d346:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801d348:	68fb      	ldr	r3, [r7, #12]
 801d34a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801d34e:	79fa      	ldrb	r2, [r7, #7]
 801d350:	4613      	mov	r3, r2
 801d352:	005b      	lsls	r3, r3, #1
 801d354:	4413      	add	r3, r2
 801d356:	00db      	lsls	r3, r3, #3
 801d358:	3308      	adds	r3, #8
 801d35a:	4a08      	ldr	r2, [pc, #32]	; (801d37c <etharp_output_to_arp_index+0x124>)
 801d35c:	4413      	add	r3, r2
 801d35e:	3304      	adds	r3, #4
 801d360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d364:	9200      	str	r2, [sp, #0]
 801d366:	460a      	mov	r2, r1
 801d368:	68b9      	ldr	r1, [r7, #8]
 801d36a:	68f8      	ldr	r0, [r7, #12]
 801d36c:	f001 fe3a 	bl	801efe4 <ethernet_output>
 801d370:	4603      	mov	r3, r0
}
 801d372:	4618      	mov	r0, r3
 801d374:	3710      	adds	r7, #16
 801d376:	46bd      	mov	sp, r7
 801d378:	bd80      	pop	{r7, pc}
 801d37a:	bf00      	nop
 801d37c:	2000c83c 	.word	0x2000c83c
 801d380:	08023bf4 	.word	0x08023bf4
 801d384:	08023d64 	.word	0x08023d64
 801d388:	08023c6c 	.word	0x08023c6c

0801d38c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801d38c:	b580      	push	{r7, lr}
 801d38e:	b08a      	sub	sp, #40	; 0x28
 801d390:	af02      	add	r7, sp, #8
 801d392:	60f8      	str	r0, [r7, #12]
 801d394:	60b9      	str	r1, [r7, #8]
 801d396:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d39c:	68fb      	ldr	r3, [r7, #12]
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	d106      	bne.n	801d3b0 <etharp_output+0x24>
 801d3a2:	4b73      	ldr	r3, [pc, #460]	; (801d570 <etharp_output+0x1e4>)
 801d3a4:	f240 321e 	movw	r2, #798	; 0x31e
 801d3a8:	4972      	ldr	r1, [pc, #456]	; (801d574 <etharp_output+0x1e8>)
 801d3aa:	4873      	ldr	r0, [pc, #460]	; (801d578 <etharp_output+0x1ec>)
 801d3ac:	f001 ffde 	bl	801f36c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801d3b0:	68bb      	ldr	r3, [r7, #8]
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	d106      	bne.n	801d3c4 <etharp_output+0x38>
 801d3b6:	4b6e      	ldr	r3, [pc, #440]	; (801d570 <etharp_output+0x1e4>)
 801d3b8:	f240 321f 	movw	r2, #799	; 0x31f
 801d3bc:	496f      	ldr	r1, [pc, #444]	; (801d57c <etharp_output+0x1f0>)
 801d3be:	486e      	ldr	r0, [pc, #440]	; (801d578 <etharp_output+0x1ec>)
 801d3c0:	f001 ffd4 	bl	801f36c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d106      	bne.n	801d3d8 <etharp_output+0x4c>
 801d3ca:	4b69      	ldr	r3, [pc, #420]	; (801d570 <etharp_output+0x1e4>)
 801d3cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 801d3d0:	496b      	ldr	r1, [pc, #428]	; (801d580 <etharp_output+0x1f4>)
 801d3d2:	4869      	ldr	r0, [pc, #420]	; (801d578 <etharp_output+0x1ec>)
 801d3d4:	f001 ffca 	bl	801f36c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	681b      	ldr	r3, [r3, #0]
 801d3dc:	68f9      	ldr	r1, [r7, #12]
 801d3de:	4618      	mov	r0, r3
 801d3e0:	f000 fef8 	bl	801e1d4 <ip4_addr_isbroadcast_u32>
 801d3e4:	4603      	mov	r3, r0
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	d002      	beq.n	801d3f0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801d3ea:	4b66      	ldr	r3, [pc, #408]	; (801d584 <etharp_output+0x1f8>)
 801d3ec:	61fb      	str	r3, [r7, #28]
 801d3ee:	e0af      	b.n	801d550 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d3f8:	2be0      	cmp	r3, #224	; 0xe0
 801d3fa:	d118      	bne.n	801d42e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801d3fc:	2301      	movs	r3, #1
 801d3fe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801d400:	2300      	movs	r3, #0
 801d402:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801d404:	235e      	movs	r3, #94	; 0x5e
 801d406:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	3301      	adds	r3, #1
 801d40c:	781b      	ldrb	r3, [r3, #0]
 801d40e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d412:	b2db      	uxtb	r3, r3
 801d414:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	3302      	adds	r3, #2
 801d41a:	781b      	ldrb	r3, [r3, #0]
 801d41c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	3303      	adds	r3, #3
 801d422:	781b      	ldrb	r3, [r3, #0]
 801d424:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801d426:	f107 0310 	add.w	r3, r7, #16
 801d42a:	61fb      	str	r3, [r7, #28]
 801d42c:	e090      	b.n	801d550 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	681a      	ldr	r2, [r3, #0]
 801d432:	68fb      	ldr	r3, [r7, #12]
 801d434:	3304      	adds	r3, #4
 801d436:	681b      	ldr	r3, [r3, #0]
 801d438:	405a      	eors	r2, r3
 801d43a:	68fb      	ldr	r3, [r7, #12]
 801d43c:	3308      	adds	r3, #8
 801d43e:	681b      	ldr	r3, [r3, #0]
 801d440:	4013      	ands	r3, r2
 801d442:	2b00      	cmp	r3, #0
 801d444:	d012      	beq.n	801d46c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d44c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801d450:	4293      	cmp	r3, r2
 801d452:	d00b      	beq.n	801d46c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801d454:	68fb      	ldr	r3, [r7, #12]
 801d456:	330c      	adds	r3, #12
 801d458:	681b      	ldr	r3, [r3, #0]
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d003      	beq.n	801d466 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801d45e:	68fb      	ldr	r3, [r7, #12]
 801d460:	330c      	adds	r3, #12
 801d462:	61bb      	str	r3, [r7, #24]
 801d464:	e002      	b.n	801d46c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801d466:	f06f 0303 	mvn.w	r3, #3
 801d46a:	e07d      	b.n	801d568 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d46c:	4b46      	ldr	r3, [pc, #280]	; (801d588 <etharp_output+0x1fc>)
 801d46e:	781b      	ldrb	r3, [r3, #0]
 801d470:	4619      	mov	r1, r3
 801d472:	4a46      	ldr	r2, [pc, #280]	; (801d58c <etharp_output+0x200>)
 801d474:	460b      	mov	r3, r1
 801d476:	005b      	lsls	r3, r3, #1
 801d478:	440b      	add	r3, r1
 801d47a:	00db      	lsls	r3, r3, #3
 801d47c:	4413      	add	r3, r2
 801d47e:	3314      	adds	r3, #20
 801d480:	781b      	ldrb	r3, [r3, #0]
 801d482:	2b01      	cmp	r3, #1
 801d484:	d925      	bls.n	801d4d2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d486:	4b40      	ldr	r3, [pc, #256]	; (801d588 <etharp_output+0x1fc>)
 801d488:	781b      	ldrb	r3, [r3, #0]
 801d48a:	4619      	mov	r1, r3
 801d48c:	4a3f      	ldr	r2, [pc, #252]	; (801d58c <etharp_output+0x200>)
 801d48e:	460b      	mov	r3, r1
 801d490:	005b      	lsls	r3, r3, #1
 801d492:	440b      	add	r3, r1
 801d494:	00db      	lsls	r3, r3, #3
 801d496:	4413      	add	r3, r2
 801d498:	3308      	adds	r3, #8
 801d49a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d49c:	68fa      	ldr	r2, [r7, #12]
 801d49e:	429a      	cmp	r2, r3
 801d4a0:	d117      	bne.n	801d4d2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801d4a2:	69bb      	ldr	r3, [r7, #24]
 801d4a4:	681a      	ldr	r2, [r3, #0]
 801d4a6:	4b38      	ldr	r3, [pc, #224]	; (801d588 <etharp_output+0x1fc>)
 801d4a8:	781b      	ldrb	r3, [r3, #0]
 801d4aa:	4618      	mov	r0, r3
 801d4ac:	4937      	ldr	r1, [pc, #220]	; (801d58c <etharp_output+0x200>)
 801d4ae:	4603      	mov	r3, r0
 801d4b0:	005b      	lsls	r3, r3, #1
 801d4b2:	4403      	add	r3, r0
 801d4b4:	00db      	lsls	r3, r3, #3
 801d4b6:	440b      	add	r3, r1
 801d4b8:	3304      	adds	r3, #4
 801d4ba:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d4bc:	429a      	cmp	r2, r3
 801d4be:	d108      	bne.n	801d4d2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801d4c0:	4b31      	ldr	r3, [pc, #196]	; (801d588 <etharp_output+0x1fc>)
 801d4c2:	781b      	ldrb	r3, [r3, #0]
 801d4c4:	461a      	mov	r2, r3
 801d4c6:	68b9      	ldr	r1, [r7, #8]
 801d4c8:	68f8      	ldr	r0, [r7, #12]
 801d4ca:	f7ff fec5 	bl	801d258 <etharp_output_to_arp_index>
 801d4ce:	4603      	mov	r3, r0
 801d4d0:	e04a      	b.n	801d568 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	75fb      	strb	r3, [r7, #23]
 801d4d6:	e031      	b.n	801d53c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d4d8:	7dfa      	ldrb	r2, [r7, #23]
 801d4da:	492c      	ldr	r1, [pc, #176]	; (801d58c <etharp_output+0x200>)
 801d4dc:	4613      	mov	r3, r2
 801d4de:	005b      	lsls	r3, r3, #1
 801d4e0:	4413      	add	r3, r2
 801d4e2:	00db      	lsls	r3, r3, #3
 801d4e4:	440b      	add	r3, r1
 801d4e6:	3314      	adds	r3, #20
 801d4e8:	781b      	ldrb	r3, [r3, #0]
 801d4ea:	2b01      	cmp	r3, #1
 801d4ec:	d923      	bls.n	801d536 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801d4ee:	7dfa      	ldrb	r2, [r7, #23]
 801d4f0:	4926      	ldr	r1, [pc, #152]	; (801d58c <etharp_output+0x200>)
 801d4f2:	4613      	mov	r3, r2
 801d4f4:	005b      	lsls	r3, r3, #1
 801d4f6:	4413      	add	r3, r2
 801d4f8:	00db      	lsls	r3, r3, #3
 801d4fa:	440b      	add	r3, r1
 801d4fc:	3308      	adds	r3, #8
 801d4fe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d500:	68fa      	ldr	r2, [r7, #12]
 801d502:	429a      	cmp	r2, r3
 801d504:	d117      	bne.n	801d536 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801d506:	69bb      	ldr	r3, [r7, #24]
 801d508:	6819      	ldr	r1, [r3, #0]
 801d50a:	7dfa      	ldrb	r2, [r7, #23]
 801d50c:	481f      	ldr	r0, [pc, #124]	; (801d58c <etharp_output+0x200>)
 801d50e:	4613      	mov	r3, r2
 801d510:	005b      	lsls	r3, r3, #1
 801d512:	4413      	add	r3, r2
 801d514:	00db      	lsls	r3, r3, #3
 801d516:	4403      	add	r3, r0
 801d518:	3304      	adds	r3, #4
 801d51a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801d51c:	4299      	cmp	r1, r3
 801d51e:	d10a      	bne.n	801d536 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801d520:	4a19      	ldr	r2, [pc, #100]	; (801d588 <etharp_output+0x1fc>)
 801d522:	7dfb      	ldrb	r3, [r7, #23]
 801d524:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801d526:	7dfb      	ldrb	r3, [r7, #23]
 801d528:	461a      	mov	r2, r3
 801d52a:	68b9      	ldr	r1, [r7, #8]
 801d52c:	68f8      	ldr	r0, [r7, #12]
 801d52e:	f7ff fe93 	bl	801d258 <etharp_output_to_arp_index>
 801d532:	4603      	mov	r3, r0
 801d534:	e018      	b.n	801d568 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d536:	7dfb      	ldrb	r3, [r7, #23]
 801d538:	3301      	adds	r3, #1
 801d53a:	75fb      	strb	r3, [r7, #23]
 801d53c:	7dfb      	ldrb	r3, [r7, #23]
 801d53e:	2b09      	cmp	r3, #9
 801d540:	d9ca      	bls.n	801d4d8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801d542:	68ba      	ldr	r2, [r7, #8]
 801d544:	69b9      	ldr	r1, [r7, #24]
 801d546:	68f8      	ldr	r0, [r7, #12]
 801d548:	f000 f822 	bl	801d590 <etharp_query>
 801d54c:	4603      	mov	r3, r0
 801d54e:	e00b      	b.n	801d568 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801d550:	68fb      	ldr	r3, [r7, #12]
 801d552:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801d556:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d55a:	9300      	str	r3, [sp, #0]
 801d55c:	69fb      	ldr	r3, [r7, #28]
 801d55e:	68b9      	ldr	r1, [r7, #8]
 801d560:	68f8      	ldr	r0, [r7, #12]
 801d562:	f001 fd3f 	bl	801efe4 <ethernet_output>
 801d566:	4603      	mov	r3, r0
}
 801d568:	4618      	mov	r0, r3
 801d56a:	3720      	adds	r7, #32
 801d56c:	46bd      	mov	sp, r7
 801d56e:	bd80      	pop	{r7, pc}
 801d570:	08023bf4 	.word	0x08023bf4
 801d574:	08023d44 	.word	0x08023d44
 801d578:	08023c6c 	.word	0x08023c6c
 801d57c:	08023d94 	.word	0x08023d94
 801d580:	08023d34 	.word	0x08023d34
 801d584:	0807b0fc 	.word	0x0807b0fc
 801d588:	2000c92c 	.word	0x2000c92c
 801d58c:	2000c83c 	.word	0x2000c83c

0801d590 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801d590:	b580      	push	{r7, lr}
 801d592:	b08c      	sub	sp, #48	; 0x30
 801d594:	af02      	add	r7, sp, #8
 801d596:	60f8      	str	r0, [r7, #12]
 801d598:	60b9      	str	r1, [r7, #8]
 801d59a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	3326      	adds	r3, #38	; 0x26
 801d5a0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801d5a2:	23ff      	movs	r3, #255	; 0xff
 801d5a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801d5a8:	2300      	movs	r3, #0
 801d5aa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d5ac:	68bb      	ldr	r3, [r7, #8]
 801d5ae:	681b      	ldr	r3, [r3, #0]
 801d5b0:	68f9      	ldr	r1, [r7, #12]
 801d5b2:	4618      	mov	r0, r3
 801d5b4:	f000 fe0e 	bl	801e1d4 <ip4_addr_isbroadcast_u32>
 801d5b8:	4603      	mov	r3, r0
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d10c      	bne.n	801d5d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d5be:	68bb      	ldr	r3, [r7, #8]
 801d5c0:	681b      	ldr	r3, [r3, #0]
 801d5c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d5c6:	2be0      	cmp	r3, #224	; 0xe0
 801d5c8:	d006      	beq.n	801d5d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d5ca:	68bb      	ldr	r3, [r7, #8]
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	d003      	beq.n	801d5d8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801d5d0:	68bb      	ldr	r3, [r7, #8]
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	d102      	bne.n	801d5de <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d5d8:	f06f 030f 	mvn.w	r3, #15
 801d5dc:	e101      	b.n	801d7e2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801d5de:	68fa      	ldr	r2, [r7, #12]
 801d5e0:	2101      	movs	r1, #1
 801d5e2:	68b8      	ldr	r0, [r7, #8]
 801d5e4:	f7ff fb60 	bl	801cca8 <etharp_find_entry>
 801d5e8:	4603      	mov	r3, r0
 801d5ea:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801d5ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	da02      	bge.n	801d5fa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801d5f4:	8a7b      	ldrh	r3, [r7, #18]
 801d5f6:	b25b      	sxtb	r3, r3
 801d5f8:	e0f3      	b.n	801d7e2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801d5fa:	8a7b      	ldrh	r3, [r7, #18]
 801d5fc:	2b7e      	cmp	r3, #126	; 0x7e
 801d5fe:	d906      	bls.n	801d60e <etharp_query+0x7e>
 801d600:	4b7a      	ldr	r3, [pc, #488]	; (801d7ec <etharp_query+0x25c>)
 801d602:	f240 32c1 	movw	r2, #961	; 0x3c1
 801d606:	497a      	ldr	r1, [pc, #488]	; (801d7f0 <etharp_query+0x260>)
 801d608:	487a      	ldr	r0, [pc, #488]	; (801d7f4 <etharp_query+0x264>)
 801d60a:	f001 feaf 	bl	801f36c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801d60e:	8a7b      	ldrh	r3, [r7, #18]
 801d610:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801d612:	7c7a      	ldrb	r2, [r7, #17]
 801d614:	4978      	ldr	r1, [pc, #480]	; (801d7f8 <etharp_query+0x268>)
 801d616:	4613      	mov	r3, r2
 801d618:	005b      	lsls	r3, r3, #1
 801d61a:	4413      	add	r3, r2
 801d61c:	00db      	lsls	r3, r3, #3
 801d61e:	440b      	add	r3, r1
 801d620:	3314      	adds	r3, #20
 801d622:	781b      	ldrb	r3, [r3, #0]
 801d624:	2b00      	cmp	r3, #0
 801d626:	d115      	bne.n	801d654 <etharp_query+0xc4>
    is_new_entry = 1;
 801d628:	2301      	movs	r3, #1
 801d62a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801d62c:	7c7a      	ldrb	r2, [r7, #17]
 801d62e:	4972      	ldr	r1, [pc, #456]	; (801d7f8 <etharp_query+0x268>)
 801d630:	4613      	mov	r3, r2
 801d632:	005b      	lsls	r3, r3, #1
 801d634:	4413      	add	r3, r2
 801d636:	00db      	lsls	r3, r3, #3
 801d638:	440b      	add	r3, r1
 801d63a:	3314      	adds	r3, #20
 801d63c:	2201      	movs	r2, #1
 801d63e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801d640:	7c7a      	ldrb	r2, [r7, #17]
 801d642:	496d      	ldr	r1, [pc, #436]	; (801d7f8 <etharp_query+0x268>)
 801d644:	4613      	mov	r3, r2
 801d646:	005b      	lsls	r3, r3, #1
 801d648:	4413      	add	r3, r2
 801d64a:	00db      	lsls	r3, r3, #3
 801d64c:	440b      	add	r3, r1
 801d64e:	3308      	adds	r3, #8
 801d650:	68fa      	ldr	r2, [r7, #12]
 801d652:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801d654:	7c7a      	ldrb	r2, [r7, #17]
 801d656:	4968      	ldr	r1, [pc, #416]	; (801d7f8 <etharp_query+0x268>)
 801d658:	4613      	mov	r3, r2
 801d65a:	005b      	lsls	r3, r3, #1
 801d65c:	4413      	add	r3, r2
 801d65e:	00db      	lsls	r3, r3, #3
 801d660:	440b      	add	r3, r1
 801d662:	3314      	adds	r3, #20
 801d664:	781b      	ldrb	r3, [r3, #0]
 801d666:	2b01      	cmp	r3, #1
 801d668:	d011      	beq.n	801d68e <etharp_query+0xfe>
 801d66a:	7c7a      	ldrb	r2, [r7, #17]
 801d66c:	4962      	ldr	r1, [pc, #392]	; (801d7f8 <etharp_query+0x268>)
 801d66e:	4613      	mov	r3, r2
 801d670:	005b      	lsls	r3, r3, #1
 801d672:	4413      	add	r3, r2
 801d674:	00db      	lsls	r3, r3, #3
 801d676:	440b      	add	r3, r1
 801d678:	3314      	adds	r3, #20
 801d67a:	781b      	ldrb	r3, [r3, #0]
 801d67c:	2b01      	cmp	r3, #1
 801d67e:	d806      	bhi.n	801d68e <etharp_query+0xfe>
 801d680:	4b5a      	ldr	r3, [pc, #360]	; (801d7ec <etharp_query+0x25c>)
 801d682:	f240 32cd 	movw	r2, #973	; 0x3cd
 801d686:	495d      	ldr	r1, [pc, #372]	; (801d7fc <etharp_query+0x26c>)
 801d688:	485a      	ldr	r0, [pc, #360]	; (801d7f4 <etharp_query+0x264>)
 801d68a:	f001 fe6f 	bl	801f36c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801d68e:	6a3b      	ldr	r3, [r7, #32]
 801d690:	2b00      	cmp	r3, #0
 801d692:	d102      	bne.n	801d69a <etharp_query+0x10a>
 801d694:	687b      	ldr	r3, [r7, #4]
 801d696:	2b00      	cmp	r3, #0
 801d698:	d10c      	bne.n	801d6b4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801d69a:	68b9      	ldr	r1, [r7, #8]
 801d69c:	68f8      	ldr	r0, [r7, #12]
 801d69e:	f000 f963 	bl	801d968 <etharp_request>
 801d6a2:	4603      	mov	r3, r0
 801d6a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d102      	bne.n	801d6b4 <etharp_query+0x124>
      return result;
 801d6ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801d6b2:	e096      	b.n	801d7e2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	d106      	bne.n	801d6c8 <etharp_query+0x138>
 801d6ba:	4b4c      	ldr	r3, [pc, #304]	; (801d7ec <etharp_query+0x25c>)
 801d6bc:	f240 32e1 	movw	r2, #993	; 0x3e1
 801d6c0:	494f      	ldr	r1, [pc, #316]	; (801d800 <etharp_query+0x270>)
 801d6c2:	484c      	ldr	r0, [pc, #304]	; (801d7f4 <etharp_query+0x264>)
 801d6c4:	f001 fe52 	bl	801f36c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801d6c8:	7c7a      	ldrb	r2, [r7, #17]
 801d6ca:	494b      	ldr	r1, [pc, #300]	; (801d7f8 <etharp_query+0x268>)
 801d6cc:	4613      	mov	r3, r2
 801d6ce:	005b      	lsls	r3, r3, #1
 801d6d0:	4413      	add	r3, r2
 801d6d2:	00db      	lsls	r3, r3, #3
 801d6d4:	440b      	add	r3, r1
 801d6d6:	3314      	adds	r3, #20
 801d6d8:	781b      	ldrb	r3, [r3, #0]
 801d6da:	2b01      	cmp	r3, #1
 801d6dc:	d917      	bls.n	801d70e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801d6de:	4a49      	ldr	r2, [pc, #292]	; (801d804 <etharp_query+0x274>)
 801d6e0:	7c7b      	ldrb	r3, [r7, #17]
 801d6e2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d6e4:	7c7a      	ldrb	r2, [r7, #17]
 801d6e6:	4613      	mov	r3, r2
 801d6e8:	005b      	lsls	r3, r3, #1
 801d6ea:	4413      	add	r3, r2
 801d6ec:	00db      	lsls	r3, r3, #3
 801d6ee:	3308      	adds	r3, #8
 801d6f0:	4a41      	ldr	r2, [pc, #260]	; (801d7f8 <etharp_query+0x268>)
 801d6f2:	4413      	add	r3, r2
 801d6f4:	3304      	adds	r3, #4
 801d6f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d6fa:	9200      	str	r2, [sp, #0]
 801d6fc:	697a      	ldr	r2, [r7, #20]
 801d6fe:	6879      	ldr	r1, [r7, #4]
 801d700:	68f8      	ldr	r0, [r7, #12]
 801d702:	f001 fc6f 	bl	801efe4 <ethernet_output>
 801d706:	4603      	mov	r3, r0
 801d708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d70c:	e067      	b.n	801d7de <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d70e:	7c7a      	ldrb	r2, [r7, #17]
 801d710:	4939      	ldr	r1, [pc, #228]	; (801d7f8 <etharp_query+0x268>)
 801d712:	4613      	mov	r3, r2
 801d714:	005b      	lsls	r3, r3, #1
 801d716:	4413      	add	r3, r2
 801d718:	00db      	lsls	r3, r3, #3
 801d71a:	440b      	add	r3, r1
 801d71c:	3314      	adds	r3, #20
 801d71e:	781b      	ldrb	r3, [r3, #0]
 801d720:	2b01      	cmp	r3, #1
 801d722:	d15c      	bne.n	801d7de <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801d724:	2300      	movs	r3, #0
 801d726:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d72c:	e01c      	b.n	801d768 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801d72e:	69fb      	ldr	r3, [r7, #28]
 801d730:	895a      	ldrh	r2, [r3, #10]
 801d732:	69fb      	ldr	r3, [r7, #28]
 801d734:	891b      	ldrh	r3, [r3, #8]
 801d736:	429a      	cmp	r2, r3
 801d738:	d10a      	bne.n	801d750 <etharp_query+0x1c0>
 801d73a:	69fb      	ldr	r3, [r7, #28]
 801d73c:	681b      	ldr	r3, [r3, #0]
 801d73e:	2b00      	cmp	r3, #0
 801d740:	d006      	beq.n	801d750 <etharp_query+0x1c0>
 801d742:	4b2a      	ldr	r3, [pc, #168]	; (801d7ec <etharp_query+0x25c>)
 801d744:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801d748:	492f      	ldr	r1, [pc, #188]	; (801d808 <etharp_query+0x278>)
 801d74a:	482a      	ldr	r0, [pc, #168]	; (801d7f4 <etharp_query+0x264>)
 801d74c:	f001 fe0e 	bl	801f36c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801d750:	69fb      	ldr	r3, [r7, #28]
 801d752:	7b1b      	ldrb	r3, [r3, #12]
 801d754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d758:	2b00      	cmp	r3, #0
 801d75a:	d002      	beq.n	801d762 <etharp_query+0x1d2>
        copy_needed = 1;
 801d75c:	2301      	movs	r3, #1
 801d75e:	61bb      	str	r3, [r7, #24]
        break;
 801d760:	e005      	b.n	801d76e <etharp_query+0x1de>
      }
      p = p->next;
 801d762:	69fb      	ldr	r3, [r7, #28]
 801d764:	681b      	ldr	r3, [r3, #0]
 801d766:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d768:	69fb      	ldr	r3, [r7, #28]
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	d1df      	bne.n	801d72e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801d76e:	69bb      	ldr	r3, [r7, #24]
 801d770:	2b00      	cmp	r3, #0
 801d772:	d007      	beq.n	801d784 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801d774:	687a      	ldr	r2, [r7, #4]
 801d776:	f44f 7120 	mov.w	r1, #640	; 0x280
 801d77a:	200e      	movs	r0, #14
 801d77c:	f7f8 fdfe 	bl	801637c <pbuf_clone>
 801d780:	61f8      	str	r0, [r7, #28]
 801d782:	e004      	b.n	801d78e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801d788:	69f8      	ldr	r0, [r7, #28]
 801d78a:	f7f8 fc35 	bl	8015ff8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801d78e:	69fb      	ldr	r3, [r7, #28]
 801d790:	2b00      	cmp	r3, #0
 801d792:	d021      	beq.n	801d7d8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801d794:	7c7a      	ldrb	r2, [r7, #17]
 801d796:	4918      	ldr	r1, [pc, #96]	; (801d7f8 <etharp_query+0x268>)
 801d798:	4613      	mov	r3, r2
 801d79a:	005b      	lsls	r3, r3, #1
 801d79c:	4413      	add	r3, r2
 801d79e:	00db      	lsls	r3, r3, #3
 801d7a0:	440b      	add	r3, r1
 801d7a2:	681b      	ldr	r3, [r3, #0]
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	d00a      	beq.n	801d7be <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801d7a8:	7c7a      	ldrb	r2, [r7, #17]
 801d7aa:	4913      	ldr	r1, [pc, #76]	; (801d7f8 <etharp_query+0x268>)
 801d7ac:	4613      	mov	r3, r2
 801d7ae:	005b      	lsls	r3, r3, #1
 801d7b0:	4413      	add	r3, r2
 801d7b2:	00db      	lsls	r3, r3, #3
 801d7b4:	440b      	add	r3, r1
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	4618      	mov	r0, r3
 801d7ba:	f7f8 fb77 	bl	8015eac <pbuf_free>
      }
      arp_table[i].q = p;
 801d7be:	7c7a      	ldrb	r2, [r7, #17]
 801d7c0:	490d      	ldr	r1, [pc, #52]	; (801d7f8 <etharp_query+0x268>)
 801d7c2:	4613      	mov	r3, r2
 801d7c4:	005b      	lsls	r3, r3, #1
 801d7c6:	4413      	add	r3, r2
 801d7c8:	00db      	lsls	r3, r3, #3
 801d7ca:	440b      	add	r3, r1
 801d7cc:	69fa      	ldr	r2, [r7, #28]
 801d7ce:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801d7d0:	2300      	movs	r3, #0
 801d7d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d7d6:	e002      	b.n	801d7de <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801d7d8:	23ff      	movs	r3, #255	; 0xff
 801d7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801d7de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801d7e2:	4618      	mov	r0, r3
 801d7e4:	3728      	adds	r7, #40	; 0x28
 801d7e6:	46bd      	mov	sp, r7
 801d7e8:	bd80      	pop	{r7, pc}
 801d7ea:	bf00      	nop
 801d7ec:	08023bf4 	.word	0x08023bf4
 801d7f0:	08023da0 	.word	0x08023da0
 801d7f4:	08023c6c 	.word	0x08023c6c
 801d7f8:	2000c83c 	.word	0x2000c83c
 801d7fc:	08023db0 	.word	0x08023db0
 801d800:	08023d94 	.word	0x08023d94
 801d804:	2000c92c 	.word	0x2000c92c
 801d808:	08023dd8 	.word	0x08023dd8

0801d80c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d80c:	b580      	push	{r7, lr}
 801d80e:	b08a      	sub	sp, #40	; 0x28
 801d810:	af02      	add	r7, sp, #8
 801d812:	60f8      	str	r0, [r7, #12]
 801d814:	60b9      	str	r1, [r7, #8]
 801d816:	607a      	str	r2, [r7, #4]
 801d818:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801d81a:	2300      	movs	r3, #0
 801d81c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d81e:	68fb      	ldr	r3, [r7, #12]
 801d820:	2b00      	cmp	r3, #0
 801d822:	d106      	bne.n	801d832 <etharp_raw+0x26>
 801d824:	4b3a      	ldr	r3, [pc, #232]	; (801d910 <etharp_raw+0x104>)
 801d826:	f240 4257 	movw	r2, #1111	; 0x457
 801d82a:	493a      	ldr	r1, [pc, #232]	; (801d914 <etharp_raw+0x108>)
 801d82c:	483a      	ldr	r0, [pc, #232]	; (801d918 <etharp_raw+0x10c>)
 801d82e:	f001 fd9d 	bl	801f36c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d832:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d836:	211c      	movs	r1, #28
 801d838:	200e      	movs	r0, #14
 801d83a:	f7f8 f841 	bl	80158c0 <pbuf_alloc>
 801d83e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d840:	69bb      	ldr	r3, [r7, #24]
 801d842:	2b00      	cmp	r3, #0
 801d844:	d102      	bne.n	801d84c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801d846:	f04f 33ff 	mov.w	r3, #4294967295
 801d84a:	e05d      	b.n	801d908 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d84c:	69bb      	ldr	r3, [r7, #24]
 801d84e:	895b      	ldrh	r3, [r3, #10]
 801d850:	2b1b      	cmp	r3, #27
 801d852:	d806      	bhi.n	801d862 <etharp_raw+0x56>
 801d854:	4b2e      	ldr	r3, [pc, #184]	; (801d910 <etharp_raw+0x104>)
 801d856:	f240 4262 	movw	r2, #1122	; 0x462
 801d85a:	4930      	ldr	r1, [pc, #192]	; (801d91c <etharp_raw+0x110>)
 801d85c:	482e      	ldr	r0, [pc, #184]	; (801d918 <etharp_raw+0x10c>)
 801d85e:	f001 fd85 	bl	801f36c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d862:	69bb      	ldr	r3, [r7, #24]
 801d864:	685b      	ldr	r3, [r3, #4]
 801d866:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d868:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801d86a:	4618      	mov	r0, r3
 801d86c:	f7f6 ff2a 	bl	80146c4 <lwip_htons>
 801d870:	4603      	mov	r3, r0
 801d872:	461a      	mov	r2, r3
 801d874:	697b      	ldr	r3, [r7, #20]
 801d876:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d878:	68fb      	ldr	r3, [r7, #12]
 801d87a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d87e:	2b06      	cmp	r3, #6
 801d880:	d006      	beq.n	801d890 <etharp_raw+0x84>
 801d882:	4b23      	ldr	r3, [pc, #140]	; (801d910 <etharp_raw+0x104>)
 801d884:	f240 4269 	movw	r2, #1129	; 0x469
 801d888:	4925      	ldr	r1, [pc, #148]	; (801d920 <etharp_raw+0x114>)
 801d88a:	4823      	ldr	r0, [pc, #140]	; (801d918 <etharp_raw+0x10c>)
 801d88c:	f001 fd6e 	bl	801f36c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d890:	697b      	ldr	r3, [r7, #20]
 801d892:	3308      	adds	r3, #8
 801d894:	2206      	movs	r2, #6
 801d896:	6839      	ldr	r1, [r7, #0]
 801d898:	4618      	mov	r0, r3
 801d89a:	f001 fd37 	bl	801f30c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d89e:	697b      	ldr	r3, [r7, #20]
 801d8a0:	3312      	adds	r3, #18
 801d8a2:	2206      	movs	r2, #6
 801d8a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d8a6:	4618      	mov	r0, r3
 801d8a8:	f001 fd30 	bl	801f30c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801d8ac:	697b      	ldr	r3, [r7, #20]
 801d8ae:	330e      	adds	r3, #14
 801d8b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d8b2:	6812      	ldr	r2, [r2, #0]
 801d8b4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d8b6:	697b      	ldr	r3, [r7, #20]
 801d8b8:	3318      	adds	r3, #24
 801d8ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d8bc:	6812      	ldr	r2, [r2, #0]
 801d8be:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d8c0:	697b      	ldr	r3, [r7, #20]
 801d8c2:	2200      	movs	r2, #0
 801d8c4:	701a      	strb	r2, [r3, #0]
 801d8c6:	2200      	movs	r2, #0
 801d8c8:	f042 0201 	orr.w	r2, r2, #1
 801d8cc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d8ce:	697b      	ldr	r3, [r7, #20]
 801d8d0:	2200      	movs	r2, #0
 801d8d2:	f042 0208 	orr.w	r2, r2, #8
 801d8d6:	709a      	strb	r2, [r3, #2]
 801d8d8:	2200      	movs	r2, #0
 801d8da:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801d8dc:	697b      	ldr	r3, [r7, #20]
 801d8de:	2206      	movs	r2, #6
 801d8e0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801d8e2:	697b      	ldr	r3, [r7, #20]
 801d8e4:	2204      	movs	r2, #4
 801d8e6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d8e8:	f640 0306 	movw	r3, #2054	; 0x806
 801d8ec:	9300      	str	r3, [sp, #0]
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	68ba      	ldr	r2, [r7, #8]
 801d8f2:	69b9      	ldr	r1, [r7, #24]
 801d8f4:	68f8      	ldr	r0, [r7, #12]
 801d8f6:	f001 fb75 	bl	801efe4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801d8fa:	69b8      	ldr	r0, [r7, #24]
 801d8fc:	f7f8 fad6 	bl	8015eac <pbuf_free>
  p = NULL;
 801d900:	2300      	movs	r3, #0
 801d902:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801d904:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d908:	4618      	mov	r0, r3
 801d90a:	3720      	adds	r7, #32
 801d90c:	46bd      	mov	sp, r7
 801d90e:	bd80      	pop	{r7, pc}
 801d910:	08023bf4 	.word	0x08023bf4
 801d914:	08023d44 	.word	0x08023d44
 801d918:	08023c6c 	.word	0x08023c6c
 801d91c:	08023df4 	.word	0x08023df4
 801d920:	08023e28 	.word	0x08023e28

0801d924 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801d924:	b580      	push	{r7, lr}
 801d926:	b088      	sub	sp, #32
 801d928:	af04      	add	r7, sp, #16
 801d92a:	60f8      	str	r0, [r7, #12]
 801d92c:	60b9      	str	r1, [r7, #8]
 801d92e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d930:	68fb      	ldr	r3, [r7, #12]
 801d932:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801d93c:	68fb      	ldr	r3, [r7, #12]
 801d93e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d940:	2201      	movs	r2, #1
 801d942:	9203      	str	r2, [sp, #12]
 801d944:	68ba      	ldr	r2, [r7, #8]
 801d946:	9202      	str	r2, [sp, #8]
 801d948:	4a06      	ldr	r2, [pc, #24]	; (801d964 <etharp_request_dst+0x40>)
 801d94a:	9201      	str	r2, [sp, #4]
 801d94c:	9300      	str	r3, [sp, #0]
 801d94e:	4603      	mov	r3, r0
 801d950:	687a      	ldr	r2, [r7, #4]
 801d952:	68f8      	ldr	r0, [r7, #12]
 801d954:	f7ff ff5a 	bl	801d80c <etharp_raw>
 801d958:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801d95a:	4618      	mov	r0, r3
 801d95c:	3710      	adds	r7, #16
 801d95e:	46bd      	mov	sp, r7
 801d960:	bd80      	pop	{r7, pc}
 801d962:	bf00      	nop
 801d964:	0807b104 	.word	0x0807b104

0801d968 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801d968:	b580      	push	{r7, lr}
 801d96a:	b082      	sub	sp, #8
 801d96c:	af00      	add	r7, sp, #0
 801d96e:	6078      	str	r0, [r7, #4]
 801d970:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801d972:	4a05      	ldr	r2, [pc, #20]	; (801d988 <etharp_request+0x20>)
 801d974:	6839      	ldr	r1, [r7, #0]
 801d976:	6878      	ldr	r0, [r7, #4]
 801d978:	f7ff ffd4 	bl	801d924 <etharp_request_dst>
 801d97c:	4603      	mov	r3, r0
}
 801d97e:	4618      	mov	r0, r3
 801d980:	3708      	adds	r7, #8
 801d982:	46bd      	mov	sp, r7
 801d984:	bd80      	pop	{r7, pc}
 801d986:	bf00      	nop
 801d988:	0807b0fc 	.word	0x0807b0fc

0801d98c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801d98c:	b580      	push	{r7, lr}
 801d98e:	b08e      	sub	sp, #56	; 0x38
 801d990:	af04      	add	r7, sp, #16
 801d992:	6078      	str	r0, [r7, #4]
 801d994:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801d996:	4b79      	ldr	r3, [pc, #484]	; (801db7c <icmp_input+0x1f0>)
 801d998:	689b      	ldr	r3, [r3, #8]
 801d99a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801d99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d99e:	781b      	ldrb	r3, [r3, #0]
 801d9a0:	f003 030f 	and.w	r3, r3, #15
 801d9a4:	b2db      	uxtb	r3, r3
 801d9a6:	009b      	lsls	r3, r3, #2
 801d9a8:	b2db      	uxtb	r3, r3
 801d9aa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801d9ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d9ae:	2b13      	cmp	r3, #19
 801d9b0:	f240 80cd 	bls.w	801db4e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	895b      	ldrh	r3, [r3, #10]
 801d9b8:	2b03      	cmp	r3, #3
 801d9ba:	f240 80ca 	bls.w	801db52 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	685b      	ldr	r3, [r3, #4]
 801d9c2:	781b      	ldrb	r3, [r3, #0]
 801d9c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801d9c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	f000 80b7 	beq.w	801db40 <icmp_input+0x1b4>
 801d9d2:	2b08      	cmp	r3, #8
 801d9d4:	f040 80b7 	bne.w	801db46 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801d9d8:	4b69      	ldr	r3, [pc, #420]	; (801db80 <icmp_input+0x1f4>)
 801d9da:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d9dc:	4b67      	ldr	r3, [pc, #412]	; (801db7c <icmp_input+0x1f0>)
 801d9de:	695b      	ldr	r3, [r3, #20]
 801d9e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d9e4:	2be0      	cmp	r3, #224	; 0xe0
 801d9e6:	f000 80bb 	beq.w	801db60 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801d9ea:	4b64      	ldr	r3, [pc, #400]	; (801db7c <icmp_input+0x1f0>)
 801d9ec:	695b      	ldr	r3, [r3, #20]
 801d9ee:	4a63      	ldr	r2, [pc, #396]	; (801db7c <icmp_input+0x1f0>)
 801d9f0:	6812      	ldr	r2, [r2, #0]
 801d9f2:	4611      	mov	r1, r2
 801d9f4:	4618      	mov	r0, r3
 801d9f6:	f000 fbed 	bl	801e1d4 <ip4_addr_isbroadcast_u32>
 801d9fa:	4603      	mov	r3, r0
 801d9fc:	2b00      	cmp	r3, #0
 801d9fe:	f040 80b1 	bne.w	801db64 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	891b      	ldrh	r3, [r3, #8]
 801da06:	2b07      	cmp	r3, #7
 801da08:	f240 80a5 	bls.w	801db56 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801da0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801da0e:	330e      	adds	r3, #14
 801da10:	4619      	mov	r1, r3
 801da12:	6878      	ldr	r0, [r7, #4]
 801da14:	f7f8 f9a2 	bl	8015d5c <pbuf_add_header>
 801da18:	4603      	mov	r3, r0
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	d04b      	beq.n	801dab6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	891a      	ldrh	r2, [r3, #8]
 801da22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801da24:	4413      	add	r3, r2
 801da26:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	891b      	ldrh	r3, [r3, #8]
 801da2c:	8b7a      	ldrh	r2, [r7, #26]
 801da2e:	429a      	cmp	r2, r3
 801da30:	f0c0 809a 	bcc.w	801db68 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801da34:	8b7b      	ldrh	r3, [r7, #26]
 801da36:	f44f 7220 	mov.w	r2, #640	; 0x280
 801da3a:	4619      	mov	r1, r3
 801da3c:	200e      	movs	r0, #14
 801da3e:	f7f7 ff3f 	bl	80158c0 <pbuf_alloc>
 801da42:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801da44:	697b      	ldr	r3, [r7, #20]
 801da46:	2b00      	cmp	r3, #0
 801da48:	f000 8090 	beq.w	801db6c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801da4c:	697b      	ldr	r3, [r7, #20]
 801da4e:	895b      	ldrh	r3, [r3, #10]
 801da50:	461a      	mov	r2, r3
 801da52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801da54:	3308      	adds	r3, #8
 801da56:	429a      	cmp	r2, r3
 801da58:	d203      	bcs.n	801da62 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801da5a:	6978      	ldr	r0, [r7, #20]
 801da5c:	f7f8 fa26 	bl	8015eac <pbuf_free>
          goto icmperr;
 801da60:	e085      	b.n	801db6e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801da62:	697b      	ldr	r3, [r7, #20]
 801da64:	685b      	ldr	r3, [r3, #4]
 801da66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801da68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801da6a:	4618      	mov	r0, r3
 801da6c:	f001 fc4e 	bl	801f30c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801da70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801da72:	4619      	mov	r1, r3
 801da74:	6978      	ldr	r0, [r7, #20]
 801da76:	f7f8 f981 	bl	8015d7c <pbuf_remove_header>
 801da7a:	4603      	mov	r3, r0
 801da7c:	2b00      	cmp	r3, #0
 801da7e:	d009      	beq.n	801da94 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801da80:	4b40      	ldr	r3, [pc, #256]	; (801db84 <icmp_input+0x1f8>)
 801da82:	22b6      	movs	r2, #182	; 0xb6
 801da84:	4940      	ldr	r1, [pc, #256]	; (801db88 <icmp_input+0x1fc>)
 801da86:	4841      	ldr	r0, [pc, #260]	; (801db8c <icmp_input+0x200>)
 801da88:	f001 fc70 	bl	801f36c <iprintf>
          pbuf_free(r);
 801da8c:	6978      	ldr	r0, [r7, #20]
 801da8e:	f7f8 fa0d 	bl	8015eac <pbuf_free>
          goto icmperr;
 801da92:	e06c      	b.n	801db6e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801da94:	6879      	ldr	r1, [r7, #4]
 801da96:	6978      	ldr	r0, [r7, #20]
 801da98:	f7f8 fb2c 	bl	80160f4 <pbuf_copy>
 801da9c:	4603      	mov	r3, r0
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	d003      	beq.n	801daaa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801daa2:	6978      	ldr	r0, [r7, #20]
 801daa4:	f7f8 fa02 	bl	8015eac <pbuf_free>
          goto icmperr;
 801daa8:	e061      	b.n	801db6e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801daaa:	6878      	ldr	r0, [r7, #4]
 801daac:	f7f8 f9fe 	bl	8015eac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801dab0:	697b      	ldr	r3, [r7, #20]
 801dab2:	607b      	str	r3, [r7, #4]
 801dab4:	e00f      	b.n	801dad6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801dab6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801dab8:	330e      	adds	r3, #14
 801daba:	4619      	mov	r1, r3
 801dabc:	6878      	ldr	r0, [r7, #4]
 801dabe:	f7f8 f95d 	bl	8015d7c <pbuf_remove_header>
 801dac2:	4603      	mov	r3, r0
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	d006      	beq.n	801dad6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801dac8:	4b2e      	ldr	r3, [pc, #184]	; (801db84 <icmp_input+0x1f8>)
 801daca:	22c7      	movs	r2, #199	; 0xc7
 801dacc:	4930      	ldr	r1, [pc, #192]	; (801db90 <icmp_input+0x204>)
 801dace:	482f      	ldr	r0, [pc, #188]	; (801db8c <icmp_input+0x200>)
 801dad0:	f001 fc4c 	bl	801f36c <iprintf>
          goto icmperr;
 801dad4:	e04b      	b.n	801db6e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801dad6:	687b      	ldr	r3, [r7, #4]
 801dad8:	685b      	ldr	r3, [r3, #4]
 801dada:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801dadc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801dade:	4619      	mov	r1, r3
 801dae0:	6878      	ldr	r0, [r7, #4]
 801dae2:	f7f8 f93b 	bl	8015d5c <pbuf_add_header>
 801dae6:	4603      	mov	r3, r0
 801dae8:	2b00      	cmp	r3, #0
 801daea:	d12b      	bne.n	801db44 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	685b      	ldr	r3, [r3, #4]
 801daf0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801daf2:	69fb      	ldr	r3, [r7, #28]
 801daf4:	681a      	ldr	r2, [r3, #0]
 801daf6:	68fb      	ldr	r3, [r7, #12]
 801daf8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801dafa:	4b20      	ldr	r3, [pc, #128]	; (801db7c <icmp_input+0x1f0>)
 801dafc:	691a      	ldr	r2, [r3, #16]
 801dafe:	68fb      	ldr	r3, [r7, #12]
 801db00:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801db02:	693b      	ldr	r3, [r7, #16]
 801db04:	2200      	movs	r2, #0
 801db06:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801db08:	693b      	ldr	r3, [r7, #16]
 801db0a:	2200      	movs	r2, #0
 801db0c:	709a      	strb	r2, [r3, #2]
 801db0e:	2200      	movs	r2, #0
 801db10:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801db12:	68fb      	ldr	r3, [r7, #12]
 801db14:	22ff      	movs	r2, #255	; 0xff
 801db16:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801db18:	68fb      	ldr	r3, [r7, #12]
 801db1a:	2200      	movs	r2, #0
 801db1c:	729a      	strb	r2, [r3, #10]
 801db1e:	2200      	movs	r2, #0
 801db20:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801db22:	683b      	ldr	r3, [r7, #0]
 801db24:	9302      	str	r3, [sp, #8]
 801db26:	2301      	movs	r3, #1
 801db28:	9301      	str	r3, [sp, #4]
 801db2a:	2300      	movs	r3, #0
 801db2c:	9300      	str	r3, [sp, #0]
 801db2e:	23ff      	movs	r3, #255	; 0xff
 801db30:	2200      	movs	r2, #0
 801db32:	69f9      	ldr	r1, [r7, #28]
 801db34:	6878      	ldr	r0, [r7, #4]
 801db36:	f000 fa75 	bl	801e024 <ip4_output_if>
 801db3a:	4603      	mov	r3, r0
 801db3c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801db3e:	e001      	b.n	801db44 <icmp_input+0x1b8>
      break;
 801db40:	bf00      	nop
 801db42:	e000      	b.n	801db46 <icmp_input+0x1ba>
      break;
 801db44:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801db46:	6878      	ldr	r0, [r7, #4]
 801db48:	f7f8 f9b0 	bl	8015eac <pbuf_free>
  return;
 801db4c:	e013      	b.n	801db76 <icmp_input+0x1ea>
    goto lenerr;
 801db4e:	bf00      	nop
 801db50:	e002      	b.n	801db58 <icmp_input+0x1cc>
    goto lenerr;
 801db52:	bf00      	nop
 801db54:	e000      	b.n	801db58 <icmp_input+0x1cc>
        goto lenerr;
 801db56:	bf00      	nop
lenerr:
  pbuf_free(p);
 801db58:	6878      	ldr	r0, [r7, #4]
 801db5a:	f7f8 f9a7 	bl	8015eac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801db5e:	e00a      	b.n	801db76 <icmp_input+0x1ea>
        goto icmperr;
 801db60:	bf00      	nop
 801db62:	e004      	b.n	801db6e <icmp_input+0x1e2>
        goto icmperr;
 801db64:	bf00      	nop
 801db66:	e002      	b.n	801db6e <icmp_input+0x1e2>
          goto icmperr;
 801db68:	bf00      	nop
 801db6a:	e000      	b.n	801db6e <icmp_input+0x1e2>
          goto icmperr;
 801db6c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801db6e:	6878      	ldr	r0, [r7, #4]
 801db70:	f7f8 f99c 	bl	8015eac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801db74:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801db76:	3728      	adds	r7, #40	; 0x28
 801db78:	46bd      	mov	sp, r7
 801db7a:	bd80      	pop	{r7, pc}
 801db7c:	200114a0 	.word	0x200114a0
 801db80:	200114b4 	.word	0x200114b4
 801db84:	08023e6c 	.word	0x08023e6c
 801db88:	08023ea4 	.word	0x08023ea4
 801db8c:	08023edc 	.word	0x08023edc
 801db90:	08023f04 	.word	0x08023f04

0801db94 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801db94:	b580      	push	{r7, lr}
 801db96:	b082      	sub	sp, #8
 801db98:	af00      	add	r7, sp, #0
 801db9a:	6078      	str	r0, [r7, #4]
 801db9c:	460b      	mov	r3, r1
 801db9e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801dba0:	78fb      	ldrb	r3, [r7, #3]
 801dba2:	461a      	mov	r2, r3
 801dba4:	2103      	movs	r1, #3
 801dba6:	6878      	ldr	r0, [r7, #4]
 801dba8:	f000 f814 	bl	801dbd4 <icmp_send_response>
}
 801dbac:	bf00      	nop
 801dbae:	3708      	adds	r7, #8
 801dbb0:	46bd      	mov	sp, r7
 801dbb2:	bd80      	pop	{r7, pc}

0801dbb4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801dbb4:	b580      	push	{r7, lr}
 801dbb6:	b082      	sub	sp, #8
 801dbb8:	af00      	add	r7, sp, #0
 801dbba:	6078      	str	r0, [r7, #4]
 801dbbc:	460b      	mov	r3, r1
 801dbbe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801dbc0:	78fb      	ldrb	r3, [r7, #3]
 801dbc2:	461a      	mov	r2, r3
 801dbc4:	210b      	movs	r1, #11
 801dbc6:	6878      	ldr	r0, [r7, #4]
 801dbc8:	f000 f804 	bl	801dbd4 <icmp_send_response>
}
 801dbcc:	bf00      	nop
 801dbce:	3708      	adds	r7, #8
 801dbd0:	46bd      	mov	sp, r7
 801dbd2:	bd80      	pop	{r7, pc}

0801dbd4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801dbd4:	b580      	push	{r7, lr}
 801dbd6:	b08c      	sub	sp, #48	; 0x30
 801dbd8:	af04      	add	r7, sp, #16
 801dbda:	6078      	str	r0, [r7, #4]
 801dbdc:	460b      	mov	r3, r1
 801dbde:	70fb      	strb	r3, [r7, #3]
 801dbe0:	4613      	mov	r3, r2
 801dbe2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801dbe4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dbe8:	2124      	movs	r1, #36	; 0x24
 801dbea:	2022      	movs	r0, #34	; 0x22
 801dbec:	f7f7 fe68 	bl	80158c0 <pbuf_alloc>
 801dbf0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801dbf2:	69fb      	ldr	r3, [r7, #28]
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d04c      	beq.n	801dc92 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801dbf8:	69fb      	ldr	r3, [r7, #28]
 801dbfa:	895b      	ldrh	r3, [r3, #10]
 801dbfc:	2b23      	cmp	r3, #35	; 0x23
 801dbfe:	d806      	bhi.n	801dc0e <icmp_send_response+0x3a>
 801dc00:	4b26      	ldr	r3, [pc, #152]	; (801dc9c <icmp_send_response+0xc8>)
 801dc02:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801dc06:	4926      	ldr	r1, [pc, #152]	; (801dca0 <icmp_send_response+0xcc>)
 801dc08:	4826      	ldr	r0, [pc, #152]	; (801dca4 <icmp_send_response+0xd0>)
 801dc0a:	f001 fbaf 	bl	801f36c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	685b      	ldr	r3, [r3, #4]
 801dc12:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801dc14:	69fb      	ldr	r3, [r7, #28]
 801dc16:	685b      	ldr	r3, [r3, #4]
 801dc18:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801dc1a:	697b      	ldr	r3, [r7, #20]
 801dc1c:	78fa      	ldrb	r2, [r7, #3]
 801dc1e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801dc20:	697b      	ldr	r3, [r7, #20]
 801dc22:	78ba      	ldrb	r2, [r7, #2]
 801dc24:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801dc26:	697b      	ldr	r3, [r7, #20]
 801dc28:	2200      	movs	r2, #0
 801dc2a:	711a      	strb	r2, [r3, #4]
 801dc2c:	2200      	movs	r2, #0
 801dc2e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801dc30:	697b      	ldr	r3, [r7, #20]
 801dc32:	2200      	movs	r2, #0
 801dc34:	719a      	strb	r2, [r3, #6]
 801dc36:	2200      	movs	r2, #0
 801dc38:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801dc3a:	69fb      	ldr	r3, [r7, #28]
 801dc3c:	685b      	ldr	r3, [r3, #4]
 801dc3e:	f103 0008 	add.w	r0, r3, #8
 801dc42:	687b      	ldr	r3, [r7, #4]
 801dc44:	685b      	ldr	r3, [r3, #4]
 801dc46:	221c      	movs	r2, #28
 801dc48:	4619      	mov	r1, r3
 801dc4a:	f001 fb5f 	bl	801f30c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801dc4e:	69bb      	ldr	r3, [r7, #24]
 801dc50:	68db      	ldr	r3, [r3, #12]
 801dc52:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801dc54:	f107 030c 	add.w	r3, r7, #12
 801dc58:	4618      	mov	r0, r3
 801dc5a:	f000 f825 	bl	801dca8 <ip4_route>
 801dc5e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801dc60:	693b      	ldr	r3, [r7, #16]
 801dc62:	2b00      	cmp	r3, #0
 801dc64:	d011      	beq.n	801dc8a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801dc66:	697b      	ldr	r3, [r7, #20]
 801dc68:	2200      	movs	r2, #0
 801dc6a:	709a      	strb	r2, [r3, #2]
 801dc6c:	2200      	movs	r2, #0
 801dc6e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801dc70:	f107 020c 	add.w	r2, r7, #12
 801dc74:	693b      	ldr	r3, [r7, #16]
 801dc76:	9302      	str	r3, [sp, #8]
 801dc78:	2301      	movs	r3, #1
 801dc7a:	9301      	str	r3, [sp, #4]
 801dc7c:	2300      	movs	r3, #0
 801dc7e:	9300      	str	r3, [sp, #0]
 801dc80:	23ff      	movs	r3, #255	; 0xff
 801dc82:	2100      	movs	r1, #0
 801dc84:	69f8      	ldr	r0, [r7, #28]
 801dc86:	f000 f9cd 	bl	801e024 <ip4_output_if>
  }
  pbuf_free(q);
 801dc8a:	69f8      	ldr	r0, [r7, #28]
 801dc8c:	f7f8 f90e 	bl	8015eac <pbuf_free>
 801dc90:	e000      	b.n	801dc94 <icmp_send_response+0xc0>
    return;
 801dc92:	bf00      	nop
}
 801dc94:	3720      	adds	r7, #32
 801dc96:	46bd      	mov	sp, r7
 801dc98:	bd80      	pop	{r7, pc}
 801dc9a:	bf00      	nop
 801dc9c:	08023e6c 	.word	0x08023e6c
 801dca0:	08023f38 	.word	0x08023f38
 801dca4:	08023edc 	.word	0x08023edc

0801dca8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801dca8:	b480      	push	{r7}
 801dcaa:	b085      	sub	sp, #20
 801dcac:	af00      	add	r7, sp, #0
 801dcae:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801dcb0:	4b33      	ldr	r3, [pc, #204]	; (801dd80 <ip4_route+0xd8>)
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	60fb      	str	r3, [r7, #12]
 801dcb6:	e036      	b.n	801dd26 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801dcb8:	68fb      	ldr	r3, [r7, #12]
 801dcba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dcbe:	f003 0301 	and.w	r3, r3, #1
 801dcc2:	b2db      	uxtb	r3, r3
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d02b      	beq.n	801dd20 <ip4_route+0x78>
 801dcc8:	68fb      	ldr	r3, [r7, #12]
 801dcca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dcce:	089b      	lsrs	r3, r3, #2
 801dcd0:	f003 0301 	and.w	r3, r3, #1
 801dcd4:	b2db      	uxtb	r3, r3
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	d022      	beq.n	801dd20 <ip4_route+0x78>
 801dcda:	68fb      	ldr	r3, [r7, #12]
 801dcdc:	3304      	adds	r3, #4
 801dcde:	681b      	ldr	r3, [r3, #0]
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	d01d      	beq.n	801dd20 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	681a      	ldr	r2, [r3, #0]
 801dce8:	68fb      	ldr	r3, [r7, #12]
 801dcea:	3304      	adds	r3, #4
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	405a      	eors	r2, r3
 801dcf0:	68fb      	ldr	r3, [r7, #12]
 801dcf2:	3308      	adds	r3, #8
 801dcf4:	681b      	ldr	r3, [r3, #0]
 801dcf6:	4013      	ands	r3, r2
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	d101      	bne.n	801dd00 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801dcfc:	68fb      	ldr	r3, [r7, #12]
 801dcfe:	e038      	b.n	801dd72 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801dd00:	68fb      	ldr	r3, [r7, #12]
 801dd02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dd06:	f003 0302 	and.w	r3, r3, #2
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	d108      	bne.n	801dd20 <ip4_route+0x78>
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	681a      	ldr	r2, [r3, #0]
 801dd12:	68fb      	ldr	r3, [r7, #12]
 801dd14:	330c      	adds	r3, #12
 801dd16:	681b      	ldr	r3, [r3, #0]
 801dd18:	429a      	cmp	r2, r3
 801dd1a:	d101      	bne.n	801dd20 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801dd1c:	68fb      	ldr	r3, [r7, #12]
 801dd1e:	e028      	b.n	801dd72 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801dd20:	68fb      	ldr	r3, [r7, #12]
 801dd22:	681b      	ldr	r3, [r3, #0]
 801dd24:	60fb      	str	r3, [r7, #12]
 801dd26:	68fb      	ldr	r3, [r7, #12]
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d1c5      	bne.n	801dcb8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801dd2c:	4b15      	ldr	r3, [pc, #84]	; (801dd84 <ip4_route+0xdc>)
 801dd2e:	681b      	ldr	r3, [r3, #0]
 801dd30:	2b00      	cmp	r3, #0
 801dd32:	d01a      	beq.n	801dd6a <ip4_route+0xc2>
 801dd34:	4b13      	ldr	r3, [pc, #76]	; (801dd84 <ip4_route+0xdc>)
 801dd36:	681b      	ldr	r3, [r3, #0]
 801dd38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dd3c:	f003 0301 	and.w	r3, r3, #1
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	d012      	beq.n	801dd6a <ip4_route+0xc2>
 801dd44:	4b0f      	ldr	r3, [pc, #60]	; (801dd84 <ip4_route+0xdc>)
 801dd46:	681b      	ldr	r3, [r3, #0]
 801dd48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dd4c:	f003 0304 	and.w	r3, r3, #4
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d00a      	beq.n	801dd6a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801dd54:	4b0b      	ldr	r3, [pc, #44]	; (801dd84 <ip4_route+0xdc>)
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	3304      	adds	r3, #4
 801dd5a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801dd5c:	2b00      	cmp	r3, #0
 801dd5e:	d004      	beq.n	801dd6a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	681b      	ldr	r3, [r3, #0]
 801dd64:	b2db      	uxtb	r3, r3
 801dd66:	2b7f      	cmp	r3, #127	; 0x7f
 801dd68:	d101      	bne.n	801dd6e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801dd6a:	2300      	movs	r3, #0
 801dd6c:	e001      	b.n	801dd72 <ip4_route+0xca>
  }

  return netif_default;
 801dd6e:	4b05      	ldr	r3, [pc, #20]	; (801dd84 <ip4_route+0xdc>)
 801dd70:	681b      	ldr	r3, [r3, #0]
}
 801dd72:	4618      	mov	r0, r3
 801dd74:	3714      	adds	r7, #20
 801dd76:	46bd      	mov	sp, r7
 801dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd7c:	4770      	bx	lr
 801dd7e:	bf00      	nop
 801dd80:	20014ba4 	.word	0x20014ba4
 801dd84:	20014ba8 	.word	0x20014ba8

0801dd88 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801dd88:	b580      	push	{r7, lr}
 801dd8a:	b082      	sub	sp, #8
 801dd8c:	af00      	add	r7, sp, #0
 801dd8e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dd96:	f003 0301 	and.w	r3, r3, #1
 801dd9a:	b2db      	uxtb	r3, r3
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	d016      	beq.n	801ddce <ip4_input_accept+0x46>
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	3304      	adds	r3, #4
 801dda4:	681b      	ldr	r3, [r3, #0]
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	d011      	beq.n	801ddce <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ddaa:	4b0b      	ldr	r3, [pc, #44]	; (801ddd8 <ip4_input_accept+0x50>)
 801ddac:	695a      	ldr	r2, [r3, #20]
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	3304      	adds	r3, #4
 801ddb2:	681b      	ldr	r3, [r3, #0]
 801ddb4:	429a      	cmp	r2, r3
 801ddb6:	d008      	beq.n	801ddca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ddb8:	4b07      	ldr	r3, [pc, #28]	; (801ddd8 <ip4_input_accept+0x50>)
 801ddba:	695b      	ldr	r3, [r3, #20]
 801ddbc:	6879      	ldr	r1, [r7, #4]
 801ddbe:	4618      	mov	r0, r3
 801ddc0:	f000 fa08 	bl	801e1d4 <ip4_addr_isbroadcast_u32>
 801ddc4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ddc6:	2b00      	cmp	r3, #0
 801ddc8:	d001      	beq.n	801ddce <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801ddca:	2301      	movs	r3, #1
 801ddcc:	e000      	b.n	801ddd0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801ddce:	2300      	movs	r3, #0
}
 801ddd0:	4618      	mov	r0, r3
 801ddd2:	3708      	adds	r7, #8
 801ddd4:	46bd      	mov	sp, r7
 801ddd6:	bd80      	pop	{r7, pc}
 801ddd8:	200114a0 	.word	0x200114a0

0801dddc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801dddc:	b580      	push	{r7, lr}
 801ddde:	b086      	sub	sp, #24
 801dde0:	af00      	add	r7, sp, #0
 801dde2:	6078      	str	r0, [r7, #4]
 801dde4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	685b      	ldr	r3, [r3, #4]
 801ddea:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801ddec:	697b      	ldr	r3, [r7, #20]
 801ddee:	781b      	ldrb	r3, [r3, #0]
 801ddf0:	091b      	lsrs	r3, r3, #4
 801ddf2:	b2db      	uxtb	r3, r3
 801ddf4:	2b04      	cmp	r3, #4
 801ddf6:	d004      	beq.n	801de02 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801ddf8:	6878      	ldr	r0, [r7, #4]
 801ddfa:	f7f8 f857 	bl	8015eac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801ddfe:	2300      	movs	r3, #0
 801de00:	e107      	b.n	801e012 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801de02:	697b      	ldr	r3, [r7, #20]
 801de04:	781b      	ldrb	r3, [r3, #0]
 801de06:	f003 030f 	and.w	r3, r3, #15
 801de0a:	b2db      	uxtb	r3, r3
 801de0c:	009b      	lsls	r3, r3, #2
 801de0e:	b2db      	uxtb	r3, r3
 801de10:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801de12:	697b      	ldr	r3, [r7, #20]
 801de14:	885b      	ldrh	r3, [r3, #2]
 801de16:	b29b      	uxth	r3, r3
 801de18:	4618      	mov	r0, r3
 801de1a:	f7f6 fc53 	bl	80146c4 <lwip_htons>
 801de1e:	4603      	mov	r3, r0
 801de20:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	891b      	ldrh	r3, [r3, #8]
 801de26:	89ba      	ldrh	r2, [r7, #12]
 801de28:	429a      	cmp	r2, r3
 801de2a:	d204      	bcs.n	801de36 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801de2c:	89bb      	ldrh	r3, [r7, #12]
 801de2e:	4619      	mov	r1, r3
 801de30:	6878      	ldr	r0, [r7, #4]
 801de32:	f7f7 fea3 	bl	8015b7c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	895b      	ldrh	r3, [r3, #10]
 801de3a:	89fa      	ldrh	r2, [r7, #14]
 801de3c:	429a      	cmp	r2, r3
 801de3e:	d807      	bhi.n	801de50 <ip4_input+0x74>
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	891b      	ldrh	r3, [r3, #8]
 801de44:	89ba      	ldrh	r2, [r7, #12]
 801de46:	429a      	cmp	r2, r3
 801de48:	d802      	bhi.n	801de50 <ip4_input+0x74>
 801de4a:	89fb      	ldrh	r3, [r7, #14]
 801de4c:	2b13      	cmp	r3, #19
 801de4e:	d804      	bhi.n	801de5a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801de50:	6878      	ldr	r0, [r7, #4]
 801de52:	f7f8 f82b 	bl	8015eac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801de56:	2300      	movs	r3, #0
 801de58:	e0db      	b.n	801e012 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801de5a:	697b      	ldr	r3, [r7, #20]
 801de5c:	691b      	ldr	r3, [r3, #16]
 801de5e:	4a6f      	ldr	r2, [pc, #444]	; (801e01c <ip4_input+0x240>)
 801de60:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801de62:	697b      	ldr	r3, [r7, #20]
 801de64:	68db      	ldr	r3, [r3, #12]
 801de66:	4a6d      	ldr	r2, [pc, #436]	; (801e01c <ip4_input+0x240>)
 801de68:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801de6a:	4b6c      	ldr	r3, [pc, #432]	; (801e01c <ip4_input+0x240>)
 801de6c:	695b      	ldr	r3, [r3, #20]
 801de6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801de72:	2be0      	cmp	r3, #224	; 0xe0
 801de74:	d112      	bne.n	801de9c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801de76:	683b      	ldr	r3, [r7, #0]
 801de78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801de7c:	f003 0301 	and.w	r3, r3, #1
 801de80:	b2db      	uxtb	r3, r3
 801de82:	2b00      	cmp	r3, #0
 801de84:	d007      	beq.n	801de96 <ip4_input+0xba>
 801de86:	683b      	ldr	r3, [r7, #0]
 801de88:	3304      	adds	r3, #4
 801de8a:	681b      	ldr	r3, [r3, #0]
 801de8c:	2b00      	cmp	r3, #0
 801de8e:	d002      	beq.n	801de96 <ip4_input+0xba>
      netif = inp;
 801de90:	683b      	ldr	r3, [r7, #0]
 801de92:	613b      	str	r3, [r7, #16]
 801de94:	e02a      	b.n	801deec <ip4_input+0x110>
    } else {
      netif = NULL;
 801de96:	2300      	movs	r3, #0
 801de98:	613b      	str	r3, [r7, #16]
 801de9a:	e027      	b.n	801deec <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801de9c:	6838      	ldr	r0, [r7, #0]
 801de9e:	f7ff ff73 	bl	801dd88 <ip4_input_accept>
 801dea2:	4603      	mov	r3, r0
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d002      	beq.n	801deae <ip4_input+0xd2>
      netif = inp;
 801dea8:	683b      	ldr	r3, [r7, #0]
 801deaa:	613b      	str	r3, [r7, #16]
 801deac:	e01e      	b.n	801deec <ip4_input+0x110>
    } else {
      netif = NULL;
 801deae:	2300      	movs	r3, #0
 801deb0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801deb2:	4b5a      	ldr	r3, [pc, #360]	; (801e01c <ip4_input+0x240>)
 801deb4:	695b      	ldr	r3, [r3, #20]
 801deb6:	b2db      	uxtb	r3, r3
 801deb8:	2b7f      	cmp	r3, #127	; 0x7f
 801deba:	d017      	beq.n	801deec <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801debc:	4b58      	ldr	r3, [pc, #352]	; (801e020 <ip4_input+0x244>)
 801debe:	681b      	ldr	r3, [r3, #0]
 801dec0:	613b      	str	r3, [r7, #16]
 801dec2:	e00e      	b.n	801dee2 <ip4_input+0x106>
          if (netif == inp) {
 801dec4:	693a      	ldr	r2, [r7, #16]
 801dec6:	683b      	ldr	r3, [r7, #0]
 801dec8:	429a      	cmp	r2, r3
 801deca:	d006      	beq.n	801deda <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801decc:	6938      	ldr	r0, [r7, #16]
 801dece:	f7ff ff5b 	bl	801dd88 <ip4_input_accept>
 801ded2:	4603      	mov	r3, r0
 801ded4:	2b00      	cmp	r3, #0
 801ded6:	d108      	bne.n	801deea <ip4_input+0x10e>
 801ded8:	e000      	b.n	801dedc <ip4_input+0x100>
            continue;
 801deda:	bf00      	nop
        NETIF_FOREACH(netif) {
 801dedc:	693b      	ldr	r3, [r7, #16]
 801dede:	681b      	ldr	r3, [r3, #0]
 801dee0:	613b      	str	r3, [r7, #16]
 801dee2:	693b      	ldr	r3, [r7, #16]
 801dee4:	2b00      	cmp	r3, #0
 801dee6:	d1ed      	bne.n	801dec4 <ip4_input+0xe8>
 801dee8:	e000      	b.n	801deec <ip4_input+0x110>
            break;
 801deea:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801deec:	4b4b      	ldr	r3, [pc, #300]	; (801e01c <ip4_input+0x240>)
 801deee:	691b      	ldr	r3, [r3, #16]
 801def0:	6839      	ldr	r1, [r7, #0]
 801def2:	4618      	mov	r0, r3
 801def4:	f000 f96e 	bl	801e1d4 <ip4_addr_isbroadcast_u32>
 801def8:	4603      	mov	r3, r0
 801defa:	2b00      	cmp	r3, #0
 801defc:	d105      	bne.n	801df0a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801defe:	4b47      	ldr	r3, [pc, #284]	; (801e01c <ip4_input+0x240>)
 801df00:	691b      	ldr	r3, [r3, #16]
 801df02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801df06:	2be0      	cmp	r3, #224	; 0xe0
 801df08:	d104      	bne.n	801df14 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801df0a:	6878      	ldr	r0, [r7, #4]
 801df0c:	f7f7 ffce 	bl	8015eac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801df10:	2300      	movs	r3, #0
 801df12:	e07e      	b.n	801e012 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801df14:	693b      	ldr	r3, [r7, #16]
 801df16:	2b00      	cmp	r3, #0
 801df18:	d104      	bne.n	801df24 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801df1a:	6878      	ldr	r0, [r7, #4]
 801df1c:	f7f7 ffc6 	bl	8015eac <pbuf_free>
    return ERR_OK;
 801df20:	2300      	movs	r3, #0
 801df22:	e076      	b.n	801e012 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801df24:	697b      	ldr	r3, [r7, #20]
 801df26:	88db      	ldrh	r3, [r3, #6]
 801df28:	b29b      	uxth	r3, r3
 801df2a:	461a      	mov	r2, r3
 801df2c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801df30:	4013      	ands	r3, r2
 801df32:	2b00      	cmp	r3, #0
 801df34:	d00b      	beq.n	801df4e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801df36:	6878      	ldr	r0, [r7, #4]
 801df38:	f000 fc92 	bl	801e860 <ip4_reass>
 801df3c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	2b00      	cmp	r3, #0
 801df42:	d101      	bne.n	801df48 <ip4_input+0x16c>
      return ERR_OK;
 801df44:	2300      	movs	r3, #0
 801df46:	e064      	b.n	801e012 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	685b      	ldr	r3, [r3, #4]
 801df4c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801df4e:	4a33      	ldr	r2, [pc, #204]	; (801e01c <ip4_input+0x240>)
 801df50:	693b      	ldr	r3, [r7, #16]
 801df52:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801df54:	4a31      	ldr	r2, [pc, #196]	; (801e01c <ip4_input+0x240>)
 801df56:	683b      	ldr	r3, [r7, #0]
 801df58:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801df5a:	4a30      	ldr	r2, [pc, #192]	; (801e01c <ip4_input+0x240>)
 801df5c:	697b      	ldr	r3, [r7, #20]
 801df5e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801df60:	697b      	ldr	r3, [r7, #20]
 801df62:	781b      	ldrb	r3, [r3, #0]
 801df64:	f003 030f 	and.w	r3, r3, #15
 801df68:	b2db      	uxtb	r3, r3
 801df6a:	009b      	lsls	r3, r3, #2
 801df6c:	b2db      	uxtb	r3, r3
 801df6e:	b29a      	uxth	r2, r3
 801df70:	4b2a      	ldr	r3, [pc, #168]	; (801e01c <ip4_input+0x240>)
 801df72:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801df74:	89fb      	ldrh	r3, [r7, #14]
 801df76:	4619      	mov	r1, r3
 801df78:	6878      	ldr	r0, [r7, #4]
 801df7a:	f7f7 feff 	bl	8015d7c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801df7e:	697b      	ldr	r3, [r7, #20]
 801df80:	7a5b      	ldrb	r3, [r3, #9]
 801df82:	2b11      	cmp	r3, #17
 801df84:	d006      	beq.n	801df94 <ip4_input+0x1b8>
 801df86:	2b11      	cmp	r3, #17
 801df88:	dc13      	bgt.n	801dfb2 <ip4_input+0x1d6>
 801df8a:	2b01      	cmp	r3, #1
 801df8c:	d00c      	beq.n	801dfa8 <ip4_input+0x1cc>
 801df8e:	2b06      	cmp	r3, #6
 801df90:	d005      	beq.n	801df9e <ip4_input+0x1c2>
 801df92:	e00e      	b.n	801dfb2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801df94:	6839      	ldr	r1, [r7, #0]
 801df96:	6878      	ldr	r0, [r7, #4]
 801df98:	f7fe fc68 	bl	801c86c <udp_input>
        break;
 801df9c:	e026      	b.n	801dfec <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801df9e:	6839      	ldr	r1, [r7, #0]
 801dfa0:	6878      	ldr	r0, [r7, #4]
 801dfa2:	f7fa f85d 	bl	8018060 <tcp_input>
        break;
 801dfa6:	e021      	b.n	801dfec <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801dfa8:	6839      	ldr	r1, [r7, #0]
 801dfaa:	6878      	ldr	r0, [r7, #4]
 801dfac:	f7ff fcee 	bl	801d98c <icmp_input>
        break;
 801dfb0:	e01c      	b.n	801dfec <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801dfb2:	4b1a      	ldr	r3, [pc, #104]	; (801e01c <ip4_input+0x240>)
 801dfb4:	695b      	ldr	r3, [r3, #20]
 801dfb6:	6939      	ldr	r1, [r7, #16]
 801dfb8:	4618      	mov	r0, r3
 801dfba:	f000 f90b 	bl	801e1d4 <ip4_addr_isbroadcast_u32>
 801dfbe:	4603      	mov	r3, r0
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d10f      	bne.n	801dfe4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801dfc4:	4b15      	ldr	r3, [pc, #84]	; (801e01c <ip4_input+0x240>)
 801dfc6:	695b      	ldr	r3, [r3, #20]
 801dfc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801dfcc:	2be0      	cmp	r3, #224	; 0xe0
 801dfce:	d009      	beq.n	801dfe4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801dfd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801dfd4:	4619      	mov	r1, r3
 801dfd6:	6878      	ldr	r0, [r7, #4]
 801dfd8:	f7f7 ff55 	bl	8015e86 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801dfdc:	2102      	movs	r1, #2
 801dfde:	6878      	ldr	r0, [r7, #4]
 801dfe0:	f7ff fdd8 	bl	801db94 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801dfe4:	6878      	ldr	r0, [r7, #4]
 801dfe6:	f7f7 ff61 	bl	8015eac <pbuf_free>
        break;
 801dfea:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801dfec:	4b0b      	ldr	r3, [pc, #44]	; (801e01c <ip4_input+0x240>)
 801dfee:	2200      	movs	r2, #0
 801dff0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801dff2:	4b0a      	ldr	r3, [pc, #40]	; (801e01c <ip4_input+0x240>)
 801dff4:	2200      	movs	r2, #0
 801dff6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801dff8:	4b08      	ldr	r3, [pc, #32]	; (801e01c <ip4_input+0x240>)
 801dffa:	2200      	movs	r2, #0
 801dffc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801dffe:	4b07      	ldr	r3, [pc, #28]	; (801e01c <ip4_input+0x240>)
 801e000:	2200      	movs	r2, #0
 801e002:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801e004:	4b05      	ldr	r3, [pc, #20]	; (801e01c <ip4_input+0x240>)
 801e006:	2200      	movs	r2, #0
 801e008:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801e00a:	4b04      	ldr	r3, [pc, #16]	; (801e01c <ip4_input+0x240>)
 801e00c:	2200      	movs	r2, #0
 801e00e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801e010:	2300      	movs	r3, #0
}
 801e012:	4618      	mov	r0, r3
 801e014:	3718      	adds	r7, #24
 801e016:	46bd      	mov	sp, r7
 801e018:	bd80      	pop	{r7, pc}
 801e01a:	bf00      	nop
 801e01c:	200114a0 	.word	0x200114a0
 801e020:	20014ba4 	.word	0x20014ba4

0801e024 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801e024:	b580      	push	{r7, lr}
 801e026:	b08a      	sub	sp, #40	; 0x28
 801e028:	af04      	add	r7, sp, #16
 801e02a:	60f8      	str	r0, [r7, #12]
 801e02c:	60b9      	str	r1, [r7, #8]
 801e02e:	607a      	str	r2, [r7, #4]
 801e030:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801e032:	68bb      	ldr	r3, [r7, #8]
 801e034:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	2b00      	cmp	r3, #0
 801e03a:	d009      	beq.n	801e050 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801e03c:	68bb      	ldr	r3, [r7, #8]
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d003      	beq.n	801e04a <ip4_output_if+0x26>
 801e042:	68bb      	ldr	r3, [r7, #8]
 801e044:	681b      	ldr	r3, [r3, #0]
 801e046:	2b00      	cmp	r3, #0
 801e048:	d102      	bne.n	801e050 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801e04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e04c:	3304      	adds	r3, #4
 801e04e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e050:	78fa      	ldrb	r2, [r7, #3]
 801e052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e054:	9302      	str	r3, [sp, #8]
 801e056:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e05a:	9301      	str	r3, [sp, #4]
 801e05c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801e060:	9300      	str	r3, [sp, #0]
 801e062:	4613      	mov	r3, r2
 801e064:	687a      	ldr	r2, [r7, #4]
 801e066:	6979      	ldr	r1, [r7, #20]
 801e068:	68f8      	ldr	r0, [r7, #12]
 801e06a:	f000 f805 	bl	801e078 <ip4_output_if_src>
 801e06e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801e070:	4618      	mov	r0, r3
 801e072:	3718      	adds	r7, #24
 801e074:	46bd      	mov	sp, r7
 801e076:	bd80      	pop	{r7, pc}

0801e078 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801e078:	b580      	push	{r7, lr}
 801e07a:	b088      	sub	sp, #32
 801e07c:	af00      	add	r7, sp, #0
 801e07e:	60f8      	str	r0, [r7, #12]
 801e080:	60b9      	str	r1, [r7, #8]
 801e082:	607a      	str	r2, [r7, #4]
 801e084:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e086:	68fb      	ldr	r3, [r7, #12]
 801e088:	7b9b      	ldrb	r3, [r3, #14]
 801e08a:	2b01      	cmp	r3, #1
 801e08c:	d006      	beq.n	801e09c <ip4_output_if_src+0x24>
 801e08e:	4b4b      	ldr	r3, [pc, #300]	; (801e1bc <ip4_output_if_src+0x144>)
 801e090:	f44f 7255 	mov.w	r2, #852	; 0x354
 801e094:	494a      	ldr	r1, [pc, #296]	; (801e1c0 <ip4_output_if_src+0x148>)
 801e096:	484b      	ldr	r0, [pc, #300]	; (801e1c4 <ip4_output_if_src+0x14c>)
 801e098:	f001 f968 	bl	801f36c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d060      	beq.n	801e164 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801e0a2:	2314      	movs	r3, #20
 801e0a4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801e0a6:	2114      	movs	r1, #20
 801e0a8:	68f8      	ldr	r0, [r7, #12]
 801e0aa:	f7f7 fe57 	bl	8015d5c <pbuf_add_header>
 801e0ae:	4603      	mov	r3, r0
 801e0b0:	2b00      	cmp	r3, #0
 801e0b2:	d002      	beq.n	801e0ba <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e0b4:	f06f 0301 	mvn.w	r3, #1
 801e0b8:	e07c      	b.n	801e1b4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801e0ba:	68fb      	ldr	r3, [r7, #12]
 801e0bc:	685b      	ldr	r3, [r3, #4]
 801e0be:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e0c0:	68fb      	ldr	r3, [r7, #12]
 801e0c2:	895b      	ldrh	r3, [r3, #10]
 801e0c4:	2b13      	cmp	r3, #19
 801e0c6:	d806      	bhi.n	801e0d6 <ip4_output_if_src+0x5e>
 801e0c8:	4b3c      	ldr	r3, [pc, #240]	; (801e1bc <ip4_output_if_src+0x144>)
 801e0ca:	f44f 7262 	mov.w	r2, #904	; 0x388
 801e0ce:	493e      	ldr	r1, [pc, #248]	; (801e1c8 <ip4_output_if_src+0x150>)
 801e0d0:	483c      	ldr	r0, [pc, #240]	; (801e1c4 <ip4_output_if_src+0x14c>)
 801e0d2:	f001 f94b 	bl	801f36c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801e0d6:	69fb      	ldr	r3, [r7, #28]
 801e0d8:	78fa      	ldrb	r2, [r7, #3]
 801e0da:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801e0dc:	69fb      	ldr	r3, [r7, #28]
 801e0de:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801e0e2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	681a      	ldr	r2, [r3, #0]
 801e0e8:	69fb      	ldr	r3, [r7, #28]
 801e0ea:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801e0ec:	8b7b      	ldrh	r3, [r7, #26]
 801e0ee:	089b      	lsrs	r3, r3, #2
 801e0f0:	b29b      	uxth	r3, r3
 801e0f2:	b2db      	uxtb	r3, r3
 801e0f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e0f8:	b2da      	uxtb	r2, r3
 801e0fa:	69fb      	ldr	r3, [r7, #28]
 801e0fc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801e0fe:	69fb      	ldr	r3, [r7, #28]
 801e100:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801e104:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e106:	68fb      	ldr	r3, [r7, #12]
 801e108:	891b      	ldrh	r3, [r3, #8]
 801e10a:	4618      	mov	r0, r3
 801e10c:	f7f6 fada 	bl	80146c4 <lwip_htons>
 801e110:	4603      	mov	r3, r0
 801e112:	461a      	mov	r2, r3
 801e114:	69fb      	ldr	r3, [r7, #28]
 801e116:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801e118:	69fb      	ldr	r3, [r7, #28]
 801e11a:	2200      	movs	r2, #0
 801e11c:	719a      	strb	r2, [r3, #6]
 801e11e:	2200      	movs	r2, #0
 801e120:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e122:	4b2a      	ldr	r3, [pc, #168]	; (801e1cc <ip4_output_if_src+0x154>)
 801e124:	881b      	ldrh	r3, [r3, #0]
 801e126:	4618      	mov	r0, r3
 801e128:	f7f6 facc 	bl	80146c4 <lwip_htons>
 801e12c:	4603      	mov	r3, r0
 801e12e:	461a      	mov	r2, r3
 801e130:	69fb      	ldr	r3, [r7, #28]
 801e132:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801e134:	4b25      	ldr	r3, [pc, #148]	; (801e1cc <ip4_output_if_src+0x154>)
 801e136:	881b      	ldrh	r3, [r3, #0]
 801e138:	3301      	adds	r3, #1
 801e13a:	b29a      	uxth	r2, r3
 801e13c:	4b23      	ldr	r3, [pc, #140]	; (801e1cc <ip4_output_if_src+0x154>)
 801e13e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801e140:	68bb      	ldr	r3, [r7, #8]
 801e142:	2b00      	cmp	r3, #0
 801e144:	d104      	bne.n	801e150 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801e146:	4b22      	ldr	r3, [pc, #136]	; (801e1d0 <ip4_output_if_src+0x158>)
 801e148:	681a      	ldr	r2, [r3, #0]
 801e14a:	69fb      	ldr	r3, [r7, #28]
 801e14c:	60da      	str	r2, [r3, #12]
 801e14e:	e003      	b.n	801e158 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801e150:	68bb      	ldr	r3, [r7, #8]
 801e152:	681a      	ldr	r2, [r3, #0]
 801e154:	69fb      	ldr	r3, [r7, #28]
 801e156:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801e158:	69fb      	ldr	r3, [r7, #28]
 801e15a:	2200      	movs	r2, #0
 801e15c:	729a      	strb	r2, [r3, #10]
 801e15e:	2200      	movs	r2, #0
 801e160:	72da      	strb	r2, [r3, #11]
 801e162:	e00f      	b.n	801e184 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801e164:	68fb      	ldr	r3, [r7, #12]
 801e166:	895b      	ldrh	r3, [r3, #10]
 801e168:	2b13      	cmp	r3, #19
 801e16a:	d802      	bhi.n	801e172 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e16c:	f06f 0301 	mvn.w	r3, #1
 801e170:	e020      	b.n	801e1b4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801e172:	68fb      	ldr	r3, [r7, #12]
 801e174:	685b      	ldr	r3, [r3, #4]
 801e176:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801e178:	69fb      	ldr	r3, [r7, #28]
 801e17a:	691b      	ldr	r3, [r3, #16]
 801e17c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801e17e:	f107 0314 	add.w	r3, r7, #20
 801e182:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e186:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e188:	2b00      	cmp	r3, #0
 801e18a:	d00c      	beq.n	801e1a6 <ip4_output_if_src+0x12e>
 801e18c:	68fb      	ldr	r3, [r7, #12]
 801e18e:	891a      	ldrh	r2, [r3, #8]
 801e190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e192:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e194:	429a      	cmp	r2, r3
 801e196:	d906      	bls.n	801e1a6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801e198:	687a      	ldr	r2, [r7, #4]
 801e19a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e19c:	68f8      	ldr	r0, [r7, #12]
 801e19e:	f000 fd4d 	bl	801ec3c <ip4_frag>
 801e1a2:	4603      	mov	r3, r0
 801e1a4:	e006      	b.n	801e1b4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801e1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e1a8:	695b      	ldr	r3, [r3, #20]
 801e1aa:	687a      	ldr	r2, [r7, #4]
 801e1ac:	68f9      	ldr	r1, [r7, #12]
 801e1ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e1b0:	4798      	blx	r3
 801e1b2:	4603      	mov	r3, r0
}
 801e1b4:	4618      	mov	r0, r3
 801e1b6:	3720      	adds	r7, #32
 801e1b8:	46bd      	mov	sp, r7
 801e1ba:	bd80      	pop	{r7, pc}
 801e1bc:	08023f64 	.word	0x08023f64
 801e1c0:	08023f98 	.word	0x08023f98
 801e1c4:	08023fa4 	.word	0x08023fa4
 801e1c8:	08023fcc 	.word	0x08023fcc
 801e1cc:	2000c92e 	.word	0x2000c92e
 801e1d0:	0807b0f8 	.word	0x0807b0f8

0801e1d4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801e1d4:	b480      	push	{r7}
 801e1d6:	b085      	sub	sp, #20
 801e1d8:	af00      	add	r7, sp, #0
 801e1da:	6078      	str	r0, [r7, #4]
 801e1dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801e1de:	687b      	ldr	r3, [r7, #4]
 801e1e0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801e1e2:	687b      	ldr	r3, [r7, #4]
 801e1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e1e8:	d002      	beq.n	801e1f0 <ip4_addr_isbroadcast_u32+0x1c>
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d101      	bne.n	801e1f4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801e1f0:	2301      	movs	r3, #1
 801e1f2:	e02a      	b.n	801e24a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801e1f4:	683b      	ldr	r3, [r7, #0]
 801e1f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801e1fa:	f003 0302 	and.w	r3, r3, #2
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	d101      	bne.n	801e206 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801e202:	2300      	movs	r3, #0
 801e204:	e021      	b.n	801e24a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801e206:	683b      	ldr	r3, [r7, #0]
 801e208:	3304      	adds	r3, #4
 801e20a:	681b      	ldr	r3, [r3, #0]
 801e20c:	687a      	ldr	r2, [r7, #4]
 801e20e:	429a      	cmp	r2, r3
 801e210:	d101      	bne.n	801e216 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801e212:	2300      	movs	r3, #0
 801e214:	e019      	b.n	801e24a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801e216:	68fa      	ldr	r2, [r7, #12]
 801e218:	683b      	ldr	r3, [r7, #0]
 801e21a:	3304      	adds	r3, #4
 801e21c:	681b      	ldr	r3, [r3, #0]
 801e21e:	405a      	eors	r2, r3
 801e220:	683b      	ldr	r3, [r7, #0]
 801e222:	3308      	adds	r3, #8
 801e224:	681b      	ldr	r3, [r3, #0]
 801e226:	4013      	ands	r3, r2
 801e228:	2b00      	cmp	r3, #0
 801e22a:	d10d      	bne.n	801e248 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e22c:	683b      	ldr	r3, [r7, #0]
 801e22e:	3308      	adds	r3, #8
 801e230:	681b      	ldr	r3, [r3, #0]
 801e232:	43da      	mvns	r2, r3
 801e234:	687b      	ldr	r3, [r7, #4]
 801e236:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801e238:	683b      	ldr	r3, [r7, #0]
 801e23a:	3308      	adds	r3, #8
 801e23c:	681b      	ldr	r3, [r3, #0]
 801e23e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e240:	429a      	cmp	r2, r3
 801e242:	d101      	bne.n	801e248 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801e244:	2301      	movs	r3, #1
 801e246:	e000      	b.n	801e24a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801e248:	2300      	movs	r3, #0
  }
}
 801e24a:	4618      	mov	r0, r3
 801e24c:	3714      	adds	r7, #20
 801e24e:	46bd      	mov	sp, r7
 801e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e254:	4770      	bx	lr
	...

0801e258 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801e258:	b580      	push	{r7, lr}
 801e25a:	b084      	sub	sp, #16
 801e25c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801e25e:	2300      	movs	r3, #0
 801e260:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801e262:	4b12      	ldr	r3, [pc, #72]	; (801e2ac <ip_reass_tmr+0x54>)
 801e264:	681b      	ldr	r3, [r3, #0]
 801e266:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801e268:	e018      	b.n	801e29c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801e26a:	68fb      	ldr	r3, [r7, #12]
 801e26c:	7fdb      	ldrb	r3, [r3, #31]
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d00b      	beq.n	801e28a <ip_reass_tmr+0x32>
      r->timer--;
 801e272:	68fb      	ldr	r3, [r7, #12]
 801e274:	7fdb      	ldrb	r3, [r3, #31]
 801e276:	3b01      	subs	r3, #1
 801e278:	b2da      	uxtb	r2, r3
 801e27a:	68fb      	ldr	r3, [r7, #12]
 801e27c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801e27e:	68fb      	ldr	r3, [r7, #12]
 801e280:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	60fb      	str	r3, [r7, #12]
 801e288:	e008      	b.n	801e29c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801e28a:	68fb      	ldr	r3, [r7, #12]
 801e28c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801e28e:	68fb      	ldr	r3, [r7, #12]
 801e290:	681b      	ldr	r3, [r3, #0]
 801e292:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801e294:	68b9      	ldr	r1, [r7, #8]
 801e296:	6878      	ldr	r0, [r7, #4]
 801e298:	f000 f80a 	bl	801e2b0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801e29c:	68fb      	ldr	r3, [r7, #12]
 801e29e:	2b00      	cmp	r3, #0
 801e2a0:	d1e3      	bne.n	801e26a <ip_reass_tmr+0x12>
    }
  }
}
 801e2a2:	bf00      	nop
 801e2a4:	bf00      	nop
 801e2a6:	3710      	adds	r7, #16
 801e2a8:	46bd      	mov	sp, r7
 801e2aa:	bd80      	pop	{r7, pc}
 801e2ac:	2000c930 	.word	0x2000c930

0801e2b0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e2b0:	b580      	push	{r7, lr}
 801e2b2:	b088      	sub	sp, #32
 801e2b4:	af00      	add	r7, sp, #0
 801e2b6:	6078      	str	r0, [r7, #4]
 801e2b8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801e2ba:	2300      	movs	r3, #0
 801e2bc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e2be:	683a      	ldr	r2, [r7, #0]
 801e2c0:	687b      	ldr	r3, [r7, #4]
 801e2c2:	429a      	cmp	r2, r3
 801e2c4:	d105      	bne.n	801e2d2 <ip_reass_free_complete_datagram+0x22>
 801e2c6:	4b45      	ldr	r3, [pc, #276]	; (801e3dc <ip_reass_free_complete_datagram+0x12c>)
 801e2c8:	22ab      	movs	r2, #171	; 0xab
 801e2ca:	4945      	ldr	r1, [pc, #276]	; (801e3e0 <ip_reass_free_complete_datagram+0x130>)
 801e2cc:	4845      	ldr	r0, [pc, #276]	; (801e3e4 <ip_reass_free_complete_datagram+0x134>)
 801e2ce:	f001 f84d 	bl	801f36c <iprintf>
  if (prev != NULL) {
 801e2d2:	683b      	ldr	r3, [r7, #0]
 801e2d4:	2b00      	cmp	r3, #0
 801e2d6:	d00a      	beq.n	801e2ee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801e2d8:	683b      	ldr	r3, [r7, #0]
 801e2da:	681b      	ldr	r3, [r3, #0]
 801e2dc:	687a      	ldr	r2, [r7, #4]
 801e2de:	429a      	cmp	r2, r3
 801e2e0:	d005      	beq.n	801e2ee <ip_reass_free_complete_datagram+0x3e>
 801e2e2:	4b3e      	ldr	r3, [pc, #248]	; (801e3dc <ip_reass_free_complete_datagram+0x12c>)
 801e2e4:	22ad      	movs	r2, #173	; 0xad
 801e2e6:	4940      	ldr	r1, [pc, #256]	; (801e3e8 <ip_reass_free_complete_datagram+0x138>)
 801e2e8:	483e      	ldr	r0, [pc, #248]	; (801e3e4 <ip_reass_free_complete_datagram+0x134>)
 801e2ea:	f001 f83f 	bl	801f36c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	685b      	ldr	r3, [r3, #4]
 801e2f2:	685b      	ldr	r3, [r3, #4]
 801e2f4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801e2f6:	697b      	ldr	r3, [r7, #20]
 801e2f8:	889b      	ldrh	r3, [r3, #4]
 801e2fa:	b29b      	uxth	r3, r3
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	d12a      	bne.n	801e356 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	685b      	ldr	r3, [r3, #4]
 801e304:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801e306:	697b      	ldr	r3, [r7, #20]
 801e308:	681a      	ldr	r2, [r3, #0]
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801e30e:	69bb      	ldr	r3, [r7, #24]
 801e310:	6858      	ldr	r0, [r3, #4]
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	3308      	adds	r3, #8
 801e316:	2214      	movs	r2, #20
 801e318:	4619      	mov	r1, r3
 801e31a:	f000 fff7 	bl	801f30c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e31e:	2101      	movs	r1, #1
 801e320:	69b8      	ldr	r0, [r7, #24]
 801e322:	f7ff fc47 	bl	801dbb4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801e326:	69b8      	ldr	r0, [r7, #24]
 801e328:	f7f7 fe4e 	bl	8015fc8 <pbuf_clen>
 801e32c:	4603      	mov	r3, r0
 801e32e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e330:	8bfa      	ldrh	r2, [r7, #30]
 801e332:	8a7b      	ldrh	r3, [r7, #18]
 801e334:	4413      	add	r3, r2
 801e336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e33a:	db05      	blt.n	801e348 <ip_reass_free_complete_datagram+0x98>
 801e33c:	4b27      	ldr	r3, [pc, #156]	; (801e3dc <ip_reass_free_complete_datagram+0x12c>)
 801e33e:	22bc      	movs	r2, #188	; 0xbc
 801e340:	492a      	ldr	r1, [pc, #168]	; (801e3ec <ip_reass_free_complete_datagram+0x13c>)
 801e342:	4828      	ldr	r0, [pc, #160]	; (801e3e4 <ip_reass_free_complete_datagram+0x134>)
 801e344:	f001 f812 	bl	801f36c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e348:	8bfa      	ldrh	r2, [r7, #30]
 801e34a:	8a7b      	ldrh	r3, [r7, #18]
 801e34c:	4413      	add	r3, r2
 801e34e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801e350:	69b8      	ldr	r0, [r7, #24]
 801e352:	f7f7 fdab 	bl	8015eac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801e356:	687b      	ldr	r3, [r7, #4]
 801e358:	685b      	ldr	r3, [r3, #4]
 801e35a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801e35c:	e01f      	b.n	801e39e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801e35e:	69bb      	ldr	r3, [r7, #24]
 801e360:	685b      	ldr	r3, [r3, #4]
 801e362:	617b      	str	r3, [r7, #20]
    pcur = p;
 801e364:	69bb      	ldr	r3, [r7, #24]
 801e366:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801e368:	697b      	ldr	r3, [r7, #20]
 801e36a:	681b      	ldr	r3, [r3, #0]
 801e36c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801e36e:	68f8      	ldr	r0, [r7, #12]
 801e370:	f7f7 fe2a 	bl	8015fc8 <pbuf_clen>
 801e374:	4603      	mov	r3, r0
 801e376:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e378:	8bfa      	ldrh	r2, [r7, #30]
 801e37a:	8a7b      	ldrh	r3, [r7, #18]
 801e37c:	4413      	add	r3, r2
 801e37e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e382:	db05      	blt.n	801e390 <ip_reass_free_complete_datagram+0xe0>
 801e384:	4b15      	ldr	r3, [pc, #84]	; (801e3dc <ip_reass_free_complete_datagram+0x12c>)
 801e386:	22cc      	movs	r2, #204	; 0xcc
 801e388:	4918      	ldr	r1, [pc, #96]	; (801e3ec <ip_reass_free_complete_datagram+0x13c>)
 801e38a:	4816      	ldr	r0, [pc, #88]	; (801e3e4 <ip_reass_free_complete_datagram+0x134>)
 801e38c:	f000 ffee 	bl	801f36c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e390:	8bfa      	ldrh	r2, [r7, #30]
 801e392:	8a7b      	ldrh	r3, [r7, #18]
 801e394:	4413      	add	r3, r2
 801e396:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801e398:	68f8      	ldr	r0, [r7, #12]
 801e39a:	f7f7 fd87 	bl	8015eac <pbuf_free>
  while (p != NULL) {
 801e39e:	69bb      	ldr	r3, [r7, #24]
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	d1dc      	bne.n	801e35e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801e3a4:	6839      	ldr	r1, [r7, #0]
 801e3a6:	6878      	ldr	r0, [r7, #4]
 801e3a8:	f000 f8c2 	bl	801e530 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801e3ac:	4b10      	ldr	r3, [pc, #64]	; (801e3f0 <ip_reass_free_complete_datagram+0x140>)
 801e3ae:	881b      	ldrh	r3, [r3, #0]
 801e3b0:	8bfa      	ldrh	r2, [r7, #30]
 801e3b2:	429a      	cmp	r2, r3
 801e3b4:	d905      	bls.n	801e3c2 <ip_reass_free_complete_datagram+0x112>
 801e3b6:	4b09      	ldr	r3, [pc, #36]	; (801e3dc <ip_reass_free_complete_datagram+0x12c>)
 801e3b8:	22d2      	movs	r2, #210	; 0xd2
 801e3ba:	490e      	ldr	r1, [pc, #56]	; (801e3f4 <ip_reass_free_complete_datagram+0x144>)
 801e3bc:	4809      	ldr	r0, [pc, #36]	; (801e3e4 <ip_reass_free_complete_datagram+0x134>)
 801e3be:	f000 ffd5 	bl	801f36c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e3c2:	4b0b      	ldr	r3, [pc, #44]	; (801e3f0 <ip_reass_free_complete_datagram+0x140>)
 801e3c4:	881a      	ldrh	r2, [r3, #0]
 801e3c6:	8bfb      	ldrh	r3, [r7, #30]
 801e3c8:	1ad3      	subs	r3, r2, r3
 801e3ca:	b29a      	uxth	r2, r3
 801e3cc:	4b08      	ldr	r3, [pc, #32]	; (801e3f0 <ip_reass_free_complete_datagram+0x140>)
 801e3ce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801e3d0:	8bfb      	ldrh	r3, [r7, #30]
}
 801e3d2:	4618      	mov	r0, r3
 801e3d4:	3720      	adds	r7, #32
 801e3d6:	46bd      	mov	sp, r7
 801e3d8:	bd80      	pop	{r7, pc}
 801e3da:	bf00      	nop
 801e3dc:	08023ffc 	.word	0x08023ffc
 801e3e0:	08024038 	.word	0x08024038
 801e3e4:	08024044 	.word	0x08024044
 801e3e8:	0802406c 	.word	0x0802406c
 801e3ec:	08024080 	.word	0x08024080
 801e3f0:	2000c934 	.word	0x2000c934
 801e3f4:	080240a0 	.word	0x080240a0

0801e3f8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801e3f8:	b580      	push	{r7, lr}
 801e3fa:	b08a      	sub	sp, #40	; 0x28
 801e3fc:	af00      	add	r7, sp, #0
 801e3fe:	6078      	str	r0, [r7, #4]
 801e400:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801e402:	2300      	movs	r3, #0
 801e404:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801e406:	2300      	movs	r3, #0
 801e408:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801e40a:	2300      	movs	r3, #0
 801e40c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801e40e:	2300      	movs	r3, #0
 801e410:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801e412:	2300      	movs	r3, #0
 801e414:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801e416:	4b28      	ldr	r3, [pc, #160]	; (801e4b8 <ip_reass_remove_oldest_datagram+0xc0>)
 801e418:	681b      	ldr	r3, [r3, #0]
 801e41a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801e41c:	e030      	b.n	801e480 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e420:	695a      	ldr	r2, [r3, #20]
 801e422:	687b      	ldr	r3, [r7, #4]
 801e424:	68db      	ldr	r3, [r3, #12]
 801e426:	429a      	cmp	r2, r3
 801e428:	d10c      	bne.n	801e444 <ip_reass_remove_oldest_datagram+0x4c>
 801e42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e42c:	699a      	ldr	r2, [r3, #24]
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	691b      	ldr	r3, [r3, #16]
 801e432:	429a      	cmp	r2, r3
 801e434:	d106      	bne.n	801e444 <ip_reass_remove_oldest_datagram+0x4c>
 801e436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e438:	899a      	ldrh	r2, [r3, #12]
 801e43a:	687b      	ldr	r3, [r7, #4]
 801e43c:	889b      	ldrh	r3, [r3, #4]
 801e43e:	b29b      	uxth	r3, r3
 801e440:	429a      	cmp	r2, r3
 801e442:	d014      	beq.n	801e46e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801e444:	693b      	ldr	r3, [r7, #16]
 801e446:	3301      	adds	r3, #1
 801e448:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801e44a:	6a3b      	ldr	r3, [r7, #32]
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d104      	bne.n	801e45a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801e450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e452:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e454:	69fb      	ldr	r3, [r7, #28]
 801e456:	61bb      	str	r3, [r7, #24]
 801e458:	e009      	b.n	801e46e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801e45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e45c:	7fda      	ldrb	r2, [r3, #31]
 801e45e:	6a3b      	ldr	r3, [r7, #32]
 801e460:	7fdb      	ldrb	r3, [r3, #31]
 801e462:	429a      	cmp	r2, r3
 801e464:	d803      	bhi.n	801e46e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801e466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e468:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e46a:	69fb      	ldr	r3, [r7, #28]
 801e46c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801e46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	2b00      	cmp	r3, #0
 801e474:	d001      	beq.n	801e47a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801e476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e478:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801e47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e47c:	681b      	ldr	r3, [r3, #0]
 801e47e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801e480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e482:	2b00      	cmp	r3, #0
 801e484:	d1cb      	bne.n	801e41e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801e486:	6a3b      	ldr	r3, [r7, #32]
 801e488:	2b00      	cmp	r3, #0
 801e48a:	d008      	beq.n	801e49e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801e48c:	69b9      	ldr	r1, [r7, #24]
 801e48e:	6a38      	ldr	r0, [r7, #32]
 801e490:	f7ff ff0e 	bl	801e2b0 <ip_reass_free_complete_datagram>
 801e494:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801e496:	697a      	ldr	r2, [r7, #20]
 801e498:	68fb      	ldr	r3, [r7, #12]
 801e49a:	4413      	add	r3, r2
 801e49c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801e49e:	697a      	ldr	r2, [r7, #20]
 801e4a0:	683b      	ldr	r3, [r7, #0]
 801e4a2:	429a      	cmp	r2, r3
 801e4a4:	da02      	bge.n	801e4ac <ip_reass_remove_oldest_datagram+0xb4>
 801e4a6:	693b      	ldr	r3, [r7, #16]
 801e4a8:	2b01      	cmp	r3, #1
 801e4aa:	dcac      	bgt.n	801e406 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801e4ac:	697b      	ldr	r3, [r7, #20]
}
 801e4ae:	4618      	mov	r0, r3
 801e4b0:	3728      	adds	r7, #40	; 0x28
 801e4b2:	46bd      	mov	sp, r7
 801e4b4:	bd80      	pop	{r7, pc}
 801e4b6:	bf00      	nop
 801e4b8:	2000c930 	.word	0x2000c930

0801e4bc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801e4bc:	b580      	push	{r7, lr}
 801e4be:	b084      	sub	sp, #16
 801e4c0:	af00      	add	r7, sp, #0
 801e4c2:	6078      	str	r0, [r7, #4]
 801e4c4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e4c6:	2004      	movs	r0, #4
 801e4c8:	f7f6 fde8 	bl	801509c <memp_malloc>
 801e4cc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801e4ce:	68fb      	ldr	r3, [r7, #12]
 801e4d0:	2b00      	cmp	r3, #0
 801e4d2:	d110      	bne.n	801e4f6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801e4d4:	6839      	ldr	r1, [r7, #0]
 801e4d6:	6878      	ldr	r0, [r7, #4]
 801e4d8:	f7ff ff8e 	bl	801e3f8 <ip_reass_remove_oldest_datagram>
 801e4dc:	4602      	mov	r2, r0
 801e4de:	683b      	ldr	r3, [r7, #0]
 801e4e0:	4293      	cmp	r3, r2
 801e4e2:	dc03      	bgt.n	801e4ec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e4e4:	2004      	movs	r0, #4
 801e4e6:	f7f6 fdd9 	bl	801509c <memp_malloc>
 801e4ea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801e4ec:	68fb      	ldr	r3, [r7, #12]
 801e4ee:	2b00      	cmp	r3, #0
 801e4f0:	d101      	bne.n	801e4f6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801e4f2:	2300      	movs	r3, #0
 801e4f4:	e016      	b.n	801e524 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801e4f6:	2220      	movs	r2, #32
 801e4f8:	2100      	movs	r1, #0
 801e4fa:	68f8      	ldr	r0, [r7, #12]
 801e4fc:	f000 ff2e 	bl	801f35c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801e500:	68fb      	ldr	r3, [r7, #12]
 801e502:	220f      	movs	r2, #15
 801e504:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801e506:	4b09      	ldr	r3, [pc, #36]	; (801e52c <ip_reass_enqueue_new_datagram+0x70>)
 801e508:	681a      	ldr	r2, [r3, #0]
 801e50a:	68fb      	ldr	r3, [r7, #12]
 801e50c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801e50e:	4a07      	ldr	r2, [pc, #28]	; (801e52c <ip_reass_enqueue_new_datagram+0x70>)
 801e510:	68fb      	ldr	r3, [r7, #12]
 801e512:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801e514:	68fb      	ldr	r3, [r7, #12]
 801e516:	3308      	adds	r3, #8
 801e518:	2214      	movs	r2, #20
 801e51a:	6879      	ldr	r1, [r7, #4]
 801e51c:	4618      	mov	r0, r3
 801e51e:	f000 fef5 	bl	801f30c <memcpy>
  return ipr;
 801e522:	68fb      	ldr	r3, [r7, #12]
}
 801e524:	4618      	mov	r0, r3
 801e526:	3710      	adds	r7, #16
 801e528:	46bd      	mov	sp, r7
 801e52a:	bd80      	pop	{r7, pc}
 801e52c:	2000c930 	.word	0x2000c930

0801e530 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e530:	b580      	push	{r7, lr}
 801e532:	b082      	sub	sp, #8
 801e534:	af00      	add	r7, sp, #0
 801e536:	6078      	str	r0, [r7, #4]
 801e538:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801e53a:	4b10      	ldr	r3, [pc, #64]	; (801e57c <ip_reass_dequeue_datagram+0x4c>)
 801e53c:	681b      	ldr	r3, [r3, #0]
 801e53e:	687a      	ldr	r2, [r7, #4]
 801e540:	429a      	cmp	r2, r3
 801e542:	d104      	bne.n	801e54e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	681b      	ldr	r3, [r3, #0]
 801e548:	4a0c      	ldr	r2, [pc, #48]	; (801e57c <ip_reass_dequeue_datagram+0x4c>)
 801e54a:	6013      	str	r3, [r2, #0]
 801e54c:	e00d      	b.n	801e56a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e54e:	683b      	ldr	r3, [r7, #0]
 801e550:	2b00      	cmp	r3, #0
 801e552:	d106      	bne.n	801e562 <ip_reass_dequeue_datagram+0x32>
 801e554:	4b0a      	ldr	r3, [pc, #40]	; (801e580 <ip_reass_dequeue_datagram+0x50>)
 801e556:	f240 1245 	movw	r2, #325	; 0x145
 801e55a:	490a      	ldr	r1, [pc, #40]	; (801e584 <ip_reass_dequeue_datagram+0x54>)
 801e55c:	480a      	ldr	r0, [pc, #40]	; (801e588 <ip_reass_dequeue_datagram+0x58>)
 801e55e:	f000 ff05 	bl	801f36c <iprintf>
    prev->next = ipr->next;
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	681a      	ldr	r2, [r3, #0]
 801e566:	683b      	ldr	r3, [r7, #0]
 801e568:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801e56a:	6879      	ldr	r1, [r7, #4]
 801e56c:	2004      	movs	r0, #4
 801e56e:	f7f6 fde7 	bl	8015140 <memp_free>
}
 801e572:	bf00      	nop
 801e574:	3708      	adds	r7, #8
 801e576:	46bd      	mov	sp, r7
 801e578:	bd80      	pop	{r7, pc}
 801e57a:	bf00      	nop
 801e57c:	2000c930 	.word	0x2000c930
 801e580:	08023ffc 	.word	0x08023ffc
 801e584:	080240c4 	.word	0x080240c4
 801e588:	08024044 	.word	0x08024044

0801e58c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801e58c:	b580      	push	{r7, lr}
 801e58e:	b08c      	sub	sp, #48	; 0x30
 801e590:	af00      	add	r7, sp, #0
 801e592:	60f8      	str	r0, [r7, #12]
 801e594:	60b9      	str	r1, [r7, #8]
 801e596:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801e598:	2300      	movs	r3, #0
 801e59a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801e59c:	2301      	movs	r3, #1
 801e59e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801e5a0:	68bb      	ldr	r3, [r7, #8]
 801e5a2:	685b      	ldr	r3, [r3, #4]
 801e5a4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e5a6:	69fb      	ldr	r3, [r7, #28]
 801e5a8:	885b      	ldrh	r3, [r3, #2]
 801e5aa:	b29b      	uxth	r3, r3
 801e5ac:	4618      	mov	r0, r3
 801e5ae:	f7f6 f889 	bl	80146c4 <lwip_htons>
 801e5b2:	4603      	mov	r3, r0
 801e5b4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801e5b6:	69fb      	ldr	r3, [r7, #28]
 801e5b8:	781b      	ldrb	r3, [r3, #0]
 801e5ba:	f003 030f 	and.w	r3, r3, #15
 801e5be:	b2db      	uxtb	r3, r3
 801e5c0:	009b      	lsls	r3, r3, #2
 801e5c2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801e5c4:	7e7b      	ldrb	r3, [r7, #25]
 801e5c6:	b29b      	uxth	r3, r3
 801e5c8:	8b7a      	ldrh	r2, [r7, #26]
 801e5ca:	429a      	cmp	r2, r3
 801e5cc:	d202      	bcs.n	801e5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e5ce:	f04f 33ff 	mov.w	r3, #4294967295
 801e5d2:	e135      	b.n	801e840 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801e5d4:	7e7b      	ldrb	r3, [r7, #25]
 801e5d6:	b29b      	uxth	r3, r3
 801e5d8:	8b7a      	ldrh	r2, [r7, #26]
 801e5da:	1ad3      	subs	r3, r2, r3
 801e5dc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e5de:	69fb      	ldr	r3, [r7, #28]
 801e5e0:	88db      	ldrh	r3, [r3, #6]
 801e5e2:	b29b      	uxth	r3, r3
 801e5e4:	4618      	mov	r0, r3
 801e5e6:	f7f6 f86d 	bl	80146c4 <lwip_htons>
 801e5ea:	4603      	mov	r3, r0
 801e5ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e5f0:	b29b      	uxth	r3, r3
 801e5f2:	00db      	lsls	r3, r3, #3
 801e5f4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801e5f6:	68bb      	ldr	r3, [r7, #8]
 801e5f8:	685b      	ldr	r3, [r3, #4]
 801e5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801e5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5fe:	2200      	movs	r2, #0
 801e600:	701a      	strb	r2, [r3, #0]
 801e602:	2200      	movs	r2, #0
 801e604:	705a      	strb	r2, [r3, #1]
 801e606:	2200      	movs	r2, #0
 801e608:	709a      	strb	r2, [r3, #2]
 801e60a:	2200      	movs	r2, #0
 801e60c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801e60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e610:	8afa      	ldrh	r2, [r7, #22]
 801e612:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801e614:	8afa      	ldrh	r2, [r7, #22]
 801e616:	8b7b      	ldrh	r3, [r7, #26]
 801e618:	4413      	add	r3, r2
 801e61a:	b29a      	uxth	r2, r3
 801e61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e61e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e622:	88db      	ldrh	r3, [r3, #6]
 801e624:	b29b      	uxth	r3, r3
 801e626:	8afa      	ldrh	r2, [r7, #22]
 801e628:	429a      	cmp	r2, r3
 801e62a:	d902      	bls.n	801e632 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e62c:	f04f 33ff 	mov.w	r3, #4294967295
 801e630:	e106      	b.n	801e840 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801e632:	68fb      	ldr	r3, [r7, #12]
 801e634:	685b      	ldr	r3, [r3, #4]
 801e636:	627b      	str	r3, [r7, #36]	; 0x24
 801e638:	e068      	b.n	801e70c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801e63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e63c:	685b      	ldr	r3, [r3, #4]
 801e63e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801e640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e642:	889b      	ldrh	r3, [r3, #4]
 801e644:	b29a      	uxth	r2, r3
 801e646:	693b      	ldr	r3, [r7, #16]
 801e648:	889b      	ldrh	r3, [r3, #4]
 801e64a:	b29b      	uxth	r3, r3
 801e64c:	429a      	cmp	r2, r3
 801e64e:	d235      	bcs.n	801e6bc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801e650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e654:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801e656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e658:	2b00      	cmp	r3, #0
 801e65a:	d020      	beq.n	801e69e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801e65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e65e:	889b      	ldrh	r3, [r3, #4]
 801e660:	b29a      	uxth	r2, r3
 801e662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e664:	88db      	ldrh	r3, [r3, #6]
 801e666:	b29b      	uxth	r3, r3
 801e668:	429a      	cmp	r2, r3
 801e66a:	d307      	bcc.n	801e67c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801e66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e66e:	88db      	ldrh	r3, [r3, #6]
 801e670:	b29a      	uxth	r2, r3
 801e672:	693b      	ldr	r3, [r7, #16]
 801e674:	889b      	ldrh	r3, [r3, #4]
 801e676:	b29b      	uxth	r3, r3
 801e678:	429a      	cmp	r2, r3
 801e67a:	d902      	bls.n	801e682 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e67c:	f04f 33ff 	mov.w	r3, #4294967295
 801e680:	e0de      	b.n	801e840 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801e682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e684:	68ba      	ldr	r2, [r7, #8]
 801e686:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801e688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e68a:	88db      	ldrh	r3, [r3, #6]
 801e68c:	b29a      	uxth	r2, r3
 801e68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e690:	889b      	ldrh	r3, [r3, #4]
 801e692:	b29b      	uxth	r3, r3
 801e694:	429a      	cmp	r2, r3
 801e696:	d03d      	beq.n	801e714 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e698:	2300      	movs	r3, #0
 801e69a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801e69c:	e03a      	b.n	801e714 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801e69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6a0:	88db      	ldrh	r3, [r3, #6]
 801e6a2:	b29a      	uxth	r2, r3
 801e6a4:	693b      	ldr	r3, [r7, #16]
 801e6a6:	889b      	ldrh	r3, [r3, #4]
 801e6a8:	b29b      	uxth	r3, r3
 801e6aa:	429a      	cmp	r2, r3
 801e6ac:	d902      	bls.n	801e6b4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e6ae:	f04f 33ff 	mov.w	r3, #4294967295
 801e6b2:	e0c5      	b.n	801e840 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801e6b4:	68fb      	ldr	r3, [r7, #12]
 801e6b6:	68ba      	ldr	r2, [r7, #8]
 801e6b8:	605a      	str	r2, [r3, #4]
      break;
 801e6ba:	e02b      	b.n	801e714 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801e6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6be:	889b      	ldrh	r3, [r3, #4]
 801e6c0:	b29a      	uxth	r2, r3
 801e6c2:	693b      	ldr	r3, [r7, #16]
 801e6c4:	889b      	ldrh	r3, [r3, #4]
 801e6c6:	b29b      	uxth	r3, r3
 801e6c8:	429a      	cmp	r2, r3
 801e6ca:	d102      	bne.n	801e6d2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e6cc:	f04f 33ff 	mov.w	r3, #4294967295
 801e6d0:	e0b6      	b.n	801e840 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801e6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6d4:	889b      	ldrh	r3, [r3, #4]
 801e6d6:	b29a      	uxth	r2, r3
 801e6d8:	693b      	ldr	r3, [r7, #16]
 801e6da:	88db      	ldrh	r3, [r3, #6]
 801e6dc:	b29b      	uxth	r3, r3
 801e6de:	429a      	cmp	r2, r3
 801e6e0:	d202      	bcs.n	801e6e8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e6e2:	f04f 33ff 	mov.w	r3, #4294967295
 801e6e6:	e0ab      	b.n	801e840 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801e6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d009      	beq.n	801e702 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801e6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6f0:	88db      	ldrh	r3, [r3, #6]
 801e6f2:	b29a      	uxth	r2, r3
 801e6f4:	693b      	ldr	r3, [r7, #16]
 801e6f6:	889b      	ldrh	r3, [r3, #4]
 801e6f8:	b29b      	uxth	r3, r3
 801e6fa:	429a      	cmp	r2, r3
 801e6fc:	d001      	beq.n	801e702 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e6fe:	2300      	movs	r3, #0
 801e700:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801e702:	693b      	ldr	r3, [r7, #16]
 801e704:	681b      	ldr	r3, [r3, #0]
 801e706:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801e708:	693b      	ldr	r3, [r7, #16]
 801e70a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801e70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e70e:	2b00      	cmp	r3, #0
 801e710:	d193      	bne.n	801e63a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801e712:	e000      	b.n	801e716 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801e714:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801e716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e718:	2b00      	cmp	r3, #0
 801e71a:	d12d      	bne.n	801e778 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801e71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e71e:	2b00      	cmp	r3, #0
 801e720:	d01c      	beq.n	801e75c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801e722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e724:	88db      	ldrh	r3, [r3, #6]
 801e726:	b29a      	uxth	r2, r3
 801e728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e72a:	889b      	ldrh	r3, [r3, #4]
 801e72c:	b29b      	uxth	r3, r3
 801e72e:	429a      	cmp	r2, r3
 801e730:	d906      	bls.n	801e740 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801e732:	4b45      	ldr	r3, [pc, #276]	; (801e848 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e734:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801e738:	4944      	ldr	r1, [pc, #272]	; (801e84c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801e73a:	4845      	ldr	r0, [pc, #276]	; (801e850 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e73c:	f000 fe16 	bl	801f36c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801e740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e742:	68ba      	ldr	r2, [r7, #8]
 801e744:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801e746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e748:	88db      	ldrh	r3, [r3, #6]
 801e74a:	b29a      	uxth	r2, r3
 801e74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e74e:	889b      	ldrh	r3, [r3, #4]
 801e750:	b29b      	uxth	r3, r3
 801e752:	429a      	cmp	r2, r3
 801e754:	d010      	beq.n	801e778 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801e756:	2300      	movs	r3, #0
 801e758:	623b      	str	r3, [r7, #32]
 801e75a:	e00d      	b.n	801e778 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801e75c:	68fb      	ldr	r3, [r7, #12]
 801e75e:	685b      	ldr	r3, [r3, #4]
 801e760:	2b00      	cmp	r3, #0
 801e762:	d006      	beq.n	801e772 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801e764:	4b38      	ldr	r3, [pc, #224]	; (801e848 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e766:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801e76a:	493a      	ldr	r1, [pc, #232]	; (801e854 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801e76c:	4838      	ldr	r0, [pc, #224]	; (801e850 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e76e:	f000 fdfd 	bl	801f36c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801e772:	68fb      	ldr	r3, [r7, #12]
 801e774:	68ba      	ldr	r2, [r7, #8]
 801e776:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e778:	687b      	ldr	r3, [r7, #4]
 801e77a:	2b00      	cmp	r3, #0
 801e77c:	d105      	bne.n	801e78a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801e77e:	68fb      	ldr	r3, [r7, #12]
 801e780:	7f9b      	ldrb	r3, [r3, #30]
 801e782:	f003 0301 	and.w	r3, r3, #1
 801e786:	2b00      	cmp	r3, #0
 801e788:	d059      	beq.n	801e83e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801e78a:	6a3b      	ldr	r3, [r7, #32]
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	d04f      	beq.n	801e830 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801e790:	68fb      	ldr	r3, [r7, #12]
 801e792:	685b      	ldr	r3, [r3, #4]
 801e794:	2b00      	cmp	r3, #0
 801e796:	d006      	beq.n	801e7a6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801e798:	68fb      	ldr	r3, [r7, #12]
 801e79a:	685b      	ldr	r3, [r3, #4]
 801e79c:	685b      	ldr	r3, [r3, #4]
 801e79e:	889b      	ldrh	r3, [r3, #4]
 801e7a0:	b29b      	uxth	r3, r3
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	d002      	beq.n	801e7ac <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801e7a6:	2300      	movs	r3, #0
 801e7a8:	623b      	str	r3, [r7, #32]
 801e7aa:	e041      	b.n	801e830 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801e7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7ae:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801e7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7b2:	681b      	ldr	r3, [r3, #0]
 801e7b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e7b6:	e012      	b.n	801e7de <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801e7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7ba:	685b      	ldr	r3, [r3, #4]
 801e7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801e7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7c0:	88db      	ldrh	r3, [r3, #6]
 801e7c2:	b29a      	uxth	r2, r3
 801e7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7c6:	889b      	ldrh	r3, [r3, #4]
 801e7c8:	b29b      	uxth	r3, r3
 801e7ca:	429a      	cmp	r2, r3
 801e7cc:	d002      	beq.n	801e7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801e7ce:	2300      	movs	r3, #0
 801e7d0:	623b      	str	r3, [r7, #32]
            break;
 801e7d2:	e007      	b.n	801e7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801e7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7d6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801e7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7da:	681b      	ldr	r3, [r3, #0]
 801e7dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7e0:	2b00      	cmp	r3, #0
 801e7e2:	d1e9      	bne.n	801e7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801e7e4:	6a3b      	ldr	r3, [r7, #32]
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	d022      	beq.n	801e830 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801e7ea:	68fb      	ldr	r3, [r7, #12]
 801e7ec:	685b      	ldr	r3, [r3, #4]
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d106      	bne.n	801e800 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801e7f2:	4b15      	ldr	r3, [pc, #84]	; (801e848 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e7f4:	f240 12df 	movw	r2, #479	; 0x1df
 801e7f8:	4917      	ldr	r1, [pc, #92]	; (801e858 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e7fa:	4815      	ldr	r0, [pc, #84]	; (801e850 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e7fc:	f000 fdb6 	bl	801f36c <iprintf>
          LWIP_ASSERT("sanity check",
 801e800:	68fb      	ldr	r3, [r7, #12]
 801e802:	685b      	ldr	r3, [r3, #4]
 801e804:	685b      	ldr	r3, [r3, #4]
 801e806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e808:	429a      	cmp	r2, r3
 801e80a:	d106      	bne.n	801e81a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801e80c:	4b0e      	ldr	r3, [pc, #56]	; (801e848 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e80e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801e812:	4911      	ldr	r1, [pc, #68]	; (801e858 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e814:	480e      	ldr	r0, [pc, #56]	; (801e850 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e816:	f000 fda9 	bl	801f36c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801e81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e81c:	681b      	ldr	r3, [r3, #0]
 801e81e:	2b00      	cmp	r3, #0
 801e820:	d006      	beq.n	801e830 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801e822:	4b09      	ldr	r3, [pc, #36]	; (801e848 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e824:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801e828:	490c      	ldr	r1, [pc, #48]	; (801e85c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801e82a:	4809      	ldr	r0, [pc, #36]	; (801e850 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e82c:	f000 fd9e 	bl	801f36c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801e830:	6a3b      	ldr	r3, [r7, #32]
 801e832:	2b00      	cmp	r3, #0
 801e834:	bf14      	ite	ne
 801e836:	2301      	movne	r3, #1
 801e838:	2300      	moveq	r3, #0
 801e83a:	b2db      	uxtb	r3, r3
 801e83c:	e000      	b.n	801e840 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801e83e:	2300      	movs	r3, #0
}
 801e840:	4618      	mov	r0, r3
 801e842:	3730      	adds	r7, #48	; 0x30
 801e844:	46bd      	mov	sp, r7
 801e846:	bd80      	pop	{r7, pc}
 801e848:	08023ffc 	.word	0x08023ffc
 801e84c:	080240e0 	.word	0x080240e0
 801e850:	08024044 	.word	0x08024044
 801e854:	08024100 	.word	0x08024100
 801e858:	08024138 	.word	0x08024138
 801e85c:	08024148 	.word	0x08024148

0801e860 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801e860:	b580      	push	{r7, lr}
 801e862:	b08e      	sub	sp, #56	; 0x38
 801e864:	af00      	add	r7, sp, #0
 801e866:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801e868:	687b      	ldr	r3, [r7, #4]
 801e86a:	685b      	ldr	r3, [r3, #4]
 801e86c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e870:	781b      	ldrb	r3, [r3, #0]
 801e872:	f003 030f 	and.w	r3, r3, #15
 801e876:	b2db      	uxtb	r3, r3
 801e878:	009b      	lsls	r3, r3, #2
 801e87a:	b2db      	uxtb	r3, r3
 801e87c:	2b14      	cmp	r3, #20
 801e87e:	f040 8167 	bne.w	801eb50 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801e882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e884:	88db      	ldrh	r3, [r3, #6]
 801e886:	b29b      	uxth	r3, r3
 801e888:	4618      	mov	r0, r3
 801e88a:	f7f5 ff1b 	bl	80146c4 <lwip_htons>
 801e88e:	4603      	mov	r3, r0
 801e890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e894:	b29b      	uxth	r3, r3
 801e896:	00db      	lsls	r3, r3, #3
 801e898:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e89c:	885b      	ldrh	r3, [r3, #2]
 801e89e:	b29b      	uxth	r3, r3
 801e8a0:	4618      	mov	r0, r3
 801e8a2:	f7f5 ff0f 	bl	80146c4 <lwip_htons>
 801e8a6:	4603      	mov	r3, r0
 801e8a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801e8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8ac:	781b      	ldrb	r3, [r3, #0]
 801e8ae:	f003 030f 	and.w	r3, r3, #15
 801e8b2:	b2db      	uxtb	r3, r3
 801e8b4:	009b      	lsls	r3, r3, #2
 801e8b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801e8ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e8be:	b29b      	uxth	r3, r3
 801e8c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e8c2:	429a      	cmp	r2, r3
 801e8c4:	f0c0 8146 	bcc.w	801eb54 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801e8c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e8cc:	b29b      	uxth	r3, r3
 801e8ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e8d0:	1ad3      	subs	r3, r2, r3
 801e8d2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801e8d4:	6878      	ldr	r0, [r7, #4]
 801e8d6:	f7f7 fb77 	bl	8015fc8 <pbuf_clen>
 801e8da:	4603      	mov	r3, r0
 801e8dc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e8de:	4b9f      	ldr	r3, [pc, #636]	; (801eb5c <ip4_reass+0x2fc>)
 801e8e0:	881b      	ldrh	r3, [r3, #0]
 801e8e2:	461a      	mov	r2, r3
 801e8e4:	8c3b      	ldrh	r3, [r7, #32]
 801e8e6:	4413      	add	r3, r2
 801e8e8:	2b0a      	cmp	r3, #10
 801e8ea:	dd10      	ble.n	801e90e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e8ec:	8c3b      	ldrh	r3, [r7, #32]
 801e8ee:	4619      	mov	r1, r3
 801e8f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e8f2:	f7ff fd81 	bl	801e3f8 <ip_reass_remove_oldest_datagram>
 801e8f6:	4603      	mov	r3, r0
 801e8f8:	2b00      	cmp	r3, #0
 801e8fa:	f000 812d 	beq.w	801eb58 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801e8fe:	4b97      	ldr	r3, [pc, #604]	; (801eb5c <ip4_reass+0x2fc>)
 801e900:	881b      	ldrh	r3, [r3, #0]
 801e902:	461a      	mov	r2, r3
 801e904:	8c3b      	ldrh	r3, [r7, #32]
 801e906:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e908:	2b0a      	cmp	r3, #10
 801e90a:	f300 8125 	bgt.w	801eb58 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e90e:	4b94      	ldr	r3, [pc, #592]	; (801eb60 <ip4_reass+0x300>)
 801e910:	681b      	ldr	r3, [r3, #0]
 801e912:	633b      	str	r3, [r7, #48]	; 0x30
 801e914:	e015      	b.n	801e942 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e918:	695a      	ldr	r2, [r3, #20]
 801e91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e91c:	68db      	ldr	r3, [r3, #12]
 801e91e:	429a      	cmp	r2, r3
 801e920:	d10c      	bne.n	801e93c <ip4_reass+0xdc>
 801e922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e924:	699a      	ldr	r2, [r3, #24]
 801e926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e928:	691b      	ldr	r3, [r3, #16]
 801e92a:	429a      	cmp	r2, r3
 801e92c:	d106      	bne.n	801e93c <ip4_reass+0xdc>
 801e92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e930:	899a      	ldrh	r2, [r3, #12]
 801e932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e934:	889b      	ldrh	r3, [r3, #4]
 801e936:	b29b      	uxth	r3, r3
 801e938:	429a      	cmp	r2, r3
 801e93a:	d006      	beq.n	801e94a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e93e:	681b      	ldr	r3, [r3, #0]
 801e940:	633b      	str	r3, [r7, #48]	; 0x30
 801e942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e944:	2b00      	cmp	r3, #0
 801e946:	d1e6      	bne.n	801e916 <ip4_reass+0xb6>
 801e948:	e000      	b.n	801e94c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801e94a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801e94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e94e:	2b00      	cmp	r3, #0
 801e950:	d109      	bne.n	801e966 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801e952:	8c3b      	ldrh	r3, [r7, #32]
 801e954:	4619      	mov	r1, r3
 801e956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e958:	f7ff fdb0 	bl	801e4bc <ip_reass_enqueue_new_datagram>
 801e95c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801e95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e960:	2b00      	cmp	r3, #0
 801e962:	d11c      	bne.n	801e99e <ip4_reass+0x13e>
      goto nullreturn;
 801e964:	e109      	b.n	801eb7a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e968:	88db      	ldrh	r3, [r3, #6]
 801e96a:	b29b      	uxth	r3, r3
 801e96c:	4618      	mov	r0, r3
 801e96e:	f7f5 fea9 	bl	80146c4 <lwip_htons>
 801e972:	4603      	mov	r3, r0
 801e974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e978:	2b00      	cmp	r3, #0
 801e97a:	d110      	bne.n	801e99e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801e97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e97e:	89db      	ldrh	r3, [r3, #14]
 801e980:	4618      	mov	r0, r3
 801e982:	f7f5 fe9f 	bl	80146c4 <lwip_htons>
 801e986:	4603      	mov	r3, r0
 801e988:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e98c:	2b00      	cmp	r3, #0
 801e98e:	d006      	beq.n	801e99e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801e990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e992:	3308      	adds	r3, #8
 801e994:	2214      	movs	r2, #20
 801e996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e998:	4618      	mov	r0, r3
 801e99a:	f000 fcb7 	bl	801f30c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801e99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e9a0:	88db      	ldrh	r3, [r3, #6]
 801e9a2:	b29b      	uxth	r3, r3
 801e9a4:	f003 0320 	and.w	r3, r3, #32
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	bf0c      	ite	eq
 801e9ac:	2301      	moveq	r3, #1
 801e9ae:	2300      	movne	r3, #0
 801e9b0:	b2db      	uxtb	r3, r3
 801e9b2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801e9b4:	69fb      	ldr	r3, [r7, #28]
 801e9b6:	2b00      	cmp	r3, #0
 801e9b8:	d00e      	beq.n	801e9d8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801e9ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801e9bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e9be:	4413      	add	r3, r2
 801e9c0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801e9c2:	8b7a      	ldrh	r2, [r7, #26]
 801e9c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e9c6:	429a      	cmp	r2, r3
 801e9c8:	f0c0 80a0 	bcc.w	801eb0c <ip4_reass+0x2ac>
 801e9cc:	8b7b      	ldrh	r3, [r7, #26]
 801e9ce:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801e9d2:	4293      	cmp	r3, r2
 801e9d4:	f200 809a 	bhi.w	801eb0c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801e9d8:	69fa      	ldr	r2, [r7, #28]
 801e9da:	6879      	ldr	r1, [r7, #4]
 801e9dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e9de:	f7ff fdd5 	bl	801e58c <ip_reass_chain_frag_into_datagram_and_validate>
 801e9e2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801e9e4:	697b      	ldr	r3, [r7, #20]
 801e9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e9ea:	f000 8091 	beq.w	801eb10 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e9ee:	4b5b      	ldr	r3, [pc, #364]	; (801eb5c <ip4_reass+0x2fc>)
 801e9f0:	881a      	ldrh	r2, [r3, #0]
 801e9f2:	8c3b      	ldrh	r3, [r7, #32]
 801e9f4:	4413      	add	r3, r2
 801e9f6:	b29a      	uxth	r2, r3
 801e9f8:	4b58      	ldr	r3, [pc, #352]	; (801eb5c <ip4_reass+0x2fc>)
 801e9fa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801e9fc:	69fb      	ldr	r3, [r7, #28]
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d00d      	beq.n	801ea1e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801ea02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ea04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ea06:	4413      	add	r3, r2
 801ea08:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801ea0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea0c:	8a7a      	ldrh	r2, [r7, #18]
 801ea0e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ea10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea12:	7f9b      	ldrb	r3, [r3, #30]
 801ea14:	f043 0301 	orr.w	r3, r3, #1
 801ea18:	b2da      	uxtb	r2, r3
 801ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea1c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801ea1e:	697b      	ldr	r3, [r7, #20]
 801ea20:	2b01      	cmp	r3, #1
 801ea22:	d171      	bne.n	801eb08 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801ea24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea26:	8b9b      	ldrh	r3, [r3, #28]
 801ea28:	3314      	adds	r3, #20
 801ea2a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801ea2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea2e:	685b      	ldr	r3, [r3, #4]
 801ea30:	685b      	ldr	r3, [r3, #4]
 801ea32:	681b      	ldr	r3, [r3, #0]
 801ea34:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801ea36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea38:	685b      	ldr	r3, [r3, #4]
 801ea3a:	685b      	ldr	r3, [r3, #4]
 801ea3c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801ea3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea40:	3308      	adds	r3, #8
 801ea42:	2214      	movs	r2, #20
 801ea44:	4619      	mov	r1, r3
 801ea46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ea48:	f000 fc60 	bl	801f30c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801ea4c:	8a3b      	ldrh	r3, [r7, #16]
 801ea4e:	4618      	mov	r0, r3
 801ea50:	f7f5 fe38 	bl	80146c4 <lwip_htons>
 801ea54:	4603      	mov	r3, r0
 801ea56:	461a      	mov	r2, r3
 801ea58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ea5a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801ea5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ea5e:	2200      	movs	r2, #0
 801ea60:	719a      	strb	r2, [r3, #6]
 801ea62:	2200      	movs	r2, #0
 801ea64:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801ea66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ea68:	2200      	movs	r2, #0
 801ea6a:	729a      	strb	r2, [r3, #10]
 801ea6c:	2200      	movs	r2, #0
 801ea6e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801ea70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea72:	685b      	ldr	r3, [r3, #4]
 801ea74:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801ea76:	e00d      	b.n	801ea94 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801ea78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ea7a:	685b      	ldr	r3, [r3, #4]
 801ea7c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801ea7e:	2114      	movs	r1, #20
 801ea80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ea82:	f7f7 f97b 	bl	8015d7c <pbuf_remove_header>
      pbuf_cat(p, r);
 801ea86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ea88:	6878      	ldr	r0, [r7, #4]
 801ea8a:	f7f7 fadd 	bl	8016048 <pbuf_cat>
      r = iprh->next_pbuf;
 801ea8e:	68fb      	ldr	r3, [r7, #12]
 801ea90:	681b      	ldr	r3, [r3, #0]
 801ea92:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801ea94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ea96:	2b00      	cmp	r3, #0
 801ea98:	d1ee      	bne.n	801ea78 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801ea9a:	4b31      	ldr	r3, [pc, #196]	; (801eb60 <ip4_reass+0x300>)
 801ea9c:	681b      	ldr	r3, [r3, #0]
 801ea9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801eaa0:	429a      	cmp	r2, r3
 801eaa2:	d102      	bne.n	801eaaa <ip4_reass+0x24a>
      ipr_prev = NULL;
 801eaa4:	2300      	movs	r3, #0
 801eaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801eaa8:	e010      	b.n	801eacc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801eaaa:	4b2d      	ldr	r3, [pc, #180]	; (801eb60 <ip4_reass+0x300>)
 801eaac:	681b      	ldr	r3, [r3, #0]
 801eaae:	62fb      	str	r3, [r7, #44]	; 0x2c
 801eab0:	e007      	b.n	801eac2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801eab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eab4:	681b      	ldr	r3, [r3, #0]
 801eab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801eab8:	429a      	cmp	r2, r3
 801eaba:	d006      	beq.n	801eaca <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801eabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eabe:	681b      	ldr	r3, [r3, #0]
 801eac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801eac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eac4:	2b00      	cmp	r3, #0
 801eac6:	d1f4      	bne.n	801eab2 <ip4_reass+0x252>
 801eac8:	e000      	b.n	801eacc <ip4_reass+0x26c>
          break;
 801eaca:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801eacc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801eace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ead0:	f7ff fd2e 	bl	801e530 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801ead4:	6878      	ldr	r0, [r7, #4]
 801ead6:	f7f7 fa77 	bl	8015fc8 <pbuf_clen>
 801eada:	4603      	mov	r3, r0
 801eadc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801eade:	4b1f      	ldr	r3, [pc, #124]	; (801eb5c <ip4_reass+0x2fc>)
 801eae0:	881b      	ldrh	r3, [r3, #0]
 801eae2:	8c3a      	ldrh	r2, [r7, #32]
 801eae4:	429a      	cmp	r2, r3
 801eae6:	d906      	bls.n	801eaf6 <ip4_reass+0x296>
 801eae8:	4b1e      	ldr	r3, [pc, #120]	; (801eb64 <ip4_reass+0x304>)
 801eaea:	f240 229b 	movw	r2, #667	; 0x29b
 801eaee:	491e      	ldr	r1, [pc, #120]	; (801eb68 <ip4_reass+0x308>)
 801eaf0:	481e      	ldr	r0, [pc, #120]	; (801eb6c <ip4_reass+0x30c>)
 801eaf2:	f000 fc3b 	bl	801f36c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801eaf6:	4b19      	ldr	r3, [pc, #100]	; (801eb5c <ip4_reass+0x2fc>)
 801eaf8:	881a      	ldrh	r2, [r3, #0]
 801eafa:	8c3b      	ldrh	r3, [r7, #32]
 801eafc:	1ad3      	subs	r3, r2, r3
 801eafe:	b29a      	uxth	r2, r3
 801eb00:	4b16      	ldr	r3, [pc, #88]	; (801eb5c <ip4_reass+0x2fc>)
 801eb02:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801eb04:	687b      	ldr	r3, [r7, #4]
 801eb06:	e03c      	b.n	801eb82 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801eb08:	2300      	movs	r3, #0
 801eb0a:	e03a      	b.n	801eb82 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801eb0c:	bf00      	nop
 801eb0e:	e000      	b.n	801eb12 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801eb10:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801eb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eb14:	2b00      	cmp	r3, #0
 801eb16:	d106      	bne.n	801eb26 <ip4_reass+0x2c6>
 801eb18:	4b12      	ldr	r3, [pc, #72]	; (801eb64 <ip4_reass+0x304>)
 801eb1a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801eb1e:	4914      	ldr	r1, [pc, #80]	; (801eb70 <ip4_reass+0x310>)
 801eb20:	4812      	ldr	r0, [pc, #72]	; (801eb6c <ip4_reass+0x30c>)
 801eb22:	f000 fc23 	bl	801f36c <iprintf>
  if (ipr->p == NULL) {
 801eb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eb28:	685b      	ldr	r3, [r3, #4]
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	d124      	bne.n	801eb78 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801eb2e:	4b0c      	ldr	r3, [pc, #48]	; (801eb60 <ip4_reass+0x300>)
 801eb30:	681b      	ldr	r3, [r3, #0]
 801eb32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801eb34:	429a      	cmp	r2, r3
 801eb36:	d006      	beq.n	801eb46 <ip4_reass+0x2e6>
 801eb38:	4b0a      	ldr	r3, [pc, #40]	; (801eb64 <ip4_reass+0x304>)
 801eb3a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801eb3e:	490d      	ldr	r1, [pc, #52]	; (801eb74 <ip4_reass+0x314>)
 801eb40:	480a      	ldr	r0, [pc, #40]	; (801eb6c <ip4_reass+0x30c>)
 801eb42:	f000 fc13 	bl	801f36c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801eb46:	2100      	movs	r1, #0
 801eb48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801eb4a:	f7ff fcf1 	bl	801e530 <ip_reass_dequeue_datagram>
 801eb4e:	e014      	b.n	801eb7a <ip4_reass+0x31a>
    goto nullreturn;
 801eb50:	bf00      	nop
 801eb52:	e012      	b.n	801eb7a <ip4_reass+0x31a>
    goto nullreturn;
 801eb54:	bf00      	nop
 801eb56:	e010      	b.n	801eb7a <ip4_reass+0x31a>
      goto nullreturn;
 801eb58:	bf00      	nop
 801eb5a:	e00e      	b.n	801eb7a <ip4_reass+0x31a>
 801eb5c:	2000c934 	.word	0x2000c934
 801eb60:	2000c930 	.word	0x2000c930
 801eb64:	08023ffc 	.word	0x08023ffc
 801eb68:	0802416c 	.word	0x0802416c
 801eb6c:	08024044 	.word	0x08024044
 801eb70:	08024188 	.word	0x08024188
 801eb74:	08024194 	.word	0x08024194
  }

nullreturn:
 801eb78:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801eb7a:	6878      	ldr	r0, [r7, #4]
 801eb7c:	f7f7 f996 	bl	8015eac <pbuf_free>
  return NULL;
 801eb80:	2300      	movs	r3, #0
}
 801eb82:	4618      	mov	r0, r3
 801eb84:	3738      	adds	r7, #56	; 0x38
 801eb86:	46bd      	mov	sp, r7
 801eb88:	bd80      	pop	{r7, pc}
 801eb8a:	bf00      	nop

0801eb8c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801eb8c:	b580      	push	{r7, lr}
 801eb8e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801eb90:	2005      	movs	r0, #5
 801eb92:	f7f6 fa83 	bl	801509c <memp_malloc>
 801eb96:	4603      	mov	r3, r0
}
 801eb98:	4618      	mov	r0, r3
 801eb9a:	bd80      	pop	{r7, pc}

0801eb9c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801eb9c:	b580      	push	{r7, lr}
 801eb9e:	b082      	sub	sp, #8
 801eba0:	af00      	add	r7, sp, #0
 801eba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801eba4:	687b      	ldr	r3, [r7, #4]
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	d106      	bne.n	801ebb8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801ebaa:	4b07      	ldr	r3, [pc, #28]	; (801ebc8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801ebac:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801ebb0:	4906      	ldr	r1, [pc, #24]	; (801ebcc <ip_frag_free_pbuf_custom_ref+0x30>)
 801ebb2:	4807      	ldr	r0, [pc, #28]	; (801ebd0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801ebb4:	f000 fbda 	bl	801f36c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ebb8:	6879      	ldr	r1, [r7, #4]
 801ebba:	2005      	movs	r0, #5
 801ebbc:	f7f6 fac0 	bl	8015140 <memp_free>
}
 801ebc0:	bf00      	nop
 801ebc2:	3708      	adds	r7, #8
 801ebc4:	46bd      	mov	sp, r7
 801ebc6:	bd80      	pop	{r7, pc}
 801ebc8:	08023ffc 	.word	0x08023ffc
 801ebcc:	080241b4 	.word	0x080241b4
 801ebd0:	08024044 	.word	0x08024044

0801ebd4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ebd4:	b580      	push	{r7, lr}
 801ebd6:	b084      	sub	sp, #16
 801ebd8:	af00      	add	r7, sp, #0
 801ebda:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ebe0:	68fb      	ldr	r3, [r7, #12]
 801ebe2:	2b00      	cmp	r3, #0
 801ebe4:	d106      	bne.n	801ebf4 <ipfrag_free_pbuf_custom+0x20>
 801ebe6:	4b11      	ldr	r3, [pc, #68]	; (801ec2c <ipfrag_free_pbuf_custom+0x58>)
 801ebe8:	f240 22ce 	movw	r2, #718	; 0x2ce
 801ebec:	4910      	ldr	r1, [pc, #64]	; (801ec30 <ipfrag_free_pbuf_custom+0x5c>)
 801ebee:	4811      	ldr	r0, [pc, #68]	; (801ec34 <ipfrag_free_pbuf_custom+0x60>)
 801ebf0:	f000 fbbc 	bl	801f36c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ebf4:	68fa      	ldr	r2, [r7, #12]
 801ebf6:	687b      	ldr	r3, [r7, #4]
 801ebf8:	429a      	cmp	r2, r3
 801ebfa:	d006      	beq.n	801ec0a <ipfrag_free_pbuf_custom+0x36>
 801ebfc:	4b0b      	ldr	r3, [pc, #44]	; (801ec2c <ipfrag_free_pbuf_custom+0x58>)
 801ebfe:	f240 22cf 	movw	r2, #719	; 0x2cf
 801ec02:	490d      	ldr	r1, [pc, #52]	; (801ec38 <ipfrag_free_pbuf_custom+0x64>)
 801ec04:	480b      	ldr	r0, [pc, #44]	; (801ec34 <ipfrag_free_pbuf_custom+0x60>)
 801ec06:	f000 fbb1 	bl	801f36c <iprintf>
  if (pcr->original != NULL) {
 801ec0a:	68fb      	ldr	r3, [r7, #12]
 801ec0c:	695b      	ldr	r3, [r3, #20]
 801ec0e:	2b00      	cmp	r3, #0
 801ec10:	d004      	beq.n	801ec1c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ec12:	68fb      	ldr	r3, [r7, #12]
 801ec14:	695b      	ldr	r3, [r3, #20]
 801ec16:	4618      	mov	r0, r3
 801ec18:	f7f7 f948 	bl	8015eac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ec1c:	68f8      	ldr	r0, [r7, #12]
 801ec1e:	f7ff ffbd 	bl	801eb9c <ip_frag_free_pbuf_custom_ref>
}
 801ec22:	bf00      	nop
 801ec24:	3710      	adds	r7, #16
 801ec26:	46bd      	mov	sp, r7
 801ec28:	bd80      	pop	{r7, pc}
 801ec2a:	bf00      	nop
 801ec2c:	08023ffc 	.word	0x08023ffc
 801ec30:	080241c0 	.word	0x080241c0
 801ec34:	08024044 	.word	0x08024044
 801ec38:	080241cc 	.word	0x080241cc

0801ec3c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801ec3c:	b580      	push	{r7, lr}
 801ec3e:	b094      	sub	sp, #80	; 0x50
 801ec40:	af02      	add	r7, sp, #8
 801ec42:	60f8      	str	r0, [r7, #12]
 801ec44:	60b9      	str	r1, [r7, #8]
 801ec46:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ec48:	2300      	movs	r3, #0
 801ec4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ec4e:	68bb      	ldr	r3, [r7, #8]
 801ec50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ec52:	3b14      	subs	r3, #20
 801ec54:	2b00      	cmp	r3, #0
 801ec56:	da00      	bge.n	801ec5a <ip4_frag+0x1e>
 801ec58:	3307      	adds	r3, #7
 801ec5a:	10db      	asrs	r3, r3, #3
 801ec5c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ec5e:	2314      	movs	r3, #20
 801ec60:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ec62:	68fb      	ldr	r3, [r7, #12]
 801ec64:	685b      	ldr	r3, [r3, #4]
 801ec66:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801ec68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec6a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ec6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec6e:	781b      	ldrb	r3, [r3, #0]
 801ec70:	f003 030f 	and.w	r3, r3, #15
 801ec74:	b2db      	uxtb	r3, r3
 801ec76:	009b      	lsls	r3, r3, #2
 801ec78:	b2db      	uxtb	r3, r3
 801ec7a:	2b14      	cmp	r3, #20
 801ec7c:	d002      	beq.n	801ec84 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ec7e:	f06f 0305 	mvn.w	r3, #5
 801ec82:	e110      	b.n	801eea6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ec84:	68fb      	ldr	r3, [r7, #12]
 801ec86:	895b      	ldrh	r3, [r3, #10]
 801ec88:	2b13      	cmp	r3, #19
 801ec8a:	d809      	bhi.n	801eca0 <ip4_frag+0x64>
 801ec8c:	4b88      	ldr	r3, [pc, #544]	; (801eeb0 <ip4_frag+0x274>)
 801ec8e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801ec92:	4988      	ldr	r1, [pc, #544]	; (801eeb4 <ip4_frag+0x278>)
 801ec94:	4888      	ldr	r0, [pc, #544]	; (801eeb8 <ip4_frag+0x27c>)
 801ec96:	f000 fb69 	bl	801f36c <iprintf>
 801ec9a:	f06f 0305 	mvn.w	r3, #5
 801ec9e:	e102      	b.n	801eea6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801eca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eca2:	88db      	ldrh	r3, [r3, #6]
 801eca4:	b29b      	uxth	r3, r3
 801eca6:	4618      	mov	r0, r3
 801eca8:	f7f5 fd0c 	bl	80146c4 <lwip_htons>
 801ecac:	4603      	mov	r3, r0
 801ecae:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801ecb0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ecb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ecb6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ecba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ecbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ecc0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ecc2:	68fb      	ldr	r3, [r7, #12]
 801ecc4:	891b      	ldrh	r3, [r3, #8]
 801ecc6:	3b14      	subs	r3, #20
 801ecc8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801eccc:	e0e1      	b.n	801ee92 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ecce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ecd0:	00db      	lsls	r3, r3, #3
 801ecd2:	b29b      	uxth	r3, r3
 801ecd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ecd8:	4293      	cmp	r3, r2
 801ecda:	bf28      	it	cs
 801ecdc:	4613      	movcs	r3, r2
 801ecde:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ece0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ece4:	2114      	movs	r1, #20
 801ece6:	200e      	movs	r0, #14
 801ece8:	f7f6 fdea 	bl	80158c0 <pbuf_alloc>
 801ecec:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801ecee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecf0:	2b00      	cmp	r3, #0
 801ecf2:	f000 80d5 	beq.w	801eea0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ecf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecf8:	895b      	ldrh	r3, [r3, #10]
 801ecfa:	2b13      	cmp	r3, #19
 801ecfc:	d806      	bhi.n	801ed0c <ip4_frag+0xd0>
 801ecfe:	4b6c      	ldr	r3, [pc, #432]	; (801eeb0 <ip4_frag+0x274>)
 801ed00:	f44f 7249 	mov.w	r2, #804	; 0x324
 801ed04:	496d      	ldr	r1, [pc, #436]	; (801eebc <ip4_frag+0x280>)
 801ed06:	486c      	ldr	r0, [pc, #432]	; (801eeb8 <ip4_frag+0x27c>)
 801ed08:	f000 fb30 	bl	801f36c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ed0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed0e:	685b      	ldr	r3, [r3, #4]
 801ed10:	2214      	movs	r2, #20
 801ed12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ed14:	4618      	mov	r0, r3
 801ed16:	f000 faf9 	bl	801f30c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ed1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed1c:	685b      	ldr	r3, [r3, #4]
 801ed1e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801ed20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ed22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801ed26:	e064      	b.n	801edf2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ed28:	68fb      	ldr	r3, [r7, #12]
 801ed2a:	895a      	ldrh	r2, [r3, #10]
 801ed2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ed2e:	1ad3      	subs	r3, r2, r3
 801ed30:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ed32:	68fb      	ldr	r3, [r7, #12]
 801ed34:	895b      	ldrh	r3, [r3, #10]
 801ed36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ed38:	429a      	cmp	r2, r3
 801ed3a:	d906      	bls.n	801ed4a <ip4_frag+0x10e>
 801ed3c:	4b5c      	ldr	r3, [pc, #368]	; (801eeb0 <ip4_frag+0x274>)
 801ed3e:	f240 322d 	movw	r2, #813	; 0x32d
 801ed42:	495f      	ldr	r1, [pc, #380]	; (801eec0 <ip4_frag+0x284>)
 801ed44:	485c      	ldr	r0, [pc, #368]	; (801eeb8 <ip4_frag+0x27c>)
 801ed46:	f000 fb11 	bl	801f36c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ed4a:	8bfa      	ldrh	r2, [r7, #30]
 801ed4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ed50:	4293      	cmp	r3, r2
 801ed52:	bf28      	it	cs
 801ed54:	4613      	movcs	r3, r2
 801ed56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801ed5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ed5e:	2b00      	cmp	r3, #0
 801ed60:	d105      	bne.n	801ed6e <ip4_frag+0x132>
        poff = 0;
 801ed62:	2300      	movs	r3, #0
 801ed64:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ed66:	68fb      	ldr	r3, [r7, #12]
 801ed68:	681b      	ldr	r3, [r3, #0]
 801ed6a:	60fb      	str	r3, [r7, #12]
        continue;
 801ed6c:	e041      	b.n	801edf2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801ed6e:	f7ff ff0d 	bl	801eb8c <ip_frag_alloc_pbuf_custom_ref>
 801ed72:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801ed74:	69bb      	ldr	r3, [r7, #24]
 801ed76:	2b00      	cmp	r3, #0
 801ed78:	d103      	bne.n	801ed82 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801ed7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ed7c:	f7f7 f896 	bl	8015eac <pbuf_free>
        goto memerr;
 801ed80:	e08f      	b.n	801eea2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ed82:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801ed84:	68fb      	ldr	r3, [r7, #12]
 801ed86:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ed88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ed8a:	4413      	add	r3, r2
 801ed8c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801ed90:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ed94:	9201      	str	r2, [sp, #4]
 801ed96:	9300      	str	r3, [sp, #0]
 801ed98:	4603      	mov	r3, r0
 801ed9a:	2241      	movs	r2, #65	; 0x41
 801ed9c:	2000      	movs	r0, #0
 801ed9e:	f7f6 feb9 	bl	8015b14 <pbuf_alloced_custom>
 801eda2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801eda4:	697b      	ldr	r3, [r7, #20]
 801eda6:	2b00      	cmp	r3, #0
 801eda8:	d106      	bne.n	801edb8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801edaa:	69b8      	ldr	r0, [r7, #24]
 801edac:	f7ff fef6 	bl	801eb9c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801edb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801edb2:	f7f7 f87b 	bl	8015eac <pbuf_free>
        goto memerr;
 801edb6:	e074      	b.n	801eea2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801edb8:	68f8      	ldr	r0, [r7, #12]
 801edba:	f7f7 f91d 	bl	8015ff8 <pbuf_ref>
      pcr->original = p;
 801edbe:	69bb      	ldr	r3, [r7, #24]
 801edc0:	68fa      	ldr	r2, [r7, #12]
 801edc2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801edc4:	69bb      	ldr	r3, [r7, #24]
 801edc6:	4a3f      	ldr	r2, [pc, #252]	; (801eec4 <ip4_frag+0x288>)
 801edc8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801edca:	6979      	ldr	r1, [r7, #20]
 801edcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801edce:	f7f7 f93b 	bl	8016048 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801edd2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801edd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801edda:	1ad3      	subs	r3, r2, r3
 801eddc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801ede0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ede4:	2b00      	cmp	r3, #0
 801ede6:	d004      	beq.n	801edf2 <ip4_frag+0x1b6>
        poff = 0;
 801ede8:	2300      	movs	r3, #0
 801edea:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801edec:	68fb      	ldr	r3, [r7, #12]
 801edee:	681b      	ldr	r3, [r3, #0]
 801edf0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801edf2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	d196      	bne.n	801ed28 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801edfa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801edfc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ee00:	4413      	add	r3, r2
 801ee02:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ee04:	68bb      	ldr	r3, [r7, #8]
 801ee06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ee08:	f1a3 0213 	sub.w	r2, r3, #19
 801ee0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ee10:	429a      	cmp	r2, r3
 801ee12:	bfcc      	ite	gt
 801ee14:	2301      	movgt	r3, #1
 801ee16:	2300      	movle	r3, #0
 801ee18:	b2db      	uxtb	r3, r3
 801ee1a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ee1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ee20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ee24:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801ee26:	6a3b      	ldr	r3, [r7, #32]
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	d002      	beq.n	801ee32 <ip4_frag+0x1f6>
 801ee2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee2e:	2b00      	cmp	r3, #0
 801ee30:	d003      	beq.n	801ee3a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ee32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ee34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ee38:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ee3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ee3c:	4618      	mov	r0, r3
 801ee3e:	f7f5 fc41 	bl	80146c4 <lwip_htons>
 801ee42:	4603      	mov	r3, r0
 801ee44:	461a      	mov	r2, r3
 801ee46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee48:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ee4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ee4c:	3314      	adds	r3, #20
 801ee4e:	b29b      	uxth	r3, r3
 801ee50:	4618      	mov	r0, r3
 801ee52:	f7f5 fc37 	bl	80146c4 <lwip_htons>
 801ee56:	4603      	mov	r3, r0
 801ee58:	461a      	mov	r2, r3
 801ee5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee5c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ee5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee60:	2200      	movs	r2, #0
 801ee62:	729a      	strb	r2, [r3, #10]
 801ee64:	2200      	movs	r2, #0
 801ee66:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ee68:	68bb      	ldr	r3, [r7, #8]
 801ee6a:	695b      	ldr	r3, [r3, #20]
 801ee6c:	687a      	ldr	r2, [r7, #4]
 801ee6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ee70:	68b8      	ldr	r0, [r7, #8]
 801ee72:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ee74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ee76:	f7f7 f819 	bl	8015eac <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ee7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ee7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ee80:	1ad3      	subs	r3, r2, r3
 801ee82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801ee86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801ee8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ee8c:	4413      	add	r3, r2
 801ee8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801ee92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ee96:	2b00      	cmp	r3, #0
 801ee98:	f47f af19 	bne.w	801ecce <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ee9c:	2300      	movs	r3, #0
 801ee9e:	e002      	b.n	801eea6 <ip4_frag+0x26a>
      goto memerr;
 801eea0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801eea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801eea6:	4618      	mov	r0, r3
 801eea8:	3748      	adds	r7, #72	; 0x48
 801eeaa:	46bd      	mov	sp, r7
 801eeac:	bd80      	pop	{r7, pc}
 801eeae:	bf00      	nop
 801eeb0:	08023ffc 	.word	0x08023ffc
 801eeb4:	080241d8 	.word	0x080241d8
 801eeb8:	08024044 	.word	0x08024044
 801eebc:	080241f4 	.word	0x080241f4
 801eec0:	08024214 	.word	0x08024214
 801eec4:	0801ebd5 	.word	0x0801ebd5

0801eec8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801eec8:	b580      	push	{r7, lr}
 801eeca:	b086      	sub	sp, #24
 801eecc:	af00      	add	r7, sp, #0
 801eece:	6078      	str	r0, [r7, #4]
 801eed0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801eed2:	230e      	movs	r3, #14
 801eed4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	895b      	ldrh	r3, [r3, #10]
 801eeda:	2b0e      	cmp	r3, #14
 801eedc:	d96e      	bls.n	801efbc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	7bdb      	ldrb	r3, [r3, #15]
 801eee2:	2b00      	cmp	r3, #0
 801eee4:	d106      	bne.n	801eef4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801eee6:	683b      	ldr	r3, [r7, #0]
 801eee8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801eeec:	3301      	adds	r3, #1
 801eeee:	b2da      	uxtb	r2, r3
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	685b      	ldr	r3, [r3, #4]
 801eef8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801eefa:	693b      	ldr	r3, [r7, #16]
 801eefc:	7b1a      	ldrb	r2, [r3, #12]
 801eefe:	7b5b      	ldrb	r3, [r3, #13]
 801ef00:	021b      	lsls	r3, r3, #8
 801ef02:	4313      	orrs	r3, r2
 801ef04:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ef06:	693b      	ldr	r3, [r7, #16]
 801ef08:	781b      	ldrb	r3, [r3, #0]
 801ef0a:	f003 0301 	and.w	r3, r3, #1
 801ef0e:	2b00      	cmp	r3, #0
 801ef10:	d023      	beq.n	801ef5a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ef12:	693b      	ldr	r3, [r7, #16]
 801ef14:	781b      	ldrb	r3, [r3, #0]
 801ef16:	2b01      	cmp	r3, #1
 801ef18:	d10f      	bne.n	801ef3a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ef1a:	693b      	ldr	r3, [r7, #16]
 801ef1c:	785b      	ldrb	r3, [r3, #1]
 801ef1e:	2b00      	cmp	r3, #0
 801ef20:	d11b      	bne.n	801ef5a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ef22:	693b      	ldr	r3, [r7, #16]
 801ef24:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ef26:	2b5e      	cmp	r3, #94	; 0x5e
 801ef28:	d117      	bne.n	801ef5a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	7b5b      	ldrb	r3, [r3, #13]
 801ef2e:	f043 0310 	orr.w	r3, r3, #16
 801ef32:	b2da      	uxtb	r2, r3
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	735a      	strb	r2, [r3, #13]
 801ef38:	e00f      	b.n	801ef5a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ef3a:	693b      	ldr	r3, [r7, #16]
 801ef3c:	2206      	movs	r2, #6
 801ef3e:	4928      	ldr	r1, [pc, #160]	; (801efe0 <ethernet_input+0x118>)
 801ef40:	4618      	mov	r0, r3
 801ef42:	f000 f9d5 	bl	801f2f0 <memcmp>
 801ef46:	4603      	mov	r3, r0
 801ef48:	2b00      	cmp	r3, #0
 801ef4a:	d106      	bne.n	801ef5a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	7b5b      	ldrb	r3, [r3, #13]
 801ef50:	f043 0308 	orr.w	r3, r3, #8
 801ef54:	b2da      	uxtb	r2, r3
 801ef56:	687b      	ldr	r3, [r7, #4]
 801ef58:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801ef5a:	89fb      	ldrh	r3, [r7, #14]
 801ef5c:	2b08      	cmp	r3, #8
 801ef5e:	d003      	beq.n	801ef68 <ethernet_input+0xa0>
 801ef60:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801ef64:	d014      	beq.n	801ef90 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801ef66:	e032      	b.n	801efce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ef68:	683b      	ldr	r3, [r7, #0]
 801ef6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ef6e:	f003 0308 	and.w	r3, r3, #8
 801ef72:	2b00      	cmp	r3, #0
 801ef74:	d024      	beq.n	801efc0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ef76:	8afb      	ldrh	r3, [r7, #22]
 801ef78:	4619      	mov	r1, r3
 801ef7a:	6878      	ldr	r0, [r7, #4]
 801ef7c:	f7f6 fefe 	bl	8015d7c <pbuf_remove_header>
 801ef80:	4603      	mov	r3, r0
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	d11e      	bne.n	801efc4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801ef86:	6839      	ldr	r1, [r7, #0]
 801ef88:	6878      	ldr	r0, [r7, #4]
 801ef8a:	f7fe ff27 	bl	801dddc <ip4_input>
      break;
 801ef8e:	e013      	b.n	801efb8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ef90:	683b      	ldr	r3, [r7, #0]
 801ef92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ef96:	f003 0308 	and.w	r3, r3, #8
 801ef9a:	2b00      	cmp	r3, #0
 801ef9c:	d014      	beq.n	801efc8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ef9e:	8afb      	ldrh	r3, [r7, #22]
 801efa0:	4619      	mov	r1, r3
 801efa2:	6878      	ldr	r0, [r7, #4]
 801efa4:	f7f6 feea 	bl	8015d7c <pbuf_remove_header>
 801efa8:	4603      	mov	r3, r0
 801efaa:	2b00      	cmp	r3, #0
 801efac:	d10e      	bne.n	801efcc <ethernet_input+0x104>
        etharp_input(p, netif);
 801efae:	6839      	ldr	r1, [r7, #0]
 801efb0:	6878      	ldr	r0, [r7, #4]
 801efb2:	f7fe f8c7 	bl	801d144 <etharp_input>
      break;
 801efb6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801efb8:	2300      	movs	r3, #0
 801efba:	e00c      	b.n	801efd6 <ethernet_input+0x10e>
    goto free_and_return;
 801efbc:	bf00      	nop
 801efbe:	e006      	b.n	801efce <ethernet_input+0x106>
        goto free_and_return;
 801efc0:	bf00      	nop
 801efc2:	e004      	b.n	801efce <ethernet_input+0x106>
        goto free_and_return;
 801efc4:	bf00      	nop
 801efc6:	e002      	b.n	801efce <ethernet_input+0x106>
        goto free_and_return;
 801efc8:	bf00      	nop
 801efca:	e000      	b.n	801efce <ethernet_input+0x106>
        goto free_and_return;
 801efcc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801efce:	6878      	ldr	r0, [r7, #4]
 801efd0:	f7f6 ff6c 	bl	8015eac <pbuf_free>
  return ERR_OK;
 801efd4:	2300      	movs	r3, #0
}
 801efd6:	4618      	mov	r0, r3
 801efd8:	3718      	adds	r7, #24
 801efda:	46bd      	mov	sp, r7
 801efdc:	bd80      	pop	{r7, pc}
 801efde:	bf00      	nop
 801efe0:	0807b0fc 	.word	0x0807b0fc

0801efe4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801efe4:	b580      	push	{r7, lr}
 801efe6:	b086      	sub	sp, #24
 801efe8:	af00      	add	r7, sp, #0
 801efea:	60f8      	str	r0, [r7, #12]
 801efec:	60b9      	str	r1, [r7, #8]
 801efee:	607a      	str	r2, [r7, #4]
 801eff0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801eff2:	8c3b      	ldrh	r3, [r7, #32]
 801eff4:	4618      	mov	r0, r3
 801eff6:	f7f5 fb65 	bl	80146c4 <lwip_htons>
 801effa:	4603      	mov	r3, r0
 801effc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801effe:	210e      	movs	r1, #14
 801f000:	68b8      	ldr	r0, [r7, #8]
 801f002:	f7f6 feab 	bl	8015d5c <pbuf_add_header>
 801f006:	4603      	mov	r3, r0
 801f008:	2b00      	cmp	r3, #0
 801f00a:	d125      	bne.n	801f058 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801f00c:	68bb      	ldr	r3, [r7, #8]
 801f00e:	685b      	ldr	r3, [r3, #4]
 801f010:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801f012:	693b      	ldr	r3, [r7, #16]
 801f014:	8afa      	ldrh	r2, [r7, #22]
 801f016:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801f018:	693b      	ldr	r3, [r7, #16]
 801f01a:	2206      	movs	r2, #6
 801f01c:	6839      	ldr	r1, [r7, #0]
 801f01e:	4618      	mov	r0, r3
 801f020:	f000 f974 	bl	801f30c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801f024:	693b      	ldr	r3, [r7, #16]
 801f026:	3306      	adds	r3, #6
 801f028:	2206      	movs	r2, #6
 801f02a:	6879      	ldr	r1, [r7, #4]
 801f02c:	4618      	mov	r0, r3
 801f02e:	f000 f96d 	bl	801f30c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801f032:	68fb      	ldr	r3, [r7, #12]
 801f034:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801f038:	2b06      	cmp	r3, #6
 801f03a:	d006      	beq.n	801f04a <ethernet_output+0x66>
 801f03c:	4b0a      	ldr	r3, [pc, #40]	; (801f068 <ethernet_output+0x84>)
 801f03e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801f042:	490a      	ldr	r1, [pc, #40]	; (801f06c <ethernet_output+0x88>)
 801f044:	480a      	ldr	r0, [pc, #40]	; (801f070 <ethernet_output+0x8c>)
 801f046:	f000 f991 	bl	801f36c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801f04a:	68fb      	ldr	r3, [r7, #12]
 801f04c:	699b      	ldr	r3, [r3, #24]
 801f04e:	68b9      	ldr	r1, [r7, #8]
 801f050:	68f8      	ldr	r0, [r7, #12]
 801f052:	4798      	blx	r3
 801f054:	4603      	mov	r3, r0
 801f056:	e002      	b.n	801f05e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801f058:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801f05a:	f06f 0301 	mvn.w	r3, #1
}
 801f05e:	4618      	mov	r0, r3
 801f060:	3718      	adds	r7, #24
 801f062:	46bd      	mov	sp, r7
 801f064:	bd80      	pop	{r7, pc}
 801f066:	bf00      	nop
 801f068:	08024224 	.word	0x08024224
 801f06c:	0802425c 	.word	0x0802425c
 801f070:	08024290 	.word	0x08024290

0801f074 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801f074:	b580      	push	{r7, lr}
 801f076:	b086      	sub	sp, #24
 801f078:	af00      	add	r7, sp, #0
 801f07a:	6078      	str	r0, [r7, #4]
 801f07c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801f07e:	683b      	ldr	r3, [r7, #0]
 801f080:	60bb      	str	r3, [r7, #8]
 801f082:	2304      	movs	r3, #4
 801f084:	60fb      	str	r3, [r7, #12]
 801f086:	2300      	movs	r3, #0
 801f088:	613b      	str	r3, [r7, #16]
 801f08a:	2300      	movs	r3, #0
 801f08c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801f08e:	f107 0308 	add.w	r3, r7, #8
 801f092:	2100      	movs	r1, #0
 801f094:	4618      	mov	r0, r3
 801f096:	f7f0 fe2c 	bl	800fcf2 <osMessageCreate>
 801f09a:	4602      	mov	r2, r0
 801f09c:	687b      	ldr	r3, [r7, #4]
 801f09e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801f0a0:	687b      	ldr	r3, [r7, #4]
 801f0a2:	681b      	ldr	r3, [r3, #0]
 801f0a4:	2b00      	cmp	r3, #0
 801f0a6:	d102      	bne.n	801f0ae <sys_mbox_new+0x3a>
    return ERR_MEM;
 801f0a8:	f04f 33ff 	mov.w	r3, #4294967295
 801f0ac:	e000      	b.n	801f0b0 <sys_mbox_new+0x3c>

  return ERR_OK;
 801f0ae:	2300      	movs	r3, #0
}
 801f0b0:	4618      	mov	r0, r3
 801f0b2:	3718      	adds	r7, #24
 801f0b4:	46bd      	mov	sp, r7
 801f0b6:	bd80      	pop	{r7, pc}

0801f0b8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801f0b8:	b580      	push	{r7, lr}
 801f0ba:	b084      	sub	sp, #16
 801f0bc:	af00      	add	r7, sp, #0
 801f0be:	6078      	str	r0, [r7, #4]
 801f0c0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801f0c2:	687b      	ldr	r3, [r7, #4]
 801f0c4:	681b      	ldr	r3, [r3, #0]
 801f0c6:	6839      	ldr	r1, [r7, #0]
 801f0c8:	2200      	movs	r2, #0
 801f0ca:	4618      	mov	r0, r3
 801f0cc:	f7f0 fe3a 	bl	800fd44 <osMessagePut>
 801f0d0:	4603      	mov	r3, r0
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d102      	bne.n	801f0dc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801f0d6:	2300      	movs	r3, #0
 801f0d8:	73fb      	strb	r3, [r7, #15]
 801f0da:	e001      	b.n	801f0e0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801f0dc:	23ff      	movs	r3, #255	; 0xff
 801f0de:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801f0e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f0e4:	4618      	mov	r0, r3
 801f0e6:	3710      	adds	r7, #16
 801f0e8:	46bd      	mov	sp, r7
 801f0ea:	bd80      	pop	{r7, pc}

0801f0ec <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801f0ec:	b580      	push	{r7, lr}
 801f0ee:	b08c      	sub	sp, #48	; 0x30
 801f0f0:	af00      	add	r7, sp, #0
 801f0f2:	61f8      	str	r0, [r7, #28]
 801f0f4:	61b9      	str	r1, [r7, #24]
 801f0f6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801f0f8:	f7f0 fc25 	bl	800f946 <osKernelSysTick>
 801f0fc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801f0fe:	697b      	ldr	r3, [r7, #20]
 801f100:	2b00      	cmp	r3, #0
 801f102:	d017      	beq.n	801f134 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801f104:	69fb      	ldr	r3, [r7, #28]
 801f106:	6819      	ldr	r1, [r3, #0]
 801f108:	f107 0320 	add.w	r3, r7, #32
 801f10c:	697a      	ldr	r2, [r7, #20]
 801f10e:	4618      	mov	r0, r3
 801f110:	f7f0 fe58 	bl	800fdc4 <osMessageGet>

    if(event.status == osEventMessage)
 801f114:	6a3b      	ldr	r3, [r7, #32]
 801f116:	2b10      	cmp	r3, #16
 801f118:	d109      	bne.n	801f12e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801f11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f11c:	461a      	mov	r2, r3
 801f11e:	69bb      	ldr	r3, [r7, #24]
 801f120:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801f122:	f7f0 fc10 	bl	800f946 <osKernelSysTick>
 801f126:	4602      	mov	r2, r0
 801f128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f12a:	1ad3      	subs	r3, r2, r3
 801f12c:	e019      	b.n	801f162 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801f12e:	f04f 33ff 	mov.w	r3, #4294967295
 801f132:	e016      	b.n	801f162 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801f134:	69fb      	ldr	r3, [r7, #28]
 801f136:	6819      	ldr	r1, [r3, #0]
 801f138:	463b      	mov	r3, r7
 801f13a:	f04f 32ff 	mov.w	r2, #4294967295
 801f13e:	4618      	mov	r0, r3
 801f140:	f7f0 fe40 	bl	800fdc4 <osMessageGet>
 801f144:	f107 0320 	add.w	r3, r7, #32
 801f148:	463a      	mov	r2, r7
 801f14a:	ca07      	ldmia	r2, {r0, r1, r2}
 801f14c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f152:	461a      	mov	r2, r3
 801f154:	69bb      	ldr	r3, [r7, #24]
 801f156:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801f158:	f7f0 fbf5 	bl	800f946 <osKernelSysTick>
 801f15c:	4602      	mov	r2, r0
 801f15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f160:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801f162:	4618      	mov	r0, r3
 801f164:	3730      	adds	r7, #48	; 0x30
 801f166:	46bd      	mov	sp, r7
 801f168:	bd80      	pop	{r7, pc}

0801f16a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801f16a:	b480      	push	{r7}
 801f16c:	b083      	sub	sp, #12
 801f16e:	af00      	add	r7, sp, #0
 801f170:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	681b      	ldr	r3, [r3, #0]
 801f176:	2b00      	cmp	r3, #0
 801f178:	d101      	bne.n	801f17e <sys_mbox_valid+0x14>
    return 0;
 801f17a:	2300      	movs	r3, #0
 801f17c:	e000      	b.n	801f180 <sys_mbox_valid+0x16>
  else
    return 1;
 801f17e:	2301      	movs	r3, #1
}
 801f180:	4618      	mov	r0, r3
 801f182:	370c      	adds	r7, #12
 801f184:	46bd      	mov	sp, r7
 801f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f18a:	4770      	bx	lr

0801f18c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801f18c:	b580      	push	{r7, lr}
 801f18e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801f190:	4803      	ldr	r0, [pc, #12]	; (801f1a0 <sys_init+0x14>)
 801f192:	f7f0 fc48 	bl	800fa26 <osMutexCreate>
 801f196:	4603      	mov	r3, r0
 801f198:	4a02      	ldr	r2, [pc, #8]	; (801f1a4 <sys_init+0x18>)
 801f19a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801f19c:	bf00      	nop
 801f19e:	bd80      	pop	{r7, pc}
 801f1a0:	0807b10c 	.word	0x0807b10c
 801f1a4:	20014bd4 	.word	0x20014bd4

0801f1a8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801f1a8:	b580      	push	{r7, lr}
 801f1aa:	b084      	sub	sp, #16
 801f1ac:	af00      	add	r7, sp, #0
 801f1ae:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801f1b0:	2300      	movs	r3, #0
 801f1b2:	60bb      	str	r3, [r7, #8]
 801f1b4:	2300      	movs	r3, #0
 801f1b6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801f1b8:	f107 0308 	add.w	r3, r7, #8
 801f1bc:	4618      	mov	r0, r3
 801f1be:	f7f0 fc32 	bl	800fa26 <osMutexCreate>
 801f1c2:	4602      	mov	r2, r0
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801f1c8:	687b      	ldr	r3, [r7, #4]
 801f1ca:	681b      	ldr	r3, [r3, #0]
 801f1cc:	2b00      	cmp	r3, #0
 801f1ce:	d102      	bne.n	801f1d6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801f1d0:	f04f 33ff 	mov.w	r3, #4294967295
 801f1d4:	e000      	b.n	801f1d8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801f1d6:	2300      	movs	r3, #0
}
 801f1d8:	4618      	mov	r0, r3
 801f1da:	3710      	adds	r7, #16
 801f1dc:	46bd      	mov	sp, r7
 801f1de:	bd80      	pop	{r7, pc}

0801f1e0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801f1e0:	b580      	push	{r7, lr}
 801f1e2:	b082      	sub	sp, #8
 801f1e4:	af00      	add	r7, sp, #0
 801f1e6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	681b      	ldr	r3, [r3, #0]
 801f1ec:	f04f 31ff 	mov.w	r1, #4294967295
 801f1f0:	4618      	mov	r0, r3
 801f1f2:	f7f0 fc31 	bl	800fa58 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801f1f6:	bf00      	nop
 801f1f8:	3708      	adds	r7, #8
 801f1fa:	46bd      	mov	sp, r7
 801f1fc:	bd80      	pop	{r7, pc}

0801f1fe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801f1fe:	b580      	push	{r7, lr}
 801f200:	b082      	sub	sp, #8
 801f202:	af00      	add	r7, sp, #0
 801f204:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801f206:	687b      	ldr	r3, [r7, #4]
 801f208:	681b      	ldr	r3, [r3, #0]
 801f20a:	4618      	mov	r0, r3
 801f20c:	f7f0 fc72 	bl	800faf4 <osMutexRelease>
}
 801f210:	bf00      	nop
 801f212:	3708      	adds	r7, #8
 801f214:	46bd      	mov	sp, r7
 801f216:	bd80      	pop	{r7, pc}

0801f218 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801f218:	b580      	push	{r7, lr}
 801f21a:	b08c      	sub	sp, #48	; 0x30
 801f21c:	af00      	add	r7, sp, #0
 801f21e:	60f8      	str	r0, [r7, #12]
 801f220:	60b9      	str	r1, [r7, #8]
 801f222:	607a      	str	r2, [r7, #4]
 801f224:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801f226:	f107 0314 	add.w	r3, r7, #20
 801f22a:	2200      	movs	r2, #0
 801f22c:	601a      	str	r2, [r3, #0]
 801f22e:	605a      	str	r2, [r3, #4]
 801f230:	609a      	str	r2, [r3, #8]
 801f232:	60da      	str	r2, [r3, #12]
 801f234:	611a      	str	r2, [r3, #16]
 801f236:	615a      	str	r2, [r3, #20]
 801f238:	619a      	str	r2, [r3, #24]
 801f23a:	68fb      	ldr	r3, [r7, #12]
 801f23c:	617b      	str	r3, [r7, #20]
 801f23e:	68bb      	ldr	r3, [r7, #8]
 801f240:	61bb      	str	r3, [r7, #24]
 801f242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f244:	b21b      	sxth	r3, r3
 801f246:	83bb      	strh	r3, [r7, #28]
 801f248:	683b      	ldr	r3, [r7, #0]
 801f24a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801f24c:	f107 0314 	add.w	r3, r7, #20
 801f250:	6879      	ldr	r1, [r7, #4]
 801f252:	4618      	mov	r0, r3
 801f254:	f7f0 fb87 	bl	800f966 <osThreadCreate>
 801f258:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801f25a:	4618      	mov	r0, r3
 801f25c:	3730      	adds	r7, #48	; 0x30
 801f25e:	46bd      	mov	sp, r7
 801f260:	bd80      	pop	{r7, pc}
	...

0801f264 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801f264:	b580      	push	{r7, lr}
 801f266:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801f268:	4b04      	ldr	r3, [pc, #16]	; (801f27c <sys_arch_protect+0x18>)
 801f26a:	681b      	ldr	r3, [r3, #0]
 801f26c:	f04f 31ff 	mov.w	r1, #4294967295
 801f270:	4618      	mov	r0, r3
 801f272:	f7f0 fbf1 	bl	800fa58 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801f276:	2301      	movs	r3, #1
}
 801f278:	4618      	mov	r0, r3
 801f27a:	bd80      	pop	{r7, pc}
 801f27c:	20014bd4 	.word	0x20014bd4

0801f280 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801f280:	b580      	push	{r7, lr}
 801f282:	b082      	sub	sp, #8
 801f284:	af00      	add	r7, sp, #0
 801f286:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801f288:	4b04      	ldr	r3, [pc, #16]	; (801f29c <sys_arch_unprotect+0x1c>)
 801f28a:	681b      	ldr	r3, [r3, #0]
 801f28c:	4618      	mov	r0, r3
 801f28e:	f7f0 fc31 	bl	800faf4 <osMutexRelease>
}
 801f292:	bf00      	nop
 801f294:	3708      	adds	r7, #8
 801f296:	46bd      	mov	sp, r7
 801f298:	bd80      	pop	{r7, pc}
 801f29a:	bf00      	nop
 801f29c:	20014bd4 	.word	0x20014bd4

0801f2a0 <atoi>:
 801f2a0:	220a      	movs	r2, #10
 801f2a2:	2100      	movs	r1, #0
 801f2a4:	f000 bad2 	b.w	801f84c <strtol>

0801f2a8 <__libc_init_array>:
 801f2a8:	b570      	push	{r4, r5, r6, lr}
 801f2aa:	4d0d      	ldr	r5, [pc, #52]	; (801f2e0 <__libc_init_array+0x38>)
 801f2ac:	4c0d      	ldr	r4, [pc, #52]	; (801f2e4 <__libc_init_array+0x3c>)
 801f2ae:	1b64      	subs	r4, r4, r5
 801f2b0:	10a4      	asrs	r4, r4, #2
 801f2b2:	2600      	movs	r6, #0
 801f2b4:	42a6      	cmp	r6, r4
 801f2b6:	d109      	bne.n	801f2cc <__libc_init_array+0x24>
 801f2b8:	4d0b      	ldr	r5, [pc, #44]	; (801f2e8 <__libc_init_array+0x40>)
 801f2ba:	4c0c      	ldr	r4, [pc, #48]	; (801f2ec <__libc_init_array+0x44>)
 801f2bc:	f002 f816 	bl	80212ec <_init>
 801f2c0:	1b64      	subs	r4, r4, r5
 801f2c2:	10a4      	asrs	r4, r4, #2
 801f2c4:	2600      	movs	r6, #0
 801f2c6:	42a6      	cmp	r6, r4
 801f2c8:	d105      	bne.n	801f2d6 <__libc_init_array+0x2e>
 801f2ca:	bd70      	pop	{r4, r5, r6, pc}
 801f2cc:	f855 3b04 	ldr.w	r3, [r5], #4
 801f2d0:	4798      	blx	r3
 801f2d2:	3601      	adds	r6, #1
 801f2d4:	e7ee      	b.n	801f2b4 <__libc_init_array+0xc>
 801f2d6:	f855 3b04 	ldr.w	r3, [r5], #4
 801f2da:	4798      	blx	r3
 801f2dc:	3601      	adds	r6, #1
 801f2de:	e7f2      	b.n	801f2c6 <__libc_init_array+0x1e>
 801f2e0:	0807b388 	.word	0x0807b388
 801f2e4:	0807b388 	.word	0x0807b388
 801f2e8:	0807b388 	.word	0x0807b388
 801f2ec:	0807b38c 	.word	0x0807b38c

0801f2f0 <memcmp>:
 801f2f0:	b530      	push	{r4, r5, lr}
 801f2f2:	3901      	subs	r1, #1
 801f2f4:	2400      	movs	r4, #0
 801f2f6:	42a2      	cmp	r2, r4
 801f2f8:	d101      	bne.n	801f2fe <memcmp+0xe>
 801f2fa:	2000      	movs	r0, #0
 801f2fc:	e005      	b.n	801f30a <memcmp+0x1a>
 801f2fe:	5d03      	ldrb	r3, [r0, r4]
 801f300:	3401      	adds	r4, #1
 801f302:	5d0d      	ldrb	r5, [r1, r4]
 801f304:	42ab      	cmp	r3, r5
 801f306:	d0f6      	beq.n	801f2f6 <memcmp+0x6>
 801f308:	1b58      	subs	r0, r3, r5
 801f30a:	bd30      	pop	{r4, r5, pc}

0801f30c <memcpy>:
 801f30c:	440a      	add	r2, r1
 801f30e:	4291      	cmp	r1, r2
 801f310:	f100 33ff 	add.w	r3, r0, #4294967295
 801f314:	d100      	bne.n	801f318 <memcpy+0xc>
 801f316:	4770      	bx	lr
 801f318:	b510      	push	{r4, lr}
 801f31a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f31e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f322:	4291      	cmp	r1, r2
 801f324:	d1f9      	bne.n	801f31a <memcpy+0xe>
 801f326:	bd10      	pop	{r4, pc}

0801f328 <memmove>:
 801f328:	4288      	cmp	r0, r1
 801f32a:	b510      	push	{r4, lr}
 801f32c:	eb01 0402 	add.w	r4, r1, r2
 801f330:	d902      	bls.n	801f338 <memmove+0x10>
 801f332:	4284      	cmp	r4, r0
 801f334:	4623      	mov	r3, r4
 801f336:	d807      	bhi.n	801f348 <memmove+0x20>
 801f338:	1e43      	subs	r3, r0, #1
 801f33a:	42a1      	cmp	r1, r4
 801f33c:	d008      	beq.n	801f350 <memmove+0x28>
 801f33e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f342:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f346:	e7f8      	b.n	801f33a <memmove+0x12>
 801f348:	4402      	add	r2, r0
 801f34a:	4601      	mov	r1, r0
 801f34c:	428a      	cmp	r2, r1
 801f34e:	d100      	bne.n	801f352 <memmove+0x2a>
 801f350:	bd10      	pop	{r4, pc}
 801f352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f35a:	e7f7      	b.n	801f34c <memmove+0x24>

0801f35c <memset>:
 801f35c:	4402      	add	r2, r0
 801f35e:	4603      	mov	r3, r0
 801f360:	4293      	cmp	r3, r2
 801f362:	d100      	bne.n	801f366 <memset+0xa>
 801f364:	4770      	bx	lr
 801f366:	f803 1b01 	strb.w	r1, [r3], #1
 801f36a:	e7f9      	b.n	801f360 <memset+0x4>

0801f36c <iprintf>:
 801f36c:	b40f      	push	{r0, r1, r2, r3}
 801f36e:	4b0a      	ldr	r3, [pc, #40]	; (801f398 <iprintf+0x2c>)
 801f370:	b513      	push	{r0, r1, r4, lr}
 801f372:	681c      	ldr	r4, [r3, #0]
 801f374:	b124      	cbz	r4, 801f380 <iprintf+0x14>
 801f376:	69a3      	ldr	r3, [r4, #24]
 801f378:	b913      	cbnz	r3, 801f380 <iprintf+0x14>
 801f37a:	4620      	mov	r0, r4
 801f37c:	f000 fc90 	bl	801fca0 <__sinit>
 801f380:	ab05      	add	r3, sp, #20
 801f382:	9a04      	ldr	r2, [sp, #16]
 801f384:	68a1      	ldr	r1, [r4, #8]
 801f386:	9301      	str	r3, [sp, #4]
 801f388:	4620      	mov	r0, r4
 801f38a:	f001 f9d5 	bl	8020738 <_vfiprintf_r>
 801f38e:	b002      	add	sp, #8
 801f390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f394:	b004      	add	sp, #16
 801f396:	4770      	bx	lr
 801f398:	20000040 	.word	0x20000040

0801f39c <_puts_r>:
 801f39c:	b570      	push	{r4, r5, r6, lr}
 801f39e:	460e      	mov	r6, r1
 801f3a0:	4605      	mov	r5, r0
 801f3a2:	b118      	cbz	r0, 801f3ac <_puts_r+0x10>
 801f3a4:	6983      	ldr	r3, [r0, #24]
 801f3a6:	b90b      	cbnz	r3, 801f3ac <_puts_r+0x10>
 801f3a8:	f000 fc7a 	bl	801fca0 <__sinit>
 801f3ac:	69ab      	ldr	r3, [r5, #24]
 801f3ae:	68ac      	ldr	r4, [r5, #8]
 801f3b0:	b913      	cbnz	r3, 801f3b8 <_puts_r+0x1c>
 801f3b2:	4628      	mov	r0, r5
 801f3b4:	f000 fc74 	bl	801fca0 <__sinit>
 801f3b8:	4b2c      	ldr	r3, [pc, #176]	; (801f46c <_puts_r+0xd0>)
 801f3ba:	429c      	cmp	r4, r3
 801f3bc:	d120      	bne.n	801f400 <_puts_r+0x64>
 801f3be:	686c      	ldr	r4, [r5, #4]
 801f3c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f3c2:	07db      	lsls	r3, r3, #31
 801f3c4:	d405      	bmi.n	801f3d2 <_puts_r+0x36>
 801f3c6:	89a3      	ldrh	r3, [r4, #12]
 801f3c8:	0598      	lsls	r0, r3, #22
 801f3ca:	d402      	bmi.n	801f3d2 <_puts_r+0x36>
 801f3cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f3ce:	f000 fd17 	bl	801fe00 <__retarget_lock_acquire_recursive>
 801f3d2:	89a3      	ldrh	r3, [r4, #12]
 801f3d4:	0719      	lsls	r1, r3, #28
 801f3d6:	d51d      	bpl.n	801f414 <_puts_r+0x78>
 801f3d8:	6923      	ldr	r3, [r4, #16]
 801f3da:	b1db      	cbz	r3, 801f414 <_puts_r+0x78>
 801f3dc:	3e01      	subs	r6, #1
 801f3de:	68a3      	ldr	r3, [r4, #8]
 801f3e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f3e4:	3b01      	subs	r3, #1
 801f3e6:	60a3      	str	r3, [r4, #8]
 801f3e8:	bb39      	cbnz	r1, 801f43a <_puts_r+0x9e>
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	da38      	bge.n	801f460 <_puts_r+0xc4>
 801f3ee:	4622      	mov	r2, r4
 801f3f0:	210a      	movs	r1, #10
 801f3f2:	4628      	mov	r0, r5
 801f3f4:	f000 fa34 	bl	801f860 <__swbuf_r>
 801f3f8:	3001      	adds	r0, #1
 801f3fa:	d011      	beq.n	801f420 <_puts_r+0x84>
 801f3fc:	250a      	movs	r5, #10
 801f3fe:	e011      	b.n	801f424 <_puts_r+0x88>
 801f400:	4b1b      	ldr	r3, [pc, #108]	; (801f470 <_puts_r+0xd4>)
 801f402:	429c      	cmp	r4, r3
 801f404:	d101      	bne.n	801f40a <_puts_r+0x6e>
 801f406:	68ac      	ldr	r4, [r5, #8]
 801f408:	e7da      	b.n	801f3c0 <_puts_r+0x24>
 801f40a:	4b1a      	ldr	r3, [pc, #104]	; (801f474 <_puts_r+0xd8>)
 801f40c:	429c      	cmp	r4, r3
 801f40e:	bf08      	it	eq
 801f410:	68ec      	ldreq	r4, [r5, #12]
 801f412:	e7d5      	b.n	801f3c0 <_puts_r+0x24>
 801f414:	4621      	mov	r1, r4
 801f416:	4628      	mov	r0, r5
 801f418:	f000 fa86 	bl	801f928 <__swsetup_r>
 801f41c:	2800      	cmp	r0, #0
 801f41e:	d0dd      	beq.n	801f3dc <_puts_r+0x40>
 801f420:	f04f 35ff 	mov.w	r5, #4294967295
 801f424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f426:	07da      	lsls	r2, r3, #31
 801f428:	d405      	bmi.n	801f436 <_puts_r+0x9a>
 801f42a:	89a3      	ldrh	r3, [r4, #12]
 801f42c:	059b      	lsls	r3, r3, #22
 801f42e:	d402      	bmi.n	801f436 <_puts_r+0x9a>
 801f430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f432:	f000 fce6 	bl	801fe02 <__retarget_lock_release_recursive>
 801f436:	4628      	mov	r0, r5
 801f438:	bd70      	pop	{r4, r5, r6, pc}
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	da04      	bge.n	801f448 <_puts_r+0xac>
 801f43e:	69a2      	ldr	r2, [r4, #24]
 801f440:	429a      	cmp	r2, r3
 801f442:	dc06      	bgt.n	801f452 <_puts_r+0xb6>
 801f444:	290a      	cmp	r1, #10
 801f446:	d004      	beq.n	801f452 <_puts_r+0xb6>
 801f448:	6823      	ldr	r3, [r4, #0]
 801f44a:	1c5a      	adds	r2, r3, #1
 801f44c:	6022      	str	r2, [r4, #0]
 801f44e:	7019      	strb	r1, [r3, #0]
 801f450:	e7c5      	b.n	801f3de <_puts_r+0x42>
 801f452:	4622      	mov	r2, r4
 801f454:	4628      	mov	r0, r5
 801f456:	f000 fa03 	bl	801f860 <__swbuf_r>
 801f45a:	3001      	adds	r0, #1
 801f45c:	d1bf      	bne.n	801f3de <_puts_r+0x42>
 801f45e:	e7df      	b.n	801f420 <_puts_r+0x84>
 801f460:	6823      	ldr	r3, [r4, #0]
 801f462:	250a      	movs	r5, #10
 801f464:	1c5a      	adds	r2, r3, #1
 801f466:	6022      	str	r2, [r4, #0]
 801f468:	701d      	strb	r5, [r3, #0]
 801f46a:	e7db      	b.n	801f424 <_puts_r+0x88>
 801f46c:	0807b2f0 	.word	0x0807b2f0
 801f470:	0807b310 	.word	0x0807b310
 801f474:	0807b2d0 	.word	0x0807b2d0

0801f478 <puts>:
 801f478:	4b02      	ldr	r3, [pc, #8]	; (801f484 <puts+0xc>)
 801f47a:	4601      	mov	r1, r0
 801f47c:	6818      	ldr	r0, [r3, #0]
 801f47e:	f7ff bf8d 	b.w	801f39c <_puts_r>
 801f482:	bf00      	nop
 801f484:	20000040 	.word	0x20000040

0801f488 <rand>:
 801f488:	4b17      	ldr	r3, [pc, #92]	; (801f4e8 <rand+0x60>)
 801f48a:	b510      	push	{r4, lr}
 801f48c:	681c      	ldr	r4, [r3, #0]
 801f48e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f490:	b9b3      	cbnz	r3, 801f4c0 <rand+0x38>
 801f492:	2018      	movs	r0, #24
 801f494:	f000 fd2c 	bl	801fef0 <malloc>
 801f498:	63a0      	str	r0, [r4, #56]	; 0x38
 801f49a:	b928      	cbnz	r0, 801f4a8 <rand+0x20>
 801f49c:	4602      	mov	r2, r0
 801f49e:	4b13      	ldr	r3, [pc, #76]	; (801f4ec <rand+0x64>)
 801f4a0:	4813      	ldr	r0, [pc, #76]	; (801f4f0 <rand+0x68>)
 801f4a2:	214e      	movs	r1, #78	; 0x4e
 801f4a4:	f000 faae 	bl	801fa04 <__assert_func>
 801f4a8:	4a12      	ldr	r2, [pc, #72]	; (801f4f4 <rand+0x6c>)
 801f4aa:	4b13      	ldr	r3, [pc, #76]	; (801f4f8 <rand+0x70>)
 801f4ac:	e9c0 2300 	strd	r2, r3, [r0]
 801f4b0:	4b12      	ldr	r3, [pc, #72]	; (801f4fc <rand+0x74>)
 801f4b2:	6083      	str	r3, [r0, #8]
 801f4b4:	230b      	movs	r3, #11
 801f4b6:	8183      	strh	r3, [r0, #12]
 801f4b8:	2201      	movs	r2, #1
 801f4ba:	2300      	movs	r3, #0
 801f4bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801f4c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f4c2:	480f      	ldr	r0, [pc, #60]	; (801f500 <rand+0x78>)
 801f4c4:	690a      	ldr	r2, [r1, #16]
 801f4c6:	694b      	ldr	r3, [r1, #20]
 801f4c8:	4c0e      	ldr	r4, [pc, #56]	; (801f504 <rand+0x7c>)
 801f4ca:	4350      	muls	r0, r2
 801f4cc:	fb04 0003 	mla	r0, r4, r3, r0
 801f4d0:	fba2 3404 	umull	r3, r4, r2, r4
 801f4d4:	1c5a      	adds	r2, r3, #1
 801f4d6:	4404      	add	r4, r0
 801f4d8:	f144 0000 	adc.w	r0, r4, #0
 801f4dc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801f4e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f4e4:	bd10      	pop	{r4, pc}
 801f4e6:	bf00      	nop
 801f4e8:	20000040 	.word	0x20000040
 801f4ec:	0807b21c 	.word	0x0807b21c
 801f4f0:	0807b233 	.word	0x0807b233
 801f4f4:	abcd330e 	.word	0xabcd330e
 801f4f8:	e66d1234 	.word	0xe66d1234
 801f4fc:	0005deec 	.word	0x0005deec
 801f500:	5851f42d 	.word	0x5851f42d
 801f504:	4c957f2d 	.word	0x4c957f2d

0801f508 <sniprintf>:
 801f508:	b40c      	push	{r2, r3}
 801f50a:	b530      	push	{r4, r5, lr}
 801f50c:	4b17      	ldr	r3, [pc, #92]	; (801f56c <sniprintf+0x64>)
 801f50e:	1e0c      	subs	r4, r1, #0
 801f510:	681d      	ldr	r5, [r3, #0]
 801f512:	b09d      	sub	sp, #116	; 0x74
 801f514:	da08      	bge.n	801f528 <sniprintf+0x20>
 801f516:	238b      	movs	r3, #139	; 0x8b
 801f518:	602b      	str	r3, [r5, #0]
 801f51a:	f04f 30ff 	mov.w	r0, #4294967295
 801f51e:	b01d      	add	sp, #116	; 0x74
 801f520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f524:	b002      	add	sp, #8
 801f526:	4770      	bx	lr
 801f528:	f44f 7302 	mov.w	r3, #520	; 0x208
 801f52c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f530:	bf14      	ite	ne
 801f532:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f536:	4623      	moveq	r3, r4
 801f538:	9304      	str	r3, [sp, #16]
 801f53a:	9307      	str	r3, [sp, #28]
 801f53c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f540:	9002      	str	r0, [sp, #8]
 801f542:	9006      	str	r0, [sp, #24]
 801f544:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f548:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f54a:	ab21      	add	r3, sp, #132	; 0x84
 801f54c:	a902      	add	r1, sp, #8
 801f54e:	4628      	mov	r0, r5
 801f550:	9301      	str	r3, [sp, #4]
 801f552:	f000 fdf5 	bl	8020140 <_svfiprintf_r>
 801f556:	1c43      	adds	r3, r0, #1
 801f558:	bfbc      	itt	lt
 801f55a:	238b      	movlt	r3, #139	; 0x8b
 801f55c:	602b      	strlt	r3, [r5, #0]
 801f55e:	2c00      	cmp	r4, #0
 801f560:	d0dd      	beq.n	801f51e <sniprintf+0x16>
 801f562:	9b02      	ldr	r3, [sp, #8]
 801f564:	2200      	movs	r2, #0
 801f566:	701a      	strb	r2, [r3, #0]
 801f568:	e7d9      	b.n	801f51e <sniprintf+0x16>
 801f56a:	bf00      	nop
 801f56c:	20000040 	.word	0x20000040

0801f570 <siprintf>:
 801f570:	b40e      	push	{r1, r2, r3}
 801f572:	b500      	push	{lr}
 801f574:	b09c      	sub	sp, #112	; 0x70
 801f576:	ab1d      	add	r3, sp, #116	; 0x74
 801f578:	9002      	str	r0, [sp, #8]
 801f57a:	9006      	str	r0, [sp, #24]
 801f57c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f580:	4809      	ldr	r0, [pc, #36]	; (801f5a8 <siprintf+0x38>)
 801f582:	9107      	str	r1, [sp, #28]
 801f584:	9104      	str	r1, [sp, #16]
 801f586:	4909      	ldr	r1, [pc, #36]	; (801f5ac <siprintf+0x3c>)
 801f588:	f853 2b04 	ldr.w	r2, [r3], #4
 801f58c:	9105      	str	r1, [sp, #20]
 801f58e:	6800      	ldr	r0, [r0, #0]
 801f590:	9301      	str	r3, [sp, #4]
 801f592:	a902      	add	r1, sp, #8
 801f594:	f000 fdd4 	bl	8020140 <_svfiprintf_r>
 801f598:	9b02      	ldr	r3, [sp, #8]
 801f59a:	2200      	movs	r2, #0
 801f59c:	701a      	strb	r2, [r3, #0]
 801f59e:	b01c      	add	sp, #112	; 0x70
 801f5a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801f5a4:	b003      	add	sp, #12
 801f5a6:	4770      	bx	lr
 801f5a8:	20000040 	.word	0x20000040
 801f5ac:	ffff0208 	.word	0xffff0208

0801f5b0 <siscanf>:
 801f5b0:	b40e      	push	{r1, r2, r3}
 801f5b2:	b510      	push	{r4, lr}
 801f5b4:	b09f      	sub	sp, #124	; 0x7c
 801f5b6:	ac21      	add	r4, sp, #132	; 0x84
 801f5b8:	f44f 7101 	mov.w	r1, #516	; 0x204
 801f5bc:	f854 2b04 	ldr.w	r2, [r4], #4
 801f5c0:	9201      	str	r2, [sp, #4]
 801f5c2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f5c6:	9004      	str	r0, [sp, #16]
 801f5c8:	9008      	str	r0, [sp, #32]
 801f5ca:	f7e0 fe0b 	bl	80001e4 <strlen>
 801f5ce:	4b0c      	ldr	r3, [pc, #48]	; (801f600 <siscanf+0x50>)
 801f5d0:	9005      	str	r0, [sp, #20]
 801f5d2:	9009      	str	r0, [sp, #36]	; 0x24
 801f5d4:	930d      	str	r3, [sp, #52]	; 0x34
 801f5d6:	480b      	ldr	r0, [pc, #44]	; (801f604 <siscanf+0x54>)
 801f5d8:	9a01      	ldr	r2, [sp, #4]
 801f5da:	6800      	ldr	r0, [r0, #0]
 801f5dc:	9403      	str	r4, [sp, #12]
 801f5de:	2300      	movs	r3, #0
 801f5e0:	9311      	str	r3, [sp, #68]	; 0x44
 801f5e2:	9316      	str	r3, [sp, #88]	; 0x58
 801f5e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f5e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f5ec:	a904      	add	r1, sp, #16
 801f5ee:	4623      	mov	r3, r4
 801f5f0:	f000 ff00 	bl	80203f4 <__ssvfiscanf_r>
 801f5f4:	b01f      	add	sp, #124	; 0x7c
 801f5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f5fa:	b003      	add	sp, #12
 801f5fc:	4770      	bx	lr
 801f5fe:	bf00      	nop
 801f600:	0801f62b 	.word	0x0801f62b
 801f604:	20000040 	.word	0x20000040

0801f608 <__sread>:
 801f608:	b510      	push	{r4, lr}
 801f60a:	460c      	mov	r4, r1
 801f60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f610:	f001 fca2 	bl	8020f58 <_read_r>
 801f614:	2800      	cmp	r0, #0
 801f616:	bfab      	itete	ge
 801f618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f61a:	89a3      	ldrhlt	r3, [r4, #12]
 801f61c:	181b      	addge	r3, r3, r0
 801f61e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f622:	bfac      	ite	ge
 801f624:	6563      	strge	r3, [r4, #84]	; 0x54
 801f626:	81a3      	strhlt	r3, [r4, #12]
 801f628:	bd10      	pop	{r4, pc}

0801f62a <__seofread>:
 801f62a:	2000      	movs	r0, #0
 801f62c:	4770      	bx	lr

0801f62e <__swrite>:
 801f62e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f632:	461f      	mov	r7, r3
 801f634:	898b      	ldrh	r3, [r1, #12]
 801f636:	05db      	lsls	r3, r3, #23
 801f638:	4605      	mov	r5, r0
 801f63a:	460c      	mov	r4, r1
 801f63c:	4616      	mov	r6, r2
 801f63e:	d505      	bpl.n	801f64c <__swrite+0x1e>
 801f640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f644:	2302      	movs	r3, #2
 801f646:	2200      	movs	r2, #0
 801f648:	f000 fbdc 	bl	801fe04 <_lseek_r>
 801f64c:	89a3      	ldrh	r3, [r4, #12]
 801f64e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f652:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f656:	81a3      	strh	r3, [r4, #12]
 801f658:	4632      	mov	r2, r6
 801f65a:	463b      	mov	r3, r7
 801f65c:	4628      	mov	r0, r5
 801f65e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f662:	f000 b94f 	b.w	801f904 <_write_r>

0801f666 <__sseek>:
 801f666:	b510      	push	{r4, lr}
 801f668:	460c      	mov	r4, r1
 801f66a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f66e:	f000 fbc9 	bl	801fe04 <_lseek_r>
 801f672:	1c43      	adds	r3, r0, #1
 801f674:	89a3      	ldrh	r3, [r4, #12]
 801f676:	bf15      	itete	ne
 801f678:	6560      	strne	r0, [r4, #84]	; 0x54
 801f67a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f67e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f682:	81a3      	strheq	r3, [r4, #12]
 801f684:	bf18      	it	ne
 801f686:	81a3      	strhne	r3, [r4, #12]
 801f688:	bd10      	pop	{r4, pc}

0801f68a <__sclose>:
 801f68a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f68e:	f000 b9d7 	b.w	801fa40 <_close_r>

0801f692 <strcat>:
 801f692:	b510      	push	{r4, lr}
 801f694:	4602      	mov	r2, r0
 801f696:	7814      	ldrb	r4, [r2, #0]
 801f698:	4613      	mov	r3, r2
 801f69a:	3201      	adds	r2, #1
 801f69c:	2c00      	cmp	r4, #0
 801f69e:	d1fa      	bne.n	801f696 <strcat+0x4>
 801f6a0:	3b01      	subs	r3, #1
 801f6a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f6a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f6aa:	2a00      	cmp	r2, #0
 801f6ac:	d1f9      	bne.n	801f6a2 <strcat+0x10>
 801f6ae:	bd10      	pop	{r4, pc}

0801f6b0 <strchr>:
 801f6b0:	b2c9      	uxtb	r1, r1
 801f6b2:	4603      	mov	r3, r0
 801f6b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f6b8:	b11a      	cbz	r2, 801f6c2 <strchr+0x12>
 801f6ba:	428a      	cmp	r2, r1
 801f6bc:	d1f9      	bne.n	801f6b2 <strchr+0x2>
 801f6be:	4618      	mov	r0, r3
 801f6c0:	4770      	bx	lr
 801f6c2:	2900      	cmp	r1, #0
 801f6c4:	bf18      	it	ne
 801f6c6:	2300      	movne	r3, #0
 801f6c8:	e7f9      	b.n	801f6be <strchr+0xe>

0801f6ca <strcpy>:
 801f6ca:	4603      	mov	r3, r0
 801f6cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f6d0:	f803 2b01 	strb.w	r2, [r3], #1
 801f6d4:	2a00      	cmp	r2, #0
 801f6d6:	d1f9      	bne.n	801f6cc <strcpy+0x2>
 801f6d8:	4770      	bx	lr

0801f6da <strncmp>:
 801f6da:	b510      	push	{r4, lr}
 801f6dc:	b16a      	cbz	r2, 801f6fa <strncmp+0x20>
 801f6de:	3901      	subs	r1, #1
 801f6e0:	1884      	adds	r4, r0, r2
 801f6e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f6e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f6ea:	4293      	cmp	r3, r2
 801f6ec:	d103      	bne.n	801f6f6 <strncmp+0x1c>
 801f6ee:	42a0      	cmp	r0, r4
 801f6f0:	d001      	beq.n	801f6f6 <strncmp+0x1c>
 801f6f2:	2b00      	cmp	r3, #0
 801f6f4:	d1f5      	bne.n	801f6e2 <strncmp+0x8>
 801f6f6:	1a98      	subs	r0, r3, r2
 801f6f8:	bd10      	pop	{r4, pc}
 801f6fa:	4610      	mov	r0, r2
 801f6fc:	e7fc      	b.n	801f6f8 <strncmp+0x1e>

0801f6fe <strnstr>:
 801f6fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f700:	460c      	mov	r4, r1
 801f702:	4605      	mov	r5, r0
 801f704:	4611      	mov	r1, r2
 801f706:	4620      	mov	r0, r4
 801f708:	9201      	str	r2, [sp, #4]
 801f70a:	f001 fc81 	bl	8021010 <strnlen>
 801f70e:	9901      	ldr	r1, [sp, #4]
 801f710:	4281      	cmp	r1, r0
 801f712:	d805      	bhi.n	801f720 <strnstr+0x22>
 801f714:	5c23      	ldrb	r3, [r4, r0]
 801f716:	b11b      	cbz	r3, 801f720 <strnstr+0x22>
 801f718:	2400      	movs	r4, #0
 801f71a:	4620      	mov	r0, r4
 801f71c:	b003      	add	sp, #12
 801f71e:	bd30      	pop	{r4, r5, pc}
 801f720:	4603      	mov	r3, r0
 801f722:	4622      	mov	r2, r4
 801f724:	4628      	mov	r0, r5
 801f726:	f000 fbeb 	bl	801ff00 <memmem>
 801f72a:	4604      	mov	r4, r0
 801f72c:	2800      	cmp	r0, #0
 801f72e:	d0f3      	beq.n	801f718 <strnstr+0x1a>
 801f730:	1b42      	subs	r2, r0, r5
 801f732:	2100      	movs	r1, #0
 801f734:	4628      	mov	r0, r5
 801f736:	f7e0 fd63 	bl	8000200 <memchr>
 801f73a:	2800      	cmp	r0, #0
 801f73c:	d1ec      	bne.n	801f718 <strnstr+0x1a>
 801f73e:	e7ec      	b.n	801f71a <strnstr+0x1c>

0801f740 <_strtol_l.isra.0>:
 801f740:	2b01      	cmp	r3, #1
 801f742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f746:	d001      	beq.n	801f74c <_strtol_l.isra.0+0xc>
 801f748:	2b24      	cmp	r3, #36	; 0x24
 801f74a:	d906      	bls.n	801f75a <_strtol_l.isra.0+0x1a>
 801f74c:	f000 f988 	bl	801fa60 <__errno>
 801f750:	2316      	movs	r3, #22
 801f752:	6003      	str	r3, [r0, #0]
 801f754:	2000      	movs	r0, #0
 801f756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f75a:	4f3a      	ldr	r7, [pc, #232]	; (801f844 <_strtol_l.isra.0+0x104>)
 801f75c:	468e      	mov	lr, r1
 801f75e:	4676      	mov	r6, lr
 801f760:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f764:	5de5      	ldrb	r5, [r4, r7]
 801f766:	f015 0508 	ands.w	r5, r5, #8
 801f76a:	d1f8      	bne.n	801f75e <_strtol_l.isra.0+0x1e>
 801f76c:	2c2d      	cmp	r4, #45	; 0x2d
 801f76e:	d134      	bne.n	801f7da <_strtol_l.isra.0+0x9a>
 801f770:	f89e 4000 	ldrb.w	r4, [lr]
 801f774:	f04f 0801 	mov.w	r8, #1
 801f778:	f106 0e02 	add.w	lr, r6, #2
 801f77c:	2b00      	cmp	r3, #0
 801f77e:	d05c      	beq.n	801f83a <_strtol_l.isra.0+0xfa>
 801f780:	2b10      	cmp	r3, #16
 801f782:	d10c      	bne.n	801f79e <_strtol_l.isra.0+0x5e>
 801f784:	2c30      	cmp	r4, #48	; 0x30
 801f786:	d10a      	bne.n	801f79e <_strtol_l.isra.0+0x5e>
 801f788:	f89e 4000 	ldrb.w	r4, [lr]
 801f78c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801f790:	2c58      	cmp	r4, #88	; 0x58
 801f792:	d14d      	bne.n	801f830 <_strtol_l.isra.0+0xf0>
 801f794:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801f798:	2310      	movs	r3, #16
 801f79a:	f10e 0e02 	add.w	lr, lr, #2
 801f79e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801f7a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f7a6:	2600      	movs	r6, #0
 801f7a8:	fbbc f9f3 	udiv	r9, ip, r3
 801f7ac:	4635      	mov	r5, r6
 801f7ae:	fb03 ca19 	mls	sl, r3, r9, ip
 801f7b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801f7b6:	2f09      	cmp	r7, #9
 801f7b8:	d818      	bhi.n	801f7ec <_strtol_l.isra.0+0xac>
 801f7ba:	463c      	mov	r4, r7
 801f7bc:	42a3      	cmp	r3, r4
 801f7be:	dd24      	ble.n	801f80a <_strtol_l.isra.0+0xca>
 801f7c0:	2e00      	cmp	r6, #0
 801f7c2:	db1f      	blt.n	801f804 <_strtol_l.isra.0+0xc4>
 801f7c4:	45a9      	cmp	r9, r5
 801f7c6:	d31d      	bcc.n	801f804 <_strtol_l.isra.0+0xc4>
 801f7c8:	d101      	bne.n	801f7ce <_strtol_l.isra.0+0x8e>
 801f7ca:	45a2      	cmp	sl, r4
 801f7cc:	db1a      	blt.n	801f804 <_strtol_l.isra.0+0xc4>
 801f7ce:	fb05 4503 	mla	r5, r5, r3, r4
 801f7d2:	2601      	movs	r6, #1
 801f7d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f7d8:	e7eb      	b.n	801f7b2 <_strtol_l.isra.0+0x72>
 801f7da:	2c2b      	cmp	r4, #43	; 0x2b
 801f7dc:	bf08      	it	eq
 801f7de:	f89e 4000 	ldrbeq.w	r4, [lr]
 801f7e2:	46a8      	mov	r8, r5
 801f7e4:	bf08      	it	eq
 801f7e6:	f106 0e02 	addeq.w	lr, r6, #2
 801f7ea:	e7c7      	b.n	801f77c <_strtol_l.isra.0+0x3c>
 801f7ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801f7f0:	2f19      	cmp	r7, #25
 801f7f2:	d801      	bhi.n	801f7f8 <_strtol_l.isra.0+0xb8>
 801f7f4:	3c37      	subs	r4, #55	; 0x37
 801f7f6:	e7e1      	b.n	801f7bc <_strtol_l.isra.0+0x7c>
 801f7f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801f7fc:	2f19      	cmp	r7, #25
 801f7fe:	d804      	bhi.n	801f80a <_strtol_l.isra.0+0xca>
 801f800:	3c57      	subs	r4, #87	; 0x57
 801f802:	e7db      	b.n	801f7bc <_strtol_l.isra.0+0x7c>
 801f804:	f04f 36ff 	mov.w	r6, #4294967295
 801f808:	e7e4      	b.n	801f7d4 <_strtol_l.isra.0+0x94>
 801f80a:	2e00      	cmp	r6, #0
 801f80c:	da05      	bge.n	801f81a <_strtol_l.isra.0+0xda>
 801f80e:	2322      	movs	r3, #34	; 0x22
 801f810:	6003      	str	r3, [r0, #0]
 801f812:	4665      	mov	r5, ip
 801f814:	b942      	cbnz	r2, 801f828 <_strtol_l.isra.0+0xe8>
 801f816:	4628      	mov	r0, r5
 801f818:	e79d      	b.n	801f756 <_strtol_l.isra.0+0x16>
 801f81a:	f1b8 0f00 	cmp.w	r8, #0
 801f81e:	d000      	beq.n	801f822 <_strtol_l.isra.0+0xe2>
 801f820:	426d      	negs	r5, r5
 801f822:	2a00      	cmp	r2, #0
 801f824:	d0f7      	beq.n	801f816 <_strtol_l.isra.0+0xd6>
 801f826:	b10e      	cbz	r6, 801f82c <_strtol_l.isra.0+0xec>
 801f828:	f10e 31ff 	add.w	r1, lr, #4294967295
 801f82c:	6011      	str	r1, [r2, #0]
 801f82e:	e7f2      	b.n	801f816 <_strtol_l.isra.0+0xd6>
 801f830:	2430      	movs	r4, #48	; 0x30
 801f832:	2b00      	cmp	r3, #0
 801f834:	d1b3      	bne.n	801f79e <_strtol_l.isra.0+0x5e>
 801f836:	2308      	movs	r3, #8
 801f838:	e7b1      	b.n	801f79e <_strtol_l.isra.0+0x5e>
 801f83a:	2c30      	cmp	r4, #48	; 0x30
 801f83c:	d0a4      	beq.n	801f788 <_strtol_l.isra.0+0x48>
 801f83e:	230a      	movs	r3, #10
 801f840:	e7ad      	b.n	801f79e <_strtol_l.isra.0+0x5e>
 801f842:	bf00      	nop
 801f844:	0807b115 	.word	0x0807b115

0801f848 <_strtol_r>:
 801f848:	f7ff bf7a 	b.w	801f740 <_strtol_l.isra.0>

0801f84c <strtol>:
 801f84c:	4613      	mov	r3, r2
 801f84e:	460a      	mov	r2, r1
 801f850:	4601      	mov	r1, r0
 801f852:	4802      	ldr	r0, [pc, #8]	; (801f85c <strtol+0x10>)
 801f854:	6800      	ldr	r0, [r0, #0]
 801f856:	f7ff bf73 	b.w	801f740 <_strtol_l.isra.0>
 801f85a:	bf00      	nop
 801f85c:	20000040 	.word	0x20000040

0801f860 <__swbuf_r>:
 801f860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f862:	460e      	mov	r6, r1
 801f864:	4614      	mov	r4, r2
 801f866:	4605      	mov	r5, r0
 801f868:	b118      	cbz	r0, 801f872 <__swbuf_r+0x12>
 801f86a:	6983      	ldr	r3, [r0, #24]
 801f86c:	b90b      	cbnz	r3, 801f872 <__swbuf_r+0x12>
 801f86e:	f000 fa17 	bl	801fca0 <__sinit>
 801f872:	4b21      	ldr	r3, [pc, #132]	; (801f8f8 <__swbuf_r+0x98>)
 801f874:	429c      	cmp	r4, r3
 801f876:	d12b      	bne.n	801f8d0 <__swbuf_r+0x70>
 801f878:	686c      	ldr	r4, [r5, #4]
 801f87a:	69a3      	ldr	r3, [r4, #24]
 801f87c:	60a3      	str	r3, [r4, #8]
 801f87e:	89a3      	ldrh	r3, [r4, #12]
 801f880:	071a      	lsls	r2, r3, #28
 801f882:	d52f      	bpl.n	801f8e4 <__swbuf_r+0x84>
 801f884:	6923      	ldr	r3, [r4, #16]
 801f886:	b36b      	cbz	r3, 801f8e4 <__swbuf_r+0x84>
 801f888:	6923      	ldr	r3, [r4, #16]
 801f88a:	6820      	ldr	r0, [r4, #0]
 801f88c:	1ac0      	subs	r0, r0, r3
 801f88e:	6963      	ldr	r3, [r4, #20]
 801f890:	b2f6      	uxtb	r6, r6
 801f892:	4283      	cmp	r3, r0
 801f894:	4637      	mov	r7, r6
 801f896:	dc04      	bgt.n	801f8a2 <__swbuf_r+0x42>
 801f898:	4621      	mov	r1, r4
 801f89a:	4628      	mov	r0, r5
 801f89c:	f000 f96c 	bl	801fb78 <_fflush_r>
 801f8a0:	bb30      	cbnz	r0, 801f8f0 <__swbuf_r+0x90>
 801f8a2:	68a3      	ldr	r3, [r4, #8]
 801f8a4:	3b01      	subs	r3, #1
 801f8a6:	60a3      	str	r3, [r4, #8]
 801f8a8:	6823      	ldr	r3, [r4, #0]
 801f8aa:	1c5a      	adds	r2, r3, #1
 801f8ac:	6022      	str	r2, [r4, #0]
 801f8ae:	701e      	strb	r6, [r3, #0]
 801f8b0:	6963      	ldr	r3, [r4, #20]
 801f8b2:	3001      	adds	r0, #1
 801f8b4:	4283      	cmp	r3, r0
 801f8b6:	d004      	beq.n	801f8c2 <__swbuf_r+0x62>
 801f8b8:	89a3      	ldrh	r3, [r4, #12]
 801f8ba:	07db      	lsls	r3, r3, #31
 801f8bc:	d506      	bpl.n	801f8cc <__swbuf_r+0x6c>
 801f8be:	2e0a      	cmp	r6, #10
 801f8c0:	d104      	bne.n	801f8cc <__swbuf_r+0x6c>
 801f8c2:	4621      	mov	r1, r4
 801f8c4:	4628      	mov	r0, r5
 801f8c6:	f000 f957 	bl	801fb78 <_fflush_r>
 801f8ca:	b988      	cbnz	r0, 801f8f0 <__swbuf_r+0x90>
 801f8cc:	4638      	mov	r0, r7
 801f8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f8d0:	4b0a      	ldr	r3, [pc, #40]	; (801f8fc <__swbuf_r+0x9c>)
 801f8d2:	429c      	cmp	r4, r3
 801f8d4:	d101      	bne.n	801f8da <__swbuf_r+0x7a>
 801f8d6:	68ac      	ldr	r4, [r5, #8]
 801f8d8:	e7cf      	b.n	801f87a <__swbuf_r+0x1a>
 801f8da:	4b09      	ldr	r3, [pc, #36]	; (801f900 <__swbuf_r+0xa0>)
 801f8dc:	429c      	cmp	r4, r3
 801f8de:	bf08      	it	eq
 801f8e0:	68ec      	ldreq	r4, [r5, #12]
 801f8e2:	e7ca      	b.n	801f87a <__swbuf_r+0x1a>
 801f8e4:	4621      	mov	r1, r4
 801f8e6:	4628      	mov	r0, r5
 801f8e8:	f000 f81e 	bl	801f928 <__swsetup_r>
 801f8ec:	2800      	cmp	r0, #0
 801f8ee:	d0cb      	beq.n	801f888 <__swbuf_r+0x28>
 801f8f0:	f04f 37ff 	mov.w	r7, #4294967295
 801f8f4:	e7ea      	b.n	801f8cc <__swbuf_r+0x6c>
 801f8f6:	bf00      	nop
 801f8f8:	0807b2f0 	.word	0x0807b2f0
 801f8fc:	0807b310 	.word	0x0807b310
 801f900:	0807b2d0 	.word	0x0807b2d0

0801f904 <_write_r>:
 801f904:	b538      	push	{r3, r4, r5, lr}
 801f906:	4d07      	ldr	r5, [pc, #28]	; (801f924 <_write_r+0x20>)
 801f908:	4604      	mov	r4, r0
 801f90a:	4608      	mov	r0, r1
 801f90c:	4611      	mov	r1, r2
 801f90e:	2200      	movs	r2, #0
 801f910:	602a      	str	r2, [r5, #0]
 801f912:	461a      	mov	r2, r3
 801f914:	f7e2 fa5f 	bl	8001dd6 <_write>
 801f918:	1c43      	adds	r3, r0, #1
 801f91a:	d102      	bne.n	801f922 <_write_r+0x1e>
 801f91c:	682b      	ldr	r3, [r5, #0]
 801f91e:	b103      	cbz	r3, 801f922 <_write_r+0x1e>
 801f920:	6023      	str	r3, [r4, #0]
 801f922:	bd38      	pop	{r3, r4, r5, pc}
 801f924:	20014bd0 	.word	0x20014bd0

0801f928 <__swsetup_r>:
 801f928:	4b32      	ldr	r3, [pc, #200]	; (801f9f4 <__swsetup_r+0xcc>)
 801f92a:	b570      	push	{r4, r5, r6, lr}
 801f92c:	681d      	ldr	r5, [r3, #0]
 801f92e:	4606      	mov	r6, r0
 801f930:	460c      	mov	r4, r1
 801f932:	b125      	cbz	r5, 801f93e <__swsetup_r+0x16>
 801f934:	69ab      	ldr	r3, [r5, #24]
 801f936:	b913      	cbnz	r3, 801f93e <__swsetup_r+0x16>
 801f938:	4628      	mov	r0, r5
 801f93a:	f000 f9b1 	bl	801fca0 <__sinit>
 801f93e:	4b2e      	ldr	r3, [pc, #184]	; (801f9f8 <__swsetup_r+0xd0>)
 801f940:	429c      	cmp	r4, r3
 801f942:	d10f      	bne.n	801f964 <__swsetup_r+0x3c>
 801f944:	686c      	ldr	r4, [r5, #4]
 801f946:	89a3      	ldrh	r3, [r4, #12]
 801f948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f94c:	0719      	lsls	r1, r3, #28
 801f94e:	d42c      	bmi.n	801f9aa <__swsetup_r+0x82>
 801f950:	06dd      	lsls	r5, r3, #27
 801f952:	d411      	bmi.n	801f978 <__swsetup_r+0x50>
 801f954:	2309      	movs	r3, #9
 801f956:	6033      	str	r3, [r6, #0]
 801f958:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f95c:	81a3      	strh	r3, [r4, #12]
 801f95e:	f04f 30ff 	mov.w	r0, #4294967295
 801f962:	e03e      	b.n	801f9e2 <__swsetup_r+0xba>
 801f964:	4b25      	ldr	r3, [pc, #148]	; (801f9fc <__swsetup_r+0xd4>)
 801f966:	429c      	cmp	r4, r3
 801f968:	d101      	bne.n	801f96e <__swsetup_r+0x46>
 801f96a:	68ac      	ldr	r4, [r5, #8]
 801f96c:	e7eb      	b.n	801f946 <__swsetup_r+0x1e>
 801f96e:	4b24      	ldr	r3, [pc, #144]	; (801fa00 <__swsetup_r+0xd8>)
 801f970:	429c      	cmp	r4, r3
 801f972:	bf08      	it	eq
 801f974:	68ec      	ldreq	r4, [r5, #12]
 801f976:	e7e6      	b.n	801f946 <__swsetup_r+0x1e>
 801f978:	0758      	lsls	r0, r3, #29
 801f97a:	d512      	bpl.n	801f9a2 <__swsetup_r+0x7a>
 801f97c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f97e:	b141      	cbz	r1, 801f992 <__swsetup_r+0x6a>
 801f980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f984:	4299      	cmp	r1, r3
 801f986:	d002      	beq.n	801f98e <__swsetup_r+0x66>
 801f988:	4630      	mov	r0, r6
 801f98a:	f000 fad3 	bl	801ff34 <_free_r>
 801f98e:	2300      	movs	r3, #0
 801f990:	6363      	str	r3, [r4, #52]	; 0x34
 801f992:	89a3      	ldrh	r3, [r4, #12]
 801f994:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f998:	81a3      	strh	r3, [r4, #12]
 801f99a:	2300      	movs	r3, #0
 801f99c:	6063      	str	r3, [r4, #4]
 801f99e:	6923      	ldr	r3, [r4, #16]
 801f9a0:	6023      	str	r3, [r4, #0]
 801f9a2:	89a3      	ldrh	r3, [r4, #12]
 801f9a4:	f043 0308 	orr.w	r3, r3, #8
 801f9a8:	81a3      	strh	r3, [r4, #12]
 801f9aa:	6923      	ldr	r3, [r4, #16]
 801f9ac:	b94b      	cbnz	r3, 801f9c2 <__swsetup_r+0x9a>
 801f9ae:	89a3      	ldrh	r3, [r4, #12]
 801f9b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f9b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f9b8:	d003      	beq.n	801f9c2 <__swsetup_r+0x9a>
 801f9ba:	4621      	mov	r1, r4
 801f9bc:	4630      	mov	r0, r6
 801f9be:	f000 fa57 	bl	801fe70 <__smakebuf_r>
 801f9c2:	89a0      	ldrh	r0, [r4, #12]
 801f9c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f9c8:	f010 0301 	ands.w	r3, r0, #1
 801f9cc:	d00a      	beq.n	801f9e4 <__swsetup_r+0xbc>
 801f9ce:	2300      	movs	r3, #0
 801f9d0:	60a3      	str	r3, [r4, #8]
 801f9d2:	6963      	ldr	r3, [r4, #20]
 801f9d4:	425b      	negs	r3, r3
 801f9d6:	61a3      	str	r3, [r4, #24]
 801f9d8:	6923      	ldr	r3, [r4, #16]
 801f9da:	b943      	cbnz	r3, 801f9ee <__swsetup_r+0xc6>
 801f9dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f9e0:	d1ba      	bne.n	801f958 <__swsetup_r+0x30>
 801f9e2:	bd70      	pop	{r4, r5, r6, pc}
 801f9e4:	0781      	lsls	r1, r0, #30
 801f9e6:	bf58      	it	pl
 801f9e8:	6963      	ldrpl	r3, [r4, #20]
 801f9ea:	60a3      	str	r3, [r4, #8]
 801f9ec:	e7f4      	b.n	801f9d8 <__swsetup_r+0xb0>
 801f9ee:	2000      	movs	r0, #0
 801f9f0:	e7f7      	b.n	801f9e2 <__swsetup_r+0xba>
 801f9f2:	bf00      	nop
 801f9f4:	20000040 	.word	0x20000040
 801f9f8:	0807b2f0 	.word	0x0807b2f0
 801f9fc:	0807b310 	.word	0x0807b310
 801fa00:	0807b2d0 	.word	0x0807b2d0

0801fa04 <__assert_func>:
 801fa04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fa06:	4614      	mov	r4, r2
 801fa08:	461a      	mov	r2, r3
 801fa0a:	4b09      	ldr	r3, [pc, #36]	; (801fa30 <__assert_func+0x2c>)
 801fa0c:	681b      	ldr	r3, [r3, #0]
 801fa0e:	4605      	mov	r5, r0
 801fa10:	68d8      	ldr	r0, [r3, #12]
 801fa12:	b14c      	cbz	r4, 801fa28 <__assert_func+0x24>
 801fa14:	4b07      	ldr	r3, [pc, #28]	; (801fa34 <__assert_func+0x30>)
 801fa16:	9100      	str	r1, [sp, #0]
 801fa18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fa1c:	4906      	ldr	r1, [pc, #24]	; (801fa38 <__assert_func+0x34>)
 801fa1e:	462b      	mov	r3, r5
 801fa20:	f000 f9bc 	bl	801fd9c <fiprintf>
 801fa24:	f001 fbba 	bl	802119c <abort>
 801fa28:	4b04      	ldr	r3, [pc, #16]	; (801fa3c <__assert_func+0x38>)
 801fa2a:	461c      	mov	r4, r3
 801fa2c:	e7f3      	b.n	801fa16 <__assert_func+0x12>
 801fa2e:	bf00      	nop
 801fa30:	20000040 	.word	0x20000040
 801fa34:	0807b292 	.word	0x0807b292
 801fa38:	0807b29f 	.word	0x0807b29f
 801fa3c:	0807b2cd 	.word	0x0807b2cd

0801fa40 <_close_r>:
 801fa40:	b538      	push	{r3, r4, r5, lr}
 801fa42:	4d06      	ldr	r5, [pc, #24]	; (801fa5c <_close_r+0x1c>)
 801fa44:	2300      	movs	r3, #0
 801fa46:	4604      	mov	r4, r0
 801fa48:	4608      	mov	r0, r1
 801fa4a:	602b      	str	r3, [r5, #0]
 801fa4c:	f7e2 f9df 	bl	8001e0e <_close>
 801fa50:	1c43      	adds	r3, r0, #1
 801fa52:	d102      	bne.n	801fa5a <_close_r+0x1a>
 801fa54:	682b      	ldr	r3, [r5, #0]
 801fa56:	b103      	cbz	r3, 801fa5a <_close_r+0x1a>
 801fa58:	6023      	str	r3, [r4, #0]
 801fa5a:	bd38      	pop	{r3, r4, r5, pc}
 801fa5c:	20014bd0 	.word	0x20014bd0

0801fa60 <__errno>:
 801fa60:	4b01      	ldr	r3, [pc, #4]	; (801fa68 <__errno+0x8>)
 801fa62:	6818      	ldr	r0, [r3, #0]
 801fa64:	4770      	bx	lr
 801fa66:	bf00      	nop
 801fa68:	20000040 	.word	0x20000040

0801fa6c <__sflush_r>:
 801fa6c:	898a      	ldrh	r2, [r1, #12]
 801fa6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa72:	4605      	mov	r5, r0
 801fa74:	0710      	lsls	r0, r2, #28
 801fa76:	460c      	mov	r4, r1
 801fa78:	d458      	bmi.n	801fb2c <__sflush_r+0xc0>
 801fa7a:	684b      	ldr	r3, [r1, #4]
 801fa7c:	2b00      	cmp	r3, #0
 801fa7e:	dc05      	bgt.n	801fa8c <__sflush_r+0x20>
 801fa80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	dc02      	bgt.n	801fa8c <__sflush_r+0x20>
 801fa86:	2000      	movs	r0, #0
 801fa88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fa8e:	2e00      	cmp	r6, #0
 801fa90:	d0f9      	beq.n	801fa86 <__sflush_r+0x1a>
 801fa92:	2300      	movs	r3, #0
 801fa94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fa98:	682f      	ldr	r7, [r5, #0]
 801fa9a:	602b      	str	r3, [r5, #0]
 801fa9c:	d032      	beq.n	801fb04 <__sflush_r+0x98>
 801fa9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801faa0:	89a3      	ldrh	r3, [r4, #12]
 801faa2:	075a      	lsls	r2, r3, #29
 801faa4:	d505      	bpl.n	801fab2 <__sflush_r+0x46>
 801faa6:	6863      	ldr	r3, [r4, #4]
 801faa8:	1ac0      	subs	r0, r0, r3
 801faaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801faac:	b10b      	cbz	r3, 801fab2 <__sflush_r+0x46>
 801faae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fab0:	1ac0      	subs	r0, r0, r3
 801fab2:	2300      	movs	r3, #0
 801fab4:	4602      	mov	r2, r0
 801fab6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fab8:	6a21      	ldr	r1, [r4, #32]
 801faba:	4628      	mov	r0, r5
 801fabc:	47b0      	blx	r6
 801fabe:	1c43      	adds	r3, r0, #1
 801fac0:	89a3      	ldrh	r3, [r4, #12]
 801fac2:	d106      	bne.n	801fad2 <__sflush_r+0x66>
 801fac4:	6829      	ldr	r1, [r5, #0]
 801fac6:	291d      	cmp	r1, #29
 801fac8:	d82c      	bhi.n	801fb24 <__sflush_r+0xb8>
 801faca:	4a2a      	ldr	r2, [pc, #168]	; (801fb74 <__sflush_r+0x108>)
 801facc:	40ca      	lsrs	r2, r1
 801face:	07d6      	lsls	r6, r2, #31
 801fad0:	d528      	bpl.n	801fb24 <__sflush_r+0xb8>
 801fad2:	2200      	movs	r2, #0
 801fad4:	6062      	str	r2, [r4, #4]
 801fad6:	04d9      	lsls	r1, r3, #19
 801fad8:	6922      	ldr	r2, [r4, #16]
 801fada:	6022      	str	r2, [r4, #0]
 801fadc:	d504      	bpl.n	801fae8 <__sflush_r+0x7c>
 801fade:	1c42      	adds	r2, r0, #1
 801fae0:	d101      	bne.n	801fae6 <__sflush_r+0x7a>
 801fae2:	682b      	ldr	r3, [r5, #0]
 801fae4:	b903      	cbnz	r3, 801fae8 <__sflush_r+0x7c>
 801fae6:	6560      	str	r0, [r4, #84]	; 0x54
 801fae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801faea:	602f      	str	r7, [r5, #0]
 801faec:	2900      	cmp	r1, #0
 801faee:	d0ca      	beq.n	801fa86 <__sflush_r+0x1a>
 801faf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801faf4:	4299      	cmp	r1, r3
 801faf6:	d002      	beq.n	801fafe <__sflush_r+0x92>
 801faf8:	4628      	mov	r0, r5
 801fafa:	f000 fa1b 	bl	801ff34 <_free_r>
 801fafe:	2000      	movs	r0, #0
 801fb00:	6360      	str	r0, [r4, #52]	; 0x34
 801fb02:	e7c1      	b.n	801fa88 <__sflush_r+0x1c>
 801fb04:	6a21      	ldr	r1, [r4, #32]
 801fb06:	2301      	movs	r3, #1
 801fb08:	4628      	mov	r0, r5
 801fb0a:	47b0      	blx	r6
 801fb0c:	1c41      	adds	r1, r0, #1
 801fb0e:	d1c7      	bne.n	801faa0 <__sflush_r+0x34>
 801fb10:	682b      	ldr	r3, [r5, #0]
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	d0c4      	beq.n	801faa0 <__sflush_r+0x34>
 801fb16:	2b1d      	cmp	r3, #29
 801fb18:	d001      	beq.n	801fb1e <__sflush_r+0xb2>
 801fb1a:	2b16      	cmp	r3, #22
 801fb1c:	d101      	bne.n	801fb22 <__sflush_r+0xb6>
 801fb1e:	602f      	str	r7, [r5, #0]
 801fb20:	e7b1      	b.n	801fa86 <__sflush_r+0x1a>
 801fb22:	89a3      	ldrh	r3, [r4, #12]
 801fb24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fb28:	81a3      	strh	r3, [r4, #12]
 801fb2a:	e7ad      	b.n	801fa88 <__sflush_r+0x1c>
 801fb2c:	690f      	ldr	r7, [r1, #16]
 801fb2e:	2f00      	cmp	r7, #0
 801fb30:	d0a9      	beq.n	801fa86 <__sflush_r+0x1a>
 801fb32:	0793      	lsls	r3, r2, #30
 801fb34:	680e      	ldr	r6, [r1, #0]
 801fb36:	bf08      	it	eq
 801fb38:	694b      	ldreq	r3, [r1, #20]
 801fb3a:	600f      	str	r7, [r1, #0]
 801fb3c:	bf18      	it	ne
 801fb3e:	2300      	movne	r3, #0
 801fb40:	eba6 0807 	sub.w	r8, r6, r7
 801fb44:	608b      	str	r3, [r1, #8]
 801fb46:	f1b8 0f00 	cmp.w	r8, #0
 801fb4a:	dd9c      	ble.n	801fa86 <__sflush_r+0x1a>
 801fb4c:	6a21      	ldr	r1, [r4, #32]
 801fb4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fb50:	4643      	mov	r3, r8
 801fb52:	463a      	mov	r2, r7
 801fb54:	4628      	mov	r0, r5
 801fb56:	47b0      	blx	r6
 801fb58:	2800      	cmp	r0, #0
 801fb5a:	dc06      	bgt.n	801fb6a <__sflush_r+0xfe>
 801fb5c:	89a3      	ldrh	r3, [r4, #12]
 801fb5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fb62:	81a3      	strh	r3, [r4, #12]
 801fb64:	f04f 30ff 	mov.w	r0, #4294967295
 801fb68:	e78e      	b.n	801fa88 <__sflush_r+0x1c>
 801fb6a:	4407      	add	r7, r0
 801fb6c:	eba8 0800 	sub.w	r8, r8, r0
 801fb70:	e7e9      	b.n	801fb46 <__sflush_r+0xda>
 801fb72:	bf00      	nop
 801fb74:	20400001 	.word	0x20400001

0801fb78 <_fflush_r>:
 801fb78:	b538      	push	{r3, r4, r5, lr}
 801fb7a:	690b      	ldr	r3, [r1, #16]
 801fb7c:	4605      	mov	r5, r0
 801fb7e:	460c      	mov	r4, r1
 801fb80:	b913      	cbnz	r3, 801fb88 <_fflush_r+0x10>
 801fb82:	2500      	movs	r5, #0
 801fb84:	4628      	mov	r0, r5
 801fb86:	bd38      	pop	{r3, r4, r5, pc}
 801fb88:	b118      	cbz	r0, 801fb92 <_fflush_r+0x1a>
 801fb8a:	6983      	ldr	r3, [r0, #24]
 801fb8c:	b90b      	cbnz	r3, 801fb92 <_fflush_r+0x1a>
 801fb8e:	f000 f887 	bl	801fca0 <__sinit>
 801fb92:	4b14      	ldr	r3, [pc, #80]	; (801fbe4 <_fflush_r+0x6c>)
 801fb94:	429c      	cmp	r4, r3
 801fb96:	d11b      	bne.n	801fbd0 <_fflush_r+0x58>
 801fb98:	686c      	ldr	r4, [r5, #4]
 801fb9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fb9e:	2b00      	cmp	r3, #0
 801fba0:	d0ef      	beq.n	801fb82 <_fflush_r+0xa>
 801fba2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801fba4:	07d0      	lsls	r0, r2, #31
 801fba6:	d404      	bmi.n	801fbb2 <_fflush_r+0x3a>
 801fba8:	0599      	lsls	r1, r3, #22
 801fbaa:	d402      	bmi.n	801fbb2 <_fflush_r+0x3a>
 801fbac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fbae:	f000 f927 	bl	801fe00 <__retarget_lock_acquire_recursive>
 801fbb2:	4628      	mov	r0, r5
 801fbb4:	4621      	mov	r1, r4
 801fbb6:	f7ff ff59 	bl	801fa6c <__sflush_r>
 801fbba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fbbc:	07da      	lsls	r2, r3, #31
 801fbbe:	4605      	mov	r5, r0
 801fbc0:	d4e0      	bmi.n	801fb84 <_fflush_r+0xc>
 801fbc2:	89a3      	ldrh	r3, [r4, #12]
 801fbc4:	059b      	lsls	r3, r3, #22
 801fbc6:	d4dd      	bmi.n	801fb84 <_fflush_r+0xc>
 801fbc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fbca:	f000 f91a 	bl	801fe02 <__retarget_lock_release_recursive>
 801fbce:	e7d9      	b.n	801fb84 <_fflush_r+0xc>
 801fbd0:	4b05      	ldr	r3, [pc, #20]	; (801fbe8 <_fflush_r+0x70>)
 801fbd2:	429c      	cmp	r4, r3
 801fbd4:	d101      	bne.n	801fbda <_fflush_r+0x62>
 801fbd6:	68ac      	ldr	r4, [r5, #8]
 801fbd8:	e7df      	b.n	801fb9a <_fflush_r+0x22>
 801fbda:	4b04      	ldr	r3, [pc, #16]	; (801fbec <_fflush_r+0x74>)
 801fbdc:	429c      	cmp	r4, r3
 801fbde:	bf08      	it	eq
 801fbe0:	68ec      	ldreq	r4, [r5, #12]
 801fbe2:	e7da      	b.n	801fb9a <_fflush_r+0x22>
 801fbe4:	0807b2f0 	.word	0x0807b2f0
 801fbe8:	0807b310 	.word	0x0807b310
 801fbec:	0807b2d0 	.word	0x0807b2d0

0801fbf0 <std>:
 801fbf0:	2300      	movs	r3, #0
 801fbf2:	b510      	push	{r4, lr}
 801fbf4:	4604      	mov	r4, r0
 801fbf6:	e9c0 3300 	strd	r3, r3, [r0]
 801fbfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fbfe:	6083      	str	r3, [r0, #8]
 801fc00:	8181      	strh	r1, [r0, #12]
 801fc02:	6643      	str	r3, [r0, #100]	; 0x64
 801fc04:	81c2      	strh	r2, [r0, #14]
 801fc06:	6183      	str	r3, [r0, #24]
 801fc08:	4619      	mov	r1, r3
 801fc0a:	2208      	movs	r2, #8
 801fc0c:	305c      	adds	r0, #92	; 0x5c
 801fc0e:	f7ff fba5 	bl	801f35c <memset>
 801fc12:	4b05      	ldr	r3, [pc, #20]	; (801fc28 <std+0x38>)
 801fc14:	6263      	str	r3, [r4, #36]	; 0x24
 801fc16:	4b05      	ldr	r3, [pc, #20]	; (801fc2c <std+0x3c>)
 801fc18:	62a3      	str	r3, [r4, #40]	; 0x28
 801fc1a:	4b05      	ldr	r3, [pc, #20]	; (801fc30 <std+0x40>)
 801fc1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801fc1e:	4b05      	ldr	r3, [pc, #20]	; (801fc34 <std+0x44>)
 801fc20:	6224      	str	r4, [r4, #32]
 801fc22:	6323      	str	r3, [r4, #48]	; 0x30
 801fc24:	bd10      	pop	{r4, pc}
 801fc26:	bf00      	nop
 801fc28:	0801f609 	.word	0x0801f609
 801fc2c:	0801f62f 	.word	0x0801f62f
 801fc30:	0801f667 	.word	0x0801f667
 801fc34:	0801f68b 	.word	0x0801f68b

0801fc38 <_cleanup_r>:
 801fc38:	4901      	ldr	r1, [pc, #4]	; (801fc40 <_cleanup_r+0x8>)
 801fc3a:	f000 b8c1 	b.w	801fdc0 <_fwalk_reent>
 801fc3e:	bf00      	nop
 801fc40:	0801fb79 	.word	0x0801fb79

0801fc44 <__sfmoreglue>:
 801fc44:	b570      	push	{r4, r5, r6, lr}
 801fc46:	1e4a      	subs	r2, r1, #1
 801fc48:	2568      	movs	r5, #104	; 0x68
 801fc4a:	4355      	muls	r5, r2
 801fc4c:	460e      	mov	r6, r1
 801fc4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801fc52:	f000 f9bf 	bl	801ffd4 <_malloc_r>
 801fc56:	4604      	mov	r4, r0
 801fc58:	b140      	cbz	r0, 801fc6c <__sfmoreglue+0x28>
 801fc5a:	2100      	movs	r1, #0
 801fc5c:	e9c0 1600 	strd	r1, r6, [r0]
 801fc60:	300c      	adds	r0, #12
 801fc62:	60a0      	str	r0, [r4, #8]
 801fc64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801fc68:	f7ff fb78 	bl	801f35c <memset>
 801fc6c:	4620      	mov	r0, r4
 801fc6e:	bd70      	pop	{r4, r5, r6, pc}

0801fc70 <__sfp_lock_acquire>:
 801fc70:	4801      	ldr	r0, [pc, #4]	; (801fc78 <__sfp_lock_acquire+0x8>)
 801fc72:	f000 b8c5 	b.w	801fe00 <__retarget_lock_acquire_recursive>
 801fc76:	bf00      	nop
 801fc78:	20014be0 	.word	0x20014be0

0801fc7c <__sfp_lock_release>:
 801fc7c:	4801      	ldr	r0, [pc, #4]	; (801fc84 <__sfp_lock_release+0x8>)
 801fc7e:	f000 b8c0 	b.w	801fe02 <__retarget_lock_release_recursive>
 801fc82:	bf00      	nop
 801fc84:	20014be0 	.word	0x20014be0

0801fc88 <__sinit_lock_acquire>:
 801fc88:	4801      	ldr	r0, [pc, #4]	; (801fc90 <__sinit_lock_acquire+0x8>)
 801fc8a:	f000 b8b9 	b.w	801fe00 <__retarget_lock_acquire_recursive>
 801fc8e:	bf00      	nop
 801fc90:	20014bdb 	.word	0x20014bdb

0801fc94 <__sinit_lock_release>:
 801fc94:	4801      	ldr	r0, [pc, #4]	; (801fc9c <__sinit_lock_release+0x8>)
 801fc96:	f000 b8b4 	b.w	801fe02 <__retarget_lock_release_recursive>
 801fc9a:	bf00      	nop
 801fc9c:	20014bdb 	.word	0x20014bdb

0801fca0 <__sinit>:
 801fca0:	b510      	push	{r4, lr}
 801fca2:	4604      	mov	r4, r0
 801fca4:	f7ff fff0 	bl	801fc88 <__sinit_lock_acquire>
 801fca8:	69a3      	ldr	r3, [r4, #24]
 801fcaa:	b11b      	cbz	r3, 801fcb4 <__sinit+0x14>
 801fcac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fcb0:	f7ff bff0 	b.w	801fc94 <__sinit_lock_release>
 801fcb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801fcb8:	6523      	str	r3, [r4, #80]	; 0x50
 801fcba:	4b13      	ldr	r3, [pc, #76]	; (801fd08 <__sinit+0x68>)
 801fcbc:	4a13      	ldr	r2, [pc, #76]	; (801fd0c <__sinit+0x6c>)
 801fcbe:	681b      	ldr	r3, [r3, #0]
 801fcc0:	62a2      	str	r2, [r4, #40]	; 0x28
 801fcc2:	42a3      	cmp	r3, r4
 801fcc4:	bf04      	itt	eq
 801fcc6:	2301      	moveq	r3, #1
 801fcc8:	61a3      	streq	r3, [r4, #24]
 801fcca:	4620      	mov	r0, r4
 801fccc:	f000 f820 	bl	801fd10 <__sfp>
 801fcd0:	6060      	str	r0, [r4, #4]
 801fcd2:	4620      	mov	r0, r4
 801fcd4:	f000 f81c 	bl	801fd10 <__sfp>
 801fcd8:	60a0      	str	r0, [r4, #8]
 801fcda:	4620      	mov	r0, r4
 801fcdc:	f000 f818 	bl	801fd10 <__sfp>
 801fce0:	2200      	movs	r2, #0
 801fce2:	60e0      	str	r0, [r4, #12]
 801fce4:	2104      	movs	r1, #4
 801fce6:	6860      	ldr	r0, [r4, #4]
 801fce8:	f7ff ff82 	bl	801fbf0 <std>
 801fcec:	68a0      	ldr	r0, [r4, #8]
 801fcee:	2201      	movs	r2, #1
 801fcf0:	2109      	movs	r1, #9
 801fcf2:	f7ff ff7d 	bl	801fbf0 <std>
 801fcf6:	68e0      	ldr	r0, [r4, #12]
 801fcf8:	2202      	movs	r2, #2
 801fcfa:	2112      	movs	r1, #18
 801fcfc:	f7ff ff78 	bl	801fbf0 <std>
 801fd00:	2301      	movs	r3, #1
 801fd02:	61a3      	str	r3, [r4, #24]
 801fd04:	e7d2      	b.n	801fcac <__sinit+0xc>
 801fd06:	bf00      	nop
 801fd08:	0807b218 	.word	0x0807b218
 801fd0c:	0801fc39 	.word	0x0801fc39

0801fd10 <__sfp>:
 801fd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd12:	4607      	mov	r7, r0
 801fd14:	f7ff ffac 	bl	801fc70 <__sfp_lock_acquire>
 801fd18:	4b1e      	ldr	r3, [pc, #120]	; (801fd94 <__sfp+0x84>)
 801fd1a:	681e      	ldr	r6, [r3, #0]
 801fd1c:	69b3      	ldr	r3, [r6, #24]
 801fd1e:	b913      	cbnz	r3, 801fd26 <__sfp+0x16>
 801fd20:	4630      	mov	r0, r6
 801fd22:	f7ff ffbd 	bl	801fca0 <__sinit>
 801fd26:	3648      	adds	r6, #72	; 0x48
 801fd28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801fd2c:	3b01      	subs	r3, #1
 801fd2e:	d503      	bpl.n	801fd38 <__sfp+0x28>
 801fd30:	6833      	ldr	r3, [r6, #0]
 801fd32:	b30b      	cbz	r3, 801fd78 <__sfp+0x68>
 801fd34:	6836      	ldr	r6, [r6, #0]
 801fd36:	e7f7      	b.n	801fd28 <__sfp+0x18>
 801fd38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801fd3c:	b9d5      	cbnz	r5, 801fd74 <__sfp+0x64>
 801fd3e:	4b16      	ldr	r3, [pc, #88]	; (801fd98 <__sfp+0x88>)
 801fd40:	60e3      	str	r3, [r4, #12]
 801fd42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801fd46:	6665      	str	r5, [r4, #100]	; 0x64
 801fd48:	f000 f859 	bl	801fdfe <__retarget_lock_init_recursive>
 801fd4c:	f7ff ff96 	bl	801fc7c <__sfp_lock_release>
 801fd50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801fd54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801fd58:	6025      	str	r5, [r4, #0]
 801fd5a:	61a5      	str	r5, [r4, #24]
 801fd5c:	2208      	movs	r2, #8
 801fd5e:	4629      	mov	r1, r5
 801fd60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801fd64:	f7ff fafa 	bl	801f35c <memset>
 801fd68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801fd6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801fd70:	4620      	mov	r0, r4
 801fd72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fd74:	3468      	adds	r4, #104	; 0x68
 801fd76:	e7d9      	b.n	801fd2c <__sfp+0x1c>
 801fd78:	2104      	movs	r1, #4
 801fd7a:	4638      	mov	r0, r7
 801fd7c:	f7ff ff62 	bl	801fc44 <__sfmoreglue>
 801fd80:	4604      	mov	r4, r0
 801fd82:	6030      	str	r0, [r6, #0]
 801fd84:	2800      	cmp	r0, #0
 801fd86:	d1d5      	bne.n	801fd34 <__sfp+0x24>
 801fd88:	f7ff ff78 	bl	801fc7c <__sfp_lock_release>
 801fd8c:	230c      	movs	r3, #12
 801fd8e:	603b      	str	r3, [r7, #0]
 801fd90:	e7ee      	b.n	801fd70 <__sfp+0x60>
 801fd92:	bf00      	nop
 801fd94:	0807b218 	.word	0x0807b218
 801fd98:	ffff0001 	.word	0xffff0001

0801fd9c <fiprintf>:
 801fd9c:	b40e      	push	{r1, r2, r3}
 801fd9e:	b503      	push	{r0, r1, lr}
 801fda0:	4601      	mov	r1, r0
 801fda2:	ab03      	add	r3, sp, #12
 801fda4:	4805      	ldr	r0, [pc, #20]	; (801fdbc <fiprintf+0x20>)
 801fda6:	f853 2b04 	ldr.w	r2, [r3], #4
 801fdaa:	6800      	ldr	r0, [r0, #0]
 801fdac:	9301      	str	r3, [sp, #4]
 801fdae:	f000 fcc3 	bl	8020738 <_vfiprintf_r>
 801fdb2:	b002      	add	sp, #8
 801fdb4:	f85d eb04 	ldr.w	lr, [sp], #4
 801fdb8:	b003      	add	sp, #12
 801fdba:	4770      	bx	lr
 801fdbc:	20000040 	.word	0x20000040

0801fdc0 <_fwalk_reent>:
 801fdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fdc4:	4606      	mov	r6, r0
 801fdc6:	4688      	mov	r8, r1
 801fdc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fdcc:	2700      	movs	r7, #0
 801fdce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fdd2:	f1b9 0901 	subs.w	r9, r9, #1
 801fdd6:	d505      	bpl.n	801fde4 <_fwalk_reent+0x24>
 801fdd8:	6824      	ldr	r4, [r4, #0]
 801fdda:	2c00      	cmp	r4, #0
 801fddc:	d1f7      	bne.n	801fdce <_fwalk_reent+0xe>
 801fdde:	4638      	mov	r0, r7
 801fde0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fde4:	89ab      	ldrh	r3, [r5, #12]
 801fde6:	2b01      	cmp	r3, #1
 801fde8:	d907      	bls.n	801fdfa <_fwalk_reent+0x3a>
 801fdea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fdee:	3301      	adds	r3, #1
 801fdf0:	d003      	beq.n	801fdfa <_fwalk_reent+0x3a>
 801fdf2:	4629      	mov	r1, r5
 801fdf4:	4630      	mov	r0, r6
 801fdf6:	47c0      	blx	r8
 801fdf8:	4307      	orrs	r7, r0
 801fdfa:	3568      	adds	r5, #104	; 0x68
 801fdfc:	e7e9      	b.n	801fdd2 <_fwalk_reent+0x12>

0801fdfe <__retarget_lock_init_recursive>:
 801fdfe:	4770      	bx	lr

0801fe00 <__retarget_lock_acquire_recursive>:
 801fe00:	4770      	bx	lr

0801fe02 <__retarget_lock_release_recursive>:
 801fe02:	4770      	bx	lr

0801fe04 <_lseek_r>:
 801fe04:	b538      	push	{r3, r4, r5, lr}
 801fe06:	4d07      	ldr	r5, [pc, #28]	; (801fe24 <_lseek_r+0x20>)
 801fe08:	4604      	mov	r4, r0
 801fe0a:	4608      	mov	r0, r1
 801fe0c:	4611      	mov	r1, r2
 801fe0e:	2200      	movs	r2, #0
 801fe10:	602a      	str	r2, [r5, #0]
 801fe12:	461a      	mov	r2, r3
 801fe14:	f7e2 f822 	bl	8001e5c <_lseek>
 801fe18:	1c43      	adds	r3, r0, #1
 801fe1a:	d102      	bne.n	801fe22 <_lseek_r+0x1e>
 801fe1c:	682b      	ldr	r3, [r5, #0]
 801fe1e:	b103      	cbz	r3, 801fe22 <_lseek_r+0x1e>
 801fe20:	6023      	str	r3, [r4, #0]
 801fe22:	bd38      	pop	{r3, r4, r5, pc}
 801fe24:	20014bd0 	.word	0x20014bd0

0801fe28 <__swhatbuf_r>:
 801fe28:	b570      	push	{r4, r5, r6, lr}
 801fe2a:	460e      	mov	r6, r1
 801fe2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe30:	2900      	cmp	r1, #0
 801fe32:	b096      	sub	sp, #88	; 0x58
 801fe34:	4614      	mov	r4, r2
 801fe36:	461d      	mov	r5, r3
 801fe38:	da07      	bge.n	801fe4a <__swhatbuf_r+0x22>
 801fe3a:	2300      	movs	r3, #0
 801fe3c:	602b      	str	r3, [r5, #0]
 801fe3e:	89b3      	ldrh	r3, [r6, #12]
 801fe40:	061a      	lsls	r2, r3, #24
 801fe42:	d410      	bmi.n	801fe66 <__swhatbuf_r+0x3e>
 801fe44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fe48:	e00e      	b.n	801fe68 <__swhatbuf_r+0x40>
 801fe4a:	466a      	mov	r2, sp
 801fe4c:	f001 f9ae 	bl	80211ac <_fstat_r>
 801fe50:	2800      	cmp	r0, #0
 801fe52:	dbf2      	blt.n	801fe3a <__swhatbuf_r+0x12>
 801fe54:	9a01      	ldr	r2, [sp, #4]
 801fe56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fe5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fe5e:	425a      	negs	r2, r3
 801fe60:	415a      	adcs	r2, r3
 801fe62:	602a      	str	r2, [r5, #0]
 801fe64:	e7ee      	b.n	801fe44 <__swhatbuf_r+0x1c>
 801fe66:	2340      	movs	r3, #64	; 0x40
 801fe68:	2000      	movs	r0, #0
 801fe6a:	6023      	str	r3, [r4, #0]
 801fe6c:	b016      	add	sp, #88	; 0x58
 801fe6e:	bd70      	pop	{r4, r5, r6, pc}

0801fe70 <__smakebuf_r>:
 801fe70:	898b      	ldrh	r3, [r1, #12]
 801fe72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fe74:	079d      	lsls	r5, r3, #30
 801fe76:	4606      	mov	r6, r0
 801fe78:	460c      	mov	r4, r1
 801fe7a:	d507      	bpl.n	801fe8c <__smakebuf_r+0x1c>
 801fe7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fe80:	6023      	str	r3, [r4, #0]
 801fe82:	6123      	str	r3, [r4, #16]
 801fe84:	2301      	movs	r3, #1
 801fe86:	6163      	str	r3, [r4, #20]
 801fe88:	b002      	add	sp, #8
 801fe8a:	bd70      	pop	{r4, r5, r6, pc}
 801fe8c:	ab01      	add	r3, sp, #4
 801fe8e:	466a      	mov	r2, sp
 801fe90:	f7ff ffca 	bl	801fe28 <__swhatbuf_r>
 801fe94:	9900      	ldr	r1, [sp, #0]
 801fe96:	4605      	mov	r5, r0
 801fe98:	4630      	mov	r0, r6
 801fe9a:	f000 f89b 	bl	801ffd4 <_malloc_r>
 801fe9e:	b948      	cbnz	r0, 801feb4 <__smakebuf_r+0x44>
 801fea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fea4:	059a      	lsls	r2, r3, #22
 801fea6:	d4ef      	bmi.n	801fe88 <__smakebuf_r+0x18>
 801fea8:	f023 0303 	bic.w	r3, r3, #3
 801feac:	f043 0302 	orr.w	r3, r3, #2
 801feb0:	81a3      	strh	r3, [r4, #12]
 801feb2:	e7e3      	b.n	801fe7c <__smakebuf_r+0xc>
 801feb4:	4b0d      	ldr	r3, [pc, #52]	; (801feec <__smakebuf_r+0x7c>)
 801feb6:	62b3      	str	r3, [r6, #40]	; 0x28
 801feb8:	89a3      	ldrh	r3, [r4, #12]
 801feba:	6020      	str	r0, [r4, #0]
 801febc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fec0:	81a3      	strh	r3, [r4, #12]
 801fec2:	9b00      	ldr	r3, [sp, #0]
 801fec4:	6163      	str	r3, [r4, #20]
 801fec6:	9b01      	ldr	r3, [sp, #4]
 801fec8:	6120      	str	r0, [r4, #16]
 801feca:	b15b      	cbz	r3, 801fee4 <__smakebuf_r+0x74>
 801fecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fed0:	4630      	mov	r0, r6
 801fed2:	f001 f97d 	bl	80211d0 <_isatty_r>
 801fed6:	b128      	cbz	r0, 801fee4 <__smakebuf_r+0x74>
 801fed8:	89a3      	ldrh	r3, [r4, #12]
 801feda:	f023 0303 	bic.w	r3, r3, #3
 801fede:	f043 0301 	orr.w	r3, r3, #1
 801fee2:	81a3      	strh	r3, [r4, #12]
 801fee4:	89a0      	ldrh	r0, [r4, #12]
 801fee6:	4305      	orrs	r5, r0
 801fee8:	81a5      	strh	r5, [r4, #12]
 801feea:	e7cd      	b.n	801fe88 <__smakebuf_r+0x18>
 801feec:	0801fc39 	.word	0x0801fc39

0801fef0 <malloc>:
 801fef0:	4b02      	ldr	r3, [pc, #8]	; (801fefc <malloc+0xc>)
 801fef2:	4601      	mov	r1, r0
 801fef4:	6818      	ldr	r0, [r3, #0]
 801fef6:	f000 b86d 	b.w	801ffd4 <_malloc_r>
 801fefa:	bf00      	nop
 801fefc:	20000040 	.word	0x20000040

0801ff00 <memmem>:
 801ff00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff02:	b17b      	cbz	r3, 801ff24 <memmem+0x24>
 801ff04:	1ac9      	subs	r1, r1, r3
 801ff06:	7816      	ldrb	r6, [r2, #0]
 801ff08:	4401      	add	r1, r0
 801ff0a:	4605      	mov	r5, r0
 801ff0c:	428d      	cmp	r5, r1
 801ff0e:	4628      	mov	r0, r5
 801ff10:	d901      	bls.n	801ff16 <memmem+0x16>
 801ff12:	2000      	movs	r0, #0
 801ff14:	e006      	b.n	801ff24 <memmem+0x24>
 801ff16:	7804      	ldrb	r4, [r0, #0]
 801ff18:	42b4      	cmp	r4, r6
 801ff1a:	f105 0501 	add.w	r5, r5, #1
 801ff1e:	d1f5      	bne.n	801ff0c <memmem+0xc>
 801ff20:	1e5c      	subs	r4, r3, #1
 801ff22:	b904      	cbnz	r4, 801ff26 <memmem+0x26>
 801ff24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff26:	f810 c004 	ldrb.w	ip, [r0, r4]
 801ff2a:	5d17      	ldrb	r7, [r2, r4]
 801ff2c:	45bc      	cmp	ip, r7
 801ff2e:	d1ed      	bne.n	801ff0c <memmem+0xc>
 801ff30:	3c01      	subs	r4, #1
 801ff32:	e7f6      	b.n	801ff22 <memmem+0x22>

0801ff34 <_free_r>:
 801ff34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ff36:	2900      	cmp	r1, #0
 801ff38:	d048      	beq.n	801ffcc <_free_r+0x98>
 801ff3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ff3e:	9001      	str	r0, [sp, #4]
 801ff40:	2b00      	cmp	r3, #0
 801ff42:	f1a1 0404 	sub.w	r4, r1, #4
 801ff46:	bfb8      	it	lt
 801ff48:	18e4      	addlt	r4, r4, r3
 801ff4a:	f001 f951 	bl	80211f0 <__malloc_lock>
 801ff4e:	4a20      	ldr	r2, [pc, #128]	; (801ffd0 <_free_r+0x9c>)
 801ff50:	9801      	ldr	r0, [sp, #4]
 801ff52:	6813      	ldr	r3, [r2, #0]
 801ff54:	4615      	mov	r5, r2
 801ff56:	b933      	cbnz	r3, 801ff66 <_free_r+0x32>
 801ff58:	6063      	str	r3, [r4, #4]
 801ff5a:	6014      	str	r4, [r2, #0]
 801ff5c:	b003      	add	sp, #12
 801ff5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ff62:	f001 b94b 	b.w	80211fc <__malloc_unlock>
 801ff66:	42a3      	cmp	r3, r4
 801ff68:	d90b      	bls.n	801ff82 <_free_r+0x4e>
 801ff6a:	6821      	ldr	r1, [r4, #0]
 801ff6c:	1862      	adds	r2, r4, r1
 801ff6e:	4293      	cmp	r3, r2
 801ff70:	bf04      	itt	eq
 801ff72:	681a      	ldreq	r2, [r3, #0]
 801ff74:	685b      	ldreq	r3, [r3, #4]
 801ff76:	6063      	str	r3, [r4, #4]
 801ff78:	bf04      	itt	eq
 801ff7a:	1852      	addeq	r2, r2, r1
 801ff7c:	6022      	streq	r2, [r4, #0]
 801ff7e:	602c      	str	r4, [r5, #0]
 801ff80:	e7ec      	b.n	801ff5c <_free_r+0x28>
 801ff82:	461a      	mov	r2, r3
 801ff84:	685b      	ldr	r3, [r3, #4]
 801ff86:	b10b      	cbz	r3, 801ff8c <_free_r+0x58>
 801ff88:	42a3      	cmp	r3, r4
 801ff8a:	d9fa      	bls.n	801ff82 <_free_r+0x4e>
 801ff8c:	6811      	ldr	r1, [r2, #0]
 801ff8e:	1855      	adds	r5, r2, r1
 801ff90:	42a5      	cmp	r5, r4
 801ff92:	d10b      	bne.n	801ffac <_free_r+0x78>
 801ff94:	6824      	ldr	r4, [r4, #0]
 801ff96:	4421      	add	r1, r4
 801ff98:	1854      	adds	r4, r2, r1
 801ff9a:	42a3      	cmp	r3, r4
 801ff9c:	6011      	str	r1, [r2, #0]
 801ff9e:	d1dd      	bne.n	801ff5c <_free_r+0x28>
 801ffa0:	681c      	ldr	r4, [r3, #0]
 801ffa2:	685b      	ldr	r3, [r3, #4]
 801ffa4:	6053      	str	r3, [r2, #4]
 801ffa6:	4421      	add	r1, r4
 801ffa8:	6011      	str	r1, [r2, #0]
 801ffaa:	e7d7      	b.n	801ff5c <_free_r+0x28>
 801ffac:	d902      	bls.n	801ffb4 <_free_r+0x80>
 801ffae:	230c      	movs	r3, #12
 801ffb0:	6003      	str	r3, [r0, #0]
 801ffb2:	e7d3      	b.n	801ff5c <_free_r+0x28>
 801ffb4:	6825      	ldr	r5, [r4, #0]
 801ffb6:	1961      	adds	r1, r4, r5
 801ffb8:	428b      	cmp	r3, r1
 801ffba:	bf04      	itt	eq
 801ffbc:	6819      	ldreq	r1, [r3, #0]
 801ffbe:	685b      	ldreq	r3, [r3, #4]
 801ffc0:	6063      	str	r3, [r4, #4]
 801ffc2:	bf04      	itt	eq
 801ffc4:	1949      	addeq	r1, r1, r5
 801ffc6:	6021      	streq	r1, [r4, #0]
 801ffc8:	6054      	str	r4, [r2, #4]
 801ffca:	e7c7      	b.n	801ff5c <_free_r+0x28>
 801ffcc:	b003      	add	sp, #12
 801ffce:	bd30      	pop	{r4, r5, pc}
 801ffd0:	2000c938 	.word	0x2000c938

0801ffd4 <_malloc_r>:
 801ffd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffd6:	1ccd      	adds	r5, r1, #3
 801ffd8:	f025 0503 	bic.w	r5, r5, #3
 801ffdc:	3508      	adds	r5, #8
 801ffde:	2d0c      	cmp	r5, #12
 801ffe0:	bf38      	it	cc
 801ffe2:	250c      	movcc	r5, #12
 801ffe4:	2d00      	cmp	r5, #0
 801ffe6:	4606      	mov	r6, r0
 801ffe8:	db01      	blt.n	801ffee <_malloc_r+0x1a>
 801ffea:	42a9      	cmp	r1, r5
 801ffec:	d903      	bls.n	801fff6 <_malloc_r+0x22>
 801ffee:	230c      	movs	r3, #12
 801fff0:	6033      	str	r3, [r6, #0]
 801fff2:	2000      	movs	r0, #0
 801fff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fff6:	f001 f8fb 	bl	80211f0 <__malloc_lock>
 801fffa:	4921      	ldr	r1, [pc, #132]	; (8020080 <_malloc_r+0xac>)
 801fffc:	680a      	ldr	r2, [r1, #0]
 801fffe:	4614      	mov	r4, r2
 8020000:	b99c      	cbnz	r4, 802002a <_malloc_r+0x56>
 8020002:	4f20      	ldr	r7, [pc, #128]	; (8020084 <_malloc_r+0xb0>)
 8020004:	683b      	ldr	r3, [r7, #0]
 8020006:	b923      	cbnz	r3, 8020012 <_malloc_r+0x3e>
 8020008:	4621      	mov	r1, r4
 802000a:	4630      	mov	r0, r6
 802000c:	f000 ffb6 	bl	8020f7c <_sbrk_r>
 8020010:	6038      	str	r0, [r7, #0]
 8020012:	4629      	mov	r1, r5
 8020014:	4630      	mov	r0, r6
 8020016:	f000 ffb1 	bl	8020f7c <_sbrk_r>
 802001a:	1c43      	adds	r3, r0, #1
 802001c:	d123      	bne.n	8020066 <_malloc_r+0x92>
 802001e:	230c      	movs	r3, #12
 8020020:	6033      	str	r3, [r6, #0]
 8020022:	4630      	mov	r0, r6
 8020024:	f001 f8ea 	bl	80211fc <__malloc_unlock>
 8020028:	e7e3      	b.n	801fff2 <_malloc_r+0x1e>
 802002a:	6823      	ldr	r3, [r4, #0]
 802002c:	1b5b      	subs	r3, r3, r5
 802002e:	d417      	bmi.n	8020060 <_malloc_r+0x8c>
 8020030:	2b0b      	cmp	r3, #11
 8020032:	d903      	bls.n	802003c <_malloc_r+0x68>
 8020034:	6023      	str	r3, [r4, #0]
 8020036:	441c      	add	r4, r3
 8020038:	6025      	str	r5, [r4, #0]
 802003a:	e004      	b.n	8020046 <_malloc_r+0x72>
 802003c:	6863      	ldr	r3, [r4, #4]
 802003e:	42a2      	cmp	r2, r4
 8020040:	bf0c      	ite	eq
 8020042:	600b      	streq	r3, [r1, #0]
 8020044:	6053      	strne	r3, [r2, #4]
 8020046:	4630      	mov	r0, r6
 8020048:	f001 f8d8 	bl	80211fc <__malloc_unlock>
 802004c:	f104 000b 	add.w	r0, r4, #11
 8020050:	1d23      	adds	r3, r4, #4
 8020052:	f020 0007 	bic.w	r0, r0, #7
 8020056:	1ac2      	subs	r2, r0, r3
 8020058:	d0cc      	beq.n	801fff4 <_malloc_r+0x20>
 802005a:	1a1b      	subs	r3, r3, r0
 802005c:	50a3      	str	r3, [r4, r2]
 802005e:	e7c9      	b.n	801fff4 <_malloc_r+0x20>
 8020060:	4622      	mov	r2, r4
 8020062:	6864      	ldr	r4, [r4, #4]
 8020064:	e7cc      	b.n	8020000 <_malloc_r+0x2c>
 8020066:	1cc4      	adds	r4, r0, #3
 8020068:	f024 0403 	bic.w	r4, r4, #3
 802006c:	42a0      	cmp	r0, r4
 802006e:	d0e3      	beq.n	8020038 <_malloc_r+0x64>
 8020070:	1a21      	subs	r1, r4, r0
 8020072:	4630      	mov	r0, r6
 8020074:	f000 ff82 	bl	8020f7c <_sbrk_r>
 8020078:	3001      	adds	r0, #1
 802007a:	d1dd      	bne.n	8020038 <_malloc_r+0x64>
 802007c:	e7cf      	b.n	802001e <_malloc_r+0x4a>
 802007e:	bf00      	nop
 8020080:	2000c938 	.word	0x2000c938
 8020084:	2000c93c 	.word	0x2000c93c

08020088 <__ssputs_r>:
 8020088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802008c:	688e      	ldr	r6, [r1, #8]
 802008e:	429e      	cmp	r6, r3
 8020090:	4682      	mov	sl, r0
 8020092:	460c      	mov	r4, r1
 8020094:	4690      	mov	r8, r2
 8020096:	461f      	mov	r7, r3
 8020098:	d838      	bhi.n	802010c <__ssputs_r+0x84>
 802009a:	898a      	ldrh	r2, [r1, #12]
 802009c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80200a0:	d032      	beq.n	8020108 <__ssputs_r+0x80>
 80200a2:	6825      	ldr	r5, [r4, #0]
 80200a4:	6909      	ldr	r1, [r1, #16]
 80200a6:	eba5 0901 	sub.w	r9, r5, r1
 80200aa:	6965      	ldr	r5, [r4, #20]
 80200ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80200b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80200b4:	3301      	adds	r3, #1
 80200b6:	444b      	add	r3, r9
 80200b8:	106d      	asrs	r5, r5, #1
 80200ba:	429d      	cmp	r5, r3
 80200bc:	bf38      	it	cc
 80200be:	461d      	movcc	r5, r3
 80200c0:	0553      	lsls	r3, r2, #21
 80200c2:	d531      	bpl.n	8020128 <__ssputs_r+0xa0>
 80200c4:	4629      	mov	r1, r5
 80200c6:	f7ff ff85 	bl	801ffd4 <_malloc_r>
 80200ca:	4606      	mov	r6, r0
 80200cc:	b950      	cbnz	r0, 80200e4 <__ssputs_r+0x5c>
 80200ce:	230c      	movs	r3, #12
 80200d0:	f8ca 3000 	str.w	r3, [sl]
 80200d4:	89a3      	ldrh	r3, [r4, #12]
 80200d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80200da:	81a3      	strh	r3, [r4, #12]
 80200dc:	f04f 30ff 	mov.w	r0, #4294967295
 80200e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80200e4:	6921      	ldr	r1, [r4, #16]
 80200e6:	464a      	mov	r2, r9
 80200e8:	f7ff f910 	bl	801f30c <memcpy>
 80200ec:	89a3      	ldrh	r3, [r4, #12]
 80200ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80200f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80200f6:	81a3      	strh	r3, [r4, #12]
 80200f8:	6126      	str	r6, [r4, #16]
 80200fa:	6165      	str	r5, [r4, #20]
 80200fc:	444e      	add	r6, r9
 80200fe:	eba5 0509 	sub.w	r5, r5, r9
 8020102:	6026      	str	r6, [r4, #0]
 8020104:	60a5      	str	r5, [r4, #8]
 8020106:	463e      	mov	r6, r7
 8020108:	42be      	cmp	r6, r7
 802010a:	d900      	bls.n	802010e <__ssputs_r+0x86>
 802010c:	463e      	mov	r6, r7
 802010e:	4632      	mov	r2, r6
 8020110:	6820      	ldr	r0, [r4, #0]
 8020112:	4641      	mov	r1, r8
 8020114:	f7ff f908 	bl	801f328 <memmove>
 8020118:	68a3      	ldr	r3, [r4, #8]
 802011a:	6822      	ldr	r2, [r4, #0]
 802011c:	1b9b      	subs	r3, r3, r6
 802011e:	4432      	add	r2, r6
 8020120:	60a3      	str	r3, [r4, #8]
 8020122:	6022      	str	r2, [r4, #0]
 8020124:	2000      	movs	r0, #0
 8020126:	e7db      	b.n	80200e0 <__ssputs_r+0x58>
 8020128:	462a      	mov	r2, r5
 802012a:	f001 f86d 	bl	8021208 <_realloc_r>
 802012e:	4606      	mov	r6, r0
 8020130:	2800      	cmp	r0, #0
 8020132:	d1e1      	bne.n	80200f8 <__ssputs_r+0x70>
 8020134:	6921      	ldr	r1, [r4, #16]
 8020136:	4650      	mov	r0, sl
 8020138:	f7ff fefc 	bl	801ff34 <_free_r>
 802013c:	e7c7      	b.n	80200ce <__ssputs_r+0x46>
	...

08020140 <_svfiprintf_r>:
 8020140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020144:	4698      	mov	r8, r3
 8020146:	898b      	ldrh	r3, [r1, #12]
 8020148:	061b      	lsls	r3, r3, #24
 802014a:	b09d      	sub	sp, #116	; 0x74
 802014c:	4607      	mov	r7, r0
 802014e:	460d      	mov	r5, r1
 8020150:	4614      	mov	r4, r2
 8020152:	d50e      	bpl.n	8020172 <_svfiprintf_r+0x32>
 8020154:	690b      	ldr	r3, [r1, #16]
 8020156:	b963      	cbnz	r3, 8020172 <_svfiprintf_r+0x32>
 8020158:	2140      	movs	r1, #64	; 0x40
 802015a:	f7ff ff3b 	bl	801ffd4 <_malloc_r>
 802015e:	6028      	str	r0, [r5, #0]
 8020160:	6128      	str	r0, [r5, #16]
 8020162:	b920      	cbnz	r0, 802016e <_svfiprintf_r+0x2e>
 8020164:	230c      	movs	r3, #12
 8020166:	603b      	str	r3, [r7, #0]
 8020168:	f04f 30ff 	mov.w	r0, #4294967295
 802016c:	e0d1      	b.n	8020312 <_svfiprintf_r+0x1d2>
 802016e:	2340      	movs	r3, #64	; 0x40
 8020170:	616b      	str	r3, [r5, #20]
 8020172:	2300      	movs	r3, #0
 8020174:	9309      	str	r3, [sp, #36]	; 0x24
 8020176:	2320      	movs	r3, #32
 8020178:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802017c:	f8cd 800c 	str.w	r8, [sp, #12]
 8020180:	2330      	movs	r3, #48	; 0x30
 8020182:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802032c <_svfiprintf_r+0x1ec>
 8020186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802018a:	f04f 0901 	mov.w	r9, #1
 802018e:	4623      	mov	r3, r4
 8020190:	469a      	mov	sl, r3
 8020192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020196:	b10a      	cbz	r2, 802019c <_svfiprintf_r+0x5c>
 8020198:	2a25      	cmp	r2, #37	; 0x25
 802019a:	d1f9      	bne.n	8020190 <_svfiprintf_r+0x50>
 802019c:	ebba 0b04 	subs.w	fp, sl, r4
 80201a0:	d00b      	beq.n	80201ba <_svfiprintf_r+0x7a>
 80201a2:	465b      	mov	r3, fp
 80201a4:	4622      	mov	r2, r4
 80201a6:	4629      	mov	r1, r5
 80201a8:	4638      	mov	r0, r7
 80201aa:	f7ff ff6d 	bl	8020088 <__ssputs_r>
 80201ae:	3001      	adds	r0, #1
 80201b0:	f000 80aa 	beq.w	8020308 <_svfiprintf_r+0x1c8>
 80201b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80201b6:	445a      	add	r2, fp
 80201b8:	9209      	str	r2, [sp, #36]	; 0x24
 80201ba:	f89a 3000 	ldrb.w	r3, [sl]
 80201be:	2b00      	cmp	r3, #0
 80201c0:	f000 80a2 	beq.w	8020308 <_svfiprintf_r+0x1c8>
 80201c4:	2300      	movs	r3, #0
 80201c6:	f04f 32ff 	mov.w	r2, #4294967295
 80201ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80201ce:	f10a 0a01 	add.w	sl, sl, #1
 80201d2:	9304      	str	r3, [sp, #16]
 80201d4:	9307      	str	r3, [sp, #28]
 80201d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80201da:	931a      	str	r3, [sp, #104]	; 0x68
 80201dc:	4654      	mov	r4, sl
 80201de:	2205      	movs	r2, #5
 80201e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80201e4:	4851      	ldr	r0, [pc, #324]	; (802032c <_svfiprintf_r+0x1ec>)
 80201e6:	f7e0 f80b 	bl	8000200 <memchr>
 80201ea:	9a04      	ldr	r2, [sp, #16]
 80201ec:	b9d8      	cbnz	r0, 8020226 <_svfiprintf_r+0xe6>
 80201ee:	06d0      	lsls	r0, r2, #27
 80201f0:	bf44      	itt	mi
 80201f2:	2320      	movmi	r3, #32
 80201f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80201f8:	0711      	lsls	r1, r2, #28
 80201fa:	bf44      	itt	mi
 80201fc:	232b      	movmi	r3, #43	; 0x2b
 80201fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020202:	f89a 3000 	ldrb.w	r3, [sl]
 8020206:	2b2a      	cmp	r3, #42	; 0x2a
 8020208:	d015      	beq.n	8020236 <_svfiprintf_r+0xf6>
 802020a:	9a07      	ldr	r2, [sp, #28]
 802020c:	4654      	mov	r4, sl
 802020e:	2000      	movs	r0, #0
 8020210:	f04f 0c0a 	mov.w	ip, #10
 8020214:	4621      	mov	r1, r4
 8020216:	f811 3b01 	ldrb.w	r3, [r1], #1
 802021a:	3b30      	subs	r3, #48	; 0x30
 802021c:	2b09      	cmp	r3, #9
 802021e:	d94e      	bls.n	80202be <_svfiprintf_r+0x17e>
 8020220:	b1b0      	cbz	r0, 8020250 <_svfiprintf_r+0x110>
 8020222:	9207      	str	r2, [sp, #28]
 8020224:	e014      	b.n	8020250 <_svfiprintf_r+0x110>
 8020226:	eba0 0308 	sub.w	r3, r0, r8
 802022a:	fa09 f303 	lsl.w	r3, r9, r3
 802022e:	4313      	orrs	r3, r2
 8020230:	9304      	str	r3, [sp, #16]
 8020232:	46a2      	mov	sl, r4
 8020234:	e7d2      	b.n	80201dc <_svfiprintf_r+0x9c>
 8020236:	9b03      	ldr	r3, [sp, #12]
 8020238:	1d19      	adds	r1, r3, #4
 802023a:	681b      	ldr	r3, [r3, #0]
 802023c:	9103      	str	r1, [sp, #12]
 802023e:	2b00      	cmp	r3, #0
 8020240:	bfbb      	ittet	lt
 8020242:	425b      	neglt	r3, r3
 8020244:	f042 0202 	orrlt.w	r2, r2, #2
 8020248:	9307      	strge	r3, [sp, #28]
 802024a:	9307      	strlt	r3, [sp, #28]
 802024c:	bfb8      	it	lt
 802024e:	9204      	strlt	r2, [sp, #16]
 8020250:	7823      	ldrb	r3, [r4, #0]
 8020252:	2b2e      	cmp	r3, #46	; 0x2e
 8020254:	d10c      	bne.n	8020270 <_svfiprintf_r+0x130>
 8020256:	7863      	ldrb	r3, [r4, #1]
 8020258:	2b2a      	cmp	r3, #42	; 0x2a
 802025a:	d135      	bne.n	80202c8 <_svfiprintf_r+0x188>
 802025c:	9b03      	ldr	r3, [sp, #12]
 802025e:	1d1a      	adds	r2, r3, #4
 8020260:	681b      	ldr	r3, [r3, #0]
 8020262:	9203      	str	r2, [sp, #12]
 8020264:	2b00      	cmp	r3, #0
 8020266:	bfb8      	it	lt
 8020268:	f04f 33ff 	movlt.w	r3, #4294967295
 802026c:	3402      	adds	r4, #2
 802026e:	9305      	str	r3, [sp, #20]
 8020270:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802033c <_svfiprintf_r+0x1fc>
 8020274:	7821      	ldrb	r1, [r4, #0]
 8020276:	2203      	movs	r2, #3
 8020278:	4650      	mov	r0, sl
 802027a:	f7df ffc1 	bl	8000200 <memchr>
 802027e:	b140      	cbz	r0, 8020292 <_svfiprintf_r+0x152>
 8020280:	2340      	movs	r3, #64	; 0x40
 8020282:	eba0 000a 	sub.w	r0, r0, sl
 8020286:	fa03 f000 	lsl.w	r0, r3, r0
 802028a:	9b04      	ldr	r3, [sp, #16]
 802028c:	4303      	orrs	r3, r0
 802028e:	3401      	adds	r4, #1
 8020290:	9304      	str	r3, [sp, #16]
 8020292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020296:	4826      	ldr	r0, [pc, #152]	; (8020330 <_svfiprintf_r+0x1f0>)
 8020298:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802029c:	2206      	movs	r2, #6
 802029e:	f7df ffaf 	bl	8000200 <memchr>
 80202a2:	2800      	cmp	r0, #0
 80202a4:	d038      	beq.n	8020318 <_svfiprintf_r+0x1d8>
 80202a6:	4b23      	ldr	r3, [pc, #140]	; (8020334 <_svfiprintf_r+0x1f4>)
 80202a8:	bb1b      	cbnz	r3, 80202f2 <_svfiprintf_r+0x1b2>
 80202aa:	9b03      	ldr	r3, [sp, #12]
 80202ac:	3307      	adds	r3, #7
 80202ae:	f023 0307 	bic.w	r3, r3, #7
 80202b2:	3308      	adds	r3, #8
 80202b4:	9303      	str	r3, [sp, #12]
 80202b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202b8:	4433      	add	r3, r6
 80202ba:	9309      	str	r3, [sp, #36]	; 0x24
 80202bc:	e767      	b.n	802018e <_svfiprintf_r+0x4e>
 80202be:	fb0c 3202 	mla	r2, ip, r2, r3
 80202c2:	460c      	mov	r4, r1
 80202c4:	2001      	movs	r0, #1
 80202c6:	e7a5      	b.n	8020214 <_svfiprintf_r+0xd4>
 80202c8:	2300      	movs	r3, #0
 80202ca:	3401      	adds	r4, #1
 80202cc:	9305      	str	r3, [sp, #20]
 80202ce:	4619      	mov	r1, r3
 80202d0:	f04f 0c0a 	mov.w	ip, #10
 80202d4:	4620      	mov	r0, r4
 80202d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80202da:	3a30      	subs	r2, #48	; 0x30
 80202dc:	2a09      	cmp	r2, #9
 80202de:	d903      	bls.n	80202e8 <_svfiprintf_r+0x1a8>
 80202e0:	2b00      	cmp	r3, #0
 80202e2:	d0c5      	beq.n	8020270 <_svfiprintf_r+0x130>
 80202e4:	9105      	str	r1, [sp, #20]
 80202e6:	e7c3      	b.n	8020270 <_svfiprintf_r+0x130>
 80202e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80202ec:	4604      	mov	r4, r0
 80202ee:	2301      	movs	r3, #1
 80202f0:	e7f0      	b.n	80202d4 <_svfiprintf_r+0x194>
 80202f2:	ab03      	add	r3, sp, #12
 80202f4:	9300      	str	r3, [sp, #0]
 80202f6:	462a      	mov	r2, r5
 80202f8:	4b0f      	ldr	r3, [pc, #60]	; (8020338 <_svfiprintf_r+0x1f8>)
 80202fa:	a904      	add	r1, sp, #16
 80202fc:	4638      	mov	r0, r7
 80202fe:	f3af 8000 	nop.w
 8020302:	1c42      	adds	r2, r0, #1
 8020304:	4606      	mov	r6, r0
 8020306:	d1d6      	bne.n	80202b6 <_svfiprintf_r+0x176>
 8020308:	89ab      	ldrh	r3, [r5, #12]
 802030a:	065b      	lsls	r3, r3, #25
 802030c:	f53f af2c 	bmi.w	8020168 <_svfiprintf_r+0x28>
 8020310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020312:	b01d      	add	sp, #116	; 0x74
 8020314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020318:	ab03      	add	r3, sp, #12
 802031a:	9300      	str	r3, [sp, #0]
 802031c:	462a      	mov	r2, r5
 802031e:	4b06      	ldr	r3, [pc, #24]	; (8020338 <_svfiprintf_r+0x1f8>)
 8020320:	a904      	add	r1, sp, #16
 8020322:	4638      	mov	r0, r7
 8020324:	f000 fba6 	bl	8020a74 <_printf_i>
 8020328:	e7eb      	b.n	8020302 <_svfiprintf_r+0x1c2>
 802032a:	bf00      	nop
 802032c:	0807b330 	.word	0x0807b330
 8020330:	0807b33a 	.word	0x0807b33a
 8020334:	00000000 	.word	0x00000000
 8020338:	08020089 	.word	0x08020089
 802033c:	0807b336 	.word	0x0807b336

08020340 <_sungetc_r>:
 8020340:	b538      	push	{r3, r4, r5, lr}
 8020342:	1c4b      	adds	r3, r1, #1
 8020344:	4614      	mov	r4, r2
 8020346:	d103      	bne.n	8020350 <_sungetc_r+0x10>
 8020348:	f04f 35ff 	mov.w	r5, #4294967295
 802034c:	4628      	mov	r0, r5
 802034e:	bd38      	pop	{r3, r4, r5, pc}
 8020350:	8993      	ldrh	r3, [r2, #12]
 8020352:	f023 0320 	bic.w	r3, r3, #32
 8020356:	8193      	strh	r3, [r2, #12]
 8020358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802035a:	6852      	ldr	r2, [r2, #4]
 802035c:	b2cd      	uxtb	r5, r1
 802035e:	b18b      	cbz	r3, 8020384 <_sungetc_r+0x44>
 8020360:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020362:	4293      	cmp	r3, r2
 8020364:	dd08      	ble.n	8020378 <_sungetc_r+0x38>
 8020366:	6823      	ldr	r3, [r4, #0]
 8020368:	1e5a      	subs	r2, r3, #1
 802036a:	6022      	str	r2, [r4, #0]
 802036c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020370:	6863      	ldr	r3, [r4, #4]
 8020372:	3301      	adds	r3, #1
 8020374:	6063      	str	r3, [r4, #4]
 8020376:	e7e9      	b.n	802034c <_sungetc_r+0xc>
 8020378:	4621      	mov	r1, r4
 802037a:	f000 fed5 	bl	8021128 <__submore>
 802037e:	2800      	cmp	r0, #0
 8020380:	d0f1      	beq.n	8020366 <_sungetc_r+0x26>
 8020382:	e7e1      	b.n	8020348 <_sungetc_r+0x8>
 8020384:	6921      	ldr	r1, [r4, #16]
 8020386:	6823      	ldr	r3, [r4, #0]
 8020388:	b151      	cbz	r1, 80203a0 <_sungetc_r+0x60>
 802038a:	4299      	cmp	r1, r3
 802038c:	d208      	bcs.n	80203a0 <_sungetc_r+0x60>
 802038e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020392:	42a9      	cmp	r1, r5
 8020394:	d104      	bne.n	80203a0 <_sungetc_r+0x60>
 8020396:	3b01      	subs	r3, #1
 8020398:	3201      	adds	r2, #1
 802039a:	6023      	str	r3, [r4, #0]
 802039c:	6062      	str	r2, [r4, #4]
 802039e:	e7d5      	b.n	802034c <_sungetc_r+0xc>
 80203a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80203a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80203a8:	6363      	str	r3, [r4, #52]	; 0x34
 80203aa:	2303      	movs	r3, #3
 80203ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80203ae:	4623      	mov	r3, r4
 80203b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80203b4:	6023      	str	r3, [r4, #0]
 80203b6:	2301      	movs	r3, #1
 80203b8:	e7dc      	b.n	8020374 <_sungetc_r+0x34>

080203ba <__ssrefill_r>:
 80203ba:	b510      	push	{r4, lr}
 80203bc:	460c      	mov	r4, r1
 80203be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80203c0:	b169      	cbz	r1, 80203de <__ssrefill_r+0x24>
 80203c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80203c6:	4299      	cmp	r1, r3
 80203c8:	d001      	beq.n	80203ce <__ssrefill_r+0x14>
 80203ca:	f7ff fdb3 	bl	801ff34 <_free_r>
 80203ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80203d0:	6063      	str	r3, [r4, #4]
 80203d2:	2000      	movs	r0, #0
 80203d4:	6360      	str	r0, [r4, #52]	; 0x34
 80203d6:	b113      	cbz	r3, 80203de <__ssrefill_r+0x24>
 80203d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80203da:	6023      	str	r3, [r4, #0]
 80203dc:	bd10      	pop	{r4, pc}
 80203de:	6923      	ldr	r3, [r4, #16]
 80203e0:	6023      	str	r3, [r4, #0]
 80203e2:	2300      	movs	r3, #0
 80203e4:	6063      	str	r3, [r4, #4]
 80203e6:	89a3      	ldrh	r3, [r4, #12]
 80203e8:	f043 0320 	orr.w	r3, r3, #32
 80203ec:	81a3      	strh	r3, [r4, #12]
 80203ee:	f04f 30ff 	mov.w	r0, #4294967295
 80203f2:	e7f3      	b.n	80203dc <__ssrefill_r+0x22>

080203f4 <__ssvfiscanf_r>:
 80203f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203f8:	460c      	mov	r4, r1
 80203fa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80203fe:	2100      	movs	r1, #0
 8020400:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8020404:	49b2      	ldr	r1, [pc, #712]	; (80206d0 <__ssvfiscanf_r+0x2dc>)
 8020406:	91a0      	str	r1, [sp, #640]	; 0x280
 8020408:	f10d 0804 	add.w	r8, sp, #4
 802040c:	49b1      	ldr	r1, [pc, #708]	; (80206d4 <__ssvfiscanf_r+0x2e0>)
 802040e:	4fb2      	ldr	r7, [pc, #712]	; (80206d8 <__ssvfiscanf_r+0x2e4>)
 8020410:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80206dc <__ssvfiscanf_r+0x2e8>
 8020414:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8020418:	4606      	mov	r6, r0
 802041a:	91a1      	str	r1, [sp, #644]	; 0x284
 802041c:	9300      	str	r3, [sp, #0]
 802041e:	f892 a000 	ldrb.w	sl, [r2]
 8020422:	f1ba 0f00 	cmp.w	sl, #0
 8020426:	f000 8151 	beq.w	80206cc <__ssvfiscanf_r+0x2d8>
 802042a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802042e:	f013 0308 	ands.w	r3, r3, #8
 8020432:	f102 0501 	add.w	r5, r2, #1
 8020436:	d019      	beq.n	802046c <__ssvfiscanf_r+0x78>
 8020438:	6863      	ldr	r3, [r4, #4]
 802043a:	2b00      	cmp	r3, #0
 802043c:	dd0f      	ble.n	802045e <__ssvfiscanf_r+0x6a>
 802043e:	6823      	ldr	r3, [r4, #0]
 8020440:	781a      	ldrb	r2, [r3, #0]
 8020442:	5cba      	ldrb	r2, [r7, r2]
 8020444:	0712      	lsls	r2, r2, #28
 8020446:	d401      	bmi.n	802044c <__ssvfiscanf_r+0x58>
 8020448:	462a      	mov	r2, r5
 802044a:	e7e8      	b.n	802041e <__ssvfiscanf_r+0x2a>
 802044c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802044e:	3201      	adds	r2, #1
 8020450:	9245      	str	r2, [sp, #276]	; 0x114
 8020452:	6862      	ldr	r2, [r4, #4]
 8020454:	3301      	adds	r3, #1
 8020456:	3a01      	subs	r2, #1
 8020458:	6062      	str	r2, [r4, #4]
 802045a:	6023      	str	r3, [r4, #0]
 802045c:	e7ec      	b.n	8020438 <__ssvfiscanf_r+0x44>
 802045e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020460:	4621      	mov	r1, r4
 8020462:	4630      	mov	r0, r6
 8020464:	4798      	blx	r3
 8020466:	2800      	cmp	r0, #0
 8020468:	d0e9      	beq.n	802043e <__ssvfiscanf_r+0x4a>
 802046a:	e7ed      	b.n	8020448 <__ssvfiscanf_r+0x54>
 802046c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8020470:	f040 8083 	bne.w	802057a <__ssvfiscanf_r+0x186>
 8020474:	9341      	str	r3, [sp, #260]	; 0x104
 8020476:	9343      	str	r3, [sp, #268]	; 0x10c
 8020478:	7853      	ldrb	r3, [r2, #1]
 802047a:	2b2a      	cmp	r3, #42	; 0x2a
 802047c:	bf02      	ittt	eq
 802047e:	2310      	moveq	r3, #16
 8020480:	1c95      	addeq	r5, r2, #2
 8020482:	9341      	streq	r3, [sp, #260]	; 0x104
 8020484:	220a      	movs	r2, #10
 8020486:	46ab      	mov	fp, r5
 8020488:	f81b 1b01 	ldrb.w	r1, [fp], #1
 802048c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8020490:	2b09      	cmp	r3, #9
 8020492:	d91d      	bls.n	80204d0 <__ssvfiscanf_r+0xdc>
 8020494:	4891      	ldr	r0, [pc, #580]	; (80206dc <__ssvfiscanf_r+0x2e8>)
 8020496:	2203      	movs	r2, #3
 8020498:	f7df feb2 	bl	8000200 <memchr>
 802049c:	b140      	cbz	r0, 80204b0 <__ssvfiscanf_r+0xbc>
 802049e:	2301      	movs	r3, #1
 80204a0:	eba0 0009 	sub.w	r0, r0, r9
 80204a4:	fa03 f000 	lsl.w	r0, r3, r0
 80204a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80204aa:	4318      	orrs	r0, r3
 80204ac:	9041      	str	r0, [sp, #260]	; 0x104
 80204ae:	465d      	mov	r5, fp
 80204b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80204b4:	2b78      	cmp	r3, #120	; 0x78
 80204b6:	d806      	bhi.n	80204c6 <__ssvfiscanf_r+0xd2>
 80204b8:	2b57      	cmp	r3, #87	; 0x57
 80204ba:	d810      	bhi.n	80204de <__ssvfiscanf_r+0xea>
 80204bc:	2b25      	cmp	r3, #37	; 0x25
 80204be:	d05c      	beq.n	802057a <__ssvfiscanf_r+0x186>
 80204c0:	d856      	bhi.n	8020570 <__ssvfiscanf_r+0x17c>
 80204c2:	2b00      	cmp	r3, #0
 80204c4:	d074      	beq.n	80205b0 <__ssvfiscanf_r+0x1bc>
 80204c6:	2303      	movs	r3, #3
 80204c8:	9347      	str	r3, [sp, #284]	; 0x11c
 80204ca:	230a      	movs	r3, #10
 80204cc:	9342      	str	r3, [sp, #264]	; 0x108
 80204ce:	e081      	b.n	80205d4 <__ssvfiscanf_r+0x1e0>
 80204d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80204d2:	fb02 1303 	mla	r3, r2, r3, r1
 80204d6:	3b30      	subs	r3, #48	; 0x30
 80204d8:	9343      	str	r3, [sp, #268]	; 0x10c
 80204da:	465d      	mov	r5, fp
 80204dc:	e7d3      	b.n	8020486 <__ssvfiscanf_r+0x92>
 80204de:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80204e2:	2a20      	cmp	r2, #32
 80204e4:	d8ef      	bhi.n	80204c6 <__ssvfiscanf_r+0xd2>
 80204e6:	a101      	add	r1, pc, #4	; (adr r1, 80204ec <__ssvfiscanf_r+0xf8>)
 80204e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80204ec:	080205bf 	.word	0x080205bf
 80204f0:	080204c7 	.word	0x080204c7
 80204f4:	080204c7 	.word	0x080204c7
 80204f8:	0802061d 	.word	0x0802061d
 80204fc:	080204c7 	.word	0x080204c7
 8020500:	080204c7 	.word	0x080204c7
 8020504:	080204c7 	.word	0x080204c7
 8020508:	080204c7 	.word	0x080204c7
 802050c:	080204c7 	.word	0x080204c7
 8020510:	080204c7 	.word	0x080204c7
 8020514:	080204c7 	.word	0x080204c7
 8020518:	08020633 	.word	0x08020633
 802051c:	08020609 	.word	0x08020609
 8020520:	08020577 	.word	0x08020577
 8020524:	08020577 	.word	0x08020577
 8020528:	08020577 	.word	0x08020577
 802052c:	080204c7 	.word	0x080204c7
 8020530:	0802060d 	.word	0x0802060d
 8020534:	080204c7 	.word	0x080204c7
 8020538:	080204c7 	.word	0x080204c7
 802053c:	080204c7 	.word	0x080204c7
 8020540:	080204c7 	.word	0x080204c7
 8020544:	08020643 	.word	0x08020643
 8020548:	08020615 	.word	0x08020615
 802054c:	080205b7 	.word	0x080205b7
 8020550:	080204c7 	.word	0x080204c7
 8020554:	080204c7 	.word	0x080204c7
 8020558:	0802063f 	.word	0x0802063f
 802055c:	080204c7 	.word	0x080204c7
 8020560:	08020609 	.word	0x08020609
 8020564:	080204c7 	.word	0x080204c7
 8020568:	080204c7 	.word	0x080204c7
 802056c:	080205bf 	.word	0x080205bf
 8020570:	3b45      	subs	r3, #69	; 0x45
 8020572:	2b02      	cmp	r3, #2
 8020574:	d8a7      	bhi.n	80204c6 <__ssvfiscanf_r+0xd2>
 8020576:	2305      	movs	r3, #5
 8020578:	e02b      	b.n	80205d2 <__ssvfiscanf_r+0x1de>
 802057a:	6863      	ldr	r3, [r4, #4]
 802057c:	2b00      	cmp	r3, #0
 802057e:	dd0d      	ble.n	802059c <__ssvfiscanf_r+0x1a8>
 8020580:	6823      	ldr	r3, [r4, #0]
 8020582:	781a      	ldrb	r2, [r3, #0]
 8020584:	4552      	cmp	r2, sl
 8020586:	f040 80a1 	bne.w	80206cc <__ssvfiscanf_r+0x2d8>
 802058a:	3301      	adds	r3, #1
 802058c:	6862      	ldr	r2, [r4, #4]
 802058e:	6023      	str	r3, [r4, #0]
 8020590:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020592:	3a01      	subs	r2, #1
 8020594:	3301      	adds	r3, #1
 8020596:	6062      	str	r2, [r4, #4]
 8020598:	9345      	str	r3, [sp, #276]	; 0x114
 802059a:	e755      	b.n	8020448 <__ssvfiscanf_r+0x54>
 802059c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802059e:	4621      	mov	r1, r4
 80205a0:	4630      	mov	r0, r6
 80205a2:	4798      	blx	r3
 80205a4:	2800      	cmp	r0, #0
 80205a6:	d0eb      	beq.n	8020580 <__ssvfiscanf_r+0x18c>
 80205a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80205aa:	2800      	cmp	r0, #0
 80205ac:	f040 8084 	bne.w	80206b8 <__ssvfiscanf_r+0x2c4>
 80205b0:	f04f 30ff 	mov.w	r0, #4294967295
 80205b4:	e086      	b.n	80206c4 <__ssvfiscanf_r+0x2d0>
 80205b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80205b8:	f042 0220 	orr.w	r2, r2, #32
 80205bc:	9241      	str	r2, [sp, #260]	; 0x104
 80205be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80205c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80205c4:	9241      	str	r2, [sp, #260]	; 0x104
 80205c6:	2210      	movs	r2, #16
 80205c8:	2b6f      	cmp	r3, #111	; 0x6f
 80205ca:	9242      	str	r2, [sp, #264]	; 0x108
 80205cc:	bf34      	ite	cc
 80205ce:	2303      	movcc	r3, #3
 80205d0:	2304      	movcs	r3, #4
 80205d2:	9347      	str	r3, [sp, #284]	; 0x11c
 80205d4:	6863      	ldr	r3, [r4, #4]
 80205d6:	2b00      	cmp	r3, #0
 80205d8:	dd41      	ble.n	802065e <__ssvfiscanf_r+0x26a>
 80205da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80205dc:	0659      	lsls	r1, r3, #25
 80205de:	d404      	bmi.n	80205ea <__ssvfiscanf_r+0x1f6>
 80205e0:	6823      	ldr	r3, [r4, #0]
 80205e2:	781a      	ldrb	r2, [r3, #0]
 80205e4:	5cba      	ldrb	r2, [r7, r2]
 80205e6:	0712      	lsls	r2, r2, #28
 80205e8:	d440      	bmi.n	802066c <__ssvfiscanf_r+0x278>
 80205ea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80205ec:	2b02      	cmp	r3, #2
 80205ee:	dc4f      	bgt.n	8020690 <__ssvfiscanf_r+0x29c>
 80205f0:	466b      	mov	r3, sp
 80205f2:	4622      	mov	r2, r4
 80205f4:	a941      	add	r1, sp, #260	; 0x104
 80205f6:	4630      	mov	r0, r6
 80205f8:	f000 fb62 	bl	8020cc0 <_scanf_chars>
 80205fc:	2801      	cmp	r0, #1
 80205fe:	d065      	beq.n	80206cc <__ssvfiscanf_r+0x2d8>
 8020600:	2802      	cmp	r0, #2
 8020602:	f47f af21 	bne.w	8020448 <__ssvfiscanf_r+0x54>
 8020606:	e7cf      	b.n	80205a8 <__ssvfiscanf_r+0x1b4>
 8020608:	220a      	movs	r2, #10
 802060a:	e7dd      	b.n	80205c8 <__ssvfiscanf_r+0x1d4>
 802060c:	2300      	movs	r3, #0
 802060e:	9342      	str	r3, [sp, #264]	; 0x108
 8020610:	2303      	movs	r3, #3
 8020612:	e7de      	b.n	80205d2 <__ssvfiscanf_r+0x1de>
 8020614:	2308      	movs	r3, #8
 8020616:	9342      	str	r3, [sp, #264]	; 0x108
 8020618:	2304      	movs	r3, #4
 802061a:	e7da      	b.n	80205d2 <__ssvfiscanf_r+0x1de>
 802061c:	4629      	mov	r1, r5
 802061e:	4640      	mov	r0, r8
 8020620:	f000 fcbc 	bl	8020f9c <__sccl>
 8020624:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802062a:	9341      	str	r3, [sp, #260]	; 0x104
 802062c:	4605      	mov	r5, r0
 802062e:	2301      	movs	r3, #1
 8020630:	e7cf      	b.n	80205d2 <__ssvfiscanf_r+0x1de>
 8020632:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020638:	9341      	str	r3, [sp, #260]	; 0x104
 802063a:	2300      	movs	r3, #0
 802063c:	e7c9      	b.n	80205d2 <__ssvfiscanf_r+0x1de>
 802063e:	2302      	movs	r3, #2
 8020640:	e7c7      	b.n	80205d2 <__ssvfiscanf_r+0x1de>
 8020642:	9841      	ldr	r0, [sp, #260]	; 0x104
 8020644:	06c3      	lsls	r3, r0, #27
 8020646:	f53f aeff 	bmi.w	8020448 <__ssvfiscanf_r+0x54>
 802064a:	9b00      	ldr	r3, [sp, #0]
 802064c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802064e:	1d19      	adds	r1, r3, #4
 8020650:	9100      	str	r1, [sp, #0]
 8020652:	681b      	ldr	r3, [r3, #0]
 8020654:	07c0      	lsls	r0, r0, #31
 8020656:	bf4c      	ite	mi
 8020658:	801a      	strhmi	r2, [r3, #0]
 802065a:	601a      	strpl	r2, [r3, #0]
 802065c:	e6f4      	b.n	8020448 <__ssvfiscanf_r+0x54>
 802065e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020660:	4621      	mov	r1, r4
 8020662:	4630      	mov	r0, r6
 8020664:	4798      	blx	r3
 8020666:	2800      	cmp	r0, #0
 8020668:	d0b7      	beq.n	80205da <__ssvfiscanf_r+0x1e6>
 802066a:	e79d      	b.n	80205a8 <__ssvfiscanf_r+0x1b4>
 802066c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802066e:	3201      	adds	r2, #1
 8020670:	9245      	str	r2, [sp, #276]	; 0x114
 8020672:	6862      	ldr	r2, [r4, #4]
 8020674:	3a01      	subs	r2, #1
 8020676:	2a00      	cmp	r2, #0
 8020678:	6062      	str	r2, [r4, #4]
 802067a:	dd02      	ble.n	8020682 <__ssvfiscanf_r+0x28e>
 802067c:	3301      	adds	r3, #1
 802067e:	6023      	str	r3, [r4, #0]
 8020680:	e7ae      	b.n	80205e0 <__ssvfiscanf_r+0x1ec>
 8020682:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020684:	4621      	mov	r1, r4
 8020686:	4630      	mov	r0, r6
 8020688:	4798      	blx	r3
 802068a:	2800      	cmp	r0, #0
 802068c:	d0a8      	beq.n	80205e0 <__ssvfiscanf_r+0x1ec>
 802068e:	e78b      	b.n	80205a8 <__ssvfiscanf_r+0x1b4>
 8020690:	2b04      	cmp	r3, #4
 8020692:	dc06      	bgt.n	80206a2 <__ssvfiscanf_r+0x2ae>
 8020694:	466b      	mov	r3, sp
 8020696:	4622      	mov	r2, r4
 8020698:	a941      	add	r1, sp, #260	; 0x104
 802069a:	4630      	mov	r0, r6
 802069c:	f000 fb68 	bl	8020d70 <_scanf_i>
 80206a0:	e7ac      	b.n	80205fc <__ssvfiscanf_r+0x208>
 80206a2:	4b0f      	ldr	r3, [pc, #60]	; (80206e0 <__ssvfiscanf_r+0x2ec>)
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	f43f aecf 	beq.w	8020448 <__ssvfiscanf_r+0x54>
 80206aa:	466b      	mov	r3, sp
 80206ac:	4622      	mov	r2, r4
 80206ae:	a941      	add	r1, sp, #260	; 0x104
 80206b0:	4630      	mov	r0, r6
 80206b2:	f3af 8000 	nop.w
 80206b6:	e7a1      	b.n	80205fc <__ssvfiscanf_r+0x208>
 80206b8:	89a3      	ldrh	r3, [r4, #12]
 80206ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 80206be:	bf18      	it	ne
 80206c0:	f04f 30ff 	movne.w	r0, #4294967295
 80206c4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80206c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80206ce:	e7f9      	b.n	80206c4 <__ssvfiscanf_r+0x2d0>
 80206d0:	08020341 	.word	0x08020341
 80206d4:	080203bb 	.word	0x080203bb
 80206d8:	0807b115 	.word	0x0807b115
 80206dc:	0807b336 	.word	0x0807b336
 80206e0:	00000000 	.word	0x00000000

080206e4 <__sfputc_r>:
 80206e4:	6893      	ldr	r3, [r2, #8]
 80206e6:	3b01      	subs	r3, #1
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	b410      	push	{r4}
 80206ec:	6093      	str	r3, [r2, #8]
 80206ee:	da08      	bge.n	8020702 <__sfputc_r+0x1e>
 80206f0:	6994      	ldr	r4, [r2, #24]
 80206f2:	42a3      	cmp	r3, r4
 80206f4:	db01      	blt.n	80206fa <__sfputc_r+0x16>
 80206f6:	290a      	cmp	r1, #10
 80206f8:	d103      	bne.n	8020702 <__sfputc_r+0x1e>
 80206fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80206fe:	f7ff b8af 	b.w	801f860 <__swbuf_r>
 8020702:	6813      	ldr	r3, [r2, #0]
 8020704:	1c58      	adds	r0, r3, #1
 8020706:	6010      	str	r0, [r2, #0]
 8020708:	7019      	strb	r1, [r3, #0]
 802070a:	4608      	mov	r0, r1
 802070c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020710:	4770      	bx	lr

08020712 <__sfputs_r>:
 8020712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020714:	4606      	mov	r6, r0
 8020716:	460f      	mov	r7, r1
 8020718:	4614      	mov	r4, r2
 802071a:	18d5      	adds	r5, r2, r3
 802071c:	42ac      	cmp	r4, r5
 802071e:	d101      	bne.n	8020724 <__sfputs_r+0x12>
 8020720:	2000      	movs	r0, #0
 8020722:	e007      	b.n	8020734 <__sfputs_r+0x22>
 8020724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020728:	463a      	mov	r2, r7
 802072a:	4630      	mov	r0, r6
 802072c:	f7ff ffda 	bl	80206e4 <__sfputc_r>
 8020730:	1c43      	adds	r3, r0, #1
 8020732:	d1f3      	bne.n	802071c <__sfputs_r+0xa>
 8020734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020738 <_vfiprintf_r>:
 8020738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802073c:	460d      	mov	r5, r1
 802073e:	b09d      	sub	sp, #116	; 0x74
 8020740:	4614      	mov	r4, r2
 8020742:	4698      	mov	r8, r3
 8020744:	4606      	mov	r6, r0
 8020746:	b118      	cbz	r0, 8020750 <_vfiprintf_r+0x18>
 8020748:	6983      	ldr	r3, [r0, #24]
 802074a:	b90b      	cbnz	r3, 8020750 <_vfiprintf_r+0x18>
 802074c:	f7ff faa8 	bl	801fca0 <__sinit>
 8020750:	4b89      	ldr	r3, [pc, #548]	; (8020978 <_vfiprintf_r+0x240>)
 8020752:	429d      	cmp	r5, r3
 8020754:	d11b      	bne.n	802078e <_vfiprintf_r+0x56>
 8020756:	6875      	ldr	r5, [r6, #4]
 8020758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802075a:	07d9      	lsls	r1, r3, #31
 802075c:	d405      	bmi.n	802076a <_vfiprintf_r+0x32>
 802075e:	89ab      	ldrh	r3, [r5, #12]
 8020760:	059a      	lsls	r2, r3, #22
 8020762:	d402      	bmi.n	802076a <_vfiprintf_r+0x32>
 8020764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020766:	f7ff fb4b 	bl	801fe00 <__retarget_lock_acquire_recursive>
 802076a:	89ab      	ldrh	r3, [r5, #12]
 802076c:	071b      	lsls	r3, r3, #28
 802076e:	d501      	bpl.n	8020774 <_vfiprintf_r+0x3c>
 8020770:	692b      	ldr	r3, [r5, #16]
 8020772:	b9eb      	cbnz	r3, 80207b0 <_vfiprintf_r+0x78>
 8020774:	4629      	mov	r1, r5
 8020776:	4630      	mov	r0, r6
 8020778:	f7ff f8d6 	bl	801f928 <__swsetup_r>
 802077c:	b1c0      	cbz	r0, 80207b0 <_vfiprintf_r+0x78>
 802077e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020780:	07dc      	lsls	r4, r3, #31
 8020782:	d50e      	bpl.n	80207a2 <_vfiprintf_r+0x6a>
 8020784:	f04f 30ff 	mov.w	r0, #4294967295
 8020788:	b01d      	add	sp, #116	; 0x74
 802078a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802078e:	4b7b      	ldr	r3, [pc, #492]	; (802097c <_vfiprintf_r+0x244>)
 8020790:	429d      	cmp	r5, r3
 8020792:	d101      	bne.n	8020798 <_vfiprintf_r+0x60>
 8020794:	68b5      	ldr	r5, [r6, #8]
 8020796:	e7df      	b.n	8020758 <_vfiprintf_r+0x20>
 8020798:	4b79      	ldr	r3, [pc, #484]	; (8020980 <_vfiprintf_r+0x248>)
 802079a:	429d      	cmp	r5, r3
 802079c:	bf08      	it	eq
 802079e:	68f5      	ldreq	r5, [r6, #12]
 80207a0:	e7da      	b.n	8020758 <_vfiprintf_r+0x20>
 80207a2:	89ab      	ldrh	r3, [r5, #12]
 80207a4:	0598      	lsls	r0, r3, #22
 80207a6:	d4ed      	bmi.n	8020784 <_vfiprintf_r+0x4c>
 80207a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80207aa:	f7ff fb2a 	bl	801fe02 <__retarget_lock_release_recursive>
 80207ae:	e7e9      	b.n	8020784 <_vfiprintf_r+0x4c>
 80207b0:	2300      	movs	r3, #0
 80207b2:	9309      	str	r3, [sp, #36]	; 0x24
 80207b4:	2320      	movs	r3, #32
 80207b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80207ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80207be:	2330      	movs	r3, #48	; 0x30
 80207c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020984 <_vfiprintf_r+0x24c>
 80207c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80207c8:	f04f 0901 	mov.w	r9, #1
 80207cc:	4623      	mov	r3, r4
 80207ce:	469a      	mov	sl, r3
 80207d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80207d4:	b10a      	cbz	r2, 80207da <_vfiprintf_r+0xa2>
 80207d6:	2a25      	cmp	r2, #37	; 0x25
 80207d8:	d1f9      	bne.n	80207ce <_vfiprintf_r+0x96>
 80207da:	ebba 0b04 	subs.w	fp, sl, r4
 80207de:	d00b      	beq.n	80207f8 <_vfiprintf_r+0xc0>
 80207e0:	465b      	mov	r3, fp
 80207e2:	4622      	mov	r2, r4
 80207e4:	4629      	mov	r1, r5
 80207e6:	4630      	mov	r0, r6
 80207e8:	f7ff ff93 	bl	8020712 <__sfputs_r>
 80207ec:	3001      	adds	r0, #1
 80207ee:	f000 80aa 	beq.w	8020946 <_vfiprintf_r+0x20e>
 80207f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80207f4:	445a      	add	r2, fp
 80207f6:	9209      	str	r2, [sp, #36]	; 0x24
 80207f8:	f89a 3000 	ldrb.w	r3, [sl]
 80207fc:	2b00      	cmp	r3, #0
 80207fe:	f000 80a2 	beq.w	8020946 <_vfiprintf_r+0x20e>
 8020802:	2300      	movs	r3, #0
 8020804:	f04f 32ff 	mov.w	r2, #4294967295
 8020808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802080c:	f10a 0a01 	add.w	sl, sl, #1
 8020810:	9304      	str	r3, [sp, #16]
 8020812:	9307      	str	r3, [sp, #28]
 8020814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020818:	931a      	str	r3, [sp, #104]	; 0x68
 802081a:	4654      	mov	r4, sl
 802081c:	2205      	movs	r2, #5
 802081e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020822:	4858      	ldr	r0, [pc, #352]	; (8020984 <_vfiprintf_r+0x24c>)
 8020824:	f7df fcec 	bl	8000200 <memchr>
 8020828:	9a04      	ldr	r2, [sp, #16]
 802082a:	b9d8      	cbnz	r0, 8020864 <_vfiprintf_r+0x12c>
 802082c:	06d1      	lsls	r1, r2, #27
 802082e:	bf44      	itt	mi
 8020830:	2320      	movmi	r3, #32
 8020832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020836:	0713      	lsls	r3, r2, #28
 8020838:	bf44      	itt	mi
 802083a:	232b      	movmi	r3, #43	; 0x2b
 802083c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020840:	f89a 3000 	ldrb.w	r3, [sl]
 8020844:	2b2a      	cmp	r3, #42	; 0x2a
 8020846:	d015      	beq.n	8020874 <_vfiprintf_r+0x13c>
 8020848:	9a07      	ldr	r2, [sp, #28]
 802084a:	4654      	mov	r4, sl
 802084c:	2000      	movs	r0, #0
 802084e:	f04f 0c0a 	mov.w	ip, #10
 8020852:	4621      	mov	r1, r4
 8020854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020858:	3b30      	subs	r3, #48	; 0x30
 802085a:	2b09      	cmp	r3, #9
 802085c:	d94e      	bls.n	80208fc <_vfiprintf_r+0x1c4>
 802085e:	b1b0      	cbz	r0, 802088e <_vfiprintf_r+0x156>
 8020860:	9207      	str	r2, [sp, #28]
 8020862:	e014      	b.n	802088e <_vfiprintf_r+0x156>
 8020864:	eba0 0308 	sub.w	r3, r0, r8
 8020868:	fa09 f303 	lsl.w	r3, r9, r3
 802086c:	4313      	orrs	r3, r2
 802086e:	9304      	str	r3, [sp, #16]
 8020870:	46a2      	mov	sl, r4
 8020872:	e7d2      	b.n	802081a <_vfiprintf_r+0xe2>
 8020874:	9b03      	ldr	r3, [sp, #12]
 8020876:	1d19      	adds	r1, r3, #4
 8020878:	681b      	ldr	r3, [r3, #0]
 802087a:	9103      	str	r1, [sp, #12]
 802087c:	2b00      	cmp	r3, #0
 802087e:	bfbb      	ittet	lt
 8020880:	425b      	neglt	r3, r3
 8020882:	f042 0202 	orrlt.w	r2, r2, #2
 8020886:	9307      	strge	r3, [sp, #28]
 8020888:	9307      	strlt	r3, [sp, #28]
 802088a:	bfb8      	it	lt
 802088c:	9204      	strlt	r2, [sp, #16]
 802088e:	7823      	ldrb	r3, [r4, #0]
 8020890:	2b2e      	cmp	r3, #46	; 0x2e
 8020892:	d10c      	bne.n	80208ae <_vfiprintf_r+0x176>
 8020894:	7863      	ldrb	r3, [r4, #1]
 8020896:	2b2a      	cmp	r3, #42	; 0x2a
 8020898:	d135      	bne.n	8020906 <_vfiprintf_r+0x1ce>
 802089a:	9b03      	ldr	r3, [sp, #12]
 802089c:	1d1a      	adds	r2, r3, #4
 802089e:	681b      	ldr	r3, [r3, #0]
 80208a0:	9203      	str	r2, [sp, #12]
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	bfb8      	it	lt
 80208a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80208aa:	3402      	adds	r4, #2
 80208ac:	9305      	str	r3, [sp, #20]
 80208ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020994 <_vfiprintf_r+0x25c>
 80208b2:	7821      	ldrb	r1, [r4, #0]
 80208b4:	2203      	movs	r2, #3
 80208b6:	4650      	mov	r0, sl
 80208b8:	f7df fca2 	bl	8000200 <memchr>
 80208bc:	b140      	cbz	r0, 80208d0 <_vfiprintf_r+0x198>
 80208be:	2340      	movs	r3, #64	; 0x40
 80208c0:	eba0 000a 	sub.w	r0, r0, sl
 80208c4:	fa03 f000 	lsl.w	r0, r3, r0
 80208c8:	9b04      	ldr	r3, [sp, #16]
 80208ca:	4303      	orrs	r3, r0
 80208cc:	3401      	adds	r4, #1
 80208ce:	9304      	str	r3, [sp, #16]
 80208d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80208d4:	482c      	ldr	r0, [pc, #176]	; (8020988 <_vfiprintf_r+0x250>)
 80208d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80208da:	2206      	movs	r2, #6
 80208dc:	f7df fc90 	bl	8000200 <memchr>
 80208e0:	2800      	cmp	r0, #0
 80208e2:	d03f      	beq.n	8020964 <_vfiprintf_r+0x22c>
 80208e4:	4b29      	ldr	r3, [pc, #164]	; (802098c <_vfiprintf_r+0x254>)
 80208e6:	bb1b      	cbnz	r3, 8020930 <_vfiprintf_r+0x1f8>
 80208e8:	9b03      	ldr	r3, [sp, #12]
 80208ea:	3307      	adds	r3, #7
 80208ec:	f023 0307 	bic.w	r3, r3, #7
 80208f0:	3308      	adds	r3, #8
 80208f2:	9303      	str	r3, [sp, #12]
 80208f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208f6:	443b      	add	r3, r7
 80208f8:	9309      	str	r3, [sp, #36]	; 0x24
 80208fa:	e767      	b.n	80207cc <_vfiprintf_r+0x94>
 80208fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8020900:	460c      	mov	r4, r1
 8020902:	2001      	movs	r0, #1
 8020904:	e7a5      	b.n	8020852 <_vfiprintf_r+0x11a>
 8020906:	2300      	movs	r3, #0
 8020908:	3401      	adds	r4, #1
 802090a:	9305      	str	r3, [sp, #20]
 802090c:	4619      	mov	r1, r3
 802090e:	f04f 0c0a 	mov.w	ip, #10
 8020912:	4620      	mov	r0, r4
 8020914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020918:	3a30      	subs	r2, #48	; 0x30
 802091a:	2a09      	cmp	r2, #9
 802091c:	d903      	bls.n	8020926 <_vfiprintf_r+0x1ee>
 802091e:	2b00      	cmp	r3, #0
 8020920:	d0c5      	beq.n	80208ae <_vfiprintf_r+0x176>
 8020922:	9105      	str	r1, [sp, #20]
 8020924:	e7c3      	b.n	80208ae <_vfiprintf_r+0x176>
 8020926:	fb0c 2101 	mla	r1, ip, r1, r2
 802092a:	4604      	mov	r4, r0
 802092c:	2301      	movs	r3, #1
 802092e:	e7f0      	b.n	8020912 <_vfiprintf_r+0x1da>
 8020930:	ab03      	add	r3, sp, #12
 8020932:	9300      	str	r3, [sp, #0]
 8020934:	462a      	mov	r2, r5
 8020936:	4b16      	ldr	r3, [pc, #88]	; (8020990 <_vfiprintf_r+0x258>)
 8020938:	a904      	add	r1, sp, #16
 802093a:	4630      	mov	r0, r6
 802093c:	f3af 8000 	nop.w
 8020940:	4607      	mov	r7, r0
 8020942:	1c78      	adds	r0, r7, #1
 8020944:	d1d6      	bne.n	80208f4 <_vfiprintf_r+0x1bc>
 8020946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020948:	07d9      	lsls	r1, r3, #31
 802094a:	d405      	bmi.n	8020958 <_vfiprintf_r+0x220>
 802094c:	89ab      	ldrh	r3, [r5, #12]
 802094e:	059a      	lsls	r2, r3, #22
 8020950:	d402      	bmi.n	8020958 <_vfiprintf_r+0x220>
 8020952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020954:	f7ff fa55 	bl	801fe02 <__retarget_lock_release_recursive>
 8020958:	89ab      	ldrh	r3, [r5, #12]
 802095a:	065b      	lsls	r3, r3, #25
 802095c:	f53f af12 	bmi.w	8020784 <_vfiprintf_r+0x4c>
 8020960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020962:	e711      	b.n	8020788 <_vfiprintf_r+0x50>
 8020964:	ab03      	add	r3, sp, #12
 8020966:	9300      	str	r3, [sp, #0]
 8020968:	462a      	mov	r2, r5
 802096a:	4b09      	ldr	r3, [pc, #36]	; (8020990 <_vfiprintf_r+0x258>)
 802096c:	a904      	add	r1, sp, #16
 802096e:	4630      	mov	r0, r6
 8020970:	f000 f880 	bl	8020a74 <_printf_i>
 8020974:	e7e4      	b.n	8020940 <_vfiprintf_r+0x208>
 8020976:	bf00      	nop
 8020978:	0807b2f0 	.word	0x0807b2f0
 802097c:	0807b310 	.word	0x0807b310
 8020980:	0807b2d0 	.word	0x0807b2d0
 8020984:	0807b330 	.word	0x0807b330
 8020988:	0807b33a 	.word	0x0807b33a
 802098c:	00000000 	.word	0x00000000
 8020990:	08020713 	.word	0x08020713
 8020994:	0807b336 	.word	0x0807b336

08020998 <_printf_common>:
 8020998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802099c:	4616      	mov	r6, r2
 802099e:	4699      	mov	r9, r3
 80209a0:	688a      	ldr	r2, [r1, #8]
 80209a2:	690b      	ldr	r3, [r1, #16]
 80209a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80209a8:	4293      	cmp	r3, r2
 80209aa:	bfb8      	it	lt
 80209ac:	4613      	movlt	r3, r2
 80209ae:	6033      	str	r3, [r6, #0]
 80209b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80209b4:	4607      	mov	r7, r0
 80209b6:	460c      	mov	r4, r1
 80209b8:	b10a      	cbz	r2, 80209be <_printf_common+0x26>
 80209ba:	3301      	adds	r3, #1
 80209bc:	6033      	str	r3, [r6, #0]
 80209be:	6823      	ldr	r3, [r4, #0]
 80209c0:	0699      	lsls	r1, r3, #26
 80209c2:	bf42      	ittt	mi
 80209c4:	6833      	ldrmi	r3, [r6, #0]
 80209c6:	3302      	addmi	r3, #2
 80209c8:	6033      	strmi	r3, [r6, #0]
 80209ca:	6825      	ldr	r5, [r4, #0]
 80209cc:	f015 0506 	ands.w	r5, r5, #6
 80209d0:	d106      	bne.n	80209e0 <_printf_common+0x48>
 80209d2:	f104 0a19 	add.w	sl, r4, #25
 80209d6:	68e3      	ldr	r3, [r4, #12]
 80209d8:	6832      	ldr	r2, [r6, #0]
 80209da:	1a9b      	subs	r3, r3, r2
 80209dc:	42ab      	cmp	r3, r5
 80209de:	dc26      	bgt.n	8020a2e <_printf_common+0x96>
 80209e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80209e4:	1e13      	subs	r3, r2, #0
 80209e6:	6822      	ldr	r2, [r4, #0]
 80209e8:	bf18      	it	ne
 80209ea:	2301      	movne	r3, #1
 80209ec:	0692      	lsls	r2, r2, #26
 80209ee:	d42b      	bmi.n	8020a48 <_printf_common+0xb0>
 80209f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80209f4:	4649      	mov	r1, r9
 80209f6:	4638      	mov	r0, r7
 80209f8:	47c0      	blx	r8
 80209fa:	3001      	adds	r0, #1
 80209fc:	d01e      	beq.n	8020a3c <_printf_common+0xa4>
 80209fe:	6823      	ldr	r3, [r4, #0]
 8020a00:	68e5      	ldr	r5, [r4, #12]
 8020a02:	6832      	ldr	r2, [r6, #0]
 8020a04:	f003 0306 	and.w	r3, r3, #6
 8020a08:	2b04      	cmp	r3, #4
 8020a0a:	bf08      	it	eq
 8020a0c:	1aad      	subeq	r5, r5, r2
 8020a0e:	68a3      	ldr	r3, [r4, #8]
 8020a10:	6922      	ldr	r2, [r4, #16]
 8020a12:	bf0c      	ite	eq
 8020a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020a18:	2500      	movne	r5, #0
 8020a1a:	4293      	cmp	r3, r2
 8020a1c:	bfc4      	itt	gt
 8020a1e:	1a9b      	subgt	r3, r3, r2
 8020a20:	18ed      	addgt	r5, r5, r3
 8020a22:	2600      	movs	r6, #0
 8020a24:	341a      	adds	r4, #26
 8020a26:	42b5      	cmp	r5, r6
 8020a28:	d11a      	bne.n	8020a60 <_printf_common+0xc8>
 8020a2a:	2000      	movs	r0, #0
 8020a2c:	e008      	b.n	8020a40 <_printf_common+0xa8>
 8020a2e:	2301      	movs	r3, #1
 8020a30:	4652      	mov	r2, sl
 8020a32:	4649      	mov	r1, r9
 8020a34:	4638      	mov	r0, r7
 8020a36:	47c0      	blx	r8
 8020a38:	3001      	adds	r0, #1
 8020a3a:	d103      	bne.n	8020a44 <_printf_common+0xac>
 8020a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8020a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a44:	3501      	adds	r5, #1
 8020a46:	e7c6      	b.n	80209d6 <_printf_common+0x3e>
 8020a48:	18e1      	adds	r1, r4, r3
 8020a4a:	1c5a      	adds	r2, r3, #1
 8020a4c:	2030      	movs	r0, #48	; 0x30
 8020a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020a52:	4422      	add	r2, r4
 8020a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020a5c:	3302      	adds	r3, #2
 8020a5e:	e7c7      	b.n	80209f0 <_printf_common+0x58>
 8020a60:	2301      	movs	r3, #1
 8020a62:	4622      	mov	r2, r4
 8020a64:	4649      	mov	r1, r9
 8020a66:	4638      	mov	r0, r7
 8020a68:	47c0      	blx	r8
 8020a6a:	3001      	adds	r0, #1
 8020a6c:	d0e6      	beq.n	8020a3c <_printf_common+0xa4>
 8020a6e:	3601      	adds	r6, #1
 8020a70:	e7d9      	b.n	8020a26 <_printf_common+0x8e>
	...

08020a74 <_printf_i>:
 8020a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020a78:	460c      	mov	r4, r1
 8020a7a:	4691      	mov	r9, r2
 8020a7c:	7e27      	ldrb	r7, [r4, #24]
 8020a7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020a80:	2f78      	cmp	r7, #120	; 0x78
 8020a82:	4680      	mov	r8, r0
 8020a84:	469a      	mov	sl, r3
 8020a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020a8a:	d807      	bhi.n	8020a9c <_printf_i+0x28>
 8020a8c:	2f62      	cmp	r7, #98	; 0x62
 8020a8e:	d80a      	bhi.n	8020aa6 <_printf_i+0x32>
 8020a90:	2f00      	cmp	r7, #0
 8020a92:	f000 80d8 	beq.w	8020c46 <_printf_i+0x1d2>
 8020a96:	2f58      	cmp	r7, #88	; 0x58
 8020a98:	f000 80a3 	beq.w	8020be2 <_printf_i+0x16e>
 8020a9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020aa4:	e03a      	b.n	8020b1c <_printf_i+0xa8>
 8020aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020aaa:	2b15      	cmp	r3, #21
 8020aac:	d8f6      	bhi.n	8020a9c <_printf_i+0x28>
 8020aae:	a001      	add	r0, pc, #4	; (adr r0, 8020ab4 <_printf_i+0x40>)
 8020ab0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8020ab4:	08020b0d 	.word	0x08020b0d
 8020ab8:	08020b21 	.word	0x08020b21
 8020abc:	08020a9d 	.word	0x08020a9d
 8020ac0:	08020a9d 	.word	0x08020a9d
 8020ac4:	08020a9d 	.word	0x08020a9d
 8020ac8:	08020a9d 	.word	0x08020a9d
 8020acc:	08020b21 	.word	0x08020b21
 8020ad0:	08020a9d 	.word	0x08020a9d
 8020ad4:	08020a9d 	.word	0x08020a9d
 8020ad8:	08020a9d 	.word	0x08020a9d
 8020adc:	08020a9d 	.word	0x08020a9d
 8020ae0:	08020c2d 	.word	0x08020c2d
 8020ae4:	08020b51 	.word	0x08020b51
 8020ae8:	08020c0f 	.word	0x08020c0f
 8020aec:	08020a9d 	.word	0x08020a9d
 8020af0:	08020a9d 	.word	0x08020a9d
 8020af4:	08020c4f 	.word	0x08020c4f
 8020af8:	08020a9d 	.word	0x08020a9d
 8020afc:	08020b51 	.word	0x08020b51
 8020b00:	08020a9d 	.word	0x08020a9d
 8020b04:	08020a9d 	.word	0x08020a9d
 8020b08:	08020c17 	.word	0x08020c17
 8020b0c:	680b      	ldr	r3, [r1, #0]
 8020b0e:	1d1a      	adds	r2, r3, #4
 8020b10:	681b      	ldr	r3, [r3, #0]
 8020b12:	600a      	str	r2, [r1, #0]
 8020b14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020b1c:	2301      	movs	r3, #1
 8020b1e:	e0a3      	b.n	8020c68 <_printf_i+0x1f4>
 8020b20:	6825      	ldr	r5, [r4, #0]
 8020b22:	6808      	ldr	r0, [r1, #0]
 8020b24:	062e      	lsls	r6, r5, #24
 8020b26:	f100 0304 	add.w	r3, r0, #4
 8020b2a:	d50a      	bpl.n	8020b42 <_printf_i+0xce>
 8020b2c:	6805      	ldr	r5, [r0, #0]
 8020b2e:	600b      	str	r3, [r1, #0]
 8020b30:	2d00      	cmp	r5, #0
 8020b32:	da03      	bge.n	8020b3c <_printf_i+0xc8>
 8020b34:	232d      	movs	r3, #45	; 0x2d
 8020b36:	426d      	negs	r5, r5
 8020b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020b3c:	485e      	ldr	r0, [pc, #376]	; (8020cb8 <_printf_i+0x244>)
 8020b3e:	230a      	movs	r3, #10
 8020b40:	e019      	b.n	8020b76 <_printf_i+0x102>
 8020b42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8020b46:	6805      	ldr	r5, [r0, #0]
 8020b48:	600b      	str	r3, [r1, #0]
 8020b4a:	bf18      	it	ne
 8020b4c:	b22d      	sxthne	r5, r5
 8020b4e:	e7ef      	b.n	8020b30 <_printf_i+0xbc>
 8020b50:	680b      	ldr	r3, [r1, #0]
 8020b52:	6825      	ldr	r5, [r4, #0]
 8020b54:	1d18      	adds	r0, r3, #4
 8020b56:	6008      	str	r0, [r1, #0]
 8020b58:	0628      	lsls	r0, r5, #24
 8020b5a:	d501      	bpl.n	8020b60 <_printf_i+0xec>
 8020b5c:	681d      	ldr	r5, [r3, #0]
 8020b5e:	e002      	b.n	8020b66 <_printf_i+0xf2>
 8020b60:	0669      	lsls	r1, r5, #25
 8020b62:	d5fb      	bpl.n	8020b5c <_printf_i+0xe8>
 8020b64:	881d      	ldrh	r5, [r3, #0]
 8020b66:	4854      	ldr	r0, [pc, #336]	; (8020cb8 <_printf_i+0x244>)
 8020b68:	2f6f      	cmp	r7, #111	; 0x6f
 8020b6a:	bf0c      	ite	eq
 8020b6c:	2308      	moveq	r3, #8
 8020b6e:	230a      	movne	r3, #10
 8020b70:	2100      	movs	r1, #0
 8020b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020b76:	6866      	ldr	r6, [r4, #4]
 8020b78:	60a6      	str	r6, [r4, #8]
 8020b7a:	2e00      	cmp	r6, #0
 8020b7c:	bfa2      	ittt	ge
 8020b7e:	6821      	ldrge	r1, [r4, #0]
 8020b80:	f021 0104 	bicge.w	r1, r1, #4
 8020b84:	6021      	strge	r1, [r4, #0]
 8020b86:	b90d      	cbnz	r5, 8020b8c <_printf_i+0x118>
 8020b88:	2e00      	cmp	r6, #0
 8020b8a:	d04d      	beq.n	8020c28 <_printf_i+0x1b4>
 8020b8c:	4616      	mov	r6, r2
 8020b8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8020b92:	fb03 5711 	mls	r7, r3, r1, r5
 8020b96:	5dc7      	ldrb	r7, [r0, r7]
 8020b98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020b9c:	462f      	mov	r7, r5
 8020b9e:	42bb      	cmp	r3, r7
 8020ba0:	460d      	mov	r5, r1
 8020ba2:	d9f4      	bls.n	8020b8e <_printf_i+0x11a>
 8020ba4:	2b08      	cmp	r3, #8
 8020ba6:	d10b      	bne.n	8020bc0 <_printf_i+0x14c>
 8020ba8:	6823      	ldr	r3, [r4, #0]
 8020baa:	07df      	lsls	r7, r3, #31
 8020bac:	d508      	bpl.n	8020bc0 <_printf_i+0x14c>
 8020bae:	6923      	ldr	r3, [r4, #16]
 8020bb0:	6861      	ldr	r1, [r4, #4]
 8020bb2:	4299      	cmp	r1, r3
 8020bb4:	bfde      	ittt	le
 8020bb6:	2330      	movle	r3, #48	; 0x30
 8020bb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020bbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020bc0:	1b92      	subs	r2, r2, r6
 8020bc2:	6122      	str	r2, [r4, #16]
 8020bc4:	f8cd a000 	str.w	sl, [sp]
 8020bc8:	464b      	mov	r3, r9
 8020bca:	aa03      	add	r2, sp, #12
 8020bcc:	4621      	mov	r1, r4
 8020bce:	4640      	mov	r0, r8
 8020bd0:	f7ff fee2 	bl	8020998 <_printf_common>
 8020bd4:	3001      	adds	r0, #1
 8020bd6:	d14c      	bne.n	8020c72 <_printf_i+0x1fe>
 8020bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8020bdc:	b004      	add	sp, #16
 8020bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020be2:	4835      	ldr	r0, [pc, #212]	; (8020cb8 <_printf_i+0x244>)
 8020be4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020be8:	6823      	ldr	r3, [r4, #0]
 8020bea:	680e      	ldr	r6, [r1, #0]
 8020bec:	061f      	lsls	r7, r3, #24
 8020bee:	f856 5b04 	ldr.w	r5, [r6], #4
 8020bf2:	600e      	str	r6, [r1, #0]
 8020bf4:	d514      	bpl.n	8020c20 <_printf_i+0x1ac>
 8020bf6:	07d9      	lsls	r1, r3, #31
 8020bf8:	bf44      	itt	mi
 8020bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8020bfe:	6023      	strmi	r3, [r4, #0]
 8020c00:	b91d      	cbnz	r5, 8020c0a <_printf_i+0x196>
 8020c02:	6823      	ldr	r3, [r4, #0]
 8020c04:	f023 0320 	bic.w	r3, r3, #32
 8020c08:	6023      	str	r3, [r4, #0]
 8020c0a:	2310      	movs	r3, #16
 8020c0c:	e7b0      	b.n	8020b70 <_printf_i+0xfc>
 8020c0e:	6823      	ldr	r3, [r4, #0]
 8020c10:	f043 0320 	orr.w	r3, r3, #32
 8020c14:	6023      	str	r3, [r4, #0]
 8020c16:	2378      	movs	r3, #120	; 0x78
 8020c18:	4828      	ldr	r0, [pc, #160]	; (8020cbc <_printf_i+0x248>)
 8020c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020c1e:	e7e3      	b.n	8020be8 <_printf_i+0x174>
 8020c20:	065e      	lsls	r6, r3, #25
 8020c22:	bf48      	it	mi
 8020c24:	b2ad      	uxthmi	r5, r5
 8020c26:	e7e6      	b.n	8020bf6 <_printf_i+0x182>
 8020c28:	4616      	mov	r6, r2
 8020c2a:	e7bb      	b.n	8020ba4 <_printf_i+0x130>
 8020c2c:	680b      	ldr	r3, [r1, #0]
 8020c2e:	6826      	ldr	r6, [r4, #0]
 8020c30:	6960      	ldr	r0, [r4, #20]
 8020c32:	1d1d      	adds	r5, r3, #4
 8020c34:	600d      	str	r5, [r1, #0]
 8020c36:	0635      	lsls	r5, r6, #24
 8020c38:	681b      	ldr	r3, [r3, #0]
 8020c3a:	d501      	bpl.n	8020c40 <_printf_i+0x1cc>
 8020c3c:	6018      	str	r0, [r3, #0]
 8020c3e:	e002      	b.n	8020c46 <_printf_i+0x1d2>
 8020c40:	0671      	lsls	r1, r6, #25
 8020c42:	d5fb      	bpl.n	8020c3c <_printf_i+0x1c8>
 8020c44:	8018      	strh	r0, [r3, #0]
 8020c46:	2300      	movs	r3, #0
 8020c48:	6123      	str	r3, [r4, #16]
 8020c4a:	4616      	mov	r6, r2
 8020c4c:	e7ba      	b.n	8020bc4 <_printf_i+0x150>
 8020c4e:	680b      	ldr	r3, [r1, #0]
 8020c50:	1d1a      	adds	r2, r3, #4
 8020c52:	600a      	str	r2, [r1, #0]
 8020c54:	681e      	ldr	r6, [r3, #0]
 8020c56:	6862      	ldr	r2, [r4, #4]
 8020c58:	2100      	movs	r1, #0
 8020c5a:	4630      	mov	r0, r6
 8020c5c:	f7df fad0 	bl	8000200 <memchr>
 8020c60:	b108      	cbz	r0, 8020c66 <_printf_i+0x1f2>
 8020c62:	1b80      	subs	r0, r0, r6
 8020c64:	6060      	str	r0, [r4, #4]
 8020c66:	6863      	ldr	r3, [r4, #4]
 8020c68:	6123      	str	r3, [r4, #16]
 8020c6a:	2300      	movs	r3, #0
 8020c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020c70:	e7a8      	b.n	8020bc4 <_printf_i+0x150>
 8020c72:	6923      	ldr	r3, [r4, #16]
 8020c74:	4632      	mov	r2, r6
 8020c76:	4649      	mov	r1, r9
 8020c78:	4640      	mov	r0, r8
 8020c7a:	47d0      	blx	sl
 8020c7c:	3001      	adds	r0, #1
 8020c7e:	d0ab      	beq.n	8020bd8 <_printf_i+0x164>
 8020c80:	6823      	ldr	r3, [r4, #0]
 8020c82:	079b      	lsls	r3, r3, #30
 8020c84:	d413      	bmi.n	8020cae <_printf_i+0x23a>
 8020c86:	68e0      	ldr	r0, [r4, #12]
 8020c88:	9b03      	ldr	r3, [sp, #12]
 8020c8a:	4298      	cmp	r0, r3
 8020c8c:	bfb8      	it	lt
 8020c8e:	4618      	movlt	r0, r3
 8020c90:	e7a4      	b.n	8020bdc <_printf_i+0x168>
 8020c92:	2301      	movs	r3, #1
 8020c94:	4632      	mov	r2, r6
 8020c96:	4649      	mov	r1, r9
 8020c98:	4640      	mov	r0, r8
 8020c9a:	47d0      	blx	sl
 8020c9c:	3001      	adds	r0, #1
 8020c9e:	d09b      	beq.n	8020bd8 <_printf_i+0x164>
 8020ca0:	3501      	adds	r5, #1
 8020ca2:	68e3      	ldr	r3, [r4, #12]
 8020ca4:	9903      	ldr	r1, [sp, #12]
 8020ca6:	1a5b      	subs	r3, r3, r1
 8020ca8:	42ab      	cmp	r3, r5
 8020caa:	dcf2      	bgt.n	8020c92 <_printf_i+0x21e>
 8020cac:	e7eb      	b.n	8020c86 <_printf_i+0x212>
 8020cae:	2500      	movs	r5, #0
 8020cb0:	f104 0619 	add.w	r6, r4, #25
 8020cb4:	e7f5      	b.n	8020ca2 <_printf_i+0x22e>
 8020cb6:	bf00      	nop
 8020cb8:	0807b341 	.word	0x0807b341
 8020cbc:	0807b352 	.word	0x0807b352

08020cc0 <_scanf_chars>:
 8020cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020cc4:	4615      	mov	r5, r2
 8020cc6:	688a      	ldr	r2, [r1, #8]
 8020cc8:	4680      	mov	r8, r0
 8020cca:	460c      	mov	r4, r1
 8020ccc:	b932      	cbnz	r2, 8020cdc <_scanf_chars+0x1c>
 8020cce:	698a      	ldr	r2, [r1, #24]
 8020cd0:	2a00      	cmp	r2, #0
 8020cd2:	bf0c      	ite	eq
 8020cd4:	2201      	moveq	r2, #1
 8020cd6:	f04f 32ff 	movne.w	r2, #4294967295
 8020cda:	608a      	str	r2, [r1, #8]
 8020cdc:	6822      	ldr	r2, [r4, #0]
 8020cde:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8020d6c <_scanf_chars+0xac>
 8020ce2:	06d1      	lsls	r1, r2, #27
 8020ce4:	bf5f      	itttt	pl
 8020ce6:	681a      	ldrpl	r2, [r3, #0]
 8020ce8:	1d11      	addpl	r1, r2, #4
 8020cea:	6019      	strpl	r1, [r3, #0]
 8020cec:	6816      	ldrpl	r6, [r2, #0]
 8020cee:	2700      	movs	r7, #0
 8020cf0:	69a0      	ldr	r0, [r4, #24]
 8020cf2:	b188      	cbz	r0, 8020d18 <_scanf_chars+0x58>
 8020cf4:	2801      	cmp	r0, #1
 8020cf6:	d107      	bne.n	8020d08 <_scanf_chars+0x48>
 8020cf8:	682b      	ldr	r3, [r5, #0]
 8020cfa:	781a      	ldrb	r2, [r3, #0]
 8020cfc:	6963      	ldr	r3, [r4, #20]
 8020cfe:	5c9b      	ldrb	r3, [r3, r2]
 8020d00:	b953      	cbnz	r3, 8020d18 <_scanf_chars+0x58>
 8020d02:	bb27      	cbnz	r7, 8020d4e <_scanf_chars+0x8e>
 8020d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020d08:	2802      	cmp	r0, #2
 8020d0a:	d120      	bne.n	8020d4e <_scanf_chars+0x8e>
 8020d0c:	682b      	ldr	r3, [r5, #0]
 8020d0e:	781b      	ldrb	r3, [r3, #0]
 8020d10:	f813 3009 	ldrb.w	r3, [r3, r9]
 8020d14:	071b      	lsls	r3, r3, #28
 8020d16:	d41a      	bmi.n	8020d4e <_scanf_chars+0x8e>
 8020d18:	6823      	ldr	r3, [r4, #0]
 8020d1a:	06da      	lsls	r2, r3, #27
 8020d1c:	bf5e      	ittt	pl
 8020d1e:	682b      	ldrpl	r3, [r5, #0]
 8020d20:	781b      	ldrbpl	r3, [r3, #0]
 8020d22:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020d26:	682a      	ldr	r2, [r5, #0]
 8020d28:	686b      	ldr	r3, [r5, #4]
 8020d2a:	3201      	adds	r2, #1
 8020d2c:	602a      	str	r2, [r5, #0]
 8020d2e:	68a2      	ldr	r2, [r4, #8]
 8020d30:	3b01      	subs	r3, #1
 8020d32:	3a01      	subs	r2, #1
 8020d34:	606b      	str	r3, [r5, #4]
 8020d36:	3701      	adds	r7, #1
 8020d38:	60a2      	str	r2, [r4, #8]
 8020d3a:	b142      	cbz	r2, 8020d4e <_scanf_chars+0x8e>
 8020d3c:	2b00      	cmp	r3, #0
 8020d3e:	dcd7      	bgt.n	8020cf0 <_scanf_chars+0x30>
 8020d40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020d44:	4629      	mov	r1, r5
 8020d46:	4640      	mov	r0, r8
 8020d48:	4798      	blx	r3
 8020d4a:	2800      	cmp	r0, #0
 8020d4c:	d0d0      	beq.n	8020cf0 <_scanf_chars+0x30>
 8020d4e:	6823      	ldr	r3, [r4, #0]
 8020d50:	f013 0310 	ands.w	r3, r3, #16
 8020d54:	d105      	bne.n	8020d62 <_scanf_chars+0xa2>
 8020d56:	68e2      	ldr	r2, [r4, #12]
 8020d58:	3201      	adds	r2, #1
 8020d5a:	60e2      	str	r2, [r4, #12]
 8020d5c:	69a2      	ldr	r2, [r4, #24]
 8020d5e:	b102      	cbz	r2, 8020d62 <_scanf_chars+0xa2>
 8020d60:	7033      	strb	r3, [r6, #0]
 8020d62:	6923      	ldr	r3, [r4, #16]
 8020d64:	441f      	add	r7, r3
 8020d66:	6127      	str	r7, [r4, #16]
 8020d68:	2000      	movs	r0, #0
 8020d6a:	e7cb      	b.n	8020d04 <_scanf_chars+0x44>
 8020d6c:	0807b115 	.word	0x0807b115

08020d70 <_scanf_i>:
 8020d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d74:	4698      	mov	r8, r3
 8020d76:	4b74      	ldr	r3, [pc, #464]	; (8020f48 <_scanf_i+0x1d8>)
 8020d78:	460c      	mov	r4, r1
 8020d7a:	4682      	mov	sl, r0
 8020d7c:	4616      	mov	r6, r2
 8020d7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020d82:	b087      	sub	sp, #28
 8020d84:	ab03      	add	r3, sp, #12
 8020d86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8020d8a:	4b70      	ldr	r3, [pc, #448]	; (8020f4c <_scanf_i+0x1dc>)
 8020d8c:	69a1      	ldr	r1, [r4, #24]
 8020d8e:	4a70      	ldr	r2, [pc, #448]	; (8020f50 <_scanf_i+0x1e0>)
 8020d90:	2903      	cmp	r1, #3
 8020d92:	bf18      	it	ne
 8020d94:	461a      	movne	r2, r3
 8020d96:	68a3      	ldr	r3, [r4, #8]
 8020d98:	9201      	str	r2, [sp, #4]
 8020d9a:	1e5a      	subs	r2, r3, #1
 8020d9c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020da0:	bf88      	it	hi
 8020da2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020da6:	4627      	mov	r7, r4
 8020da8:	bf82      	ittt	hi
 8020daa:	eb03 0905 	addhi.w	r9, r3, r5
 8020dae:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020db2:	60a3      	strhi	r3, [r4, #8]
 8020db4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8020db8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8020dbc:	bf98      	it	ls
 8020dbe:	f04f 0900 	movls.w	r9, #0
 8020dc2:	6023      	str	r3, [r4, #0]
 8020dc4:	463d      	mov	r5, r7
 8020dc6:	f04f 0b00 	mov.w	fp, #0
 8020dca:	6831      	ldr	r1, [r6, #0]
 8020dcc:	ab03      	add	r3, sp, #12
 8020dce:	7809      	ldrb	r1, [r1, #0]
 8020dd0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8020dd4:	2202      	movs	r2, #2
 8020dd6:	f7df fa13 	bl	8000200 <memchr>
 8020dda:	b328      	cbz	r0, 8020e28 <_scanf_i+0xb8>
 8020ddc:	f1bb 0f01 	cmp.w	fp, #1
 8020de0:	d159      	bne.n	8020e96 <_scanf_i+0x126>
 8020de2:	6862      	ldr	r2, [r4, #4]
 8020de4:	b92a      	cbnz	r2, 8020df2 <_scanf_i+0x82>
 8020de6:	6822      	ldr	r2, [r4, #0]
 8020de8:	2308      	movs	r3, #8
 8020dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020dee:	6063      	str	r3, [r4, #4]
 8020df0:	6022      	str	r2, [r4, #0]
 8020df2:	6822      	ldr	r2, [r4, #0]
 8020df4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8020df8:	6022      	str	r2, [r4, #0]
 8020dfa:	68a2      	ldr	r2, [r4, #8]
 8020dfc:	1e51      	subs	r1, r2, #1
 8020dfe:	60a1      	str	r1, [r4, #8]
 8020e00:	b192      	cbz	r2, 8020e28 <_scanf_i+0xb8>
 8020e02:	6832      	ldr	r2, [r6, #0]
 8020e04:	1c51      	adds	r1, r2, #1
 8020e06:	6031      	str	r1, [r6, #0]
 8020e08:	7812      	ldrb	r2, [r2, #0]
 8020e0a:	f805 2b01 	strb.w	r2, [r5], #1
 8020e0e:	6872      	ldr	r2, [r6, #4]
 8020e10:	3a01      	subs	r2, #1
 8020e12:	2a00      	cmp	r2, #0
 8020e14:	6072      	str	r2, [r6, #4]
 8020e16:	dc07      	bgt.n	8020e28 <_scanf_i+0xb8>
 8020e18:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020e1c:	4631      	mov	r1, r6
 8020e1e:	4650      	mov	r0, sl
 8020e20:	4790      	blx	r2
 8020e22:	2800      	cmp	r0, #0
 8020e24:	f040 8085 	bne.w	8020f32 <_scanf_i+0x1c2>
 8020e28:	f10b 0b01 	add.w	fp, fp, #1
 8020e2c:	f1bb 0f03 	cmp.w	fp, #3
 8020e30:	d1cb      	bne.n	8020dca <_scanf_i+0x5a>
 8020e32:	6863      	ldr	r3, [r4, #4]
 8020e34:	b90b      	cbnz	r3, 8020e3a <_scanf_i+0xca>
 8020e36:	230a      	movs	r3, #10
 8020e38:	6063      	str	r3, [r4, #4]
 8020e3a:	6863      	ldr	r3, [r4, #4]
 8020e3c:	4945      	ldr	r1, [pc, #276]	; (8020f54 <_scanf_i+0x1e4>)
 8020e3e:	6960      	ldr	r0, [r4, #20]
 8020e40:	1ac9      	subs	r1, r1, r3
 8020e42:	f000 f8ab 	bl	8020f9c <__sccl>
 8020e46:	f04f 0b00 	mov.w	fp, #0
 8020e4a:	68a3      	ldr	r3, [r4, #8]
 8020e4c:	6822      	ldr	r2, [r4, #0]
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	d03d      	beq.n	8020ece <_scanf_i+0x15e>
 8020e52:	6831      	ldr	r1, [r6, #0]
 8020e54:	6960      	ldr	r0, [r4, #20]
 8020e56:	f891 c000 	ldrb.w	ip, [r1]
 8020e5a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8020e5e:	2800      	cmp	r0, #0
 8020e60:	d035      	beq.n	8020ece <_scanf_i+0x15e>
 8020e62:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8020e66:	d124      	bne.n	8020eb2 <_scanf_i+0x142>
 8020e68:	0510      	lsls	r0, r2, #20
 8020e6a:	d522      	bpl.n	8020eb2 <_scanf_i+0x142>
 8020e6c:	f10b 0b01 	add.w	fp, fp, #1
 8020e70:	f1b9 0f00 	cmp.w	r9, #0
 8020e74:	d003      	beq.n	8020e7e <_scanf_i+0x10e>
 8020e76:	3301      	adds	r3, #1
 8020e78:	f109 39ff 	add.w	r9, r9, #4294967295
 8020e7c:	60a3      	str	r3, [r4, #8]
 8020e7e:	6873      	ldr	r3, [r6, #4]
 8020e80:	3b01      	subs	r3, #1
 8020e82:	2b00      	cmp	r3, #0
 8020e84:	6073      	str	r3, [r6, #4]
 8020e86:	dd1b      	ble.n	8020ec0 <_scanf_i+0x150>
 8020e88:	6833      	ldr	r3, [r6, #0]
 8020e8a:	3301      	adds	r3, #1
 8020e8c:	6033      	str	r3, [r6, #0]
 8020e8e:	68a3      	ldr	r3, [r4, #8]
 8020e90:	3b01      	subs	r3, #1
 8020e92:	60a3      	str	r3, [r4, #8]
 8020e94:	e7d9      	b.n	8020e4a <_scanf_i+0xda>
 8020e96:	f1bb 0f02 	cmp.w	fp, #2
 8020e9a:	d1ae      	bne.n	8020dfa <_scanf_i+0x8a>
 8020e9c:	6822      	ldr	r2, [r4, #0]
 8020e9e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8020ea2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8020ea6:	d1bf      	bne.n	8020e28 <_scanf_i+0xb8>
 8020ea8:	2310      	movs	r3, #16
 8020eaa:	6063      	str	r3, [r4, #4]
 8020eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020eb0:	e7a2      	b.n	8020df8 <_scanf_i+0x88>
 8020eb2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8020eb6:	6022      	str	r2, [r4, #0]
 8020eb8:	780b      	ldrb	r3, [r1, #0]
 8020eba:	f805 3b01 	strb.w	r3, [r5], #1
 8020ebe:	e7de      	b.n	8020e7e <_scanf_i+0x10e>
 8020ec0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020ec4:	4631      	mov	r1, r6
 8020ec6:	4650      	mov	r0, sl
 8020ec8:	4798      	blx	r3
 8020eca:	2800      	cmp	r0, #0
 8020ecc:	d0df      	beq.n	8020e8e <_scanf_i+0x11e>
 8020ece:	6823      	ldr	r3, [r4, #0]
 8020ed0:	05d9      	lsls	r1, r3, #23
 8020ed2:	d50d      	bpl.n	8020ef0 <_scanf_i+0x180>
 8020ed4:	42bd      	cmp	r5, r7
 8020ed6:	d909      	bls.n	8020eec <_scanf_i+0x17c>
 8020ed8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020edc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020ee0:	4632      	mov	r2, r6
 8020ee2:	4650      	mov	r0, sl
 8020ee4:	4798      	blx	r3
 8020ee6:	f105 39ff 	add.w	r9, r5, #4294967295
 8020eea:	464d      	mov	r5, r9
 8020eec:	42bd      	cmp	r5, r7
 8020eee:	d028      	beq.n	8020f42 <_scanf_i+0x1d2>
 8020ef0:	6822      	ldr	r2, [r4, #0]
 8020ef2:	f012 0210 	ands.w	r2, r2, #16
 8020ef6:	d113      	bne.n	8020f20 <_scanf_i+0x1b0>
 8020ef8:	702a      	strb	r2, [r5, #0]
 8020efa:	6863      	ldr	r3, [r4, #4]
 8020efc:	9e01      	ldr	r6, [sp, #4]
 8020efe:	4639      	mov	r1, r7
 8020f00:	4650      	mov	r0, sl
 8020f02:	47b0      	blx	r6
 8020f04:	f8d8 3000 	ldr.w	r3, [r8]
 8020f08:	6821      	ldr	r1, [r4, #0]
 8020f0a:	1d1a      	adds	r2, r3, #4
 8020f0c:	f8c8 2000 	str.w	r2, [r8]
 8020f10:	f011 0f20 	tst.w	r1, #32
 8020f14:	681b      	ldr	r3, [r3, #0]
 8020f16:	d00f      	beq.n	8020f38 <_scanf_i+0x1c8>
 8020f18:	6018      	str	r0, [r3, #0]
 8020f1a:	68e3      	ldr	r3, [r4, #12]
 8020f1c:	3301      	adds	r3, #1
 8020f1e:	60e3      	str	r3, [r4, #12]
 8020f20:	1bed      	subs	r5, r5, r7
 8020f22:	44ab      	add	fp, r5
 8020f24:	6925      	ldr	r5, [r4, #16]
 8020f26:	445d      	add	r5, fp
 8020f28:	6125      	str	r5, [r4, #16]
 8020f2a:	2000      	movs	r0, #0
 8020f2c:	b007      	add	sp, #28
 8020f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f32:	f04f 0b00 	mov.w	fp, #0
 8020f36:	e7ca      	b.n	8020ece <_scanf_i+0x15e>
 8020f38:	07ca      	lsls	r2, r1, #31
 8020f3a:	bf4c      	ite	mi
 8020f3c:	8018      	strhmi	r0, [r3, #0]
 8020f3e:	6018      	strpl	r0, [r3, #0]
 8020f40:	e7eb      	b.n	8020f1a <_scanf_i+0x1aa>
 8020f42:	2001      	movs	r0, #1
 8020f44:	e7f2      	b.n	8020f2c <_scanf_i+0x1bc>
 8020f46:	bf00      	nop
 8020f48:	080242b8 	.word	0x080242b8
 8020f4c:	08021125 	.word	0x08021125
 8020f50:	0801f849 	.word	0x0801f849
 8020f54:	0807b37c 	.word	0x0807b37c

08020f58 <_read_r>:
 8020f58:	b538      	push	{r3, r4, r5, lr}
 8020f5a:	4d07      	ldr	r5, [pc, #28]	; (8020f78 <_read_r+0x20>)
 8020f5c:	4604      	mov	r4, r0
 8020f5e:	4608      	mov	r0, r1
 8020f60:	4611      	mov	r1, r2
 8020f62:	2200      	movs	r2, #0
 8020f64:	602a      	str	r2, [r5, #0]
 8020f66:	461a      	mov	r2, r3
 8020f68:	f7e0 ff18 	bl	8001d9c <_read>
 8020f6c:	1c43      	adds	r3, r0, #1
 8020f6e:	d102      	bne.n	8020f76 <_read_r+0x1e>
 8020f70:	682b      	ldr	r3, [r5, #0]
 8020f72:	b103      	cbz	r3, 8020f76 <_read_r+0x1e>
 8020f74:	6023      	str	r3, [r4, #0]
 8020f76:	bd38      	pop	{r3, r4, r5, pc}
 8020f78:	20014bd0 	.word	0x20014bd0

08020f7c <_sbrk_r>:
 8020f7c:	b538      	push	{r3, r4, r5, lr}
 8020f7e:	4d06      	ldr	r5, [pc, #24]	; (8020f98 <_sbrk_r+0x1c>)
 8020f80:	2300      	movs	r3, #0
 8020f82:	4604      	mov	r4, r0
 8020f84:	4608      	mov	r0, r1
 8020f86:	602b      	str	r3, [r5, #0]
 8020f88:	f7e0 ff76 	bl	8001e78 <_sbrk>
 8020f8c:	1c43      	adds	r3, r0, #1
 8020f8e:	d102      	bne.n	8020f96 <_sbrk_r+0x1a>
 8020f90:	682b      	ldr	r3, [r5, #0]
 8020f92:	b103      	cbz	r3, 8020f96 <_sbrk_r+0x1a>
 8020f94:	6023      	str	r3, [r4, #0]
 8020f96:	bd38      	pop	{r3, r4, r5, pc}
 8020f98:	20014bd0 	.word	0x20014bd0

08020f9c <__sccl>:
 8020f9c:	b570      	push	{r4, r5, r6, lr}
 8020f9e:	780b      	ldrb	r3, [r1, #0]
 8020fa0:	4604      	mov	r4, r0
 8020fa2:	2b5e      	cmp	r3, #94	; 0x5e
 8020fa4:	bf0b      	itete	eq
 8020fa6:	784b      	ldrbeq	r3, [r1, #1]
 8020fa8:	1c48      	addne	r0, r1, #1
 8020faa:	1c88      	addeq	r0, r1, #2
 8020fac:	2200      	movne	r2, #0
 8020fae:	bf08      	it	eq
 8020fb0:	2201      	moveq	r2, #1
 8020fb2:	1e61      	subs	r1, r4, #1
 8020fb4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8020fb8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8020fbc:	42a9      	cmp	r1, r5
 8020fbe:	d1fb      	bne.n	8020fb8 <__sccl+0x1c>
 8020fc0:	b90b      	cbnz	r3, 8020fc6 <__sccl+0x2a>
 8020fc2:	3801      	subs	r0, #1
 8020fc4:	bd70      	pop	{r4, r5, r6, pc}
 8020fc6:	f082 0101 	eor.w	r1, r2, #1
 8020fca:	54e1      	strb	r1, [r4, r3]
 8020fcc:	1c42      	adds	r2, r0, #1
 8020fce:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8020fd2:	2d2d      	cmp	r5, #45	; 0x2d
 8020fd4:	f102 36ff 	add.w	r6, r2, #4294967295
 8020fd8:	4610      	mov	r0, r2
 8020fda:	d006      	beq.n	8020fea <__sccl+0x4e>
 8020fdc:	2d5d      	cmp	r5, #93	; 0x5d
 8020fde:	d0f1      	beq.n	8020fc4 <__sccl+0x28>
 8020fe0:	b90d      	cbnz	r5, 8020fe6 <__sccl+0x4a>
 8020fe2:	4630      	mov	r0, r6
 8020fe4:	e7ee      	b.n	8020fc4 <__sccl+0x28>
 8020fe6:	462b      	mov	r3, r5
 8020fe8:	e7ef      	b.n	8020fca <__sccl+0x2e>
 8020fea:	7816      	ldrb	r6, [r2, #0]
 8020fec:	2e5d      	cmp	r6, #93	; 0x5d
 8020fee:	d0fa      	beq.n	8020fe6 <__sccl+0x4a>
 8020ff0:	42b3      	cmp	r3, r6
 8020ff2:	dcf8      	bgt.n	8020fe6 <__sccl+0x4a>
 8020ff4:	4618      	mov	r0, r3
 8020ff6:	3001      	adds	r0, #1
 8020ff8:	4286      	cmp	r6, r0
 8020ffa:	5421      	strb	r1, [r4, r0]
 8020ffc:	dcfb      	bgt.n	8020ff6 <__sccl+0x5a>
 8020ffe:	43d8      	mvns	r0, r3
 8021000:	4430      	add	r0, r6
 8021002:	1c5d      	adds	r5, r3, #1
 8021004:	42b3      	cmp	r3, r6
 8021006:	bfa8      	it	ge
 8021008:	2000      	movge	r0, #0
 802100a:	182b      	adds	r3, r5, r0
 802100c:	3202      	adds	r2, #2
 802100e:	e7de      	b.n	8020fce <__sccl+0x32>

08021010 <strnlen>:
 8021010:	b510      	push	{r4, lr}
 8021012:	4602      	mov	r2, r0
 8021014:	4401      	add	r1, r0
 8021016:	428a      	cmp	r2, r1
 8021018:	4613      	mov	r3, r2
 802101a:	d101      	bne.n	8021020 <strnlen+0x10>
 802101c:	1a18      	subs	r0, r3, r0
 802101e:	bd10      	pop	{r4, pc}
 8021020:	781c      	ldrb	r4, [r3, #0]
 8021022:	3201      	adds	r2, #1
 8021024:	2c00      	cmp	r4, #0
 8021026:	d1f6      	bne.n	8021016 <strnlen+0x6>
 8021028:	e7f8      	b.n	802101c <strnlen+0xc>
	...

0802102c <_strtoul_l.isra.0>:
 802102c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021030:	4e3b      	ldr	r6, [pc, #236]	; (8021120 <_strtoul_l.isra.0+0xf4>)
 8021032:	4686      	mov	lr, r0
 8021034:	468c      	mov	ip, r1
 8021036:	4660      	mov	r0, ip
 8021038:	f81c 4b01 	ldrb.w	r4, [ip], #1
 802103c:	5da5      	ldrb	r5, [r4, r6]
 802103e:	f015 0508 	ands.w	r5, r5, #8
 8021042:	d1f8      	bne.n	8021036 <_strtoul_l.isra.0+0xa>
 8021044:	2c2d      	cmp	r4, #45	; 0x2d
 8021046:	d134      	bne.n	80210b2 <_strtoul_l.isra.0+0x86>
 8021048:	f89c 4000 	ldrb.w	r4, [ip]
 802104c:	f04f 0801 	mov.w	r8, #1
 8021050:	f100 0c02 	add.w	ip, r0, #2
 8021054:	2b00      	cmp	r3, #0
 8021056:	d05e      	beq.n	8021116 <_strtoul_l.isra.0+0xea>
 8021058:	2b10      	cmp	r3, #16
 802105a:	d10c      	bne.n	8021076 <_strtoul_l.isra.0+0x4a>
 802105c:	2c30      	cmp	r4, #48	; 0x30
 802105e:	d10a      	bne.n	8021076 <_strtoul_l.isra.0+0x4a>
 8021060:	f89c 0000 	ldrb.w	r0, [ip]
 8021064:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8021068:	2858      	cmp	r0, #88	; 0x58
 802106a:	d14f      	bne.n	802110c <_strtoul_l.isra.0+0xe0>
 802106c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8021070:	2310      	movs	r3, #16
 8021072:	f10c 0c02 	add.w	ip, ip, #2
 8021076:	f04f 37ff 	mov.w	r7, #4294967295
 802107a:	2500      	movs	r5, #0
 802107c:	fbb7 f7f3 	udiv	r7, r7, r3
 8021080:	fb03 f907 	mul.w	r9, r3, r7
 8021084:	ea6f 0909 	mvn.w	r9, r9
 8021088:	4628      	mov	r0, r5
 802108a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 802108e:	2e09      	cmp	r6, #9
 8021090:	d818      	bhi.n	80210c4 <_strtoul_l.isra.0+0x98>
 8021092:	4634      	mov	r4, r6
 8021094:	42a3      	cmp	r3, r4
 8021096:	dd24      	ble.n	80210e2 <_strtoul_l.isra.0+0xb6>
 8021098:	2d00      	cmp	r5, #0
 802109a:	db1f      	blt.n	80210dc <_strtoul_l.isra.0+0xb0>
 802109c:	4287      	cmp	r7, r0
 802109e:	d31d      	bcc.n	80210dc <_strtoul_l.isra.0+0xb0>
 80210a0:	d101      	bne.n	80210a6 <_strtoul_l.isra.0+0x7a>
 80210a2:	45a1      	cmp	r9, r4
 80210a4:	db1a      	blt.n	80210dc <_strtoul_l.isra.0+0xb0>
 80210a6:	fb00 4003 	mla	r0, r0, r3, r4
 80210aa:	2501      	movs	r5, #1
 80210ac:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80210b0:	e7eb      	b.n	802108a <_strtoul_l.isra.0+0x5e>
 80210b2:	2c2b      	cmp	r4, #43	; 0x2b
 80210b4:	bf08      	it	eq
 80210b6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80210ba:	46a8      	mov	r8, r5
 80210bc:	bf08      	it	eq
 80210be:	f100 0c02 	addeq.w	ip, r0, #2
 80210c2:	e7c7      	b.n	8021054 <_strtoul_l.isra.0+0x28>
 80210c4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80210c8:	2e19      	cmp	r6, #25
 80210ca:	d801      	bhi.n	80210d0 <_strtoul_l.isra.0+0xa4>
 80210cc:	3c37      	subs	r4, #55	; 0x37
 80210ce:	e7e1      	b.n	8021094 <_strtoul_l.isra.0+0x68>
 80210d0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80210d4:	2e19      	cmp	r6, #25
 80210d6:	d804      	bhi.n	80210e2 <_strtoul_l.isra.0+0xb6>
 80210d8:	3c57      	subs	r4, #87	; 0x57
 80210da:	e7db      	b.n	8021094 <_strtoul_l.isra.0+0x68>
 80210dc:	f04f 35ff 	mov.w	r5, #4294967295
 80210e0:	e7e4      	b.n	80210ac <_strtoul_l.isra.0+0x80>
 80210e2:	2d00      	cmp	r5, #0
 80210e4:	da07      	bge.n	80210f6 <_strtoul_l.isra.0+0xca>
 80210e6:	2322      	movs	r3, #34	; 0x22
 80210e8:	f8ce 3000 	str.w	r3, [lr]
 80210ec:	f04f 30ff 	mov.w	r0, #4294967295
 80210f0:	b942      	cbnz	r2, 8021104 <_strtoul_l.isra.0+0xd8>
 80210f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80210f6:	f1b8 0f00 	cmp.w	r8, #0
 80210fa:	d000      	beq.n	80210fe <_strtoul_l.isra.0+0xd2>
 80210fc:	4240      	negs	r0, r0
 80210fe:	2a00      	cmp	r2, #0
 8021100:	d0f7      	beq.n	80210f2 <_strtoul_l.isra.0+0xc6>
 8021102:	b10d      	cbz	r5, 8021108 <_strtoul_l.isra.0+0xdc>
 8021104:	f10c 31ff 	add.w	r1, ip, #4294967295
 8021108:	6011      	str	r1, [r2, #0]
 802110a:	e7f2      	b.n	80210f2 <_strtoul_l.isra.0+0xc6>
 802110c:	2430      	movs	r4, #48	; 0x30
 802110e:	2b00      	cmp	r3, #0
 8021110:	d1b1      	bne.n	8021076 <_strtoul_l.isra.0+0x4a>
 8021112:	2308      	movs	r3, #8
 8021114:	e7af      	b.n	8021076 <_strtoul_l.isra.0+0x4a>
 8021116:	2c30      	cmp	r4, #48	; 0x30
 8021118:	d0a2      	beq.n	8021060 <_strtoul_l.isra.0+0x34>
 802111a:	230a      	movs	r3, #10
 802111c:	e7ab      	b.n	8021076 <_strtoul_l.isra.0+0x4a>
 802111e:	bf00      	nop
 8021120:	0807b115 	.word	0x0807b115

08021124 <_strtoul_r>:
 8021124:	f7ff bf82 	b.w	802102c <_strtoul_l.isra.0>

08021128 <__submore>:
 8021128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802112c:	460c      	mov	r4, r1
 802112e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021134:	4299      	cmp	r1, r3
 8021136:	d11d      	bne.n	8021174 <__submore+0x4c>
 8021138:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802113c:	f7fe ff4a 	bl	801ffd4 <_malloc_r>
 8021140:	b918      	cbnz	r0, 802114a <__submore+0x22>
 8021142:	f04f 30ff 	mov.w	r0, #4294967295
 8021146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802114a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802114e:	63a3      	str	r3, [r4, #56]	; 0x38
 8021150:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8021154:	6360      	str	r0, [r4, #52]	; 0x34
 8021156:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802115a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802115e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8021162:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8021166:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802116a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802116e:	6020      	str	r0, [r4, #0]
 8021170:	2000      	movs	r0, #0
 8021172:	e7e8      	b.n	8021146 <__submore+0x1e>
 8021174:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8021176:	0077      	lsls	r7, r6, #1
 8021178:	463a      	mov	r2, r7
 802117a:	f000 f845 	bl	8021208 <_realloc_r>
 802117e:	4605      	mov	r5, r0
 8021180:	2800      	cmp	r0, #0
 8021182:	d0de      	beq.n	8021142 <__submore+0x1a>
 8021184:	eb00 0806 	add.w	r8, r0, r6
 8021188:	4601      	mov	r1, r0
 802118a:	4632      	mov	r2, r6
 802118c:	4640      	mov	r0, r8
 802118e:	f7fe f8bd 	bl	801f30c <memcpy>
 8021192:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8021196:	f8c4 8000 	str.w	r8, [r4]
 802119a:	e7e9      	b.n	8021170 <__submore+0x48>

0802119c <abort>:
 802119c:	b508      	push	{r3, lr}
 802119e:	2006      	movs	r0, #6
 80211a0:	f000 f880 	bl	80212a4 <raise>
 80211a4:	2001      	movs	r0, #1
 80211a6:	f7e0 fdef 	bl	8001d88 <_exit>
	...

080211ac <_fstat_r>:
 80211ac:	b538      	push	{r3, r4, r5, lr}
 80211ae:	4d07      	ldr	r5, [pc, #28]	; (80211cc <_fstat_r+0x20>)
 80211b0:	2300      	movs	r3, #0
 80211b2:	4604      	mov	r4, r0
 80211b4:	4608      	mov	r0, r1
 80211b6:	4611      	mov	r1, r2
 80211b8:	602b      	str	r3, [r5, #0]
 80211ba:	f7e0 fe34 	bl	8001e26 <_fstat>
 80211be:	1c43      	adds	r3, r0, #1
 80211c0:	d102      	bne.n	80211c8 <_fstat_r+0x1c>
 80211c2:	682b      	ldr	r3, [r5, #0]
 80211c4:	b103      	cbz	r3, 80211c8 <_fstat_r+0x1c>
 80211c6:	6023      	str	r3, [r4, #0]
 80211c8:	bd38      	pop	{r3, r4, r5, pc}
 80211ca:	bf00      	nop
 80211cc:	20014bd0 	.word	0x20014bd0

080211d0 <_isatty_r>:
 80211d0:	b538      	push	{r3, r4, r5, lr}
 80211d2:	4d06      	ldr	r5, [pc, #24]	; (80211ec <_isatty_r+0x1c>)
 80211d4:	2300      	movs	r3, #0
 80211d6:	4604      	mov	r4, r0
 80211d8:	4608      	mov	r0, r1
 80211da:	602b      	str	r3, [r5, #0]
 80211dc:	f7e0 fe33 	bl	8001e46 <_isatty>
 80211e0:	1c43      	adds	r3, r0, #1
 80211e2:	d102      	bne.n	80211ea <_isatty_r+0x1a>
 80211e4:	682b      	ldr	r3, [r5, #0]
 80211e6:	b103      	cbz	r3, 80211ea <_isatty_r+0x1a>
 80211e8:	6023      	str	r3, [r4, #0]
 80211ea:	bd38      	pop	{r3, r4, r5, pc}
 80211ec:	20014bd0 	.word	0x20014bd0

080211f0 <__malloc_lock>:
 80211f0:	4801      	ldr	r0, [pc, #4]	; (80211f8 <__malloc_lock+0x8>)
 80211f2:	f7fe be05 	b.w	801fe00 <__retarget_lock_acquire_recursive>
 80211f6:	bf00      	nop
 80211f8:	20014bdc 	.word	0x20014bdc

080211fc <__malloc_unlock>:
 80211fc:	4801      	ldr	r0, [pc, #4]	; (8021204 <__malloc_unlock+0x8>)
 80211fe:	f7fe be00 	b.w	801fe02 <__retarget_lock_release_recursive>
 8021202:	bf00      	nop
 8021204:	20014bdc 	.word	0x20014bdc

08021208 <_realloc_r>:
 8021208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802120a:	4607      	mov	r7, r0
 802120c:	4614      	mov	r4, r2
 802120e:	460e      	mov	r6, r1
 8021210:	b921      	cbnz	r1, 802121c <_realloc_r+0x14>
 8021212:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8021216:	4611      	mov	r1, r2
 8021218:	f7fe bedc 	b.w	801ffd4 <_malloc_r>
 802121c:	b922      	cbnz	r2, 8021228 <_realloc_r+0x20>
 802121e:	f7fe fe89 	bl	801ff34 <_free_r>
 8021222:	4625      	mov	r5, r4
 8021224:	4628      	mov	r0, r5
 8021226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021228:	f000 f858 	bl	80212dc <_malloc_usable_size_r>
 802122c:	42a0      	cmp	r0, r4
 802122e:	d20f      	bcs.n	8021250 <_realloc_r+0x48>
 8021230:	4621      	mov	r1, r4
 8021232:	4638      	mov	r0, r7
 8021234:	f7fe fece 	bl	801ffd4 <_malloc_r>
 8021238:	4605      	mov	r5, r0
 802123a:	2800      	cmp	r0, #0
 802123c:	d0f2      	beq.n	8021224 <_realloc_r+0x1c>
 802123e:	4631      	mov	r1, r6
 8021240:	4622      	mov	r2, r4
 8021242:	f7fe f863 	bl	801f30c <memcpy>
 8021246:	4631      	mov	r1, r6
 8021248:	4638      	mov	r0, r7
 802124a:	f7fe fe73 	bl	801ff34 <_free_r>
 802124e:	e7e9      	b.n	8021224 <_realloc_r+0x1c>
 8021250:	4635      	mov	r5, r6
 8021252:	e7e7      	b.n	8021224 <_realloc_r+0x1c>

08021254 <_raise_r>:
 8021254:	291f      	cmp	r1, #31
 8021256:	b538      	push	{r3, r4, r5, lr}
 8021258:	4604      	mov	r4, r0
 802125a:	460d      	mov	r5, r1
 802125c:	d904      	bls.n	8021268 <_raise_r+0x14>
 802125e:	2316      	movs	r3, #22
 8021260:	6003      	str	r3, [r0, #0]
 8021262:	f04f 30ff 	mov.w	r0, #4294967295
 8021266:	bd38      	pop	{r3, r4, r5, pc}
 8021268:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802126a:	b112      	cbz	r2, 8021272 <_raise_r+0x1e>
 802126c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021270:	b94b      	cbnz	r3, 8021286 <_raise_r+0x32>
 8021272:	4620      	mov	r0, r4
 8021274:	f000 f830 	bl	80212d8 <_getpid_r>
 8021278:	462a      	mov	r2, r5
 802127a:	4601      	mov	r1, r0
 802127c:	4620      	mov	r0, r4
 802127e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021282:	f000 b817 	b.w	80212b4 <_kill_r>
 8021286:	2b01      	cmp	r3, #1
 8021288:	d00a      	beq.n	80212a0 <_raise_r+0x4c>
 802128a:	1c59      	adds	r1, r3, #1
 802128c:	d103      	bne.n	8021296 <_raise_r+0x42>
 802128e:	2316      	movs	r3, #22
 8021290:	6003      	str	r3, [r0, #0]
 8021292:	2001      	movs	r0, #1
 8021294:	e7e7      	b.n	8021266 <_raise_r+0x12>
 8021296:	2400      	movs	r4, #0
 8021298:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802129c:	4628      	mov	r0, r5
 802129e:	4798      	blx	r3
 80212a0:	2000      	movs	r0, #0
 80212a2:	e7e0      	b.n	8021266 <_raise_r+0x12>

080212a4 <raise>:
 80212a4:	4b02      	ldr	r3, [pc, #8]	; (80212b0 <raise+0xc>)
 80212a6:	4601      	mov	r1, r0
 80212a8:	6818      	ldr	r0, [r3, #0]
 80212aa:	f7ff bfd3 	b.w	8021254 <_raise_r>
 80212ae:	bf00      	nop
 80212b0:	20000040 	.word	0x20000040

080212b4 <_kill_r>:
 80212b4:	b538      	push	{r3, r4, r5, lr}
 80212b6:	4d07      	ldr	r5, [pc, #28]	; (80212d4 <_kill_r+0x20>)
 80212b8:	2300      	movs	r3, #0
 80212ba:	4604      	mov	r4, r0
 80212bc:	4608      	mov	r0, r1
 80212be:	4611      	mov	r1, r2
 80212c0:	602b      	str	r3, [r5, #0]
 80212c2:	f7e0 fd4f 	bl	8001d64 <_kill>
 80212c6:	1c43      	adds	r3, r0, #1
 80212c8:	d102      	bne.n	80212d0 <_kill_r+0x1c>
 80212ca:	682b      	ldr	r3, [r5, #0]
 80212cc:	b103      	cbz	r3, 80212d0 <_kill_r+0x1c>
 80212ce:	6023      	str	r3, [r4, #0]
 80212d0:	bd38      	pop	{r3, r4, r5, pc}
 80212d2:	bf00      	nop
 80212d4:	20014bd0 	.word	0x20014bd0

080212d8 <_getpid_r>:
 80212d8:	f7e0 bd3c 	b.w	8001d54 <_getpid>

080212dc <_malloc_usable_size_r>:
 80212dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80212e0:	1f18      	subs	r0, r3, #4
 80212e2:	2b00      	cmp	r3, #0
 80212e4:	bfbc      	itt	lt
 80212e6:	580b      	ldrlt	r3, [r1, r0]
 80212e8:	18c0      	addlt	r0, r0, r3
 80212ea:	4770      	bx	lr

080212ec <_init>:
 80212ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80212ee:	bf00      	nop
 80212f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80212f2:	bc08      	pop	{r3}
 80212f4:	469e      	mov	lr, r3
 80212f6:	4770      	bx	lr

080212f8 <_fini>:
 80212f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80212fa:	bf00      	nop
 80212fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80212fe:	bc08      	pop	{r3}
 8021300:	469e      	mov	lr, r3
 8021302:	4770      	bx	lr
